language: java
name: HumanEval_31_is_prime
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return false;\n        for (long i =\
    \ 2l; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n \
    \       }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1l) return true;\n        if (n == 2l) return\
    \ true;\n        if (n % 2 == 0l && n != 2l) return false;\n\n        ArrayList<BigInteger>\
    \ primes = new ArrayList<>();\n        for (int p = 3; p <= Math.sqrt(n); p++)\
    \ {\n            if (n % p == 0l) primes.add(p);\n        }\n\n        for (BigInteger\
    \ prime : primes) {\n            if (n % prime == 0l) return false;\n        }\n\
    \n        return true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkzixxvmq.java:31: error: incompatible types: int cannot be converted\
    \ to BigInteger\n            if (n % p == 0l) primes.add(p);\n               \
    \                         ^\n/tmp/tmpkzixxvmq.java:35: error: bad operand types\
    \ for binary operator '%'\n            if (n % prime == 0l) return false;\n  \
    \                ^\n  first type:  long\n  second type: BigInteger\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n<2l) return false;\n        if (n==2l) return\
    \ true;\n        if (n==3l) return true;\n        for (int x=3l; x<=Math.sqrt(n);\
    \ x+=2)\n            if (n%x==0) return false;\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsqd78b41.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int x=3l; x<=Math.sqrt(n); x+=2)\n          \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1)\n            return true;\n        if\
    \ (n <= 3l)\n            return n != 1l && n != 3l;\n        if (n % 2 == 1l)\n\
    \            return false;\n        for (int i = 3l; i * i <= n; i += 2l)\n  \
    \          if (n % i == 0l)\n                return false;\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmjnivktn.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int i = 3l; i * i <= n; i += 2l)\n          \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if(n < 2) return false;\n        // Sieve of Eratosthenes\
    \ - http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n        final boolean\
    \ prime[] = new boolean[n];\n        Arrays.fill(prime, false);\n        final\
    \ int sqrt_n = Math.sqrt(n);\n        for(int p = 2; p * p <= sqrt_n; p++){\n\
    \            if(prime[p] == false){\n                for(int i = p * p; i <= sqrt_n;\
    \ i += p){\n                    prime[i] = true;\n                }\n        \
    \    }\n        }\n        for(int p = 0; p < n; p++){\n            if(prime[p]\
    \ == true) return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp77p8uzxp.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n        final boolean prime[] = new boolean[n];\n        \
    \                                    ^\n/tmp/tmp77p8uzxp.java:29: error: incompatible\
    \ types: possible lossy conversion from double to int\n        final int sqrt_n\
    \ = Math.sqrt(n);\n                                    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Trivial case: 2 or less.\n        if (n < 2l)\
    \ return true;\n        // Trivial case: 2 or greater.\n        if (n > 2l) return\
    \ false;\n        // Trivial case: 1 and only 1.\n        if (n == 1l) return\
    \ true;\n        // Trivial case: 1 and only 0.\n        if (n == 0l) return false;\n\
    \n        // Sieve of Eratosthenes.\n        long limit = 2l;\n        while (limit\
    \ < n) {\n            // If n is less than or equal to limit, we've found a prime\
    \ number.\n            if (n < limit) return false;\n            // Set limit\
    \ to limit-2 and start again.\n            limit = limit - 2l;\n        }\n\n\
    \        // We know n is not a prime, so return false.\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplr6k4i9z.java:48)\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n<=1) return false;\n        ArrayList<Long>\
    \ primes = new ArrayList<Long>();\n        primes.add((2l));\n        primes.add((3l));\n\
    \        long p = 4l; // First prime number other than 2.\n        long i = 3l;\
    \ // First prime number other than 3.\n        while (true) {\n            if\
    \ (i>=n) {\n                if (primes.contains(n)) {\n                    return\
    \ true;\n                } else {\n                    return false;\n       \
    \         }\n            }\n            long x = Math.sqrt(p);\n            while\
    \ (x%i == 0) {\n                if (primes.contains(i)) {\n                  \
    \  return true;\n                } else {\n                    return false;\n\
    \                }\n                p = p;\n                i++;\n           \
    \ }\n            p+=i;\n            i = 3l; // Another prime number other than\
    \ 3.\n        }\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1pv7qmz8.java:39: error: incompatible types: possible lossy conversion\
    \ from double to long\n            long x = Math.sqrt(p);\n                  \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Use only even numbers to make life easy.\n   \
    \     if (n % 2 == 0) return false;\n\n        ArrayList<Long> primes = new ArrayList<Long>();\n\
    \        // Fill up an list of primes up to sqrt(n).\n        for (int p = 3;\
    \ p < Math.sqrt(n) + 1; p++) {\n            if (n % p == 0) primes.add(p);\n \
    \       }\n\n        // Check for composite numbers.\n        for (int i = primes.size()\
    \ - 1; i >= 0; i--) {\n            Long p = primes.get(i);\n            for (int\
    \ j = i + 1; j < primes.size(); j++) {\n                if (i % primes.get(j)\
    \ == 0) return false;\n            }\n        }\n\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukbav8rv.java:31: error: incompatible types: int cannot be converted\
    \ to Long\n            if (n % p == 0) primes.add(p);\n                      \
    \                 ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1l)\n            return false;\n       \
    \ if (n == 2l)\n            return true;\n        if (n % 2 == 0)\n          \
    \  return false;\n        if (n % 3 == 0)\n            return false;\n       \
    \ if (n % 5 == 0)\n            return false;\n        if (n % 7 == 0)\n      \
    \      return false;\n        long[] ps = {3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109,\
    \ 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,\
    \ 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283,\
    \ 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389,\
    \ 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487,\
    \ 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599,\
    \ 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691,\
    \ 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\
    \ 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919,\
    \ 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997};\n        long[] ns =\
    \ {3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 37\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp60lwu0gt.java:39: error: ';' expected\n    }\n     ^\n/tmp/tmp60lwu0gt.java:40:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010878
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long m = n;\n        long t = 1;\n        while (m\
    \ < 2 * t) {\n            if (m % 2 == 0) return false;\n            m += t;\n\
    \            t += 1;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl4xr_nmv.java:35)\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l)\n            return false;\n        if\
    \ (n == 1l)\n            return true;\n        if (n == 2l)\n            return\
    \ true;\n        if (n % 2l == 0l)\n            return false;\n        long limit\
    \ = Math.sqrt(n) - 1l;\n        for (long i = 3l; i * i <= limit; i += 2l) {\n\
    \            if (n % i == 0l)\n                return false;\n        }\n    \
    \    return true;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpevljymo_.java:33: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long limit = Math.sqrt(n) - 1l;\n             \
    \                     ^\n1 error\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Use trial division.\n        for (int i = 2; i\
    \ <= n / 2; i++) {\n            if (n % i == 0) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdng9vt7d.java:40)\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long factor = 2;\n        while (factor * factor\
    \ <= n) {\n            if (n % factor == 0) {\n                return false;\n\
    \            }\n            factor++;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyg7zufe3.java:41)\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 2l) return true;\n        if (n == 1l) return\
    \ false;\n        if (n % 2 == 0l) return false;\n        if (n % 3 == 0l) return\
    \ false;\n        long x = 1l;\n        long y = 2l;\n        while (y < n) x\
    \ = (x * y) / y;\n        return n == x;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010884
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2) return false;\n        if (n <= 3) return\
    \ true;\n        if ((n % 2) == 0) return false;\n        if (n == 2) return true;\n\
    \        if ((n % 3) == 0) return false;\n        if (n % 3 == 2) return true;\n\
    \        int i = 5;\n        while (i < (n+1)/3) {\n            if (n % i == 0)\
    \ return false;\n            i += 6;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpowzlfkw_.java:50)\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1l) return true;\n        if (n <= 2l) return\
    \ false;\n        if (n % 2l == 0l) return true;\n\n        for (long d = 2l;\
    \ d < n; d += 2l) {\n            if (n % d == 0l) return false;\n        }\n\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiln4c58c.java:36)\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2) return false;\n        if (n == 2) return\
    \ true;\n        if (n % 2 == 0) return false;\n        // Use trial division\
    \ by prime numbers to test primality of a number.\n        // The first prime\
    \ that can divide n is 3 (since 2 is the only even prime).\n        // Prime numbers\
    \ are generated by iterating the following until a remainder is found:\n     \
    \   //   If (n mod p == 0) then return false \n        //   If (n mod (p+1) =\
    \ 0) then return (p +1)\n        // The first time p is found that is even, p\
    \ = 6 (since all odd numbers are even). \n        // The first time p is found\
    \ that is odd, p = 7 (since all odd numbers are odd). \n        // The first time\
    \ p is found that is even, p = 8 (since all odd numbers are odd). \n        //\
    \ The first time p is found that is odd, p = 9 (since all odd numbers are even).\n\
    \        // Therefore all odd numbers are odd, and all even numbers are even.\n\
    \        // Therefore all numbers can be tested to see if they are prime by generating\
    \ all odd numbers \n        // up to sqrt(n).\n        if (n % 6 == 0) return\
    \ (n % 7 == 0 || n % 8 == 0 || n % 9 == 0) ? false : (n % 7 == 0 || n % 8 == 0\
    \ || n % 9 == 0) ? true : (n % 7 == 0 || n % 8 == 0) ? false : (n % 7 == 0) ?\
    \ true : (n % 8 == 0) ? true : (n % 9 == 0) ? true : (n % 9) ? false : (n % 9)\
    \ ? false : false;\n        if (n % 12 == 0) return (n % 13 == 0 || n % 14 ==\
    \ 0 || n % 15 == 0) ? false : (n % 13 == 0 || n % 14 == 0 || n % 15 == 0) ? true\
    \ : (n % 13 == 0 || n % 14 == 0) ? true : (n % 13 == 0) ? true : (n % 14 == 0)\
    \ ? true : (n % 15 == 0) ? true : (n % 15) ? false : (n % 15) ? false : false;\n\
    \        if (n % 18 == 0) return (n % 19 == 0 || n % 20 == 0 || n % 21 == 0) ?\
    \ false : (n % 19 == 0 || n % 20 == 0 || n % 21 == 0) ? true : (n % 19 == 0 ||\
    \ n % 20 == 0) ? true : (n % 19 == 0) ? true : (n % 20 == 0) ? true : (n % 21\
    \ == 0) ? true : (n % 21) ? false : (n % 21) ? false : false;\n        if (n %\
    \ 24 == 0) return (n % 25 == 0 || n % 26 == 0 || n % 27 == 0) ? false : (n % 25\
    \ == 0 || n % 26 == 0 || n % 27 == 0) ? true : (n % 25 == 0 || n % 26 == 0) ?\
    \ true : (n % 25 == 0) ? true : (n % 26 == 0) ? true : (n % 27 == 0) ? true :\
    \ (\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8zm6vtte.java:44: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1660010878
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        boolean prime;\n        for(long i = 2l; i <= Math.sqrt(n);\
    \ ++i) {\n            if(n % i == 0l) prime = false;\n            else prime =\
    \ true;\n            if (prime) return true;\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvv2pqb72.java:44)\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) { return false; }\n        if (n == 1)\
    \ { return true; }\n        if (n == 2l) { return true; }\n        if (n % 2l\
    \ == 0l) { return isPrime((n - 1l)); }\n        if (n % 3l == 0l) { return isPrime((n\
    \ - 2l)); }\n        if (isPrime((n - 1l))) { return true; }\n        if (isPrime((n\
    \ - 2l))) { return true; }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010884
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Trial division with prime number check\n     \
    \   if (n <= 1) {\n            return false;\n        }\n        if (n >= 2) {\n\
    \            return true;\n        }\n        if (n <= 3) {\n            return\
    \ false;\n        }\n        // Check to see if n is evenly divisible by 2\n \
    \       if (n % 2 == 0) {\n            return false;\n        }\n        // Check\
    \ to see if n is evenly divisible by 3\n        if (n % 3 == 0) {\n          \
    \  return false;\n        }\n        // Check to see if n is oddly divisible by\
    \ 2\n        if (n % 2 != 0) {\n            return true;\n        }\n        //\
    \ Check to see if n is oddly divisible by 3\n        if (n % 3 != 0) {\n     \
    \       return true;\n        }\n        // If we reach this point, we have a\
    \ number that is oddly divisible by 2 AND 3\n        // Therefore, n cannot be\
    \ prime\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplu3qi1a_.java:56)\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1)\n            return false;\n\n      \
    \  if (n == 2 || n == 3 || n == 5)\n            return true;\n\n        if (n\
    \ % 2 == 0 || n % 3 == 0)\n            return false;\n\n        if (n % 5 == 0)\n\
    \            return false;\n\n        // If n is evenly divisible by 2 and 5,\
    \ then it must be divisible by 3.\n        if (n % 2 == 0 && n % 3 == 0)\n   \
    \         return false;\n\n        // If n is evenly divisible by 3 and 5, then\
    \ it must be divisible by 5.\n        if (n % 3 == 0 && n % 5 == 0)\n        \
    \    return false;\n\n        // If n is evenly divisible by 3 and 5, then it\
    \ must be divisible by 7.\n        if (n % 3 == 0 && n % 5 == 0 && n % 7 == 0)\n\
    \            return false;\n\n        // If n is evenly divisible by 7, then it\
    \ must be divisible by 11.\n        if (n % 7 == 0 && n % 11 == 0)\n         \
    \   return false;\n\n        // If n is evenly divisible by 11, then it must be\
    \ divisible by 13 and\n        // by 15.\n        if (n % 11 == 0 && n % 13 ==\
    \ 0 && n % 15 == 0)\n            return false;\n\n        // If n is evenly divisible\
    \ by 13 and 15, then it must be divisible by 17.\n        if (n % 13 == 0 && n\
    \ % 15 == 0 && n % 17 == 0)\n            return false;\n\n        // If n is evenly\
    \ divisible by 17, then it must be divisible by 19.\n        if (n % 17 == 0 &&\
    \ n % 19 == 0)\n            return false;\n\n        // If n is evenly divisible\
    \ by 19, then it must be divisible by 23 and\n        // by 27.\n        if (n\
    \ % 19 == 0 && n % 23 == 0 && n % 27 == 0)\n            return false;\n\n    \
    \    // If n is evenly divisible by 23, then it must be divisible by 29 and by\n\
    \        // 31.\n        if (n % 23 == 0 && n % 29 == 0 && n % 31 == 0)\n    \
    \        return false;\n\n        // If n is evenly divisible by 29, then it must\
    \ be divisible by 31 or by\n        // 33. Also known as prime number.\n     \
    \   if (n % 29 == 0 && n % 31 == 0 && n % 33 == 0)\n            return false;\n\
    \n        // If n is evenly divisible by 31, then it must be divisible by 37 and\
    \ by\n        // 39.\n        if (n % 31 == 0 && n % 37 == 0 && n % 39 == 0)\n\
    \            return false;\n\n        // If n is evenly divisible by 37, then\
    \ it must be divisible by 41 and by\n        // 43.\n        if (n % 37 == 0 &&\
    \ n % 41 == 0 && n % 43 == 0)\n            return false;\n\n        // If n is\
    \ evenly divisible by 41 and 43, then it must be divisible by\n        // 47 and\
    \ by 51.\n        if (n % \n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphfcx6su4.java:94: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1660010878
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // TODO: implement a more efficient algorithm \n\
    \        for (long i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i ==\
    \ 0)\n                return false;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd1y_jthz.java:39)\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if ((n < 1l) || (n < 2l)) return false;\n       \
    \ long[] a = new long[n];\n        Arrays.fill(a, 2l);\n        a[1] = a[2] =\
    \ 2l;\n        for (int i = 3l; i * i <= n; i += 2l) a[i] = a[2 * i] = a[2 * i\
    \ + 1] = 2l;\n        for (int i = 5l; i * i <= n; i += 2l) a[i] = a[2 * i] =\
    \ a[2 * i + 1] = a[3 * i] = a[3 * i + 1] = 2l;\n        for (int i = 7l; i * i\
    \ <= n; i += 2l) a[i] = a[2 * i] = a[2 * i + 1] = a[3 * i] = a[3 * i + 1] = a[4\
    \ * i] = a[4 * i + 1] = a[5 * i] = a[5 * i + 1] = 2l;\n        long p = 2l;\n\
    \        long m = n;\n        for (int i = 3l; i <= Math.sqrt(n); i += 2l) {\n\
    \            if (m % i == 0) {\n                m = m / i;\n                p\
    \ = i;\n                break;\n            }\n        }\n        if (m != 1l)\
    \ return true;\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3x3zha3.java:26: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n/tmp/tmpv3x3zha3.java:29: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int i = 3l; i * i <= n; i += 2l) a[i] = a[2 *\
    \ i] = a[2 * i + 1] = 2l;\n                     ^\n/tmp/tmpv3x3zha3.java:30: error:\
    \ incompatible types: possible lossy conversion from long to int\n        for\
    \ (int i = 5l; i * i <= n; i += 2l) a[i] = a[2 * i] = a[2 * i + 1] = a[3 * i]\
    \ = a[3 * i + 1] = 2l;\n                     ^\n/tmp/tmpv3x3zha3.java:31: error:\
    \ incompatible types: possible lossy conversion from long to int\n        for\
    \ (int i = 7l; i * i <= n; i += 2l) a[i] = a[2 * i] = a[2 * i + 1] = a[3 * i]\
    \ = a[3 * i + 1] = a[4 * i] = a[4 * i + 1] = a[5 * i] = a[5 * i + 1] = 2l;\n \
    \                    ^\n/tmp/tmpv3x3zha3.java:34: error: incompatible types: possible\
    \ lossy conversion from long to int\n        for (int i = 3l; i <= Math.sqrt(n);\
    \ i += 2l) {\n                     ^\n5 errors\n"
  stdout: ''
  timestamp: 1660010879
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if ((n <= 1) || (n == 2)) {\n            return true;\n\
    \        }\n\n        // The numbers 1 and n are both less than or equal to sqrt(n).\n\
    \        // The only even number less than or equal to sqrt(n) that is even\n\
    \        // is 2, so if we check them in order we can get away with this\n   \
    \     // optimization.\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n\
    \            if (n % i == 0) {\n                return false;\n            }\n\
    \        }\n\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4_48hwmd.java:42)\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1) return false;\n        if (n == 2) return\
    \ true;\n        if (n % 2 == 0) return false;\n        long sqr = n *n;\n   \
    \     long limit = sqr * Math.sqrt(sqr);\n        long num = 2l;\n        while\
    \ (num < limit) {\n            if (num % n == 0) {\n                return false;\n\
    \            }\n            num++;\n        }\n        return true;\n    }\n \
    \   public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2uhjurvd.java:29: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long limit = sqr * Math.sqrt(sqr);\n          \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        return n % 2 == 0 || n % 3 == 0 || n % 5 == 0 ||\
    \ n % 7 == 0;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvk1aq3be.java:28)\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1) {\n            return false;\n      \
    \  }\n        if (n == 2) {\n            return true;\n        }\n\n        for\
    \ (int i = 3; i * i <= n; i += 2) {\n            if (n % i == 0) {\n         \
    \       return false;\n            }\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6_btvx7u.java:40)\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // The first number you test for primeness, start\
    \ there.\n        // (1)\n        // This number is odd, so you can't count on\
    \ the fact that any even number\n        // is prime. Your starting number, 2,\
    \ is odd.\n        // (2)\n        // Since 2 is odd, all the even numbers you\
    \ find are composite.\n        // (3)\n        // Since 3 is even, all the odd\
    \ numbers you find are also even.\n        // (4)\n        // Since 4 is even,\
    \ all the odd numbers you find are also odd.\n        // (5)\n        // Since\
    \ 5 is odd, all the even numbers you find are also odd.\n        // (6)\n    \
    \    // Since 6 is even, all the odd numbers you find are composite.\n       \
    \ // (7)\n        // Since 7 is even, all the odd numbers you find are also composite.\n\
    \        // (8)\n        // Since 8 is even, all the odd numbers you find are\
    \ composite.\n        // (9)\n        // Since 9 is even, all the odd numbers\
    \ you find are composite.\n        // (10)\n        // Since 10 is even, all the\
    \ odd numbers you find are composite.\n        // (11)\n        // Since 11 is\
    \ even, all the odd numbers you find are composite.\n        // (12)\n       \
    \ // Since 12 is even, all the odd numbers you find are composite.\n        //\
    \ (13)\n        // Since 13 is even, all the odd numbers you find are composite.\n\
    \        // (14)\n        // Since 14 is even, all the odd numbers you find are\
    \ composite.\n        // (15)\n        // Since 15 is even, all the odd numbers\
    \ you find are composite.\n        // (16)\n        // Since 16 is even, all the\
    \ odd numbers you find are composite.\n        // (17)\n        // Since 17 is\
    \ even, all the odd numbers you find are composite.\n        // (18)\n       \
    \ // Since 18 is even, all the odd numbers you find are composite.\n        //\
    \ (19)\n        // Since 19 is even, all the odd numbers you find are composite.\n\
    \        // (20)\n        // Since 20 is even, all the odd numbers you find are\
    \ composite.\n        // (21)\n        // Since 21 is even, all the odd numbers\
    \ you find are composite.\n        // (22)\n        // Since 22 is even, all the\
    \ odd numbers you find are composite.\n        // (23)\n        // Since 23 is\
    \ even, all the odd numbers you find are composite.\n        // (24)\n       \
    \ // Since 24 is even, all the odd numbers you find are composite.\n        //\
    \ (25)\n        // Since 25 is even, all the odd numbers you find are composite.\n\
    \        // (26)\n\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9j_cg_hm.java:79: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1l)\n            return true;\n        if\
    \ (n == 2l)\n            return true;\n        if (n % 2 == 0l || n % 3 == 0l)\n\
    \            return false;\n\n        long sqrtN = Math.sqrt(n);\n        long\
    \ d = 2l;\n        long p = 3l;\n        long u = 7l;\n        boolean even =\
    \ true;\n\n        for (;;) {\n            while (n % d == 0l && d <= sqrtN) {\n\
    \                d += 2l;\n                p += 2l;\n                u += 2l;\n\
    \            }\n\n            if (n == p) {\n                return true;\n  \
    \          }\n\n            if (n == u) {\n                return false;\n   \
    \         }\n\n            if (even) {\n                if (n % 2l == 0l) {\n\
    \                    return false;\n                }\n\n                even\
    \ = false;\n            }\n\n            n += 2l;\n\n            d += 2l;\n  \
    \          p += 2l;\n            u += 2l;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ycyys2y.java:32: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long sqrtN = Math.sqrt(n);\n                  \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long limit = (long)(Math.sqrt(n) + 1);\n        //\
    \ Iterates until i reaches limit or n is divisible by i\n        for(long i =\
    \ 2; i <= limit; i++) {\n            if (n % i == 0) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplo4r3sum.java:41)\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 2l) return false;\n        for (long i =\
    \ 3l; i * i <= n; i += 6l) {\n            if (n % i == 0l || n % (i + 2l) == 0l)\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsbvd1y06.java:32)\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 2l) return true;\n        if (n % 2 == 0l)\
    \ return false;\n        if (n % 3 == 0l) return true;\n        if (n % 5 == 0l)\
    \ return true;\n        if (n % 7 == 0l) return true;\n        long max = (long)\
    \ (Math.sqrt(n));\n        for (int i = 2l; i <= max; i++) {\n            if (n\
    \ % i == 0l) {\n                return false;\n            }\n        }\n    \
    \    return true;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb1mh65yd.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int i = 2l; i <= max; i++) {\n              \
    \       ^\n1 error\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1l)\n            return true;\n        if\
    \ (n == 2l)\n            return true;\n        if (n == 3l)\n            return\
    \ true;\n\n        // Use a primitive long type to check for prime numbers.\n\
    \        long n = Math.abs(n);\n        boolean prime = true;\n\n        // Checks\
    \ all odd numbers for primeness.\n        for (long i = 3l; i <= n / 2l; i +=\
    \ 2l) {\n            if (n % i == 0l)\n                prime = false;\n      \
    \  }\n\n        // Checks all even numbers for primeness.\n        for (long i\
    \ = 5l; i <= n / 2l; i += 2l) {\n            if (n % i == 0l)\n              \
    \  prime = false;\n        }\n\n        return prime;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpidm5h78q.java:33: error: variable n is already defined in method\
    \ isPrime(long)\n        long n = Math.abs(n);\n             ^\n1 error\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        return n <= 1l || !(LongStream.rangeClosed(1l, Math.sqrt(n))\n\
    \                .anyMatch(i -> n % i == 0));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_uvtt2cg.java:25: error: incompatible types: possible lossy conversion\
    \ from double to long\n        return n <= 1l || !(LongStream.rangeClosed(1l,\
    \ Math.sqrt(n))\n                                                            \
    \    ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return false; // Base case\n        boolean\
    \ check = // check is true if the number is prime\n                ((n % 2l) ==\
    \ 0) // If the number is a even number divided by 2\n                && (n % 3l\
    \ == 0) // and it's also a third number\n                && (n % 5l == 0) // and\
    \ it's a fifth number\n                && (n % 7l == 0) // and it's a seventh\
    \ number\n                && (n % 11l == 0) // and it's a prime number\n     \
    \           && (n % 13l == 0) // and it's a prime number\n                && (n\
    \ % 17l == 0) // and it's a prime number\n                && (n % 19l == 0) //\
    \ and it's a prime number\n                && (n % 23l == 0) // and it's a prime\
    \ number\n                && (n % 29l == 0) // and it's a prime number\n     \
    \           && (n % 31l == 0) // and it's a prime number\n                && (n\
    \ % 37l == 0) // and it's a prime number\n                && (n % 41l == 0) //\
    \ and it's a prime number\n                && (n % 43l == 0) // and it's a prime\
    \ number\n                && (n % 47l == 0) // and it's a prime number\n     \
    \           && (n % 53l == 0) // and it's a prime number\n                && (n\
    \ % 59l == 0) // and it's a prime number\n                && (n % 61l == 0) //\
    \ and it's a prime number\n                && (n % 67l == 0) // and it's a prime\
    \ number\n                && (n % 71l == 0) // and it's a prime number\n     \
    \           && (n % 73l == 0) // and it's a prime number\n                && (n\
    \ % 79l == 0) // and it's a prime number\n                && (n % 83l == 0) //\
    \ and it's a prime number\n                && (n % 89l == 0) // and it's a prime\
    \ number\n                && (n % 97l == 0) // and it's a prime number\n     \
    \           && (n % 101l == 0) // and it's a prime number\n                &&\
    \ (n % 103l == 0) // and it's a prime number\n                && (n % 107l ==\
    \ 0) // and it's a prime number\n                && (n % 109l == 0) // and it's\
    \ a prime number\n                && (n % 113l == 0) // and it's a prime number\n\
    \                && (n % 127l == 0) // and it's a prime number\n             \
    \   && (n % 131l == 0) // and it's a prime number\n                && (n % 137l\
    \ == 0) // and it's a prime number\n                && (n % 139l == 0) // and\
    \ it's a prime number\n                && (n % 141l == 0) // and it's a prime\
    \ number\n                && (n % 147l == 0) // and it's a prime number\n    \
    \            && (n % 149l == 0) // and it's a prime \n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplcz3rsee.java:63: error: ';' expected\n                && (n %\
    \ 149l == 0) // and it's a prime \n                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n<2l) return true;\n        for (long i=2l; i<=Math.sqrt(n);\
    \ i++) {\n            if (n%i==0l) return false;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxjnstk_a.java:38)\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if(n == 1) {\n            return false;\n       \
    \ }\n        for(int i = 3; i <= Math.sqrt(n); i++) {\n            if(n%i == 0)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprmd805w6.java:36)\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Base cases: 0 and 1 are composite\n        if\
    \ (n == 0l || n == 1l) return true;\n        if (n % 2l == 0l) return false;\n\
    \        if (n % 3l == 0l) return false;\n        if (n % 5l == 0l) return false;\n\
    \        if (n % 7l == 0l) return false;\n        if (n % 11l == 0l) return false;\n\
    \n        // Sieve for prime candidates\n        ArrayList sieve = new ArrayList();\n\
    \        for (long i = 5l; i <= Math.sqrt(n); i += 6l) {\n            if (n %\
    \ i == 0l) continue;\n            ArrayList factors = new ArrayList();\n     \
    \       for (long f = 2l; f <= Math.sqrt(n); f += 6l) {\n                if (n\
    \ % f == 0l) continue;\n                if (f * f <= n) factors.add(f);\n    \
    \        }\n            if (!factors.isEmpty()) {\n                for (Object\
    \ factor: factors) {\n                    sieve.add(factor);\n               \
    \ }\n            }\n        }\n        for (Object f: sieve) {\n            if\
    \ (n % f == 0l) return true;\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n \
    \   assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkpr2xbzf.java:49: error: bad operand types for binary operator\
    \ '%'\n            if (n % f == 0l) return true;\n                  ^\n  first\
    \ type:  long\n  second type: Object\nNote: /tmp/tmpkpr2xbzf.java uses unchecked\
    \ or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2) return false; // 1\n        if (n % 2\
    \ == 0) return false; // 2\n        if (n % 3 == 0) return false; // 3 or 5\n\
    \        if (n % 5 == 0) return false; // 6 or 8\n        int sqrt = (int) Math.sqrt(n);\n\
    \        // Check up to square root.\n        for (int i = 3; i <= sqrt; i +=\
    \ 2) {\n            if (n % i == 0) return false; // No factors.\n        }\n\
    \        // If we get here, n is prime.\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n \
    \   assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4ggu4c17.java:45)\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        int i;\n        for (i = 2; i <= n/2; ++i) {\n  \
    \          if (n % i == 0) {\n                return false;\n            }\n \
    \       }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvdjr05tb.java:40)\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        return (n == 0 || n % 2 == 0 && n < n-2);\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpliuno_80.java:29)\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        boolean isPrime = true;\n        for (long i = 2;\
    \ i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                isPrime\
    \ = false;\n                break;\n            }\n        }\n        return isPrime;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6wjph4td.java:41)\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        boolean result = true;\n        for (int i = 2; i\
    \ <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                result\
    \ = false;\n                break;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppu0w61ci.java:41)\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1l) return false; // 0 and 1 are not primes.\n\
    \        if (n % 2 == 0l) return false; // even numbers aren't primes.\n     \
    \   if (n % 3 == 0l) return true; // every number other than 0,1 and 2 are prime.\n\
    \        long maxTrial = Math.sqrt(n) + 2l;\n        long trial;\n        for\
    \ (trial = 2l; trial < maxTrial; trial += 2l) {\n            if (n % trial !=\
    \ 0l) return true;\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp806x2xhd.java:28: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long maxTrial = Math.sqrt(n) + 2l;\n          \
    \                           ^\n1 error\n"
  stdout: ''
  timestamp: 1660010880
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if(n < 2l) throw new java.lang.IllegalArgumentException(\"\
    Not a prime number: \" + n);\n        if(n % 2 == 0) return false;\n        for(long\
    \ i = 3l; i * i <= n; i += 2l) {\n            if(n%i == 0l) return false;\n  \
    \      }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: Not a\
    \ prime number: 1\n\tat Problem.isPrime(tmpde36bwpk.java:25)\n\tat Problem.main(tmpde36bwpk.java:39)\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        int div = 1;\n        while (div < Math.sqrt(n))\
    \ {\n            if (n % div == 0)\n                return false;\n          \
    \  ++div;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdtubpgnu.java:35)\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long m = n;\n        long sqrtn = Math.sqrt(m);\n\
    \        long x = 2;\n        while (sqrtn != x + 1) {\n            if (n % x\
    \ == 0) {\n                return false;\n            }\n            x = x + 1;\n\
    \            sqrtn = Math.sqrt(m);\n        }\n        return true;\n    }\n \
    \   public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvlln9j3v.java:26: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long sqrtn = Math.sqrt(m);\n                  \
    \            ^\n/tmp/tmpvlln9j3v.java:33: error: incompatible types: possible\
    \ lossy conversion from double to long\n            sqrtn = Math.sqrt(m);\n  \
    \                           ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2) {\n            return false;\n       \
    \ }\n        if (n == 2) {\n            return true;\n        }\n        if (n\
    \ % 2 == 0) {\n            return false;\n        }\n        for (int i = 3; i\
    \ * i <= n; i += 2) {\n            if (n % i == 0) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        boolean result = true;\n        for (int i = 2; i\
    \ <= (int) Math.sqrt(n); i++) {\n            if (n % i == 0) {\n             \
    \   result = false;\n                break;\n            }\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7bmzyfm6.java:41)\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return false; // 0 and 1 are not prime\n\
    \        if (n == 2l) return true;\n        if (n % 2l == 0l) return false;\n\n\
    \        // Sieve of Eratosthenes for odd numbers\n        // http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\n\
    \        List<Long> primes = new ArrayList<>();\n        for (int i = 2l; i <=\
    \ Math.sqrt(n); i++) {\n            if (n % i == 0l) continue;\n            for\
    \ (long d = i * i; d < n; d += i) {\n                primes.add(d);\n        \
    \    }\n        }\n        return primes.stream().anyMatch(p -> n%p == 0l);\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgkoms3vf.java:32: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int i = 2l; i <= Math.sqrt(n); i++) {\n     \
    \                ^\n1 error\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long sqrtN = Math.sqrt(n);\n        for(long i =\
    \ 2; i <= sqrtN; i++) {\n            if(n % i == 0)\n                return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4oq4p14j.java:25: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long sqrtN = Math.sqrt(n);\n                  \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        Set<Long> primes = new HashSet<>();\n        for\
    \ (long i = 2; i < n; i++) {\n            if (primes.contains(i)) {\n        \
    \        continue;\n            }\n            if (n % i == 0) {\n           \
    \     return false;\n            }\n            primes.add(i);\n        }\n  \
    \      return true;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptny_r80i.java:44)\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1l) return true;\n        if (n % 2 == 0\
    \ || n % 3 == 0) return false;\n        long m = (long) Math.sqrt(n);\n      \
    \  long i = 3l;\n        while (i <= m) {\n            if (n % i == 0 || n % (i\
    \ + 1l) == 0) return false;\n            i += 2l;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp04hozkg3.java:42)\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1l)\n            return false;\n       \
    \ if (n == 1l)\n            return true;\n        if (n % 2l == 0l)\n        \
    \    return false;\n        if (n % (3l) == 0l)\n            return true;\n  \
    \      if (n % 5l == 0l)\n            return false;\n        long m = 5l;\n  \
    \      for (; (n%(m+2l)) != 0l; m += 2l)\n            if (n%(m+1l) != 0l)\n  \
    \              return false;\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzqmskbhg.java:43)\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 1l) return false;\n        long[] factors\
    \ = factorize(n);\n        if (factors.length < 2) return factors.length == 0;\n\
    \        return factors.stream().anyMatch(i -> i == 1l);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2cizygkg.java:26: error: cannot find symbol\n        long[] factors\
    \ = factorize(n);\n                         ^\n  symbol:   method factorize(long)\n\
    \  location: class Problem\n/tmp/tmp2cizygkg.java:28: error: cannot find symbol\n\
    \        return factors.stream().anyMatch(i -> i == 1l);\n                   \
    \   ^\n  symbol:   method stream()\n  location: variable factors of type long[]\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // The number is odd if the lowest set bit (msb)\
    \ is set to 1.\n        if (n % 2 == 0) return false;\n        // If n is odd,\
    \ then set k to ceil(sqrt(n)) and set its msb to 1 before iterating from 2 to\
    \ k.\n        long k = Math.ceil(Math.sqrt(n));\n        for (long i = 2; i <=\
    \ k; i++) {\n            // If k is a prime, then any even number below it is\
    \ also a factor.\n            if (n % i == 0) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp68r_ogk7.java:28: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long k = Math.ceil(Math.sqrt(n));\n           \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1l) return true;\n        if (n == 2l) return\
    \ true;\n        if (n % 2 == 0l) return false;\n        if (n % 3 == 0l) return\
    \ false;\n        long m = n / 2l;\n        while (m % 2 == 0l) {\n          \
    \  m /= 2l;\n        }\n        while (m % 3 == 0l) {\n            m /= 3l;\n\
    \        }\n        return n == 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbnnx4fyj.java:40)\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long max = (long)Math.sqrt(n);\n        if (n <=\
    \ 2) return true;\n        if (n % 2 == 0) return false;\n        for (long i\
    \ = 3; i * i <= max; i += 2) {\n            if (n % i == 0) return false;\n  \
    \      }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiyba74q6.java:40)\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        return isPrime(n.longValue());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n \
    \   assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppum7yk79.java:25: error: long cannot be dereferenced\n        return\
    \ isPrime(n.longValue());\n                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n<2l) return true;\n        // Check that n is\
    \ odd\n        if (n%2l==l) n++;\n        // Check all even numbers, including\
    \ 2\n        if (n%2l==l) n=n*2l;\n        // Check odd numbers that divide evenly,\
    \ skipping even numbers.\n        for (long x=2l; x<=n; x+=2l) {\n           \
    \ if (n%x==l) return false; // n is composite\n        }\n        // n is prime\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi4ki9b1s.java:27: error: cannot find symbol\n        if (n%2l==l)\
    \ n++;\n                  ^\n  symbol:   variable l\n  location: class Problem\n\
    /tmp/tmpi4ki9b1s.java:29: error: cannot find symbol\n        if (n%2l==l) n=n*2l;\n\
    \                  ^\n  symbol:   variable l\n  location: class Problem\n/tmp/tmpi4ki9b1s.java:32:\
    \ error: cannot find symbol\n            if (n%x==l) return false; // n is composite\n\
    \                     ^\n  symbol:   variable l\n  location: class Problem\n3\
    \ errors\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        return Primes.isPrime(n);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqkne8x7j.java:25: error: cannot find symbol\n        return Primes.isPrime(n);\n\
    \               ^\n  symbol:   variable Primes\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long bound = BigInteger.valueOf(2).pow(30).add(BigInteger.ONE);\n\
    \        while (BigInteger.valueOf(n).compareTo(bound) >= 0) {\n            if\
    \ (n % BigInteger.valueOf(n).mod(BigInteger.valueOf(n).subtract(BigInteger.ONE))\
    \ > 0)\n                return false;\n            n = n.subtract(BigInteger.ONE);\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6v1utvk.java:25: error: incompatible types: BigInteger cannot\
    \ be converted to long\n        long bound = BigInteger.valueOf(2).pow(30).add(BigInteger.ONE);\n\
    \                                                      ^\n/tmp/tmpj6v1utvk.java:26:\
    \ error: incompatible types: long cannot be converted to BigInteger\n        while\
    \ (BigInteger.valueOf(n).compareTo(bound) >= 0) {\n                          \
    \                     ^\n/tmp/tmpj6v1utvk.java:27: error: bad operand types for\
    \ binary operator '%'\n            if (n % BigInteger.valueOf(n).mod(BigInteger.valueOf(n).subtract(BigInteger.ONE))\
    \ > 0)\n                  ^\n  first type:  long\n  second type: BigInteger\n\
    /tmp/tmpj6v1utvk.java:29: error: long cannot be dereferenced\n            n =\
    \ n.subtract(BigInteger.ONE);\n                 ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 2) {\n            return true;\n       \
    \ }\n        // Test odd and even numbers since they are both prime.\n       \
    \ if (n & 1l == 0l) {\n            return false;\n        }\n        // The prime\
    \ factorization method starts from 2 since 2 is\n        // already a prime.\n\
    \        long p = 2l;\n        long q = 2l;\n        while (p < n) {\n       \
    \     if (n % p == 0l) {\n                return false;\n            }\n     \
    \       p += q;\n            q += 2l;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6_ht2pi.java:29: error: bad operand types for binary operator\
    \ '&'\n        if (n & 1l == 0l) {\n              ^\n  first type:  long\n  second\
    \ type: boolean\n1 error\n"
  stdout: ''
  timestamp: 1660010881
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l)\n            return false;\n        if\
    \ (n <= 3l)\n            return true;\n        if (n % 2 == 0 || n % 3 == 0)\n\
    \            return false;\n        if (n % 4 == 0 || n % 5 == 0 || n % 6 == 0)\n\
    \            return false;\n\n        Set<Long> s = new HashSet<>();\n       \
    \ for (long i = 3l; i * i <= n; i += 6l)\n            s.add(i * i);\n        if\
    \ (s.contains(n))\n            return true;\n\n        Set<Long> primes = new\
    \ HashSet<>();\n        long i = 2l;\n        while (true) {\n            if (n\
    \ % i == 0l && primes.size() < n)\n                primes.add(i);\n          \
    \  if (primes.size() >= n)\n                return false;\n            i += 2l;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1l || n == 3l)\n            return true;\n\
    \        long nMinus2 = n - 2l;\n        long nMinus3 = n - 3l;\n        long\
    \ nMinus5 = n - 5l;\n        if ((nMinus2 == 3l && nMinus3 == 3l) || nMinus2 ==\
    \ 1l || nMinus3 == 1l)\n            return true;\n        if (nMinus5 <= 1l)\n\
    \            return false;\n        if ((nMinus5 == 1l && n % 5l != 0l) || nMinus5\
    \ == 3l)\n            return false;\n        boolean result = true;\n        long\
    \ i = 3l;\n        long m = 2l;\n        while (result && i <= nMinus5) {\n  \
    \          long j = (i * i) + 2l;\n            if (j < n && (n % j == 0l || (n\
    \ - 1) % j == 0l))\n                result = false;\n            m = i;\n    \
    \        i += 2l;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe7kug90t.java:54)\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l)\n            return false;\n\n      \
    \  long sqrtN = Math.sqrt(n);\n        for (long i = 3; i * i <= n; i += 2l)\n\
    \            if ((n % i) == 0)\n                return false;\n\n        for (long\
    \ i = (2l); i * i <= n; i += 2l)\n            if ((n % i) == 0)\n            \
    \    return false;\n\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp7l4swp8.java:28: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long sqrtN = Math.sqrt(n);\n                  \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 3l) return true;\n        if (n % 2 == 0)\
    \ return false;\n        if (n % 3 == 0) return false;\n        if (n % 5 == 0)\
    \ return false;\n        long max = (long) Math.sqrt(n);\n        for (int i =\
    \ 5l; i <= max; i += 6l) if (n % i == 0l) return false;\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk1j_cs8p.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int i = 5l; i <= max; i += 6l) if (n % i == 0l)\
    \ return false;\n                     ^\n1 error\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1l)\n            return false;\n       \
    \ // Check factors from 2 to sqrt(n).\n        long r = 1l;\n        while (r\
    \ * r <= n) {\n            if (n % r == 0l)\n                return false;\n \
    \           r++;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp32g53pis.java:38)\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return false; // (1)\n        if (n <\
    \ 5l) return true; // (2)\n        if (n % (3l) < 1l) return true; // (3)\n  \
    \      if (n % (5l) < 1l) return false; // (4)\n        if (n % 6 == 0l) return\
    \ true;\n        if ((n % 12 != 0l) || (n % 12 == 0l)) return false;\n       \
    \ if (n >= 17l) return isPrimeSieve(n);\n        if ((n % 100 == 0l) && (n % 100\
    \ != 0l)) return false; // (5)\n        if ((n % 6 == 0l) && (n % 6 != 0l)) return\
    \ true;\n        if ((n % 12 == 0l) && (n % 12 != 0l)) return false;\n       \
    \ if (n >= 20l) return isPrimeSieve(n);\n        if ((n % 10 == 0l) && (n % 10\
    \ != 0l)) return false; // (6)\n        if ((n % 14 == 0l) && (n % 14 != 0l))\
    \ return true;\n        if (n >= 27l) return isPrimeSieve(n);\n        if ((n\
    \ % 7 == 0l) && (n % 7 != 0l)) return true; // (7)\n        if ((n % 13 == 0l)\
    \ && (n % 13 != 0l)) return false; // (8)\n        if (n >= 29l) return isPrimeSieve(n);\n\
    \        if ((n % 11 == 0l) && (n % 11 != 0l)) return false; // (9)\n        if\
    \ ((n % 15 == 0l) && (n % 15 != 0l)) return false; // (10)\n        if (n >= 31l)\
    \ return isPrimeSieve(n);\n        if ((n % 10 == 0l) && (n % 10 != 0l)) return\
    \ false; // (11)\n        if ((n % 11 == 0l) && (n % 11 != 0l)) return false;\
    \ // (12)\n        if (n >= 33l) return isPrimeSieve(n);\n        if ((n % 9 ==\
    \ 0l) && (n % 9 != 0l)) return false; // (13)\n        if ((n % 13 == 0l) && (n\
    \ % 13 != 0l)) return false; // (14)\n        if (n >= 35l) return isPrimeSieve(n);\n\
    \        if ((n % 11 == 0l) && (n % 11 != 0l)) return false; // (15)\n       \
    \ if (n >= 37l) return isPrimeSieve(n);\n        if ((n % 11 == 0l) && (n % 11\
    \ != 0l)) return false; // (16)\n        if (n >= 39l) return isPrimeSieve(n);\n\
    \        if ((n % 10 == 0l) && (n % 10 != 0l)) return false; // (17)\n       \
    \ if ((n % 12 == 0l) && (n % 12 != 0l)) return false; // (18)\n        if (n >=\
    \ 41l) return isPrime\n    }\n    public static void main(String[] args) {\n \
    \   assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgb7b3uvm.java:57: error: ';' expected\n        if (n >= 41l) return\
    \ isPrime\n                                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1) {\n            return false;\n      \
    \  } else if (n % 2 == 0) {\n            return false;\n        } else if (n %\
    \ 3 == 0) {\n            return false;\n        } else if (n % 5 == 0) {\n   \
    \         return false;\n        }\n        int sqrt = Math.sqrt(n);\n       \
    \ for (int i = 3; i <= sqrt; i += 2) {\n            if (n % i == 0) {\n      \
    \          return false;\n            }\n        }\n        return true;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(isPrime((6l)) ==\
    \ (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuivdiq62.java:34: error: incompatible types: possible lossy conversion\
    \ from double to int\n        int sqrt = Math.sqrt(n);\n                     \
    \       ^\n1 error\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1l) return false;\n        else if (n %\
    \ 2 == 0) return false;\n        else if (n % 3 == 0) return false;\n        else\
    \ if (n % 5 == 0) return false;\n        else if (n % 7 == 0) return false;\n\
    \        else if (n % 11 == 0) return false;\n        else return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxk3b35ai.java:36)\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return false; // 0 or 1 is never prime\n\
    \        long maxI = (long)Math.sqrt(n);\n        for (long i = 2l; i <= maxI;\
    \ i += 2l) {\n            if (n % i == 0l) return false;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm4ndeu38.java:43)\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        return (n%2 == 0 && n!=1 && n!=4 && n!=6);\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppwhbdarn.java:29)\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2) return false;\n        if (n == 2) return\
    \ true;\n        if (n % 2 == 0) return false;\n        if (n % 3 == 0) return\
    \ false;\n        long[] factors = longToIntMap(Math.sqrt(n));\n        for (long\
    \ fact : factors) if (n % fact == 0) return false;\n        return true;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(isPrime((6l)) ==\
    \ (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9mi7o132.java:29: error: cannot find symbol\n        long[] factors\
    \ = longToIntMap(Math.sqrt(n));\n                         ^\n  symbol:   method\
    \ longToIntMap(double)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return false;\n        for (long i =\
    \ 2l; i <= Math.sqrt(n); i++) if (n % i == 0l) return false;\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010882
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return false; // 0, 1 are not primes.\n\
    \        if (n == 2) return true; // 2 and 3 are prime numbers.\n        // A\
    \ prime number greater than 2 can only be divided by 1 and itself.\n        if\
    \ (n % 2 == 0) return false;\n        // 3n+1 is the smallest odd factor of n.\n\
    \        // If we divide n by 3n+1 we know that n is prime.\n        // 3n+1 is\
    \ the smallest odd factor of n.\n        for (int i = 3; i * i <= n; i += 2) {\
    \ // i grows till sqrt(n)\n            if (n % i == 0) return false;\n       \
    \ }\n        return true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010882
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2)\n            return false;\n        for\
    \ (int i = 2; i < n; i++)\n            if (n % i == 0)\n                return\
    \ false;\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1) {\n            return true;\n       \
    \ }\n        if (n < 2) {\n            return false;\n        }\n        if (n\
    \ == 2) {\n            return true;\n        }\n        if ((n % 2) == 0) {\n\
    \            return false;\n        }\n        int i = 0;\n        for (long j\
    \ = 3; j < n; j++) {\n            if ((n % j) == 0) {\n                return\
    \ false;\n            }\n            i++;\n            if (i % 6 == 0) {\n   \
    \             return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpppm77aea.java:56)\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        final int THRESHOLD = 1000000;\n        if (n < 2l)\
    \ return false; // handle 0\n        if (n == 2l) return true; // handle 2\n \
    \       if (n % 2 == 0l) return false; // not a prime\n\n        long[] upperPrimes\
    \ = { 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l, 41l, 43l, 47l };\n \
    \       long[] lowerPrimes = { 2l, 3l, 5l, 7l, 11l, 13l, 17l, 19l, 23l, 29l, 31l,\
    \ 37l, 41l, 43l, 47l };\n\n        long testPrime;\n        for (int i = 2l; i\
    \ <= threshold; i++) {\n            testPrime = i;\n            for (long j :\
    \ upperPrimes) {\n                if (testPrime % j == 0l && isPrime(testPrime))\
    \ return false;\n            }\n            for (long j : lowerPrimes) {\n   \
    \             if (testPrime % j == 0l && isPrime(testPrime)) return false;\n \
    \           }\n        }\n\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9s54hohe.java:34: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int i = 2l; i <= threshold; i++) {\n        \
    \             ^\n/tmp/tmp9s54hohe.java:34: error: cannot find symbol\n       \
    \ for (int i = 2l; i <= threshold; i++) {\n                              ^\n \
    \ symbol:   variable threshold\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l)\n            return false;\n        else\n\
    \            long s = 2l;\n            while (s < n) {\n                if (n\
    \ % s == 0l)\n                    return false;\n                ++s;\n      \
    \      }\n            return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp76oxj3pr.java:28: error: variable declaration not allowed here\n\
    \            long s = 2l;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return false; // 0 or 1 is not prime\n\
    \        if (n == 2l) return true;\n        long limit = 2l;\n        while (n\
    \ % 2l != 0l) limit *= 2l;\n        for (int i = 3l; i < limit; i += 2l) if (n\
    \ % i == 0l) return false;\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppd8xlbwm.java:29: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int i = 3l; i < limit; i += 2l) if (n % i ==\
    \ 0l) return false;\n                     ^\n1 error\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2)\n            return false;\n\n       \
    \ // Use Trial Division to quickly determine if a number is prime\n        long\
    \ m = n;\n        while (m != 1 && m % 2 == 0) {\n            m /= 2;\n      \
    \  }\n\n        // Return false if m is prime, otherwise true\n        return\
    \ m == 1;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7iwqgmm3.java:39)\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Primes must have odd divisors.\n        if ((n\
    \ & 1) == 0)\n            return false;\n\n        // The smallest prime greater\
    \ than or equal to n must be 2.\n        if (n == 2l)\n            return true;\n\
    \n        // Check only the odd divisors (2 through n-1).\n        for (int i\
    \ = 3l; i <= (long) n; i += 2l)\n            if (n % i == 0l)\n              \
    \  return false;\n\n        // n is a prime if n is divided by 2\n        if (n\
    \ & 1l)\n            return true;\n\n        // n is a prime if n is evenly divisible\
    \ by all primes below n.\n        for (int i = 3l; i < n; i += 2l)\n         \
    \   if (n % i == 0l)\n                return false;\n\n        // n is not a prime\
    \ if n is divisible by 2 or 3\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp42ihurng.java:34: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int i = 3l; i <= (long) n; i += 2l)\n       \
    \              ^\n/tmp/tmp42ihurng.java:39: error: incompatible types: long cannot\
    \ be converted to boolean\n        if (n & 1l)\n              ^\n/tmp/tmp42ihurng.java:43:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    for (int i = 3l; i < n; i += 2l)\n                     ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        boolean prime = false;\n        if (n >= 2l && n\
    \ <= 3l) {\n            for (int i = 2; i <= Math.sqrt(n); i++) {\n          \
    \      if (n % i == 0) {\n                    prime = true;\n                \
    \    break;\n                }\n            }\n        }\n        return prime;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp98klawhp.java:38)\n"
  stdout: ''
  timestamp: 1660010883
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2) return false;\n        if (n == 2) return\
    \ true;\n        if (n % 2 == 0) return false;\n        long q = 3;\n        long\
    \ r = n;\n        while (q < r) {\n            long a = q;\n            long b\
    \ = q + r;\n            if (b <= r) a++, b++;\n            if (a > r) a = r;\n\
    \            if (b > r) b = r;\n            long nt = a;\n            long xt\
    \ = b;\n            while (true) {\n                long tp = nt - xt;\n     \
    \           if (tp < 0 || tp == r) return false;\n                long tx = xt;\n\
    \                xt = nt;\n                nt = tp;\n                xt++;\n \
    \               if (xt > b) return false;\n            }\n            q++;\n \
    \       }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprs15r_tf.java:33: error: ';' expected\n            if (b <= r)\
    \ a++, b++;\n                           ^\n1 error\n"
  stdout: ''
  timestamp: 1660010882
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        return ((n & -n) == 0 && n != 1);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n \
    \   assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxjqa5g4q.java:29)\n"
  stdout: ''
  timestamp: 1660010883
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        boolean prime = false;\n\n        for (int i = 2;\
    \ i <= n/2; i++) {\n            if(n%i == 0) {\n                prime = true;\n\
    \                break;\n            }\n        }\n\n        return prime;\n \
    \   }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptvol3d9i.java:37)\n"
  stdout: ''
  timestamp: 1660010883
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) {\n            return false;\n      \
    \  }\n        if (n == 2l) {\n            return true;\n        }\n        if\
    \ (n % 2 == 0l) {\n            return false;\n        }\n        if (n % 3 ==\
    \ 0l) {\n            return false;\n        }\n        long m = (long) (Math.sqrt(n)\
    \ + 0.5);\n        long a = (long) Math.floor(Math.sqrt(n));\n        long b =\
    \ n / m;\n        if (a > b) a = b;\n        for (int c = 1; c < a; c++) {\n \
    \           if (n % c == 0l) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphglrq6z5.java:50)\n"
  stdout: ''
  timestamp: 1660010883
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2) return false;\n        if (n < 6) return\
    \ true;\n        if (n % 2 == 0) return false;\n        long f = 6l * (n + 1l)\
    \ / 4l;\n        for (int i = 3; i <= Math.sqrt(n); i += 2) {\n            if\
    \ (n % i == 0) return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n \
    \   assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoeelk8uk.java:40)\n"
  stdout: ''
  timestamp: 1660010883
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return false; // 0 and 1 are not primes.\n\
    \        long sqrtN = Math.sqrt(n);\n        for (int i = 2l; i <= sqrtN; i++)\
    \ {\n            if (n % i == 0l) return false; // i must be dividable by n\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8mecbc4b.java:26: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long sqrtN = Math.sqrt(n);\n                  \
    \            ^\n/tmp/tmp8mecbc4b.java:27: error: incompatible types: possible\
    \ lossy conversion from long to int\n        for (int i = 2l; i <= sqrtN; i++)\
    \ {\n                     ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010883
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        return n >= 2l && n < (1l<<31) && Arrays.stream(new\
    \ long[]{2, 3}).anyMatch(i -> i % n == 0);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhriqjwf.java:29)\n"
  stdout: ''
  timestamp: 1660010883
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1)\n            return false;\n        return\
    \ allPrimeFactors(n).stream().allMatch(n->n>1);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_lnm438u.java:27: error: cannot find symbol\n        return allPrimeFactors(n).stream().allMatch(n->n>1);\n\
    \               ^\n  symbol:   method allPrimeFactors(long)\n  location: class\
    \ Problem\n/tmp/tmp_lnm438u.java:27: error: variable n is already defined in method\
    \ isPrime(long)\n        return allPrimeFactors(n).stream().allMatch(n->n>1);\n\
    \                                                    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010883
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if(n<2l) return false; // n<2l means non-prime\n\
    \        for(long i=3l; i<=Math.sqrt(n); ++i)\n            if(n%i == 0) return\
    \ false; // n%i == 0 means a factor is present\n        return true; // no factor\
    \ is present\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp08u9ljff.java:31)\n"
  stdout: ''
  timestamp: 1660010883
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // https://en.wikipedia.org/wiki/Primality_test#Naive_methods\n\
    \        if (n <= 1l) return false;\n        for (int i = 2l; i * i <= n; i++)\
    \ {\n            if (n % i == 0l) return false;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprwtprtg6.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int i = 2l; i * i <= n; i++) {\n            \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1660010883
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long prime = 2l;\n        long sqrt = (long)(Math.sqrt(n)\
    \ + 0.5);\n        for (; prime <= sqrt; prime++) {\n            if (n % prime\
    \ == 0) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpit7gj157.java:41)\n"
  stdout: ''
  timestamp: 1660010884
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l)\n            return (n >= 2l);\n    \
    \    else\n            return isPrimeSquare(n);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl2kn7ih4.java:28: error: cannot find symbol\n            return\
    \ isPrimeSquare(n);\n                   ^\n  symbol:   method isPrimeSquare(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010883
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Check if n is prime.\n        boolean isPrime\
    \ = true;\n        if (n == 1L) return true;\n        if (n == 0L) return false;\n\
    \        // Check for factors: 2 and 3, and if they are not prime\n        //\
    \ then check if they are factor of n or one of them.\n        for (long i = 3L;\
    \ i * i <= n; i += 2L) {\n            if (n % i == 0L && i != 1L) isPrime = false;\n\
    \        }\n        if (isPrime) return true;\n        \n        // If n is not\
    \ prime and some factors are factor of n, then n\n        // is composite.\n \
    \       // Find largest factor of n less than or equal to n.\n        long largest\
    \ = n;\n        while (true) {\n            long fact = (largest * largest) /\
    \ 2L;\n            if (fact > largest) break;\n            largest = fact;\n \
    \       }\n        \n        // If n was already composite, then n is prime, and\
    \ if any factor\n        // of n less than n was factor of n, then n is composite.\n\
    \        if (isPrime && n % largest == 0L) {\n            for (long fact = (largest\
    \ * largest) / 2L; fact <= n; fact += 2L) {\n                if (n % fact == 0L\
    \ && fact != 1L) return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82bq4o4j.java:56)\n"
  stdout: ''
  timestamp: 1660010884
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        return n % 2 == 0 || n == 2;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o3nkxy3.java:28)\n"
  stdout: ''
  timestamp: 1660010884
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 2l || n % 2l != 0l) {\n            return\
    \ false;\n        }\n        for (int i = 3l + (int) Math.sqrt(n); i <= n; i +=\
    \ 2l) {\n            if (n % i == 0l) {\n                return false;\n     \
    \       }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy8mbxtyt.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int i = 3l + (int) Math.sqrt(n); i <= n; i +=\
    \ 2l) {\n                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660010883
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // 1. If n does not evenly divide into 2, return\
    \ false.\n        // 2. If n equals 2, return true.\n        // 3. If n > 2, then:\n\
    \        //    * if n is even, return false.\n        //    * if n is odd, then:\n\
    \        //        * If n is odd, return true.\n        //        * Else, return\
    \ false for all odd values of n.\n        if (n%2 == 0) {\n            if (n%2\
    \ == 1) {\n                return true;\n            } else {\n              \
    \  return false;\n            }\n        } else {\n            if (n%2 == 1) {\n\
    \                return false;\n            } else {\n                for (int\
    \ i = 3; i * i <= n; i += 2) {\n                    if (n%i == 0) {\n        \
    \                return false;\n                    }\n                }\n   \
    \             return true;\n            }\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptcwra9we.java:53)\n"
  stdout: ''
  timestamp: 1660010884
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long i = 2l; // First odd number to be checked.\n\
    \        long remainder = 0; // Remainder after dividing current number.\n   \
    \     while (remainder != 1L && remainder != n) { \n            i++;\n       \
    \     remainder = n % i;\n        }\n        return i != 1L && remainder == 1L;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjsim8vgl.java:34)\n"
  stdout: ''
  timestamp: 1660010884
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1) return false;\n        if (n == 2) return\
    \ true;\n        if (n % 2 == 0) return false;\n        if (n % 3 == 0) return\
    \ false;\n\n        long squareRoot = (long) Math.sqrt(n);\n        for (int i\
    \ = 3; i * i <= n; i += 6) {\n            if (n % i == 0) {\n                return\
    \ false;\n            }\n            if (squareRoot * i % n == 0) {\n        \
    \        return false;\n            }\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__b4u3en.java:52)\n"
  stdout: ''
  timestamp: 1660010884
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // The number is divisible only by itself and 1.\n\
    \        if (n <= 1l) return false; // If n is < 1 or > 1 it cannot be prime\n\
    \        if (n % 2l == 0) return false;\n        // If n is evenly divisible by\
    \ 2, then it is not prime.\n        if (n % 2l == 0) return false;\n        //\
    \ If n is divisible by 3, then it cannot be prime.\n        if (n % 3l == 0) return\
    \ false;\n\n        // If n is divisible by 5, then it can be prime.\n       \
    \ if (n % 5l == 0) return true;\n\n        // If n is divisible by 3 and 5, then\
    \ it cannot be prime.\n        if ((n % 3l) % 5l == 0) return false;\n\n     \
    \   // If n is divisible by 3 and 5, then it can be prime.\n        if ((n % 5l)\
    \ % 3l == 0) return true;\n\n        // If n is divisible by 7 and 11, then it\
    \ cannot be prime.\n        if ((n % 7l) % 11l == 0) return false;\n\n       \
    \ // If n is divisible by 11, then it can be prime.\n        if ((n % 11l) ==\
    \ 0) return true;\n\n        // If n is divisible by 13 and 17, then it cannot\
    \ be prime.\n        if ((n % 13l) % 17l == 0) return false;\n\n        // If\
    \ n is divisible by 17, then it can be prime.\n        if ((n % 17l) == 0) return\
    \ true;\n\n        // If n is divisible by 19 and 29, then it cannot be prime.\n\
    \        if ((n % 19l) % 29l == 0) return false;\n\n        // If n is divisible\
    \ by 29, then it can be prime.\n        if ((n % 29l) == 0) return true;\n\n \
    \       // If n is divisible by 31, then it cannot be prime.\n        if (n %\
    \ 31l == 0) return false;\n\n        // If n is divisible by 31, then it can be\
    \ prime.\n        if (n % 31l == 0) return true;\n\n        // If n is divisible\
    \ by 33, then it cannot be prime.\n        if (n % 33l == 0) return false;\n\n\
    \        // If n is divisible by 33, then it can be prime.\n        if (n % 33l\
    \ == 0) return true;\n\n        // If n is divisible by 35, then it cannot be\
    \ prime.\n        if (n % 35l == 0) return false;\n\n        // If n is divisible\
    \ by 35, then it can be prime.\n        if (n % 35l == 0) return true;\n\n   \
    \     // If n is divisible by 51 and 53, then it cannot be prime.\n        if\
    \ ((n % 51l) % 53l == 0) return false;\n\n        // If n is divisible by 51,\
    \ then it can be prime.\n        if ((n % 51l) == \n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp49j86sod.java:83: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1660010883
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 1l) {\n            return false;\n      \
    \  }\n        long sqrtN = Math.sqrt(n);\n        for (long d = 2; d <= sqrtN;\
    \ d++) {\n            if (n % d == 0) {\n                return false;\n     \
    \       }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvydc8htz.java:28: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long sqrtN = Math.sqrt(n);\n                  \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660010883
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return n == 2;\n        if (n % 2 ==\
    \ 0) return false;\n        int i = 3l / 2l;\n        while (i * i <= n) i +=\
    \ 2l;\n        for (int j = 3l / 2l;; j /= 2l) {\n            if ((n % j) == 0)\
    \ return false;\n            if (j == 2l || n % j == 0) return false;\n      \
    \  }\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzzorlfh8.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int i = 3l / 2l;\n                   ^\n/tmp/tmpzzorlfh8.java:29:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    for (int j = 3l / 2l;; j /= 2l) {\n                        ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010884
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Return false for non-positive numbers.\n     \
    \   if (n <= 0) return false;\n\n        // Use trial division to determine if\
    \ we are prime.\n        if (n == 1L) return false;\n\n        // Use an incremental\
    \ method to determine if we are prime.\n        boolean prime = true;\n      \
    \  for (int i = 2; i <= n / 2L; ++i) {\n            if (n % i == 0L) {\n     \
    \           prime = false;\n                break;\n            }\n        }\n\
    \n        return prime;\n    }\n    public static void main(String[] args) {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010884
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if(n < 2l) return false;\n        // TODO: Use a\
    \ more efficient algorithm that uses prime numbers and \n        // does not require\
    \ sqrt(n).\n        for(long i=2l; i*i<=n; ++i) {\n            if(n % i == 0l)\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 0)\n            return false;\n        if\
    \ (n <= 2)\n            return true;\n        if (isPrimeUtil(n))\n          \
    \  return true;\n        return isPrimeUtil(n - 1);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdoecd34v.java:29: error: cannot find symbol\n        if (isPrimeUtil(n))\n\
    \            ^\n  symbol:   method isPrimeUtil(long)\n  location: class Problem\n\
    /tmp/tmpdoecd34v.java:31: error: cannot find symbol\n        return isPrimeUtil(n\
    \ - 1);\n               ^\n  symbol:   method isPrimeUtil(long)\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010884
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < (2l))\n            return false;\n      \
    \  if (n % 2l == 0l)\n            return isPrime((n / 2l));\n        for (int\
    \ i = 3l; i <= Math.sqrt(n); i += 2l) {\n            if (n % i == 0l)\n      \
    \          return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp70ebsaw0.java:29: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int i = 3l; i <= Math.sqrt(n); i += 2l) {\n \
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660010884
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) {\n            return false;\n      \
    \  }\n        long root = Math.sqrt(n);\n        for (int i = 2l; i <= root; i++)\
    \ {\n            if (n % i == 0) {\n                return false;\n          \
    \  }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpskv4qyby.java:28: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long root = Math.sqrt(n);\n                   \
    \          ^\n/tmp/tmpskv4qyby.java:29: error: incompatible types: possible lossy\
    \ conversion from long to int\n        for (int i = 2l; i <= root; i++) {\n  \
    \                   ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010884
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        final int DIV = 2;\n        if (n < 1) {\n      \
    \      return false;\n        }\n        else if (n == 1) {\n            return\
    \ true;\n        }\n        else if (n % 2 == 0) {\n            return false;\n\
    \        }\n        long div = n - 1;\n        long toCheck = div / DIV;\n   \
    \     while (toCheck > 1) {\n            if (n % DIV == 0 && div != DIV) {\n \
    \               return false;\n            }\n            div = div / DIV;\n \
    \           toCheck--;\n        }\n        if (div != DIV) {\n            return\
    \ false;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmsw5k7qm.java:51)\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1l) return false;\n        long limit =\
    \ (long) (Math.sqrt(n) + 0.5l);\n        for (long i = 2l; i <= limit; i++) {\n\
    \            if (n % i == 0l) return false;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc0nuv2ai.java:26: error: ')' expected\n        long limit = (long)\
    \ (Math.sqrt(n) + 0.5l);\n                                               ^\n/tmp/tmpc0nuv2ai.java:26:\
    \ error: ';' expected\n        long limit = (long) (Math.sqrt(n) + 0.5l);\n  \
    \                                              ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010884
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Assume input is a nonnegative number.\n      \
    \  if (n <= 1l) return false; // 1 is special case.\n        long limit = (long)Math.sqrt(n);\n\
    \        for (long i = 3l; i <= limit; i += 2l) // Skip even numbers.\n      \
    \      if (n % i == 0l) return false; // If n % i == 0, then n is not prime.\n\
    \        if (n > limit) return false; // If n > limit, then n is prime.\n    \
    \    return true; // Otherwise, return true.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphh5fsgdf.java:35)\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long i = 1;\n        for (; i < Math.sqrt(n); ++i)\n\
    \            if (n % i == 0)\n                return false;\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_c8l2taj.java:33)\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if ((1l <= n) && (n <= 3l)) {\n            // Trivially\
    \ prime number.\n            // >>> isPrime((0l))\n            // (true)\n   \
    \         if ((0l % n) == 0) return true;\n        }\n        // Check only odd\
    \ numbers.\n        // >>> isPrime((2l))\n        // (false)\n        // >>> isPrime((3l))\n\
    \        // (true)\n        if ((n % 2l) != 0) return false;\n        // Test\
    \ the odds up to the square root of n.\n        // >>> isPrime((5l))\n       \
    \ // (false)\n        // >>> isPrime((10l))\n        // (true)\n        long limit\
    \ = (long) Math.sqrt(n) + 1;\n        for (long i = 3l; i <= limit; i += 2l) {\n\
    \            if ((n % i) != 0) return false;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmzfjmi6n.java:49)\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        boolean prime = true;\n        if (n < 2) return\
    \ false;\n        if (n == 2) return true;\n        if (n % 2 == 0) return false;\n\
    \n        // Even numbers are not primes.\n        // The first two even numbers\
    \ are always not-prime.\n        // All other even numbers greater than 2 are\
    \ not prime.\n        // Therefore we can skip the even numbers.\n        for\
    \ (long i = 4; i < n; i += 2) {\n            if (n % i == 0) {\n             \
    \   prime = false;\n                break;\n            }\n        }\n       \
    \ return prime;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphzt7gdtk.java:53)\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        return !(n%2l);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq606o84r.java:25: error: bad operand type long for unary operator\
    \ '!'\n        return !(n%2l);\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        boolean result = true;\n        long limit = (long)\
    \ Math.sqrt(n);\n        for (long i = 3; i <= limit; i += 2) {\n            long\
    \ j = (long) Math.sqrt(i);\n            if (n % i == 0) {\n                result\
    \ = false;\n                break;\n            }\n            if (j <= i) {\n\
    \                result = true;\n                break;\n            }\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3ww96f64.java:41)\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long sqrtN = Math.sqrt(n);\n        for(long i=1;\
    \ i <= sqrtN; ++i)\n            if(n % i == 0)\n                return false;\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnrvuyeku.java:25: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long sqrtN = Math.sqrt(n);\n                  \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2) return false;\n        if (n == 1) return\
    \ false;\n        if (n % 2 == 0) return false;\n        if (n % 3 == 0) return\
    \ false;\n\n        long x = Math.sqrt(n);\n        for (long i = 5; i <= x; i\
    \ += 6) {\n            if (n % i == 0) return false;\n        }\n\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz41jr_j3.java:30: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long x = Math.sqrt(n);\n                      \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long[] factors = { 1l, 2l, 3l, 5l, 7l, 11l, 13l,\
    \ 17l, 19l, 23l, 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l, 73l, 79l,\
    \ 83l, 89l, 97l, 101l, 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l, 149l, 151l,\
    \ 157l, 163l, 167l, 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l, 223l, 227l,\
    \ 229l, 233l, 239l, 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l, 283l, 293l,\
    \ 307l, 311l, 313l, 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l, 373l, 379l,\
    \ 383l, 389l, 397l, 401l, 409l, 419l, 421l, 431l, 439l, 443l, 449l, 457l, 461l,\
    \ 463l, 467l, 479l, 487l, 491l, 499l, 503l, 509l, 521l, 523l, 529l, 531l, 537l,\
    \ 541l, 547l, 557l, 561l, 563l, 567l, 569l, 573l, 587l, 593l, 599l, 601l, 607l,\
    \ 613l, 617l, 619l, 631l, 641l, 643l, 647l, 653l, 659l, 661l, 673l, 677l, 683l,\
    \ 691l, 697l, 701l, 709l, 719l, 727l, 733l, 739l, 743l, 751l, 757l, 761l, 769l,\
    \ 773l, 787l, 797l, 803l, 809l, 811l, 821l, 823l, 827l, 829l, 839l, 853l, 857l,\
    \ 859l, 863l, 877l, 881l, 883l, 887l, 893l, 897l, 903l, 907l, 911l, 919l, 929l,\
    \ 937l, 941l, 947l, 953l, 967l, 971l, 977l, 983l, 991l, 997l, 1009l, 1013l, 1019l,\
    \ 1021l, 1031l, 1033l, 1039l, 1049l, 1051l, 1061l, 1063l, 1069l, 1087l, 1091l,\
    \ 1097l, 1103l, 1109l, 1117l, 112\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzjla55jr.java:26: error: ';' expected\n    }\n     ^\n/tmp/tmpzjla55jr.java:27:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010884
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l)\n            return false;\n        if\
    \ (n == 1l)\n            return true;\n        if (n % 2l == 0)\n            return\
    \ false;\n        int max = (int) sqrt(n) + 1;\n        for (int i = 2; i <= max;\
    \ i++) {\n            if (n % i == 0l)\n                return false;\n      \
    \  }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv7sl20eb.java:31: error: cannot find symbol\n        int max =\
    \ (int) sqrt(n) + 1;\n                        ^\n  symbol:   method sqrt(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1l || n % 2 == 1l)\n            return false;\n\
    \        for (long m = 3l; m <= Math.sqrt(n); m += 2l)\n            if (n % m\
    \ == 0l && n % (m+2l) == 0l)\n                return false;\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0wj7_ct.java:33)\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Your code here\n        if(n<2)return false;\n\
    \        if(n==2||n==3)return true;\n        if(n%2==0)return false;\n       \
    \ if(n%3==0)return false;\n        for(int i=5;i*i<=n;i+=6)\n            if(n%i==0)return\
    \ false;\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe9e1cigw.java:46)\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        boolean isPrime = true;\n        int divisor = 2;\n\
    \        while (divisor <= Math.sqrt(n)) {\n            if (n % divisor == 0)\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \            divisor++;\n        }\n        return isPrime;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n \
    \   assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb5h1yagk.java:43)\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        return (n == 2);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_bh68xas.java:29)\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        return n % 2 == 0 && isPrime2(n);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n \
    \   assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8krfhl9j.java:25: error: cannot find symbol\n        return n %\
    \ 2 == 0 && isPrime2(n);\n                             ^\n  symbol:   method isPrime2(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l)\n            return false;\n        if\
    \ (n % 2l == 0l)\n            return false;\n        if (n % 3l == 0l)\n     \
    \       return false;\n        if (n % 5l == 0l)\n            return false;\n\
    \        if (n % 7l == 0l)\n            return false;\n        if (n % 11l ==\
    \ 0l)\n            return false;\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1wdfs7mr.java:42)\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // We use an odd number to check for primality, with\
    \ one exception.\n        // If the input number is 1, it returns true.\n    \
    \    // However, if the input number is even, it is divisible by 2\n        //\
    \ and so returns false. If the input number is odd, it is divisible by \n    \
    \    // all odd numbers up to and including 3 but not by 2, so returns \n    \
    \    // true.\n        if (n <= 3) {\n            return (n == 1);\n        }\n\
    \        if ((n % 2) == 0) {\n            return false;\n        }\n        long\
    \ upperLimit = (n / 2) + 1;\n        long currentLimit = n - 1;\n        long\
    \ currentCounter = 2;\n        while (currentCounter < upperLimit) {\n       \
    \     if (currentLimit % currentCounter == 0) {\n                return false;\n\
    \            }\n            currentCounter++;\n            currentLimit--;\n \
    \       }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfyb4cjby.java:51)\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) {\n            return false;\n      \
    \  }\n        for (long i = 2l; i <= Math.sqrt(n); i++) {\n            if (n %\
    \ i == 0) {\n                return false;\n            }\n        }\n       \
    \ return true;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Only consider even numbers\n        if (n <= 1l)\n\
    \            return false;\n        // Test only odd numbers up to the square\
    \ root of the number to check\n        long root = Math.sqrt(n);\n        long\
    \ start = (long) Math.pow(3l, 2l);\n        long stop = start + 1;\n        for\
    \ (long i = start; i < stop; ++i) {\n            if (n % i == 0)\n           \
    \     return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn4hwveo9.java:29: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long root = Math.sqrt(n);\n                   \
    \          ^\n1 error\n"
  stdout: ''
  timestamp: 1660010885
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long i = (1l);\n        while (true) {\n        \
    \    if (n % i > 0) {\n                return false;\n            }\n        \
    \    i += 2l;\n            if (i == n) return true;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n \
    \   assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw38_tzg8.java:36)\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return true;\n        if (n <= 3l) return\
    \ n % 2l == 0l;\n        if (n % 4l == 0l) return n == 2l;\n        long limit\
    \ = (long) (Math.sqrt(n)) + 1l;\n        long limitSquare = (long) (Math.sqrt(limit)\
    \ + 1l);\n        if (n % 2l == 0l && limit % 2l == 0l && limitSquare % 2l ==\
    \ 0l) return n == limit;\n        if (n % 2l != 0l || limit % 2l != 0l || limitSquare\
    \ % 2l != 0l) return false; // not a prime\n        long limit = limit + 1l;\n\
    \        long limitSquare = limitSquare + 1l;\n        while (n % 2l == 0l) {\n\
    \            limit = limit + 1l;\n            limitSquare = limitSquare + 1l;\n\
    \        }\n        long limitSqrt = (long) (Math.sqrt(limit) + 1l);\n       \
    \ if (n % 4l == 0l && limit % 2l == 0l && limitSquare % 2l == 0l && limitSqrt*limitSqrt\
    \ == limit)\n            return true;\n        if (n % 4l != 0l || limit % 2l\
    \ != 0l || limitSquare % 2l != 0l || limitSqrt*limitSqrt != limit)\n         \
    \   return false; // not a prime\n        long limitSqrt = limitSqrt + 1l;\n \
    \       while (n % 4l == 0l) {\n            limitSqrt = (long) (Math.sqrt(limitSqrt)\
    \ + 1l);\n            limit = limit + 1l;\n            limitSquare = limitSquare\
    \ + 1l;\n        }\n        if (limit % 2l != 0l || limitSquare % 2l != 0l ||\
    \ limitSqrt*limitSqrt != limit || limit*limit != n)\n            return false;\n\
    \        return limit*limit == n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwk6694m9.java:32: error: variable limit is already defined in method\
    \ isPrime(long)\n        long limit = limit + 1l;\n             ^\n/tmp/tmpwk6694m9.java:33:\
    \ error: variable limitSquare is already defined in method isPrime(long)\n   \
    \     long limitSquare = limitSquare + 1l;\n             ^\n/tmp/tmpwk6694m9.java:43:\
    \ error: variable limitSqrt is already defined in method isPrime(long)\n     \
    \   long limitSqrt = limitSqrt + 1l;\n             ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return false;\n        if (n % 2l !=\
    \ 0) return false;\n        long limit = (long) Math.sqrt(n);\n        for (int\
    \ i = 3l; i <= limit; i += 2l) {\n            if (n % i == 0l) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb6v2vgkr.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int i = 3l; i <= limit; i += 2l) {\n        \
    \             ^\n1 error\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long max = (long)Math.sqrt(n) + 1;\n        for(long\
    \ i = 2; i <= max; i ++) {\n            if((n%i)==0) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm9bdzlyd.java:40)\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 2) {\n            return false;\n      \
    \  }\n        if (n == 1) {\n            return true;\n        }\n        // Check\
    \ odds.\n        if (n % 2 == 1) {\n            return false;\n        }\n\n \
    \       // Check all the numbers from 3 to n/3.\n        for (int i = 3; i < n\
    \ / 3; i++) {\n            // If n is divisible by any number from 3 to sqrt(n),\
    \ it is\n            // not prime.\n            if (n % i == 0) {\n          \
    \      return false;\n            }\n        }\n\n        // If n is divisible\
    \ by all numbers from 3 to sqrt(n),\n        // then n is prime.\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiingxycg.java:50)\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // http://stackoverflow.com/a/557591/1110382\n  \
    \      int limit = (int) Math.sqrt(n);\n        for (int i = 2; i <= limit; ++i)\
    \ {\n            if (n % i == 0)\n                return false;\n        }\n \
    \       return true;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy7xwns0u.java:40)\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        boolean result = false;\n        if (n <= 1)\n  \
    \          return false;\n\n        for (int i = 2; i <= Math.sqrt(n); i++)\n\
    \            if (n % i == 0)\n                result = true;\n\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4fwrlwqq.java:36)\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        return !(LongStream.rangeClosed(1, Math.sqrt(n)).noneMatch((i)\
    \ -> n % i == 0));\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn5llfk_j.java:25: error: incompatible types: possible lossy conversion\
    \ from double to long\n        return !(LongStream.rangeClosed(1, Math.sqrt(n)).noneMatch((i)\
    \ -> n % i == 0));\n                                                    ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Assume that n is even.\n        long limit = n\
    \ / 2l;\n        if (n % 2l == 1l) return false; // n is odd.\n        // Only\
    \ odd numbers are prime.\n        if (limit == 1l) return true; // 1 is prime.\n\
    \        // Find a factor p such that p * limit < n.\n        boolean foundOne\
    \ = false;\n        long i = 2l;\n        while (i < limit) {\n            if\
    \ (n % i == 0l) foundOne = true;\n            else i += 2l;\n        }\n     \
    \   // If n is composite and has no factors, it is prime.\n        if (!foundOne)\
    \ return true;\n        // Otherwise, loop through factors less than n.\n    \
    \    long limitSqrt = (limit * limit) / 4l;\n        while (i <= limitSqrt) {\n\
    \            if (n % i == 0l) return false; // Not prime.\n            i += 2l;\n\
    \        }\n        return true; // Prime\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010891
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Return false if n is negative.\n        if (n\
    \ < 0) {\n            return false;\n        }\n\n        // If n is even, return\
    \ false only if n is greater than 1.\n        if (n % 2 == 0) {\n            return\
    \ (n == 2);\n        }\n\n        // If n is odd, return true only if n is greater\
    \ than 2.\n        return (n == 3);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplscf9sfg.java:40)\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) {\n            return false;\n      \
    \  }\n        if (n == 1l) {\n            return true;\n        }\n        if\
    \ (n % 2l == 0l) {\n            return isPrime(n);\n        }\n        if (n <\
    \ 4l) return false;\n        int div = 3;\n        long limit = (long) Math.sqrt(n);\n\
    \        for (long d = 4l; d < limit; d += 2l) {\n            if (n % d == 0l)\
    \ {\n                return false;\n            }\n            div++;\n      \
    \  }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.isPrime(tmpkwc4d9z5.java:25)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\
    \tat Problem.isPrime(tmpkwc4d9z5.java:32)\n\tat Problem.isPrime(tmpk"
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2) return false;\n        if (n == 2) return\
    \ true;\n        if (n % 2 == 0) return false;\n        if (n % 3 == 0) return\
    \ false;\n        int counter = 5;\n        while (counter * counter <= n) {\n\
    \            if (n % counter == 0) {\n                return false;\n        \
    \    }\n            counter += 6;\n        }\n        return true;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphlx3wj0f.java:50)\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1l)\n            return false;\n       \
    \ if (n == 1l)\n            return true;\n        if (n % 2 == 0) {\n        \
    \    long x = n + 2;\n            while (x % 2 == 0)\n                x /= 2;\n\
    \            return x != 1;\n        }\n        if (n % 3 == 0) {\n          \
    \  long x = n + 3;\n            while (x % 3 == 0)\n                x /= 3;\n\
    \            return x != 1;\n        }\n        if (n % 5 == 0) {\n          \
    \  long x = n + 5;\n            while (x % 5 == 0)\n                x /= 5;\n\
    \            return x != 1;\n        }\n        long a = 2l;\n        while (a\
    \ < n) {\n            long x = n + a;\n            if (x % 2 == 0 || x % 3 ==\
    \ 0 || x % 5 == 0)\n                return false;\n            a += 2l;\n    \
    \    }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpplbu8v1x.java:58)\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1)\n            return false;\n        if\
    \ (n <= 3l)\n            return true;\n        if ((n % 2l) == 0)\n          \
    \  return false;\n        if (n % (3l) == 0)\n            return false;\n    \
    \    int max = (int) (Math.sqrt(n) + .0000001l);\n        for (int i = 3l; i <=\
    \ max; i += 2l) {\n            if (n % il == 0)\n                return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfoq6hz6q.java:33: error: ')' expected\n        int max = (int)\
    \ (Math.sqrt(n) + .0000001l);\n                                              \
    \  ^\n/tmp/tmpfoq6hz6q.java:33: error: ';' expected\n        int max = (int) (Math.sqrt(n)\
    \ + .0000001l);\n                                                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l)\n            return false;\n        else\
    \ if (n < 4l)\n            return true;\n        else if (n % 2l == 0)\n     \
    \       return false;\n        else if (n % 3l == 0)\n            return false;\n\
    \        else\n            return isPrime(n - 1l) && isPrime(n - 3l);\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy6k25wom.java:38)\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2)\n            return false;\n        //\
    \ If n is divisible by 2...\n        if (n % 2 == 0) {\n            // ...then\
    \ it's prime.\n            return true;\n        }\n        // If n is divisible\
    \ by 1 then it's not prime.\n        if (n % 1 == 0)\n            return false;\n\
    \n        // Factor 2 to the nearest power of 2.\n        long x = 2L;\n     \
    \   while (x <= Math.sqrt(n))\n            if (n % x == 0)\n                return\
    \ false;\n            x += 2L;\n\n        // All factors of n have been tried.\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc335g4c0.java:47)\n"
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long prime[] = new long[(int) Math.ceil(Math.sqrt(n))];\n\
    \        Arrays.fill(prime, true);\n        long i = 2;\n        while (prime[i])\
    \ {\n            long j = i;\n            while (prime[++j]) {\n            }\n\
    \            prime[i] = false;\n            long divisor = j;\n            while\
    \ (divisor >= 2) {\n                if (n % divisor == 0) {\n                \
    \    prime[divisor] = false;\n                    break;\n                }\n\
    \                divisor /= 2;\n            }\n            i++;\n        }\n \
    \       return prime[n] == true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnblcndq3.java:26: error: no suitable method found for fill(long[],boolean)\n\
    \        Arrays.fill(prime, true);\n              ^\n    method Arrays.fill(long[],long)\
    \ is not applicable\n      (argument mismatch; boolean cannot be converted to\
    \ long)\n    method Arrays.fill(int[],int) is not applicable\n      (argument\
    \ mismatch; long[] cannot be converted to int[])\n    method Arrays.fill(short[],short)\
    \ is not applicable\n      (argument mismatch; long[] cannot be converted to short[])\n\
    \    method Arrays.fill(char[],char) is not applicable\n      (argument mismatch;\
    \ long[] cannot be converted to char[])\n    method Arrays.fill(byte[],byte) is\
    \ not applicable\n      (argument mismatch; long[] cannot be converted to byte[])\n\
    \    method Arrays.fill(boolean[],boolean) is not applicable\n      (argument\
    \ mismatch; long[] cannot be converted to boolean[])\n    method Arrays.fill(double[],double)\
    \ is not applicable\n      (argument mismatch; long[] cannot be converted to double[])\n\
    \    method Arrays.fill(float[],float) is not applicable\n      (argument mismatch;\
    \ long[] cannot be converted to float[])\n    method Arrays.fill(Object[],Object)\
    \ is not applicable\n      (argument mismatch; long[] cannot be converted to Object[])\n\
    /tmp/tmpnblcndq3.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n        while (prime[i]) {\n                     ^\n/tmp/tmpnblcndq3.java:28:\
    \ error: incompatible types: long cannot be converted to boolean\n        while\
    \ (prime[i]) {\n                    ^\n/tmp/tmpnblcndq3.java:30: error: incompatible\
    \ types: possible lossy conversion from long to int\n            while (prime[++j])\
    \ {\n                         ^\n/tmp/tmpnblcndq3.java:30: error: incompatible\
    \ types: long cannot be converted to boolean\n            while (prime[++j]) {\n\
    \                        ^\n/tmp/tmpnblcndq3.java:32: error: incompatible types:\
    \ possible lossy conversion from long to int\n            prime[i] = false;\n\
    \                  ^\n/tmp/tmpnblcndq3.java:32: error: incompatible types: boolean\
    \ cannot be converted to long\n       "
  stdout: ''
  timestamp: 1660010886
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        boolean isPrime;\n        if ((n>1) && (n%2==0l)\
    \ && (n%3==0l))\n            isPrime=true;\n        else\n            isPrime=false;\n\
    \        return isPrime;\n    }\n    public static void main(String[] args) {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptuhuqp3h.java:33)\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        final int divisors[] = new int[(int) Math.sqrt(n)\
    \ + 1];\n        for (int divisor = 1; divisor <= divisors.length; ++divisor)\n\
    \            if (n % divisor == 0)\n                return false;\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcrg_mrtn.java:33)\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        Set<Long> set = new HashSet<Long>();\n        long\
    \ x = n;\n        long y = 1;\n\n        for (; x > 1; x = x / y) {\n        \
    \    if (x == y)\n                return false;\n            if (set.contains(x))\n\
    \                return false;\n\n            set.add(x);\n            y = x *\
    \ y;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwvsaw3af.java:41)\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Check range\n        if(n<2l) return false; //\
    \ 1 is not a prime\n        if(isDivisible(n, 2l)) return false; // n is prime\n\
    \        if(n%2l==0l) return false; // 2 is not prime\n        if(n%3l==0l) return\
    \ false; // 3 is not prime\n        for(int i=5;i*i<=n;i+=6l){\n            if(isDivisible(n,\
    \ i)) return false; // n is not prime\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe8hhifxj.java:27: error: cannot find symbol\n        if(isDivisible(n,\
    \ 2l)) return false; // n is prime\n           ^\n  symbol:   method isDivisible(long,long)\n\
    \  location: class Problem\n/tmp/tmpe8hhifxj.java:31: error: cannot find symbol\n\
    \            if(isDivisible(n, i)) return false; // n is not prime\n         \
    \      ^\n  symbol:   method isDivisible(long,int)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long limit = n;\n        int count = 0;\n       \
    \ while (n/2 >= 1) {\n            if (n%2 == 0) {\n                n = (n*3 +\
    \ 1)/2;\n            } else {\n                n = (n-1)/2;\n            }\n \
    \           count++;\n            if (limit == n) {\n                return true;\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpznkyxrtk.java:41)\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        boolean prime = true;\n        if (n < 2l) return\
    \ prime;\n        for (long i = 3l; i < n; i += 2l) {\n            if (n % i ==\
    \ 0l) return prime;\n        }\n        return prime;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuckdzu_m.java:33)\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if(n<=1l){\n            return false;\n        }\n\
    \        long m = Long.parseLong(n);\n        if(m%2==0){\n            return\
    \ false;\n        }\n        long r = m;\n        while(r<Long.MAX_VALUE){\n \
    \           if(m%r==0){\n                return false;\n            }\n      \
    \      r+=2l;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc73v3zek.java:28: error: incompatible types: long cannot be converted\
    \ to String\n        long m = Long.parseLong(n);\n                           \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Start with 2 (the only even prime)\n        long\
    \ a = 2l;\n        while (a < Math.sqrt(n)) {\n            // While the square\
    \ root of the number is not prime\n            if (n % a == 0) {\n           \
    \     // If it is evenly divisible by all numbers from 2 to the square root of\
    \ the number\n                for (long b = 2; b < Math.sqrt(a); b++) {\n    \
    \                // If it is divisible by all numbers from 2 to the square root\
    \ of the number + 1\n                    if ((a%b) == 0) {\n                 \
    \       // Then the number is not prime\n                        return false;\n\
    \                    }\n                }\n            }\n            // Go to\
    \ the next number\n            a++;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn290yws7.java:45)\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        final List<Long> factors = new ArrayList<>();\n \
    \       for (int i = 0; i < 2; i++) {\n            factors.add(i);\n         \
    \   long x = n;\n            while (x != 1) {\n                x /= 2;\n     \
    \           factors.add(x);\n            }\n        }\n\n        for (long f =\
    \ 1; f <= n / 2; f++) {\n            if (n % f == 0) {\n                return\
    \ false;\n            }\n        }\n\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n \
    \   assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3v5at57m.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            factors.add(i);\n                        ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        boolean isPrime;\n        long i = 1;\n        isPrime\
    \ = true;\n        while (n/i > 0) {\n            if (n/i < 1)\n             \
    \   isPrime = false;\n            else\n                n = (n * i) + i;\n   \
    \         i++;\n        }\n        return isPrime;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuhg9uzdv.java:38)\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return false; // 0 and 1 are not primes\n\
    \        if (n == 2l) return true;\n        if (n <= 3l) return (n%2l == 0l);\n\
    \        if (n % 2l == 0l) return false; // 2 is a prime number\n\n        long\
    \ sqr = sqr(n);\n        boolean isPrime = true;\n        long limit = sqr + 1l;\n\
    \        long i = 3l; // i is prime to begin with\n        while (i <= limit)\
    \ {\n            if (n % i == 0l) isPrime = false;\n            i += 2l;\n   \
    \     }\n\n        return isPrime;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbjz53j3d.java:30: error: cannot find symbol\n        long sqr =\
    \ sqr(n);\n                   ^\n  symbol:   method sqr(long)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2)\n            return false;\n        if\
    \ (n % 2 == 0)\n            return false;\n\n        // Trial division avoids\
    \ problems due to lack of precision of division.\n        for (int i = 3; i <=\
    \ Math.sqrt(n); i += 2)\n            if (n % i == 0)\n                return false;\n\
    \n        return true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010887
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return false;\n        long max = (long)\
    \ Math.sqrt(n) + 1;\n        for (long i = 2l; i <= max; i++) {\n            if\
    \ (n % i == 0l) return false; // n is not prime.\n        }\n        return true;\
    \ // n is prime.\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Check that the number is greater than zero.\n\
    \        if (n < 1l)\n            return false;\n        // Check if n is prime.\n\
    \        if (n == 1l)\n            return true;\n        // If the number is not\
    \ prime, check if it has even divisors.\n        if ((n & 1) == 0)\n         \
    \   return false;\n        // If n is even, check whether it has any divisors.\n\
    \        if ((n % 2l) == 0)\n            return false;\n        // If n is odd,\
    \ check whether it has a divisor greater than 1.\n        if ((n % 2l) == 1l)\n\
    \            return isPrime(n / 2l);\n        // Otherwise, loop to check for\
    \ divisors.\n        for (long i = 3l; i * i < n; i = i * 2l)\n            if\
    \ (n % i == 0l)\n                return false;\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzfgsdjxl.java:48)\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // TODO: implement this function\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy11efxqz.java:30)\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2) {\n            return false;\n       \
    \ }\n        if (n == 2) {\n            return true;\n        }\n        // Trial\
    \ division check\n        // - If no divisors <= sqrt of n, return true\n    \
    \    // - If any divisor <= sqrt of n, return false\n        // - If any divisor\
    \ > sqrt of n, return true if the remainders are 0\n        // - Else, return\
    \ false\n        long sqrtn = Math.sqrt(n);\n        long lastDivisor = 0;\n \
    \       for (long i = 2; i <= sqrtn; i++) {\n            if (n % i == 0) {\n \
    \               lastDivisor = i;\n            }\n        }\n        if (lastDivisor\
    \ == 0) {\n            return true;\n        } else {\n            return false;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9vnnug80.java:36: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long sqrtn = Math.sqrt(n);\n                  \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1) return false;\n        for (long i =\
    \ 2; i <= (int) Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1l) return true;\n        if (n == 0l) return\
    \ false;\n        final long sqroot = Math.sqrt(n);\n        for (long i = 1l;\
    \ i <= sqroot; i++) {\n            if (n % i == 0l) return false; \n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyuvqlf27.java:27: error: incompatible types: possible lossy conversion\
    \ from double to long\n        final long sqroot = Math.sqrt(n);\n           \
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1660010887
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n >= 2)\n            return (n%2 != 0);\n   \
    \     if (n >= 3)\n            return (n%3 != 0);\n        if (n >= 5)\n     \
    \       return (n%5 != 0);\n        if (n >= 7)\n            return (n%7 != 0);\n\
    \        if (n >= 11)\n            return (n%11 != 0);\n        if (n >= 13)\n\
    \            return (n%13 != 0);\n        if (n >= 17)\n            return (n%17\
    \ != 0);\n        if (n >= 19)\n            return (n%19 != 0);\n        if (n\
    \ >= 23)\n            return (n%23 != 0);\n        if (n >= 29)\n            return\
    \ (n%29 != 0);\n        if (n >= 31)\n            return (n%31 != 0);\n      \
    \  if (n >= 37)\n            return (n%37 != 0);\n        if (n >= 43)\n     \
    \       return (n%43 != 0);\n        if (n >= 51)\n            return (n%51 !=\
    \ 0);\n        if (n >= 61)\n            return (n%61 != 0);\n        if (n >=\
    \ 67)\n            return (n%67 != 0);\n        if (n >= 71)\n            return\
    \ (n%71 != 0);\n        if (n >= 77)\n            return (n%77 != 0);\n      \
    \  if (n >= 83)\n            return (n%83 != 0);\n        if (n >= 89)\n     \
    \       return (n%89 != 0);\n        if (n >= 97)\n            return (n%97 !=\
    \ 0);\n        return (n%1 != 0);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi5y4lotu.java:80)\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1l)\n            return false;\n\n     \
    \   final long sqrtOfN = LongMath.sqrt(n);\n        for (long i = 3l; i <= sqrtOfN;\
    \ i += 2l)\n            if (n % i == 0)\n                return false;\n\n   \
    \     return true;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp12b7harz.java:28: error: cannot find symbol\n        final long\
    \ sqrtOfN = LongMath.sqrt(n);\n                             ^\n  symbol:   variable\
    \ LongMath\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2) return false;\n        if (n == 2) return\
    \ true;\n        if (n % 2 == 0) return false;\n\n        for(long i = 2; i <=\
    \ n/2; i++) {\n            if (n % i == 0) return false;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1l) return true;\n        if (n == 2l) return\
    \ true;\n        if (n % 2 == 0) return false;\n        if (n % 3 == 0) return\
    \ false;\n\n        long count = 3l;\n        for (long i = 5l; i <= n; i += 6l)\
    \ count = (count + 6l) * i;\n\n        long limit = (long) (Math.sqrt(n) + 1l);\n\
    \        for (int i = 3; i * i <= limit; i += 6) {\n            long j = n / i;\n\
    \            if (j * i == n) return true;\n            if (i * i == n) return\
    \ true;\n            if (j * i == n) return true;\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyr2hlp88.java:44)\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        int counter = 0;\n        for(int i=2; i<=n/2; i++)\
    \ {\n            if (n % i == 0) {\n                counter++;\n            }\n\
    \        }\n        return (counter <= 1);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptrin_ck4.java:39)\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) {\n            return false;\n      \
    \  }\n        long sqn = n * n;\n        for (long i = 3l; i * i <= sqn; i +=\
    \ 6l) { // loop by square\n            if (sqn % (i + 2l) == 0l) {\n         \
    \       return false;\n            }\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcjbd9wnx.java:37)\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1l)\n            return true;\n\n      \
    \  if (n == 0l)\n            return false;\n\n        if (n % 2l == 0l)\n    \
    \        return isPrime((n / 2l));\n\n        long f = 5l * (3l * ((n / 4l) +\
    \ 2));\n\n        for (int i = 3l; i < (long) Math.sqrt(f); i += 6l) // For odd\
    \ numbers, i can be odd or even\n            if (f % i == 0l)\n              \
    \  return false;\n\n        for (int i = 3l; i < (long) Math.sqrt(f); i += 6l)\n\
    \            if ((f % i) == 0l)\n                return false;\n\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjkq3qve9.java:36: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int i = 3l; i < (long) Math.sqrt(f); i += 6l)\
    \ // For odd numbers, i can be odd or even\n                     ^\n/tmp/tmpjkq3qve9.java:40:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    for (int i = 3l; i < (long) Math.sqrt(f); i += 6l)\n                    \
    \ ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1) return false;\n        long limit = n\
    \ / 2;\n        long i = 2;\n        while (i < limit) {\n            if (n %\
    \ i == 0) return false;\n            i++;\n        }\n        return true;\n \
    \   }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0kzli3_n.java:40)\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        long i = 2;\n        while (i < n) {\n          \
    \  if (n % i == 0) {\n                return false;\n            }\n         \
    \   i++;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1osgkvgr.java:41)\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) {\n            return false; // trivial\
    \ case, return immediately if n < 2\n        }\n        if (n % 2 == 0) {\n  \
    \          return false; // even, return immediately if n % 2 == 0\n        }\n\
    \        // Odd case: we know n is not divisible by 2\n        // We only need\
    \ to test odd numbers since a composite number can be made up of only odds\n \
    \       // We do not need to check for multiples of 3 for n > 2\n        long\
    \ limit = n - 1l;\n        if (limit % 3 == 0l) {\n            return true; //\
    \ composite, return immediately if limit % 3 == 0\n        }\n        // We know\
    \ that n is not divisible by 3 so we need to check odd numbers up to limit\n \
    \       // We only need to test odd numbers since a composite number can be made\
    \ up of only odds\n        limit = limit / 2l;\n        long i = 1l;\n       \
    \ while (i <= limit) {\n            if (n % i == 0l) {\n                return\
    \ false; // composite, return immediately if n is not divisible by i\n       \
    \     }\n            if (i == 2l) {\n                return true; // n is prime\n\
    \            }\n            i++;\n        }\n        return true; // n is prime\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpphn_o1sa.java:55)\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n<=1) return false;\n        for (long i=2;i<n;i++)\
    \ {\n            if (n%i==0) return false;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 0 || n != 1L && n != 2L) {\n           \
    \ return false;\n        }\n        if (n >= 2L) {\n            n = 2L;\n    \
    \        for (long i = 3L; i <= Math.sqrt(n); i += 2L) {\n                if (n\
    \ % i == 0L) {\n                    return false;\n                }\n       \
    \     }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx4_502r0.java:40)\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1l) return false;\n        if (n == 2l)\
    \ return true;\n        if (n % 2l == 0l) return false;\n        long sq = n *\
    \ n;\n        for (long i = 5l; i <= sq; i += 6l) {\n            if (n % i ==\
    \ 0l) return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcug3lupu.java:36)\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1l) { return false; }\n        for (long\
    \ i = 2l; i <= Math.sqrt(n); ++i) {\n            if (n % i == 0) { return false;\
    \ }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if ((n >= 0l) && (n < (long) Math.sqrt(n))) {\n \
    \           boolean prime = true;\n            for (long d = 2; d < (long) Math.sqrt(n);\
    \ d++)\n                if (n % d == 0) {\n                    prime = false;\n\
    \                    break;\n                }\n            return prime;\n  \
    \      }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiw60g1a1.java:38)\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1) {\n            return false;\n      \
    \  }\n        for (int i = 2; i * i <= n; i++) {\n            if (n % i == 0)\
    \ {\n                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n == 1l) {\n            return false;\n     \
    \   }\n        if (n == 2 || n == 3) {\n            return true;\n        }\n\
    \        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n\
    \        for (long i = 3; i * i <= n; i += 6) {\n            if (n % i == 0 ||\
    \ n % (i + 2) == 0) {\n                return false;\n            }\n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplow1eumb.java:53)\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Create a set to hold all numbers from 2 to n inclusive.\n\
    \        Set<Long> numbers = IntStream.range(2, n).boxed().collect(Collectors.toSet());\n\
    \        // Return true if n is prime.\n        return IntStream.range(2, n).anyMatch(i\
    \ -> numbers.contains(i / i));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sbjbi0w.java:26: error: incompatible types: possible lossy conversion\
    \ from long to int\n        Set<Long> numbers = IntStream.range(2, n).boxed().collect(Collectors.toSet());\n\
    \                                               ^\n/tmp/tmp2sbjbi0w.java:28: error:\
    \ incompatible types: possible lossy conversion from long to int\n        return\
    \ IntStream.range(2, n).anyMatch(i -> numbers.contains(i / i));\n            \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // If the number is prime, return true.\n       \
    \ long limit = (long) Math.sqrt(n);\n        if (limit > 1l && limit < (long)\
    \ Integer.MAX_VALUE) {\n            if (n % limit == 0l || n % (limit + 1l) ==\
    \ 0l) {\n                return false;\n            }\n        }\n\n        //\
    \ Otherwise, go through all the numbers between 2 and limit, and\n        // count\
    \ how many times each one divides n. Return false if at least\n        // one\
    \ number is divisible by n.\n        long count = 1;\n        long multiple =\
    \ n;\n        while (multiple <= limit) {\n            if (n % multiple == 0l)\
    \ {\n                count++;\n            }\n            multiple++;\n      \
    \  }\n\n        // If at least one number is divisible by n, then n is not prime.\n\
    \        return count > 1l;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphdljz9oj.java:50)\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if(n<2) return false;\n        if(n<3) return true;\n\
    \        long limit=Math.sqrt(n);\n        for(long i=2; i<=limit; i++) {\n  \
    \          if(n%i==0) return false;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n\
    \    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3f1sg2tw.java:27: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long limit=Math.sqrt(n);\n                    \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1) return false;\n        if (n <= 3) return\
    \ true;\n        if (n % 2 == 0) return false;\n        if (n % 3 == 0) return\
    \ false;\n\n        long sqrtn = (long) Math.sqrt(n);\n        for (long i = 3;\
    \ i <= sqrtn; i += 2)\n            if (n % i == 0)\n                return false;\n\
    \n        return true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010889
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        /*\n         * http://en.wikipedia.org/wiki/Primality_test\n\
    \         */\n        if (n == 1) {\n            return true;\n        }\n\n \
    \       if (n <= 2) {\n            return false;\n        }\n\n        long r\
    \ = n;\n        int m = n;\n        long t;\n        do {\n            m = (long)\
    \ Math.floor(Math.sqrt(m));\n            t += 1;\n        } while ((t % 2) ==\
    \ 0);\n        long mSquared = m * m;\n        long r = n - mSquared;\n\n    \
    \    if (r % 2 == 0) {\n            return false;\n        }\n        long s =\
    \ m * m - (r * r);\n        for (int i = 3; i <= s / 2; i += 2) {\n          \
    \  if ((m * m - i * i) % n == 0) {\n                return false;\n          \
    \  }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6nj0nqb3.java:37: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int m = n;\n                ^\n/tmp/tmp6nj0nqb3.java:40:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        m = (long) Math.floor(Math.sqrt(m));\n                ^\n/tmp/tmp6nj0nqb3.java:44:\
    \ error: variable r is already defined in method isPrime(long)\n        long r\
    \ = n - mSquared;\n             ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1) {\n            return false;\n      \
    \  }\n\n        // Sieve of Erastothenes.\n        long[] a = {2l, 3l, 5l, 7l,\
    \ 11l, 13l, 17l, 19l, 23l, 29l, 31l, 37l, 41l, 43l, 47l, 53l, 59l, 61l, 67l, 71l,\
    \ 73l, 79l, 83l, 89l, 97l, 101l, 103l, 107l, 109l, 113l, 127l, 131l, 137l, 139l,\
    \ 149l, 151l, 157l, 163l, 167l, 173l, 179l, 181l, 191l, 193l, 197l, 199l, 211l,\
    \ 223l, 227l, 229l, 233l, 239l, 241l, 251l, 257l, 263l, 269l, 271l, 277l, 281l,\
    \ 283l, 293l, 307l, 311l, 313l, 317l, 331l, 337l, 347l, 349l, 353l, 359l, 367l,\
    \ 373l, 379l, 383l, 389l, 397l, 401l, 409l, 419l, 421l, 431l, 433l, 439l, 443l,\
    \ 449l, 457l, 461l, 463l, 467l, 479l, 487l, 491l, 499l, 503l, 509l, 521l, 523l,\
    \ 541l, 547l, 557l, 561l, 563l, 569l, 573l, 579l, 587l, 593l, 599l, 601l, 607l,\
    \ 613l, 617l, 619l, 631l, 641l, 643l, 647l, 653l, 659l, 661l, 673l, 677l, 683l,\
    \ 691l, 697l, 701l, 709l, 719l, 727l, 733l, 739l, 743l, 751l, 757l, 761l, 769l,\
    \ 773l, 787l, 797l, 809l, 811l, 821l, 823l, 827l, 829l, 839l, 853l, 857l, 859l,\
    \ 863l, 877l, 881l, 883l, 887l, 907l, 911l, 919l, 929l, 937l, 941l, 947l, 953l,\
    \ 967l, 971l, 977l, 983l, 991l, 997l, 1009l, 1013l, 1019l, 1021l, 1031l, 1033l,\
    \ 1039l, 1049l, 1051l, 1063l, 1071l, 1077l, 1083l, 1097l, 1111l, 1113l, 1123l,\
    \ 1129l, 1151\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0o_twof.java:31: error: ';' expected\n    }\n     ^\n/tmp/tmpj0o_twof.java:32:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010888
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // Check base cases (n is less than 2)\n        if\
    \ (n < 2L) {\n            return false;\n        }\n        // Check n is even\n\
    \        if ((n % 2L) == 0L) {\n            return false;\n        }\n       \
    \ // Check n is a prime\n        for (long i = 2L; i < n; i++) {\n           \
    \ if ((n % i) == 0L) {\n                return false;\n            }\n       \
    \ }\n        return true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010889
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if(n<2) return false;\n        for(int i=2;i<Math.sqrt(n);i++)\n\
    \            if(n%i==0) return false;\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n \
    \   assert(isPrime((101l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l)) == (true));\n\
    \    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l)) == (false));\n\
    \    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l)) == (true));\n\
    \    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l)) == (false));\n\
    \    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw9h0uw9b.java:36)\n"
  stdout: ''
  timestamp: 1660010889
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        // If n is odd or zero, then n is not prime.\n  \
    \      if (n <= 1l) return false; // If n is zero, return false.\n        if (n\
    \ <= 3l) return true; // If n is 1 or 2, n is prime.\n        if (n % 2 == 0l)\
    \ return false; // If n is even, return false.\n        long m = (long) (Math.sqrt(n));\n\
    \        // If n is odd, then m * m is neither the product of n and n-1 nor\n\
    \        // the product of n-1 and n-2, so m is odd.\n        // If n is even,\
    \ then m * m is either n and n-1 or n-1 and n-2, so\n        // m is even.\n \
    \       // If m * m is either n or n-1, then m is prime. If m * m is either\n\
    \        // n-2 or n-1, then m is not prime, since it would be a factor of n.\n\
    \        while ((m % 2l == 0l) || (m * m % nl == n)) m += 2l;\n        // If m\
    \ * m is either n or n-1, then m is not prime, since it would\n        // be a\
    \ factor of n.\n        if (m * m == n) return false; // If m * m is n, then m\
    \ is not prime.\n        return true; // If m * m is not n or n-1, then m is prime.\n\
    \    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnqrvo1y_.java:36: error: cannot find symbol\n        while ((m\
    \ % 2l == 0l) || (m * m % nl == n)) m += 2l;\n                               \
    \           ^\n  symbol:   variable nl\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010889
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l)\n            return false;\n        if\
    \ (n == 2l)\n            return true;\n        if (isPrimeIter(n, 2l))\n     \
    \       return true;\n        if (isPrimeIter(n - 1l, 2l))\n            return\
    \ true;\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3qbf4xxz.java:29: error: cannot find symbol\n        if (isPrimeIter(n,\
    \ 2l))\n            ^\n  symbol:   method isPrimeIter(long,long)\n  location:\
    \ class Problem\n/tmp/tmp3qbf4xxz.java:31: error: cannot find symbol\n       \
    \ if (isPrimeIter(n - 1l, 2l))\n            ^\n  symbol:   method isPrimeIter(long,long)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660010889
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n <= 1)\n            return false;\n        for\
    \ (long i = 2; i <= Math.sqrt(n); i++)\n            if (n % i == 0)\n        \
    \        return false;\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010889
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2) return false;\n        else if (n == 2)\
    \ return true;\n        if (n % 2 == 0) return false;\n        else if (n % 3\
    \ == 0) return false;\n        else if (n % 5 == 0) return false;\n        else\
    \ for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0) return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2x9hy5ha.java:43)\n"
  stdout: ''
  timestamp: 1660010889
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 1l) return false;\n        if (n == 1l) return\
    \ true;\n\n        int limit = (int)(Math.sqrt(n))+1;\n\n        // If n is less\
    \ than or equal to 1 or is equal to the square\n        // root of n, then n is\
    \ prime.\n        if (n == 1l || n <= limit) {\n            for (int i = 2l; i\
    \ <= limit; i++) {\n                if (n % i == 0l) return false;\n         \
    \   }\n            return true;\n        }\n\n        // Test if n is divisible\
    \ by 2, then 3, then 5\n        for (int i = 2l; i <= limit; i += 2l) {\n    \
    \        if (n % i == 0l) return false;\n        }\n\n        // Test if n is\
    \ divisible by 3, then 5, then 7\n        for (int i = 3l; i <= limit; i += 2l)\
    \ {\n            if (n % i == 0l) return false;\n        }\n\n        // Test\
    \ if n is divisible by 5\n        for (int i = 6l; i <= limit; i += 2l) {\n  \
    \          if (n % i == 0l) return false;\n        }\n\n        // If we get here,\
    \ n is composite and divisible by all of\n        // the factors 2, 3, and 5.\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l)) == (true));\n\
    \    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l)) == (false));\n\
    \    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l)) == (true));\n\
    \    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l)) == (true));\n\
    \    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l)) == (false));\n\
    \    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptkwrjy3i.java:33: error: incompatible types: possible lossy conversion\
    \ from long to int\n            for (int i = 2l; i <= limit; i++) {\n        \
    \                 ^\n/tmp/tmptkwrjy3i.java:40: error: incompatible types: possible\
    \ lossy conversion from long to int\n        for (int i = 2l; i <= limit; i +=\
    \ 2l) {\n                     ^\n/tmp/tmptkwrjy3i.java:45: error: incompatible\
    \ types: possible lossy conversion from long to int\n        for (int i = 3l;\
    \ i <= limit; i += 2l) {\n                     ^\n/tmp/tmptkwrjy3i.java:50: error:\
    \ incompatible types: possible lossy conversion from long to int\n        for\
    \ (int i = 6l; i <= limit; i += 2l) {\n                     ^\n4 errors\n"
  stdout: ''
  timestamp: 1660010889
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if(n<2) {\n            return false;\n        }\n\
    \        boolean result = true;\n        for(long i=2; i<n; i++) {\n         \
    \   if(! (n % i)) {\n                result = false;\n                break;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn3n95zzs.java:30: error: bad operand type long for unary operator\
    \ '!'\n            if(! (n % i)) {\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660010889
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        return isPrime(n, false);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx_8wgt_h.java:25: error: method isPrime in class Problem cannot\
    \ be applied to given types;\n        return isPrime(n, false);\n            \
    \   ^\n  required: long\n  found:    long,boolean\n  reason: actual and formal\
    \ argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660010889
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2l) return false; // not prime\n        if\
    \ (n == 2l) return true; // is prime\n        if (n <= 3l) return true; // is\
    \ prime\n        if (n % 2 == 0l) return false; // not prime\n        if (n %\
    \ 3 == 0l) return false; // not prime\n        if (n % 5 == 0l) return false;\
    \ // not prime\n        if (n % 7 == 0l) return false; // not prime\n        long\
    \ limit = (long) Math.sqrt(n);\n        for (int i = 3l; i * i <= limit; i +=\
    \ 6l) { // check factors\n            if (n % i == 0l) return false; // not prime\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(isPrime((6l)) == (false));\n    assert(isPrime((101l)) ==\
    \ (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((13441l))\
    \ == (true));\n    assert(isPrime((61l)) == (true));\n    assert(isPrime((4l))\
    \ == (false));\n    assert(isPrime((1l)) == (false));\n    assert(isPrime((5l))\
    \ == (true));\n    assert(isPrime((11l)) == (true));\n    assert(isPrime((17l))\
    \ == (true));\n    assert(isPrime((85l)) == (false));\n    assert(isPrime((77l))\
    \ == (false));\n    assert(isPrime((255379l)) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbhwvjibv.java:33: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (int i = 3l; i * i <= limit; i += 6l) { // check\
    \ factors\n                     ^\n1 error\n"
  stdout: ''
  timestamp: 1660010889
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true if a given number is prime, and false otherwise.\n\
    \    // >>> isPrime((6l))\n    // (false)\n    // >>> isPrime((101l))\n    //\
    \ (true)\n    // >>> isPrime((11l))\n    // (true)\n    // >>> isPrime((13441l))\n\
    \    // (true)\n    // >>> isPrime((61l))\n    // (true)\n    // >>> isPrime((4l))\n\
    \    // (false)\n    // >>> isPrime((1l))\n    // (false)\n    public static boolean\
    \ isPrime(long n) {\n        if (n < 2)\n            return false;\n        if\
    \ (n <= 4l) { // if n is too small, we can't possibly be prime\n            return\
    \ true;\n        }\n        if (n % 2 == 0)\n            return false;\n     \
    \   // Favour composite numbers over composites smaller than n/2\n        for\
    \ (int i = 3; i * i <= n; i += 2l) { // test odd composites up to sqrt(n)\n  \
    \          if (n % i == 0)\n                return false;\n        }\n       \
    \ return true;\n    }\n    public static void main(String[] args) {\n    assert(isPrime((6l))\
    \ == (false));\n    assert(isPrime((101l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((13441l)) == (true));\n    assert(isPrime((61l))\
    \ == (true));\n    assert(isPrime((4l)) == (false));\n    assert(isPrime((1l))\
    \ == (false));\n    assert(isPrime((5l)) == (true));\n    assert(isPrime((11l))\
    \ == (true));\n    assert(isPrime((17l)) == (true));\n    assert(isPrime((85l))\
    \ == (false));\n    assert(isPrime((77l)) == (false));\n    assert(isPrime((255379l))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6kjzdq8f.java:45)\n"
  stdout: ''
  timestamp: 1660010889
