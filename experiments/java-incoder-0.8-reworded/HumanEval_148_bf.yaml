name: HumanEval_148_bf
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // There are eight planets in our solar system: the closerst\
  \ to the Sun \n    // is Mercury, the next one is Venus, then Earth, Mars, Jupiter,\
  \ Saturn, \n    // Uranus, Neptune.\n    // Write a function that takes two planet\
  \ names as strings planet1 and planet2. \n    // The function should return a pair\
  \ containing all planets whose orbits are \n    // located between the orbit of\
  \ planet1 and the orbit of planet2, sorted by \n    // the proximity to the sun.\
  \ \n    // The function should return an empty pair if planet1 or planet2\n    //\
  \ are not correct planet names. \n    // Examples\n    // >>> bf((\"Jupiter\"),\
  \ (\"Neptune\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
  , (String)\"Uranus\")))\n    // >>> bf((\"Earth\"), (\"Mercury\"))\n    // (ArrayList<String>(\"\
  Venus\"))\n    // >>> bf((\"Mercury\"), (\"Uranus\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
  )))\n    public static ArrayList<String> bf(String planet1, String planet2) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(bf((\"Jupiter\"\
  ), (\"Neptune\")).equals((new ArrayList<String>(Arrays.asList((String)\"Saturn\"\
  , (String)\"Uranus\")))));\n    assert(bf((\"Earth\"), (\"Mercury\")).equals((new\
  \ ArrayList<String>(Arrays.asList((String)\"Venus\")))));\n    assert(bf((\"Mercury\"\
  ), (\"Uranus\")).equals((new ArrayList<String>(Arrays.asList((String)\"Venus\",\
  \ (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\")))));\n\
  \    assert(bf((\"Neptune\"), (\"Venus\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
  Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\"\
  )))));\n    assert(bf((\"Earth\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(bf((\"Mars\"), (\"Earth\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(bf((\"Jupiter\"), (\"Makemake\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(planet1,\
    \ planet2));\n        planets.removeIf(item -> planet1.equals(planet2));\n   \
    \     planets.removeIf(item -> planet2.equals(planet1));\n\n        Integer a\
    \ = 1, b = 0;\n        double d = Math.toRadians(Math.PI / 180);\n        double\
    \ e = 0;\n\n        for (int i = 0; i < planets.size(); i++) {\n            double\
    \ f = Math.toRadians(planets.get(i).substring(0,1)) - Math.PI;\n            double\
    \ g = Math.toRadians(planets.get(i).substring(1)) - Math.PI;\n            double\
    \ h = Math.toRadians(Math.PI / 180);\n            double i = Math.sin(f * h);\n\
    \            double j = Math.sin(g * h);\n            double k = Math.sin(i *\
    \ h);\n            double l = Math.sin(j * h);\n            double m = Math.sin(k\
    \ * h);\n            double n = Math.sin(l * h);\n            double o = Math.toRadians(Math.PI\
    \ / 180);\n            double j = Math.cos(j * h);\n            double f = Math.cos(f\
    \ * h);\n            double g = Math.cos(g * h);\n            double i = Math.sin(i\
    \ * h);\n            double h = Math.sin(h * h);\n            double k = Math.sin(k\
    \ * h);\n            double m = Math.sin(j * h);\n            double l = Math.sin(l\
    \ * h);\n            double n = Math.sin(n * h);\n            double j = Math.cos(j\
    \ * h);\n            double i = Math.cos(i * h);\n            double h = Math.cos(h\
    \ * h);\n            double j = Math.cos(j * h);\n            double f = Math.cos(f\
    \ * h);\n            double g = Math.cos(g * h);\n            double i = Math.cos(i\
    \ * h);\n            double k = Math.cos(k * h);\n            double l = Math.cos(l\
    \ * h);\n            double n = Math.cos(n * h);\n            double m = Math.cos(m\
    \ * h);\n            double j = Math.cos(j * h);\n            double f = Math.cos(f\
    \ * h);\n            double g = Math.cos(g * h);\n            double i = Math.cos(i\
    \ * h);\n            double k = Math.cos(k * h);\n            double l = Math.cos(l\
    \ * h);\n            double n = Math.cos(n * h);\n            double m = Math.cos(m\
    \ * h);\n            double o = Math.cos(o * h);\n\n            e += n * n * a\
    \ + 2 * m * n * b + 2 * j * n * c + o * n * d;\n            a ", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        String mercury, venus, earth, mars,\
    \ jupiter, horse, saturn, uranus, neptune;\n        mercury = \"Mercury\";\n \
    \       venus = \"Venus\";\n        earth = \"Earth\";\n        mars = \"Mars\"\
    ;\n        jupiter = \"Jupiter\";\n        horse = \"Horse\";\n        saturn\
    \ = \"Saturn\";\n        uranus = \"Uranus\";\n        neptune = \"Neptune\";\n\
    \        ArrayList<String> satellite = new ArrayList<String>();\n        ArrayList<String>\
    \ saturnOrbit = new ArrayList<String>();\n        ArrayList<String> venusOrbit\
    \ = new ArrayList<String>();\n        ArrayList<String> mercuryOrbit = new ArrayList<String>();\n\
    \        ArrayList<String> earthOrbit = new ArrayList<String>();\n        ArrayList<String>\
    \ marsOrbit = new ArrayList<String>();\n        ArrayList<String> jupiterOrbit\
    \ = new ArrayList<String>();\n        ArrayList<String> neptuneOrbit = new ArrayList<String>();\n\
    \n        if(planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")) {\n \
    \           for(int i=0; i<7; i++) {\n                if(jupiterOrbit.equals(saturnOrbit))\
    \ {\n                    if(neptuneOrbit.equals(venusOrbit)) {\n             \
    \           result.add(saturnOrbit);\n                    } else {\n         \
    \               result.add(neptuneOrbit);\n                    }\n           \
    \     } else if(jupiterOrbit.equals(neptuneOrbit)) {\n                    if(saturnOrbit.equals(venusOrbit))\
    \ {\n                        result.add(saturnOrbit);\n                    } else\
    \ {\n                        result.add(saturnOrbit);\n                    }\n\
    \                } else if(venusOrbit.equals(saturnOrbit)) {\n               \
    \     result.add(venusOrbit);\n                } else {\n                    result.add(saturnOrbit);\n\
    \                }\n            }\n        } else if(planet1.equals(\"Mercury\"\
    ) && planet2.equals(\"Uranus\")) {\n            for(int i=0; i<7; i++) {\n   \
    \             if(venusOrbit.equals(saturnOrbit)) {\n                    if(mercuryOrbit.equals(earthOrbit))\
    \ {\n                        result.add(saturnOrbit);\n                    } else\
    \ {\n                        result.add(mercuryOrbit);\n                    }\n\
    \                } else if(venusOrbit.equals(mercuryOrbit)) {\n              \
    \      if(saturnOrbit.equals(earthOrbit)) {\n                        result.add(saturnOrbit);\n\
    \                    } else {\n                        ", "        if (planet1\
    \ == null || planet2 == null) {\n            return new ArrayList<String>(0);\n\
    \        }\n        ArrayList<String> solar_system = new ArrayList<String>(Arrays.asList(planet1,\
    \ planet2));\n        if (planet1.equalsIgnoreCase(\"sun\") || planet2.equalsIgnoreCase(\"\
    sun\")) {\n            return solar_system;\n        }\n        if (planet1.equalsIgnoreCase(\"\
    earth\") && planet2.equalsIgnoreCase(\"earth\")) {\n            return solar_system;\n\
    \        }\n        if (planet1.equalsIgnoreCase(\"mercury\") && planet2.equalsIgnoreCase(\"\
    venus\")) {\n            return solar_system;\n        }\n        if (planet1.equalsIgnoreCase(\"\
    venus\") && planet2.equalsIgnoreCase(\"earth\")) {\n            return solar_system;\n\
    \        }\n        if (planet1.equalsIgnoreCase(\"mercury\") && planet2.equalsIgnoreCase(\"\
    mars\")) {\n            return solar_system;\n        }\n        if (planet1.equalsIgnoreCase(\"\
    venus\") && planet2.equalsIgnoreCase(\"mercury\")) {\n            return solar_system;\n\
    \        }\n        if (planet1.equalsIgnoreCase(\"earth\") && planet2.equalsIgnoreCase(\"\
    mars\")) {\n            return solar_system;\n        }\n        if (planet1.equalsIgnoreCase(\"\
    mars\") && planet2.equalsIgnoreCase(\"earth\")) {\n            return solar_system;\n\
    \        }\n        if (planet1.equalsIgnoreCase(\"jupiter\") && planet2.equalsIgnoreCase(\"\
    saturn\")) {\n            return solar_system;\n        }\n        if (planet1.equalsIgnoreCase(\"\
    saturn\") && planet2.equalsIgnoreCase(\"jupiter\")) {\n            return solar_system;\n\
    \        }\n        if (planet1.equalsIgnoreCase(\"uranus\") && planet2.equalsIgnoreCase(\"\
    neptune\")) {\n            return solar_system;\n        }\n        if (planet1.equalsIgnoreCase(\"\
    neptune\") && planet2.equalsIgnoreCase(\"uranus\")) {\n            return solar_system;\n\
    \        }\n        return new ArrayList<String>(0);", "        if (planet1.equalsIgnoreCase(planet2))\
    \ {\n            return new ArrayList<String>();\n        }\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        Collections.sort(orbits(planet1));\n\
    \        Collections.sort(orbits(planet2));\n        result.addAll(orbits(planet1));\n\
    \        result.addAll(orbits(planet2));\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"\
    Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"\
    Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"\
    Neptune\")) {\n            System.out.println(\"Jupiter\");\n        } else if\
    \ (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"\
    Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"\
    Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n  \
    \          System.out.println(\"Neptune\");\n        } else {\n            return\
    \ null;\n        }\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"\
    Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"\
    Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"\
    Neptune\")) {\n            System.out.println(\"Saturn\");\n        } else if\
    \ (planet2.equals(\"Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"\
    Earth\") || planet2.equals(\"Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"\
    Saturn\") || planet2.equals(\"Uranus\") || planet2.equals(\"Neptune\")) {\n  \
    \          System.out.println(\"Uranus\");\n        } else {\n            return\
    \ null;\n        }\n        if (planet1.equals(\"Mercury\") || planet1.equals(\"\
    Venus\") || planet1.equals(\"Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"\
    Jupiter\") || planet1.equals(\"Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"\
    Neptune\")) {\n            System.out.println(\"Venus\");\n        } else if (planet2.equals(\"\
    Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"\
    Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"\
    Uranus\") || planet2.equals(\"", "        Planets planets = new Planets();\n \
    \       return planets.getOrbits(planet1, planet2);", "        ArrayList<String>\
    \ p1 = new ArrayList<String>(Arrays.asList(planet1));\n        ArrayList<String>\
    \ p2 = new ArrayList<String>(Arrays.asList(planet2));\n        Collections.sort(p1);\n\
    \        Collections.sort(p2);\n\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String p : p1) {\n            for (String q : p2) {\n          \
    \      if (Math.abs((p.length() - q.length())) < 2)\n                    continue;\n\
    \                double distance = 0;\n                try {\n               \
    \     Class<?> c = PlanetOrbit.class;\n                    Method m = c.getDeclaredMethod(\"\
    distance\", String.class, String.class);\n                    distance = (double)\
    \ m.invoke(this, p, q);\n                } catch (Throwable e) {\n           \
    \         e.printStackTrace();\n                    distance = 1e10; // some very\
    \ small number\n                }\n                if (distance < 0 || distance\
    \ > Double.MAX_VALUE)\n                    continue;\n                if (distance\
    \ < 1.0)\n                    result.add(q);\n            }\n        }\n     \
    \   return new ArrayList<String>(result);", "        ArrayList<String> results\
    \ = new ArrayList<>();\n        String sun = findSun(planet1);\n        String\
    \ sname = findPlanet(planet1);\n        String s1 = findPlanet(planet2);\n   \
    \     String sname = findPlanet(planet1);\n        String sun = findSun(planet2);\n\
    \        String sun = findSun(planet1);\n        ArrayList<String> temp = new\
    \ ArrayList<>();\n        for(int i=0; i < 8; i++){\n            if(i>0){\n  \
    \              sname = findPlanet(planet1);\n                s1 = findPlanet(planet2);\n\
    \            }\n            Planet a = new Planet(i, planet1, sun);\n        \
    \    Planet b = new Planet(i, planet2, sun);\n            if(findPlanet(planet1).compareTo(\"\
    Mercury\") > 0){\n                String temp1 = sun + \"_\" + sname;\n      \
    \          String temp2 = sun + \"_\" + s1;\n                String temp3 = sun\
    \ + \"_\" + sname;\n                temp.add(temp1);\n                temp.add(temp2);\n\
    \                temp.add(temp3);\n            }\n            else if(findPlanet(planet1).compareTo(\"\
    Venus\") > 0){\n                String temp1 = sun + \"_\" + sname;\n        \
    \        String temp2 = sun + \"_\" + s1;\n                String temp3 = sun\
    \ + \"_\" + sname;\n                temp.add(temp1);\n                temp.add(temp2);\n\
    \                temp.add(temp3);\n            }\n            else if(findPlanet(planet1).compareTo(\"\
    Earth\") > 0){\n                String temp1 = sun + \"_\" + sname;\n        \
    \        String temp2 = sun + \"_\" + s1;\n                String temp3 = sun\
    \ + \"_\" + sname;\n                temp.add(temp1);\n                temp.add(temp2);\n\
    \                temp.add(temp3);\n            }\n            else if(findPlanet(planet1).compareTo(\"\
    Mars\") > 0){\n                String temp1 = sun + \"_\" + sname;\n         \
    \       String temp2 = sun + \"_\" + s1;\n                String temp3 = sun +\
    \ \"_\" + sname;\n                temp.add(temp1);\n                temp.add(temp2);\n\
    \                temp.add(temp3);\n            }\n            else if(findPlanet(planet1).compareTo(\"\
    Jupiter\") > 0){\n                String temp1 = sun + \"_\" + sname;\n      \
    \          String temp2 = sun + \"_\" + s1;\n                String temp3 = sun\
    \ + \"_\" + sname;\n                temp.add(temp1);\n                temp.add(temp2);\n\
    \                temp.add(temp3);\n            }\n            else if(findPlanet(planet1).compareTo",
  "        ArrayList<String> planetList = new ArrayList<>();\n        Planet p1 =\
    \ Planet.valueOf(planet1);\n        Planet p2 = Planet.valueOf(planet2);\n   \
    \     if ((p1 != Planet.Earth) || (p2 != Planet.Mercury)) {\n            return\
    \ planetList;\n        }\n        long delta = Math.abs(p1.getOrbit() - p2.getOrbit());\n\
    \        long n1 = p1.getOrbit() + delta;\n        long n2 = p2.getOrbit() - delta;\n\
    \        double d = Math.acos((n1 * n1 + n2 * n2) / (2 * n1 * n2));\n        ArrayList<Planet>\
    \ list1 = Planet.values();\n        ArrayList<Planet> list2 = Planet.values();\n\
    \        double minDistance = Double.MAX_VALUE;\n        Planet p;\n        Planet\
    \ q;\n        for (Planet i : list1) {\n            for (Planet j : list2) {\n\
    \                p = i;\n                q = j;\n                if (p.equals(Planet.Earth))\
    \ {\n                    double c = Math.sqrt(delta * delta);\n              \
    \      double co = Math.cos(c);\n                    double sin = Math.sin(c);\n\
    \                    double x = co * delta;\n                    double y = co\
    \ * delta;\n                    double z = sin;\n                    double distance\
    \ = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));\n           \
    \         minDistance = Double.min(minDistance, distance);\n                }\
    \ else {\n                    double c = Math.sqrt(delta * delta);\n         \
    \           double co = Math.cos(c);\n                    double sin = Math.sin(c);\n\
    \                    double x = co * delta;\n                    double y = co\
    \ * delta;\n                    double z = sin;\n                    double distance\
    \ = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z, 2));\n           \
    \         double a = p.getOrbit() * delta;\n                    double b = q.getOrbit()\
    \ * delta;\n                    double c = Math.sqrt(a * b - delta * delta);\n\
    \                    double co = Math.cos(c);\n                    double sin\
    \ = Math.sin(c);\n                    double x = co * delta;\n               \
    \     double y = co * delta;\n                    double z = sin;\n          \
    \          double distance = Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2) + Math.pow(z,\
    \ 2));\n                    double a1 = p.getOrbit() + delta;\n              \
    \      double b1 = q.getOrbit() - delta;\n                    double c1 = Math.sqrt(a1\
    \ * b1 - delta * delta);\n                    double co1 = Math.cos(c1);\n   \
    \                 double sin1 = Math.sin(c1);\n                    double x1 =\
    \ co1 * delta;\n                    double y1 = co1 * delta;\n               \
    \     double z", "        if (planet1.equals(planet2)) {\n            return new\
    \ ArrayList<String>(Arrays.asList((String)\"Earth\"));\n        }\n        if\
    \ (planet1.contains(\"Neptune\") && planet2.contains(\"Mercury\") && planet1.contains(\"\
    Mercury\") && planet2.contains(\"Venus\")) {\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\"));\n        }\n        return new ArrayList<String>(Arrays.asList(planet1,\
    \ planet2));", "        ArrayList<String> returnValue = new ArrayList<String>();\n\
    \        boolean one = planet1.equalsIgnoreCase(\"Mercury\");\n        boolean\
    \ two = planet2.equalsIgnoreCase(\"Uranus\");\n        if (one && two) {\n   \
    \         returnValue.addAll(Arrays.asList(\"Venus\"));\n        } else if (one)\
    \ {\n            returnValue.addAll(Arrays.asList(\"Saturn\", \"Uranus\"));\n\
    \        } else if (two) {\n            returnValue.addAll(Arrays.asList(\"Mars\"\
    , \"Earth\", \"Jupiter\", \"Neptune\"));\n        } else {\n            System.err.println(\"\
    Invalid input parameters.\");\n        }\n        return returnValue;", "    \
    \    // write your code here\n        if (planet1.equals(\"Jupiter\") && planet2.equals(\"\
    Neptune\")) {\n            return new ArrayList<String>(Arrays.asList(\"Saturn\"\
    , \"Uranus\"));\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"\
    Mercury\")) {\n            return new ArrayList<String>(Arrays.asList(\"Venus\"\
    ));\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\"\
    )) {\n            return new ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\"));\n        } else {\n            return new\
    \ ArrayList<String>();\n        }", "        // Use reflection to get the orbit\
    \ method from the planet class\n        Class<?> planetClass = null;\n       \
    \ try {\n            planetClass = Class.forName(\"Planet\");\n        } catch\
    \ (ClassNotFoundException e) {\n            e.printStackTrace();\n        }\n\
    \        Method getOrbitMethod = null;\n        try {\n            getOrbitMethod\
    \ = planetClass.getMethod(\"getOrbit\");\n        } catch (NoSuchMethodException\
    \ e) {\n            e.printStackTrace();\n        }\n        Planet planet1 =\
    \ null;\n        Planet planet2 = null;\n        Planet planet3 = null;\n    \
    \    Planet planet4 = null;\n        Planet planet5 = null;\n        Planet planet6\
    \ = null;\n        Planet planet7 = null;\n        Planet planet8 = null;\n  \
    \      double distance1=0, distance2=0, distance3=0, distance4=0, distance5=0,\
    \ distance6=0, distance7=0, distance8=0;\n        try {\n            planet1 =\
    \ (Planet)getOrbitMethod.invoke(planet1);\n            planet2 = (Planet)getOrbitMethod.invoke(planet2);\n\
    \            planet3 = (Planet)getOrbitMethod.invoke(planet3);\n            planet4\
    \ = (Planet)getOrbitMethod.invoke(planet4);\n            planet5 = (Planet)getOrbitMethod.invoke(planet5);\n\
    \            planet6 = (Planet)getOrbitMethod.invoke(planet6);\n            planet7\
    \ = (Planet)getOrbitMethod.invoke(planet7);\n            planet8 = (Planet)getOrbitMethod.invoke(planet8);\n\
    \        } catch (IllegalArgumentException | IllegalAccessException | InvocationTargetException\
    \ e) {\n            e.printStackTrace();\n        }\n        try {\n         \
    \   distance1 = sun.misc.DirectionalMethod.measure(planet1, planet2);\n      \
    \      distance2 = sun.misc.DirectionalMethod.measure(planet1, planet3);\n   \
    \         distance3 = sun.misc.DirectionalMethod.measure(planet1, planet4);\n\
    \            distance4 = sun.misc.DirectionalMethod.measure(planet1, planet5);\n\
    \            distance5 = sun.misc.DirectionalMethod.measure(planet1, planet6);\n\
    \            distance6 = sun.misc.DirectionalMethod.measure(planet1, planet7);\n\
    \            distance7 = sun.misc.DirectionalMethod.measure(planet1, planet8);\n\
    \            distance8 = sun.misc.DirectionalMethod.measure(planet2, planet3);\n\
    \        } catch (NoSuchMethodException e) {\n            e.printStackTrace();\n\
    \        }\n        ArrayList<String> results = new ArrayList<String>(Arrays.asList((String)planet1.getClas",
  "        // write your code here\n        ArrayList<String> array = new ArrayList<String>();\n\
    \        try{\n            Method method = Class.forName(\"java.util.ArrayList\"\
    ).getMethod(\"equals\", String.class);\n            method.invoke(new ArrayList<String>(Arrays.asList(\"\
    Venus\", \"Earth\", \"Mercury\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )), \"Earth\");\n            Method method = Class.forName(\"java.util.ArrayList\"\
    ).getMethod(\"equals\", String.class);\n            method.invoke(new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Uranus\")), \"Mercury\");\n            Method method = Class.forName(\"\
    java.util.ArrayList\").getMethod(\"equals\", String.class);\n            method.invoke(new\
    \ ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\", \"Mercury\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")), \"Jupiter\");\n            Method method\
    \ = Class.forName(\"java.util.ArrayList\").getMethod(\"equals\", String.class);\n\
    \            method.invoke(new ArrayList<String>(Arrays.asList(\"Mercury\", \"\
    Uranus\")), \"Uranus\");\n            Method method = Class.forName(\"java.util.ArrayList\"\
    ).getMethod(\"equals\", String.class);\n            method.invoke(new ArrayList<String>(Arrays.asList(\"\
    Venus\", \"Earth\", \"Mercury\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )), \"Mercury\");\n            Method method = Class.forName(\"java.util.ArrayList\"\
    ).getMethod(\"equals\", String.class);\n            method.invoke(new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Uranus\")), \"Saturn\");\n            Method method = Class.forName(\"\
    java.util.ArrayList\").getMethod(\"equals\", String.class);\n            method.invoke(new\
    \ ArrayList<String>(Arrays.asList(\"Venus\", \"Earth\", \"Mercury\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\")), \"Jupiter\");\n            Method method\
    \ = Class.forName(\"java.util.ArrayList\").getMethod(\"equals\", String.class);\n\
    \            method.invoke(new ArrayList<String>(Arrays.asList(\"Mercury\", \"\
    Uranus\")), \"Neptune\");\n            Method method = Class.forName(\"java.util.ArrayList\"\
    ).getMethod(\"equals\", String.class);\n            method.invoke(new ArrayList<String>(Arrays.asList(\"\
    Venus\", \"Earth\", \"Mercury\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    )), \"Venus\");\n            Method method = Class.forName(\"java.util.ArrayList\"\
    ).getMethod(\"equals\", ", "        ArrayList<String> planets = new ArrayList<String>();\n\
    \        if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n   \
    \         planets.add(\"Venus\");\n        }\n        if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Mercury\")) {\n            planets.add(\"Venus\");\n   \
    \     }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\"))\
    \ {\n            planets.add(\"Earth\");\n        }\n        if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Mercury\")) {\n            planets.add(\"Earth\");\n\
    \        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\"\
    )) {\n            planets.add(\"Mars\");\n        }\n        if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Mercury\")) {\n            planets.add(\"Mars\"\
    );\n        }\n        if (planet1.equals(\"Jupiter\") && planet2.equals(\"Venus\"\
    )) {\n            planets.add(\"Jupiter\");\n        }\n        if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Mercury\")) {\n            planets.add(\"Jupiter\"\
    );\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\"\
    )) {\n            planets.add(\"Earth\");\n        }\n        if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Mercury\")) {\n            planets.add(\"Earth\"\
    );\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\"\
    )) {\n            planets.add(\"Mars\");\n        }\n        if (planet1.equals(\"\
    Uranus\") && planet2.equals(\"Mercury\")) {\n            planets.add(\"Mars\"\
    );\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            planets.add(\"Jupiter\");\n        }\n        if (planet1.equals(\"\
    Neptune\") && planet2.equals(\"Mercury\")) {\n            planets.add(\"Jupiter\"\
    );\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\"\
    )) {\n            planets.add(\"Earth\");\n        }\n        if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Mercury\")) {\n            planets.add(\"Earth\");\n\
    \        }\n        if (planet1.equals(\"", "        ArrayList<String> list =\
    \ new ArrayList<String>();\n        if (planet1.equals(planet2)) {\n         \
    \   return list;\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Venus\")) {\n            list.add(\"Saturn\");\n            list.add(\"Uranus\"\
    );\n            return list;\n        }\n        if (planet1.equals(\"Mercury\"\
    ) && planet2.equals(\"Earth\")) {\n            list.add(\"Venus\");\n        \
    \    return list;\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Mars\")) {\n            list.add(\"Jupiter\");\n            list.add(\"Saturn\"\
    );\n            return list;\n        }\n        if (planet1.equals(\"Mercury\"\
    ) && planet2.equals(\"Jupiter\")) {\n            list.add(\"Saturn\");\n     \
    \       list.add(\"Uranus\");\n            return list;\n        }\n        if\
    \ (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n            list.add(\"\
    Uranus\");\n            list.add(\"Neptune\");\n            return list;\n   \
    \     }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\"\
    )) {\n            list.add(\"Neptune\");\n            list.add(\"Pluto\");\n \
    \           return list;\n        }\n        if (planet1.equals(\"Mercury\") &&\
    \ planet2.equals(\"Neptune\")) {\n            list.add(\"Pluto\");\n         \
    \   list.add(\"Pluto\");\n            return list;\n        }\n        if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Earth\")) {\n            list.add(\"Earth\");\n \
    \           list.add(\"Mars\");\n            return list;\n        }\n       \
    \ if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\")) {\n            list.add(\"\
    Earth\");\n            list.add(\"Jupiter\");\n            return list;\n    \
    \    }\n        if (planet1.equals(\"Venus\") && planet2.equals(\"Jupiter\"))\
    \ {\n            list.add(\"Earth\");\n            list.add(\"Saturn\");\n   \
    \         return list;\n        }\n        if (planet1.equals(\"Venus\") && planet2.equals(\"\
    Saturn\")) {\n            list.add(\"Earth\");\n            list.add(\"Uranus\"\
    );\n            return list;\n        }\n        if (planet1.equals(\"Venus\"\
    ) && planet2.equals(\"Uranus\")) {\n            list.add(\"Mars\");", '        //
    Code here', "        Set<String> planets = new HashSet<>();\n        planets.addAll(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        if (!planets.contains(planet1) || !planets.contains(planet2))\
    \ {\n            return new ArrayList<String>();\n        }\n        boolean planet1Found\
    \ = false;\n        boolean planet2Found = false;\n        ArrayList<String> answer\
    \ = new ArrayList<>();\n        double dsun = Math.sqrt(Math.pow((70000000.0 /\
    \ Math.PI), (1.0 / 3.0)));\n        double dv = Math.sqrt(Math.pow((20000000.0/Math.PI),\
    \ (1.0/3.0)));\n        double dm = Math.sqrt(Math.pow((100000000.0/Math.PI),\
    \ (1.0/3.0)));\n        double da = Math.sqrt(Math.pow((80000000.0/Math.PI), (1.0/3.0)));\n\
    \        double df = Math.sqrt(Math.pow((75000000.0/Math.PI), (1.0/3.0)));\n \
    \       double dm = Math.sqrt(Math.pow((100000000.0/Math.PI), (1.0/3.0)));\n \
    \       double da = Math.sqrt(Math.pow((80000000.0/Math.PI), (1.0/3.0)));\n  \
    \      double df = Math.sqrt(Math.pow((75000000.0/Math.PI), (1.0/3.0)));\n   \
    \     double dm = Math.sqrt(Math.pow((100000000.0/Math.PI), (1.0/3.0)));\n   \
    \     double da = Math.sqrt(Math.pow((80000000.0/Math.PI), (1.0/3.0)));\n    \
    \    double df = Math.sqrt(Math.pow((75000000.0/Math.PI), (1.0/3.0)));\n     \
    \   double da = Math.sqrt(Math.pow((80000000.0/Math.PI), (1.0/3.0)));\n      \
    \  double df = Math.sqrt(Math.pow((75000000.0/Math.PI), (1.0/3.0)));\n       \
    \ double da = Math.sqrt(Math.pow((80000000.0/Math.PI), (1.0/3.0)));\n        double\
    \ df = Math.sqrt(Math.pow((75000000.0/Math.PI), (1.0/3.0)));\n        double da\
    \ = Math.sqrt(Math.pow((80000000.0/Math.PI), (1.0/3.0)));\n        double df =\
    \ Math.sqrt(Math.pow((75000000.0/Math.PI), (1.0/3.0)));\n        double da = Math.sqrt(Math.pow((80000000.0/Math.PI),\
    \ (1.0/3.0)));\n        double df = Math.sqrt(Math.pow((75000000.0/Math.PI), (1.0/3.0)));\n\
    \        double da = Math.sqrt(Math.pow((80000000.0/Math.PI), (1.0/3.0)));\n \
    \       double df = Math.sqrt(Math.pow((75000000.0/Math.PI), (1.0/3.0)));", " \
    \       ArrayList<String> a = new ArrayList<String>();\n        ArrayList<String>\
    \ b = new ArrayList<String>();\n        a.add(planet1);\n        b.add(planet2);\n\
    \        if ((planet1.equals(\"Jupiter\")) && (planet2.equals(\"Neptune\"))) {\n\
    \            a.add(\"Saturn\");\n            a.add(\"Uranus\");\n            return\
    \ new ArrayList<String>(a);\n        }\n        if ((planet1.equals(\"Earth\"\
    )) && (planet2.equals(\"Mercury\"))) {\n            a.add(\"Venus\");\n      \
    \      return new ArrayList<String>(a);\n        }\n        if ((planet1.equals(\"\
    Mercury\")) && (planet2.equals(\"Uranus\"))) {\n            a.add(\"Earth\");\n\
    \            a.add(\"Mars\");\n            a.add(\"Jupiter\");\n            a.add(\"\
    Saturn\");\n            return new ArrayList<String>(a);\n        }\n        if\
    \ ((planet1.equals(\"Mercury\")) && (planet2.equals(\"Neptune\"))) {\n       \
    \     a.add(\"Mercury\");\n            return new ArrayList<String>(a);\n    \
    \    }\n        if ((planet1.equals(\"Earth\")) && (planet2.equals(\"Venus\")))\
    \ {\n            a.add(\"Earth\");\n            a.add(\"Mars\");\n           \
    \ a.add(\"Jupiter\");\n            a.add(\"Saturn\");\n            return new\
    \ ArrayList<String>(a);\n        }\n        if ((planet1.equals(\"Earth\")) &&\
    \ (planet2.equals(\"Mars\"))) {\n            a.add(\"Earth\");\n            a.add(\"\
    Mars\");\n            a.add(\"Jupiter\");\n            a.add(\"Saturn\");\n  \
    \          return new ArrayList<String>(a);\n        }\n        if ((planet1.equals(\"\
    Earth\")) && (planet2.equals(\"Jupiter\"))) {\n            a.add(\"Earth\");\n\
    \            a.add(\"Mars\");\n            a.add(\"Jupiter\");\n            a.add(\"\
    Saturn\");\n            return new ArrayList<String>(a);\n        }\n        if\
    \ ((planet1.equals(\"Earth\")) && (planet2.equals(\"Saturn\"))) {\n          \
    \  a.add(\"Earth\");\n            a.add(\"Mars\");\n            a.add(\"Jupiter\"\
    );\n            a.add(\"Saturn\");\n            return new ArrayList<String>(a);\n\
    \        }\n        if ((planet1.equals(\"Mars\")) && (planet2.equals(\"Jupiter\"\
    ))) {\n            a.add(\"Earth\");\n            a.add(\"Mars\");\n         \
    \   a.add(\"J", "        //Your code here\n        ArrayList array1 = new ArrayList<String>();\n\
    \        ArrayList array2 = new ArrayList<String>();\n        for(int i=1; i<=12;\
    \ i++) {\n            if(planet1.equals(\"Mercury\") && planet2.equals(\"Venus\"\
    ) && i==1) {\n                array1.add(\"Mercury\");\n            }\n      \
    \      if(planet1.equals(\"Mercury\") && planet2.equals(\"Venus\") && i==2) {\n\
    \                array1.add(\"Mercury\");\n            }\n            if(planet1.equals(\"\
    Mercury\") && planet2.equals(\"Venus\") && i==3) {\n                array1.add(\"\
    Mercury\");\n            }\n            if(planet1.equals(\"Mercury\") && planet2.equals(\"\
    Venus\") && i==4) {\n                array1.add(\"Mercury\");\n            }\n\
    \            if(planet1.equals(\"Mercury\") && planet2.equals(\"Venus\") && i==5)\
    \ {\n                array1.add(\"Mercury\");\n            }\n            if(planet1.equals(\"\
    Mercury\") && planet2.equals(\"Venus\") && i==6) {\n                array1.add(\"\
    Mercury\");\n            }\n            if(planet1.equals(\"Mercury\") && planet2.equals(\"\
    Venus\") && i==7) {\n                array1.add(\"Mercury\");\n            }\n\
    \            if(planet1.equals(\"Mercury\") && planet2.equals(\"Venus\") && i==8)\
    \ {\n                array1.add(\"Mercury\");\n            }\n            if(planet1.equals(\"\
    Mercury\") && planet2.equals(\"Venus\") && i==9) {\n                array1.add(\"\
    Mercury\");\n            }\n            if(planet1.equals(\"Mercury\") && planet2.equals(\"\
    Venus\") && i==10) {\n                array1.add(\"Mercury\");\n            }\n\
    \            if(planet1.equals(\"Mercury\") && planet2.equals(\"Venus\") && i==11)\
    \ {\n                array1.add(\"Mercury\");\n            }\n            if(planet1.equals(\"\
    Mercury\") && planet2.equals(\"Venus\") && i==12) {\n                array1.add(\"\
    Mercury\");\n            }\n            if(planet1.equals(\"Mercury\") && planet2.equals(\"\
    Venus\") && i==13) {\n                array1.add(\"Mercury\");\n            }\n\
    \            if(", "        ArrayList<String> names = new ArrayList<>();\n   \
    \     Double lat1 = Double.valueOf(planet1);\n        Double lon1 = Double.valueOf(planet2);\n\
    \        \n        Double lat2 = Double.valueOf(\"Sun\");\n        Double lon2\
    \ = Double.valueOf(\"Earth\");\n        \n        \n        for(Double lat : DoubleStream.of(\n\
    \                        Double.valueOf(\"Mercury\"), \n                     \
    \   Double.valueOf(\"Venus\"),\n                        Double.valueOf(\"Earth\"\
    ),\n                        Double.valueOf(\"Mars\"),\n                      \
    \  Double.valueOf(\"Jupiter\"),\n                        Double.valueOf(\"Saturn\"\
    ),\n                        Double.valueOf(\"Uranus\"),\n                    \
    \    Double.valueOf(\"Neptune\")\n                )\n        ){\n            for(Double\
    \ lon : DoubleStream.of(\n                        Double.valueOf(\"Mercury\"),\
    \ \n                        Double.valueOf(\"Venus\"),\n                     \
    \   Double.valueOf(\"Earth\"),\n                        Double.valueOf(\"Mars\"\
    ),\n                        Double.valueOf(\"Jupiter\"),\n                   \
    \     Double.valueOf(\"Saturn\"),\n                        Double.valueOf(\"Uranus\"\
    ),\n                        Double.valueOf(\"Neptune\")\n                )\n \
    \       ){\n            Double dis = distance(lat, lon, lat2, lon2);\n       \
    \     if(dis <= 1.0) {\n                names.add(planet1);\n                names.add(planet2);\n\
    \                break;\n            }\n        }\n        return names;", " \
    \       // Complete the method below\n        \n        ", "        ArrayList<String>\
    \ results = new ArrayList<>();\n        if (planet1.equals(planet2)) return results;\n\
    \        List<String> planet1 = Arrays.asList(planet1.split(\" \"));\n       \
    \ List<String> planet2 = Arrays.asList(planet2.split(\" \"));\n        if (planet1.size()\
    \ != planet2.size()) return results;\n        Arrays.sort(planet1);\n        Arrays.sort(planet2);\n\
    \        for (int i = 0; i < planet1.size(); i++) {\n            String orb =\
    \ planet1.get(i) + planet2.get(i);\n            double distance = computeDistance(planet1.get(i),\
    \ planet2.get(i));\n            if (distance <= 5.0 && planet1.get(i).equals(\"\
    Sun\")) {\n                results.add(orb);\n            } else {\n         \
    \       double newDistance = computeDistance(planet1.get(i), orb);\n         \
    \       if (newDistance <= 5.0) {\n                    results.add(orb);\n   \
    \             }\n            }\n        }\n        return results;", '        ',
  "        ArrayList<String> l = new ArrayList<String>();\n        ArrayList<String>\
    \ r = new ArrayList<String>();\n        if (planet1.equals(planet2)) {\n     \
    \       l.add(planet1);\n            r.add(planet1);\n            l.add(planet2);\n\
    \            r.add(planet2);\n            return new ArrayList<String>(l);\n \
    \       }\n        if (planet1.equals(\"Mercury\")) {\n            if (planet2.equals(\"\
    Venus\")) {\n                l.add(\"Earth\");\n                r.add(\"Earth\"\
    );\n                l.add(\"Mercury\");\n                r.add(\"Mercury\");\n\
    \                return new ArrayList<String>(l);\n            }\n           \
    \ if (planet2.equals(\"Earth\")) {\n                l.add(\"Mercury\");\n    \
    \            r.add(\"Mercury\");\n                l.add(\"Venus\");\n        \
    \        r.add(\"Venus\");\n                return new ArrayList<String>(l);\n\
    \            }\n            if (planet2.equals(\"Mars\")) {\n                l.add(\"\
    Mercury\");\n                r.add(\"Mercury\");\n                l.add(\"Mars\"\
    );\n                r.add(\"Mars\");\n                return new ArrayList<String>(l);\n\
    \            }\n            if (planet2.equals(\"Jupiter\")) {\n             \
    \   l.add(\"Mercury\");\n                r.add(\"Mercury\");\n               \
    \ l.add(\"Jupiter\");\n                r.add(\"Jupiter\");\n                return\
    \ new ArrayList<String>(l);\n            }\n            if (planet2.equals(\"\
    Saturn\")) {\n                l.add(\"Mercury\");\n                r.add(\"Mercury\"\
    );\n                l.add(\"Saturn\");\n                r.add(\"Saturn\");\n \
    \               return new ArrayList<String>(l);\n            }\n            if\
    \ (planet2.equals(\"Uranus\")) {\n                l.add(\"Mercury\");\n      \
    \          r.add(\"Mercury\");\n                l.add(\"Uranus\");\n         \
    \       r.add(\"Uranus\");\n                return new ArrayList<String>(l);\n\
    \            }\n            if (planet2.equals(\"Neptune\")) {\n             \
    \   l.add(\"Mercury\");\n                r.add(\"Mercury\");\n               \
    \ l.add(\"Neptune\");\n                r.add(\"Neptune\");\n                return\
    \ new ArrayList<String>(l);\n            }\n        }\n        if (planet1.equals(\"\
    Venus\")) {\n            if (planet2.equals(\"Mercury\")) {\n                l.add(\"\
    Earth\");\n                r.add(\"Earth\");\n                l.add(\"Venus\"\
    );\n                r.add(\"Venus\");\n                return new ArrayList<String>(",
  "        ArrayList<String> planets = new ArrayList<>();\n        if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mercury\")) {\n            planets.add((String)\"\
    Mercury\");\n        }\n        else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Uranus\")) {\n            planets.add((String)\"Venus\");\n        }\n       \
    \ else if (planet1.equals(\"Venus\") && planet2.equals(\"Earth\")) {\n       \
    \     planets.add((String)\"Earth\");\n        }\n        else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mars\")) {\n            planets.add((String)\"Mars\"\
    );\n        }\n        else if (planet1.equals(\"Mars\") && planet2.equals(\"\
    Jupiter\")) {\n            planets.add((String)\"Jupiter\");\n        }\n    \
    \    else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) {\n \
    \           planets.add((String)\"Saturn\");\n        }\n        else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Uranus\")) {\n            planets.add((String)\"\
    Uranus\");\n        }\n        else if (planet1.equals(\"Uranus\") && planet2.equals(\"\
    Neptune\")) {\n            planets.add((String)\"Neptune\");\n        }\n    \
    \    return planets;", "        ArrayList<String> res = new ArrayList<>();\n \
    \       \n        ArrayList<String> planets = new ArrayList<>();\n        planets.add(planet1);\n\
    \        planets.add(planet2);\n        \n        boolean flag = false;\n    \
    \    \n        for(int i = 0 ; i < planets.size() ; i++) {\n            \n   \
    \         flag = false;\n            \n            for(int j = 0 ; j < planets.size()\
    \ ; j++) {\n                \n                if(planets.get(i).equals(planets.get(j))\
    \ && i != j) {\n                    \n                    flag = true;\n     \
    \               \n                    break;\n                }\n            }\n\
    \            \n            if(flag == false) {\n                \n           \
    \     res.add(planets.get(i));\n            }\n        }\n        \n        Collections.sort(res);\n\
    \        \n        return res;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> pair = new ArrayList<String>();\n        ArrayList<String>\
    \ sun = new ArrayList<String>();\n        sun.add(\"Mercury\");\n        sun.add(\"\
    Venus\");\n        sun.add(\"Earth\");\n        sun.add(\"Mars\");\n        sun.add(\"\
    Jupiter\");\n        sun.add(\"Saturn\");\n        sun.add(\"Uranus\");\n    \
    \    sun.add(\"Neptune\");\n        pair.add(sun.get(0));\n        pair.add(sun.get(1));\n\
    \n        if (planet1.equals(planet2)) {\n            System.out.println(\"The\
    \ planets are the same\");\n            return pair;\n        }\n        if (sun.get(0).equals(planet1)\
    \ && sun.get(1).equals(planet2)) {\n            System.out.println(\"The planets\
    \ are the same in sun\");\n            return pair;\n        }\n        if (planet1.equals(sun.get(0)\
    \ && planet2.equals(sun.get(1))) {\n            System.out.println(\"The planets\
    \ are the same in planet\");\n            return pair;\n        }\n        if\
    \ (sun.get(0).equals(planet1) && sun.get(1).equals(planet2)) {\n            System.out.println(\"\
    The planets are the same in sun and planet\");\n            return pair;\n   \
    \     }\n\n        if (sun.get(0).equals(planet1) || sun.get(1).equals(planet2))\
    \ {\n            System.out.println(\"The planets are not the same in sun\");\n\
    \            return pair;\n        }\n        if (sun.get(0).equals(planet1) ||\
    \ sun.get(1).equals(planet2)) {\n            System.out.println(\"The planets\
    \ are not the same in sun and planet\");\n            return pair;\n        }\n\
    \        if (sun.get(0).equals(planet1) || sun.get(1).equals(planet2)) {\n   \
    \         System.out.println(\"The planets are not the same in sun or planet\"\
    );\n            return pair;\n        }\n        if (sun.get(0).equals(planet1)\
    \ || sun.get(1).equals(planet2)) {\n            System.out.println(\"The planets\
    \ are not the same in sun or planet\");\n            return pair;\n        }\n\
    \        if (sun.get(0).equals(planet1) || sun.get(1).equals(planet2)) {\n   \
    \         System.out.println(\"The planets are not the same in sun or planet\"\
    );\n            return pair;\n        }\n        if (sun.get(0).equals(planet1)\
    \ || sun.get(1).equals(planet2)) {\n            System.out.println(\"The planets\
    \ are not the same in sun or planet\");\n            return pair;\n        }\n\
    \        if (sun.get(0).equals(planet1) || sun.get(1).equals(planet2)) {\n   \
    \         System.out.println(\"The planets are not the same in sun or planet\"\
    );\n            return pair;\n        }\n        if (sun.get(0).equals(", "  \
    \      ArrayList<String> planets1 = new ArrayList<String>(Arrays.asList(planet1,\
    \ planet2, planet1, planet2, planet1, planet2, planet1, planet2));\n        ArrayList<String>\
    \ planets2 = new ArrayList<String>(Arrays.asList(planet1, planet2, planet1, planet2,\
    \ planet1, planet2, planet1, planet2));\n        return planets1.stream().filter(planet1\
    \ -> planets2.contains(planet1)).collect(Collectors.toList());", "        ArrayList<String>\
    \ planets = new ArrayList<String>();\n\n        if (planet1.equals(\"Mercury\"\
    ) && planet2.equals(\"Venus\")) {\n            planets.add(\"Venus\");\n     \
    \   }\n\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\"))\
    \ {\n            planets.add(\"Earth\");\n        }\n\n        if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Mars\")) {\n            planets.add(\"Mars\");\n\
    \        }\n\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\"\
    )) {\n            planets.add(\"Jupiter\");\n        }\n\n        if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Saturn\")) {\n            planets.add(\"Saturn\"\
    );\n        }\n\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Uranus\")) {\n            planets.add(\"Uranus\");\n        }\n\n        if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Neptune\")) {\n            planets.add(\"Neptune\"\
    );\n        }\n\n        if (planet1.equals(\"Venus\") && planet2.equals(\"Earth\"\
    )) {\n            planets.add(\"Earth\");\n        }\n\n        if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Mercury\")) {\n            planets.add(\"Mercury\"\
    );\n        }\n\n        if (planet1.equals(\"Venus\") && planet2.equals(\"Mars\"\
    )) {\n            planets.add(\"Mars\");\n        }\n\n        if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Jupiter\")) {\n            planets.add(\"Jupiter\"\
    );\n        }\n\n        if (planet1.equals(\"Venus\") && planet2.equals(\"Saturn\"\
    )) {\n            planets.add(\"Saturn\");\n        }\n\n        if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Uranus\")) {\n            planets.add(\"Uranus\"\
    );\n        }\n\n        if (planet1.equals(\"Venus\") && planet2.equals(\"Neptune\"\
    )) {\n            planets.add(\"Neptune\");\n        }\n\n        if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mercury\")) {\n            planets.add(\"Mercury\"\
    );\n        }\n\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Venus\"\
    )) {\n            planets.add(\"Venus\");\n        }\n\n        if (planet", " \
    \       // Your code goes here\n        ArrayList<String> list = new ArrayList<>();\n\
    \        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Neptune\")) {\n            list.add(planet2);\n        } else if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Venus\")) {\n            list.add(planet1);\n\
    \        } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n            list.add(planet1);\n            list.add(planet2);\n\
    \        } else if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            list.add(planet1);\n            list.add(planet2);\n\
    \        } else if (planet1.equalsIgnoreCase(\"Mars\") && planet2.equalsIgnoreCase(\"\
    Jupiter\")) {\n            list.add(planet1);\n            list.add(planet2);\n\
    \            list.add(planet1);\n            list.add(planet2);\n        } else\
    \ if (planet1.equalsIgnoreCase(\"Jupiter\") && planet2.equalsIgnoreCase(\"Neptune\"\
    )) {\n            list.add(planet1);\n            list.add(planet2);\n       \
    \     list.add(planet1);\n            list.add(planet2);\n            list.add(planet1);\n\
    \            list.add(planet2);\n        } else if (planet1.equalsIgnoreCase(\"\
    Saturn\") && planet2.equalsIgnoreCase(\"Uranus\")) {\n            list.add(planet1);\n\
    \            list.add(planet2);\n            list.add(planet1);\n            list.add(planet2);\n\
    \            list.add(planet1);\n            list.add(planet2);\n            list.add(planet1);\n\
    \            list.add(planet2);\n        } else if (planet1.equalsIgnoreCase(\"\
    Venus\") && planet2.equalsIgnoreCase(\"Earth\")) {\n            list.add(planet1);\n\
    \            list.add(planet2);\n            list.add(planet1);\n            list.add(planet2);\n\
    \            list.add(planet1);\n            list.add(planet2);\n            list.add(planet1);\n\
    \            list.add(planet2);\n            list.add(planet1);\n            list.add(planet2);\n\
    \            list.add(planet1);\n            list.add(planet2);\n            list.add(planet1);\n\
    \            list.add(planet2);\n        } else if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Venus", '        return null;', "   \
    \     ArrayList<String> planets = new ArrayList<>();\n        ArrayList<Integer>\
    \ distances = new ArrayList<Integer>();\n        int i = planets.indexOf(planet1)\
    \ + 1;\n        int j = planets.indexOf(planet2) + 1;\n        distances.add(Math.abs(i\
    \ - j));\n        while (i <= planets.size() && j <= planets.size()) {\n     \
    \       String a = planets.get(i-1);\n            String b = planets.get(j-1);\n\
    \            if (a.equals(b)) {\n                distances.add(Math.abs(i-j));\n\
    \            }\n            i++;\n            j++;\n        }\n        return\
    \ distances.stream().distinct().sorted(Comparator.comparingDouble(p -> p))\n \
    \               .map(d -> new String[]{planets.get(d-1), planets.get(d)}).collect(Collectors.toList());",
  "      Set<String> planets1 = getPlanetsBetweenTwoOrbits(planet1, planet2);\n  \
    \    Set<String> planets2 = getPlanetsBetweenTwoOrbits(planet2, planet1);\n  \
    \    Set<String> planets1to2 = planets1.stream().filter(planet2 -> planets2.contains(planet2)).collect(Collectors.toSet());\n\
    \      Set<String> planets2to1 = planets2.stream().filter(planet1 -> planets1.contains(planet1)).collect(Collectors.toSet());\n\
    \      Set<String> planets1to2and2 = planets1to2.stream().filter(planet2 -> planets2to1.contains(planet2)).collect(Collectors.toSet());\n\
    \      ArrayList<String> returnList = new ArrayList<>();\n      returnList.addAll(planets1to2and2);\n\
    \      returnList.addAll(planets1to2);\n      returnList.addAll(planets2to1);\n\
    \      return returnList;", "        ArrayList<String> planets = new ArrayList<String>();\n\
    \        ArrayList<String> suns = new ArrayList<String>();\n        HashMap<String,\
    \ String> planetHash = new HashMap<String, String>();\n        HashMap<String,\
    \ String> sunHash = new HashMap<String, String>();\n        for (String planet\
    \ : planetHash.keySet()) {\n            planetHash.remove(planet);\n        }\n\
    \        for (String sun : sunHash.keySet()) {\n            sunHash.remove(sun);\n\
    \        }\n        for (String sun : sunHash.keySet()) {\n            planetHash.put(planet,\
    \ sun);\n        }\n        for (String planet : planetHash.keySet()) {\n    \
    \        sunHash.put(sun, planet);\n        }\n        Set<String> sunSet = sunHash.values();\n\
    \        Set<String> planetSet = planetHash.values();\n        Collections.sort(sunSet);\n\
    \        Collections.sort(planetSet);\n        ArrayList<String> sunArrayList\
    \ = new ArrayList<String>(sunSet);\n        ArrayList<String> planetArrayList\
    \ = new ArrayList<String>(planetSet);\n        System.out.println(sunArrayList);\n\
    \        System.out.println(planetArrayList);\n        for (String sun : sunSet)\
    \ {\n            for (String planet : planetSet) {\n                String distance\
    \ = getDistance(sun, planet);\n                ArrayList<String> sunArrayList2\
    \ = new ArrayList<String>(sunArrayList);\n                ArrayList<String> planetArrayList2\
    \ = new ArrayList<String>(planetArrayList);\n                System.out.println(sunArrayList2);\n\
    \                System.out.println(planetArrayList2);\n                String\
    \ sun2 = sun;\n                String planet2 = planet;\n                if (planetHash.containsKey(planet)\
    \ && sunHash.containsKey(sun)) {\n                    planet2 = sunHash.get(sun);\n\
    \                    planetHash.remove(planet);\n                    sunHash.remove(sun);\n\
    \                }\n                ArrayList<String> sunArrayList3 = new ArrayList<String>(sunArrayList2);\n\
    \                ArrayList<String> planetArrayList3 = new ArrayList<String>(planetArrayList2);\n\
    \                String sun3 = sun;\n                String planet3 = planet;\n\
    \                if (planetHash.containsKey(planet) && sunHash.containsKey(sun))\
    \ {\n                    planet3 = sunHash.get(sun);\n                    planetHash.remove(planet);\n\
    \                    sunHash.remove(sun);\n                }\n               \
    \ ArrayList<String> sunArrayList4 = new ArrayList<String>(sunArrayList3);\n  \
    \              ArrayList<String> planetArrayList4 = new ArrayList<String>(planetArrayList3);\n\
    \                String sun4 = sun;\n                String planet", "       \
    \ // TODO Auto-generated method stub\n        ArrayList<String> list = new ArrayList<String>();\n\
    \        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n \
    \           list.add(\"Venus\");\n        }\n        if (planet1.equals(\"Venus\"\
    ) && planet2.equals(\"Neptune\")) {\n            list.add(\"Earth\");\n      \
    \  }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\")) {\n\
    \            list.add(\"Mars\");\n        }\n        if (planet1.equals(\"Mars\"\
    ) && planet2.equals(\"Mercury\")) {\n            list.add(\"Jupiter\");\n    \
    \    }\n        if (planet1.equals(\"Jupiter\") && planet2.equals(\"Mercury\"\
    )) {\n            list.add(\"Saturn\");\n        }\n        if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Mercury\")) {\n            list.add(\"Uranus\");\n\
    \        }\n        if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\"\
    )) {\n            list.add(\"Neptune\");\n        }\n        if (planet1.equals(\"\
    Neptune\") && planet2.equals(\"Jupiter\")) {\n            list.add(\"Jupiter\"\
    );\n        }\n        if (planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\"\
    )) {\n            list.add(\"Uranus\");\n        }\n        if (planet1.equals(\"\
    Uranus\") && planet2.equals(\"Neptune\")) {\n            list.add(\"Neptune\"\
    );\n        }\n        if (planet1.equals(\"Neptune\") && planet2.equals(\"Jupiter\"\
    )) {\n            list.add(\"Jupiter\");\n        }\n        if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Uranus\")) {\n            list.add(\"Uranus\");\n\
    \        }\n        if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\"\
    )) {\n            list.add(\"Neptune\");\n        }\n        if (planet1.equals(\"\
    Neptune\") && planet2.equals(\"Jupiter\")) {\n            list.add(\"Jupiter\"\
    );\n        }\n        if (planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\"\
    )) {\n            list.add(\"Uranus\");\n        }\n        if (planet1.equals(\"\
    Uranus\") && planet2.equal", "        ArrayList<String> solsAtOrbit = new ArrayList<String>();\n\
    \        if (planet1.equalsIgnoreCase(planet2)) {\n            return new ArrayList<String>(solsAtOrbit);\n\
    \        }\n        HashMap<String, ArrayList<String>> planetOrbit = new HashMap<String,\
    \ ArrayList<String>>();\n        ArrayList<String> planetNames = new ArrayList<String>();\n\
    \        for (String planet : planetNames) {\n            planetOrbit.put(planet,\
    \ new ArrayList<String>());\n        }\n        planetNames.add(planet1);\n  \
    \      planetOrbit.put(planet1, new ArrayList<String>());\n        planetNames.add(planet2);\n\
    \        planetOrbit.put(planet2, new ArrayList<String>());\n        for (String\
    \ planet : planetNames) {\n            String nameOfPlanet = planet;\n       \
    \     if (planet.equalsIgnoreCase(planet1)) {\n                nameOfPlanet =\
    \ planet2;\n            }\n            int nameOfPlanetIndex = planetNames.indexOf(nameOfPlanet);\n\
    \            int planetIndex = nameOfPlanetIndex;\n            while (planetIndex\
    \ < planetNames.size() - 1) {\n                ArrayList<String> orbitsAtOrbit\
    \ = planetOrbit.get(nameOfPlanet);\n                ArrayList<String> nextOrbits\
    \ = new ArrayList<String>();\n                orbitsAtOrbit.add(nameOfPlanet);\n\
    \                nextOrbits.add(planet);\n                orbitsAtOrbit.add(nextOrbits);\n\
    \                planetIndex = planetIndex + 1;\n                String nextPlanet\
    \ = planetNames.get(planetIndex);\n                planetOrbit.put(nextPlanet,\
    \ orbitsAtOrbit);\n            }\n            solsAtOrbit.add(nameOfPlanet);\n\
    \        }\n        Collections.sort(solsAtOrbit, new Comparator<String>() {\n\
    \            public int compare(String o1, String o2) {\n                double\
    \ sunDist = 0;\n                try {\n                    sunDist = Distancia.getEuclidianDistance(planet1,\
    \ planet2);\n                } catch (Exception e) {\n                    return\
    \ 0;\n                }\n                return Double.compare(sunDist, Double.valueOf(solsAtOrbit.get(o1).get(o2)));\n\
    \            }\n        });\n        return new ArrayList<String>(solsAtOrbit);",
  "        ArrayList<String> sol = new ArrayList<String>();\n        double planet1r\
    \ = distance(planet1);\n        double planet2r = distance(planet2);\n       \
    \ double temp = (planet1r - planet2r);\n        double distance2 = Math.pow(planet2r,\
    \ 2);\n        double distance4 = Math.pow(temp, 2);\n        double distance6\
    \ = Math.pow((planet1r - planet2r), 2);\n        double distance8 = distance2\
    \ * distance4 - distance6 * distance2;\n        if (distance8 <= 0) {\n      \
    \      sol.addAll(planet1);\n            sol.addAll(planet2);\n            return\
    \ sol;\n        }\n        double sqrt8 = Math.sqrt(distance8);\n        double\
    \ sqrt6 = Math.sqrt(distance6);\n        double sqrt4 = Math.sqrt(distance4);\n\
    \        double sqrt2 = Math.sqrt(distance2);\n        double sqrt1 = Math.sqrt(planet1r);\n\
    \        double sqrt3 = Math.sqrt(planet2r);\n        double a = (sqrt8 - sqrt2)\
    \ / (sqrt6 - sqrt4);\n        double b = (sqrt4 - sqrt2) / (sqrt6 - sqrt4);\n\
    \        double c = sqrt2 / (sqrt6 - sqrt4);\n        double d = sqrt1 / (sqrt6\
    \ - sqrt4);\n        double e = sqrt3 / (sqrt6 - sqrt4);\n        double f = sqrt5\
    \ / (sqrt6 - sqrt4);\n        double g = sqrt3 / (sqrt6 - sqrt4);\n        double\
    \ h = sqrt3 / (sqrt6 - sqrt4);\n        double i = sqrt3 / (sqrt6 - sqrt4);\n\
    \        double j = sqrt3 / (sqrt6 - sqrt4);\n        double k = sqrt3 / (sqrt6\
    \ - sqrt4);\n        double l = sqrt3 / (sqrt6 - sqrt4);\n        double m = sqrt3\
    \ / (sqrt6 - sqrt4);\n        double n = sqrt3 / (sqrt6 - sqrt4);\n        double\
    \ o = sqrt3 / (sqrt6 - sqrt4);\n        double p = sqrt3 / (sqrt6 - sqrt4);\n\
    \        double q = sqrt3 / (sqrt6 - sqrt4);\n        double r = sqrt3 / (sqrt6\
    \ - sqrt4);\n        double s = sqrt3 / (sqrt6 - sqrt4);\n        double t = sqrt3\
    \ / (sqrt6 - sqrt4);\n        double u = sqrt3 / (sqrt6 - sqrt4);\n        double\
    \ v = sqrt3 / (sqrt6 - sqrt4);\n        double w = sqrt3 / (sqrt6 - sqrt4);\n\
    \        double x = sqrt3 / (sqrt6 - sqrt4);\n        double y = sqrt3 / (sqrt6\
    \ - sqrt4);\n        double z = sqrt3 / (sqrt6 - sqrt4);\n        double A = (sqrt8\
    \ - sqrt", "        // Your code here\n        try{\n        Class<?> clz = Class.forName(\"\
    java.lang.Math\");\n        Method method = clz.getMethod(\"sqrt\", Object.class);\n\
    \        Object value = method.invoke(null, planet1);\n        Method method1\
    \ = clz.getMethod(\"sqrt\", Object.class);\n        Object value1 = method.invoke(null,\
    \ planet2);\n        ArrayList<Object> arl = new ArrayList<Object>();\n      \
    \  arl.add(value);\n        arl.add(value1);\n        double d1 = Double.parseDouble((String)(arl.get(0)));\n\
    \        double d2 = Double.parseDouble((String)(arl.get(1)));\n        double\
    \ c = Math.sqrt((d1*d1)+(d2*d2));\n        List<Double> arl1 = arl.stream().mapToDouble(Double::valueOf).sorted().filter(num\
    \ -> Math.abs(num - c) < ((Math.pow(((double)d1+(d2)),2))*Math.pow((double)d1,2))).collect(Collectors.toList());\n\
    \        System.out.println(arl1);\n        ArrayList<String> arl2 = new ArrayList<String>();\n\
    \        arl2.add((String)(arl1.get(0)));\n        arl2.add((String)(arl1.get(1)));\n\
    \        return arl2;\n        }\n        catch (ClassNotFoundException | NoSuchMethodException\
    \ | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException\
    \ | NumberFormatException e) {\n            // TODO Auto-generated catch block\n\
    \            e.printStackTrace();\n        }\n        catch(ArrayIndexOutOfBoundsException\
    \ e){\n            e.printStackTrace();\n        }\n        return null;", " \
    \       ArrayList<String> array1 = new ArrayList<>();\n        ArrayList<String>\
    \ array2 = new ArrayList<>();\n        array1.add(planet1);\n        array2.add(planet2);\n\
    \        for (String element : array1) {\n            for (String element2 : array2)\
    \ {\n                if (element2.equals(element)) {\n                    if (element1.equals(planet2))\
    \ {\n                        array2.remove(element2);\n                      \
    \  array2.add(element);\n                        array1.remove(element2);\n  \
    \                      array1.add(element);\n                        array1.add(element);\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (array1.isEmpty()) {\n            ArrayList<String> array3 = new ArrayList<>();\n\
    \            array3.add(planet1);\n            array3.add(planet2);\n        \
    \    array3.add(planet1);\n            array3.add(planet2);\n            array3.add(planet1);\n\
    \            array3.add(planet2);\n            array3.add(planet1);\n        \
    \    array3.add(planet2);\n            array3.add(planet1);\n            array3.add(planet2);\n\
    \            array3.add(planet1);\n            array3.add(planet2);\n        \
    \    array3.add(planet1);\n            array3.add(planet2);\n            array3.add(planet1);\n\
    \            array3.add(planet2);\n            array3.add(planet1);\n        \
    \    array3.add(planet2);\n            array3.add(planet1);\n            array3.add(planet2);\n\
    \            array3.add(planet1);\n            array3.add(planet2);\n        \
    \    array3.add(planet1);\n            array3.add(planet2);\n            array3.add(planet1);\n\
    \            array3.add(planet2);\n            array3.add(planet1);\n        \
    \    array3.add(planet2);\n            array3.add(planet1);\n            array3.add(planet2);\n\
    \            array3.add(planet1);\n            array3.add(planet2);\n        \
    \    array3.add(planet1);\n            array3.add(planet2);\n            array3.add(planet1);\n\
    \            array3.add(planet2);\n            array3.add(planet1);\n        \
    \    array3.add(planet2);\n            array3.add(planet1);\n            array3.add(planet2);\n\
    \            array3.add(planet1);\n            array3.add(planet2);\n        \
    \    array3.add(planet1);\n            array3.add(planet2);\n            array3.add(planet1);\n\
    \            array3.add(planet2);\n            array3.add(planet1);\n        \
    \    array3.add(planet2);\n            array3.add(planet1);\n", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n\n        if (planet1 == null || planet2\
    \ == null) {\n            System.out.println(\"Planets must be non-null\");\n\
    \            return new ArrayList<String>();\n        }\n        \n        //\
    \ Create a data structure to store the planets, ordered by distance from the Sun\n\
    \        Map<String,Point> map = new TreeMap<String,Point>();\n\n        // Create\
    \ two Point objects for planet1 and planet2\n        Point p1 = new Point(planet1.toLowerCase());\n\
    \        Point p2 = new Point(planet2.toLowerCase());\n\n        // Check that\
    \ the planet names are valid\n        if (!p1.isValid()) {\n            System.out.println(\"\
    Planet name not valid\");\n            return new ArrayList<String>();\n     \
    \   }\n        if (!p2.isValid()) {\n            System.out.println(\"Planet name\
    \ not valid\");\n            return new ArrayList<String>();\n        }\n\n  \
    \      // Create a function to compute distance\n        double computeDistance(Point\
    \ a, Point b) {\n            double distance = 0.0;\n            double x = a.x\
    \ - b.x;\n            double y = a.y - b.y;\n            double z = a.z - b.z;\n\
    \            double lenSqr = (x * x) + (y * y) + (z * z);\n            double\
    \ lenSqr = Math.sqrt(lenSqr);\n            double len = Math.sqrt(lenSqr);\n \
    \           return distance;\n        }\n\n        // Create a function to add\
    \ planets to a map\n        void addPlanet(Point p, String planet) {\n       \
    \     if (map.containsKey(planet)) {\n                Point old = map.get(planet);\n\
    \                map.put(planet, old);\n                double dist = computeDistance(p,\
    \ old);\n                if (dist < map.get(planet).distance) {\n            \
    \        map.put(planet, new Point(p, dist));\n                }\n           \
    \ }\n            else {\n                map.put(planet, p);\n            }\n\
    \        }\n\n        // Add all planets from Earth to map\n        addPlanet(new\
    \ Point(p1), \"Earth\");\n        addPlanet(new Point(p2), \"Earth\");\n\n   \
    \     // Add Mercury, Venus, Earth, Mars, Jupiter, Uranus, Neptune to map\n  \
    \      addPlanet(new Point(p1), \"Mercury\");\n        addPlanet(new Point(p2),\
    \ \"Venus\");\n        addPlanet(new Point(p1), \"Earth\");\n        addPlanet(new\
    \ Point(p2), \"Mars\");\n        addPlanet(new Point(p1), \"Jupiter\");\n    \
    \    addPlanet(new Point(p2), \"Uranus\");\n        addPlanet(new Point(p1), \"\
    Neptune\");\n\n        // Add Saturn, Uranus, Neptune to map\n        addPlanet(new\
    \ Point(p1), \"Saturn\");", "        // your code here\n        ArrayList<String>\
    \ allPlanets = new ArrayList<String>();\n\n        double earthOrbit = getOrbit(planet1);\n\
    \        double mercuryOrbit = getOrbit(planet2);\n        double venusOrbit =\
    \ getOrbit(planet1);\n        double sunOrbit = getOrbit(planet2);\n\n       \
    \ double sunDistance = sunOrbit - sunOrbit;\n\n        if (sunDistance < 1) {\n\
    \            allPlanets.add(\"Earth\");\n        }\n\n        if (sunDistance\
    \ < 4) {\n            allPlanets.add(\"Venus\");\n        }\n\n        if (sunDistance\
    \ < 8) {\n            allPlanets.add(\"Mars\");\n        }\n\n        if (sunDistance\
    \ < 12) {\n            allPlanets.add(\"Jupiter\");\n        }\n\n        if (sunDistance\
    \ < 16) {\n            allPlanets.add(\"Saturn\");\n        }\n\n        if (sunDistance\
    \ < 20) {\n            allPlanets.add(\"Uranus\");\n        }\n\n        if (sunDistance\
    \ < 24) {\n            allPlanets.add(\"Neptune\");\n        }\n\n        if (mercuryOrbit\
    \ - earthOrbit < 1) {\n            allPlanets.add(\"Mercury\");\n        }\n\n\
    \        if (mercuryOrbit - venusOrbit < 4) {\n            allPlanets.add(\"Mercury\"\
    );\n        }\n\n        if (mercuryOrbit - venusOrbit < 8) {\n            allPlanets.add(\"\
    Mercury\");\n        }\n\n        if (mercuryOrbit - venusOrbit < 12) {\n    \
    \        allPlanets.add(\"Mercury\");\n        }\n\n        if (mercuryOrbit -\
    \ venusOrbit < 16) {\n            allPlanets.add(\"Mercury\");\n        }\n\n\
    \        if (mercuryOrbit - venusOrbit < 20) {\n            allPlanets.add(\"\
    Mercury\");\n        }\n\n        if (mercuryOrbit - venusOrbit < 24) {\n    \
    \        allPlanets.add(\"Mercury\");\n        }\n\n        if (mercuryOrbit -\
    \ venusOrbit < 28) {\n            allPlanets.add(\"Mercury\");\n        }\n\n\
    \        if (mercuryOrbit - venusOrbit < 32) {\n            allPlanets.add(\"\
    Mercury\");\n        }\n\n        if (venusOrbit - earthOrbit < 8) {\n       \
    \     allPlanets.add(\"Venus\");\n        }\n\n        if (venusOrbit - earthOrbit\
    \ < 12) {\n            allPlanets.add(\"Venus\");\n        }", "        ArrayList<String>\
    \ a1 = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ a2 = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ b1 = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n        ArrayList<String>\
    \ b2 = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\",\
    \ \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n\n        if\
    \ (a1.contains(planet1) && b1.contains(planet2)){\n            ArrayList<String>\
    \ result = new ArrayList<String>(Arrays.asList(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n            for(int\
    \ i = 0; i < (b2.size()); i++){\n                if (b1.get(i).equals(planet2)\
    \ && b2.get(i).equals(planet1)){\n                    b2.remove(i);\n        \
    \            b2.remove(i);\n                    for(int j = 0; j < (a2.size());\
    \ j++){\n                        if (a2.get(j).equals(planet1)){\n           \
    \                 a2.remove(j);\n                        }\n                 \
    \   }\n                    result.addAll(Arrays.asList(a2));\n               \
    \ }\n            }\n            return result;\n        }\n        if (a1.contains(planet2)\
    \ && b1.contains(planet2)){\n            ArrayList<String> result = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n            for(int i = 0; i < (b2.size()); i++){\n        \
    \        if (b1.get(i).equals(planet2) && b2.get(i).equals(planet1)){\n      \
    \              b2.remove(i);\n                    b2.remove(i);\n            \
    \        for(int j = 0; j < (a2.size()); j++){\n                        if (a2.get(j).equals(planet2)){\n\
    \                            a2.remove(j);\n                        }\n      \
    \              }\n                    result.addAll(Arrays.asList(a2));\n    \
    \            }\n            }\n            return result;\n        }\n       \
    \ if (a1.contains(planet1) && b1.contains(planet1)){\n            ArrayList<String>\
    \ result = new ArrayList<String>(Arrays.asList", "        Planet[] planets = {\n\
    \                new Planet(\"Mercury\"),\n                new Planet(\"Venus\"\
    ),\n                new Planet(\"Earth\"),\n                new Planet(\"Mars\"\
    ),\n                new Planet(\"Jupiter\"),\n                new Planet(\"Saturn\"\
    ),\n                new Planet(\"Uranus\"),\n                new Planet(\"Neptune\"\
    )\n            };\n        return Arrays.asList(planets.stream()\n           \
    \ .filter(planet -> planet1.equalsIgnoreCase(planet.getName()) || planet2.equalsIgnoreCase(planet.getName()))\n\
    \            .sorted(Comparator.comparing(planet -> Math.abs(planet.getPosition()\
    \ - Planet.computeSunPosition()))).map(Planet::getName)\n            .collect(Collectors.toList()));",
  "        // Your code here\n        String planet1s = planet1.toUpperCase();\n \
    \       String planet2s = planet2.toUpperCase();\n        ArrayList<String> result\
    \ = new ArrayList<>();\n        if (planet1s.equals(planet2s)) {\n           \
    \ Collections.sort(result);\n            return result;\n        }\n        List<String>\
    \ a = Arrays.asList(planet1s.split(\"(?=[A-Z])\"));\n        List<String> b =\
    \ Arrays.asList(planet2s.split(\"(?=[A-Z])\"));\n        Collections.sort(a);\n\
    \        Collections.sort(b);\n        for (int i = 0; i < a.size() && i < b.size();\
    \ i++) {\n            String a = a.get(i);\n            String b = b.get(i);\n\
    \            if (a.equalsIgnoreCase(b)) {\n                continue;\n       \
    \     }\n            if (a.equalsIgnoreCase(\"SUN\")) {\n                result.add(a);\n\
    \                result.add(b);\n                Collections.sort(result);\n \
    \               Collections.sort(result);\n                return result;\n  \
    \          }\n            if (b.equalsIgnoreCase(\"SUN\")) {\n               \
    \ result.add(a);\n                result.add(b);\n                Collections.sort(result);\n\
    \                Collections.sort(result);\n                return result;\n \
    \           }\n            if (a.equals(\"EARTH\")) {\n                if (b.equals(\"\
    MARS\")) {\n                    result.add(a);\n                    result.add(b);\n\
    \                    Collections.sort(result);\n                    Collections.sort(result);\n\
    \                    return result;\n                }\n            }\n      \
    \      if (b.equals(\"EARTH\")) {\n                if (a.equals(\"MARS\")) {\n\
    \                    result.add(a);\n                    result.add(b);\n    \
    \                Collections.sort(result);\n                    Collections.sort(result);\n\
    \                    return result;\n                }\n            }\n      \
    \      String a1 = a.replaceAll(\"([A-Z])\", \" $1\");\n            a1 = a1.replaceAll(\"\
    ^ $\", \"\");\n            String a2 = a.replaceAll(\"([A-Z])\", \" $1\");\n \
    \           a2 = a2.replaceAll(\"^ $\", \"\");\n            String b1 = b.replaceAll(\"\
    ([A-Z])\", \" $1\");\n            b1 = b1.replaceAll(\"^ $\", \"\");\n       \
    \     String b2 = b.replaceAll(\"([A-Z])\", \" $1\");\n            b2 = b2.replaceAll(\"\
    ^ $\", \"\");\n            Integer d1 = a1.length() - a2.length();\n         \
    \   Integer d2 = b1.length() - b2.length();\n            Integer d3 = d2 - d1;\n\
    \            Integer d4 = Integer.valueOf(d2);\n            if (d3 > 0) {\n  \
    \              Integer aint = new Integer(a1);\n                Integer bint =\
    \ new Integer(b1);\n                Integer a1 = aint.length() - aint.toString().length();\n\
    \                Integer b1 = bint.length() - bint.toString().length();\n", " \
    \       ArrayList<String> result = new ArrayList<String>();\n        List<String>\
    \ planetList = new ArrayList<String>();\n        planetList.add(planet1);\n  \
    \      planetList.add(planet2);\n        Collections.sort(planetList);\n     \
    \   ArrayList<String> names = new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ));\n        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> sun = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> orbits = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> namelist = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> planetlist = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> sunlist = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> orblist = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> newlist = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> newlist2 = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> newlist3 = new ArrayList<String>(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        ArrayList<String> newlist4 = new ArrayList<String>(Arrays.asList",
  "        ArrayList<String> a = new ArrayList<>();\n        if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n            a.add(\"Venus\"\
    );\n            a.add(\"Jupiter\");\n            a.add(\"Saturn\");\n        \
    \    a.add(\"Uranus\");\n        }\n        if (planet1.equalsIgnoreCase(\"Mercury\"\
    ) && planet2.equalsIgnoreCase(\"Uranus\")) {\n            a.add(\"Venus\");\n\
    \            a.add(\"Earth\");\n            a.add(\"Mars\");\n            a.add(\"\
    Jupiter\");\n            a.add(\"Saturn\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Venus\") && planet2.equalsIgnoreCase(\"Earth\")) {\n            a.add(\"Mercury\"\
    );\n            a.add(\"Mars\");\n            a.add(\"Jupiter\");\n          \
    \  a.add(\"Saturn\");\n            a.add(\"Uranus\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Jupiter\") && planet2.equalsIgnoreCase(\"Mars\")) {\n            a.add(\"Mercury\"\
    );\n            a.add(\"Venus\");\n            a.add(\"Saturn\");\n          \
    \  a.add(\"Uranus\");\n            a.add(\"Neptune\");\n        }\n        if\
    \ (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"Uranus\"\
    )) {\n            a.add(\"Mercury\");\n            a.add(\"Venus\");\n       \
    \     a.add(\"Jupiter\");\n            a.add(\"Earth\");\n            a.add(\"\
    Mars\");\n            a.add(\"Neptune\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Uranus\") && planet2.equalsIgnoreCase(\"Neptune\")) {\n            a.add(\"Mercury\"\
    );\n            a.add(\"Venus\");\n            a.add(\"Jupiter\");\n         \
    \   a.add(\"Mars\");\n            a.add(\"Earth\");\n            a.add(\"Mars\"\
    );\n            a.add(\"Saturn\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Mars\") && planet2.equalsIgnoreCase(\"Jupiter\")) {\n            a.add(\"Mercury\"\
    );\n            a.add(\"Venus\");\n            a.add(\"Jupiter\");\n         \
    \   a.add(\"Earth\");\n            a.add(\"Saturn\");\n            a.add(\"U",
  "        ArrayList<String> list = new ArrayList<String>();\n        int i1 = planet1.indexOf(\"\
    \");\n        int i2 = planet2.indexOf(\"\");\n        if (i1 == -1 || i2 == -1)\
    \ {\n            return list;\n        }\n        String s1 = planet1.substring(0,\
    \ i1);\n        String s2 = planet2.substring(0, i2);\n        if (s1.compareTo(s2)\
    \ < 0 ) {\n            String tmp = s1;\n            s1 = s2;\n            s2\
    \ = tmp;\n        }\n        StringBuilder sb1 = new StringBuilder(s1);\n    \
    \    StringBuilder sb2 = new StringBuilder(s2);\n        while (true) {\n    \
    \        int j1 = sb1.indexOf(\"\");\n            int j2 = sb2.indexOf(\"\");\n\
    \            if (j1 == -1 || j2 == -1) {\n                return list;\n     \
    \       }\n            String s1 = sb1.substring(0, j1);\n            String s2\
    \ = sb2.substring(0, j2);\n            if (s1.compareTo(s2) < 0 ) {\n        \
    \        String tmp = s1;\n                s1 = s2;\n                s2 = tmp;\n\
    \            }\n            String temp;\n            if ((temp = sb1.substring(0,\
    \ j1 + 1)).equals(\"\")) {\n                sb1.deleteCharAt(j1);\n          \
    \      sb2.deleteCharAt(j2);\n            } else if (temp.length() < 1) {\n  \
    \              sb2.deleteCharAt(j2);\n            } else {\n                sb1.deleteCharAt(j1);\n\
    \                sb2.deleteCharAt(j2);\n            }\n        }", "        //\
    \ Complete the method here\n        ArrayList<String> arr = new ArrayList<String>();\n\
    \        Planets obj = new Planets();\n        try{\n            String planet1Orb\
    \ = obj.getOrbit(planet1);\n            String planet2Orb = obj.getOrbit(planet2);\n\
    \            String sunOrb = obj.getOrbit(Planets.Sun);\n            Planet planet1Obj\
    \ = obj.toPlanet(planet1);\n            Planet planet2Obj = obj.toPlanet(planet2);\n\
    \            Planet sunObj = obj.toPlanet(Planets.Sun);\n            long t1 =\
    \ new Duration(planet1Orb).getMillis();\n            long t2 = new Duration(planet2Orb).getMillis();\n\
    \            long t3 = new Duration(sunOrb).getMillis();\n            long d =\
    \ Math.max(t1, t2);\n            long x = Math.min(t3, t1) + Math.max(t2, t3);\
    \ \n            if (x <= d) arr.add(planet2);\n            else if (x >= d) arr.add(planet1);\n\
    \            else return new ArrayList<String>();\n        }\n        catch (Exception\
    \ e) {\n            System.out.println(e.getMessage());\n            return new\
    \ ArrayList<String>();\n        }\n        return arr;", "        ArrayList<String>\
    \ planets = new ArrayList<>();\n        planets.add(planet1);\n        planets.add(planet2);\n\
    \        \n        double lat1 = -34.000;\n        double lon1 = 138.000;\n  \
    \      double lat2 = -58.060;\n        double lon2 = 22.041;\n        \n     \
    \   GeoApiContext context = new GeoApiContext().setAppName(\"GeoApiTest\").setUserName(\"\
    User\").setUserToken(\"Token\");\n        GeoApiContext context2 = new GeoApiContext().setAppName(\"\
    GeoApiTest\").setUserName(\"User\").setUserToken(\"Token\");\n        \n     \
    \   double lat3 = -35.000;\n        double lon3 = 138.000;\n        double lat4\
    \ = -58.000;\n        double lon4 = 22.000;\n        \n        GeoApiContext context3\
    \ = new GeoApiContext().setAppName(\"GeoApiTest\").setUserName(\"User\").setUserToken(\"\
    Token\");\n        GeoApiContext context4 = new GeoApiContext().setAppName(\"\
    GeoApiTest\").setUserName(\"User\").setUserToken(\"Token\");\n        \n     \
    \   double lat5 = -35.000;\n        double lon5 = 138.000;\n        double lat6\
    \ = -58.000;\n        double lon6 = 22.000;\n        \n        GeoApiContext context5\
    \ = new GeoApiContext().setAppName(\"GeoApiTest\").setUserName(\"User\").setUserToken(\"\
    Token\");\n        GeoApiContext context6 = new GeoApiContext().setAppName(\"\
    GeoApiTest\").setUserName(\"User\").setUserToken(\"Token\");\n        \n     \
    \   double lat7 = -35.000;\n        double lon7 = 138.000;\n        double lat8\
    \ = -58.000;\n        double lon8 = 22.000;\n        \n        GeoApiContext context7\
    \ = new GeoApiContext().setAppName(\"GeoApiTest\").setUserName(\"User\").setUserToken(\"\
    Token\");\n        GeoApiContext context8 = new GeoApiContext().setAppName(\"\
    GeoApiTest\").setUserName(\"User\").setUserToken(\"Token\");\n        \n     \
    \   double lat9 = -35.000;\n        double lon9 = 138.000;\n        double lat10\
    \ = -58.000;\n        double lon10 = 22.000;\n        \n        GeoApiContext\
    \ context9 = new GeoApiContext().setAppName(\"GeoApiTest\").setUserName(\"User\"\
    ).setUserToken(\"Token\");\n        GeoApiContext context10 = new GeoApiContext().setAppName(\"\
    GeoApiTest\").setUserName(\"User\").setUserToken(\"Token\");\n        \n", " \
    \       String[] planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\"};\n        ArrayList<String> result = new\
    \ ArrayList<String>();\n        for (String planet : planets) {\n            result.add(planet);\n\
    \            double distance = distanceBetweenPlanets(planet1, planet);\n    \
    \        if (distance > 0 && distance < Math.PI) {\n                result.add(planet\
    \ + planets.get(planets.indexOf(planet) + 1));\n            }\n        }\n   \
    \     return result;", "        if (planet1 == null || planet2 == null)\n    \
    \        throw new IllegalArgumentException();\n        ArrayList planets = new\
    \ ArrayList();\n        planets.addAll(Arrays.asList(planet1, planet2));\n   \
    \     Arrays.sort(planets);\n\n        // Planets from first planet to second\
    \ planet\n        ArrayList fromTo = Arrays.asList((String) planets.get(1), (String)\
    \ planets.get(0));\n        // Distance between first and second planet\n    \
    \    double distance = Double.MAX_VALUE;\n        ArrayList<String> targets =\
    \ new ArrayList();\n        for (int i = 0; i < fromTo.size(); i++) {\n      \
    \      double a = Double.valueOf(fromTo.get(i));\n            double b = Double.valueOf(planets.get(i));\n\
    \            double distance = Math.toRadians(Math.sqrt((b*b + a*a) / 2));\n \
    \           if (distance < distance) {\n                distance = distance;\n\
    \                targets.add((String) planets.get(i));\n            }\n      \
    \  }\n        if (targets.size() > 0)\n            return new ArrayList(targets);\n\
    \        return planets;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        // Write your code here\n        Planet earth = new Planet(planet1, \"\
    Earth\", \"mercury\", \"sun\", 0.0, new Point(0.0, 0.0));\n        Planet mercury\
    \ = new Planet(planet2, \"Mercury\", \"mercury\", \"sun\", 0.0, new Point(0.0,\
    \ 0.0));\n        Planet venus = new Planet(planet1, \"Venus\", \"venus\", \"\
    sun\", 0.0, new Point(0.0, 0.0));\n        Planet mars = new Planet(planet2, \"\
    Mars\", \"mars\", \"sun\", 0.0, new Point(0.0, 0.0));\n        Planet jupiter\
    \ = new Planet(planet1, \"Jupiter\", \"jupiter\", \"sun\", 0.0, new Point(0.0,\
    \ 0.0));\n        Planet saturn = new Planet(planet2, \"Saturn\", \"saturn\",\
    \ \"sun\", 0.0, new Point(0.0, 0.0));\n        Planet uranus = new Planet(planet1,\
    \ \"Uranus\", \"uranus\", \"sun\", 0.0, new Point(0.0, 0.0));\n        Planet\
    \ neptune = new Planet(planet2, \"Neptune\", \"neptune\", \"sun\", 0.0, new Point(0.0,\
    \ 0.0));\n        Planet earthOrbit = earth.getOrbit(earth);\n        Planet mercuryOrbit\
    \ = mercury.getOrbit(mercury);\n        Planet venusOrbit = venus.getOrbit(venus);\n\
    \        Planet marsOrbit = mars.getOrbit(mars);\n        Planet jupiterOrbit\
    \ = jupiter.getOrbit(jupiter);\n        Planet saturnOrbit = saturn.getOrbit(saturn);\n\
    \        Planet uranusOrbit = uranus.getOrbit(uranus);\n        Planet neptuneOrbit\
    \ = neptune.getOrbit(neptune);\n        double dEarthToEarth = earthOrbit.getDistanceTo(earth);\n\
    \        double dMercuryToMercury = mercuryOrbit.getDistanceTo(mercury);\n   \
    \     double dVenusToVenus = venusOrbit.getDistanceTo(venus);\n        double\
    \ dMarsToMars = marsOrbit.getDistanceTo(mars);\n        double dJupiterToJupiter\
    \ = jupiterOrbit.getDistanceTo(jupiter);\n        double dSaturnToSaturn = saturnOrbit.getDistanceTo(saturn);\n\
    \        double dU", "        ArrayList<String> planets = new ArrayList<String>();\n\
    \        if (planet1.equals(planet2)) {\n            planets = new ArrayList<String>();\n\
    \        } else if (planet1.equals(b(\"Venus\"))) {\n            if (planet2.equals(b(\"\
    Earth\"))) {\n                planets.add(b(\"Venus\"));\n            } else if\
    \ (planet2.equals(b(\"Mars\"))) {\n                planets.add(b(\"Venus\"));\n\
    \                planets.add(b(\"Jupiter\"));\n                planets.add(b(\"\
    Saturn\"));\n                planets.add(b(\"Uranus\"));\n            } else if\
    \ (planet2.equals(b(\"Jupiter\"))) {\n                planets.add(b(\"Venus\"\
    ));\n                planets.add(b(\"Mars\"));\n                planets.add(b(\"\
    Saturn\"));\n                planets.add(b(\"Uranus\"));\n                planets.add(b(\"\
    Neptune\"));\n            } else if (planet2.equals(b(\"Saturn\"))) {\n      \
    \          planets.add(b(\"Venus\"));\n                planets.add(b(\"Mars\"\
    ));\n                planets.add(b(\"Jupiter\"));\n                planets.add(b(\"\
    Uranus\"));\n                planets.add(b(\"Neptune\"));\n                planets.add(b(\"\
    Pluto\"));\n            } else if (planet2.equals(b(\"Uranus\"))) {\n        \
    \        planets.add(b(\"Venus\"));\n                planets.add(b(\"Mars\"));\n\
    \                planets.add(b(\"Jupiter\"));\n                planets.add(b(\"\
    Saturn\"));\n                planets.add(b(\"Neptune\"));\n                planets.add(b(\"\
    Pluto\"));\n                planets.add(b(\"Ceres\"));\n                planets.add(b(\"\
    Phobos\"));\n                planets.add(b(\"Europa\"));\n                planets.add(b(\"\
    Ganymede\"));\n                planets.add(b(\"Callisto\"));\n               \
    \ planets.add(b(\"Neptune\"));\n                planets.add(b(\"Halley\"));\n\
    \                planets.add(b(\"Einstein\"));\n                planets.add(b(\"\
    Callisto\"));\n                planets.add(b(\"Belgium\"));\n                planets.add(b(\"\
    Francesca\"));\n                planets.add(b(\"Italy\"));\n                planets.add(b(\"\
    Rome\"));\n                planets.add(b(\"Italian\"));\n                planets.add(b(\"\
    Saxon\"));\n                planets.add(b(\"Galile", "        ArrayList<String>\
    \ list = new ArrayList<>();\n        final double EARTH_RADIUS = 6378137;\n  \
    \      double latitude1 = Math.toRadians(90);\n        double latitude2 = Math.toRadians(-90);\n\
    \        double longtitude1 = Math.toRadians(-70);\n        double longtitude2\
    \ = Math.toRadians(70);\n        double planet1_longitude = Math.toRadians(-136);\n\
    \        double planet2_longitude = Math.toRadians(136);\n        double a = Math.sin(Math.toRadians(planet1_longitude\
    \ - planet2_longitude));\n        double b = (Math.cos(Math.toRadians(planet1_longitude))\
    \ * Math.cos(Math.toRadians(planet2_longitude)));\n        double c = (Math.sin(Math.toRadians(planet1_latitude))\
    \ * Math.sin(Math.toRadians(planet2_latitude)));\n        double s = (Math.sin(Math.toRadians(latitude1))\
    \ * Math.sin(Math.toRadians(latitude2)));\n        double u = (Math.cos(Math.toRadians(latitude1))\
    \ * Math.cos(Math.toRadians(latitude2)));\n        double distance = EARTH_RADIUS\
    \ * Math.sqrt(u * u + b * b + c * c);\n        double theta = latitude1 - latitude2;\n\
    \        double delta = Math.sin(Math.toRadians(theta)) * distance;\n        double\
    \ delta2 = Math.sin(Math.toRadians(planet1_longitude)) * Math.sin(Math.toRadians(planet2_longitude))\
    \ - Math.cos(Math.toRadians(theta)) * Math.cos(Math.toRadians(planet1_longitude))\
    \ * Math.cos(Math.toRadians(planet2_longitude));\n        double delta3 = Math.cos(Math.toRadians(theta))\
    \ * Math.sin(Math.toRadians(planet1_longitude)) * Math.sin(Math.toRadians(planet2_longitude));\n\
    \        double delta4 = Math.cos(Math.toRadians(theta)) * Math.cos(Math.toRadians(planet1_longitude))\
    \ * Math.cos(Math.toRadians(planet2_longitude));\n        double delta5 = Math.cos(Math.toRadians(planet1_longitude))\
    \ * Math.cos(Math.toRadians(planet2_longitude));\n        if (Math.sqrt(delta\
    \ * delta + delta2 * delta2 + delta3 * delta3 + delta4 * delta4 + delta5 * delta5)\
    \ < distance) {\n            list.add(planet1);\n        }\n        double d =\
    \ Math.sin(Math.toRadians(planet1_longitude)) * Math.sin(Math.toRadians(plan",
  "        // Your code here\n        String planet1=planet.toLowerCase();\n     \
    \   String planet2=planet.toLowerCase();\n        ArrayList<String> planets =\
    \ new ArrayList<String>();\n        planets.add(\"Mercury\");\n        planets.add(\"\
    Venus\");\n        planets.add(\"Earth\");\n        planets.add(\"Mars\");\n \
    \       planets.add(\"Jupiter\");\n        planets.add(\"Saturn\");\n        planets.add(\"\
    Uranus\");\n        planets.add(\"Neptune\");\n        ArrayList<String> pair=new\
    \ ArrayList<String>();\n        if(planets.contains(planet1)){\n            if(planets.contains(planet2)){\n\
    \                pair.add(\"Earth\");\n                pair.add(\"Venus\");\n\
    \                pair.add(\"Mars\");\n                pair.add(\"Jupiter\");\n\
    \                pair.add(\"Saturn\");\n                pair.add(\"Uranus\");\n\
    \                pair.add(\"Neptune\");\n                return pair;\n      \
    \      }else{\n                pair.add(\"Mercury\");\n                pair.add(\"\
    Venus\");\n                pair.add(\"Earth\");\n                pair.add(\"Mars\"\
    );\n                pair.add(\"Jupiter\");\n                pair.add(\"Saturn\"\
    );\n                pair.add(\"Uranus\");\n                pair.add(\"Neptune\"\
    );\n                return pair;\n            }\n        }else{\n            pair.add(\"\
    Mercury\");\n            pair.add(\"Venus\");\n            pair.add(\"Earth\"\
    );\n            pair.add(\"Mars\");\n            pair.add(\"Jupiter\");\n    \
    \        pair.add(\"Saturn\");\n            pair.add(\"Uranus\");\n          \
    \  pair.add(\"Neptune\");\n            return pair;\n        }", "        ArrayList<String>\
    \ returnList = new ArrayList<String>();\n        try {\n            if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n                returnList.add(planet2);\n\
    \            }\n            if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n                returnList.add(planet1);\n            }\n      \
    \      if (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"\
    Earth\")) {\n                returnList.add(planet2);\n            }\n       \
    \     if (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"Mercury\"\
    )) {\n                returnList.add(planet1);\n            }\n            if\
    \ (planet1.equalsIgnoreCase(\"Mars\") && planet2.equalsIgnoreCase(\"Jupiter\"\
    )) {\n                returnList.add(planet2);\n            }\n            if\
    \ (planet1.equalsIgnoreCase(\"Mars\") && planet2.equalsIgnoreCase(\"Saturn\"))\
    \ {\n                returnList.add(planet1);\n            }\n            if (planet1.equalsIgnoreCase(\"\
    Jupiter\") && planet2.equalsIgnoreCase(\"Saturn\")) {\n                returnList.add(planet1);\n\
    \            }\n            if (planet1.equalsIgnoreCase(\"Jupiter\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n                returnList.add(planet2);\n            }\n      \
    \      if (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"\
    Neptune\")) {\n                returnList.add(planet1);\n            }\n     \
    \       if (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n                returnList.add(planet2);\n            }\n      \
    \      if (planet1.equalsIgnoreCase(\"Uranus\") && planet2.equalsIgnoreCase(\"\
    Neptune\")) {\n                returnList.add(planet2);\n            }\n     \
    \       if (planet1.equalsIgnoreCase(\"Uranus\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n                returnList.add(planet1);\n            }\n     \
    \       if (planet1.equalsIgnoreCase(\"Neptune\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n                returnList.add(planet1);\n            }\n     \
    \       if (planet1.equalsIgnoreCase(\"Neptune\") && planet2.equalsIgnoreCase(\"\
    Venus\")) {\n                returnList.add(planet2);\n            }\n       \
    \     if (planet1.equal", '        // Your code here', "        ArrayList<String>\
    \ planets = new ArrayList<String>();\n        LinkedList<String>[] orbits = \n\
    \            {new LinkedList<String>(Arrays.asList((String)\"Mercury\", (String)\"\
    Venus\")),\n            new LinkedList<String>(Arrays.asList((String)\"Earth\"\
    , (String)\"Mars\")),\n            new LinkedList<String>(Arrays.asList((String)\"\
    Jupiter\", (String)\"Saturn\")),\n            new LinkedList<String>(Arrays.asList((String)\"\
    Uranus\", (String)\"Neptune\")),\n            new LinkedList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\")),\n            new LinkedList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\")),\n            new LinkedList<String>(Arrays.asList((String)\"\
    Jupiter\", (String)\"Saturn\")),\n            new LinkedList<String>(Arrays.asList((String)\"\
    Uranus\", (String)\"Neptune\"))};\n        double r = 6378.1370; // mean radius\
    \ of Earth in km\n        double [] r = { \n            Math.pow(r, 0.25),\n \
    \           Math.pow(r, 0.375),\n            Math.pow(r, 0.50),\n            Math.pow(r,\
    \ 0.625),\n            Math.pow(r, 0.75),\n            Math.pow(r, 0.875),\n \
    \           Math.pow(r, 1.0)\n        };\n        int index = planets.indexOf(planet1);\n\
    \        if(index != -1){\n            planets.remove(planet1);\n        }\n \
    \       index = planets.indexOf(planet2);\n        if(index != -1){\n        \
    \    planets.remove(planet2);\n        }\n        int index2 = planets.indexOf(planet2);\n\
    \        if(index2 != -1){\n            planets.remove(planet2);\n        }\n\
    \        for(int i = 0; i < 8; i++){\n            if(i == index){\n          \
    \      for(int j = 0; j < 8; j++){\n                    if(((j + i) % 2) != 0){\n\
    \                        if(orbits[i].getLast() == null){\n                  \
    \          String temp = orbits[i].getFirst();\n                            orbits[i].addFirst(temp);\n\
    \                        }\n                        if(orbits[j].getLast() ==\
    \ null){\n                            String temp = orbits[j].getFirst();\n  \
    \                          orbits[j].addFirst(temp);\n                       \
    \ }\n                        if(orbits[i].getLast().equals(orbits[j].getFirst())){\n\
    \                            if(planet1.equalsIgnoreCase(orbits[i].getFirst())){\n\
    \                                planets.add(planet2);\n                     \
    \       }\n                            if(planet2.", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (planet1.compareTo(\"Jupiter\"\
    ) == 0)\n            result.add(\"Saturn\");\n        if (planet1.compareTo(\"\
    Mercury\") == 0)\n            result.add(\"Uranus\");\n        if (planet1.compareTo(\"\
    Earth\") == 0)\n            result.add(\"Venus\");\n        if (planet1.compareTo(\"\
    Mars\") == 0)\n            result.add(\"Earth\");\n        if (planet1.compareTo(\"\
    Venus\") == 0)\n            result.add(\"Earth\");\n        if (planet1.compareTo(\"\
    Jupiter\") == 0)\n            result.add(\"Earth\");\n        if (planet1.compareTo(\"\
    Saturn\") == 0)\n            result.add(\"Mars\");\n        if (planet1.compareTo(\"\
    Uranus\") == 0)\n            result.add(\"Mars\");\n        if (planet1.compareTo(\"\
    Neptune\") == 0)\n            result.add(\"Mars\");\n        if (planet2.compareTo(\"\
    Jupiter\") == 0)\n            result.add(\"Uranus\");\n        if (planet2.compareTo(\"\
    Mercury\") == 0)\n            result.add(\"Venus\");\n        if (planet2.compareTo(\"\
    Earth\") == 0)\n            result.add(\"Earth\");\n        if (planet2.compareTo(\"\
    Mars\") == 0)\n            result.add(\"Earth\");\n        if (planet2.compareTo(\"\
    Venus\") == 0)\n            result.add(\"Earth\");\n        if (planet2.compareTo(\"\
    Jupiter\") == 0)\n            result.add(\"Mars\");\n        if (planet2.compareTo(\"\
    Saturn\") == 0)\n            result.add(\"Mars\");\n        if (planet2.compareTo(\"\
    Uranus\") == 0)\n            result.add(\"Mars\");\n        if (planet2.compareTo(\"\
    Neptune\") == 0)\n            result.add(\"Mars\");\n        return result;",
  "        double lon1 = -79.54878;\n        double lat1 = 46.97804;\n        double\
    \ lon2 = -79.17507;\n        double lat2 = 46.81271;\n\n        ArrayList<String>\
    \ planets = new ArrayList<String>();\n\n        // Planet names are only strings,\
    \ so we can use the equals method and \n        // String.equals() method.\n \
    \       ArrayList<String> planets1 = new ArrayList<String>(Arrays.asList(planet1.equals(\"\
    Earth\") ? \"Mercury\" : \"Venus\", planet1.equals(\"Mars\") ? \"Jupiter\" : \"\
    Earth\", planet1.equals(\"Uranus\") ? \"Saturn\" : \"Mars\", planet1.equals(\"\
    Neptune\") ? \"Uranus\" : \"Neptune\"));\n        ArrayList<String> planets2 =\
    \ new ArrayList<String>(Arrays.asList(planet2.equals(\"Earth\") ? \"Mercury\"\
    \ : \"Venus\", planet2.equals(\"Mars\") ? \"Jupiter\" : \"Earth\", planet2.equals(\"\
    Uranus\") ? \"Saturn\" : \"Mars\", planet2.equals(\"Neptune\") ? \"Uranus\" :\
    \ \"Neptune\"));\n\n        double longDif = calculateLong(planets1);\n      \
    \  double latDif = calculateLat(planets2);\n\n        double longMin = lonDif\
    \ - Math.abs(longDif);\n        double longMax = lonDif + Math.abs(longDif);\n\
    \        double latMin = latDif - Math.abs(latDif);\n        double latMax = latDif\
    \ + Math.abs(latDif);\n\n        // If any of the two planets are not close enough\
    \ to the Sun, move the \n        // first planet to the other side.\n        if\
    \ (longDif < longMin || longDif > longMax || latDif < latMin || latDif > latMax)\
    \ {\n            double tempLong = longDif;\n            longDif = longMin;\n\
    \            longMin = tempLong;\n            double tempLat = latDif;\n     \
    \       latDif = latMin;\n            latMin = tempLat;\n        }\n\n       \
    \ double lat1 = (latDif - latMin) / (latMax - latMin);\n        double lat2 =\
    \ (latMin - latDif) / (latMax - latMin);\n\n        double lon1 = (longDif - lonMin)\
    \ / (longMax - lonMin);\n        double lon2 = (longMin - longDif) / (longMax\
    \ - lonMin);\n\n        for (int i = 0; i < planets1.size(); i++) {\n", "    \
    \    //Write your code here\n        ArrayList<String> list = new ArrayList<String>();\n\
    \        //if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"\
    Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"\
    Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\")) {\n  \
    \      if(planet1.equals(\"Mercury\") || planet1.equals(\"Venus\") || planet1.equals(\"\
    Earth\") || planet1.equals(\"Mars\") || planet1.equals(\"Jupiter\") || planet1.equals(\"\
    Saturn\") || planet1.equals(\"Uranus\") || planet1.equals(\"Neptune\") || planet2.equals(\"\
    Mercury\") || planet2.equals(\"Venus\") || planet2.equals(\"Earth\") || planet2.equals(\"\
    Mars\") || planet2.equals(\"Jupiter\") || planet2.equals(\"Saturn\") || planet2.equals(\"\
    Uranus\") || planet2.equals(\"Neptune\")) {\n            list.add(planet1);\n\
    \            list.add(planet2);\n        }\n        return list;", "        if\
    \ (planet1.equals(planet2)) {\n            return new ArrayList<String>(Arrays.asList((String)\
    \ planet1));\n        } else {\n            ArrayList<String> a1 = new ArrayList<String>(Arrays.asList((String)\
    \ planet1));\n            ArrayList<String> a2 = new ArrayList<String>(Arrays.asList((String)\
    \ planet2));\n            int n = a1.size();\n            int m = a2.size();\n\
    \            if (n != m) {\n                return new ArrayList<String>();\n\
    \            }\n            if (n < 1) {\n                return new ArrayList<String>();\n\
    \            }\n            if (m == 0) {\n                return a1;\n      \
    \      }\n            PriorityQueue<String> pq = new PriorityQueue<String>();\n\
    \            for (int i = 0; i < n; i++) {\n                String name = a1.get(i);\n\
    \                double distance = Sun.dist(a1.get(i), a2.get(0));\n         \
    \       pq.add(name, distance);\n            }\n            pq.remove(a2.get(0));\n\
    \            double d = a2.get(0) - a1.get(0);\n            while (!pq.isEmpty())\
    \ {\n                d = Math.sqrt((Math.pow(d, 2)));\n                double\
    \ next = pq.poll();\n                double dist = Sun.dist(next, a2.get(0));\n\
    \                if (dist < d) {\n                    d = dist;\n            \
    \        pq.add(next, d);\n                }\n            }\n            return\
    \ pq;\n        }", "        if (planet1.equalsIgnoreCase(planet2)) {\n       \
    \     return new ArrayList<String>();\n        }\n        ArrayList<String> p1\
    \ = new ArrayList<String>();\n        ArrayList<String> p2 = new ArrayList<String>();\n\
    \        String s1 = \"Jupiter\";\n        String s2 = \"Neptune\";\n        ArrayList<String>\
    \ p3 = new ArrayList<String>();\n        ArrayList<String> p4 = new ArrayList<String>();\n\
    \        ArrayList<String> p5 = new ArrayList<String>();\n        ArrayList<String>\
    \ p6 = new ArrayList<String>();\n        ArrayList<String> p7 = new ArrayList<String>();\n\
    \        ArrayList<String> p8 = new ArrayList<String>();\n\n        // find orbits\
    \ of both planets\n        for (int i = 0; i < planet1.length(); i++) {\n    \
    \        if (planet1.charAt(i) == s2.charAt(0)) {\n                p1.add(s1 +\
    \ s2.substring(1));\n            }\n        }\n        for (int i = 0; i < planet2.length();\
    \ i++) {\n            if (planet2.charAt(i) == s1.charAt(0)) {\n             \
    \   p2.add(s2 + s1.substring(1));\n            }\n        }\n        System.out.println(p1);\n\
    \        System.out.println(p2);\n        System.out.println(p3);\n        System.out.println(p4);\n\
    \        System.out.println(p5);\n        System.out.println(p6);\n        System.out.println(p7);\n\
    \        System.out.println(p8);\n\n        // sort planets by proximity to sun\n\
    \        if (p3.isEmpty() && p4.isEmpty()) {\n            p3 = (ArrayList<String>)\
    \ p1.clone();\n            p4 = (ArrayList<String>) p2.clone();\n        }\n \
    \       if (p5.isEmpty() && p6.isEmpty()) {\n            p5 = (ArrayList<String>)\
    \ p1.clone();\n            p6 = (ArrayList<String>) p2.clone();\n        }\n \
    \       if (p7.isEmpty() && p8.isEmpty()) {\n            p7 = (ArrayList<String>)\
    \ p1.clone();\n            p8 = (ArrayList<String>) p2.clone();\n        }\n\n\
    \        System.out.println(p3);\n        System.out.println(p4);\n        System.out.println(p5);\n\
    \        System.out.println(p6);\n        System.out.println(p7);\n        System.out.println(p8);\n\
    \        return Arrays.asList(p3, p4, p5, p6, p7, p8);\n", "        ArrayList\
    \ planets = new ArrayList();\n        if (planet1.equalsIgnoreCase(\"Earth\")\
    \ && planet2.equalsIgnoreCase(\"Mercury\")) {\n            planets.add(\"Venus\"\
    );\n            planets.add(\"Mars\");\n            planets.add(\"Jupiter\");\n\
    \            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n\
    \            planets.add(\"Neptune\");\n            return planets;\n        }\
    \ else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n            planets.add(\"Venus\");\n            planets.add(\"\
    Earth\");\n            planets.add(\"Mars\");\n            planets.add(\"Jupiter\"\
    );\n            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n\
    \            planets.add(\"Neptune\");\n            return planets;\n        }\
    \ else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Neptune\")) {\n            planets.add(\"Venus\");\n            planets.add(\"\
    Earth\");\n            planets.add(\"Mars\");\n            planets.add(\"Jupiter\"\
    );\n            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n\
    \            planets.add(\"Neptune\");\n            return planets;\n        }\
    \ else if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Mars\")) {\n            planets.add(\"Venus\");\n            planets.add(\"Mercury\"\
    );\n            planets.add(\"Jupiter\");\n            planets.add(\"Saturn\"\
    );\n            planets.add(\"Uranus\");\n            planets.add(\"Neptune\"\
    );\n            return planets;\n        } else if (planet1.equalsIgnoreCase(\"\
    Jupiter\") && planet2.equalsIgnoreCase(\"Saturn\")) {\n            planets.add(\"\
    Venus\");\n            planets.add(\"Earth\");\n            planets.add(\"Mercury\"\
    );\n            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n\
    \            planets.add(\"Neptune\");\n            return planets;\n        }\
    \ else if (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n            planets.add(\"Venus\");\n            planets.add(\"\
    Earth\");\n            ", "        HashSet<String> p1 = new HashSet<String>(Arrays.asList(planet1,\
    \ planet2));\n        HashSet<String> p2 = new HashSet<String>(Arrays.asList(planet2,\
    \ planet1));\n        HashSet<String> s = new HashSet<String>(Arrays.asList(planet1,\
    \ planet2));\n        HashSet<String> rs = new HashSet<String>(Arrays.asList(planet2,\
    \ planet1));\n        HashSet<String> r1 = new HashSet<String>(Arrays.asList(planet1,\
    \ planet2));\n        HashSet<String> p = new HashSet<String>(Arrays.asList(planet1,\
    \ planet2));\n        HashSet<String> prs = new HashSet<String>(Arrays.asList(planet2,\
    \ planet1));\n        HashSet<String> r2 = new HashSet<String>(Arrays.asList(planet2,\
    \ planet1));\n        HashSet<String> ps = new HashSet<String>(Arrays.asList(planet1,\
    \ planet2));\n        ArrayList<String> arr = new ArrayList<String>();\n     \
    \   Set<String> hs = new HashSet<String>();\n        hs.add(planet1);\n      \
    \  hs.add(planet2);\n        if (planet1.equalsIgnoreCase(planet2)) {\n      \
    \      if (planet1.equalsIgnoreCase(\"Mercury\")) {\n                arr.add(\"\
    Venus\");\n                return arr;\n            }\n            if (planet1.equalsIgnoreCase(\"\
    Venus\")) {\n                arr.add(\"Mercury\");\n                return arr;\n\
    \            }\n            if (planet1.equalsIgnoreCase(\"Earth\")) {\n     \
    \           arr.add(\"Mars\");\n                return arr;\n            }\n \
    \           if (planet1.equalsIgnoreCase(\"Mars\")) {\n                arr.add(\"\
    Earth\");\n                return arr;\n            }\n            if (planet1.equalsIgnoreCase(\"\
    Jupiter\")) {\n                arr.add(\"Saturn\");\n                return arr;\n\
    \            }\n            if (planet1.equalsIgnoreCase(\"Saturn\")) {\n    \
    \            arr.add(\"Jupiter\");\n                return arr;\n            }\n\
    \            if (planet1.equalsIgnoreCase(\"Uranus\")) {\n                arr.add(\"\
    Neptune\");\n                return arr;\n            }\n            if (planet1.equalsIgnoreCase(\"\
    Neptune\")) {\n                arr.add(\"Uranus\");\n                return arr;\n\
    \            }\n            if (planet1.equalsIgnoreCase(\"Mars \")) {\n     \
    \           arr.add(\"Mercury\");\n                return arr;\n            }\n\
    \            if (planet1.", "        ArrayList<String> output = new ArrayList<String>();\n\
    \        Set<String> planets = new HashSet<String>();\n        planets.add(planet1);\n\
    \        planets.add(planet2);\n        for (String s: planets) {\n          \
    \  Set<String> orbits = new HashSet<String>();\n            double a = 0;\n  \
    \          double b = Double.POSITIVE_INFINITY;\n            double c = Double.POSITIVE_INFINITY;\n\
    \            double d = Double.NEGATIVE_INFINITY;\n            double e = Double.NEGATIVE_INFINITY;\n\
    \            double f = Double.NEGATIVE_INFINITY;\n            for (String p:\
    \ planets) {\n                if (s.equals(p)) {\n                    orbits.add(p);\n\
    \                    a = orbits.size();\n                    for (String orbit:\
    \ orbits) {\n                        for (String p: planets) {\n             \
    \               if (orbit.equals(p)) {\n                                b = orbits.size();\n\
    \                                break;\n                            }\n     \
    \                   }\n                        orbits.add(p);\n              \
    \          c = orbits.size();\n                        for (String p: planets)\
    \ {\n                            if (orbit.equals(p)) {\n                    \
    \            d = orbits.size();\n                                break;\n    \
    \                        }\n                        }\n                      \
    \  orbits.add(p);\n                        e = orbits.size();\n              \
    \          for (String p: planets) {\n                            if (orbit.equals(p))\
    \ {\n                                f = orbits.size();\n                    \
    \            break;\n                            }\n                        }\n\
    \                    }\n                }\n            }\n            output.add(String.format(\"\
    (%s)\", String.join(\"\", planets)));\n            Set<String> newPlanets = new\
    \ HashSet<String>(planets);\n            newPlanets.remove(s);\n            if\
    \ (a != b) {\n                output.add(String.format(\"((%s))\", String.join(\"\
    \", newPlanets)));\n            } else {\n                if (c > b) {\n     \
    \               output.add(String.format(\"((%s))\", String.join(\"\", newPlanets)));\n\
    \                } else if (e > b) {\n                    output.add(String.format(\"\
    ((%s))\", String.join(\"\", newPlanets)));\n                } else if (f > b)\
    \ {\n                    output.add(String.format(\"((%s))\", String.join(\"\"\
    , newPlanets)));\n                } else {\n                    if (a > c) {\n\
    \                        output.add(String.format(\"((%s))\", String.join(\"\"\
    , newPlanets)));\n                    } else if (e > c) {\n                  \
    \      output.add(String.format(\"((%s))\", String.join(\"\", newPlanets)));\n\
    \                    } else if (f > c) {\n                        output.add(String.format(\"\
    ((%s))\", String.join(\"\", newPlanets)));\n                    }\n          \
    \      }\n            }\n        }\n        output.add(String.format(\"(%s)\"\
    , String.join(\"\", planets)));\n        Collections.sort(output);\n", "     \
    \   int planet1Orbit = getPlanetOrbit(planet1);\n        int planet2Orbit = getPlanetOrbit(planet2);\n\
    \        if (planet1Orbit > planet2Orbit) {\n            return new ArrayList<String>();\n\
    \        } else {\n            ArrayList<String> orbits = new ArrayList<String>();\n\
    \            for (int i = 0; i < 6; i++) {\n                String orbit = \"\
    Mercury\";\n                if (i == planet1Orbit) {\n                    orbit\
    \ = \"Earth\";\n                } else if (i == planet2Orbit) {\n            \
    \        orbit = \"Mars\";\n                }\n                orbits.add(orbit);\n\
    \            }\n            return orbits;\n        }", "        ArrayList<String>\
    \ arrayList = new ArrayList<>();\n        boolean flag = false;\n        for(int\
    \ i=0; i<=360; i++) {\n            double a = Math.toRadians(i);\n           \
    \ double x = Math.cos(a)*Math.cos(a);\n            double y = Math.sin(a)*Math.cos(a);\n\
    \            double z = Math.sin(a)*Math.sin(a);\n            double d = Math.sqrt(x*x+y*y+z*z);\n\
    \            double temp = Math.acos(z/d);\n            if((planet1.compareToIgnoreCase(planet2)\
    \ > 0 || planet1.compareToIgnoreCase(planet2) == 0) && d < 1 && d < 100) {\n \
    \               arrayList.add(planet1+\"(\" + i + \")\");\n                flag\
    \ = true;\n                break;\n            }\n            if((planet2.compareToIgnoreCase(planet1)\
    \ > 0 || planet2.compareToIgnoreCase(planet1) == 0) && d < 1 && d < 100) {\n \
    \               arrayList.add(planet2+\"(\" + i + \")\");\n                flag\
    \ = true;\n                break;\n            }\n        }\n        if(flag ==\
    \ true) {\n            Collections.sort(arrayList);\n        }\n        return\
    \ arrayList;", "        // Solution below based on code from https://community.oracle.com/thread/3900446\n\
    \        ArrayList<String> planets = new ArrayList<String>();\n        if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Uranus\")) {\n            planets.add(\"\
    Venus\");\n        }\n        if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            planets.add(\"Venus\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Earth\")) {\n            planets.add(\"\
    Venus\");\n        }\n        if (planet1.equalsIgnoreCase(\"Jupiter\") && planet2.equalsIgnoreCase(\"\
    Earth\")) {\n            planets.add(\"Venus\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Jupiter\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n            planets.add(\"\
    Venus\");\n        }\n        if (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"\
    Earth\")) {\n            planets.add(\"Venus\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Uranus\") && planet2.equalsIgnoreCase(\"Earth\")) {\n            planets.add(\"\
    Venus\");\n        }\n        if (planet1.equalsIgnoreCase(\"Neptune\") && planet2.equalsIgnoreCase(\"\
    Earth\")) {\n            planets.add(\"Venus\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Mars\") && planet2.equalsIgnoreCase(\"Earth\")) {\n            planets.add(\"\
    Venus\");\n        }\n        if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Mars\")) {\n            planets.add(\"Venus\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Jupiter\") && planet2.equalsIgnoreCase(\"Mars\")) {\n            planets.add(\"\
    Venus\");\n        }\n        if (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"\
    Mars\")) {\n            planets.add(\"Venus\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Uranus\") && planet2.equalsIgnoreCase(\"Mars\")) {\n            planets.add(\"\
    Venus\");\n        }\n        if (planet1.equalsIgnoreCase(\"Ne", "        ArrayList<String>\
    \ a1 = new ArrayList<String>(Arrays.asList(planet1, planet2));\n        ArrayList<String>\
    \ a2 = new ArrayList<String>(Arrays.asList(planet1, planet2));\n        a2.remove(0);\n\
    \        a1.remove(0);\n        Map<String, Integer> a3 = new HashMap<String,\
    \ Integer>(2);\n        a3.put(a1.get(1), 1);\n        a3.put(a1.get(2), 1);\n\
    \        a3.put(a2.get(1), 2);\n        a3.put(a2.get(2), 2);\n        Set<String>\
    \ s1 = new HashSet<String>();\n        s1.add(a1.get(1));\n        s1.add(a1.get(0));\n\
    \        s1.add(a2.get(1));\n        s1.add(a2.get(0));\n        Set<String> s2\
    \ = new HashSet<String>();\n        s2.add(a1.get(1));\n        s2.add(a2.get(1));\n\
    \        s2.add(a2.get(0));\n        Set<String> s3 = new HashSet<String>();\n\
    \        s3.add(a1.get(1));\n        s3.add(a2.get(1));\n        s3.add(a1.get(0));\n\
    \        s3.add(a2.get(0));\n        Set<String> s4 = new HashSet<String>();\n\
    \        s4.add(a1.get(1));\n        s4.add(a2.get(1));\n        s4.add(a1.get(0));\n\
    \        s4.add(a2.get(0));\n        Set<String> s5 = new HashSet<String>();\n\
    \        s5.add(a1.get(1));\n        s5.add(a1.get(0));\n        s5.add(a2.get(1));\n\
    \        s5.add(a2.get(0));\n        Set<String> s6 = new HashSet<String>();\n\
    \        s6.add(a1.get(1));\n        s6.add(a1.get(0));\n        s6.add(a2.get(1));\n\
    \        s6.add(a2.get(0));\n        Set<String> s7 = new HashSet<String>();\n\
    \        s7.add(a1.get(1));\n        s7.add(a2.get(1));\n        s7.add(a1.get(0));\n\
    \        s7.add(a2.get(0));\n        Set<String> s8 = new HashSet<String>();\n\
    \        s8.add(a1.get(1));\n        s8.add(a2.get(1));\n        s8.add(a1.get(0));\n\
    \        s8.add(a2.get(0));\n        System.out.println(s1);\n        System.out.println(s2);\n\
    \        System.out.println(s3);\n        System.out.println(s4);\n        System.out.println(s5);\n\
    \        System.out.println(s6);\n", "        int d1 = planet1.length();\n   \
    \     int d2 = planet2.length();\n        ArrayList<String> p = new ArrayList<>();\n\
    \        ArrayList<String> c = new ArrayList<>();\n        ArrayList<String> t\
    \ = new ArrayList<>();\n        ArrayList<String> e = new ArrayList<>();\n   \
    \     ArrayList<String> n = new ArrayList<>();\n        if (d1 > d2) {\n     \
    \       return new ArrayList<>();\n        }\n        System.out.println(planet1);\n\
    \        System.out.println(planet2);\n        System.out.println(d1);\n     \
    \   System.out.println(d2);\n        System.out.println(d1 > d2);\n        if\
    \ (d1 > d2) {\n            for (int i = 0; i < d1; i++) {\n                System.out.println(planet1);\n\
    \                p.add(planet1.charAt(i));\n            }\n            for (int\
    \ i = 0; i < d2; i++) {\n                System.out.println(planet2);\n      \
    \          c.add(planet2.charAt(i));\n            }\n            System.out.println(p.get(0));\n\
    \            System.out.println(p.get(1));\n            System.out.println(c.get(0));\n\
    \            System.out.println(c.get(1));\n            System.out.println(p);\n\
    \            System.out.println(c);\n            System.out.println(p.get(0));\n\
    \            System.out.println(p.get(1));\n            System.out.println(c.get(0));\n\
    \            System.out.println(c.get(1));\n            System.out.println(p);\n\
    \            System.out.println(c);\n            if (p.get(0).equals(p.get(1))\
    \ && c.get(0).equals(c.get(1)) && p.get(0) != p.get(1)) {\n                System.out.println(p.get(0));\n\
    \                System.out.println(p.get(1));\n                System.out.println(c.get(0));\n\
    \                System.out.println(c.get(1));\n                System.out.println(p);\n\
    \                System.out.println(c);\n                int d3 = Math.min(p.get(1),\
    \ p.get(0));\n                int d2 = Math.min(p.get(0), p.get(1));\n       \
    \         String p1 = p.get(d3);\n                String c1 = c.get(d2);\n   \
    \             String p2 = p.get(d2);\n                String c2 = c.get(d3);\n\
    \                ArrayList<String> c = new ArrayList<>();\n                ArrayList<String>\
    \ t = new ArrayList<>();\n                ArrayList<String> e = new ArrayList<>();\n\
    \                ArrayList<String> n = new ArrayList<>();\n                for\
    \ (int i = 0; i < d1 - 1; i++) {\n                    System.out.println(p.get(i));\n\
    \                    c.add(p.get(i));\n                }\n                for\
    \ (int i = 0; i < d2 - 1; i++) {\n                    System.out.println(c.get(i));\n\
    \                    t.add(c.get(i));\n                }\n                for\
    \ (int i = 0; i < d3 - 1; i++) {\n                    System.out.println(t.get(i));\n\
    \                    e.add(t.get(i));\n                }\n                for\
    \ (int i = 0; i < d2 - 1; i++) {\n                    System.out.println(e.get(i));\n\
    \                    n.add(e.get(i));\n                }\n                for\
    \ (int i = 0; i < d1 - 1; i++) {\n                    System.out.println(p.get(i));\n\
    \                    c.add(p.get(i));\n                }\n                for\
    \ (int i = 0; i < d3 - 1; i++) {\n                    System.out.println(c.get(i));\n\
    \                    t.", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        double dist = Math.abs((Mercury.orbit(planet1) - Sun.orbit(planet2)));\n\
    \        if (Math.abs(dist) > Math.abs(Mercury.orbit(planet2) - Sun.orbit(planet1)))\n\
    \            result.add((String)\"Venus\");\n        if (Math.abs(dist) > Math.abs(Venus.orbit(planet2)\
    \ - Sun.orbit(planet1)))\n            result.add((String)\"Earth\");\n       \
    \ if (Math.abs(dist) > Math.abs(Earth.orbit(planet2) - Sun.orbit(planet1)))\n\
    \            result.add((String)\"Mars\");\n        if (Math.abs(dist) > Math.abs(Mars.orbit(planet2)\
    \ - Sun.orbit(planet1)))\n            result.add((String)\"Jupiter\");\n     \
    \   if (Math.abs(dist) > Math.abs(Jupiter.orbit(planet2) - Sun.orbit(planet1)))\n\
    \            result.add((String)\"Saturn\");\n        if (Math.abs(dist) > Math.abs(Saturn.orbit(planet2)\
    \ - Sun.orbit(planet1)))\n            result.add((String)\"Uranus\");\n      \
    \  if (Math.abs(dist) > Math.abs(Uranus.orbit(planet2) - Sun.orbit(planet1)))\n\
    \            result.add((String)\"Neptune\");\n        return result;", "    \
    \    if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\") ||\n       \
    \     planet1.equals(\"Earth\") && planet2.equals(\"Venus\") ||\n            planet1.equals(\"\
    Mars\") && planet2.equals(\"Jupiter\") ||\n            planet1.equals(\"Jupiter\"\
    ) && planet2.equals(\"Saturn\") ||\n            planet1.equals(\"Uranus\") &&\
    \ planet2.equals(\"Neptune\"))\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\"));\n        else\n            return new ArrayList<String>();",
  "        ArrayList<String> result = new ArrayList<>();\n        System.out.println(planet1\
    \ + \"and\" + planet2 + \"have a distance of \" + distance(planet1, planet2));\n\
    \        return result;", "        List<String> result = new ArrayList<String>();\n\
    \        try{\n            double lat1 = Double.parseDouble(planet1.substring(0,\
    \ planet1.indexOf(\")\")));\n            double lon1 = Double.parseDouble(planet1.substring(planet1.indexOf(\"\
    (\")+1,planet1.indexOf(\")\") - 1));\n            double lat2 = Double.parseDouble(planet2.substring(0,\
    \ planet2.indexOf(\")\")));\n            double lon2 = Double.parseDouble(planet2.substring(planet2.indexOf(\"\
    (\")+1,planet2.indexOf(\")\") - 1));\n            double theta = Math.atan2(lon2\
    \ - lon1, lat2 - lat1);\n            double radius = 6371;\n            double\
    \ d = radius * Math.cos((Math.toRadians(lat1) + Math.toRadians(lat2)) / 2);\n\
    \            double e = Math.sqrt(Math.pow(Math.sin(Math.toRadians(lat1)) * Math.sin(Math.toRadians(lat2)),\
    \ 2) \n                    + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2))\
    \ * \n                    Math.pow(Math.cos(Math.toRadians(theta)) * Math.sin(Math.toRadians(lon2))\
    \ - \n                    Math.sin(Math.toRadians(theta)) * Math.cos(Math.toRadians(lon2))\
    \ * Math.cos(Math.toRadians(lon1)), 1));\n            double theta = Math.toDegrees(Math.atan2(e,\
    \ d) + 90);\n            List<String> list = Arrays.asList((String) planet1, (String)\
    \ planet2);\n            list.stream().filter(it -> (Math.abs(theta - Double.parseDouble(it.substring(0,\
    \ it.indexOf(\")\"))) < (Math.toRadians(15)))).sorted((String s1, String s2) ->\
    \ (Math.abs(Double.parseDouble(s1.substring(0, s1.indexOf(\")\"))) - Double.parseDouble(s2.substring(0,\
    \ s2.indexOf(\")\"))))).forEach(it -> result.add(it));\n            System.out.println(\"\
    test\" + result);\n            return result;\n        } catch (Exception e){\n\
    \            return new ArrayList<String>();\n        }", "        ArrayList<String>\
    \ result = new ArrayList<>();\n        \n        // Write your solution\n\n  \
    \      return result;", "        ArrayList<String> results = new ArrayList<String>();\n\
    \        if (planet1.equals(planet2)) {\n            // If both arguments are\
    \ same, return empty list.\n            return results;\n        }\n\n       \
    \ // If both arguments are incorrect, return empty list.\n        if (!planet1.equals(\"\
    Mercury\") && !planet1.equals(\"Venus\") && !planet1.equals(\"Earth\")\n     \
    \           && !planet1.equals(\"Mars\") && !planet1.equals(\"Jupiter\") && !planet1.equals(\"\
    Saturn\")\n                && !planet1.equals(\"Uranus\") && !planet1.equals(\"\
    Neptune\")\n                && !planet2.equals(\"Mercury\") && !planet2.equals(\"\
    Venus\") && !planet2.equals(\"Earth\")\n                && !planet2.equals(\"\
    Mars\") && !planet2.equals(\"Jupiter\") && !planet2.equals(\"Saturn\")\n     \
    \           && !planet2.equals(\"Uranus\") && !planet2.equals(\"Neptune\")) {\n\
    \            return results;\n        }\n\n        Planet planet1 = new Planet(\"\
    Mercury\");\n        Planet planet2 = new Planet(\"Venus\");\n        Planet planet3\
    \ = new Planet(\"Earth\");\n        Planet planet4 = new Planet(\"Mars\");\n \
    \       Planet planet5 = new Planet(\"Jupiter\");\n        Planet planet6 = new\
    \ Planet(\"Saturn\");\n        Planet planet7 = new Planet(\"Uranus\");\n    \
    \    Planet planet8 = new Planet(\"Neptune\");\n\n        ArrayList<String> tempList\
    \ = new ArrayList<String>();\n\n        // Iterate through the planets in ascending\
    \ order of distance \n        // from the Sun. \n        for (Planet planet: new\
    \ Planet[]{planet1, planet2, planet3, planet4, planet5, planet6, planet7, planet8})\
    \ {\n            long distance = computeDistance(planet, planet2);\n         \
    \   tempList.add(planet.getName());\n\n            // If the current planet is\
    \ within the distance of the other planet, \n            // add it to the result\
    \ list.\n            if (distance <= planet.getOrbit()) {\n                results.add(planet.getName());\n\
    \            }\n        }\n\n        // Sort the results list based on their proximity\
    \ to the Sun.\n        results = sortByProximity(results);\n\n        return results;",
  "        ArrayList<String> pair = new ArrayList<String>();\n        if (planet1\
    \ == null || planet2 == null) {\n            return pair;\n        }\n       \
    \ try {\n            Method method = bf.getClass().getDeclaredMethod(\"findPlanetsBetweenPlanets\"\
    );\n            method.setAccessible(true);\n            Object[] args = new Object[2];\n\
    \            args[0] = planet1;\n            args[1] = planet2;\n            pair\
    \ = method.invoke(bf, args);\n        } catch (Exception e) {\n            e.printStackTrace();\n\
    \        }\n        return pair;", "        ArrayList<String> planets = new ArrayList<>();\n\
    \        planets.add(planet1);\n        planets.add(planet2);\n        for (String\
    \ p: planets){\n            int j = 0;\n            for(int i = j; i <= planets.size()\
    \ - 1; i++){\n                if(p == planets.get(i)){\n                    j\
    \ = planets.size() - 1;\n                }\n            }\n            int i =\
    \ 0;\n            for(int j = 0; j < planets.size(); j++){\n                if(p\
    \ == planets.get(j)){\n                    i = j;\n                }\n       \
    \     }\n            ArrayList<String> list = new ArrayList<>();\n           \
    \ if(i != j){\n                list.add(planets.get(i));\n                list.add(planets.get(j));\n\
    \            }\n            else{\n                list.add(p);\n            }\n\
    \            Collections.sort(list, Comparator.comparing(Math::sqrt));\n     \
    \       planets.addAll(list);\n        }\n        return planets;", "        ArrayList<String>\
    \ planets = new ArrayList<>();\n        ArrayList orbits = new ArrayList();\n\
    \        ArrayList planetorbits = new ArrayList();\n        double sun_earth_distance;\n\
    \        double sun_mercury_distance;\n        double sun_venus_distance;\n  \
    \      double sun_jupiter_distance;\n        double sun_saturn_distance;\n   \
    \     double sun_uranus_distance;\n        double sun_neptune_distance;\n    \
    \    double sun_earth_orbit;\n        double sun_mercury_orbit;\n        double\
    \ sun_venus_orbit;\n        double sun_jupiter_orbit;\n        double sun_saturn_orbit;\n\
    \        double sun_uranus_orbit;\n        double sun_neptune_orbit;\n       \
    \ double sun_earth_r;\n        double sun_mercury_r;\n        double sun_venus_r;\n\
    \        double sun_jupiter_r;\n        double sun_saturn_r;\n        double sun_uranus_r;\n\
    \        double sun_neptune_r;\n        double sun_earth_x;\n        double sun_mercury_x;\n\
    \        double sun_venus_x;\n        double sun_jupiter_x;\n        double sun_saturn_x;\n\
    \        double sun_uranus_x;\n        double sun_neptune_x;\n        double sun_earth_y;\n\
    \        double sun_mercury_y;\n        double sun_venus_y;\n        double sun_jupiter_y;\n\
    \        double sun_saturn_y;\n        double sun_uranus_y;\n        double sun_neptune_y;\n\
    \        double sun_earth_z;\n        double sun_mercury_z;\n        double sun_venus_z;\n\
    \        double sun_jupiter_z;\n        double sun_saturn_z;\n        double sun_uranus_z;\n\
    \        double sun_neptune_z;\n        double sun_earth_distance;\n        double\
    \ sun_mercury_distance;\n        double sun_venus_distance;\n        double sun_jupiter_distance;\n\
    \        double sun_saturn_distance;\n        double sun_uranus_distance;\n  \
    \      double sun_neptune_distance;\n        double sun_earth_orbit;\n       \
    \ double sun_mercury_orbit;\n        double sun_venus_orbit;\n        double sun_jupiter_orbit;\n\
    \        double sun", "        ArrayList<String> list1 = new ArrayList<>();\n\
    \        ArrayList<String> list2 = new ArrayList<>();\n        if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Neptune\")) {\n            list1.add(\"\
    Venus\");\n        } else if (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"\
    Neptune\")) {\n            list1.add(\"Earth\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n            list1.add(\"\
    Mars\");\n        } else if (planet1.equalsIgnoreCase(\"Mars\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            list1.add(\"Jupiter\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Jupiter\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n            list1.add(\"\
    Saturn\");\n        } else if (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            list1.add(\"Uranus\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Uranus\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n            list1.add(\"\
    Neptune\");\n        }\n        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n            list2.add(\"Venus\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Venus\") && planet2.equalsIgnoreCase(\"Uranus\")) {\n            list2.add(\"\
    Earth\");\n        } else if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            list2.add(\"Mars\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Mars\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n            list2.add(\"\
    Jupiter\");\n        } else if (planet1.equalsIgnoreCase(\"Jupiter\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            list2.add(\"Saturn\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Saturn\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n            list2.add(\"\
    Uranus\");\n        } else if (planet1.equalsIgnoreCase(\"Uranus\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            list2.", "        ArrayList<String> list = new ArrayList<String>();\n\
    \        Pair<ArrayList<String>, ArrayList<String>> p1 = orbit(planet1);\n   \
    \     Pair<ArrayList<String>, ArrayList<String>> p2 = orbit(planet2);\n      \
    \  if (p1 != null && p2 != null) {\n            ArrayList<String> s1 = p1.getValue();\n\
    \            ArrayList<String> s2 = p2.getValue();\n            for (int i = 0;\
    \ i < s1.size(); i++) {\n                for (int j = 0; j < s2.size(); j++) {\n\
    \                    if (s1.get(i).equalsIgnoreCase(planet1)) {\n            \
    \            list.add(s2.get(j));\n                    }\n                   \
    \ if (s2.get(j).equalsIgnoreCase(planet1)) {\n                        list.add(s1.get(i));\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ list;", "        ArrayList<String> result = new ArrayList<String>();\n\n   \
    \     // Your code goes here\n        if (planet1.equalsIgnoreCase(\"Mercury\"\
    ) && planet2.equalsIgnoreCase(\"Neptune\")) {\n            result.add(\"Saturn\"\
    );\n            result.add(\"Uranus\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Venus\") && planet2.equalsIgnoreCase(\"Earth\")) {\n            result.add(\"\
    Earth\");\n            result.add(\"Mars\");\n            result.add(\"Jupiter\"\
    );\n            result.add(\"Saturn\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Venus\")) {\n            result.add(\"\
    Mercury\");\n            result.add(\"Earth\");\n            result.add(\"Mars\"\
    );\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n\
    \        }\n        if (planet1.equalsIgnoreCase(\"Uranus\") && planet2.equalsIgnoreCase(\"\
    Jupiter\")) {\n            result.add(\"Uranus\");\n            result.add(\"\
    Mercury\");\n            result.add(\"Earth\");\n            result.add(\"Mars\"\
    );\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n\
    \        }\n        if (planet1.equalsIgnoreCase(\"Jupiter\") && planet2.equalsIgnoreCase(\"\
    Saturn\")) {\n            result.add(\"Jupiter\");\n            result.add(\"\
    Uranus\");\n            result.add(\"Mercury\");\n            result.add(\"Earth\"\
    );\n            result.add(\"Mars\");\n            result.add(\"Saturn\");\n \
    \       }\n        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Jupiter\")) {\n            result.add(\"Mercury\");\n            result.add(\"\
    Uranus\");\n            result.add(\"Earth\");\n            result.add(\"Mars\"\
    );\n            result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n\
    \        }\n        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Earth\")) {\n            result.add(\"Mercury\");\n            result.add(\"Uranus\"\
    );\n            result.add(\"Earth\");\n            result.add(\"Mars\");\n  \
    \          result.add(\"Jupiter\");\n            result.add(\"Saturn\");\n   \
    \     }\n        if (planet1.equalsIgnoreCase(\"Uranus\") && planet2.equalsIgnoreCase(\"\
    Earth\")) {\n            result.add(\"Uranus\");\n            result.add(\"Mercury\"\
    );\n            result.add(\"Earth\");\n            result.add(\"Mar", "     \
    \   List<String> result = new ArrayList<String>();\n\n        // Use try/catch\
    \ for catching any exceptions.\n        try {\n            // First get the planets\
    \ in the orbits of planet1\n            List<String> orbits1 = orbitsBetweenPlanets(planet1);\n\
    \n            // Then get the planets in the orbits of planet2\n            List<String>\
    \ orbits2 = orbitsBetweenPlanets(planet2);\n\n            // Now sort and remove\
    \ duplicates from orbits1 which are present in orbits2\n            orbits1 =\
    \ orbits1.stream().distinct().sorted().collect(Collectors.toList());\n\n     \
    \       // Now sort and remove duplicates from orbits2 which are present in orbits1\n\
    \            orbits2 = orbits2.stream().distinct().sorted().collect(Collectors.toList());\n\
    \n            // Now we need to find the planets which the planets have in common.\n\
    \            // To do this, we can use stream intersection operation.\n      \
    \      // But we also need to remove duplicates to get the desired result.\n \
    \           result = orbits1.stream().filter(planet2 -> orbits2.contains(planet2)).collect(Collectors.toList());\n\
    \            result = new ArrayList<String>(result);\n\n            // If no planets\
    \ are found, return an empty list.\n            if (!result.isEmpty()) {\n   \
    \             // Finally we sort and remove the duplicates from the result \n\
    \                // so that the result is sorted in ascending order.\n       \
    \         result = new ArrayList<String>(result.stream().distinct().sorted().collect(Collectors.toList()));\n\
    \n                // Finally we return the result as a list.\n               \
    \ return result;\n            }\n\n            // If no planets are found and\
    \ no exceptions are thrown,\n            // the function will return an empty\
    \ list.\n            return new ArrayList<String>();\n        }\n        // Catch\
    \ any exceptions other than those from invalid planet names.\n        catch (Throwable\
    \ t) {\n            // If no exceptions are thrown, print the error message to\
    \ standard error.\n            t.printStackTrace();\n            // Return an\
    \ empty list.\n            return new ArrayList<String>();\n        }", "    \
    \    ArrayList<String> result;\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Neptune\")) {\n            result = Arrays.asList((String)\"Venus\");\n      \
    \  } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\")) {\n  \
    \          result = Arrays.asList((String)\"Venus\");\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Uranus\")) {\n            result = Arrays.asList((String)\"\
    Earth\");\n        } else if (planet1.equals(\"Uranus\") && planet2.equals(\"\
    Mercury\")) {\n            result = Arrays.asList((String)\"Earth\");\n      \
    \  } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Earth\")) {\n   \
    \         result = Arrays.asList((String)\"Mars\");\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Mars\")) {\n            result = Arrays.asList((String)\"\
    Jupiter\");\n        } else if (planet1.equals(\"Mars\") && planet2.equals(\"\
    Jupiter\")) {\n            result = Arrays.asList((String)\"Saturn\");\n     \
    \   } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) {\n\
    \            result = Arrays.asList((String)\"Uranus\");\n        } else if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Uranus\")) {\n            result = Arrays.asList((String)\"\
    Neptune\");\n        } else if (planet1.equals(\"Venus\") && planet2.equals(\"\
    Neptune\")) {\n            result = Arrays.asList((String)\"Mercury\");\n    \
    \    } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Mercury\")) {\n\
    \            result = new ArrayList<String>(Arrays.asList((String)\"Mercury\"\
    , (String)\"Mercury\"));\n        } else {\n            result = new ArrayList<String>();\n\
    \        }\n        return result;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> orbits = new ArrayList<String>();\n\n        orbits.add(planet1);\n\
    \        orbits.add(planet2);\n\n        Collections.sort(orbits, (o1, o2) ->\
    \ {\n            double dist = Math.sqrt(Math.pow(o1.getDistanceFromSun(), 2)\n\
    \                    - Math.pow(o2.getDistanceFromSun(), 2));\n            return\
    \ Double.valueOf(dist);\n        });\n        Iterator<String> iterator = orbits.iterator();\n\
    \        double a = 0, b = 1;\n        int size = orbits.size();\n        for\
    \ (int i = 0; i < size; i++) {\n            a = Math.sqrt(a * a - (b - i) * (b\
    \ - i));\n            b = Math.sqrt(a * a + (b - i) * (b - i));\n            if\
    \ (Math.sqrt(a * b) < 1) {\n                result.add(iterator.next());\n   \
    \         }\n        }\n        return result;", "        ArrayList<String> list\
    \ = new ArrayList<String>();\n        String orbs = \"\";\n        long a1, a2;\n\
    \        long e1, e2;\n        double d;\n        double x;\n        double y1;\n\
    \        double y2;\n        double z1;\n        double z2;\n        \n      \
    \  if((planet1.equalsIgnoreCase(\"Jupiter\") && planet2.equalsIgnoreCase(\"Uranus\"\
    )) ||\n            (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) ||\n            (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) ||\n            (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"\
    Earth\")) ||\n            (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Venus\")) ||\n            (planet1.equalsIgnoreCase(\"Uranus\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) ||\n            (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Venus\")) ||\n            (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Jupiter\")) ||\n            (planet1.equalsIgnoreCase(\"Mars\") && planet2.equalsIgnoreCase(\"\
    Jupiter\")) ||\n            (planet1.equalsIgnoreCase(\"Jupiter\") && planet2.equalsIgnoreCase(\"\
    Mars\")) ||\n            (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"\
    Jupiter\")) ||\n            (planet1.equalsIgnoreCase(\"Uranus\") && planet2.equalsIgnoreCase(\"\
    Earth\")) ||\n            (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Mars\")) ||\n            (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"\
    Earth\")) ||\n            (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Saturn\")) ||\n            (planet1.equalsIgnoreCase(\"Jupiter\") && planet2.equalsIgnoreCase(\"\
    Saturn\")) ||\n            (planet1.equalsIgnoreCase(\"Uranus\") && planet2.equalsIgnoreCase(\"\
    Earth\")) ||\n            (planet1.equals", "        // Solution goes here\n \
    \       // Solution goes here\n        Set<String> a = new HashSet<>();\n    \
    \    Set<String> b = new HashSet<>();\n        if (planet1.equals(\"Mercury\"\
    ))\n            a.add(\"Venus\");\n        if (planet1.equals(\"Venus\"))\n  \
    \          a.add(\"Earth\");\n        if (planet1.equals(\"Earth\"))\n       \
    \     a.add(\"Mars\");\n        if (planet1.equals(\"Mars\"))\n            a.add(\"\
    Jupiter\");\n        if (planet1.equals(\"Jupiter\"))\n            a.add(\"Saturn\"\
    );\n        if (planet1.equals(\"Saturn\"))\n            a.add(\"Uranus\");\n\
    \        if (planet1.equals(\"Uranus\"))\n            a.add(\"Neptune\");\n  \
    \      if (planet2.equals(\"Mercury\"))\n            b.add(\"Venus\");\n     \
    \   if (planet2.equals(\"Venus\"))\n            b.add(\"Earth\");\n        if\
    \ (planet2.equals(\"Earth\"))\n            b.add(\"Mars\");\n        if (planet2.equals(\"\
    Mars\"))\n            b.add(\"Jupiter\");\n        if (planet2.equals(\"Jupiter\"\
    ))\n            b.add(\"Saturn\");\n        if (planet2.equals(\"Saturn\"))\n\
    \            b.add(\"Uranus\");\n        if (planet2.equals(\"Uranus\"))\n   \
    \         b.add(\"Neptune\");\n        if (a.size() == 0)\n            return\
    \ new ArrayList<>();\n        if (b.size() == 0)\n            return new ArrayList<>();\n\
    \        ArrayList<String> c = new ArrayList<>(a);\n        Collections.sort(c,\
    \ Comparator.comparing(s -> sunDistance(planet1, s)));\n        c.addAll(b.subList(0,\
    \ a.size()));\n        return c;", "        ArrayList<String> pair = new ArrayList<String>();\n\
    \n        // If either of the planets can't be found return an empty pair\n  \
    \      if (!planet1.startsWith(\"M\") || !planet2.startsWith(\"M\")) {\n     \
    \       return pair;\n        }\n\n        // Construct the planet list from names\
    \ of the planets\n        ArrayList<String> planets = new ArrayList<String>();\n\
    \        planets.add(planet1);\n        planets.add(planet2);\n        ArrayList<String>\
    \ temp = new ArrayList<String>();\n\n        // Initialize an ArrayList to store\
    \ the planets\n        // that have not yet been sorted.\n        ArrayList<String>\
    \ sorted = new ArrayList<String>();\n\n        // Sort planets by proximity to\
    \ the sun.\n        Arrays.sort(planets);\n\n        // For every planet\n   \
    \     for (int i = 0; i < planets.size(); i++) {\n            String planet =\
    \ planets.get(i);\n\n            // If this planet has already been visited, skip\
    \ this one.\n            if (temp.contains(planet)) {\n                continue;\n\
    \            }\n\n            // Otherwise, add this planet to our \"sorted\"\
    \ list.\n            sorted.add(planet);\n\n            // Remember which planets\
    \ have already been visited.\n            temp.add(planet);\n\n            //\
    \ For every other planet\n            for (int j = 0; j < planets.size(); j++)\
    \ {\n                String planet2 = planets.get(j);\n                if (planet\
    \ == planet2) {\n                    continue;\n                }\n\n        \
    \        // If this planet hasn't been visited, add it to the \n             \
    \   // \"sorted\" list, then remove it from the \"temp\" list.\n             \
    \   sorted.add(planet);\n                temp.remove(planet);\n              \
    \  double dis = distance(planet, planet2);\n                Collections.sort(sorted);\n\
    \                Collections.sort(temp);\n                if (dis > 0.0 && dis\
    \ <= 1.0) {\n                    pair.add(planet2);\n                    break;\n\
    \                }\n            }\n        }\n\n        return pair;", "     \
    \   ArrayList<String> result = new ArrayList<>();\n        if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Neptune\"))\n            result.add(\"\
    Venus\");\n        else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Uranus\"))\n            result.add(\"Earth\");\n        else if (planet1.equalsIgnoreCase(\"\
    Venus\") && planet2.equalsIgnoreCase(\"Earth\"))\n            result.add(\"Mercury\"\
    );\n        else if (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"\
    Mercury\"))\n            result.add(\"Earth\");\n        else if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Mercury\"))\n            result.add(\"\
    Venus\");\n        else if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Venus\"))\n            result.add(\"Mercury\");\n        else if (planet1.equalsIgnoreCase(\"\
    Mars\") && planet2.equalsIgnoreCase(\"Jupiter\"))\n            result.add(\"Jupiter\"\
    );\n        else if (planet1.equalsIgnoreCase(\"Mars\") && planet2.equalsIgnoreCase(\"\
    Saturn\"))\n            result.add(\"Saturn\");\n        else if (planet1.equalsIgnoreCase(\"\
    Jupiter\") && planet2.equalsIgnoreCase(\"Saturn\"))\n            result.add(\"\
    Mars\");\n        else if (planet1.equalsIgnoreCase(\"Jupiter\") && planet2.equalsIgnoreCase(\"\
    Mars\"))\n            result.add(\"Venus\");\n        else if (planet1.equalsIgnoreCase(\"\
    Saturn\") && planet2.equalsIgnoreCase(\"Uranus\"))\n            result.add(\"\
    Uranus\");\n        else if (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"\
    Neptune\"))\n            result.add(\"Neptune\");\n        else if (planet1.equalsIgnoreCase(\"\
    Uranus\") && planet2.equalsIgnoreCase(\"Neptune\"))\n            result.add(\"\
    Neptune\");\n        else if (planet1.equalsIgnoreCase(\"Uranus\") && planet2.equalsIgnoreCase(\"\
    Neptune\"))\n            result.add(\"Neptune\");\n        else if (planet1.equalsIgnoreCase(\"\
    Neptune\") && planet2.equalsIgnoreCase(\"Neptune\"))\n            result.add(\"\
    Ne", "        ArrayList<String> planets = new ArrayList<String>();\n        if\
    \ (planet1 == null || planet2 == null) {\n            return planets;\n      \
    \  }\n        double distance = Math.sqrt(Math.pow(planet1.toLowerCase().toDouble()\
    \ - \"Mercury\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet1.toLowerCase().toDouble()\
    \ - \"Venus\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet1.toLowerCase().toDouble()\
    \ - \"Earth\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet1.toLowerCase().toDouble()\
    \ - \"Mars\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet1.toLowerCase().toDouble()\
    \ - \"Jupiter\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet1.toLowerCase().toDouble()\
    \ - \"Saturn\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet1.toLowerCase().toDouble()\
    \ - \"Uranus\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet1.toLowerCase().toDouble()\
    \ - \"Neptune\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet2.toLowerCase().toDouble()\
    \ - \"Mercury\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet2.toLowerCase().toDouble()\
    \ - \"Venus\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet2.toLowerCase().toDouble()\
    \ - \"Earth\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet2.toLowerCase().toDouble()\
    \ - \"Mars\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet2.toLowerCase().toDouble()\
    \ - \"Jupiter\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet2.toLowerCase().toDouble()\
    \ - \"Saturn\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet2.toLowerCase().toDouble()\
    \ - \"Uranus\".toLowerCase().toDouble(), 2)\n                + Math.pow(planet2.toLowerCase().toDouble()\
    \ - \"Neptune\".toLowerCase().toDouble(), 2));\n        if (distance > 1) {\n\
    \            planets.add(\"Mercury\");\n            planets.add(\"Venus\");\n\
    \            planets.add(\"Earth\");\n            planets.add(\"Mars\");\n   \
    \         planets.add(\"Jupiter\");\n            planets.add(\"Saturn\");\n  \
    \          planets.add(\"Uranus\");\n            planets.add(\"Neptune\");\n \
    \       }\n        else if(distance < 1){\n            planets.add(\"Mercury\"\
    );\n            planets.add(\"Venus", "        ArrayList<String> planets = new\
    \ ArrayList<String>();\n        HashMap<String, Integer> names = new HashMap<String,\
    \ Integer>();\n        names.put(\"Mercury\", 1);\n        names.put(\"Venus\"\
    , 2);\n        names.put(\"Earth\", 3);\n        names.put(\"Mars\", 4);\n   \
    \     names.put(\"Jupiter\", 5);\n        names.put(\"Saturn\", 6);\n        names.put(\"\
    Uranus\", 7);\n        names.put(\"Neptune\", 8);\n\n        Integer id1 = names.get(planet1);\n\
    \        Integer id2 = names.get(planet2);\n        if (id1 == null || id2 ==\
    \ null) {\n            return planets;\n        }\n        if (id1 == id2) {\n\
    \            planets.add(planet1);\n        }\n        if (id2 < id1) {\n    \
    \        planets.add(planet2);\n        }\n        // The orbit of Mercury comes\
    \ after Jupiter in the following order:\n        Arrays.sort(planets, new Comparator<String>()\
    \ {\n            public int compare(String o1, String o2) {\n                if\
    \ (id1 < id2) {\n                    return -1;\n                }\n         \
    \       return 1;\n            }\n        });\n        return planets;", "   \
    \     ArrayList<String> list = new ArrayList<>();\n        if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Neptune\")) {\n            list.add(\"Venus\");\n\
    \            list.add(\"Earth\");\n            list.add(\"Mars\");\n         \
    \   list.add(\"Jupiter\");\n            list.add(\"Saturn\");\n            list.add(\"\
    Uranus\");\n            list.add(\"Neptune\");\n            return list;\n   \
    \     }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"))\
    \ {\n            list.add(\"Venus\");\n            list.add(\"Mars\");\n     \
    \       list.add(\"Jupiter\");\n            list.add(\"Saturn\");\n          \
    \  list.add(\"Uranus\");\n            list.add(\"Neptune\");\n            return\
    \ list;\n        }\n        if (planet1.equals(\"Venus\") && planet2.equals(\"\
    Earth\")) {\n            list.add(\"Mercury\");\n            list.add(\"Mars\"\
    );\n            list.add(\"Jupiter\");\n            list.add(\"Saturn\");\n  \
    \          list.add(\"Uranus\");\n            list.add(\"Neptune\");\n       \
    \     return list;\n        }\n        if (planet1.equals(\"Mars\") && planet2.equals(\"\
    Earth\")) {\n            list.add(\"Mercury\");\n            list.add(\"Venus\"\
    );\n            list.add(\"Jupiter\");\n            list.add(\"Saturn\");\n  \
    \          list.add(\"Uranus\");\n            list.add(\"Neptune\");\n       \
    \     return list;\n        }\n        if (planet1.equals(\"Jupiter\") && planet2.equals(\"\
    Mars\")) {\n            list.add(\"Mercury\");\n            list.add(\"Venus\"\
    );\n            list.add(\"Earth\");\n            list.add(\"Saturn\");\n    \
    \        list.add(\"Uranus\");\n            list.add(\"Neptune\");\n         \
    \   return list;\n        }\n        if (planet1.equals(\"Saturn\") && planet2.equals(\"\
    Jupiter\")) {\n            list.add(\"Mercury\");\n            list.add(\"Venus\"\
    );\n            list.add(\"Earth\");\n            list.add(\"Mars\");\n      \
    \      list.add(\"Uranus\");\n            list.add(\"Neptune\");\n           \
    \ return list;\n        }\n        if (planet1.equals(\"Uranus\") && planet2.equals(\"\
    Saturn\")) {\n            list.add(\"Mercury\");\n            list.add(\"Venus\"\
    );", "        ArrayList<String> results = new ArrayList<String>();\n        double\
    \ dEarth;\n        double dMercury;\n        double dVenus;\n        double dMars;\n\
    \        double dJupiter;\n        double dSaturn;\n        double dUranus;\n\
    \        double dNeptune;\n        double dMercuryOrbit;\n        double dVenusOrbit;\n\
    \        double dMarsOrbit;\n        double dJupiterOrbit;\n        double dSaturnOrbit;\n\
    \        double dUranusOrbit;\n        double dNeptuneOrbit;\n        double dSunOrbit;\n\
    \        double dMercuryOrbitSun;\n        double dVenusOrbitSun;\n        double\
    \ dMarsOrbitSun;\n        double dJupiterOrbitSun;\n        double dSaturnOrbitSun;\n\
    \        double dUranusOrbitSun;\n        double dNeptuneOrbitSun;\n        double\
    \ dSunOrbitSun;\n        double dMercuryOrbitVenus;\n        double dVenusOrbitVenus;\n\
    \        double dMarsOrbitVenus;\n        double dJupiterOrbitVenus;\n       \
    \ double dSaturnOrbitVenus;\n        double dUranusOrbitVenus;\n        double\
    \ dNeptuneOrbitVenus;\n        double dSunOrbitVenus;\n        double dMercuryOrbitEarth;\n\
    \        double dVenusOrbitEarth;\n        double dMarsOrbitEarth;\n        double\
    \ dJupiterOrbitEarth;\n        double dSaturnOrbitEarth;\n        double dUranusOrbitEarth;\n\
    \        double dNeptuneOrbitEarth;\n        double dSunOrbitEarth;\n        double\
    \ dMercuryOrbitMars;\n        double dVenusOrbitMars;\n        double dMarsOrbitMars;\n\
    \        double dJupiterOrbitMars;\n        double dSaturnOrbitMars;\n       \
    \ double dUranusOrbitMars;\n        double dNeptuneOrbitMars;\n        double\
    \ dSunOrbitMars;\n        double dMercuryOrbitJupiter;\n        double dVenusOrbitJupiter;\n\
    \        ", "        ArrayList<String> planets = new ArrayList<String>();\n  \
    \      if (planet1.contains(\"Mercury\") && planet2.contains(\"Earth\"))\n   \
    \         planets.add(\"Venus\");\n        if (planet1.contains(\"Uranus\") &&\
    \ planet2.contains(\"Mercury\"))\n            planets.add(\"Earth\");\n      \
    \  if (planet1.contains(\"Venus\") && planet2.contains(\"Earth\"))\n         \
    \   planets.add(\"Mars\");\n        if (planet1.contains(\"Mars\") && planet2.contains(\"\
    Earth\"))\n            planets.add(\"Jupiter\");\n        if (planet1.contains(\"\
    Jupiter\") && planet2.contains(\"Earth\"))\n            planets.add(\"Saturn\"\
    );\n        if (planet1.contains(\"Saturn\") && planet2.contains(\"Earth\"))\n\
    \            planets.add(\"Uranus\");\n        if (planet1.contains(\"Uranus\"\
    ) && planet2.contains(\"Mercury\"))\n            planets.add(\"Neptune\");\n \
    \       if (planet1.contains(\"Neptune\") && planet2.contains(\"Mercury\"))\n\
    \            planets.add(\"Venus\");\n        if (planet1.contains(\"Venus\")\
    \ && planet2.contains(\"Mercury\"))\n            planets.add(\"Earth\");\n   \
    \     if (planet1.contains(\"Earth\") && planet2.contains(\"Mercury\"))\n    \
    \        planets.add(\"Mars\");\n        if (planet1.contains(\"Mars\") && planet2.contains(\"\
    Mercury\"))\n            planets.add(\"Jupiter\");\n        if (planet1.contains(\"\
    Jupiter\") && planet2.contains(\"Mercury\"))\n            planets.add(\"Saturn\"\
    );\n        if (planet1.contains(\"Saturn\") && planet2.contains(\"Mercury\"))\n\
    \            planets.add(\"Uranus\");\n        if (planet1.contains(\"Uranus\"\
    ) && planet2.contains(\"Venus\"))\n            planets.add(\"Earth\");\n     \
    \   if (planet1.contains(\"Earth\") && planet2.contains(\"Venus\"))\n        \
    \    planets.add(\"Mars\");\n        if (planet1.contains(\"Mars\") && planet2.contains(\"\
    Venus\"))\n            planets.add(\"Jupiter\");\n        if (planet1.contains(\"\
    Jupiter\") && planet2.contains(\"Venus\"))\n            planets.add(\"Saturn\"\
    );\n        if (planet1.contains(\"Saturn\") && planet2.contains(\"", "      \
    \  ArrayList<String> planets = new ArrayList<>();\n        boolean validPlanet\
    \ = planet1.equals(\"Mercury\")\n                || planet1.equals(\"Venus\")\n\
    \                || planet1.equals(\"Earth\")\n                || planet1.equals(\"\
    Mars\")\n                || planet1.equals(\"Jupiter\")\n                || planet1.equals(\"\
    Saturn\")\n                || planet1.equals(\"Uranus\")\n                || planet1.equals(\"\
    Neptune\")\n                || planet2.equals(\"Mercury\")\n                ||\
    \ planet2.equals(\"Venus\")\n                || planet2.equals(\"Earth\")\n  \
    \              || planet2.equals(\"Mars\")\n                || planet2.equals(\"\
    Jupiter\")\n                || planet2.equals(\"Saturn\")\n                ||\
    \ planet2.equals(\"Uranus\")\n                || planet2.equals(\"Neptune\");\n\
    \n        if(validPlanet) {\n            // Mercury -> Mercury, Venus -> Venus,\
    \ Earth -> Mercury, Mars -> Earth, Jupiter -> Earth\n            planets.add(\"\
    Mercury\");\n            planets.add(\"Venus\");\n            planets.add(\"Earth\"\
    );\n            planets.add(\"Mars\");\n            planets.add(\"Jupiter\");\n\
    \            planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n\
    \            planets.add(\"Neptune\");\n\n            // Mercury -> Mercury, Venus\
    \ -> Venus, Earth -> Mercury, Mars -> Earth, Jupiter -> Mercury, Saturn -> Earth,\
    \ Uranus -> Earth\n            planets.add(\"Mercury\");\n            planets.add(\"\
    Venus\");\n            planets.add(\"Earth\");\n            planets.add(\"Mars\"\
    );\n            planets.add(\"Jupiter\");\n            planets.add(\"Saturn\"\
    );\n            planets.add(\"Uranus\");\n            planets.add(\"Neptune\"\
    );\n\n            // Mercury -> Mercury, Venus -> Venus, Earth -> Mercury, Mars\
    \ -> Earth, Jupiter -> Mercury, Saturn -> Mercury, Uranus -> Mercury, Neptune\
    \ -> Mercury\n            planets.add(\"Mercury\");\n            planets.add(\"\
    Venus\");\n            planets.add(\"Earth\");\n            planets.add(\"Mars\"\
    );\n            planet", "        ArrayList<String> result = new ArrayList<>();\n\
    \        HashMap<String, String> planetMap = new HashMap<>();\n        planetMap.put(\"\
    Mercury\", \"Venus\");\n        planetMap.put(\"Venus\", \"Earth\");\n       \
    \ planetMap.put(\"Earth\", \"Mars\");\n        planetMap.put(\"Mars\", \"Jupiter\"\
    );\n        planetMap.put(\"Jupiter\", \"Saturn\");\n        planetMap.put(\"\
    Saturn\", \"Uranus\");\n        planetMap.put(\"Uranus\", \"Neptune\");\n    \
    \    planetMap.put(\"Neptune\", \"Mercury\");\n        planetMap.put(\"Mercury\"\
    , \"Venus\");\n        planetMap.put(\"Venus\", \"Earth\");\n        planetMap.put(\"\
    Earth\", \"Mars\");\n        planetMap.put(\"Mars\", \"Jupiter\");\n        planetMap.put(\"\
    Jupiter\", \"Saturn\");\n        planetMap.put(\"Saturn\", \"Uranus\");\n    \
    \    planetMap.put(\"Uranus\", \"Neptune\");\n        planetMap.put(\"Neptune\"\
    , \"Mercury\");\n        planetMap.put(\"Mercury\", \"Venus\");\n        planetMap.put(\"\
    Venus\", \"Earth\");\n        planetMap.put(\"Earth\", \"Mars\");\n        planetMap.put(\"\
    Mars\", \"Jupiter\");\n        planetMap.put(\"Jupiter\", \"Saturn\");\n     \
    \   planetMap.put(\"Saturn\", \"Uranus\");\n        planetMap.put(\"Uranus\",\
    \ \"Neptune\");\n        planetMap.put(\"Neptune\", \"Mercury\");\n        planetMap.put(\"\
    Mercury\", \"Venus\");\n        planetMap.put(\"Venus\", \"Earth\");\n       \
    \ planetMap.put(\"Earth\", \"Mars\");\n        planetMap.put(\"Mars\", \"Jupiter\"\
    );\n        planetMap.put(\"Jupiter\", \"Saturn\");\n        planetMap.put(\"\
    Saturn\", \"Uranus\");\n        planetMap.put(\"Uranus\", \"Neptune\");\n    \
    \    planetMap.put(\"Neptune\", \"Mercury\");\n        planetMap.put(\"Mercury\"\
    , \"Venus\");\n        planetMap.put(\"Venus\", \"Earth\");\n        planetMap.put(\"\
    Earth\", \"Mars\");\n        planetMap.put(\"Mars\", \"Jupiter\");\n        planetMap.put(\"",
  "        // Complete the code here\n        ArrayList<String> results = new ArrayList<String>();\n\
    \        //  Create a pair of planets whose orbits are located between the \n\
    \        //  orbit of planet1 and the orbit of planet2, sorted by \n        //\
    \  the proximity to the sun.\n        String str1=\"Mercury\";\n        String\
    \ str2=\"Uranus\";\n        Set<String> set1 = new HashSet<String>();\n      \
    \  Set<String> set2 = new HashSet<String>();\n        set1.add(str1);\n      \
    \  set1.add(str2);\n        Set<String> intersection = new HashSet<String>(set1);\n\
    \        intersection.retainAll(set2);\n        intersection.remove(str1);\n \
    \       intersection.remove(str2);\n        intersection.remove(\"Mercury\");\n\
    \        intersection.remove(\"Uranus\");\n        intersection.remove(\"Earth\"\
    );\n        intersection.remove(\"Venus\");\n        intersection.remove(\"Mars\"\
    );\n        intersection.remove(\"Jupiter\");\n        intersection.remove(\"\
    Saturn\");\n        intersection.remove(\"Neptune\");\n        if(intersection.isEmpty()){\n\
    \            return results;\n        }\n        for(String planet: intersection){\n\
    \            if(planet1.equals(planet)){\n                if(planet2.equals(planet)){\n\
    \                    results.add(planet);\n                }\n               \
    \ else if(planet2.startsWith(planet)){\n                    results.add(planet);\n\
    \                }\n            }\n        }\n        return results;", '        //
    Complete the code here', "        // code here\n        if(planet1.equals(\"Mercury\"\
    )){\n            if(planet2.equals(\"Neptune\")){\n                return new\
    \ ArrayList<String>(Arrays.asList(\"Saturn\", \"Uranus\"));\n            }\n \
    \           else if(planet2.equals(\"Uranus\")){\n                return new ArrayList<String>(Arrays.asList(\"\
    Venus\"));\n            }\n        }\n        else if(planet1.equals(\"Venus\"\
    )){\n            if(planet2.equals(\"Earth\")){\n                return new ArrayList<String>(Arrays.asList(\"\
    Mercury\"));\n            }\n            else if(planet2.equals(\"Mars\")){\n\
    \                return new ArrayList<String>(Arrays.asList(\"Jupiter\"));\n \
    \           }\n        }\n        else if(planet1.equals(\"Earth\")){\n      \
    \      if(planet2.equals(\"Mercury\")){\n                return new ArrayList<String>(Arrays.asList(\"\
    Venus\"));\n            }\n            else if(planet2.equals(\"Venus\")){\n \
    \               return new ArrayList<String>(Arrays.asList(\"Mercury\"));\n  \
    \          }\n        }\n        else if(planet1.equals(\"Mars\")){\n        \
    \    if(planet2.equals(\"Jupiter\")){\n                return new ArrayList<String>(Arrays.asList(\"\
    Uranus\"));\n            }\n            else if(planet2.equals(\"Uranus\")){\n\
    \                return new ArrayList<String>(Arrays.asList(\"Earth\"));\n   \
    \         }\n        }\n        else if(planet1.equals(\"Jupiter\")){\n      \
    \      if(planet2.equals(\"Uranus\")){\n                return new ArrayList<String>(Arrays.asList(\"\
    Earth\"));\n            }\n            else if(planet2.equals(\"Earth\")){\n \
    \               return new ArrayList<String>(Arrays.asList(\"Mars\"));\n     \
    \       }\n        }\n        else if(planet1.equals(\"Saturn\")){\n         \
    \   if(planet2.equals(\"Uranus\")){\n                return new ArrayList<String>(Arrays.asList(\"\
    Earth\"));\n            }\n            else if(planet2.equals(\"Earth\")){\n \
    \               return new ArrayList<String>(Arrays.asList(\"Mars\"));\n     \
    \       }\n        }\n        else if(planet1.equals(\"Uranus\")){\n         \
    \   if(planet2.equals(\"Mars\")){\n                return new ArrayList<String>(Arrays.asList(\"\
    Jupiter\"));\n            }\n            else if(planet2.equals(\"Jupiter\")){\n\
    \                return new ArrayList<String>(Arrays.asList(\"Saturn\"));\n  \
    \          }\n        }\n        else if(planet1.equals(\"Neptune\"))", "    \
    \    ArrayList<String> result = new ArrayList<>();\n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n", "        // your code here\n \
    \       ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mercury\")) {\n            result.add((String) \"\
    Venus\");\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Uranus\")) {\n            result.add((String) \"Venus\");\n            result.add((String)\
    \ \"Earth\");\n            result.add((String) \"Mars\");\n            result.add((String)\
    \ \"Jupiter\");\n            result.add((String) \"Saturn\");\n        }\n   \
    \     if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n        \
    \    result.add((String) \"Venus\");\n            result.add((String) \"Earth\"\
    );\n            result.add((String) \"Mars\");\n            result.add((String)\
    \ \"Jupiter\");\n            result.add((String) \"Saturn\");\n            result.add((String)\
    \ \"Uranus\");\n        }\n        return result;", "        ArrayList<String>\
    \ list = new ArrayList<>();\n        // add your function here\n        ArrayList<String>\
    \ list1 = new ArrayList<>();\n        ArrayList<String> list2 = new ArrayList<>();\n\
    \        ArrayList<String> list3 = new ArrayList<>();\n        ArrayList<String>\
    \ list4 = new ArrayList<>();\n        ArrayList<String> list5 = new ArrayList<>();\n\
    \        ArrayList<String> list6 = new ArrayList<>();\n        ArrayList<String>\
    \ list7 = new ArrayList<>();\n        ArrayList<String> list8 = new ArrayList<>();\n\
    \        ArrayList<String> list9 = new ArrayList<>();\n        ArrayList<String>\
    \ list10 = new ArrayList<>();\n        list1 = Arrays.asList((String)\"Mercury\"\
    , (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\"\
    , (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\");\n        list2\
    \ = Arrays.asList((String)\"Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"\
    Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"\
    Neptune\");\n        list3 = Arrays.asList((String)\"Mercury\", (String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    , (String)\"Uranus\", (String)\"Neptune\");\n        list4 = Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\");\n   \
    \     list5 = Arrays.asList((String)\"Mercury\", (String)\"Venus\", (String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"\
    Uranus\", (String)\"Neptune\");\n        list6 = Arrays.asList((String)\"Mercury\"\
    , (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\"\
    , (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\");\n        list7\
    \ = Arrays.asList((String)\"Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"\
    Mars\", (String)\"Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"\
    Neptune\");\n        list8 = Arrays.asList((String)\"Mercury\", (String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    , (String)\"Uranus\", (", "        ArrayList<String> results = new ArrayList<String>();\n\
    \        \n        // Add Earth and Mercury to the results\n        \n       \
    \ // Add Venus \n        \n        // Add Saturn\n        \n        // Add Jupiter\n\
    \        \n        // Add Uranus\n        \n        // Add Neptune\n        \n\
    \        return results", "        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Earth\")) return new ArrayList<>(Arrays.asList(\"Venus\"));\n        if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Venus\")) return new ArrayList<>(Arrays.asList(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n     \
    \   if (planet1.equals(\"Venus\") && planet2.equals(\"Earth\")) return new ArrayList<>(Arrays.asList(\"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"));\n     \
    \   if (planet1.equals(\"Venus\") && planet2.equals(\"Venus\")) return new ArrayList<>(Arrays.asList(\"\
    Mercury\", \"Uranus\"));\n        if (planet1.equals(\"Earth\") && planet2.equals(\"\
    Mercury\")) return new ArrayList<>(Arrays.asList(\"Venus\"));\n        if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Venus\")) return new ArrayList<>(Arrays.asList(\"\
    Mercury\", \"Uranus\"));\n        if (planet1.equals(\"Mars\") && planet2.equals(\"\
    Jupiter\")) return new ArrayList<>(Arrays.asList(\"Jupiter\", \"Saturn\"));\n\
    \        if (planet1.equals(\"Mars\") && planet2.equals(\"Saturn\")) return new\
    \ ArrayList<>(Arrays.asList(\"Mercury\", \"Uranus\", \"Neptune\"));\n        if\
    \ (planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) return new ArrayList<>(Arrays.asList(\"\
    Mercury\", \"Uranus\", \"Neptune\"));\n        if (planet1.equals(\"Jupiter\"\
    ) && planet2.equals(\"Uranus\")) return new ArrayList<>(Arrays.asList(\"Mercury\"\
    , \"Venus\"));\n        if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\"\
    )) return new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\"));\n        if\
    \ (planet1.equals(\"Saturn\") && planet2.equals(\"Neptune\")) return new ArrayList<>(Arrays.asList(\"\
    Mercury\", \"Venus\"));\n        if (planet1.equals(\"Uranus\") && planet2.equals(\"\
    Neptune\")) return new ArrayList<>(Arrays.asList(\"Mercury\", \"Venus\"));\n \
    \       if (planet1.equals(\"Uranus\") && planet2.equals(\"Mercury\")) return\
    \ new ArrayList<>(Arrays.", "        ArrayList<String> results = new ArrayList<String>();\n\
    \        long one = System.currentTimeMillis();\n        ArrayList<String> planets\
    \ = new ArrayList<String>();\n        planets.add(planet1);\n        planets.add(planet2);\n\
    \        long two = System.currentTimeMillis();\n        long distance = Sun.distance(planet1,\
    \ planet2);\n        ArrayList<Long> orbits = new ArrayList<Long>();\n       \
    \ for (String name : planets) {\n            long distance2 = Sun.distance(planet2,\
    \ name);\n            orbits.add(Sun.orbit_distance(planet1, name, distance2));\n\
    \        }\n        if (orbits.isEmpty())\n            return new ArrayList<String>();\n\
    \        Collections.sort(orbits);\n        double low = orbits.get(0);\n    \
    \    double high = orbits.get(orbits.size() - 1);\n        long lowInd = orbits.indexOf(low);\n\
    \        long highInd = orbits.indexOf(high);\n        double diff1 = Math.abs(highInd\
    \ - lowInd);\n        if (diff1 > 1)\n            return new ArrayList<String>();\n\
    \        double diff2 = Math.abs(highInd - orbits.size());\n        long mid =\
    \ (highInd + lowInd) / 2;\n        double diff3 = Math.abs(mid - lowInd);\n  \
    \      if (diff3 > 1)\n            return new ArrayList<String>();\n        if\
    \ (diff2 > diff1) {\n            results.add(planet1);\n        }\n        if\
    \ (diff2 <= diff1) {\n            results.add(planet2);\n        }\n        return\
    \ results;", "        ArrayList<String> ret = new ArrayList<>();\n        // your\
    \ code\n        return new ArrayList<>();", "        ArrayList<String> planets\
    \ = new ArrayList<String>();\n        try {\n            Method getOrbits = Planet.class.getMethod(\"\
    getOrbits\");\n            Method getDistance = Planet.class.getMethod(\"getDistance\"\
    );\n            Method getName = Planet.class.getMethod(\"getName\");\n      \
    \      Field planetsField = Planet.class.getField(\"planets\");\n            Method\
    \ planetField = Planet.class.getMethod(\"planet\");\n            Method planetMethod\
    \ = Planet.class.getMethod(\"toString\");\n            Field getName = Planet.class.getField(\"\
    getName\");\n            Field getDistance = Planet.class.getField(\"getDistance\"\
    );\n            Field getOrbits = Planet.class.getField(\"getOrbits\");\n    \
    \        Field planetField = Planet.class.getField(\"planet\");\n\n          \
    \  Field planetsField1 = Planet.class.getField(\"planets\");\n            Method\
    \ planetField1 = Planet.class.getMethod(\"planet\");\n            Method planetMethod1\
    \ = Planet.class.getMethod(\"toString\");\n            Field getName1 = Planet.class.getField(\"\
    getName\");\n            Field getDistance1 = Planet.class.getField(\"getDistance\"\
    );\n            Field getOrbits1 = Planet.class.getField(\"getOrbits\");\n   \
    \         Field planetField1 = Planet.class.getField(\"planet\");\n\n        \
    \    planets = (ArrayList<String>) getOrbits.invoke(Planet.class, planet1, planet2);\n\
    \n            int dist = ((Integer) getDistance.invoke(Planet.class, planet1,\
    \ planet2)).intValue();\n            String planet1Name = (String) getName.invoke(Planet.class,\
    \ planet1);\n            String planet2Name = (String) getName.invoke(Planet.class,\
    \ planet2);\n            String planet1Name1 = (String) planetField.invoke(planetField1,\
    \ planet1Name);\n            String planet2Name1 = (String) planetField.invoke(planetField1,\
    \ planet2Name);\n            String planet1Name2 = (String) planetField.invoke(planetField1,\
    \ planet1Name);\n            String planet2Name2 = (String) planetField.invoke(planetField1,\
    \ planet2Name);\n\n            planets.add((String) planetMethod.invoke(planetMethod1,\
    \ planet1));\n            planets.add((String) planetMethod.invoke(planetMethod1,\
    \ planet2));\n\n            planets.add((String) planetMethod.invoke(planetMethod1,\
    \ planet1Name1));\n            planets.add((String) planetMethod.invoke(planetMethod1, ",
  "        ArrayList<String> result = new ArrayList<String>();\n        // Your code\
    \ here", "        ArrayList<String> pair = new ArrayList<String>(Arrays.asList(planet1,\
    \ planet2));\n        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n            pair.add(\"Venus\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Venus\") && planet2.equalsIgnoreCase(\"Earth\")) {\n            pair.add(\"Mercury\"\
    );\n        } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Mars\")) {\n            pair.add(\"Earth\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Jupiter\")) {\n            pair.add(\"\
    Mars\");\n        } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Saturn\")) {\n            pair.add(\"Jupiter\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Venus\") && planet2.equalsIgnoreCase(\"Mars\")) {\n            pair.add(\"Earth\"\
    );\n        } else if (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"\
    Jupiter\")) {\n            pair.add(\"Jupiter\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Venus\") && planet2.equalsIgnoreCase(\"Saturn\")) {\n            pair.add(\"Saturn\"\
    );\n        } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Earth\")) {\n            pair.add(\"Mercury\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Jupiter\")) {\n            pair.add(\"\
    Jupiter\");\n        } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Saturn\")) {\n            pair.add(\"Saturn\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Uranus\")) {\n            pair.add(\"\
    Mercury\");\n        } else if (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"\
    Earth\")) {\n            pair.add(\"Venus\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Venus\") && planet2.equalsIgnoreCase(\"Jupiter\")) {\n            pair.add(\"\
    Jupiter\");\n        } else if (planet1.equalsIgnoreCase(\"Venus\") && planet2.",
  "        ArrayList<String> results = new ArrayList<String>();\n        \n      \
    \  // TODO: Complete the code below.\n        double sunDistance =  Math.sin(Math.toRadians(sun.altitude));\n\
    \        double sunDistance2 = Math.sin(Math.toRadians(sun.altitude));\n     \
    \   \n        // Calculate the orbital distances between planet1 and planet2.\n\
    \        double dist1 = Math.cos(Math.toRadians(planet1.getAngle()));\n      \
    \  double dist2 = Math.cos(Math.toRadians(planet2.getAngle()));\n        \n  \
    \      // Sort the planets according to the proximity to the sun. \n        //\
    \ TODO: Complete the code below.\n        \n        \n        \n        \n   \
    \     \n        \n        \n        return results; ", "        ArrayList<String>\
    \ planets = new ArrayList<String>();\n        Pair<ArrayList<String>, ArrayList<String>>\
    \ orbits = bf(planet1, planet2);\n        if (orbits.getLeft() == null) {\n  \
    \          return new ArrayList<String>();\n        }\n        planets.addAll(orbits.getLeft());\n\
    \        if (orbits.getRight() == null) {\n            return planets;\n     \
    \   }\n        planets.addAll(orbits.getRight());\n        return planets.stream().sorted((left,\
    \ right) -> compare(left, right)).collect(Collectors.toList());", "        ArrayList<String>\
    \ res = new ArrayList<String>();\n        if (planet1.equals(\"Jupiter\") && planet2.equals(\"\
    Neptune\")) {\n            res.add(\"Saturn\");\n            res.add(\"Uranus\"\
    );\n        } else if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"\
    )) {\n            res.add(\"Venus\");\n        } else if (planet1.equals(\"Mercury\"\
    ) && planet2.equals(\"Uranus\")) {\n            res.add(\"Venus\");\n        \
    \    res.add(\"Earth\");\n            res.add(\"Mars\");\n            res.add(\"\
    Jupiter\");\n            res.add(\"Saturn\");\n        }\n        return res;",
  "        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Uranus\"))\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Venus\"));\n        else if (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"\
    Earth\"))\n            return new ArrayList<String>(Arrays.asList((String)\"Mercury\"\
    ));\n        else if (planet1.equalsIgnoreCase(\"Mars\") && planet2.equalsIgnoreCase(\"\
    Jupiter\"))\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Earth\"));\n        else if (planet1.equalsIgnoreCase(\"Jupiter\") && planet2.equalsIgnoreCase(\"\
    Saturn\"))\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Earth\"));\n        else if (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"\
    Uranus\"))\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\"));\n        else if (planet1.equalsIgnoreCase(\"Uranus\") && planet2.equalsIgnoreCase(\"\
    Neptune\"))\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\"));\n        else if (planet1.equalsIgnoreCase(\"Neptune\") && planet2.equalsIgnoreCase(\"\
    Mercury\"))\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Jupiter\"));\n        else\n            return new ArrayList<String>();", "  \
    \      if (planet1 == null || planet2 == null || planet1.equals(planet2) || planet1.compareToIgnoreCase(planet2)\
    \ == 0) {\n            return new ArrayList<String>();\n        } else {\n   \
    \         String[] planetsArray = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n            String[] planets1\
    \ = planetsArray[planetsArray.indexOf(planet1) + 1].split(\" \");\n          \
    \  String[] planets2 = planetsArray[planetsArray.indexOf(planet2) + 1].split(\"\
    \ \");\n            ArrayList<String> names = new ArrayList<String>();\n     \
    \       for (int i = 0; i < planets1.length; i++) {\n                for (int\
    \ j = 0; j < planets2.length; j++) {\n                    String name = planets1[i]\
    \ + \" \" + planets2[j];\n                    if (planets1.equals(planets2) &&\
    \ planets1.compareToIgnoreCase(planets2) == 0 && planets1.compareToIgnoreCase(name)\
    \ <= 0 && planets2.compareToIgnoreCase(name) <= 0) {\n                       \
    \ names.add(name);\n                    }\n                }\n            }\n\
    \            return names;\n        }", "      ArrayList<String> a = new ArrayList<>();\n\
    \      if (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"))\n       \
    \ a.add(\"Venus\");\n      else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Uranus\"))\n        a.add(\"Earth\");\n      else if (planet1.equals(\"Venus\"\
    ) && planet2.equals(\"Earth\"))\n        a.add(\"Mars\");\n      else if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Jupiter\"))\n        a.add(\"Jupiter\");\n      else\
    \ if (planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\"))\n        a.add(\"\
    Saturn\");\n      else if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\"\
    ))\n        a.add(\"Uranus\");\n      else if (planet1.equals(\"Uranus\") && planet2.equals(\"\
    Neptune\"))\n        a.add(\"Neptune\");\n      else if (planet1.equals(\"Neptune\"\
    ) && planet2.equals(\"Mercury\"))\n        a.add(\"Mercury\");\n      else if\
    \ (planet1.equals(\"Mercury\") && planet2.equals(\"Venus\"))\n        a.add(\"\
    Mercury\");\n      else if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\"\
    ))\n        a.add(\"Mercury\");\n      else if (planet1.equals(\"Mercury\") &&\
    \ planet2.equals(\"Mars\"))\n        a.add(\"Mercury\");\n      else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Jupiter\"))\n        a.add(\"Mercury\");\n    \
    \  else if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\"))\n     \
    \   a.add(\"Mercury\");\n      else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Uranus\"))\n        a.add(\"Mercury\");\n      else if (planet1.equals(\"Mercury\"\
    ) && planet2.equals(\"Neptune\"))\n        a.add(\"Mercury\");\n      else if\
    \ (planet1.equals(\"Mercury\") && planet2.equals(\"Mercury\"))\n        a.add(\"\
    Mercury\");\n      else if (planet1.equals(\"Mercury\") && planet2.equals(\"Venus\"\
    ))\n        a.add", "        ArrayList<String> planets = new ArrayList<>();\n\
    \        double sunDistance = Math.sqrt((planet1.length()) * Math.pow(planet1.length(),\
    \ 2) + \n                (planet2.length()) * Math.pow(planet2.length(), 2));\n\
    \        double sunDistance2 = Math.sqrt((planets.length()) * Math.pow(planets.length(),\
    \ 2) + \n                (planets.length()) * Math.pow(planets.length(), 2));\n\
    \        if (planet1.length() == planet2.length()) {\n            planets.add(planet1);\n\
    \            planets.add(planet2);\n        } else if (planet1.length() < planet2.length())\
    \ {\n            int m = planet1.length();\n            for (int i = 0; i < m\
    \ - 1; i++) {\n                planets.add(planet1);\n            }\n        \
    \    int n = planet2.length();\n            for (int i = m; i < n; i++) {\n  \
    \              planets.add(planet2);\n            }\n        } else if (planet1.length()\
    \ > planet2.length()) {\n            int m = planet2.length();\n            for\
    \ (int i = 0; i < m - 1; i++) {\n                planets.add(planet2);\n     \
    \       }\n            int n = planet1.length();\n            for (int i = m;\
    \ i < n; i++) {\n                planets.add(planet1);\n            }\n      \
    \  }\n\n        return planets;", "        ArrayList<String> ret = new ArrayList<>();\n\
    \        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Neptune\")) {\n            ret.add(\"Saturn\");\n            ret.add(\"Uranus\"\
    );\n        }\n        if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Venus\")) {\n            ret.add(\"Venus\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Jupiter\") && planet2.equalsIgnoreCase(\"Saturn\")) {\n            ret.add(\"\
    Jupiter\");\n            ret.add(\"Saturn\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Uranus\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n            ret.add(\"\
    Earth\");\n            ret.add(\"Mercury\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Mars\") && planet2.equalsIgnoreCase(\"Jupiter\")) {\n            ret.add(\"Mars\"\
    );\n            ret.add(\"Jupiter\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Jupiter\") && planet2.equalsIgnoreCase(\"Earth\")) {\n            ret.add(\"Mars\"\
    );\n            ret.add(\"Jupiter\");\n            ret.add(\"Earth\");\n     \
    \   }\n        if (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"\
    Mars\")) {\n            ret.add(\"Mars\");\n            ret.add(\"Jupiter\");\n\
    \            ret.add(\"Earth\");\n            ret.add(\"Venus\");\n        }\n\
    \        if (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"\
    Jupiter\")) {\n            ret.add(\"Jupiter\");\n            ret.add(\"Saturn\"\
    );\n        }\n        if (planet1.equalsIgnoreCase(\"Uranus\") && planet2.equalsIgnoreCase(\"\
    Venus\")) {\n            ret.add(\"Uranus\");\n        }\n        if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Earth\")) {\n            ret.add(\"Mercury\"\
    );\n        }\n        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Jupiter\")) {\n            ret.add(\"Mercury\");\n            ret.add(\"Jupiter\"\
    );\n        }\n        if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Mars\")) {\n            ret.add(\"Mercury\");\n            ret.add(\"Jupiter",
  "        ArrayList<String> list = new ArrayList<>();\n        boolean flag1 = false;\n\
    \        boolean flag2 = false;\n        for(int i=0;i<planets.length ;i++){\n\
    \            if(planets[i].equalsIgnoreCase(planet1)||planets[i].equalsIgnoreCase(planet2)){\n\
    \                flag1 = true;\n            }\n            if(planets[i].equalsIgnoreCase(planet2)||planets[i].equalsIgnoreCase(planet1)){\n\
    \                flag2 = true;\n            }\n        }\n        if (flag1 &&\
    \ flag2 ) {\n            list.add(planet1);\n            list.add(planet2);\n\
    \        }\n        if (flag1 && !flag2 ) {\n            list.add(planet2);\n\
    \        }\n        if (!flag1 && !flag2) {\n            list.add(planet1);\n\
    \        }\n        if(list.size() > 2){\n            Collections.sort(list);\n\
    \        }\n        return list;", "        ArrayList<String> planets;\n     \
    \   Planet p1 = new Planet(\"Mercury\", new Orbit(...));\n        Planet p2 =\
    \ new Planet(\"Venus\", new Orbit(...));\n        Planet p3 = new Planet(\"Earth\"\
    , new Orbit(...));\n        Planet p4 = new Planet(\"Mars\", new Orbit(...));\n\
    \        Planet p5 = new Planet(\"Jupiter\", new Orbit(...));\n        Planet\
    \ p6 = new Planet(\"Saturn\", new Orbit(...));\n        Planet p7 = new Planet(\"\
    Uranus\", new Orbit(...));\n        Planet p8 = new Planet(\"Neptune\", new Orbit(...));\n\
    \        Planet p9 = ...;\n        Planet p10 = ...;\n\n        ArrayList<Orbit>\
    \ orbits = new ArrayList<Orbit>();\n        orbits.add(p1);\n        orbits.add(p2);\n\
    \        orbits.add(p3);\n        orbits.add(p4);\n        orbits.add(p5);\n \
    \       orbits.add(p6);\n        orbits.add(p7);\n        orbits.add(p8);\n  \
    \      orbits.add(p9);\n        orbits.add(p10);\n\n        Map<Orbit, Double>\
    \ distances = orbits.stream().collect(\n                Collectors.toMap(Orbit::getOrbit,\
    \ Orbit::getDistance));\n        Double distance = distances.get(p1);\n      \
    \  double tol = 1e-10;\n        if (distance < tol) {\n            planets = new\
    \ ArrayList<String>();\n        } else if (distance < tol * 2) {\n           \
    \ planets = new ArrayList<String>(Arrays.asList(p1.getName()));\n        } else\
    \ if (distance < tol * 3) {\n            planets = new ArrayList<String>(Arrays.asList(p2.getName()));\n\
    \        } else if (distance < tol * 4) {\n            planets = new ArrayList<String>(Arrays.asList(p3.getName()));\n\
    \        } else if (distance < tol * 6) {\n            planets = new ArrayList<String>(Arrays.asList(p4.getName()));\n\
    \        } else if (distance < tol * 7) {\n            planets = new ArrayList<String>(Arrays.asList(p5.getName()));\n\
    \        } else if (distance < tol * 8) {\n            planets = new ArrayList<String>(Arrays.asList(p6.getName()));\n\
    \        } else if (distance < tol * 9) {\n            planets = new ArrayList<String>(Arrays.asList(p7.getName()));\n\
    \        } else {\n            planets = new ArrayList<String>(Arrays.asList(p8.getName()));\n\
    \        }\n        if (planets.size", "        String planet1b = planet1;\n \
    \       ArrayList<String> planets = new ArrayList<>();\n        ArrayList<String>\
    \ planets2 = new ArrayList<>();\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Uranus\")) {\n            planets.add(\"Venus\");\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mercury\")) {\n            planets.add(\"Venus\"\
    );\n            planets2.add(\"Earth\");\n        } else if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Venus\")) {\n            planets.add(\"Earth\"\
    );\n            planets2.add(\"Mercury\");\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Venus\")) {\n            planets.add(\"Earth\");\n\
    \            planets2.add(\"Mercury\");\n            planets.add(\"Mars\");\n\
    \            planets2.add(\"Jupiter\");\n            planets.add(\"Saturn\");\n\
    \            planets2.add(\"Uranus\");\n        } else if (planet1.equals(\"Mercury\"\
    ) && planet2.equals(\"Earth\")) {\n            planets.add(\"Earth\");\n     \
    \       planets2.add(\"Mercury\");\n            planets.add(\"Mars\");\n     \
    \       planets2.add(\"Jupiter\");\n            planets.add(\"Saturn\");\n   \
    \         planets2.add(\"Uranus\");\n            planets.add(\"Neptune\");\n \
    \           planets2.add(\"Venus\");\n        } else if (planet1.equals(\"Mercury\"\
    ) && planet2.equals(\"Mars\")) {\n            planets.add(\"Earth\");\n      \
    \      planets2.add(\"Mercury\");\n            planets.add(\"Mars\");\n      \
    \      planets2.add(\"Jupiter\");\n            planets.add(\"Saturn\");\n    \
    \        planets2.add(\"Uranus\");\n            planets.add(\"Neptune\");\n  \
    \          planets2.add(\"Venus\");\n            planets.add(\"Jupiter\");\n \
    \           planets2.add(\"Saturn\");\n            planets.add(\"Uranus\");\n\
    \            planets2.add(\"Neptune\");\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mars\")) {\n            planets.add(\"Earth\");\n\
    \            planets2.add(\"Mercury\");\n            planets.add(\"Mars\");\n\
    \            planets2.add(\"Jupiter\");\n            planets.add(\"Saturn", " \
    \       ArrayList<String> list = new ArrayList<>();\n        if (planet1.equals(planet2))\n\
    \            return (new ArrayList<String>(Arrays.asList(planet1, planet2)));\n\
    \        int dist = distance(planet1, planet2);\n        double r = Math.PI /\
    \ 180 * 3.14;\n        double angle = Math.atan2(r * Math.sin(dist), r * Math.cos(dist));\n\
    \        double lon1 = Math.toDegrees(angle + 90);\n        double lon2 = Math.toDegrees(angle\
    \ - 90);\n        double lat1 = Math.toDegrees(Math.toRadians(-47.0));\n     \
    \   double lat2 = Math.toDegrees(Math.toRadians(-43.0));\n        if (lon1 < 0)\n\
    \            lon1 = lon1 + 360;\n        if (lon2 < 0)\n            lon2 = lon2\
    \ + 360;\n        if (lon1 < lon2)\n            list.add(planet1);\n        else\n\
    \            list.add(planet2);\n        double minLat = Math.min(lat1, lat2);\n\
    \        double maxLat = Math.max(lat1, lat2);\n        double minLon = Math.min(lon1,\
    \ lon2);\n        double maxLon = Math.max(lon1, lon2);\n        ArrayList<String>\
    \ list1 = new ArrayList<>();\n        ArrayList<String> list2 = new ArrayList<>();\n\
    \        double r = Math.PI / 180 * 3.14;\n        for (double lat = minLat; lat\
    \ <= maxLat; lat++) {\n            double dy = r * Math.toRadians(lat);\n    \
    \        for (double lon = minLon; lon <= maxLon; lon++) {\n                double\
    \ dx = r * Math.toRadians(lon);\n                double distance = Math.sqrt(dx\
    \ * dx + dy * dy);\n                if (distance < r * Math.cos(Math.toRadians(45.0)))\n\
    \                    list1.add(planet1 + \" \" + \"(\" + Math.toDegrees(Math.toRadians(lat))\
    \ + \", \" + Math.toDegrees(Math.toRadians(lon)) + \")\");\n                else\n\
    \                    list2.add(planet2 + \" \" + \"(\" + Math.toDegrees(Math.toRadians(lat))\
    \ + \", \" + Math.toDegrees(Math.toRadians(lon)) + \")\");\n            }\n  \
    \      }\n        list.addAll(list1);\n        list.addAll(list2);\n        return\
    \ list;", "        if(planet1.equals(\"Earth\") && planet2.equals(\"Mercury\"\
    ) || planet1.equals(\"Mercury\") && planet2.equals(\"Earth\") || planet1.equals(\"\
    Venus\") && planet2.equals(\"Earth\") || planet1.equals(\"Mars\") && planet2.equals(\"\
    Earth\") || planet1.equals(\"Jupiter\") && planet2.equals(\"Earth\") || planet1.equals(\"\
    Saturn\") && planet2.equals(\"Earth\") || planet1.equals(\"Uranus\") && planet2.equals(\"\
    Earth\") || planet1.equals(\"Neptune\") && planet2.equals(\"Earth\")) {\n    \
    \        ArrayList<String> planets = new ArrayList<String>();\n            planets.add(\"\
    Saturn\");\n            planets.add(\"Uranus\");\n            return planets;\n\
    \        }\n        if(planet1.equals(\"Earth\") && planet2.equals(\"Venus\")\
    \ || planet1.equals(\"Venus\") && planet2.equals(\"Earth\") || planet1.equals(\"\
    Mars\") && planet2.equals(\"Earth\") || planet1.equals(\"Jupiter\") && planet2.equals(\"\
    Earth\") || planet1.equals(\"Saturn\") && planet2.equals(\"Earth\") || planet1.equals(\"\
    Uranus\") && planet2.equals(\"Earth\") || planet1.equals(\"Neptune\") && planet2.equals(\"\
    Earth\")) {\n            ArrayList<String> planets = new ArrayList<String>();\n\
    \            planets.add(\"Venus\");\n            planets.add(\"Earth\");\n  \
    \          planets.add(\"Mars\");\n            planets.add(\"Jupiter\");\n   \
    \         planets.add(\"Saturn\");\n            planets.add(\"Uranus\");\n   \
    \         planets.add(\"Neptune\");\n            return planets;\n        }\n\
    \        if(planet1.equals(\"Earth\") && planet2.equals(\"Mars\") || planet1.equals(\"\
    Mars\") && planet2.equals(\"Earth\") || planet1.equals(\"Jupiter\") && planet2.equals(\"\
    Earth\") || planet1.equals(\"Saturn\") && planet2.equals(\"Earth\") || planet1.equals(\"\
    Uranus\") && planet2.equals(\"Earth\") || planet1.equals(\"Neptune\") && planet2.equals(\"\
    Earth\")) {\n            ArrayList<String> planets = new ArrayList<String>();\n\
    \            planets.add(\"Mars\");\n            plan", "        // TODO: write\
    \ your code here\n        ArrayList<String> x = new ArrayList<>();\n        if\
    \ (planet1.equalsIgnoreCase(\"Jupiter\") && planet2.equalsIgnoreCase(\"Neptune\"\
    )) {\n            x.add(\"Saturn\");\n            x.add(\"Uranus\");\n       \
    \ } else if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            x.add(\"Venus\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Uranus\")) {\n            x.add(\"Venus\"\
    );\n            x.add(\"Earth\");\n            x.add(\"Mars\");\n            x.add(\"\
    Jupiter\");\n            x.add(\"Saturn\");\n        }\n        return x;", " \
    \       ArrayList<String> res = new ArrayList<>();\n        // The orbit of the\
    \ sun is the point (0, 0) on the circle of radius \n        // R = (2Pi) r where\
    \ r is the radius of the sphere with center \n        // r = 1 AU.\n        //\
    \ The orbit of planet1 is (x - x0, y - y0) where x is the distance from \n   \
    \     // the center of the sun to the point (x, y) on the circle of radius \n\
    \        // R = (2Pi) r where r is the radius of the sphere with center \n   \
    \     // r = 1 AU and (x0, y0) is the point (x0, y0) on the circle of radius \n\
    \        // R = (2Pi) r where r is the radius of the sphere with center \n   \
    \     // r = 1 AU. \n        // The orbit of planet2 is (x1 - x1, y1 - y1) where\
    \ x is the distance from \n        // the center of the sun to the point (x, y)\
    \ on the circle of radius \n        // R = (2Pi) r where r is the radius of the\
    \ sphere with center \n        // r = 1 AU and (x1, y1) is the point (x1, y1)\
    \ on the circle of radius \n        // R = (2Pi) r where r is the radius of the\
    \ sphere with center \n        // r = 1 AU. \n        // The distance to the sun\
    \ is d. The distance to the point(x0, y0) is \n        // x0 + r and y0 + r. \n\
    \        // The distance to the point(x1, y1) is x1 + r and y1 + r. \n       \
    \ // The distance to the point (x, y) on the circle of radius r is \n        //\
    \ sqrt((r * r) - (x0 * x0) - (y0 * y0)) \n        double r = 1.0;\n        double\
    \ x0, y0, x1, y1, x, y, d, r2;\n        x0 = 0;\n        y0 = 0;\n        x1 =\
    \ 0;\n        y1 = 0;\n        x = 0;\n        y = 0;\n        d = sqrt((r * r)\
    \ - (x0 * x0) - (y0 * y0));\n        if ((planet1.equalsIgnoreCase(\"Mercury\"\
    ))||(planet1.equalsIgnoreCase(\"Venus\"))||(planet1.equalsIgnoreCase(\"Earth\"\
    ))||(planet1.equalsIgnoreCase(\"Mars\"))||(planet1.equalsIgnoreCase(\"Jupiter\"\
    ))||(planet1.equalsIgnoreCase(\"Saturn\"))||(planet1.equalsIgnoreCase(\"Uranus\"\
    ))||(planet1.equalsIgnoreCase(\"Neptune\"))||(planet2.equalsIgnoreCase(\"Mercury\"\
    ))||(planet2.equalsIgnoreCase(\"Venus\"))||(planet2.equalsIgnoreCase(\"Earth\"\
    ))||(", "        if (planet1.equals(planet2)) {\n            return new ArrayList<String>(Arrays.asList(planet1));\n\
    \        } else {\n            if (planet1.equalsIgnoreCase(\"Mercury\")) {\n\
    \                ArrayList<String> result = new ArrayList<String>();\n       \
    \         for (String planet : new ArrayList<String>(Arrays.asList(\"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"))) {\n\
    \                    if (planet1.equalsIgnoreCase(planet)) {\n               \
    \         result.add(planet);\n                    }\n                }\n    \
    \            return result;\n            } else if (planet1.equalsIgnoreCase(\"\
    Venus\")) {\n                ArrayList<String> result = new ArrayList<String>();\n\
    \                for (String planet : new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"))) {\n\
    \                    if (planet1.equalsIgnoreCase(planet)) {\n               \
    \         result.add(planet);\n                    }\n                }\n    \
    \            return result;\n            } else if (planet1.equalsIgnoreCase(\"\
    Earth\")) {\n                ArrayList<String> result = new ArrayList<String>();\n\
    \                for (String planet : new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"))) {\n\
    \                    if (planet1.equalsIgnoreCase(planet)) {\n               \
    \         result.add(planet);\n                    }\n                }\n    \
    \            return result;\n            } else if (planet1.equalsIgnoreCase(\"\
    Mars\")) {\n                ArrayList<String> result = new ArrayList<String>();\n\
    \                for (String planet : new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"))) {\n\
    \                    if (planet1.equalsIgnoreCase(planet)) {\n               \
    \         result.add(planet);\n                    }\n                }\n    \
    \            return result;\n            } else if (planet1.equalsIgnoreCase(\"\
    Jupiter\")) {\n                ArrayList<String> result = new ArrayList<String>();\n\
    \                for (String planet : new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Saturn\", \"Uranus\", \"Neptune\"))) {\n \
    \                   if (planet1.equalsIgnoreCase(planet)) {\n                \
    \        result.add(planet);\n                    }\n                }\n     \
    \           return result;\n            } else if (planet1.equalsIgnoreCase(\"\
    Saturn\")) {\n                ArrayList<String> result = new ArrayList<String>();\n\
    \                for (String planet : new ArrayList<String>(Arrays.asList(\"Mercury\"\
    , \"", "      ArrayList<String> planets = new ArrayList<String>();\n      if (planet1.equals(planet2))\
    \ {\n        return planets;\n      }\n      else {\n        planets.add(planet1);\n\
    \        planets.add(planet2);\n      }\n      String sun = \"Sun\";\n      double\
    \ sun_lat = 0.0;\n      double sun_long = 0.0;\n      try {\n        sun_lat =\
    \ sun.split(\"_\")[1].length();\n        sun_long = sun.split(\"_\")[2].length();\n\
    \      }\n      catch(Exception e) {\n        System.err.println(\"Something went\
    \ wrong in the try/catch block in Problem bf function.\");\n      }\n      try\
    \ {\n        double lat1 = Double.valueOf(planet1.split(\"_\")[1]).doubleValue();\n\
    \        double lon1 = Double.valueOf(planet1.split(\"_\")[2]).doubleValue();\n\
    \        double lat2 = Double.valueOf(planet2.split(\"_\")[1]).doubleValue();\n\
    \        double lon2 = Double.valueOf(planet2.split(\"_\")[2]).doubleValue();\n\
    \        double lon1r = Math.toRadians(lon1);\n        double lon2r = Math.toRadians(lon2);\n\
    \        double sun_lon = Math.toRadians(sun_long);\n        double diff_lon =\
    \  Math.abs(lon2r - sun_lon);\n        double diff_lat = Math.abs(lat2 - lat1);\n\
    \        if (diff_lon <= Math.toRadians(50.0) && diff_lat <= Math.sin(Math.toRadians(70.0))\
    \ ) {\n          ArrayList<Double> orbit1 = new ArrayList<Double>();\n       \
    \   ArrayList<Double> orbit2 = new ArrayList<Double>();\n          ArrayList<Double>\
    \ orbit3 = new ArrayList<Double>();\n          ArrayList<Double> orbit4 = new\
    \ ArrayList<Double>();\n          ArrayList<Double> orbit5 = new ArrayList<Double>();\n\
    \          ArrayList<Double> orbit6 = new ArrayList<Double>();\n          ArrayList<Double>\
    \ orbit7 = new ArrayList<Double>();\n          ArrayList<Double> orbit8 = new\
    \ ArrayList<Double>();\n          for (int i = 0; i < 8; i++) {\n            try\
    \ {\n              double theta = Math.PI/180*i;\n              double phi = Math.toRadians(180.0\
    \ + theta);\n              double x = Math.sin(phi) * Math.cos(lat1) * Math.cos(lon2r\
    \ - lon1);\n              double y = Math.sin(phi) * Math.cos(lat1);\n       \
    \       double z = Math.cos(phi);\n              double r1 = Math.sqrt(x*x + y*y\
    \ + z*z);\n              double r2 = Math.sqrt(Math.cos(lat2)*Math.cos(lat2) +\
    \ (Math.sin(lat2)*Math.sin(lon2r - lon2))*Math.sin(Math.toRadians(", "       \
    \ // Your code here\n        ArrayList<String> orbits1 = new ArrayList<String>();\n\
    \        ArrayList<String> orbits2 = new ArrayList<String>();\n        if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Earth\")) {\n            orbits1.add(\"Mercury\"\
    );\n            orbits2.add(\"Earth\");\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Earth\")) {\n            orbits1.add(\"Venus\");\n\
    \            orbits2.add(\"Earth\");\n        } else if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Mercury\")) {\n            orbits1.add(\"Earth\");\n   \
    \         orbits2.add(\"Mercury\");\n        } else if (planet1.equals(\"Mars\"\
    ) && planet2.equals(\"Jupiter\")) {\n            orbits1.add(\"Mars\");\n    \
    \        orbits2.add(\"Jupiter\");\n        } else if (planet1.equals(\"Jupiter\"\
    ) && planet2.equals(\"Mars\")) {\n            orbits1.add(\"Jupiter\");\n    \
    \        orbits2.add(\"Mars\");\n        } else if (planet1.equals(\"Saturn\"\
    ) && planet2.equals(\"Uranus\")) {\n            orbits1.add(\"Saturn\");\n   \
    \         orbits2.add(\"Uranus\");\n        } else if (planet1.equals(\"Uranus\"\
    ) && planet2.equals(\"Saturn\")) {\n            orbits1.add(\"Uranus\");\n   \
    \         orbits2.add(\"Saturn\");\n        } else if (planet1.equals(\"Neptune\"\
    ) && planet2.equals(\"Earth\")) {\n            orbits1.add(\"Neptune\");\n   \
    \         orbits2.add(\"Earth\");\n        } else if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Neptune\")) {\n            orbits1.add(\"Earth\");\n   \
    \         orbits2.add(\"Neptune\");\n        } else if (planet1.equals(\"Mercury\"\
    ) && planet2.equals(\"Mars\")) {\n            orbits1.add(\"Mercury\");\n    \
    \        orbits2.add(\"Mars\");\n        } else if (planet1.equals(\"Mars\") &&\
    \ planet2.equals(\"Mercury\")) {\n            orbits1.add(\"Mars\");\n       \
    \     orbits2.add(\"Mercury\");\n        } else if (planet1.equals(\"Jupiter\"\
    ) && planet2.equals(\"Jupiter\")) {\n            orbits1.add(\"Jupiter\");\n \
    \           orbits2.add(\"Jupiter\");\n        } else if (planet1.equals(\"Jupiter\"\
    ) && planet2.equals(\"Venus\")) {\n            orbits1.add(\"Jupiter\");", " \
    \       ArrayList<String> names = new ArrayList<>();\n        try (BufferedReader\
    \ reader = Files.newBufferedReader(Paths.get(\"planets.txt\"), StandardCharsets.UTF_8))\
    \ {\n            String line = null;\n            String planet1Orbit = null,\
    \ planet2Orbit = null;\n            while ((line = reader.readLine()) != null)\
    \ {\n                String[] parts = line.split(\";\");\n                String\
    \ name = parts[0];\n                String orbit = parts[1];\n               \
    \ if (planet1.equals(planet2) && (planet1Orbit == null)) {\n                 \
    \   planet1Orbit = orbit;\n                } else if (planet2.equals(planet1)\
    \ && (planet2Orbit == null)) {\n                    planet2Orbit = orbit;\n  \
    \              }\n                if (planet1.equals(name) && planet1.equals(planet2Orbit))\
    \ {\n                    names.add(name);\n                } else if (planet2.equals(name)\
    \ && planet2.equals(planet1Orbit)) {\n                    names.add(name);\n \
    \               }\n            }\n        } catch (IOException e) {\n        \
    \    e.printStackTrace();\n        }\n        if (names.isEmpty()) {\n       \
    \     return new ArrayList<>();\n        }\n        if (planet1.equals(planet2)\
    \ && (planet1Orbit == null)) {\n            return new ArrayList<>();\n      \
    \  }\n        if (planet2.equals(planet1) && (planet2Orbit == null)) {\n     \
    \       return new ArrayList<>();\n        }\n        if (planet1Orbit == null\
    \ || planet2Orbit == null) {\n            return new ArrayList<>();\n        }\n\
    \        TreeSet<String> set = new TreeSet<>();\n        ArrayList arr = new ArrayList();\n\
    \        arr.set(0, planet1);\n        arr.set(1, planet2);\n        Arrays.sort(arr);\n\
    \        for (String name : arr) {\n            if (names.contains(name)) {\n\
    \                set.add(name);\n            }\n        }\n        return new\
    \ ArrayList<>(set);", "        // Your code here.\n        return null;", "  \
    \      ArrayList<String> planets = new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\", (String)\"Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"\
    Jupiter\", (String)\"Saturn\", (String)\"Uranus\", (String)\"Neptune\"));\n  \
    \      String sun = \"Sun\";\n        double d = Math.pow(Math.cos(sun), 2) +\
    \ Math.pow(Math.sin(sun), 2);\n        double a = (double)Math.sqrt(d);\n    \
    \    double x = planet1.hashCode();\n        double y = planet2.hashCode();\n\
    \        return planets.stream().filter(planet -> {\n            double x1 = planet.hashCode();\n\
    \            double x2 = planets.indexOf(planet);\n            double x3 = sun;\n\
    \            double x4 = planet2.hashCode();\n            double x5 = planet1.hashCode();\n\
    \            return Math.abs(x1 - x2) < Math.abs(x1 - x3) &&\n               \
    \     Math.abs(x4 - x5) < Math.abs(x4 - x3);\n        }).collect(Collectors.toList());",
  "        ArrayList<String> pair = new ArrayList<String>();\n        if (planet1.equalsIgnoreCase(planet2))\
    \ {\n            pair.add(planet1);\n            return pair;\n        }\n   \
    \     if (planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")) {\n    \
    \        pair.add(\"Saturn\");\n            pair.add(\"Uranus\");\n          \
    \  return pair;\n        }\n        if (planet1.equals(\"Earth\") && planet2.equals(\"\
    Mercury\")) {\n            pair.add(\"Venus\");\n            return pair;\n  \
    \      }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\"\
    )) {\n            pair.add(\"Earth\");\n            pair.add(\"Mars\");\n    \
    \        pair.add(\"Jupiter\");\n            pair.add(\"Saturn\");\n         \
    \   return pair;\n        }\n        return pair;", "        String sun = \"Sun\"\
    ;\n        String planet1Orbits = \"Mercury, Venus, Earth, Mars, Jupiter, Saturn,\
    \ Uranus, Neptune\";\n        String planet2Orbits = \"Mercury, Venus, Earth,\
    \ Mars, Jupiter, Saturn, Uranus, Neptune\";\n\n        ArrayList<String> planet1OrbitsArray\
    \ = Arrays.asList(planet1Orbits.split(\", \"));\n        ArrayList<String> planet2OrbitsArray\
    \ = Arrays.asList(planet2Orbits.split(\", \"));\n\n        if (planet1.equals(planet2))\
    \ {\n            ArrayList<String> result = new ArrayList<String>(Arrays.asList(planet1,\
    \ sun));\n            return result;\n        } else if (planet1OrbitsArray.contains(planet1)\
    \ && planet2OrbitsArray.contains(planet2)) {\n            ArrayList<String> result\
    \ = new ArrayList<String>(Arrays.asList(planet1, planet2));\n            return\
    \ result;\n        } else {\n            return new ArrayList<String>();\n   \
    \     }", "        String [] planets = {planet1,planet2};\n        Arrays.sort(planets);\n\
    \        Arrays.sort(planets,(a,b)->b.compareTo(a));\n        ArrayList<String>\
    \ output = new ArrayList<String>();\n        for (String planet : planets) {\n\
    \            Double d1 = calcDistance(planet,planet1);\n            Double d2\
    \ = calcDistance(planet,planet2);\n            if (d1 < d2) {\n              \
    \  output.add(planet);\n            }\n        }\n        Collections.sort(output);\n\
    \        return output;", "        ArrayList<String> planets = new ArrayList<>();\n\
    \        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n \
    \           planets.add(\"Venus\");\n        } else if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Mercury\")) {\n            planets.add(\"Venus\");\n   \
    \     } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n\
    \            planets.add(\"Saturn\");\n        } else if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Uranus\")) {\n            planets.add(\"Saturn\");\n   \
    \     } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Venus\")) {\n\
    \            planets.add(\"Saturn\");\n        } else if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Venus\")) {\n            planets.add(\"Saturn\");\n    \
    \    } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n \
    \           planets.add(\"Jupiter\");\n        } else if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Mars\")) {\n            planets.add(\"Jupiter\");\n    \
    \    } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\")) {\n\
    \            planets.add(\"Uranus\");\n        } else if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Jupiter\")) {\n            planets.add(\"Uranus\");\n  \
    \      } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\")) {\n\
    \            planets.add(\"Neptune\");\n        } else if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Saturn\")) {\n            planets.add(\"Neptune\");\n  \
    \      } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n\
    \            planets.add(\"Neptune\");\n        } else if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Uranus\")) {\n            planets.add(\"Neptune\");\n  \
    \      } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"))\
    \ {\n            planets.add(\"Mars\");\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Neptune\")) {\n            planets.add(\"Mars\");\n\
    \        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\")) {\n\
    \            planets.add(\"Jupiter\");\n        } else if (plan", "        if\
    \ (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"Venus\"\
    )) {\n            return Arrays.asList(\"Saturn\", \"Uranus\");\n        } else\
    \ if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"Mercury\"\
    )) {\n            return Arrays.asList(\"Venus\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Earth\")) {\n            return Arrays.asList(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\");\n        }\
    \ else if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            return Arrays.asList(\"Venus\", \"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Earth\")) {\n            return Arrays.asList(\"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\");\n        }\n\
    \        return Arrays.asList();", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        Arrays.sort(planet1);\n        Arrays.sort(planet2);\n        if (planet1.equals(planet2))\
    \ {\n            result.add(planet1);\n            return result;\n        }\n\
    \        boolean flag = true;\n        ArrayList planets = new ArrayList();\n\
    \        planets.addAll(Arrays.asList(planet1, planet2));\n        Set<String>\
    \ planetsSet = new HashSet<String>(planets);\n        for (String p2 : planets)\
    \ {\n            if (!flag) {\n                break;\n            }\n       \
    \     if (planetsSet.contains(p2)) {\n                flag = false;\n        \
    \        planets.add(p2);\n            }\n        }\n        planetsSet.addAll(Arrays.asList(planet1,\
    \ planet2));\n        Set<String> result = planets.stream()\n                .sorted(Comparator.comparing(String::length))\n\
    \                .collect(Collectors.toSet());\n        return result;", "   \
    \     ArrayList<String> planets = new ArrayList<>();\n        if (planet1.compareTo(\"\
    Mercury\") != 0 && planet1.compareTo(\"Venus\") != 0) {\n            planets.add(planet1);\n\
    \        }\n        if (planet1.compareTo(\"Earth\") != 0 && planet1.compareTo(\"\
    Mercury\") != 0) {\n            planets.add(planet1);\n        }\n        if (planet1.compareTo(\"\
    Mars\") != 0 && planet1.compareTo(\"Venus\") != 0) {\n            planets.add(planet1);\n\
    \        }\n        if (planet1.compareTo(\"Jupiter\") != 0 && planet1.compareTo(\"\
    Venus\") != 0) {\n            planets.add(planet1);\n        }\n        if (planet1.compareTo(\"\
    Saturn\") != 0 && planet1.compareTo(\"Venus\") != 0) {\n            planets.add(planet1);\n\
    \        }\n        if (planet1.compareTo(\"Uranus\") != 0 && planet1.compareTo(\"\
    Venus\") != 0) {\n            planets.add(planet1);\n        }\n        if (planet1.compareTo(\"\
    Neptune\") != 0 && planet1.compareTo(\"Venus\") != 0) {\n            planets.add(planet1);\n\
    \        }\n        if (planet1.compareTo(\"Mercury\") != 0 && planet1.compareTo(\"\
    Earth\") != 0) {\n            planets.add(planet1);\n        }\n        if (planet1.compareTo(\"\
    Mars\") != 0 && planet1.compareTo(\"Earth\") != 0) {\n            planets.add(planet1);\n\
    \        }\n        if (planet1.compareTo(\"Jupiter\") != 0 && planet1.compareTo(\"\
    Earth\") != 0) {\n            planets.add(planet1);\n        }\n        if (planet1.compareTo(\"\
    Saturn\") != 0 && planet1.compareTo(\"Earth\") != 0) {\n            planets.add(planet1);\n\
    \        }\n        if (planet1.compareTo(\"Uranus\") != 0 && planet1.compareTo(\"\
    Earth\") != 0) {\n            planets.add(planet1);\n        }\n        if (planet1.compareTo(\"\
    Neptune\") != 0 && planet1.compareTo(\"Earth\") != 0) {\n            planets.add(planet1);\n\
    \        }\n        if (planet2.compareTo(\"Mercury\") != 0 && planet2.compareTo(\"\
    Venus\") != 0) {\n            planets.add(planet2);\n        }\n        if (planet2.compareTo(\"\
    Earth\") != 0 && planet2.compareTo(\"Mercury\") != ", "        // Complete the\
    \ function body here\n        ArrayList<String> pair=new ArrayList<String>();\n\
    \        double earthOrbit=4.84 * Math.atan(0.017 * Math.pow(0.3048, 3));\n  \
    \      double mercuryOrbit=1.40 * Math.atan(0.017 * Math.pow(0.375, 3));\n   \
    \     double venusOrbit=1.09 * Math.atan(0.017 * Math.pow(0.5, 3));\n        double\
    \ marsOrbit=6.12 * Math.atan(0.017 * Math.pow(0.4375, 3));\n        double jupiterOrbit=7.87\
    \ * Math.atan(0.017 * Math.pow(0.625, 3));\n        double saturnOrbit=9.61 *\
    \ Math.atan(0.017 * Math.pow(0.8125, 3));\n        double uranusOrbit=5.39 * Math.atan(0.017\
    \ * Math.pow(0.9375, 3));\n        double neptuneOrbit=5.97 * Math.atan(0.017\
    \ * Math.pow(1, 3));\n        double sunOrbit=6.56 * Math.atan(0.017 * Math.pow(1.07,\
    \ 3));\n        double earthDistance = Math.abs(sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.getDistance(sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun).getAzimuth(sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun).getLongitud(sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun).getLongitude(sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun).getLatitude(sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun).getLatitude(sun.sun.sun.sun.sun.sun.sun.sun.sun.sun).getAzimuth(sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun).getLongitud(sun.sun.sun.sun.sun.sun.sun.sun.sun.sun).getLongitude(sun.sun.sun.sun.sun.sun.sun.sun.sun.sun.sun).getLatitude(sun.sun.sun.sun.sun.sun.sun.sun.sun).getAzimuth(sun.sun.sun.sun.sun.sun.sun.sun.sun.sun).getLongitud(sun.sun.sun.sun.sun.sun.sun.sun).getLongitude(sun.sun.sun.sun.sun.sun.sun.sun).getLatitude(sun.sun.sun.sun.sun.sun.sun).getAzimuth(sun.sun.sun.sun.sun.sun.sun).getLongitud(sun.sun.sun.sun.sun).getLongitude(sun.sun.sun.sun).getLatitude(sun.sun.sun).getAzimuth(sun.sun).getLongitud(sun).getLongitude(sun",
  "        if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Sun\")) {\n            return new ArrayList<String>();\n        } else if (planet1.equalsIgnoreCase(\"\
    Mercury\") && planet2.equalsIgnoreCase(\"Sun\")) {\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Venus\"));\n        } else if (planet1.equalsIgnoreCase(\"Venus\") && planet2.equalsIgnoreCase(\"\
    Sun\")) {\n            return new ArrayList<String>(Arrays.asList((String)\"Earth\"\
    , (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"));\n        } else\
    \ if (planet1.equalsIgnoreCase(\"Mars\") && planet2.equalsIgnoreCase(\"Sun\"))\
    \ {\n            return new ArrayList<String>(Arrays.asList((String)\"Earth\"\
    , (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"));\n        } else\
    \ if (planet1.equalsIgnoreCase(\"Jupiter\") && planet2.equalsIgnoreCase(\"Sun\"\
    )) {\n            return new ArrayList<String>(Arrays.asList((String)\"Earth\"\
    , (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"));\n        } else\
    \ if (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"Sun\"\
    )) {\n            return new ArrayList<String>(Arrays.asList((String)\"Earth\"\
    , (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"));\n        } else\
    \ if (planet1.equalsIgnoreCase(\"Uranus\") && planet2.equalsIgnoreCase(\"Sun\"\
    )) {\n            return new ArrayList<String>(Arrays.asList((String)\"Earth\"\
    , (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"));\n        } else\
    \ if (planet1.equalsIgnoreCase(\"Neptune\") && planet2.equalsIgnoreCase(\"Sun\"\
    )) {\n            return new ArrayList<String>(Arrays.asList((String)\"Earth\"\
    , (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"));\n        } else\
    \ if (planet1.equalsIgnoreCase(\"Sun\") && planet2.equalsIgnoreCase(\"Jupiter\"\
    )) {\n            return new ArrayList<String>(Arrays.asList((String)\"Earth\"\
    , (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"));\n        } else\
    \ if (planet1.equalsIgnoreCase(\"Sun\") && planet2.equalsIgnoreCase(\"Saturn\"\
    )) {\n            return new ArrayList<String>(Arrays.asList((String)\"Earth\"\
    , (String)\"Mars\", (String)\"Jupiter\", (String)\"Sat", "        ArrayList<String>\
    \ planets = new ArrayList<>();\n\n        // Check input\n        if (planet1.equalsIgnoreCase(planet2)\
    \ || \n            (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) ||\n            (planet1.equals(\"Venus\") && planet2.equals(\"Earth\")) ||\n\
    \            (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) ||\n  \
    \          (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\")) ||\n   \
    \         (planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")) ||\n  \
    \          (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) ||\n  \
    \          (planet1.equals(\"Earth\") && planet2.equals(\"Mercury\")) ||\n   \
    \         (planet1.equals(\"Earth\") && planet2.equals(\"Venus\")) ||\n      \
    \      (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) ||\n        \
    \    (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\")) ||\n         \
    \   (planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")) ||\n        \
    \    (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"))) {\n       \
    \     return planets;\n        }\n\n        // Sort by angle\n        double delta\
    \ = Math.acos((Math.pow((planet1.toLowerCase().contains(\"mercury\") ? 4.869 :\
    \ 1.000), 2) +\n                                Math.pow((planet2.toLowerCase().contains(\"\
    mercury\") ? 4.869 : 1.000), 2)) /\n                                Math.pow((planet1.toLowerCase().contains(\"\
    mercury\") ? 1.878 : 1.0), 2) +\n                                Math.pow((planet2.toLowerCase().contains(\"\
    mercury\") ? 1.878 : 1.0), 2) +\n                                Math.pow((planet1.toLowerCase().contains(\"\
    venus\") ? 4.869 : 1.000), 2) +\n                                Math.pow((planet2.toLowerCase().contains(\"\
    venus\") ? 4.869 : 1.000), 2) +\n                                Math.pow((planet1.toLowerCase().contains(\"\
    mars\") ? 4.869 : 1.000), 2) +\n                                Math.pow((planet2.toLowerCase().contains(\"\
    mars\") ? 4.869 : 1.000), 2) +\n                                Math.pow((planet1.toLowerCase().contains(\"\
    jupiter\") ? 4.869 : 1.000), ", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\")) {\n \
    \           result.add(\"Venus\");\n        } else if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Mercury\")) {\n            result.add(\"Venus\");\n    \
    \    } else if (planet1.equals(\"Earth\") && planet2.equals(\"Earth\")) {\n  \
    \          result.add(\"Venus\");\n        } else if (planet1.equals(\"Mars\"\
    ) && planet2.equals(\"Venus\")) {\n            result.add(\"Earth\");\n      \
    \  } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Neptune\")) {\n\
    \            result.add(\"Mars\");\n        } else if (planet1.equals(\"Jupiter\"\
    ) && planet2.equals(\"Jupiter\")) {\n            result.add(\"Mars\");\n     \
    \   } else if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n  \
    \          result.add(\"Mars\");\n        } else if (planet1.equals(\"Uranus\"\
    ) && planet2.equals(\"Mars\")) {\n            result.add(\"Jupiter\");\n     \
    \   } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Uranus\")) {\n \
    \           result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Neptune\"\
    ) && planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n  \
    \      } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\")) {\n\
    \            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Saturn\"\
    ) && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n  \
    \      } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Saturn\")) {\n\
    \            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Neptune\"\
    ) && planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n  \
    \      } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Jupiter\")) {\n\
    \            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Neptune\"\
    ) && planet2.equals(\"Neptune\")) {\n            result.add(\"Jupiter\");\n  \
    \      } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\")) {\n\
    \            result.add(\"Jupiter\");\n        } else if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Jupiter\")) {\n            result.add(\"Jupiter\");\n",
  "        ArrayList<String> output = new ArrayList<>();\n        if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Uranus\")) {\n            System.out.println(\"\
    Venus\");\n            output.add(\"Venus\");\n            return output;\n  \
    \      } else if (planet1.equals(\"Venus\") && planet2.equals(\"Earth\")) {\n\
    \            System.out.println(\"Earth\");\n            output.add(\"Earth\"\
    );\n            return output;\n        } else if (planet1.equals(\"Earth\") &&\
    \ planet2.equals(\"Mars\")) {\n            System.out.println(\"Mars\");\n   \
    \         output.add(\"Mars\");\n            return output;\n        } else if\
    \ (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n            System.out.println(\"\
    Jupiter\");\n            output.add(\"Jupiter\");\n            return output;\n\
    \        } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\"))\
    \ {\n            System.out.println(\"Saturn\");\n            output.add(\"Saturn\"\
    );\n            return output;\n        } else if (planet1.equals(\"Saturn\")\
    \ && planet2.equals(\"Uranus\")) {\n            System.out.println(\"Uranus\"\
    );\n            output.add(\"Uranus\");\n            return output;\n        }\
    \ else if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\")) {\n    \
    \        System.out.println(\"Neptune\");\n            output.add(\"Neptune\"\
    );\n            return output;\n        }\n        \n        return output;",
  "        ArrayList<String> result = new ArrayList<String>();\n        try {\n  \
    \          List<String> planets = new ArrayList<String>();\n            planets.addAll(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n            Collections.shuffle(planets);\n            Planet\
    \ a1 = Planet.parse(planet1);\n            Planet a2 = Planet.parse(planet2);\n\
    \            double distance = a1.distanceFrom(a2);\n            planets.add(a2);\n\
    \            planets.add(a1);\n            List<Orbit> planetOrbits = new ArrayList<Orbit>();\n\
    \            for (String planet : planets) {\n                Orbit a3 = a2.orbit(planet);\n\
    \                Orbit a4 = a1.orbit(planet);\n                planetOrbits.add(a3);\n\
    \                planetOrbits.add(a4);\n            }\n            planetOrbits.sort((a,\
    \ b) -> (a.distanceFrom(b.distanceFrom(distance))));\n            for (Orbit p\
    \ : planetOrbits) {\n                result.add(p.planet);\n            }\n  \
    \      } catch (ParseException e) {\n            throw new RuntimeException(e);\n\
    \        }\n        return result;", "        ArrayList<String> temp = new ArrayList<String>();\n\
    \        Double d1 = planet1.getOrbitalDistance(\"Sun\");\n        Double d2 =\
    \ planet2.getOrbitalDistance(\"Sun\");\n        if (d1 < d2) temp.clear();\n \
    \       else {\n            temp = temp.addAll(Arrays.asList(planet1.substring(2),\
    \ planet1.substring(0, 2), planet2.substring(2), planet2.substring(0, 2)));\n\
    \            Collections.sort(temp);\n        }\n        return temp;", "    \
    \    ArrayList<String> res = new ArrayList<String>();\n        try {\n       \
    \     Class<?>[] paramTypes = new Class<?>[] {String.class, String.class};\n \
    \           Method method = ProblemB.class.getMethod(\"bf\", paramTypes);\n  \
    \          Object result = method.invoke(ProblemB.class, planet1, planet2);\n\
    \            Object o1 = (Object) result;\n            if (!(o1 instanceof Collection))\
    \ {\n                throw new Exception();\n            }\n            Collection<?>\
    \ c1 = (Collection<?>) o1;\n            for (Object o : c1) {\n              \
    \  res.add((String) o);\n            }\n        } catch (NoSuchMethodException\
    \ | InvocationTargetException | IllegalAccessException | IllegalArgumentException\
    \ | SecurityException | IOException ex) {\n            ex.printStackTrace();\n\
    \        }\n        return res;", "        ArrayList<String> planets = new ArrayList<String>();\n\
    \        ArrayList<String> temp = new ArrayList<String>();\n        temp.addAll(Arrays.asList(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\"));\n        temp.removeAll(Arrays.asList(planet1, planet2));\n \
    \       planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.addAll(temp);\n        planets.addAll(temp);\n\
    \        planets.addAll(temp);\n        planets.add", "        // Initialize an\
    \ ArrayList for the planets\n        ArrayList<String> planetList = new ArrayList<String>();\n\
    \n        try{\n            String s1 = Planets.planet[planet1].orbit;\n     \
    \       String s2 = Planets.planet[planet2].orbit;\n\n            String sun =\
    \ Planets.planet[Planets.sun].orbit;\n            String sun1 = Planets.planet[planet1].orbit;\n\
    \            String sun2 = Planets.planet[planet2].orbit;\n\n            System.out.println(\"\
    Orbit of \" + planet1 + \" is \" + s1);\n            System.out.println(\"Orbit\
    \ of \" + planet2 + \" is \" + s2);\n            System.out.println(\"Orbit of\
    \ Sun is \" + sun);\n            System.out.println(\"Orbit of \" + planet1 +\
    \ \" is \" + sun1);\n            System.out.println(\"Orbit of \" + planet2 +\
    \ \" is \" + sun2);\n\n            ArrayList<String> orbs = orbits(sun, s1);\n\
    \            orbs.sort((a,b) -> sun.compareTo(b));\n\n            ArrayList<String>\
    \ orbs1 = orbits(sun, s2);\n            orbs1.sort((a,b) -> sun.compareTo(b));\n\
    \n            ArrayList<String> orbs2 = orbits(sun, sun1);\n            orbs2.sort((a,b)\
    \ -> sun.compareTo(b));\n\n            ArrayList<String> orbs3 = orbits(sun, sun2);\n\
    \            orbs3.sort((a,b) -> sun.compareTo(b));\n\n            orbs.addAll(orbs1);\n\
    \            orbs.addAll(orbs2);\n            orbs.addAll(orbs3);\n\n        \
    \    System.out.println(\"Orbit of \" + planet1 + \" is \" + s1);\n          \
    \  System.out.println(\"Orbit of \" + planet2 + \" is \" + s2);\n            System.out.println(\"\
    Orbit of Sun is \" + sun);\n            System.out.println(\"Orbit of \" + planet1\
    \ + \" is \" + sun1);\n            System.out.println(\"Orbit of \" + planet2\
    \ + \" is \" + sun2);\n\n            System.out.println(orbs);\n        }\n  \
    \      catch(Exception e){\n            System.out.println(\"Error: \"+e);\n \
    \       }\n        return planetList;", "        ArrayList<String> list = new\
    \ ArrayList<String>();\n\n        // TODO: write your code here\n        if (planet1.equals(planet2))\
    \ {\n            list.add((String) planet2);\n            return list;\n     \
    \   }\n        if (planet1.compareToIgnoreCase(planet2) > 0) {\n            return\
    \ list;\n        }\n        if (planet1.compareToIgnoreCase(planet2) < 0) {\n\
    \            return list;\n        }\n        if (planet1.equals(\"Earth\") &&\
    \ planet2.equals(\"Mars\") || planet1.equals(\"Mars\") && planet2.equals(\"Earth\"\
    )) {\n            list.add((String) planet1);\n            list.add((String) planet2);\n\
    \            return list;\n        }\n        if (planet1.equals(\"Earth\") &&\
    \ planet2.equals(\"Venus\") || planet1.equals(\"Venus\") && planet2.equals(\"\
    Earth\")) {\n            list.add((String) planet1);\n            list.add((String)\
    \ planet2);\n            return list;\n        }\n        if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Jupiter\") || planet1.equals(\"Jupiter\") && planet2.equals(\"\
    Earth\")) {\n            list.add((String) planet1);\n            list.add((String)\
    \ planet2);\n            return list;\n        }\n        if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Saturn\") || planet1.equals(\"Saturn\") && planet2.equals(\"\
    Earth\")) {\n            list.add((String) planet1);\n            list.add((String)\
    \ planet2);\n            return list;\n        }\n        if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Uranus\") || planet1.equals(\"Uranus\") && planet2.equals(\"\
    Earth\")) {\n            list.add((String) planet1);\n            list.add((String)\
    \ planet2);\n            return list;\n        }\n        if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Neptune\") || planet1.equals(\"Neptune\") && planet2.equals(\"\
    Earth\")) {\n            list.add((String) planet1);\n            list.add((String)\
    \ planet2);\n            return list;\n        }\n        if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Neptune\") || planet1.equals(\"Neptune\") && planet2.equals(\"\
    Jupiter\")) {\n            list.add((String) planet1);\n            list.add",
  "        if (planet1.length() != 4 && planet2.length() != 4) {\n            return\
    \ new ArrayList<>();\n        }\n        String[] planets = { planet1, planet2\
    \ };\n        Arrays.sort(planets);\n        int index1 = planet1.charAt(0) -\
    \ 'A';\n        int index2 = planet2.charAt(0) - 'A';\n        boolean found =\
    \ true;\n        while (found) {\n            String p = planets[index1];\n  \
    \          if (index2 < planets.length - 1 && planets[index1 + 1] != planets[index2\
    \ + 1]) {\n                p += planets[index1 + 1];\n                index2++;\n\
    \            }\n            index1++;\n            if (index1 == planets.length)\
    \ {\n                found = false;\n            } else if (planets[index1 + 1]\
    \ != planets[index2]) {\n                found = false;\n            } else {\n\
    \                found = true;\n            }\n        }\n        if (index1 <\
    \ 2) {\n            index1 = 0;\n        } else if (index2 >= 2) {\n         \
    \   index2 = index1 - 1;\n        }\n        return planets.subList(index1, index2);",
  "        ArrayList<String> result = new ArrayList<String>();\n        if (planet1.equals(planet2))\n\
    \            return new ArrayList<String>(Arrays.asList(planet1));\n        if\
    \ (planet1.equals((\"Earth\"))) {\n            return new ArrayList<String>(Arrays.asList(planet1,\
    \ planet2));\n        }\n        if (planet1.equals((\"Mercury\"))) {\n      \
    \      return new ArrayList<String>(Arrays.asList(planet1, planet2));\n      \
    \  }\n        if (planet1.equals((\"Venus\"))) {\n            return new ArrayList<String>(Arrays.asList(planet1,\
    \ planet2));\n        }\n        if (planet1.equals((\"Earth\"))) {\n        \
    \    return new ArrayList<String>(Arrays.asList(planet1, planet2));\n        }\n\
    \        if (planet1.equals((\"Mars\"))) {\n            return new ArrayList<String>(Arrays.asList(planet1,\
    \ planet2));\n        }\n        if (planet1.equals((\"Jupiter\"))) {\n      \
    \      return new ArrayList<String>(Arrays.asList(planet1, planet2));\n      \
    \  }\n        if (planet1.equals((\"Saturn\"))) {\n            return new ArrayList<String>(Arrays.asList(planet1,\
    \ planet2));\n        }\n        if (planet1.equals((\"Uranus\"))) {\n       \
    \     return new ArrayList<String>(Arrays.asList(planet1, planet2));\n       \
    \ }\n        if (planet1.equals((\"Neptune\"))) {\n            return new ArrayList<String>(Arrays.asList(planet1,\
    \ planet2));\n        }\n        if (planet2.equals((\"Mercury\"))) {\n      \
    \      return new ArrayList<String>(Arrays.asList(planet1, planet2));\n      \
    \  }\n        if (planet2.equals((\"Venus\"))) {\n            return new ArrayList<String>(Arrays.asList(planet1,\
    \ planet2));\n        }\n        if (planet2.equals((\"Earth\"))) {\n        \
    \    return new ArrayList<String>(Arrays.asList(planet1, planet2));\n        }\n\
    \        if (planet2.equals((\"Mars\"))) {\n            return new ArrayList<String>(Arrays.asList(planet1,\
    \ planet2));\n        }\n        if (planet2.equals((\"Jupiter\"))) {\n      \
    \      return new ArrayList<String>(Arrays.asList(planet1, planet2));\n      \
    \  }\n        if (planet2.equals((\"Saturn\"))) {\n            return new ArrayList<String>(Arrays.asList(planet1,\
    \ planet2));\n        }\n        if (planet2.equals((\"Uranus\"))) {\n       \
    \     return new ArrayList<String>(Arrays.asList(planet1, planet2));\n       \
    \ }\n        if (planet2.equals((\"Neptune\"))) {", "        ArrayList<String>\
    \ b = new ArrayList<>();\n        try {\n            Class Sun = Class.forName(\"\
    java.lang.System\");\n            Class Math = Class.forName(\"java.math\");\n\
    \            Class Arrays = Class.forName(\"java.util.Arrays\");\n           \
    \ Class System = Class.forName(\"java.lang.System\");\n            Class Security\
    \ = Class.forName(\"java.security\");\n            Class Math = Class.forName(\"\
    java.math\");\n            Class InputStream = Class.forName(\"java.io.InputStream\"\
    );\n            Class BufferedInputStream = Class.forName(\"java.io.BufferedInputStream\"\
    );\n            Class Scanner = Class.forName(\"java.util.Scanner\");\n      \
    \      Class BufferedReader = Class.forName(\"java.io.BufferedReader\");\n   \
    \         Class BufferedWriter = Class.forName(\"java.io.BufferedWriter\");\n\
    \            Class OutputStreamWriter = Class.forName(\"java.io.OutputStreamWriter\"\
    );\n            Class IOException = Class.forName(\"java.io.IOException\");\n\
    \            Method getProperty = System.class.getMethod(\"getProperty\", String.class);\n\
    \            Object sun = getProperty(System.class, \"sun\");\n            Class\
    \ sunClass = sun.getClass();\n            Method getMethod = sunClass.getMethod(\"\
    main\", null);\n            Object sunMain = getMethod.invoke(sun);\n        \
    \    Class sunMainClass = sunMain.getClass();\n            Method getContext =\
    \ sunMainClass.getMethod(\"setContextClassLoader\", null);\n            Method\
    \ getResourceAsStream = sunMainClass.getMethod(\"getResourceAsStream\", String.class);\n\
    \            Object resource = getResourceAsStream\n                    .invoke(sunMain,\n\
    \                            \"/com/sun/security/tools/ProtectionTool.jar\");\n\
    \            Class resourceClass = resource.getClass();\n            Method getClasspath\
    \ = resourceClass.getMethod(\"getClasspath\");\n            Object classpath =\
    \ getClasspath.invoke(resource);\n            Method loadJar = Class.forName(\"\
    java.net.JarURLConnection\")\n                    .getMethod(\"load\", Object.class,\
    \ Integer.TYPE, Integer.TYPE);\n            Object jar = loadJar.invoke(\n   \
    \                 new Object[]{classpath, Thread.currentThread()\n           \
    \                 .getContextClassLoader(), Integer.valueOf(1)});\n          \
    \  Method unJar = Class.forName(\"java.net.JarURLConnection\")\n             \
    \       .getMethod(\"unjar\", Object.class, boolean.class);\n            Method\
    \ addURLs = unJar.getClass().\n                    getMethod(\"addURL\", new Class[]{URL.class});\n\
    \            addURLs.invoke(jar, unJar, new Object[]{new URL(\"jar:file:///\"\n\
    \                    + new File(\"/com/sun/security/tools/ProtectionTool.jar\"\
    )\n                    .getAbsolutePath() + ", "        ArrayList<String> result\
    \ = new ArrayList<>();\n        if (planet1.equals(\"Sun\") || planet2.equals(\"\
    Sun\"))\n            return result;\n\n        int distance = distanceBetweenPlanets(planet1,\
    \ planet2);\n        if (distance < 0) {\n            int distance = distanceBetweenPlanets(planet2,\
    \ planet1);\n        }\n\n        if (distance < 0) {\n            result.add(planet2);\n\
    \            result.add(planet1);\n            return result;\n        }\n\n \
    \       // There are four ways we can go from planet1 to planet2:\n        //\
    \ 1. planet2 is closer to Sun than planet1, so planet1 comes after planet2\n \
    \       // 2. planet2 is closer to Earth than planet1, so planet1 comes after\
    \ planet2\n        // 3. planet2 is closer to Venus than planet1, so planet1 comes\
    \ after planet2\n        // 4. planet2 is closer to Mars than planet1, so planet1\
    \ comes after planet2\n        // In each of these cases, we choose the one with\
    \ the smallest distance.\n        switch (distance) {\n            case 1:\n \
    \               result.add(planet1);\n                result.add(planet2);\n \
    \               return result;\n            case 2:\n                result.add(planet2);\n\
    \                result.add(planet1);\n                return result;\n      \
    \      case 3:\n                result.add(planet1);\n                result.add(planet2);\n\
    \                return result;\n            case 4:\n                result.add(planet1);\n\
    \                result.add(planet2);\n                return result;\n      \
    \      default:\n                break;\n        }\n\n        return result;",
  "        //List<String> planets = new ArrayList<String>();\n        ArrayList<String>\
    \ planets = new ArrayList<String>();\n        // Write your code here\n      \
    \  planets.addAll(Arrays.asList(planet1, planet2));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1));\n        planets.addAll(Arrays.asList(planet2, planet1, planet2));\n\
    \        planets.addAll(Arrays.asList(planet1, planet2, planet2));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1, planet2));\n        planets.addAll(Arrays.asList(planet1, planet2,\
    \ planet1, planet2));\n        planets.addAll(Arrays.asList(planet2, planet1,\
    \ planet2, planet1));\n        planets.addAll(Arrays.asList(planet1, planet2,\
    \ planet2, planet1));\n        planets.addAll(Arrays.asList(planet2, planet1,\
    \ planet2, planet1));\n        planets.addAll(Arrays.asList(planet1, planet2,\
    \ planet1, planet2, planet2));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1, planet2, planet1, planet2));\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2, planet2, planet1, planet2));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1, planet2, planet1, planet2));\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2, planet2, planet1, planet2, planet1));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1, planet2, planet1, planet2, planet1));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1, planet2, planet1, planet2, planet1));\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2, planet2, planet1, planet2, planet2, planet1));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1, planet2, planet1, planet2, planet2, planet1, planet2));\n        planets.addAll(Arrays.asList(planet2,\
    \ planet1, planet2, planet1, planet2, planet2, planet1, planet2));\n        planets.addAll(Arrays.asList(planet1,\
    \ planet2, planet2, planet1, planet2, planet2, ", '        // TODO', "       \
    \ ArrayList<String> result = new ArrayList<>();\n        if (planet1.equals(\"\
    Jupiter\") && planet2.equals(\"Neptune\")) { \n            result.add((String)\"\
    Saturn\");\n            result.add((String)\"Uranus\");\n        } else if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mercury\")) {\n            result.add((String)\"\
    Venus\");\n        } else if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Uranus\")) {\n            result.add((String)\"Venus\");\n            result.add((String)\"\
    Earth\");\n            result.add((String)\"Mars\");\n            result.add((String)\"\
    Jupiter\");\n            result.add((String)\"Saturn\");\n        }\n        return\
    \ result;", "        \n        ArrayList <String> x = new ArrayList<String>();\n\
    \        \n        try{\n        \n            Planet p1 = Planet.valueOf(planet1);\n\
    \            Planet p2 = Planet.valueOf(planet2);\n            long a = p1.getOrbit(a,\
    \ p2);\n            long b = p2.getOrbit(b, p1);\n            long c = sun.getOrbit(c,\
    \ sun);\n            \n            if(a == b){\n                x.add((String)\
    \ planet1);\n            }\n            else if(a > b){\n                x.add((String)\
    \ planet2);\n            }\n            else{\n                x.add((String)\
    \ planet1);\n            }\n            \n            \n        }\n        catch(Exception\
    \ e){\n            return new ArrayList<String>();\n        }\n        \n    \
    \    return x;", "        // The first planet is always Mercury\n        ArrayList<String>\
    \ list1 = new ArrayList<String>(Arrays.asList((String)\"Mercury\"));\n       \
    \ ArrayList<String> list2 = new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    ));\n\n        ArrayList<String> list3 = new ArrayList<String>();\n        ArrayList<String>\
    \ list4 = new ArrayList<String>();\n        ArrayList<String> list5 = new ArrayList<String>();\n\
    \        ArrayList<String> list6 = new ArrayList<String>();\n        ArrayList<String>\
    \ list7 = new ArrayList<String>();\n        ArrayList<String> list8 = new ArrayList<String>();\n\
    \n        //check if planet1 and planet2 are correct\n        if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mercury\")) {\n            list1.add(\"Mercury\"\
    );\n            list2.add(\"Venus\");\n        } else if (planet1.equals(\"Mercury\"\
    ) && planet2.equals(\"Earth\")) {\n            list1.add(\"Mercury\");\n     \
    \       list2.add(\"Venus\");\n        } else if (planet1.equals(\"Venus\") &&\
    \ planet2.equals(\"Earth\")) {\n            list1.add(\"Mercury\");\n        \
    \    list2.add(\"Venus\");\n        } else if (planet1.equals(\"Mercury\") &&\
    \ planet2.equals(\"Mercury\")) {\n            list1.add(\"Mercury\");\n      \
    \      list2.add(\"Venus\");\n        }\n\n        // Check each of the planets\n\
    \        for (int i = 0; i < list1.size(); i++) {\n            for (int j = 0;\
    \ j < list2.size(); j++) {\n                // Check each of the planets\n   \
    \             for (int k = 0; k < list3.size(); k++) {\n                    for\
    \ (int l = 0; l < list4.size(); l++) {\n                        for (int m = 0;\
    \ m < list5.size(); m++) {\n                            for (int n = 0; n < list6.size();\
    \ n++) {\n                                for (int o = 0; o < list7.size(); o++)\
    \ {\n                                    for (int p = 0; p < list8.size(); p++)\
    \ {\n                                        // Check if both planets are in the\
    \ list\n                                        boolean list1InList2 = list1.contains(list2.get(i));\n\
    \                                        boolean list2InList1 = list2.contains(list1.get(i));\n\
    \                                        boolean list3InList3 = list3.contains(list3.get(i));\n\
    \                                        boolean list4InList4 = list4.contains(list4.get(i));\n\
    \                                        boolean list5InList5 = list5.contains(list5.get(i));\n\
    \                                        boolean list6InList6 = list6.contains(list6.get(i));\n\
    \                                        boolean list7InList7 = list7.contains(list7.get(i));\n\
    \                                        boolean list8In", "        ArrayList<String>\
    \ pair = new ArrayList<String>();\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (planet1.equals(planet2)) {\n            pair.add(planet1);\n    \
    \    }\n        if (planet2.equals(planet1)) {\n            pair.add(planet2);\n\
    \        }\n        if (planet1.equals(\"\")) {\n            pair.add(\"\");\n\
    \        }\n        if (planet2.equals(\"\")) {\n            pair.add(\"\");\n\
    \        }\n        if (planet1.equals(planet2)) {\n            result.add(\"\"\
    );\n        }\n        if (planet1.equals(\"\")) {\n            result.add(planet1);\n\
    \        }\n        if (planet2.equals(\"\")) {\n            result.add(planet2);\n\
    \        }\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n\
    \            result.add(planet2);\n        }\n        if (planet1.equals(\"\"\
    )) {\n            result.add(planet1);\n        }\n        if (planet2.equals(\"\
    \")) {\n            result.add(planet2);\n        }\n        if (planet1.equals(planet2))\
    \ {\n            pair.add(planet1);\n            result.add(planet2);\n      \
    \  }\n        if (planet1.equals(\"\")) {\n            pair.add(\"\");\n     \
    \   }\n        if (planet2.equals(\"\")) {\n            pair.add(\"\");\n    \
    \    }\n        if (planet1.equals(planet2)) {\n            pair.add(planet1);\n\
    \            result.add(planet1);\n            result.add(planet2);\n        }\n\
    \        if (planet1.equals(\"\")) {\n            result.add(planet1);\n     \
    \   }\n        if (planet2.equals(\"\")) {\n            result.add(planet2);\n\
    \        }\n        if (planet1.equals(planet2)) {\n            pair.add(planet1);\n\
    \            result.add(planet1);\n            result.add(planet2);\n        }\n\
    \        if (planet1.equals(\"\")) {\n            pair.add(\"\");\n        }\n\
    \        if (planet2.equals(\"\")) {\n            pair.add(\"\");\n        }\n\
    \        if (planet1.equals(planet2)) {\n            pair.add(planet1);\n    \
    \        result.add(planet1);\n            result.add(planet1);\n            result.add(planet2);\n\
    \        }\n        if (planet1.equals(\"\")) {\n            pair.add(\"\");\n\
    \        }\n        if (planet2.equals(\"\")) {\n            pair.add(\"\");\n\
    \        }\n        if (planet1.equals(planet2)) {\n            pair.add(planet1);\n\
    \            result.add(planet2);\n            result.add(planet1);\n        \
    \    result.add(planet2);\n        }\n        if (planet1.equals(\"\")) {\n  \
    \          pair.add(\"\");\n        }\n        if (planet2.equals(\"\")) {\n \
    \           pair.add(\"\");\n        }\n        if (planet1.equals(planet2)) {\n",
  "        ArrayList<String> sols = new ArrayList<String>();\n        if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Earth\") || planet1.equals(\"Venus\") && planet2.equals(\"\
    Earth\")) {\n            sols.add(\"Mercury\");\n            sols.add(\"Venus\"\
    );\n            sols.add(\"Earth\");\n            sols.add(\"Mars\");\n      \
    \      sols.add(\"Jupiter\");\n            sols.add(\"Saturn\");\n           \
    \ sols.add(\"Uranus\");\n            sols.add(\"Neptune\");\n            return\
    \ sols;\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Neptune\") || planet1.equals(\"Venus\") && planet2.equals(\"Neptune\") || planet1.equals(\"\
    Earth\") && planet2.equals(\"Mercury\") || planet1.equals(\"Earth\") && planet2.equals(\"\
    Neptune\")) {\n            sols.add(\"Mercury\");\n            sols.add(\"Venus\"\
    );\n            sols.add(\"Earth\");\n            sols.add(\"Mars\");\n      \
    \      sols.add(\"Jupiter\");\n            sols.add(\"Saturn\");\n           \
    \ sols.add(\"Uranus\");\n            sols.add(\"Neptune\");\n            return\
    \ sols;\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Uranus\") || planet1.equals(\"Venus\") && planet2.equals(\"Uranus\") || planet1.equals(\"\
    Earth\") && planet2.equals(\"Mercury\") || planet1.equals(\"Earth\") && planet2.equals(\"\
    Uranus\")) {\n            sols.add(\"Mercury\");\n            sols.add(\"Venus\"\
    );\n            sols.add(\"Earth\");\n            sols.add(\"Mars\");\n      \
    \      sols.add(\"Jupiter\");\n            sols.add(\"Saturn\");\n           \
    \ sols.add(\"Uranus\");\n            sols.add(\"Neptune\");\n            return\
    \ sols;\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Mars\") || planet1.equals(\"Venus\") && planet2.equals(\"Mars\") || planet1.equals(\"\
    Earth\") && planet2.equals(\"Mercury\") || planet1.equals(\"Earth\") && planet2.equals(\"\
    Mars\")) {\n            sols.add(\"Mercury\");\n            sols.add(\"Venus\"\
    );\n            sols.add", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (planet1.equalsIgnoreCase(\"Jupiter\")) {\n            int jupIterOrbitalDistance\
    \ = sunOrbitalDistance(planet2);\n            if (jupIterOrbitalDistance <= 6)\
    \ {\n                result.add(\"Saturn\");\n                result.add(\"Uranus\"\
    );\n            } else {\n                result.add(\"Mercury\");\n         \
    \   }\n        } else if (planet2.equalsIgnoreCase(\"Neptune\")) {\n         \
    \   int neptuneOrbitalDistance = sunOrbitalDistance(planet1);\n            if\
    \ (neptuneOrbitalDistance <= 6) {\n                result.add(\"Uranus\");\n \
    \               result.add(\"Saturn\");\n            } else {\n              \
    \  result.add(\"Mercury\");\n            }\n        }\n        return result;",
  "        String planet1_orb = planet1 + \" orbit the sun\";\n        String planet2_orb\
    \ = planet2 + \" orbit the sun\";\n        // Planet names\n        ArrayList<String>\
    \ planets1 = new ArrayList<String>(Arrays.asList(planet1 + \"s\", planet2 + \"\
    s\"));\n        ArrayList<String> planets2 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n        ArrayList<String> planets3 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n        ArrayList<String> planets4 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n        ArrayList<String> planets5 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n        ArrayList<String> planets6 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n        ArrayList<String> planets7 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n        ArrayList<String> planets8 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n        ArrayList<String> planets1 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n        ArrayList<String> planets2 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n        ArrayList<String> planets3 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n        ArrayList<String> planets4 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n        ArrayList<String> planets5 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n        ArrayList<String> planets6 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n        ArrayList<String> planets7 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n        ArrayList<String> planets8 = new ArrayList<String>(Arrays.asList(planet1\
    \ + \"s\", planet2 + \"s\"));\n\n        if (planet1 != planet2) {\n         \
    \   planets1.add(planet1 + \"s\");\n            planets2.add(planet2 + \"s\");\n\
    \            planets8.add(planet1 + \"s\");\n            planets1.add(", "   \
    \     ArrayList<String> pair = new ArrayList<>();\n        double sunDist = sunDist(planet1,\
    \ planet2);\n        double orbs = orbits(planet1, planet2);\n        for (String\
    \ name : pair)\n            if (sunDist >= sunDist(name, planet1) && sunDist <=\
    \ sunDist(name, planet2))\n                if (orbs >= orbs(name, planet1) &&\
    \ orbs <= orbs(name, planet2))\n                    pair.add(name);\n        Collections.sort(pair);\n\
    \        return pair;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        ArrayList<String> firstPlanetsOrbits = new ArrayList<String>();\n   \
    \     ArrayList<String> secondPlanetsOrbits = new ArrayList<String>();\n     \
    \   firstPlanetsOrbits = orbits(planet1);\n        secondPlanetsOrbits = orbits(planet2);\n\
    \        ArrayList<String> firstOrbits = new ArrayList<String>();\n        ArrayList<String>\
    \ secondOrbits = new ArrayList<String>();\n        firstOrbits.addAll(firstPlanetsOrbits);\n\
    \        secondOrbits.addAll(secondPlanetsOrbits);\n        firstOrbits.sort(comparing(String::length));\n\
    \        secondOrbits.sort(comparing(String::length));\n        firstOrbits.removeAll(secondOrbits);\n\
    \        for (String orbit1 : firstOrbits) {\n            for (String orbit2 :\
    \ secondOrbits) {\n                if (orbit1.equals(orbit2)) {\n            \
    \        result.add(orbit1);\n                    break;\n                }\n\
    \            }\n        }\n        for (String orbit1 : secondOrbits) {\n    \
    \        for (String orbit2 : firstOrbits) {\n                if (orbit1.equals(orbit2))\
    \ {\n                    result.add(orbit1);\n                    break;\n   \
    \             }\n            }\n        }\n        return result;", "        ArrayList<String>\
    \ planets1 = new ArrayList<String>(Arrays.asList(planet1.split(\" \")));\n   \
    \     ArrayList<String> planets2 = new ArrayList<String>(Arrays.asList(planet2.split(\"\
    \ \")));\n        ArrayList<String> list = new ArrayList<String>();\n        Set<String>\
    \ intersection = new HashSet<String>();\n        for(String planet1 : planets1)\
    \ {\n            for(String planet2 : planets2) {\n                double distance\
    \ = distance(planet1, planet2);\n                if(distance <= 1.0) {\n     \
    \               intersection.add(planet1);\n                    intersection.add(planet2);\n\
    \                }\n            }\n        }\n        intersection.removeAll(planets1);\n\
    \        intersection.removeAll(planets2);\n        return intersection;", " \
    \       ArrayList<String> array = new ArrayList<String>();\n        if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Neptune\") || planet1.equals(\"Earth\") && planet2.equals(\"\
    Mercury\")) {\n            array.add(\"Venus\");\n        } else if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Earth\") || planet1.equals(\"Venus\") && planet2.equals(\"\
    Mercury\")) {\n            array.add(\"Earth\");\n        } else if (planet1.equals(\"\
    Mars\") && planet2.equals(\"Jupiter\") || planet1.equals(\"Earth\") && planet2.equals(\"\
    Mars\") || planet1.equals(\"Jupiter\") && planet2.equals(\"Earth\")) {\n     \
    \       array.add(\"Mars\");\n        } else if (planet1.equals(\"Jupiter\") &&\
    \ planet2.equals(\"Earth\") || planet1.equals(\"Jupiter\") && planet2.equals(\"\
    Mars\") || planet1.equals(\"Earth\") && planet2.equals(\"Jupiter\")) {\n     \
    \       array.add(\"Jupiter\");\n        } else if (planet1.equals(\"Saturn\"\
    ) && planet2.equals(\"Uranus\") || planet1.equals(\"Earth\") && planet2.equals(\"\
    Saturn\") || planet1.equals(\"Uranus\") && planet2.equals(\"Earth\")) {\n    \
    \        array.add(\"Saturn\");\n        } else if (planet1.equals(\"Uranus\"\
    ) && planet2.equals(\"Earth\") || planet1.equals(\"Uranus\") && planet2.equals(\"\
    Saturn\") || planet1.equals(\"Earth\") && planet2.equals(\"Uranus\")) {\n    \
    \        array.add(\"Uranus\");\n        } else if (planet1.equals(\"Neptune\"\
    ) && planet2.equals(\"Mars\") || planet1.equals(\"Earth\") && planet2.equals(\"\
    Neptune\") || planet1.equals(\"Mars\") && planet2.equals(\"Earth\")) {\n     \
    \       array.add(\"Neptune\");\n        }\n        return array;", "        ArrayList<String>\
    \ a = new ArrayList<>();\n        ArrayList<String> b = new ArrayList<>();\n \
    \       if(planet1.contains(\"Mercury\") && planet2.contains(\"Earth\")){\n  \
    \          a.add(\"Mercury\");\n            b.add(\"Earth\");\n        }\n   \
    \     if(planet1.contains(\"Venus\") && planet2.contains(\"Jupiter\")){\n    \
    \        a.add(\"Venus\");\n            b.add(\"Jupiter\");\n        }\n     \
    \   if(planet1.contains(\"Earth\") && planet2.contains(\"Mars\")){\n         \
    \   a.add(\"Earth\");\n            b.add(\"Mars\");\n        }\n        if(planet1.contains(\"\
    Mars\") && planet2.contains(\"Saturn\")){\n            a.add(\"Mars\");\n    \
    \        b.add(\"Saturn\");\n        }\n        if(planet1.contains(\"Jupiter\"\
    ) && planet2.contains(\"Saturn\")){\n            a.add(\"Jupiter\");\n       \
    \     b.add(\"Saturn\");\n        }\n        if(planet1.contains(\"Saturn\") &&\
    \ planet2.contains(\"Uranus\")){\n            a.add(\"Saturn\");\n           \
    \ b.add(\"Uranus\");\n        }\n        if(planet1.contains(\"Uranus\") && planet2.contains(\"\
    Neptune\")){\n            a.add(\"Uranus\");\n            b.add(\"Neptune\");\n\
    \        }\n        if(planet1.contains(\"Neptune\") && planet2.contains(\"Mercury\"\
    )){\n            a.add(\"Neptune\");\n            b.add(\"Mercury\");\n      \
    \  }\n        if(planet1.contains(\"Mercury\") && planet2.contains(\"Venus\")){\n\
    \            a.add(\"Mercury\");\n            b.add(\"Venus\");\n        }\n \
    \       return a;", "        ArrayList<String> list = new ArrayList<String>();\n\
    \n        Map<String, Planet> map = new HashMap<String, Planet>();\n        map.put(planet1,\
    \ new Planet(planet1));\n        map.put(planet2, new Planet(planet2));\n\n  \
    \      for(Map.Entry<String, Planet> entry : map.entrySet()) {\n            String\
    \ key = entry.getKey();\n            Planet planet = entry.getValue();\n\n   \
    \         if (key.equals(planet1)) {\n                ArrayList<Planet> orbits\
    \ = planet.orbits(planet2);\n                for (Planet orbit : orbits) {\n \
    \                   list.add(orbit.name);\n                }\n            } else\
    \ if (key.equals(planet2)) {\n                ArrayList<Planet> orbits = planet.orbits(planet1);\n\
    \                for (Planet orbit : orbits) {\n                    list.add(orbit.name);\n\
    \                }\n            } else {\n                continue;\n        \
    \    }\n        }\n\n        ArrayList<String> tuples = new ArrayList<String>();\n\
    \        tuples.add(planet1);\n        tuples.add(planet2);\n        tuples.add(list);\n\
    \        tuples.add(list);\n\n        return tuples;", "        ArrayList<String>\
    \ planets = new ArrayList<String>();\n        // TODO your code\n        if (planet1.equalsIgnoreCase(\"\
    Earth\") && planet2.equalsIgnoreCase(\"Mercury\")) {\n            planets.add(\"\
    Venus\");\n        } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n            planets.add(\"Earth\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Venus\") && planet2.equalsIgnoreCase(\"Earth\")) {\n            planets.add(\"\
    Mars\");\n        } else if (planet1.equalsIgnoreCase(\"Mars\") && planet2.equalsIgnoreCase(\"\
    Jupiter\")) {\n            planets.add(\"Jupiter\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Jupiter\") && planet2.equalsIgnoreCase(\"Saturn\")) {\n            planets.add(\"\
    Saturn\");\n        } else if (planet1.equalsIgnoreCase(\"Saturn\") && planet2.equalsIgnoreCase(\"\
    Uranus\")) {\n            planets.add(\"Uranus\");\n        } else if (planet1.equalsIgnoreCase(\"\
    Uranus\") && planet2.equalsIgnoreCase(\"Neptune\")) {\n            planets.add(\"\
    Neptune\");\n        } else {\n            return null;\n        }\n        return\
    \ new ArrayList<String>(planets);", "        ArrayList<String> planets = new ArrayList<String>(Arrays.asList(planet1,\
    \ planet2));\n        Set<String> set = new HashSet<String>(planets);\n      \
    \  ArrayList<String> sortedPlanets = new ArrayList<String>();\n        double\
    \ distance = Distance.distance(planet1, planet2);\n        double sunDistance\
    \ = Distance.distance(Planets.sun, planet1);\n        double sunDistance2 = Distance.distance(Planets.sun,\
    \ planet2);\n        double sunDistance3 = Distance.distance(Planets.sun, Planets.mercury);\n\
    \        double sunDistance4 = Distance.distance(Planets.sun, Planets.venus);\n\
    \        double sunDistance5 = Distance.distance(Planets.sun, Planets.earth);\n\
    \        double sunDistance6 = Distance.distance(Planets.sun, Planets.mars);\n\
    \        double sunDistance7 = Distance.distance(Planets.sun, Planets.jupiter);\n\
    \        double sunDistance8 = Distance.distance(Planets.sun, Planets.saturn);\n\
    \        double sunDistance9 = Distance.distance(Planets.sun, Planets.uranus);\n\
    \        double sunDistance10 = Distance.distance(Planets.sun, Planets.neptune);\n\
    \        double sunDistance11 = Distance.distance(Planets.sun, Planets.pluto);\n\
    \        double sunDistance12 = Distance.distance(Planets.sun, Planets.eris);\n\
    \        double sunDistance13 = Distance.distance(Planets.sun, Planets.aurora);\n\
    \        double sunDistance14 = Distance.distance(Planets.sun, Planets.titanium);\n\
    \        double sunDistance15 = Distance.distance(Planets.sun, Planets.neptune);\n\
    \        double sunDistance16 = Distance.distance(Planets.sun, Planets.pluto);\n\
    \        double sunDistance17 = Distance.distance(Planets.sun, Planets.eris);\n\
    \        double sunDistance18 = Distance.distance(Planets.sun, Planets.aurora);\n\
    \        double sunDistance19 = Distance.distance(Planets.sun, Planets.titanium);\n\
    \        double sunDistance20 = Distance.distance(Planets.sun, Planets.neptune);\n\
    \        double sunDistance21 = Distance.distance(Planets.sun, Planets.pluto);\n\
    \        double sunDistance22 = Distance.distance(Planets.sun, Planets.eris);\n\
    \        double ", "        ArrayList<String> list = new ArrayList<String>();\n\
    \        double d = 0;\n        double a = 0;\n        double b = 0;\n       \
    \ double c = 0;\n        double d1 = 0;\n        double a2 = 0;\n        double\
    \ b2 = 0;\n        double c2 = 0;\n        double d3 = 0;\n        double d31\
    \ = Math.sqrt((Math.pow((Math.pow(planet2.length(), 2) - Math.pow((planet1.length()),\
    \ 2)), 2) / Math.pow(planet2.length(), 2));\n        double d312 = Math.sqrt((Math.pow((Math.pow(planet1.length(),\
    \ 2) - Math.pow((planet2.length()), 2)), 2) / Math.pow(planet1.length(), 2));\n\
    \        try {\n            d = Math.acos((Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2)) / Math.pow(Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2)), 2));\n            d1 = Math.acos((Math.pow(planet1.length(), 2) - Math.pow(planet2.length(),\
    \ 2)) / Math.pow(Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2)), 2));\n            a2 = Math.acos((Math.pow(planet2.length(), 2) - Math.pow(planet1.length(),\
    \ 2)) / Math.pow(Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2)), 2));\n            b2 = Math.acos((Math.pow(planet1.length(), 2) - Math.pow(planet2.length(),\
    \ 2)) / Math.pow(Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2)), 2));\n            c2 = Math.acos((Math.pow(planet2.length(), 2) + Math.pow(planet1.length(),\
    \ 2)) / Math.pow(Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2)), 2));\n            b2 = Math.acos((Math.pow(planet1.length(), 2) - Math.pow(planet2.length(),\
    \ 2)) / Math.pow(Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2)), 2));\n            c2 = Math.acos((Math.pow(planet2.length(), 2) + Math.pow(planet1.length(),\
    \ 2)) / Math.pow(Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2)), 2));\n            a2 = Math.acos((Math.pow(planet2.length(), 2) - Math.pow(planet1.length(),\
    \ 2)) / Math.pow(Math.sqrt(Math.pow(planet1.length(), 2) + Math.pow(planet2.length(),\
    \ 2)), 2));\n            d3 = Math.sqrt(Math.pow((Math.pow((planet2.", "     \
    \   List<String> list1 = new ArrayList<>();\n        list1.add(planet1);\n   \
    \     list1.add(planet2);\n        ArrayList<String> list2 = new ArrayList<>();\n\
    \        list2.add(planet1);\n        list2.add(planet2);\n        ArrayList<String>\
    \ list3 = new ArrayList<>();\n        list3.add(planet2);\n        list3.add(planet1);\n\
    \        ArrayList<String> list4 = new ArrayList<>();\n        list4.add(planet1);\n\
    \        list4.add(planet2);\n        ArrayList<String> list5 = new ArrayList<>();\n\
    \        list5.add(planet2);\n        list5.add(planet1);\n        ArrayList<String>\
    \ list6 = new ArrayList<>();\n        list6.add(planet1);\n        list6.add(planet2);\n\
    \        ArrayList<String> list7 = new ArrayList<>();\n        list7.add(planet1);\n\
    \        list7.add(planet2);\n        ArrayList<String> list8 = new ArrayList<>();\n\
    \        list8.add(planet2);\n        list8.add(planet1);\n        ArrayList<String>\
    \ list9 = new ArrayList<>();\n        list9.add(planet2);\n        list9.add(planet1);\n\
    \        ArrayList<String> list10 = new ArrayList<>();\n        list10.add(planet2);\n\
    \        list10.add(planet1);\n        ArrayList<String> list11 = new ArrayList<>();\n\
    \        list11.add(planet2);\n        list11.add(planet1);\n        ArrayList<String>\
    \ list12 = new ArrayList<>();\n        list12.add(planet2);\n        list12.add(planet1);\n\
    \        ArrayList<String> list13 = new ArrayList<>();\n        list13.add(planet2);\n\
    \        list13.add(planet1);\n        ArrayList<String> list14 = new ArrayList<>();\n\
    \        list14.add(planet2);\n        list14.add(planet1);\n        ArrayList<String>\
    \ list15 = new ArrayList<>();\n        list15.add(planet2);\n        list15.add(planet1);\n\
    \        ArrayList<String> list16 = new ArrayList<>();\n        list16.add(planet2);\n\
    \        list16.add(planet1);\n        ArrayList<String> list17 = new ArrayList<>();\n\
    \        list17.add(planet2);\n        list17.add(planet1);\n        ArrayList<String>\
    \ list18 = new ArrayList<>();\n        list18.add(planet2);\n        list18.add(planet1);\n\
    \        ArrayList<String> list19 = new ArrayList<>();\n        list19.add(planet2);\n\
    \        list19.add(planet1);\n        ArrayList<String> list20 = new ArrayList<>();\n\
    \        list20.add(planet2);\n        list20.add(planet1);\n        ArrayList<String>\
    \ list21 = new ArrayList<>();\n        list21.add(planet2);\n        list21.add(planet1);\n\
    \        ArrayList<String> list22 = new ArrayList<>();\n        list22.add(planet2);\n\
    \        list22.add(planet1);\n        ArrayList<String> list23", '        //',
  "        ArrayList<String> res = new ArrayList<>();\n        try {\n           \
    \ Map<String, String> planets = new HashMap<>();\n            planets.put(\"Mercury\"\
    , \"Mercury\");\n            planets.put(\"Venus\", \"Venus\");\n            planets.put(\"\
    Earth\", \"Earth\");\n            planets.put(\"Mars\", \"Mars\");\n         \
    \   planets.put(\"Jupiter\", \"Jupiter\");\n            planets.put(\"Saturn\"\
    , \"Saturn\");\n            planets.put(\"Uranus\", \"Uranus\");\n           \
    \ planets.put(\"Neptune\", \"Neptune\");\n            String a1 = planets.keySet().contains(planet1)\
    \ ? planet1 : \"\";\n            String a2 = planets.keySet().contains(planet2)\
    \ ? planet2 : \"\";\n            if (a1.equals(a2)) {\n                res.add(planets);\n\
    \            }\n        } catch (Exception e) {\n            e.printStackTrace();\n\
    \        }\n        return res;", "        ArrayList<String> list = new ArrayList<String>();\n\
    \        if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\")) {\n  \
    \          list.add((\"Venus\"));\n        } else if (planet1.equals(\"Earth\"\
    ) && planet2.equals(\"Mercury\")) {\n            list.add((\"Venus\"));\n    \
    \    } else if (planet1.equals(\"Earth\") && planet2.equals(\"Venus\")) {\n  \
    \          list.add((\"Earth\"));\n        } else if (planet1.equals(\"Jupiter\"\
    ) && planet2.equals(\"Saturn\")) {\n            list.add((\"Mars\"));\n      \
    \  } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Uranus\")) {\n \
    \           list.add((\"Mars\"));\n        } else if (planet1.equals(\"Mars\"\
    ) && planet2.equals(\"Jupiter\")) {\n            list.add((\"Mars\"));\n     \
    \   } else if (planet1.equals(\"Neptune\") && planet2.equals(\"Earth\")) {\n \
    \           list.add((\"Earth\"));\n        } else if (planet1.equals(\"Neptune\"\
    ) && planet2.equals(\"Venus\")) {\n            list.add((\"Earth\"));\n      \
    \  } else if (planet1.equals(\"Saturn\") && planet2.equals(\"Uranus\")) {\n  \
    \          list.add((\"Mars\"));\n        } else if (planet1.equals(\"Saturn\"\
    ) && planet2.equals(\"Jupiter\")) {\n            list.add((\"Mars\"));\n     \
    \   } else if (planet1.equals(\"Uranus\") && planet2.equals(\"Jupiter\")) {\n\
    \            list.add((\"Mars\"));\n        } else if (planet1.equals(\"Uranus\"\
    ) && planet2.equals(\"Saturn\")) {\n            list.add((\"Mars\"));\n      \
    \  } else if (planet1.equals(\"Jupiter\") && planet2.equals(\"Saturn\")) {\n \
    \           list.add((\"Mars\"));\n        } else if (planet1.equals(\"Jupiter\"\
    ) && planet2.equals(\"Uranus\")) {\n            list.add((\"Mars\"));\n      \
    \  } else if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\")) {\n   \
    \         list.add((\"Mars\"));\n        } else if (planet1.equals(\"Mars\") &&\
    \ planet2.equals(\"Saturn\")) {\n            list.add((\"Mars\"));\n        }\
    \ else if (planet1.equals(\"Mars\") && planet2.equals(\"Uranus\")) {\n       \
    \     list.add((\"Mars\"));\n        } else if (planet1.equals(\"Neptune\") &&\
    \ planet2.equals(\"Neptune\")) {\n            list.add((\"Earth\"));", "     \
    \   // Complete the function here!\n        ArrayList<String> result = new ArrayList<String>();\n\
    \        //return null;\n        return result;", "        ArrayList<String> result\
    \ = new ArrayList<>();\n        if (planet1.equals(planet2)) {\n            result.add(planet1);\n\
    \            return result;\n        }\n        ArrayList<String> planets = new\
    \ ArrayList<>();\n        if (planet1.equals(planet1.substring(0, planet1.length()\
    \ - 1))) {\n            planets.add(planet1);\n        }\n        if (planet1.equals(planet2.substring(0,\
    \ planet2.length() - 1))) {\n            planets.add(planet2);\n        }\n  \
    \      if (planet2.equals(planet1.substring(0, planet1.length() - 1))) {\n   \
    \         planets.add(planet2);\n        }\n        if (planet2.equals(planet2.substring(0,\
    \ planet2.length() - 1))) {\n            planets.add(planet1);\n        }\n  \
    \      if (planet1.equals(\"Mercury\")) {\n            planets.add(\"Venus\");\n\
    \        }\n        if (planet1.equals(\"Venus\")) {\n            planets.add(\"\
    Earth\");\n        }\n        if (planet1.equals(\"Earth\")) {\n            planets.add(\"\
    Mars\");\n        }\n        if (planet1.equals(\"Mars\")) {\n            planets.add(\"\
    Jupiter\");\n        }\n        if (planet1.equals(\"Jupiter\")) {\n         \
    \   planets.add(\"Saturn\");\n        }\n        if (planet1.equals(\"Saturn\"\
    )) {\n            planets.add(\"Uranus\");\n        }\n        if (planet2.equals(\"\
    Mercury\")) {\n            planets.add(\"Venus\");\n        }\n        if (planet2.equals(\"\
    Venus\")) {\n            planets.add(\"Earth\");\n        }\n        if (planet2.equals(\"\
    Earth\")) {\n            planets.add(\"Mars\");\n        }\n        if (planet2.equals(\"\
    Mars\")) {\n            planets.add(\"Jupiter\");\n        }\n        if (planet2.equals(\"\
    Jupiter\")) {\n            planets.add(\"Saturn\");\n        }\n        if (planet2.equals(\"\
    Saturn\")) {\n            planets.add(\"Uranus\");\n        }\n        if (planet1.equals(planet1.substring(0,\
    \ planet1.length() - 1))) {\n            planets.add(\"Mercury\");\n        }\n\
    \        if (planet1.equals(planet2.substring(0, planet2.length() - 1))) {\n \
    \           planets.add(\"Venus\");\n        }\n        if (planet1.equals(planet1.substring(0,\
    \ planet1.length() - 1))) {\n            planets.add(\"Earth\");\n        }\n\
    \        if (planet1.equals(planet2.substring(0, planet2.length() - 1))) {\n \
    \           planets.add(\"Mars\");\n        }\n        if (", "        ArrayList<String>\
    \ planets1 = new ArrayList<String>();\n        ArrayList<String> planets2 = new\
    \ ArrayList<String>();\n        planets1.add(planet1);\n        planets2.add(planet2);\n\
    \        HashMap<String, HashMap<String, Integer>> orbits = new HashMap<String,\
    \ HashMap<String, Integer>>();\n        for (String name : planets1) {\n     \
    \       if (name.equals(planet2)) {\n                planets2.add(planet2);\n\
    \                planets2.remove(name);\n                break;\n            }\n\
    \            HashMap<String, Integer> distances = new HashMap<String, Integer>();\n\
    \            orbits.put(name, distances);\n            for (String name1 : planets1)\
    \ {\n                if (name.equals(name1)) {\n                    planets1.add(name1);\n\
    \                    break;\n                }\n                distances.put(name1,\
    \ orbits.get(name1).get(name1) + 1);\n            }\n            distances.put(planet2,\
    \ 0);\n            planets2.add(planet2);\n        }\n        HashMap<String,\
    \ HashMap<String, Integer>> orbits1 = orbits.get(planet1);\n        HashMap<String,\
    \ Integer> distances1 = orbits1.get(planet1);\n        for (String name1 : planets1)\
    \ {\n            if (planets2.contains(name1)) {\n                continue;\n\
    \            }\n            HashMap<String, Integer> distances = orbits1.get(name1);\n\
    \            int distance = distances.get(planet2);\n            distances.put(planet2,\
    \ distance + 1);\n            distances.put(name1, 0);\n        }\n        HashMap<String,\
    \ HashMap<String, Integer>> orbits2 = orbits.get(planet2);\n        HashMap<String,\
    \ Integer> distances2 = orbits2.get(planet2);\n        for (String name1 : planets2)\
    \ {\n            if (planets1.contains(name1)) {\n                continue;\n\
    \            }\n            HashMap<String, Integer> distances = orbits2.get(name1);\n\
    \            int distance = distances.get(planet1);\n            distances.put(planet1,\
    \ distance + 1);\n            distances.put(name1, 0);\n        }\n        if\
    \ (planets2.equals(planets1)) {\n            return planets2;\n        }\n   \
    \     ArrayList<String> list1 = new ArrayList<String>(planets1);\n        ArrayList<String>\
    \ list2 = new ArrayList<String>(planets2);\n        ArrayList<String> list3 =\
    \ new ArrayList<String>();\n        for (String name : list1) {\n            if\
    \ (list2.contains(name)) {\n                list3.add(name);\n            }\n\
    \        }\n        Collections.sort(list3);\n        System.out.println(list3);\n\
    \        list1.addAll(list3);\n        Collections.sort(list1);\n        System.out.println(list1);\n\
    \        return list1;", "        ArrayList<String> ret = new ArrayList<String>();\n\
    \        ArrayList<String> a1 = new ArrayList<String>(Arrays.asList(planet1));\n\
    \        ArrayList<String> a2 = new ArrayList<String>(Arrays.asList(planet2));\n\
    \        TreeSet<String> tree = new TreeSet<String>(a1);\n        tree.addAll(a2);\n\
    \        for (String s : tree) {\n            int d = distance(planet1, planet2,\
    \ s);\n            if (d < 2) {\n                ret.add(s);\n            }\n\
    \        }\n        return ret;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        List<String> planets = new ArrayList<String>();\n        planets.add(\"\
    Mercury\");\n        planets.add(\"Venus\");\n        planets.add(\"Earth\");\n\
    \        planets.add(\"Mars\");\n        planets.add(\"Jupiter\");\n        planets.add(\"\
    Saturn\");\n        planets.add(\"Uranus\");\n        planets.add(\"Neptune\"\
    );\n        planets.add(\"Pluto\");\n        planets.add(\"Sun\");\n\n       \
    \ if (planets.contains(planet1) && planets.contains(planet2)) {\n            int\
    \ a = planets.indexOf(planet1);\n            int b = planets.indexOf(planet2);\n\
    \            int d = Integer.MAX_VALUE;\n            if (a > b) {\n          \
    \      a = a - 1;\n                b = b - 1;\n            }\n            for\
    \ (int i = a; i <= b; i++) {\n                for (int j = 0; j < planets.size();\
    \ j++) {\n                    int c = planets.indexOf(planets.get(j));\n     \
    \               if (c == i) {\n                        d = Math.min(c, d);\n \
    \                   }\n                }\n            }\n            for (int\
    \ i = 0; i < planets.size(); i++) {\n                int c = planets.indexOf(planets.get(i));\n\
    \                if (c == d) {\n                    result.add(planets.get(i));\n\
    \                }\n            }\n        }\n\n        if (planets.contains(planet1))\
    \ {\n            for (int i = 0; i < planets.size(); i++) {\n                int\
    \ c = planets.indexOf(planets.get(i));\n                if (c == planets.indexOf(planet1))\
    \ {\n                    result.add(planets.get(i));\n                }\n    \
    \        }\n        }\n\n        if (planets.contains(planet2)) {\n          \
    \  for (int i = 0; i < planets.size(); i++) {\n                int c = planets.indexOf(planets.get(i));\n\
    \                if (c == planets.indexOf(planet2)) {\n                    result.add(planets.get(i));\n\
    \                }\n            }\n        }\n\n        return result;", "   \
    \     ArrayList<String> result = new ArrayList<String>();\n        ArrayList<String>\
    \ list1 = new ArrayList<String>();\n        ArrayList<String> list2 = new ArrayList<String>();\n\
    \        List<String> list3 = new ArrayList<String>();\n        List<String> list4\
    \ = new ArrayList<String>();\n        List<String> list5 = new ArrayList<String>();\n\
    \        List<String> list6 = new ArrayList<String>();\n        List<String> list7\
    \ = new ArrayList<String>();\n        List<String> list8 = new ArrayList<String>();\n\
    \        List<String> list9 = new ArrayList<String>();\n        if (planet1.equalsIgnoreCase(planet2))\
    \ {\n            list1.add(planet1);\n            list2.add(planet1);\n      \
    \      list3.add(planet1);\n            list4.add(planet1);\n            list5.add(planet1);\n\
    \            list6.add(planet1);\n            list7.add(planet1);\n          \
    \  list8.add(planet1);\n            list9.add(planet1);\n        } else if (planet1.equals(planet2))\
    \ {\n            list1.add(planet1);\n            list2.add(planet1);\n      \
    \      list3.add(planet1);\n            list4.add(planet1);\n            list5.add(planet1);\n\
    \            list6.add(planet1);\n            list7.add(planet1);\n          \
    \  list8.add(planet1);\n            list9.add(planet1);\n        } else if (planet1.equalsIgnoreCase(planet2)\
    \ == false) {\n            list1.add(planet1);\n            list2.add(planet2);\n\
    \            list3.add(planet1);\n            list4.add(planet1);\n          \
    \  list5.add(planet2);\n            list6.add(planet1);\n            list7.add(planet2);\n\
    \            list8.add(planet1);\n            list9.add(planet2);\n        } else\
    \ if (planet1.equals(planet2) == false) {\n            list1.add(planet1);\n \
    \           list2.add(planet2);\n            list3.add(planet2);\n           \
    \ list4.add(planet1);\n            list5.add(planet2);\n            list6.add(planet2);\n\
    \            list7.add(planet2);\n            list8.add(planet1);\n          \
    \  list9.add(planet2);\n        }\n        for (String str1 : list1) {\n     \
    \       list2 = list1.stream().filter(x -> !x.equals(str1)).collect(Collectors.toList());\n\
    \            for (String str2 : list2) {\n                list3 = list2.stream().filter(x\
    \ -> !x.equals(str2)).collect(Collectors.toList());\n                for (String\
    \ str3 : list3) {\n", "        String planet1Orbit = getOrbit(planet1);\n    \
    \    String planet2Orbit = getOrbit(planet2);\n\n        if (planet1Orbit.equals(planet2Orbit))\
    \ {\n            ArrayList<String> arrOfPlanets = getPlanets(planet1Orbit);\n\
    \            arrOfPlanets.addAll(getPlanets(planet2Orbit));\n            return\
    \ arrOfPlanets;\n        }\n\n        // The planets do not orbit one another.\
    \ \n        return new ArrayList<String>();", "        \n        ArrayList<String>\
    \ planets = new ArrayList<String>(Arrays.asList(planet1, planet2));\n        \n\
    \        if(planets.isEmpty()){\n            return new ArrayList<String>();\n\
    \        }\n        \n        ArrayList<String> answer = new ArrayList<String>();\n\
    \        \n        for(int i=0; i<planets.size(); i++){\n            \n      \
    \      String planet = planets.get(i);\n            \n            // If planet\
    \ is Mercury, Venus, Earth, Mars, Jupiter, Saturn, \n            // Uranus, Neptune,\
    \ return an empty pair.\n            \n            if(planet.equals(\"Mercury\"\
    ) || planet.equals(\"Venus\") || \n               planet.equals(\"Earth\") ||\
    \ planet.equals(\"Mars\") || \n               planet.equals(\"Jupiter\") || planet.equals(\"\
    Saturn\") || \n               planet.equals(\"Uranus\") || planet.equals(\"Neptune\"\
    )){\n                \n                return new ArrayList<String>();\n     \
    \       }\n            \n            // Otherwise, calculate the orbital distance\
    \ to Sun and add the \n            // planets to the answer. \n            \n\
    \            double distance = getDistanceToSun(planet);\n            \n     \
    \       while(distance>0){\n                \n                answer.add(planet);\n\
    \                \n                distance--;\n            }\n        }\n   \
    \     \n        return answer;", "        ArrayList<String> orbits = new ArrayList<>();\n\
    \        try {\n            Method method = Problem.class.getMethod(\"orbits\"\
    , String.class, String.class);\n            String result = (String) method.invoke(null,\
    \ planet1, planet2);\n            orbits = Arrays.asList(result.split(\",\"));\n\
    \        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\
    \        return orbits;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (planet1 == null || planet2 == null) {\n            result.addAll(Collections.EMPTY_LIST);\n\
    \            return result;\n        }\n        double distance = calculateDistance(planet1,\
    \ planet2);\n        ArrayList<String> sortedOrbits = calculateOrbits(planet1,\
    \ planet2);\n        for (String orbit1 : sortedOrbits) {\n            for (String\
    \ orbit2 : sortedOrbits) {\n                if (orbit1.equals(orbit2)) {\n   \
    \                 continue;\n                }\n                double distance1\
    \ = calculateDistance(orbit1, planet1);\n                double distance2 = calculateDistance(orbit2,\
    \ planet2);\n                if (distance1 < distance) {\n                   \
    \ continue;\n                }\n                if (distance2 < distance) {\n\
    \                    continue;\n                }\n                result.add(orbit1);\n\
    \                result.add(orbit2);\n            }\n        }\n        return\
    \ result;", "        // Your code goes here\n        // if planet1 and planet2\
    \ are not strings or if they are not planet names, return an empty pair\n    \
    \    try {\n            PlanetClass planet1 = PlanetClass.valueOf(planet1);\n\
    \            PlanetClass planet2 = PlanetClass.valueOf(planet2);\n           \
    \ if(planet1 == null || planet2 == null || planet1 == planet2) return new ArrayList<String>();\n\
    \            Planet pl1 = PlanetClass.valueOf(planet1);\n            Planet pl2\
    \ = PlanetClass.valueOf(planet2);\n            double planetDistance = getPlanetDistance(pl1,\
    \ pl2);\n            return new ArrayList<String>(planet1.getOrbits().stream()\n\
    \                    .filter(o -> getPlanetDistance(o, pl2) > planetDistance)\n\
    \                    .sorted(Comparator.comparingDouble(o -> getPlanetDistance(o,\
    \ pl2)))\n                    .collect(Collectors.toList()));\n        } catch\
    \ (Exception e) {\n            e.printStackTrace();\n            return new ArrayList<String>();\n\
    \        }", "        if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Neptune\")) {\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\", (String)\"Uranus\"));\n        } else if (planet1.equalsIgnoreCase(\"\
    Venus\") && planet2.equalsIgnoreCase(\"Earth\")) {\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Venus\"));\n        } else if (planet1.equalsIgnoreCase(\"Earth\") && planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\"));\n        } else if (planet1.equalsIgnoreCase(\"\
    Mars\") && planet2.equalsIgnoreCase(\"Venus\")) {\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Mars\", (String)\"Jupiter\", (String)\"Saturn\"));\n        } else if (planet1.equalsIgnoreCase(\"\
    Jupiter\") && planet2.equalsIgnoreCase(\"Uranus\")) {\n            return new\
    \ ArrayList<String>(Arrays.asList((String)\"Jupiter\"));\n        } else if (planet1.equalsIgnoreCase(\"\
    Saturn\") && planet2.equalsIgnoreCase(\"Uranus\")) {\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Saturn\"));\n        } else if (planet1.equalsIgnoreCase(\"Uranus\") && planet2.equalsIgnoreCase(\"\
    Neptune\")) {\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Uranus\"));\n        } else if (planet1.equalsIgnoreCase(\"Neptune\") && planet2.equalsIgnoreCase(\"\
    Earth\")) {\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Earth\"));\n        } else if (planet1.equalsIgnoreCase(\"Mercury\") && planet2.equalsIgnoreCase(\"\
    Earth\")) {\n            return new ArrayList<String>(Arrays.asList((String)\"\
    Mercury\"));\n        } else {\n            return new ArrayList<String>();\n\
    \        }", "        ArrayList list = new ArrayList();\n        Planet[] planetsArray\
    \ = new Planet[]{new Mercury(), new Venus(), new Earth(), \n            new Mars(),\
    \ new Jupiter(), new Saturn(), new Uranus(), new Neptune()};\n        ArrayList\
    \ list2 = new ArrayList();\n        for (int i = 0; i < planetsArray.length; i++)\
    \ {\n            if (planet1.equals(planetsArray[i].getPlanet())) {\n        \
    \        list.add(planetsArray[i].getPlanet());\n            }\n        }\n  \
    \      for (int j = 0; j < planetsArray.length; j++) {\n            if (planet2.equals(planetsArray[j].getPlanet()))\
    \ {\n                list2.add(planetsArray[j].getPlanet());\n            }\n\
    \        }\n        System.out.println(\"list : \" + list);\n        System.out.println(\"\
    list2 : \" + list2);\n        if (planet1.equals(planet2)) {\n            return\
    \ new ArrayList<String>(list);\n        }\n        if (planet1.equals(list.get(list.size()\
    \ - 1))) {\n            Collections.sort(list);\n            Collections.sort(list2);\n\
    \            if (list.get(0) != list2.get(0)) {\n                return new ArrayList<String>();\n\
    \            }\n            list.add(list.get(list.size() - 1));\n           \
    \ Collections.sort(list);\n            System.out.println(\"list : \" + list);\n\
    \            return new ArrayList<String>(list);\n        }\n        if (planet2.equals(list2.get(list2.size()\
    \ - 1))) {\n            Collections.sort(list);\n            Collections.sort(list2);\n\
    \            if (list2.get(0) != list.get(list.size() - 1)) {\n              \
    \  return new ArrayList<String>();\n            }\n            list2.add(list2.get(list2.size()\
    \ - 1));\n            Collections.sort(list2);\n            System.out.println(\"\
    list2 : \" + list2);\n            return new ArrayList<String>(list2);\n     \
    \   }\n        if (planet1.equals(list.get(0))) {\n            Collections.sort(list);\n\
    \            Collections.sort(list2);\n            if (list2.get(0) != list.get(list.size()\
    \ - 1)) {\n                return new ArrayList<String>();\n            }\n  \
    \          list.add(list2.get(list2.size() - 1));\n            Collections.sort(list);\n\
    \            System.out.println(\"list : \" + list);\n            return new ArrayList<String>(list);\n\
    \        }\n        if (planet2.equals(list2.get(0))) {\n            Collections.sort(list);\n\
    \            Collections.sort(list2);\n            if (list.get(0) != list2.get(list2.size()\
    \ - 1)) {\n                return new ArrayList<String>();\n            }\n  \
    \          list2.add(list.get(list.size() - 1));\n            Collections.sort(list2);\n\
    \            System.out.println(\"list2 : \" + list2);\n            return new\
    \ ArrayList<String>(list2);\n        }\n        Collection", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        ArrayList<String> temp1 = new ArrayList<String>();\n\
    \        ArrayList<String> temp2 = new ArrayList<String>();\n        \n      \
    \  // For Mercury and Venus\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Venus\"))\n            temp1 = new ArrayList<String>(Arrays.asList((String)\"\
    Venus\"));\n        \n        // For Mercury and Earth\n        if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Earth\"))\n            temp1 = new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\"));\n        \n        // For Mercury and Mars\n   \
    \     if (planet1.equals(\"Mercury\") && planet2.equals(\"Mars\"))\n         \
    \   temp1 = new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"\
    Earth\", (String)\"Mars\"));\n        \n        // For Mercury and Jupiter\n \
    \       if (planet1.equals(\"Mercury\") && planet2.equals(\"Jupiter\"))\n    \
    \        temp1 = new ArrayList<String>(Arrays.asList((String)\"Venus\", (String)\"\
    Earth\", (String)\"Mars\", (String)\"Jupiter\"));\n        \n        // For Mercury\
    \ and Saturn\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\"\
    ))\n            temp1 = new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"Saturn\"\
    ));\n        \n        // For Mercury and Uranus\n        if (planet1.equals(\"\
    Mercury\") && planet2.equals(\"Uranus\"))\n            temp1 = new ArrayList<String>(Arrays.asList((String)\"\
    Venus\", (String)\"Earth\", (String)\"Mars\", (String)\"Jupiter\", (String)\"\
    Saturn\", (String)\"Uranus\"));\n        \n        // For Venus and Earth\n  \
    \      if (planet1.equals(\"Venus\") && planet2.equals(\"Earth\"))\n         \
    \   temp2 = new ArrayList<String>(Arrays.asList((String)\"Venus\"));\n       \
    \ \n        // For Venus and Mars\n        if (planet1.equals(\"Venus\") && planet2.equals(\"\
    Mars\"))\n            temp2 = new ArrayList<String>(Arrays.asList((String)\"Venus\"\
    , (String)\"Mars\"));\n        \n        // For Venus and Jupiter\n        if\
    \ (planet1.equals(\"Venus\") && planet2.equals(\"Jupiter\"))", "        if (planet1\
    \ == null || planet2 == null) {\n            return new ArrayList<String>();\n\
    \        }\n        String[] planets = { \"Mercury\", \"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n        ArrayList<String>\
    \ res = new ArrayList<String>();\n        String[] a1 = planet1.split(\"\");\n\
    \        String[] a2 = planet2.split(\"\");\n        for (String i : planets)\
    \ {\n            if (a1.equals(a2) && i.equals(planet1)) {\n                res.add(i);\n\
    \            } else if (a1.equals(a2) && i.equals(planet2)) {\n              \
    \  res.add(planet2);\n            } else if (i.equals(a1)) {\n               \
    \ res.add(i);\n            } else if (i.equals(a2)) {\n                res.add(a2);\n\
    \            }\n        }\n        ArrayList<String> list = new ArrayList<String>();\n\
    \        list.add(planet1);\n        list.add(planet2);\n        res.add(list);\n\
    \        res.add(list);\n        res.add(list);\n        res.add(list);\n    \
    \    list.add(planet1);\n        list.add(planet2);\n        res.add(list);\n\
    \        res.add(list);\n        res.add(list);\n        res.add(list);\n    \
    \    return res;", "        ArrayList<String> planets = new ArrayList<String>();\n\
    \        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"))\n   \
    \         planets.add(\"Venus\");\n        if (planet1.equals(\"Venus\") && planet2.equals(\"\
    Jupiter\"))\n            planets.add(\"Earth\");\n        if (planet1.equals(\"\
    Earth\") && planet2.equals(\"Mercury\"))\n            planets.add(\"Mars\");\n\
    \        if (planet1.equals(\"Mars\") && planet2.equals(\"Jupiter\"))\n      \
    \      planets.add(\"Jupiter\");\n        if (planet1.equals(\"Jupiter\") && planet2.equals(\"\
    Mercury\"))\n            planets.add(\"Saturn\");\n        if (planet1.equals(\"\
    Saturn\") && planet2.equals(\"Mercury\"))\n            planets.add(\"Uranus\"\
    );\n        if (planet1.equals(\"Uranus\") && planet2.equals(\"Neptune\"))\n \
    \           planets.add(\"Neptune\");\n        if (planet1.equals(\"Neptune\"\
    ) && planet2.equals(\"Venus\"))\n            planets.add(\"Mercury\");\n     \
    \   return planets;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        if(planet1.equalsIgnoreCase(planet2)) {\n            result.add(planet1);\n\
    \            return result;\n        }\n        if(planet1.equalsIgnoreCase(\"\
    Earth\") || planet1.equalsIgnoreCase(\"Mars\") || planet1.equalsIgnoreCase(\"\
    Venus\")) {\n            result.add(planet1);\n            return result;\n  \
    \      }\n        if(planet2.equalsIgnoreCase(\"Earth\") || planet2.equalsIgnoreCase(\"\
    Mars\") || planet2.equalsIgnoreCase(\"Venus\")) {\n            result.add(planet2);\n\
    \            return result;\n        }\n        if(planet1.equalsIgnoreCase(\"\
    Mercury\") || planet1.equalsIgnoreCase(\"Venus\")) {\n            result.add(planet1);\n\
    \            return result;\n        }\n        if(planet2.equalsIgnoreCase(\"\
    Mercury\") || planet2.equalsIgnoreCase(\"Venus\")) {\n            result.add(planet2);\n\
    \            return result;\n        }\n        if(planet1.equalsIgnoreCase(\"\
    Jupiter\") || planet1.equalsIgnoreCase(\"Saturn\")) {\n            result.add(planet1);\n\
    \            return result;\n        }\n        if(planet2.equalsIgnoreCase(\"\
    Jupiter\") || planet2.equalsIgnoreCase(\"Saturn\")) {\n            result.add(planet2);\n\
    \            return result;\n        }\n        if(planet1.equalsIgnoreCase(\"\
    Neptune\") || planet1.equalsIgnoreCase(\"Uranus\")) {\n            result.add(planet1);\n\
    \            return result;\n        }\n        if(planet2.equalsIgnoreCase(\"\
    Neptune\") || planet2.equalsIgnoreCase(\"Uranus\")) {\n            result.add(planet2);\n\
    \            return result;\n        }\n        return result;", "        ArrayList<String>\
    \ b = new ArrayList<>();\n        ArrayList<String> a = new ArrayList<>();\n \
    \       a.add((String)\"Mercury\");\n        a.add((String)\"Venus\");\n     \
    \   a.add((String)\"Earth\");\n        a.add((String)\"Mars\");\n        a.add((String)\"\
    Jupiter\");\n        a.add((String)\"Saturn\");\n        a.add((String)\"Uranus\"\
    );\n        a.add((String)\"Neptune\");\n        a.add((String)\"Pluto\");\n \
    \       b.add((String)\"Mercury\");\n        b.add((String)\"Venus\");\n     \
    \   b.add((String)\"Earth\");\n        b.add((String)\"Mars\");\n        b.add((String)\"\
    Jupiter\");\n        b.add((String)\"Saturn\");\n        b.add((String)\"Uranus\"\
    );\n        b.add((String)\"Neptune\");\n        b.add((String)\"Pluto\");\n \
    \       b.add((String)\"Mercury\");\n        b.add((String)\"Venus\");\n     \
    \   b.add((String)\"Earth\");\n        b.add((String)\"Mars\");\n        b.add((String)\"\
    Jupiter\");\n        b.add((String)\"Saturn\");\n        b.add((String)\"Uranus\"\
    );\n        b.add((String)\"Neptune\");\n        b.add((String)\"Pluto\");\n \
    \       b.add((String)\"Mercury\");\n        b.add((String)\"Venus\");\n     \
    \   b.add((String)\"Earth\");\n        b.add((String)\"Mars\");\n        b.add((String)\"\
    Jupiter\");\n        b.add((String)\"Saturn\");\n        b.add((String)\"Uranus\"\
    );\n        b.add((String)\"Neptune\");\n        b.add((String)\"Pluto\");\n \
    \       b.add((String)\"Mercury\");\n        b.add((String)\"Venus\");\n     \
    \   b.add((String)\"Earth\");\n        b.add((String)\"Mars\");\n        b.add((String)\"\
    Jupiter\");\n        b.add((String)\"Saturn\");\n        b.add((String)\"Uranus\"\
    );\n        b.add((String)\"Neptune\");\n        b.add((String)\"Pluto\");\n \
    \       b.add((String)\"Mercury\");\n        b.add((String)\"Venus\");\n     \
    \   b.add((String", "        // Your code here\n        Map<String, String> orbitMap\
    \ = new HashMap<>();\n        orbitMap.put(\"Mercury\", \"Venus\");\n        orbitMap.put(\"\
    Venus\", \"Earth\");\n        orbitMap.put(\"Earth\", \"Mars\");\n        orbitMap.put(\"\
    Mars\", \"Jupiter\");\n        orbitMap.put(\"Jupiter\", \"Saturn\");\n      \
    \  orbitMap.put(\"Saturn\", \"Uranus\");\n        orbitMap.put(\"Uranus\", \"\
    Neptune\");\n        orbitMap.put(\"Neptune\", \"Mercury\");\n        if (planet1.equals(planet2))\n\
    \            return (new ArrayList<String>());\n        if (orbitMap.containsKey(planet1)\
    \ && orbitMap.containsKey(planet2)) {\n            String name1 = orbitMap.get(planet1);\n\
    \            String name2 = orbitMap.get(planet2);\n            double angle1\
    \ = Math.toRadians((Math.atan((Math.toRadians(Math.sin(Math.toRadians(Math.toRadians(Double.parseDouble(name2.split(\"\
    \\\\^\")[1])) - Math.toRadians(Math.sin(Math.toRadians(Math.toRadians(Double.parseDouble(name1.split(\"\
    \\\\^\")[1]))))) / Math.sin(Math.toRadians(Math.toRadians(Double.parseDouble(name2.split(\"\
    \\\\^\")[1])))))) / Math.PI));\n            double angle2 = Math.toRadians((Math.atan((Math.toRadians(Math.sin(Math.toRadians(Math.toRadians(Double.parseDouble(name1.split(\"\
    \\\\^\")[1]))) - Math.toRadians(Math.sin(Math.toRadians(Math.toRadians(Double.parseDouble(name2.split(\"\
    \\\\^\")[1]))))) / Math.sin(Math.toRadians(Math.toRadians(Double.parseDouble(name1.split(\"\
    \\\\^\")[1])))))))) / Math.PI);\n            double angle = Math.abs(angle2 -\
    \ angle1);\n            ArrayList<String> result = new ArrayList<String>();\n\
    \            result.add(name1);\n            result.add(name2);\n            result.addAll(bf(name1,\
    \ name2));\n            Collections.sort(result, new Comparator<String>() {\n\
    \                public int compare(String o1, String o2) {\n                \
    \    double o1dist = distance(o1, planet2);\n                    double o2dist\
    \ = distance(o2, planet2);\n                    double distDiff = o1dist - o2dist;\n\
    \                    return (distDiff < 0 ? -1 : (distDiff > 0 ? 1 : 0));\n  \
    \              }\n            });\n            return (new ArrayList<String>(result));\n\
    \        } else {\n", "        ArrayList<String> res = new ArrayList<String>();\n\
    \        \n        double d1 = ((double) java.lang.Math.cos(new Math().PI/4*Math.atan2(planet1.hashCode(),planet2.hashCode())));\n\
    \        double d2 = ((double) java.lang.Math.cos(new Math().PI/4*Math.atan2(planet2.hashCode(),planet1.hashCode())));\n\
    \        \n        if(d1 < d2) {\n            int x = 0;\n            for(int\
    \ i = 0;i<planet1.length(); i++){\n                if(planet1.charAt(i) == 'M'){\n\
    \                    if(planet1.charAt(i+1) == 'r'){\n                       \
    \ int y = planet1.indexOf(i+1);\n                        String p1 = planet1.substring(0,\
    \ y);\n                        String p2 = planet1.substring(y+1);\n         \
    \               for(int j = 0;j<planet2.length();j++){\n                     \
    \       if(planet2.charAt(j) == 'u'){\n                                String\
    \ p3 = planet2.substring(0, j);\n                                String p4 = planet2.substring(j+1);\n\
    \                                if(p1.equals(p3) && p1.equals(p4)){\n       \
    \                             res.add((String) planet2.charAt(0));\n         \
    \                           break;\n                                }\n      \
    \                      }\n                        }\n                    }\n \
    \               }\n            }\n        }\n        return res;", "        if\
    \ (planet1 == null || planet2 == null) {\n            System.out.println(\"The\
    \ function is not correctly written.\");\n            return new ArrayList<>();\n\
    \        } else {\n            try {\n                Planet planet1 = Planet.valueOf(planet1);\n\
    \                Planet planet2 = Planet.valueOf(planet2);\n                Planet\
    \ orbit_planet1 = Planet.valueOf(planet1 + \" orbit\");\n                Planet\
    \ orbit_planet2 = Planet.valueOf(planet2 + \" orbit\");\n                Planet\
    \ planet_1 = Planet.valueOf(planet1 + \" planet\");\n                Planet planet_2\
    \ = Planet.valueOf(planet2 + \" planet\");\n                Planet planet_3 =\
    \ Planet.valueOf(planet1 + \" planet\");\n                Planet planet_4 = Planet.valueOf(planet2\
    \ + \" planet\");\n                Planet planet_5 = Planet.valueOf(planet1 +\
    \ \" planet\");\n                Planet planet_6 = Planet.valueOf(planet2 + \"\
    \ planet\");\n                Planet planet_7 = Planet.valueOf(planet1 + \" planet\"\
    );\n                Planet planet_8 = Planet.valueOf(planet2 + \" planet\");\n\
    \                double distance = Math.sqrt((planet1.getPlanetMass() + planet2.getPlanetMass()));\n\
    \                double x = 0;\n                double y = 0;\n              \
    \  double z = 0;\n                double x1 = 0.0;\n                double y1\
    \ = 0.0;\n                double z1 = 0.0;\n                double x2 = 0.0;\n\
    \                double y2 = 0.0;\n                double z2 = 0.0;\n        \
    \        double x3 = 0.0;\n                double y3 = 0.0;\n                double\
    \ z3 = 0.0;\n                double x4 = 0.0;\n                double y4 = 0.0;\n\
    \                double z4 = 0.0;\n                double x5 = 0.0;\n        \
    \        double y5 = 0.0;\n                double z5 = 0.0;\n                double\
    \ x6 = 0.0;\n                double y6 = 0.0;\n                double z6 = 0.0;\n\
    \                double x7 = 0.0;\n                double y7 = 0.0;\n        \
    \        double z7 = 0.0;\n                double x8 = 0.0;\n                double\
    \ y8 = 0.0;\n                double z8 = 0.0;\n                double x9 = 0.0;\n\
    \                double y9 = 0.0;\n                double z9 = 0.0;\n        \
    \        double x10 = 0.0;\n                double y10 = 0.0;\n              \
    \  double z10 = 0.0;\n                double x11 = 0.0;\n                double\
    \ y11 = 0.0;\n                double z11 = 0.0;\n                double x12 =\
    \ 0.0;\n", "        ArrayList<String> result;\n        ArrayList<String> name1\
    \ = new ArrayList<String>();\n        ArrayList<String> name2 = new ArrayList<String>();\n\
    \        ArrayList<String> temp = new ArrayList<String>();\n        ArrayList<String>\
    \ temp2 = new ArrayList<String>();\n        int n1 = 0, n2 = 0, counter1 = 0;\n\
    \        int tempCounter = 0;\n        int index1 = 0;\n        int index2 = 0;\n\
    \        int index3 = 0;\n        int index4 = 0;\n        int index5 = 0;\n \
    \       int index6 = 0;\n        int index7 = 0;\n        int index8 = 0;\n  \
    \      String[] names1 = {planet1};\n        String[] names2 = {planet2};\n  \
    \      if (planet1.equalsIgnoreCase(\"Mercury\")) {\n            for (int i =\
    \ 0; i < names1.length; i++) {\n                if (names1[i].equalsIgnoreCase(\"\
    Jupiter\")) {\n                    temp.add(names1[i]);\n                    n1\
    \ = n1 + 1;\n                }\n            }\n            for (int i = 0; i <\
    \ names2.length; i++) {\n                if (names2[i].equalsIgnoreCase(\"Neptune\"\
    )) {\n                    temp2.add(names2[i]);\n                    n2 = n2 +\
    \ 1;\n                }\n            }\n            Collections.sort(temp);\n\
    \            Collections.sort(temp2);\n            counter1 = n1;\n          \
    \  index1 = n1;\n            tempCounter = counter1;\n        }\n        if (planet2.equalsIgnoreCase(\"\
    Mercury\")) {\n            for (int i = 0; i < names2.length; i++) {\n       \
    \         if (names2[i].equalsIgnoreCase(\"Jupiter\")) {\n                   \
    \ temp2.add(names2[i]);\n                    n2 = n2 + 1;\n                }\n\
    \            }\n            for (int i = 0; i < names1.length; i++) {\n      \
    \          if (names1[i].equalsIgnoreCase(\"Neptune\")) {\n                  \
    \  temp.add(names1[i]);\n                    n1 = n1 + 1;\n                }\n\
    \            }\n            Collections.sort(temp);\n            Collections.sort(temp2);\n\
    \            counter1 = n2;\n            index1 = n2;\n            tempCounter\
    \ = counter1;\n        }\n        if (planet1.equalsIgnoreCase(\"Venus\")) {\n\
    \            for (int i = 0; i < names1.length; i++) {\n                if (names1[i].equalsIgnoreCase(\"\
    Earth\")) {\n                    temp.add(names1[i]);\n                    n1\
    \ = n1 + 1;\n                }\n            }\n            for (int i = 0; i <\
    \ names2.length; i++) {\n                if (names2[i].equalsIgnoreCase(\"Mercury\"\
    )) {\n                    temp2.add(names2[i]);\n                    n2 = n2 +\
    \ 1;\n                }\n            }\n            Collections.sort(temp);\n\
    \            Collections.sort(temp2);\n            counter1 = n1;\n          \
    \  index1 = n1;\n            tempCounter = counter1;\n        }\n        if (planet2.equalsIgnoreCase(\"\
    Venus\")) {\n            for (int i = 0; i < names2.length; i++) {\n         \
    \       if (names2[i].equalsIgnore", "        // Write your code here\n      \
    \  if (planet1.equals(\"Mercury\") && planet2.equals(\"Earth\")) {\n         \
    \   return new ArrayList<String>(Arrays.asList(\"Venus\"));\n        }\n     \
    \   if (planet1.equals(\"Mercury\") && planet2.equals(\"Venus\")) {\n        \
    \    return new ArrayList<String>(Arrays.asList(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\"));\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Mars\")) {\n            return new ArrayList<String>(Arrays.asList(\"Jupiter\"\
    , \"Saturn\"));\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"\
    Jupiter\")) {\n            return new ArrayList<String>(Arrays.asList(\"Saturn\"\
    ));\n        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Saturn\"\
    )) {\n            return new ArrayList<String>(Arrays.asList(\"Uranus\"));\n \
    \       }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Uranus\"\
    )) {\n            return new ArrayList<String>(Arrays.asList(\"Neptune\"));\n\
    \        }\n        if (planet1.equals(\"Mercury\") && planet2.equals(\"Neptune\"\
    )) {\n            return new ArrayList<String>(Arrays.asList(\"Mercury\"));\n\
    \        }\n        if (planet1.equals(\"Venus\") && planet2.equals(\"Earth\"\
    )) {\n            return new ArrayList<String>(Arrays.asList(\"Earth\", \"Mars\"\
    , \"Jupiter\", \"Saturn\", \"Uranus\"));\n        }\n        if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Mars\")) {\n            return new ArrayList<String>(Arrays.asList(\"\
    Jupiter\", \"Saturn\", \"Uranus\"));\n        }\n        if (planet1.equals(\"\
    Venus\") && planet2.equals(\"Jupiter\")) {\n            return new ArrayList<String>(Arrays.asList(\"\
    Saturn\", \"Uranus\"));\n        }\n        if (planet1.equals(\"Venus\") && planet2.equals(\"\
    Saturn\")) {\n            return new ArrayList<String>(Arrays.asList(\"Neptune\"\
    ));\n        }\n        if (planet1.equals(\"Venus\") && planet2.equals(\"Uranus\"\
    )) {\n            return new ArrayList<String>(Arrays.asList(\"Mercury\"));\n\
    \        }\n        if (planet1.equals(\"Venus\") && planet2.equals(\"Neptune\"\
    )) {\n            return new ArrayList<String>(Arrays.asList(\"Earth\", \"", " \
    \       ArrayList<String> results = new ArrayList<>();\n        ArrayList<String>\
    \ list = new ArrayList<>();\n        if (planet1.length() > planet2.length())\
    \ {\n            list = list2;\n        } else {\n            list = list1;\n\
    \        }\n        for (String s: list) {\n            if (planet1.equals(s.substring(0,\
    \ planet1.length()))) {\n                if (planet2.equals(s.substring(planet1.length(),\
    \ planet1.length() + planet2.length()))) {\n                    results.add(s);\n\
    \                }\n            }\n        }\n        return results;"]
stop_tokens:
- "\n    }\n"
