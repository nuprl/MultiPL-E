language: java
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return arr.stream().filter(i -> i%10L > 0l).count();\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4mp5t70i.java:27)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        Set<Long> nums = new HashSet<>();\n        for (Long l : arr)\
    \ {\n            if (l > 0) nums.add(l);\n        }\n        return nums.size();\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdox_9kjw.java:29)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long nums = 0;\n        for (Long l : arr) {\n            if\
    \ (l > 0) nums++;\n            if (l < 0l) nums += l / 10;\n        }\n      \
    \  return nums;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplda9lfw6.java:33)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        Long sumOfFirstDigits = arr.get(0).longValue();\n        Long\
    \ sumOfSecondDigits = arr.get(1).longValue();\n        if (sumOfFirstDigits <\
    \ 0 || sumOfSecondDigits < 0)\n            return 1l;\n        \n        long\
    \ firstSignedDigit = arr.get(0).longValue() % 10;\n        long secondSignedDigit\
    \ = arr.get(1).longValue() % 10;\n\n        if (firstSignedDigit == secondSignedDigit\
    \ && firstSignedDigit > 0)\n            return 1l;\n        else if (firstSignedDigit\
    \ == secondSignedDigit && firstSignedDigit < 0)\n            return (-firstSignedDigit\
    \ + 1l) % 10;\n        else if (firstSignedDigit < secondSignedDigit)\n      \
    \      return (firstSignedDigit + 1l) % 10;\n        else\n            return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.countNums(tmpz9lqdxf_.java:20)\n\tat Problem.main(tmpz9lqdxf_.java:38)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        int count = 0;\n        for\
    \ (long i : arr) {\n            if (i >= 0) {\n                count++;\n    \
    \        } else {\n                count += Math.abs(i / 10);\n            }\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8jl7eci1.java:33)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (Long l : arr) {\n            sum\
    \ += Math.signum(l);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoly_ikct.java:28)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (long num : arr) {\n            if\
    \ (num > 0) {\n                sum += Math.abs(num);\n            }\n        \
    \    if (num < 0) {\n                sum += num * (num / Math.abs(num));\n   \
    \         }\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplx3yi936.java:33)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        int result = 0;\n        for (long l : arr) {\n            int\
    \ digitSum = sumDigits(l);\n            if (digitSum > 0) {\n                result++;\n\
    \            }\n        }\n        return (long) result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph2ptp_8b.java:22: error: cannot find symbol\n            int digitSum\
    \ = sumDigits(l);\n                           ^\n  symbol:   method sumDigits(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.isEmpty()) {\n            return 0l;\n        }\n  \
    \      long result = 0;\n        long digit = 0;\n        boolean negative = false;\n\
    \        long positiveNumber = 0;\n        long previousSum = 0;\n        for\
    \ (int i = 0; i < arr.size() - 1; i++) {\n            positiveNumber += arr.get(i);\n\
    \            if (positiveNumber < 0) {\n                negative = true;\n   \
    \             positiveNumber += 1;\n            }\n            if (positiveNumber\
    \ > Integer.MAX_VALUE) {\n                System.out.println(\"Number too big\
    \ to be converted to int\");\n                return 0l;\n            }\n    \
    \        previousSum = positiveNumber;\n        }\n        if (previousSum < Integer.MIN_VALUE)\
    \ {\n            System.out.println(\"Number too small to be converted to int\"\
    );\n            return 0l;\n        }\n        previousSum -= 1;\n        positiveNumber\
    \ += 1;\n        for (int i = 0; i < arr.size(); i++) {\n            positiveNumber\
    \ += arr.get(i);\n            digit = positiveNumber % 10;\n            if (digit\
    \ < 10) {\n                result += digit;\n            }\n            positiveNumber\
    \ /= 10;\n        }\n        if (negative) {\n            return -result;\n  \
    \      }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp78umv1k1.java:61)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) return 0L;\n        if (arr.size() == 1)\
    \ return 1L;\n        long sum = 0L;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            Long n = arr.get(i);\n            int digits = n % 10;\n\
    \            sum += digits > 0 ? digits : -(digits + 1);\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb10x7yrz.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digits = n % 10;\n                       \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) {\n            return 0L;\n        }\n\
    \        Long sum = arr.get(0);\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            Long val = arr.get(i);\n            if (val.signum() == 1) {\n\
    \                sum *= 10;\n                sum += val;\n            } else {\n\
    \                sum += val;\n            }\n        }\n        return sum.signum()\
    \ == 1 ? 1L : 3L;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp10tsr8a5.java:26: error: method signum in class Long cannot be\
    \ applied to given types;\n            if (val.signum() == 1) {\n            \
    \       ^\n  required: long\n  found:    no arguments\n  reason: actual and formal\
    \ argument lists differ in length\n/tmp/tmp10tsr8a5.java:33: error: method signum\
    \ in class Long cannot be applied to given types;\n        return sum.signum()\
    \ == 1 ? 1L : 3L;\n                  ^\n  required: long\n  found:    no arguments\n\
    \  reason: actual and formal argument lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        Long sum = 0L;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            sum += arr.get(i);\n        }\n        return sum;\n    }\n \
    \   public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ob6qn6k.java:28)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (Long i : arr) {\n            sum\
    \ += i;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfkgs2aqz.java:28)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long result = 0l;\n        for (long i : arr) {\n          \
    \  result += Math.abs(i);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_snv6sk4.java:28)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Return the number of elements which has a sum of digits >\
    \ 0.\n        // If a number is negative, then its first signed digit will be\
    \ negative:\n        // e.g. -123 has signed digits -1, 2, and 3.\n        //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n        // (0l)\n   \
    \     // >>> countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l,\
    \ (long)-11l))))\n        // (1l)\n        // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n        // (3l)\n        long ans = 0;\n        for\
    \ (long i : arr) {\n            if (i > 0) {\n                long firstSum =\
    \ 0;\n                for (long j : arr) {\n                    firstSum += j;\n\
    \                    if (firstSum > i) {\n                        break;\n   \
    \                 }\n                }\n                if (firstSum > i) {\n\
    \                    ans += 1;\n                }\n            }\n        }\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb_01z6fy.java:52)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // TODO Implement this function\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjze1agxp.java:21: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        long count = Long.MIN_VALUE;\n  \
    \      for (Long v : arr) {\n            if (v > 0) {\n                long n\
    \ = Math.abs(v);\n                for (int i = Integer.MIN_VALUE; i <= n; i++)\
    \ {\n                    if (n % i == 0) {\n                        count += n\
    \ - i;\n                    }\n                }\n            } else {\n     \
    \           int n = Integer.MIN_VALUE;\n                if (v < 0) {\n       \
    \             n = Math.abs(v);\n                }\n                for (int i\
    \ = -n; i <= n; i++) {\n                    if (v & 1 == i) {\n              \
    \          count += v;\n                    }\n                }\n           \
    \ }\n        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt3m8be4k.java:33: error: incompatible types: possible lossy conversion\
    \ from long to int\n                    n = Math.abs(v);\n                   \
    \             ^\n/tmp/tmpt3m8be4k.java:36: error: bad operand types for binary\
    \ operator '&'\n                    if (v & 1 == i) {\n                      \
    \    ^\n  first type:  Long\n  second type: boolean\n2 errors\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) return 0L;\n        long firstNegative\
    \ = arr.stream().map(l -> -l).min(Long::compareTo).get();\n        if (firstNegative\
    \ > 0) return 0L;\n        return arr.stream().filter(l -> l > 0).count();\n \
    \   }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph0fqsz2i.java:31)\n"
  stdout: ''
  timestamp: 1660011554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            int digit = arr.get(i) - Math.abs(arr.get(i) % 10);\n       \
    \     sum += Math.abs(digit);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzh3sjek4.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = arr.get(i) - Math.abs(arr.get(i) %\
    \ 10);\n                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        int sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            long num = arr.get(i);\n            sum += num;\n            if (sum\
    \ < 0) {\n                sum = sum + 10 * (Math.abs(num));\n            }\n \
    \       }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1mkneshk.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n                sum = sum + 10 * (Math.abs(num));\n      \
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // if arr is empty or null, return 0\n        if (arr.size()\
    \ == 0 || arr.isEmpty()) return 0;\n        // arr contains negative and positive\
    \ nums\n        Iterator<Long> i = arr.iterator();\n        while (i.hasNext())\
    \ {\n            Long l = i.next();\n            long res = 0;\n            while\
    \ (l > 0) {\n                res += l % 10;\n                l /= 10;\n      \
    \      }\n            if (res > 0) return res + 1;\n        }\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk145t44u.java:38)\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return arr.stream().filter((item) -> item.longValue() > 0)\n\
    \            .mapToLong((item) -> item.intValue()).count();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqirxw3pp.java:29)\n"
  stdout: ''
  timestamp: 1660011554
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long result = 0;\n        for (Long value : arr) {\n       \
    \     long sum = 0;\n            for (int i = arr.size(); i-- > 0;)\n        \
    \        sum += Math.abs(value.get(i));\n            if (sum > 0) {\n        \
    \        result++;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphp2ye3fb.java:24: error: cannot find symbol\n                sum\
    \ += Math.abs(value.get(i));\n                                     ^\n  symbol:\
    \   method get(int)\n  location: variable value of type Long\n1 error\n"
  stdout: ''
  timestamp: 1660011553
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long nums = 0;\n        for (Long n : arr)\n            if (n\
    \ > 0)\n                nums += (n - 1) / 10;\n                \n        return\
    \ nums;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq9v_r54v.java:30)\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        Long[] arr2 = arr.toArray(new Long[arr.size()]);\n        int\
    \ i = 0;\n        int num = 0;\n        while (i < arr2.length) {\n          \
    \  if (arr2[i] < 0) {\n                arr2[i] = arr2[i] - 10 * Math.abs(arr2[i]);\n\
    \            }\n            long l = arr2[i];\n            num += l;\n       \
    \     arr2[i] = 0;\n            i++;\n        }\n        return num;\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_jj15og.java:29: error: incompatible types: int cannot be converted\
    \ to Long\n            arr2[i] = 0;\n                      ^\n1 error\n"
  stdout: ''
  timestamp: 1660011555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // return 0 if the array is empty or the array contains only\
    \ zeros\n        if (arr.isEmpty() || arr.stream().allMatch(i -> i == 0) || arr.stream().anyMatch(i\
    \ -> i < 0))\n            return 0;\n\n        // count the numbers with non-negative\
    \ sum\n        long count = 0;\n        for (Long i : arr) {\n            long\
    \ sum = 0;\n            while (i != 0) {\n                sum += i % 10;\n   \
    \             i /= 10;\n            }\n            if (sum > 0) {\n          \
    \      count++;\n            }\n        }\n\n        return count;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa6wgchst.java:42)\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Solution 1: Using Collection.stream() to stream through the\
    \ array, keeping track\n        // of how many times each digit is found, and\
    \ then summing all the times\n        return arr.stream()\n            .collect(Collectors.groupingBy(l\
    \ -> l.get(0)))\n            .entrySet()\n            .stream()\n            .filter(e\
    \ -> e.getValue() > 0)\n            .mapToLong(e -> e.getValue())\n          \
    \  .sum();\n\n        // Solution 2: Using a variable to keep track of how many\
    \ times each digit is found\n        // and using for loop to iterate through\
    \ the array\n        // (keep in mind this requires the array to have at least\
    \ two elements)\n        long sum = 0;\n        long count = 0;\n        long\
    \ digit = 0;\n        for(Long num : arr) {\n            if(num > 0) {\n     \
    \           digit = num % 10;\n                sum += digit;\n               \
    \ count += 1;\n            }\n        }\n        return sum * count;\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvr_mzuf_.java:23: error: cannot find symbol\n            .collect(Collectors.groupingBy(l\
    \ -> l.get(0)))\n                                                 ^\n  symbol:\
    \   method get(int)\n  location: variable l of type Long\n/tmp/tmpvr_mzuf_.java:26:\
    \ error: bad operand types for binary operator '>'\n            .filter(e -> e.getValue()\
    \ > 0)\n                                      ^\n  first type:  List<Long>\n \
    \ second type: int\n/tmp/tmpvr_mzuf_.java:27: error: incompatible types: bad return\
    \ type in lambda expression\n            .mapToLong(e -> e.getValue())\n     \
    \                                 ^\n    List<Long> cannot be converted to long\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) return 0;\n\n        // Find all the negative\
    \ numbers in the array\n        ArrayList<Long> negatives = new ArrayList<>();\n\
    \        for (long i : arr) {\n            if (i < 0l) negatives.add(i);\n   \
    \     }\n\n        // Count the number of positive numbers in the array\n    \
    \    long count = 0;\n        for (long i : arr) count += (i > 0) ? 1 : 0;\n\n\
    \        // Calculate the number of negative numbers that have a sum of digits\
    \ > 0\n        long negativeCount = 0;\n        for (long i : negatives) {\n \
    \           long sum = 0;\n            for (int j = 0; j < 6; j++) {\n       \
    \         sum += (i > 0) ? (i % 10 + i * j) : 0l; // Add the number of digits\
    \ to the sum\n                i /= 10; // Remove the single digit for the next\
    \ iteration\n            }\n            if (sum > 0l) negativeCount++;\n     \
    \   }\n\n        // Combine both numbers and return\n        return count - negativeCount;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo19sh_ly.java:52)\n"
  stdout: ''
  timestamp: 1660011555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for(long num : arr) {\n           \
    \ if(num > 0) {\n                for(int i = Math.abs(num); i > 0; i--) {\n  \
    \                  count += Math.pow(i, num);\n                }\n           \
    \ }\n            else if(num < 0) {\n                for(int i = Math.abs(num);\
    \ i > 0; i--) {\n                    count += Math.pow((-i)-1, num);\n       \
    \         }\n            }\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_qafzls2.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n                for(int i = Math.abs(num); i > 0; i--) {\n\
    \                                    ^\n/tmp/tmp_qafzls2.java:28: error: incompatible\
    \ types: possible lossy conversion from long to int\n                for(int i\
    \ = Math.abs(num); i > 0; i--) {\n                                    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.isEmpty())\n            return 0;\n        long n =\
    \ 0;\n        long first = (long) arr.get(0);\n        if (first < 0) return 0;\n\
    \        for (Long d : arr)\n            n += first * 10 + d;\n        return\
    \ n;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphufcc5m3.java:32)\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long ans = 0;\n        for (Long num : arr) {\n            if\
    \ (num < 0) num = num * -1;\n            if (isSumOfDigitsGreaterThanZero(num))\
    \ {\n                ans += 1;\n            }\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9a_rctv4.java:23: error: cannot find symbol\n            if (isSumOfDigitsGreaterThanZero(num))\
    \ {\n                ^\n  symbol:   method isSumOfDigitsGreaterThanZero(Long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        int result = 0;\n        for (int num : arr) {\n           \
    \ if (num < 0) {\n                num *= -1;\n                result += num /\
    \ 10l;\n                num %= 10l;\n            }\n            while (num > 0)\
    \ {\n                num /= 10;\n                result ++;\n            }\n \
    \       }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzne6h3dc.java:21: error: incompatible types: Long cannot be converted\
    \ to int\n        for (int num : arr) {\n                       ^\n1 error\n"
  stdout: ''
  timestamp: 1660011555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        Set<Long> nums = new HashSet<Long>();\n        for (Long n :\
    \ arr) {\n            if (isSigned(n))\n                nums.add(n);\n       \
    \ }\n        return nums.size();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkhfxcfxn.java:22: error: cannot find symbol\n            if (isSigned(n))\n\
    \                ^\n  symbol:   method isSigned(Long)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // write your solution here\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv7cni0sd.java:26)\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        long result = 0;\n        for\
    \ (Long l : arr) {\n            result += countDigits(l);\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9moxkdzm.java:23: error: cannot find symbol\n            result\
    \ += countDigits(l);\n                      ^\n  symbol:   method countDigits(Long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.isEmpty())\n            return 0L;\n        long sum\
    \ = 0, sumDigit = -1, i = 0;\n        boolean isNegative = true;\n        while\
    \ (i < arr.size()) {\n            if (isNegative)\n                sumDigit *=\
    \ -1L;\n            sum += arr.get(i);\n            isNegative = i < arr.size()\
    \ - 1 && !arr.get(i).equals(arr.get(i + 1));\n            i++;\n        }\n  \
    \      sum += sumDigit;\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf6ct1zoq.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n            sum += arr.get(i);\n                         \
    \  ^\n/tmp/tmpf6ct1zoq.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n            isNegative = i < arr.size() - 1 && !arr.get(i).equals(arr.get(i\
    \ + 1));\n                                                        ^\n/tmp/tmpf6ct1zoq.java:28:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        isNegative = i < arr.size() - 1 && !arr.get(i).equals(arr.get(i + 1));\n\
    \                                                                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (long n : arr) {\n            sum\
    \ += Math.abs(n);\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv7quz9st.java:28)\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long result = 0;\n        for (long n : arr) {\n           \
    \ result += (int) Math.abs(n);\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0241qa2.java:28)\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long nums = 0;\n        for (Long num : arr) {\n           \
    \ final long sum = num.longValue();\n            for (long i = -1000; i <= 1000;\
    \ i++) {\n                if (sum % i == 0) {\n                    nums++;\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    return nums;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdzvxngn3.java:34)\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for (Long num : arr) {\n          \
    \  count += (int) Math.pow(10, arr.indexOf(num) + 1) - 1;\n        }\n       \
    \ return count;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphtpfdq1y.java:28)\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for (Long l : arr) {\n            count\
    \ = count + (l * l);\n        }\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd53j2uvi.java:28)\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Use Long.MIN_VALUE as a sentinel.\n        Long min_val =\
    \ Long.MIN_VALUE;\n        Long result = 0l;\n        for (Long value : arr) {\n\
    \            result += value;\n            if (result < min_val) {\n         \
    \       min_val = result;\n            }\n        }\n        return min_val;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6vtgd94y.java:32)\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long result = 0;\n        long firstSignedNum = Long.MIN_VALUE;\n\
    \        for (Long l : arr) {\n            long num = getNumber(l);\n        \
    \    if (num > 0) {\n                long newSum = getSignedNum(num);\n      \
    \          if (newSum < 0) {\n                    newSum = -newSum;\n        \
    \            firstSignedNum = -firstSignedNum;\n                }\n          \
    \      result = result + (firstSignedNum - newSum);\n                firstSignedNum\
    \ = firstSignedNum + newSum;\n            } else {\n                result = result\
    \ + firstSignedNum;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpobcjaanh.java:23: error: cannot find symbol\n            long num\
    \ = getNumber(l);\n                       ^\n  symbol:   method getNumber(Long)\n\
    \  location: class Problem\n/tmp/tmpobcjaanh.java:25: error: cannot find symbol\n\
    \                long newSum = getSignedNum(num);\n                          \
    \    ^\n  symbol:   method getSignedNum(long)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        long result = 0;\n        for\
    \ (Long i : arr) {\n            result += i;\n        }\n        if (result >\
    \ 0) {\n            return result;\n        }\n        // first element is negative\n\
    \        long firstNum = arr.get(0);\n        long firstSignedDigit = firstNum\
    \ < 0 ? firstNum % Math.abs(firstNum) : firstNum;\n        long sign = 1;\n  \
    \      for (int i = 1; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            long signedDigit = num < 0 ? num % Math.abs(num) : num;\n       \
    \     long newSign = signedDigit < 0 ? sign * -1 : sign;\n            if (signedDigit\
    \ >= 0) {\n                result += newSign * firstSignedDigit;\n           \
    \ } else {\n                result -= firstSignedDigit * newSign;\n          \
    \  }\n            firstSignedDigit = sign * firstSignedDigit;\n            sign\
    \ = newSign;\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.countNums(tmpfg3txudw.java:29)\n\tat Problem.main(tmpfg3txudw.java:47)\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        long count = 0;\n        for(long x:\
    \ arr) {\n            sum = sum + x;\n            count++;\n            if(sum\
    \ > 0) break;\n        }\n        return count;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3di5nwpn.java:31)\n"
  stdout: ''
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long ans = 0;\n        if (arr.size() < 3) return 0;\n     \
    \   long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n          \
    \  if (i == 0) continue;\n            if (arr.size() > 3) {\n                sum\
    \ = sum * 10 + ((long) arr.get(i) - arr.get(i-1));\n            } else {\n   \
    \             sum = sum * 10 + arr.get(i) - arr.get(i-1);\n            }\n   \
    \         if (sum > 0) {\n                ans = ans + 1;\n            }\n    \
    \    }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsj5fjo1p.java:39)\n"
  stdout: ''
  timestamp: 1660011557
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (long l : arr) {\n            sum\
    \ += l;\n            if (sum < 0) {\n                sum += getPositiveFirstSignedDigit(sum);\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7oyr2qj.java:24: error: cannot find symbol\n                sum\
    \ += getPositiveFirstSignedDigit(sum);\n                       ^\n  symbol:  \
    \ method getPositiveFirstSignedDigit(long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Convert array to array of digits (not including sign of number).\n\
    \        Long[] digits = arr.stream().map(Math::abs).toArray();\n        // Remove\
    \ all negative numbers.\n        ArrayList list = new ArrayList(arr.size());\n\
    \        for (long value : arr) {\n            if (value > 0) {\n            \
    \    list.add(value);\n            }\n        }\n        // Find first negative\
    \ number with first digit negative.\n        long firstNegative = 0;\n       \
    \ for (int i = 0; i < list.size(); i++) {\n            if (list.get(i) < 0) {\n\
    \                firstNegative = list.get(i);\n                break;\n      \
    \      }\n        }\n        // Count the number of negative numbers with a non-zero\
    \ first digit.\n        long negativeCount = 0;\n        for (int i = 0; i < list.size();\
    \ i++) {\n            if (list.get(i) < 0 && list.get(i) >= firstNegative) {\n\
    \                negativeCount++;\n            }\n        }\n        // Return\
    \ result.\n        return firstNegative + (long) Math.pow(10, digits.length -\
    \ negativeCount);\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdedq61h.java:21: error: incompatible types: Object[] cannot be\
    \ converted to Long[]\n        Long[] digits = arr.stream().map(Math::abs).toArray();\n\
    \                                                           ^\n/tmp/tmpmdedq61h.java:32:\
    \ error: bad operand types for binary operator '<'\n            if (list.get(i)\
    \ < 0) {\n                            ^\n  first type:  Object\n  second type:\
    \ int\n/tmp/tmpmdedq61h.java:33: error: incompatible types: Object cannot be converted\
    \ to long\n                firstNegative = list.get(i);\n                    \
    \                    ^\n/tmp/tmpmdedq61h.java:40: error: bad operand types for\
    \ binary operator '<'\n            if (list.get(i) < 0 && list.get(i) >= firstNegative)\
    \ {\n                            ^\n  first type:  Object\n  second type: int\n\
    /tmp/tmpmdedq61h.java:40: error: bad operand types for binary operator '>='\n\
    \            if (list.get(i) < 0 && list.get(i) >= firstNegative) {\n        \
    \                                       ^\n  first type:  Object\n  second type:\
    \ long\nNote: /tmp/tmpmdedq61h.java uses unchecked or unsafe operations.\nNote:\
    \ Recompile with -Xlint:unchecked for details.\n5 errors\n"
  stdout: ''
  timestamp: 1660011558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0l;\n        for (Long i : arr) {\n           \
    \ count += i % 10;\n        }\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxvk0p22x.java:28)\n"
  stdout: ''
  timestamp: 1660011558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        if (arr.isEmpty())\n            return\
    \ 0;\n        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            sum += arr.get(i);\n            if (sum < 0) {\n                sum\
    \ += 10;\n            }\n        }\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            int digit = (int)Math.abs(arr.get(i) % 10);\n            if (digit\
    \ >= 0 && digit <= 9) {\n                count++;\n            }\n        }\n\
    \        return count;\n    }\n    public static void main(String[] args) {\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppv33ozfu.java:40)\n"
  stdout: ''
  timestamp: 1660011558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long res = 0;\n        arr.stream().map(i -> {\n           \
    \ int sign = i >= 0 ? 1 : -1;\n            i = Math.abs(i);\n            return\
    \ sign * (int)Math.floorDiv(i * Math.pow(10, arr.size()), 10) + arr.size(); //\
    \ If negative then first signed digit will be negative\n        }).filter(i ->\
    \ i >= 0).forEach(i -> {\n            int count = 0;\n            while (i !=\
    \ 0) {\n                i /= 10;\n                ++count;\n            }\n  \
    \          res = (res * 10) + count;\n        });\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpilzlco8w.java:24: error: no suitable method found for floorDiv(double,int)\n\
    \            return sign * (int)Math.floorDiv(i * Math.pow(10, arr.size()), 10)\
    \ + arr.size(); // If negative then first signed digit will be negative\n    \
    \                               ^\n    method Math.floorDiv(int,int) is not applicable\n\
    \      (argument mismatch; possible lossy conversion from double to int)\n   \
    \ method Math.floorDiv(long,int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from double to long)\n    method Math.floorDiv(long,long)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ double to long)\n1 error\n"
  stdout: ''
  timestamp: 1660011558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            int sum = 0;\n            for (int j = 0; j < arr.get(i).intValue();\
    \ j++) {\n                sum += j;\n            }\n            if (sum > 0) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8mdzdndx.java:35)\n"
  stdout: ''
  timestamp: 1660011558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for(long l : arr) {\n            if(l\
    \ < 0)\n                l -= (long)(Math.pow(10, (int) Math.floor(Math.log10(l)))\
    \ - 1);\n            if(l > 0)\n                count += l;\n        }\n     \
    \   return count;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz_vb_990.java:32)\n"
  stdout: ''
  timestamp: 1660011558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long res = 0;\n        for (Long e : arr)\n            if (e\
    \ > 0)\n                res += e;\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_29l98hc.java:29)\n"
  stdout: ''
  timestamp: 1660011558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for(long l : arr) {\n            int\
    \ sd = Math.max(Math.abs(l % 10), 0);\n            count += sd * Math.pow(10,\
    \ sd - 1);\n        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr45v8c_d.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int sd = Math.max(Math.abs(l % 10), 0);\n    \
    \                         ^\n1 error\n"
  stdout: ''
  timestamp: 1660011558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long cnt = 0;\n        for (Long l : arr) {\n            if\
    \ (Math.abs(l) > 0) cnt += Math.abs(l);\n        }\n        return cnt;\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ltz6suh.java:28)\n"
  stdout: ''
  timestamp: 1660011558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr == null)\n            throw new RuntimeException(\"\
    The input list must not be null\");\n\n        // We are going to use a LongStream\
    \ to iterate over the array\n        // And use flatMap to transform the Long\
    \ elements into Integer\n        return arr.stream().flatMapToInt(i -> {\n   \
    \         if (i < 0)\n                i = -i;\n            return Arrays.stream(i.toString().split(\"\
    \")).filter(d -> Long.valueOf(d.trim()) > 0).count();\n        }).sum();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp53i884sk.java:28: error: incompatible types: bad return type in\
    \ lambda expression\n            return Arrays.stream(i.toString().split(\"\"\
    )).filter(d -> Long.valueOf(d.trim()) > 0).count();\n                        \
    \                                                                            \
    \  ^\n    long cannot be converted to IntStream\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        int count = 0;\n        for (Long l : arr) {\n            if\
    \ (l > 0) count++;\n        }\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6wi35p2v.java:32)\n"
  stdout: ''
  timestamp: 1660011558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // write your solution here\n        long sum = 0;\n       \
    \ for (long num : arr) {\n            sum += num;\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf5rf75vz.java:29)\n"
  stdout: ''
  timestamp: 1660011559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return arr.stream().filter(x -> !x.isNegative())\n         \
    \                .filter((long) x -> (long)Math.abs(x) % 10 > 0).count();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibtdbhgi.java:21: error: incompatible types: long is not a functional\
    \ interface\n                         .filter((long) x -> (long)Math.abs(x) %\
    \ 10 > 0).count();\n                                        ^\n/tmp/tmpibtdbhgi.java:20:\
    \ error: cannot find symbol\n        return arr.stream().filter(x -> !x.isNegative())\n\
    \                                          ^\n  symbol:   method isNegative()\n\
    \  location: variable x of type Long\n/tmp/tmpibtdbhgi.java:21: error: incompatible\
    \ types: long cannot be converted to Predicate<? super Long>\n               \
    \          .filter((long) x -> (long)Math.abs(x) % 10 > 0).count();\n        \
    \                         ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011558
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Complete the function here.\n        int len = arr.size();\n\
    \        long sum = 0;\n        for(long l : arr) {\n            sum += Math.abs(l\
    \ % 10);\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2x4qh6xe.java:30)\n"
  stdout: ''
  timestamp: 1660011559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (Long l : arr) {\n            sum\
    \ += l;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt7s5_1ci.java:28)\n"
  stdout: ''
  timestamp: 1660011559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long result = 0l;\n        for (Long num : arr)\n          \
    \  if (num > 0)\n                result = Math.max(result, Integer.parseInt(String.valueOf(num)));\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx7au1jr2.java:29)\n"
  stdout: ''
  timestamp: 1660011559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long ret = 0;\n        for (Long num : arr)\n            ret\
    \ += Math.abs(num);\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkd_wd642.java:27)\n"
  stdout: ''
  timestamp: 1660011559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        if (arr.isEmpty()) {\n            System.out.println(\"\
    Empty array\");\n            return count;\n        }\n        long sum = 0;\n\
    \        for (long l : arr) {\n            sum += l;\n        }\n        if (sum\
    \ < 0) {\n            sum += Math.pow(10, arr.size() - 1) * -1;\n        }\n \
    \       if (sum > 0) {\n            sum += Math.pow(10, arr.size() - 1);\n   \
    \         count = 1;\n        } else {\n            count = 0;\n        }\n  \
    \      return count;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplfjm3pbl.java:43)\n"
  stdout: 'Empty array

    '
  timestamp: 1660011559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.isEmpty()) return 0;\n        int sum = 0;\n       \
    \ long num = arr.get(0);\n        boolean negative = num < 0;\n        long firstDigit\
    \ = num % 10;\n        for (long i : arr) {\n            sum += Math.abs(i - firstDigit);\n\
    \        }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3_nyi0wu.java:32)\n"
  stdout: ''
  timestamp: 1660011559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if(arr.size() == 0) return 0L;\n        long sum = 0L;\n   \
    \     for(long num : arr) sum += num;\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptbeapmg9.java:27)\n"
  stdout: ''
  timestamp: 1660011559
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return IntStream.range(0, arr.size())\n                .filter(i\
    \ -> IntStream.range(0,9).allMatch(j -> (long)arr.get(i) % (long)Math.pow(10,\
    \ j) >= 0))\n                .count();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkyuxlmov.java:26)\n"
  stdout: ''
  timestamp: 1660011560
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        Set<Long> s = new HashSet<Long>();\n        // loop over list\n\
    \        for (Long i : arr) {\n            // check sum\n            checkSum(s,\
    \ i);\n        }\n        // return the count\n        return s.size();\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqw0fcgm6.java:24: error: cannot find symbol\n            checkSum(s,\
    \ i);\n            ^\n  symbol:   method checkSum(Set<Long>,Long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011560
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (long l : arr) {\n            long\
    \ sumOfDigits = 0;\n            if (l < 0) {\n                l = -l;\n      \
    \          sumOfDigits += l;\n            }\n            while (l > 0) {\n   \
    \             sumOfDigits += l % 10;\n                l /= 10;\n            }\n\
    \            if (sumOfDigits > 0) {\n                sum++;\n            }\n \
    \       }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp03lhkysa.java:39)\n"
  stdout: ''
  timestamp: 1660011561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long res = 0;\n        for (long num : arr) {\n            res\
    \ += Math.abs(num) % 10;\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkg4cuo1d.java:28)\n"
  stdout: ''
  timestamp: 1660011561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // use Streams to count the digits of every number in the array\n\
    \        return arr.stream()\n            .filter(x -> x >= 0) // filter to keep\
    \ only positive numbers\n            .map(x -> x % 10)\n            .distinct()\
    \ // remove duplicates\n            .count();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnsxcapk.java:29)\n"
  stdout: ''
  timestamp: 1660011561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (long l : arr) {\n            sum\
    \ += Math.abs(l);\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps1lfndbg.java:28)\n"
  stdout: ''
  timestamp: 1660011561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        LongStream s = arr.stream();\n    \
    \    if (s.count() > 0) {\n            while (s.sum() > 0) {\n               \
    \ long num = s.sum();\n                count += num / 10;\n                num\
    \ = num % 10;\n                while (num > 0) {\n                    long first\
    \ = num % 10;\n                    if (first > 0)\n                        count\
    \ += 1;\n                    num = num / 10;\n                }\n            }\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4spbrmf.java:21: error: incompatible types: Stream<Long> cannot\
    \ be converted to LongStream\n        LongStream s = arr.stream();\n         \
    \                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // TODO: Write code here.\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvzwswlbf.java:26)\n"
  stdout: ''
  timestamp: 1660011561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for (Long x : arr) {\n            if\
    \ (x > 0) {\n                for (long xx = x; xx > 0; xx /= 10) {\n         \
    \           if (xx % 10 == 0) {\n                        ++count;\n          \
    \          }\n                }\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoi1iaj98.java:35)\n"
  stdout: ''
  timestamp: 1660011561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.isEmpty()) throw new IllegalArgumentException();\n \
    \       long sum = 0, negSum = 0, negNums = 0;\n        arr.stream()\n       \
    \     .map(i -> {\n                sum += i;\n                negSum += Math.abs(i);\n\
    \                negNums += i / Math.pow(10, (int)Math.ceil(Math.log10(i)));\n\
    \                return i;\n            })\n            .filter(i -> i >= 0)\n\
    \            .count();\n        return negNums + negSum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiwbbc2ce.java:24: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n                sum += i;\n \
    \               ^\n/tmp/tmpiwbbc2ce.java:25: error: local variables referenced\
    \ from a lambda expression must be final or effectively final\n              \
    \  negSum += Math.abs(i);\n                ^\n/tmp/tmpiwbbc2ce.java:26: error:\
    \ local variables referenced from a lambda expression must be final or effectively\
    \ final\n                negNums += i / Math.pow(10, (int)Math.ceil(Math.log10(i)));\n\
    \                ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return arr.stream()\n                .filter(e -> e > 0)\n \
    \               .collect(Collectors.toList()).size();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1f4wfwxw.java:30)\n"
  stdout: ''
  timestamp: 1660011561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return arr.stream().filter(x -> Math.abs(x) > 0).count();\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps5dh1vl6.java:24)\n"
  stdout: ''
  timestamp: 1660011561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.size() < 1) return 0l;\n        Long[] arr = arr.toArray(new\
    \ Long[arr.size()]);\n        long ans = 1L;\n        for (Long v : arr) {\n \
    \           ans *= v;\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn_5q40qq.java:21: error: variable arr is already defined in method\
    \ countNums(ArrayList<Long>)\n        Long[] arr = arr.toArray(new Long[arr.size()]);\n\
    \               ^\n/tmp/tmpn_5q40qq.java:21: error: cannot find symbol\n     \
    \   Long[] arr = arr.toArray(new Long[arr.size()]);\n                        \
    \                     ^\n  symbol:   method size()\n  location: variable arr of\
    \ type Long[]\n/tmp/tmpn_5q40qq.java:21: error: cannot find symbol\n        Long[]\
    \ arr = arr.toArray(new Long[arr.size()]);\n                        ^\n  symbol:\
    \   method toArray(Long[])\n  location: variable arr of type Long[]\n3 errors\n"
  stdout: ''
  timestamp: 1660011561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.isEmpty()) {\n            return 0l;\n        }\n  \
    \      long ans = 0;\n        for (int i = 0; i < arr.size() - 1; i++) {\n   \
    \         if (arr.get(i) > 0) {\n                long sum = 0;\n             \
    \   for (int j = i; j < arr.size(); j++) {\n                    if (arr.get(j)\
    \ > 0) {\n                        sum += arr.get(j);\n                    }\n\
    \                }\n                if (sum > 0) {\n                    ans +=\
    \ (sum * 10 + i) / 10;\n                }\n            }\n        }\n        if\
    \ (arr.size() > 1) {\n            ans += (arr.get(arr.size() - 1) * 10 + arr.size())\
    \ / 10;\n        }\n        return ans;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgfnaopi_.java:45)\n"
  stdout: ''
  timestamp: 1660011561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long ret = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long sum = arr.get(i);\n            if (sum < 0)\n          \
    \      sum = -sum;\n            for (int j = 0; j < sum; j++)\n              \
    \  ret++;\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgx6yai2j.java:32)\n"
  stdout: ''
  timestamp: 1660011561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        long result = 0L;\n       \
    \ if (arr.size() > 0) {\n            long positiveNum = arr.get(0);\n        \
    \    for (int i = 1; i < arr.size(); i++) {\n                long num = arr.get(i);\n\
    \                if (num > positiveNum) {\n                    result += Math.abs(num\
    \ - positiveNum);\n                    positiveNum = num;\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1epq6kvb.java:36)\n"
  stdout: ''
  timestamp: 1660011562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 1;\n        for (Long l : arr) {\n            long\
    \ sum = 0;\n            while (l != 0) {\n                sum += l % 10;\n   \
    \             l = l / 10;\n            }\n            if (sum > 0) count++;\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphhztq244.java:32)\n"
  stdout: ''
  timestamp: 1660011562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.isEmpty())\n            return 0;\n        int count\
    \ = 0;\n        for (long i : arr) {\n            count += count_nums(i, new ArrayList<Long>());\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3acbgkec.java:24: error: cannot find symbol\n            count\
    \ += count_nums(i, new ArrayList<Long>());\n                     ^\n  symbol:\
    \   method count_nums(long,ArrayList<Long>)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long cnt = 0;\n        for (Long i : arr) {\n            long\
    \ d = i % 10;\n            if (d > 0) {\n                d += 9 - d;\n       \
    \     }\n            if (d >= 0) {\n                cnt += d;\n            }\n\
    \        }\n        return cnt;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgy0v1g_g.java:35)\n"
  stdout: ''
  timestamp: 1660011562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Convert each number from arr into a string, and count the\
    \ number of digits in each.\n        // The String representation of any number\
    \ is its first signed digit.\n        // e.g. -1l is \"-1\", 11l is \"11\", and\
    \ -11l is \"-1\".\n        return arr.stream().map(number -> String.valueOf(number))\n\
    \                .map(string -> string.split(\"\").map(s -> Character.getNumericValue(s.charAt(0)))).filter(arr\
    \ -> (arr.length >= 1)\n                .mapToLong(arr -> (long)arr[0]).count();\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5t69d223.java:25: error: ')' expected\n                .mapToLong(arr\
    \ -> (long)arr[0]).count();\n                                                \
    \       ^\n1 error\n"
  stdout: ''
  timestamp: 1660011561
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        long sum = 0;\n        for\
    \ (long num : arr)\n            sum += num;\n        if (sum < 0)\n          \
    \  sum *= -1;\n        int count = 0;\n        for (long num : arr)\n        \
    \    count += Math.abs(num % 10);\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm2ctmmcr.java:33)\n"
  stdout: ''
  timestamp: 1660011562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long ans = 0;\n        for (Long i : arr)\n            if (i\
    \ < 0l)\n                i -= i;\n            else\n                ans += i;\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkjkviuu0.java:31)\n"
  stdout: ''
  timestamp: 1660011562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (long num : arr) {\n            sum\
    \ += num;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqmp_ljag.java:28)\n"
  stdout: ''
  timestamp: 1660011562
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long nums = 0;\n        for(Long number : arr) {\n         \
    \   long sum = 0;\n            while(number > 0) {\n                sum += number\
    \ % 10;\n                number /= 10;\n            }\n            if(sum > 0)\
    \ nums++;\n        }\n        return nums;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa6_g1xdb.java:37)\n"
  stdout: ''
  timestamp: 1660011563
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long result = 0l;\n        for (long l : arr) {\n          \
    \  if (l >= 0) {\n                result += Math.abs(l);\n            }\n    \
    \        else {\n                result -= Math.abs(l);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpef12maus.java:33)\n"
  stdout: ''
  timestamp: 1660011563
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long num_sum = 0;\n        int digit = arr.size() - 1;\n   \
    \     while (digit >= 0) {\n            num_sum += getSum(arr.get(digit));\n \
    \           digit--;\n        }\n        return num_sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpotrfcopl.java:23: error: cannot find symbol\n            num_sum\
    \ += getSum(arr.get(digit));\n                       ^\n  symbol:   method getSum(Long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011563
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Write your code here.\n        long result = 0L;\n      \
    \  for(long n : arr) {\n            int firstDigit = n % 10;\n            int\
    \ digits = 0;\n            for(int i = firstDigit - 1; i >= 0; i--) {\n      \
    \          digits = digits*10 + n % 10;\n                n /= 10;\n          \
    \  }\n            if(digits > 0) {\n                result += n;\n           \
    \ }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd3tlf3h7.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int firstDigit = n % 10;\n                   \
    \            ^\n/tmp/tmpd3tlf3h7.java:26: error: incompatible types: possible\
    \ lossy conversion from long to int\n                digits = digits*10 + n %\
    \ 10;\n                                   ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011563
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long res = 0;\n        long firstSignBits = arr.get(0).getFirstSignificantBits();\n\
    \        long lastSignBits = arr.get(arr.size()-1).getLastSignificantBits();\n\
    \        if (arr.size() > 0) {\n            for (int i = 0; i < arr.size()-1;\
    \ i++) {\n                long curSum = arr.get(i) + arr.get(i+1);\n         \
    \       res = res + curSum;\n            }\n            long nextSum = arr.get(arr.size()-1)\
    \ + arr.get(0);\n            res = res - nextSum;\n        }\n        if (res\
    \ == firstSignBits) {\n            res = -res;\n        }\n        if (res < firstSignBits)\
    \ {\n            return 0;\n        }\n        if (res == lastSignBits) {\n  \
    \          return arr.size() - 1;\n        }\n        long lastDigit = arr.get(arr.size()-1)\
    \ - lastSignBits;\n        long maxDigit = arr.get(arr.size()-1) - firstSignBits;\n\
    \        if (lastDigit > maxDigit) {\n            return arr.size();\n       \
    \ }\n        int idx = arr.size() - 1;\n        while (idx > 0 && arr.get(idx)\
    \ != lastDigit) {\n            idx--;\n        }\n        if (idx < 0) {\n   \
    \         return arr.size();\n        }\n        return idx;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpywc7bwbm.java:21: error: cannot find symbol\n        long firstSignBits\
    \ = arr.get(0).getFirstSignificantBits();\n                                  \
    \     ^\n  symbol:   method getFirstSignificantBits()\n  location: class Long\n\
    /tmp/tmpywc7bwbm.java:22: error: cannot find symbol\n        long lastSignBits\
    \ = arr.get(arr.size()-1).getLastSignificantBits();\n                        \
    \                         ^\n  symbol:   method getLastSignificantBits()\n  location:\
    \ class Long\n2 errors\n"
  stdout: ''
  timestamp: 1660011563
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for( long n: arr ) {\n            count\
    \ += n;\n        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprpzmhrqg.java:28)\n"
  stdout: ''
  timestamp: 1660011563
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        int cnt = 0;\n        for(int i=0; i<arr.size();\
    \ i++) {\n            sum += arr.get(i);\n            if(sum < 0) {\n        \
    \        cnt += sum < 0 ? 1 : 0;\n                sum = 0;\n            } else\
    \ {\n                cnt += 1;\n            }\n        }\n        return cnt;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjn5814mo.java:35)\n"
  stdout: ''
  timestamp: 1660011564
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // write your code here\n        long count = 0L;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n   \
    \         long firstDigit = num % 10;\n            num /= 10;\n            long\
    \ secondDigit = num % 10;\n            num /= 10;\n            long thirdDigit\
    \ = num % 10;\n            num /= 10;\n            long fourthDigit = num % 10;\n\
    \            if (firstDigit > 0 || secondDigit > 0 || thirdDigit > 0 || fourthDigit\
    \ > 0) {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplh622ohz.java:43)\n"
  stdout: ''
  timestamp: 1660011563
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for (Long l : arr) {\n            count\
    \ += l.length() - 1;\n            if (count > 9) {\n                count = (long)\
    \ (count / 10);\n            }\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgovwpsmj.java:22: error: cannot find symbol\n            count\
    \ += l.length() - 1;\n                      ^\n  symbol:   method length()\n \
    \ location: variable l of type Long\n1 error\n"
  stdout: ''
  timestamp: 1660011563
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // write your code\n        long res = 0;\n        for(Long\
    \ num : arr) {\n            int digitSum = 0;\n            while(num > 0) {\n\
    \                digitSum++;\n                num *= 10;\n            }\n    \
    \        if(digitSum > 0) {\n                res++;\n            }\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9ajwqk5v.java:40)\n"
  stdout: ''
  timestamp: 1660011564
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        long sum = 0;\n        ArrayList<Long>\
    \ list = new ArrayList<Long>();\n        // for each number in the array\n   \
    \     for (Long i : arr) {\n            if (i >= 0) {\n                sum +=\
    \ i;\n                if (sum > 0) {\n                    list.add(sum);\n   \
    \             }\n                sum = 0;\n            }\n        }\n        //\
    \ for each number in the array\n        for (Long i : list) {\n            if\
    \ (i >= 0) {\n                sum += i;\n                if (sum > 0) {\n    \
    \                count += 1;\n                }\n            }\n        }\n  \
    \      return count;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_b28bxrs.java:50)\n"
  stdout: ''
  timestamp: 1660011564
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        int count = 0;\n        arr.forEach(e -> {\n            if (e\
    \ < 0) {\n                if (e < 0)\n                    e = (e * -1l);\n   \
    \             else\n                    e = -e;\n                count++;\n  \
    \          } else if (e == 0) {\n                count++;\n            } else\
    \ {\n                int sum = 0;\n                while (e > 0) {\n         \
    \           sum += (e % 10);\n                    e = e / 10;\n              \
    \  }\n                while (e > 0) {\n                    e /= 10;\n        \
    \            count++;\n                }\n                while (sum > 0) {\n\
    \                    sum--;\n                    count++;\n                }\n\
    \            }\n        });\n        return count;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5efxqk55.java:27: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n                count++;\n  \
    \              ^\n/tmp/tmp5efxqk55.java:29: error: local variables referenced\
    \ from a lambda expression must be final or effectively final\n              \
    \  count++;\n                ^\n/tmp/tmp5efxqk55.java:38: error: local variables\
    \ referenced from a lambda expression must be final or effectively final\n   \
    \                 count++;\n                    ^\n/tmp/tmp5efxqk55.java:42: error:\
    \ local variables referenced from a lambda expression must be final or effectively\
    \ final\n                    count++;\n                    ^\n4 errors\n"
  stdout: ''
  timestamp: 1660011563
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        \n        for (long num : arr) {\n  \
    \          sum += num;\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfh9spmia.java:29)\n"
  stdout: ''
  timestamp: 1660011564
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.isEmpty())\n            return 0l;\n        long ans\
    \ = 1l;\n        arr.sort(null, (o1, o2) -> {\n            long d1 = o1.intValue();\n\
    \            long d2 = o2.intValue();\n            int sign1 = (d1<0?-1:0);\n\
    \            int sign2 = (d2<0?-1:0);\n            return sign1*d1+sign2*d2;\n\
    \        });\n        for (long num : arr)\n            if (num<0l)\n        \
    \        num = -num;\n            if (num>0l)\n                ans += (long)Math.pow(10,\
    \ arr.indexOf(num)-arr.indexOf(num)+1);\n        return ans;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqmz49jjn.java:23: error: method sort in class ArrayList<E> cannot\
    \ be applied to given types;\n        arr.sort(null, (o1, o2) -> {\n         \
    \  ^\n  required: Comparator<? super Long>\n  found:    <null>,(o1,o2)->{[...]d2;\
    \ }\n  reason: actual and formal argument lists differ in length\n  where E is\
    \ a type-variable:\n    E extends Object declared in class ArrayList\n/tmp/tmpqmz49jjn.java:33:\
    \ error: cannot find symbol\n            if (num>0l)\n                ^\n  symbol:\
    \   variable num\n  location: class Problem\n/tmp/tmpqmz49jjn.java:34: error:\
    \ cannot find symbol\n                ans += (long)Math.pow(10, arr.indexOf(num)-arr.indexOf(num)+1);\n\
    \                                                      ^\n  symbol:   variable\
    \ num\n  location: class Problem\n/tmp/tmpqmz49jjn.java:34: error: cannot find\
    \ symbol\n                ans += (long)Math.pow(10, arr.indexOf(num)-arr.indexOf(num)+1);\n\
    \                                                                       ^\n  symbol:\
    \   variable num\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011564
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long ans = 0L;\n        for (long l : arr) {\n            ans\
    \ += l > 0 ? l % 10L : 0;\n        }\n        return ans;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkw4fckxu.java:29)\n"
  stdout: ''
  timestamp: 1660011564
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long result = 0l;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            Long v = arr.get(i);\n            if (v < 0l)\n             \
    \   v = -((long)v);\n            result += (long)Math.pow(10, (v >> 48) - 1) *\
    \ Math.pow(10, (v >> 32) - 1) * Math.pow(10, (v >> 16) - 1) * Math.pow(10, (v\
    \ >> 8) - 1) * Math.pow(10, (v >> 0) - 1);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1y5ui_nk.java:32)\n"
  stdout: ''
  timestamp: 1660011564
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0l;\n        for (Long l : arr) {\n            sum\
    \ += Math.abs(l);\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw2hn4nnc.java:28)\n"
  stdout: ''
  timestamp: 1660011564
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (long l: arr) {\n            if (l\
    \ < 0)\n                l = -l;\n            for (int i = 0; i < 9; i++) {\n \
    \               if (l % 10 + l % 100 < 10)\n                    break;\n     \
    \           l /= 10 + l % 100;\n            }\n            sum += l;\n       \
    \ }\n        return sum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr_m4pil3.java:35)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long nums = arr.stream().filter(i -> i > 0).count();\n     \
    \   if (nums > 0) {\n            int sign = arr.stream().filter(i -> i < 0).findFirst().orElse(-1);\n\
    \            return nums * Math.pow(10, -sign);\n        }\n        return nums;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1y0pxpf5.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n            int sign = arr.stream().filter(i -> i < 0).findFirst().orElse(-1);\n\
    \                                                                          ^\n\
    /tmp/tmp1y0pxpf5.java:23: error: incompatible types: possible lossy conversion\
    \ from double to long\n            return nums * Math.pow(10, -sign);\n      \
    \                  ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011564
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) < 0)\n                arr.set(i, arr.get(i) *\
    \ -1);\n            while (arr.get(i) >= 10) {\n                arr.set(i, arr.get(i)\
    \ / 10);\n                count += 1;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqoa_qp5j.java:34)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        boolean negative = false;\n        boolean\
    \ negativeSigned = false;\n        for (int i = 0; i < arr.size(); i++) {\n  \
    \          long num = arr.get(i);\n            sum += num;\n            if (num\
    \ < 0) {\n                negativeSigned = true;\n            } else {\n     \
    \           negativeSigned = false;\n            }\n            if (i == 0 ||\
    \ num < 0) {\n                negative = true;\n            }\n        }\n   \
    \     if (negative && negativeSigned) {\n            throw new RuntimeException(\"\
    Negative and positive numbers.\");\n        }\n        return sum;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20urhcdc.java:42)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        int sum = 0;\n        for (Long val : arr) {\n            sum\
    \ += val.intValue();\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfacv5qkr.java:28)\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        long[] arr = new long[arr.size()];\n\
    \        int i = 0, j;\n        for (i = 0; i < arr.length; i++) {\n         \
    \   if (arr.get(i) < 0) {\n                arr[i] = arr[i]*-1;\n            }\n\
    \            arr[i] = (arr[i] % 10L);\n        }\n        for (j = 0; j < arr.length;\
    \ j++) {\n            count += (arr[j] / 10L);\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppd0f3gll.java:21: error: variable arr is already defined in method\
    \ countNums(ArrayList<Long>)\n        long[] arr = new long[arr.size()];\n   \
    \            ^\n/tmp/tmppd0f3gll.java:21: error: cannot find symbol\n        long[]\
    \ arr = new long[arr.size()];\n                                 ^\n  symbol: \
    \  method size()\n  location: variable arr of type long[]\n/tmp/tmppd0f3gll.java:24:\
    \ error: cannot find symbol\n            if (arr.get(i) < 0) {\n             \
    \      ^\n  symbol:   method get(int)\n  location: variable arr of type long[]\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return arr.stream().filter(i -> i>0).count();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaqhk5ppq.java:28)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long result = 0l;\n        for (Long element : arr) {\n    \
    \        if (element < 0)\n                element = element * -1;\n         \
    \   if (element >= 0) {\n                result = result + MathUtils.sum(element);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp281trzaz.java:25: error: cannot find symbol\n                result\
    \ = result + MathUtils.sum(element);\n                                  ^\n  symbol:\
    \   variable MathUtils\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (Long i : arr) {\n            sum\
    \ += i;\n        }\n        if (sum > 0) {\n            return 1;\n        }\n\
    \        if (sum < 0) {\n            sum += (long)(Math.signum(arr.stream().min(Comparator.naturalOrder()).orElse(-1)));\n\
    \        }\n        long count = 0;\n        for (long i : arr) {\n          \
    \  count += Math.signum(i);\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfwrs0rci.java:28: error: incompatible types: int cannot be converted\
    \ to Long\n            sum += (long)(Math.signum(arr.stream().min(Comparator.naturalOrder()).orElse(-1)));\n\
    \                                                                            \
    \             ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) return 0;\n        long sum = 0;\n    \
    \    for (Long l : arr) sum += Math.abs(l);\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeqinc2d7.java:27)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0)\n            return 0L;\n        ArrayList<Long>\
    \ arr = new ArrayList<>();\n        long sum = 0;\n        long prev = -1l;\n\
    \        boolean isNegative = false;\n        for (long l : arr) {\n         \
    \   if (isNegative && prev >= 0) {\n                arr.add(-l);\n           \
    \     sum += l;\n                isNegative = false;\n            } else if (l\
    \ < 0) {\n                isNegative = true;\n            } else if (prev >= 0)\
    \ {\n                sum += l;\n            }\n            prev = l;\n       \
    \ }\n        return sum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprm7sn31s.java:22: error: variable arr is already defined in method\
    \ countNums(ArrayList<Long>)\n        ArrayList<Long> arr = new ArrayList<>();\n\
    \                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011565
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Solution is much more complicated and involves recursion.\n\
    \        // Here are some pointers that you might find useful:\n        // recursion\
    \ is where a program can call itself.\n        // The key to this recursion is\
    \ that you don't need to know anything about the parameters,\n        // you just\
    \ have to pass the function the base case (aka exit condition) and the recursive\
    \ call.\n        // e.g. A recursive function which calculates the factorial of\
    \ a number must accept a\n        // parameter of type int which can hold the\
    \ number (e.g. 5) and then it can call itself.\n        // If the parameter passed\
    \ into the function is 5, then we know that the number is > 1\n        // and\
    \ we call the function with 5 as the parameter.\n        // If 5 was passed in\
    \ then we know that the number is > 1 and we call the function with\n        //\
    \ 5 / 2 as the parameter. On the second call we get 5 as the parameter and the\
    \ number\n        // is now > 1 so we call the function with 5 / 6 as the parameter.\n\
    \        // In our example here we see that the base case is if the number is\
    \ > 1 and the function call\n        // is 5 / 2 so the function call is countNums(5)\
    \ and we return 2. The function will then call\n        // itself with the parameter\
    \ which is 5 / 6 and we return 6.\n        // Now that we have our function with\
    \ 2 as the base case and 6 returned for the first call,\n        // we can see\
    \ that we can now do the same with the return value of the function we called\
    \ with\n        // 6 on the first call which is 6 / 2. So now we call countNums(6)\
    \ and return 2 because the\n        // base case is 6 and the function call is\
    \ 6 / 2. We then return 2 because 2 is > 1.\n        // Now that we have our function\
    \ with 2 as the base case and 2 returned for the first call\n        // we can\
    \ see that we can now do the same with the return value of the function we called\
    \ with\n        // 2 on the first call which is 2 / 2. So now we call countNums(2)\
    \ and return 2 because the\n        // base case is 2 and the function call is\
    \ 2 / 2. We then return 2 because 2 is > 1.\n        // Now that we have our function\
    \ with 2 as the base case and 2 returned for the first call\n        // we can\
    \ see that we can now do the same with the return value of the function we called\
    \ with\n        // 2 on the first call which is 2 / 2. So now we call countNums(2)\
    \ and return 2 because the\n        // base case is 2 and the function call is\
    \ 2 / 2. We then return 2 because 2 is > 1.\n        // Now that we have our function\
    \ with 2 as the base case and 2 returned for the first call\n        // we can\
    \ see that we can now do the same with the return value of the function we called\
    \ with\n        // 2 on the first call which is 2 / 2. \n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp111tu0ho.java:50: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return arr.stream().filter(n -> n%10 != 0).count();\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpudyj4a7j.java:24)\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // write code here\n        if (arr != null)\n        {\n  \
    \          long count = 0; \n            for (int i = 0; i < arr.size(); i++)\
    \ \n            {\n                Long curr = arr.get(i);\n                long\
    \ lastDigit = curr.mod(10);\n                int digit = lastDigit % 10;\n   \
    \             if(digit > 0 && lastDigit > 0) \n                {\n           \
    \         count = count + digit + 1;\n                }\n            }\n     \
    \       return count;\n        }\n        else\n        {\n            return\
    \ 0;\n        }\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_pcbze88.java:27: error: cannot find symbol\n                long\
    \ lastDigit = curr.mod(10);\n                                     ^\n  symbol:\
    \   method mod(int)\n  location: variable curr of type Long\n/tmp/tmp_pcbze88.java:28:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \            int digit = lastDigit % 10;\n                                   \
    \   ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long result = 0L;\n        Arrays.sort(arr);\n        arr.stream().filter(x\
    \ -> x >= 0).forEach(x -> {\n            long digits = Math.abs(x);\n        \
    \    while (digits > 0) {\n                long digit = digits % 10;\n       \
    \         digits = digits / 10;\n                if (digit != 0)\n           \
    \         result += digit;\n            }\n        });\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv63jrcdb.java:21: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return arr.stream().filter(a -> a%10).count();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg2cdl_ik.java:20: error: incompatible types: bad return type in\
    \ lambda expression\n        return arr.stream().filter(a -> a%10).count();\n\
    \                                         ^\n    long cannot be converted to boolean\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return IntStream.range(0, arr.size()).filter(i -> arr.get(i)\
    \ > 0)\n                .map(i -> Math.pow(10, arr.size() - i - 1)).filter(i ->\
    \ arr.get(i) > 0)\n                .mapToLong(i -> arr.get(i)).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpscx7bdlc.java:21: error: incompatible types: bad return type in\
    \ lambda expression\n                .map(i -> Math.pow(10, arr.size() - i - 1)).filter(i\
    \ -> arr.get(i) > 0)\n                                  ^\n    possible lossy\
    \ conversion from double to int\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011566
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.size() == 0) {\n            return 0l;\n        }\n\
    \        Set<Long> set = new HashSet<Long>();\n        for (Long l : arr) {\n\
    \            if (l < 0) {\n                l = -l;\n            }\n          \
    \  set.add(l);\n        }\n        long ret = 0l;\n        for (Long l : arr)\
    \ {\n            if (set.contains(Math.abs(l))) { // abs() returns positive if\
    \ positive, negative if negative\n                ret++;\n            }\n    \
    \    }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4kagnvpv.java:40)\n"
  stdout: ''
  timestamp: 1660011567
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return arr.stream().filter(i->i>=0l).map(i->Integer.signum(i%10)*(Math.abs(i)%10)+Math.abs(i)%10).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuqhxxsz0.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return arr.stream().filter(i->i>=0l).map(i->Integer.signum(i%10)*(Math.abs(i)%10)+Math.abs(i)%10).sum();\n\
    \                                                                    ^\n/tmp/tmpuqhxxsz0.java:20:\
    \ error: cannot find symbol\n        return arr.stream().filter(i->i>=0l).map(i->Integer.signum(i%10)*(Math.abs(i)%10)+Math.abs(i)%10).sum();\n\
    \                                                                            \
    \                             ^\n  symbol:   method sum()\n  location: interface\
    \ Stream<Object>\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011567
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        int count = 1;\n        long sum = 0;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n            boolean\
    \ negative = arr.get(i) < 0l;\n            if (negative) {\n                sum\
    \ += (long)(Math.pow(10, arr.size() - 1 - i) * arr.get(i));\n            }\n \
    \           if (sum > 0l) {\n                count++;\n            }\n       \
    \ }\n        return count;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7t3ppst2.java:35)\n"
  stdout: ''
  timestamp: 1660011567
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        int i = 0;\n        while (i < arr.size())\
    \ {\n            if (arr.get(i) <= 0) {\n                sum += (-(arr.get(i)\
    \ / 10));\n                i++;\n            } else {\n                sum +=\
    \ arr.get(i);\n                i++;\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu_e1u6ta.java:36)\n"
  stdout: ''
  timestamp: 1660011567
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long nums = 0;\n        for(Long num: arr)\n        {\n    \
    \        if((num < 0) && ((num & Math.pow(10,(arr.size() - 1))) > 0))\n      \
    \      {\n                nums++;\n            }\n            else\n         \
    \   {\n                long sum = 0;\n                while(num > 0)\n       \
    \         {\n                    sum += (num % 10);\n                    num /=\
    \ 10;\n                }\n                if(sum > 0)\n                {\n   \
    \                 nums++;\n                }\n            }\n        }\n     \
    \   return nums;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34w_rkvb.java:23: error: bad operand types for binary operator\
    \ '&'\n            if((num < 0) && ((num & Math.pow(10,(arr.size() - 1))) > 0))\n\
    \                                  ^\n  first type:  Long\n  second type: double\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011567
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0l;\n        for (Long x : arr)\n            if (x\
    \ > 0l)\n                sum += x;\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfl8x0pzb.java:29)\n"
  stdout: ''
  timestamp: 1660011567
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr == null || arr.isEmpty()) return 0;\n        long sum\
    \ = 0;\n        for (long num : arr) {\n            sum += num;\n        }\n \
    \       int count = getDigitSum(sum);\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmnauvv9m.java:25: error: cannot find symbol\n        int count\
    \ = getDigitSum(sum);\n                    ^\n  symbol:   method getDigitSum(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011567
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for (long e : arr) {\n            if\
    \ (e > 0) {\n                if (e % 10 > 0)\n                    ++count;\n \
    \           }\n        }\n        return count;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzypvv97j.java:34)\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        boolean first = true;\n        for (long\
    \ num : arr) {\n            if (num < 0) {\n                num *= -1;\n     \
    \       }\n            if (first) {\n                first = false;\n        \
    \        continue;\n            }\n            sum += num % 10;\n            while\
    \ (sum > 9) {\n                sum -= 10;\n            }\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdivr17qf.java:39)\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        long firstSignedDigit = -1;\n     \
    \   for (Long i : arr) {\n            if (i == 0) {\n                continue;\n\
    \            }\n            long firstDigit = i % 10;\n            if (firstSignedDigit\
    \ < 0 || firstDigit < firstSignedDigit) {\n                firstSignedDigit =\
    \ firstDigit;\n            }\n            i = i / 10;\n            if (i < 0)\
    \ {\n                i += (10 * Math.abs(i));\n            }\n            while\
    \ (i >= 1) {\n                if (i % 10 + i >= 9) {\n                    count\
    \ += 1;\n                    i /= 10;\n                } else {\n            \
    \        i /= 10;\n                }\n            }\n        }\n        return\
    \ firstSignedDigit == -1 ? count : -1 * (count + 1);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3tfmpg4r.java:47)\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long ret = 0;\n        if (arr == null) {\n            return\
    \ ret;\n        }\n        long x = arr.get(0);\n        for (Long l : arr) {\n\
    \            long y = l;\n            if (y < 0) {\n                y *= -1;\n\
    \                if (x < y) {\n                    break;\n                }\n\
    \                if (x == y) {\n                    ret++;\n                 \
    \   break;\n                }\n                y /= 10;\n                x /=\
    \ 10;\n            }\n            for (int i = 0; i < y; i++) {\n            \
    \    ret++;\n            }\n        }\n        return ret;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.countNums(tmp4w90nx8w.java:24)\n\tat Problem.main(tmp4w90nx8w.java:46)\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // initialize all variables to zero and use them as counters\n\
    \        long sum = 0, num = 0;\n        // loop through the list\n        for\
    \ (Long num : arr) {\n            // only proceed if the number is not negative\n\
    \            if (!(num < 0)) {\n                // get the remainder of the number\n\
    \                long rem = (int) Math.abs(num);\n                // get the length\
    \ of the number\n                int len = String.valueOf(rem).length();\n   \
    \             // set sum to 0 and keep adding digits of remainder until we get\n\
    \                // the length of the number (i.e. the sum of digits)\n      \
    \          for (int i = 1; i < len; i++) {\n                    sum += rem % 10;\n\
    \                    rem /= 10;\n                }\n                // only proceed\
    \ if the sum greater than zero\n                if (sum > 0) {\n             \
    \       // increment the counter\n                    num++;\n               \
    \ }\n            }\n        }\n        // return the counter\n        return num;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkzgoka9r.java:23: error: variable num is already defined in method\
    \ countNums(ArrayList<Long>)\n        for (Long num : arr) {\n               \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        long i = 0;\n        for(;i < arr.size();i++)\
    \ {\n            if(arr.get(i) > 0) {\n                sum += arr.get(i);\n  \
    \          }\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6sfovhoi.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(arr.get(i) > 0) {\n                       ^\n\
    /tmp/tmp6sfovhoi.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n                sum += arr.get(i);\n                     \
    \          ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011567
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (Long val : arr) {\n            sum\
    \ += val;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp07nqp294.java:28)\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for (Long i : arr) {\n            if\
    \ (i < 0) {\n                i = Math.ceil(i);\n            }\n            if\
    \ (i < 10) {\n                count += 1;\n            } else {\n            \
    \    count += Math.floor(i) % 10;\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfyudrwzm.java:23: error: incompatible types: double cannot be converted\
    \ to Long\n                i = Math.ceil(i);\n                             ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return arr.stream().filter(x -> {\n            return x >= 0;\n\
    \        }).filter(x -> {\n            boolean firstDigit = x % (1L << Integer.numberOfTrailingZeros(x))\
    \ > 0;\n            long digit = x % (1L << Integer.numberOfTrailingZeros(x));\n\
    \            return firstDigit || (digit < 0) == (firstDigit && digit > -1);\n\
    \        }).count();\n    }\n    public static void main(String[] args) {\n  \
    \  assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0hn4u2jo.java:23: error: incompatible types: Long cannot be converted\
    \ to int\n            boolean firstDigit = x % (1L << Integer.numberOfTrailingZeros(x))\
    \ > 0;\n                                                                     \
    \     ^\n/tmp/tmp0hn4u2jo.java:24: error: incompatible types: Long cannot be converted\
    \ to int\n            long digit = x % (1L << Integer.numberOfTrailingZeros(x));\n\
    \                                                                  ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011568
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long total = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) > 0) {\n                total += arr.get(i);\n\
    \            }\n        }\n        return total;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3kc4q4yg.java:31)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long ans = 0, num = 0;\n        for (Long i : arr) {\n     \
    \       num += i;\n            if (num > 0) {\n                ans += 1;\n   \
    \             num %= 10;\n            }\n        }\n        return ans;\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpptwx3ota.java:33)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (Long l : arr) {\n            sum\
    \ += l;\n        }\n        if (sum < 0) {\n            sum *= -1;\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxxlr2zz2.java:31)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr == null)\n            return 0;\n        long digitSum\
    \ = 0;\n        long digits = 0;\n        for (long d : arr)\n            digitSum\
    \ += d;\n        while (digitSum >= 1) {\n            digitSum /= 10;\n      \
    \      digits++;\n        }\n        return digits;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuztfqjm3.java:35)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for (long num : arr) {\n          \
    \  if (num > 0) {\n                if (num % 10 != 0) {\n                    count\
    \ += 1;\n                }\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmdygcsbq.java:35)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.isEmpty()) {\n            return 0L;\n        }\n  \
    \      if (arr.size() == 1) {\n            if (arr.get(0) == 0) {\n          \
    \      return 1L;\n            }\n        }\n        if (arr.size() > 1 && arr.size()\
    \ < 1000000) {\n            long result = 0;\n            long sum = 0;\n    \
    \        for (Long l : arr) {\n                if (l > 0) {\n                \
    \    sum += l;\n                }\n            }\n            int negativeSignificand\
    \ = -1;\n            int exponent = 0;\n            for (Long l : arr) {\n   \
    \             if (l > 0) {\n                    long l = Math.abs(l);\n      \
    \              int shiftCount = 1;\n                    int currentDigit = 0;\n\
    \                    int sumOfDigits = sum;\n                    while (l > 0)\
    \ {\n                        currentDigit = l % 10;\n                        sumOfDigits\
    \ += currentDigit;\n                        l /= 10;\n                       \
    \ shiftCount++;\n                    }\n                    exponent += shiftCount;\n\
    \                    if (currentDigit < 0) {\n                        if (sumOfDigits\
    \ > 0 && sumOfDigits < 10) {\n                            sumOfDigits *= -1;\n\
    \                        }\n                        if (sumOfDigits > 9) {\n \
    \                           if (exponent > 1) {\n                            \
    \    exponent -= 2;\n                            }\n                         \
    \   else {\n                                exponent -= 1;\n                 \
    \           }\n                        }\n                        else if (sumOfDigits\
    \ == 9) {\n                            if (exponent > 2) {\n                 \
    \               exponent -= 3;\n                            }\n              \
    \              else {\n                                exponent -= 2;\n      \
    \                      }\n                        }\n                    }\n \
    \               }\n            }\n            result += exponent;\n          \
    \  return result;\n        }\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj38z79dt.java:40: error: variable l is already defined in method\
    \ countNums(ArrayList<Long>)\n                    long l = Math.abs(l);\n    \
    \                     ^\n/tmp/tmpj38z79dt.java:43: error: incompatible types:\
    \ possible lossy conversion from long to int\n                    int sumOfDigits\
    \ = sum;\n                                      ^\n/tmp/tmpj38z79dt.java:45: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \             currentDigit = l % 10;\n                                       \
    \  ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long result = 0l;\n        for (Long l : arr)\n            if\
    \ (l > 0)\n                result += (long)Math.log10(l);\n\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw2f78hrx.java:30)\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = (long)0;\n        for (long val : arr) {\n    \
    \        val = Math.abs(val);\n            while (val > 0) {\n               \
    \ int digit = val % 10;\n                val = val / 10;\n                count++;\n\
    \                if (digit > 0) count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw3ionzmp.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n                int digit = val % 10;\n                  \
    \              ^\n1 error\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Your code goes here\n        long sum = 0;\n        ArrayList<Long>\
    \ temp = new ArrayList<>();\n        for(int i = 0; i < arr.size(); i++){\n  \
    \          if(i==arr.size()-1){\n                sum += arr.get(i);\n        \
    \        continue;\n            }\n            temp = arr.get(i);\n          \
    \  long rem = temp%10;\n            sum += rem*Math.pow(10, arr.size()-1-i);\n\
    \            arr.remove(i);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw0pxr4n2.java:28: error: incompatible types: Long cannot be converted\
    \ to ArrayList<Long>\n            temp = arr.get(i);\n                       \
    \   ^\n/tmp/tmpw0pxr4n2.java:29: error: bad operand types for binary operator\
    \ '%'\n            long rem = temp%10;\n                           ^\n  first\
    \ type:  ArrayList<Long>\n  second type: int\n2 errors\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        int len = arr.size();\n        long sum = 0;\n        arr.stream().forEach(num\
    \ -> {\n            sum += num;\n        });\n        return arr.stream().filter(i\
    \ -> Math.abs(i) < Math.pow(10, len)).count();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3wf1c4iq.java:23: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n            sum += num;\n   \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1660011569
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long total = 0;\n        for (Long val : arr) {\n          \
    \  int digits = (int) (Math.abs(val) / Math.pow(10, (long) Math.log10(Math.abs(val)\
    \ + 1)));\n            if (digits >= 0) {\n                total += val * (long)\
    \ Math.pow(10, digits);\n            }\n        }\n        return total;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw_u2ba01.java:31)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        \n        long sum = 0;\n        for(int i=0; i<arr.size();\
    \ i++){\n            if (arr.get(i)<0){\n                sum -= Math.abs(arr.get(i));\n\
    \            } else {\n                sum += arr.get(i);\n            }\n   \
    \     }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0je6gnhz.java:33)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = arr\n            .stream()\n            .filter(e\
    \ -> e > 0)\n            .count();\n        return (count == 0) || (arr.get(0)\
    \ < 0) ? count-Math.abs(arr.get(0)) : count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.countNums(tmpf0gld2d2.java:24)\n\tat Problem.main(tmpf0gld2d2.java:27)\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.isEmpty()) return 0;\n\n        // A positive number\
    \ has a positive first digit\n        if (arr.stream().filter(i -> i >= 0l).count()\
    \ == 1) return 1l;\n\n        // A negative number has a negative first digit\n\
    \        if (arr.stream().filter(i -> i < 0l).count() == 1) return -1l;\n\n  \
    \      // A number that has all digits positive has even one non-negative digit\n\
    \        if (arr.stream().filter(i -> i >= 0l).collect(Collectors.toSet()).contains(1l))\
    \ return arr.stream().filter(i -> i >= 0l).count();\n\n        // A number that\
    \ has all digits negative has even one non-negative digit\n        if (arr.stream().filter(i\
    \ -> i < 0l).collect(Collectors.toSet()).contains(-1l)) return arr.stream().filter(i\
    \ -> i < 0l).count();\n\n        long sumOfDigits = 0;\n        long firstNegative\
    \ = arr.stream()\n                .filter(i -> i < 0l)\n                .findFirst()\n\
    \                .orElse(0l);\n\n        // Count the number that has all non-negative\
    \ digits > 0\n        sumOfDigits += arr.stream()\n                .filter(i ->\
    \ i >= 0l)\n                .filter(i -> i < firstNegative)\n                .collect(Collectors.toSet()).size();\n\
    \n        // Count the number that has all non-negative digits < 0\n        sumOfDigits\
    \ += arr.stream()\n                .filter(i -> i < 0l)\n                .filter(i\
    \ -> i < firstNegative)\n                .filter(i -> i >= 0l)\n             \
    \   .collect(Collectors.toSet()).size();\n\n        return sumOfDigits;\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmv62ykmo.java:57)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        Arrays.sort(arr);\n        long sum = 0;\n        boolean firstDigitPositive\
    \ = false;\n        for (int i = 0; i < arr.size() && !firstDigitPositive; i++)\
    \ {\n            long current = arr.get(i);\n            if (current < 0) {\n\
    \                firstDigitPositive = true;\n                current = Math.abs(current);\n\
    \            }\n            for (int j = 0; j < arr.size() && j >= i; j++){\n\
    \                long nextCurrent = arr.get(j);\n                if (current+nextCurrent\
    \ == 0) {\n                    sum++;\n                    break;\n          \
    \      }\n                else if (current+nextCurrent == 9) {\n             \
    \       sum++;\n                }\n                else if (current+nextCurrent\
    \ < 9) {\n                    break;\n                }\n                else\
    \ {\n                    sum++;\n                }\n            }\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjw3enu6b.java:20: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long cnt = 0;\n        for (Long l : arr) {\n            if\
    \ (l > 0)\n                cnt += countNums(arr.subList(arr.indexOf(l) + 1, arr.size()));\n\
    \        }\n        return cnt;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_zc6a7_.java:23: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n                cnt += countNums(arr.subList(arr.indexOf(l)\
    \ + 1, arr.size()));\n                                            ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long result = 0;\n        IntStream.range(0, arr.size()).forEach(i\
    \ -> {\n            try {\n                result += arr.get(i) - Integer.parseInt(String.valueOf(arr.get(i)));\n\
    \            } catch (NumberFormatException nfe) {\n                result +=\
    \ arr.get(i);\n            }\n        });\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6g5419cl.java:23: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n                result += arr.get(i)\
    \ - Integer.parseInt(String.valueOf(arr.get(i)));\n                ^\n/tmp/tmp6g5419cl.java:25:\
    \ error: local variables referenced from a lambda expression must be final or\
    \ effectively final\n                result += arr.get(i);\n                ^\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011570
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.isEmpty()) return (0L);\n        Long sum = 0L;\n  \
    \      long digitSum = 0L;\n        for(int i = 0; i < arr.size(); i++) {\n  \
    \          sum += (arr.get(i).longValue() % 10);\n            digitSum += arr.get(i).longValue()\
    \ % 10;\n        }\n        if (sum > 0 && digitSum > 0) {\n            return\
    \ (long) Math.ceil((double)digitSum * Math.pow(10, arr.size() - 1));\n       \
    \ }\n        return (0L);\n    }\n    public static void main(String[] args) {\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphckhe39h.java:35)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long cnt = 0;\n        for (long d : arr) {\n            if\
    \ (d > 0) {\n                cnt += 1;\n            }\n        }\n        return\
    \ cnt;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjuc2yy2d.java:34)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.isEmpty())\n            return 0;\n        long firstDigit\
    \ = arr.get(0);\n        if (firstDigit < 0) {\n            firstDigit *= -1;\n\
    \            arr.set(0,firstDigit);\n        }\n        long sum = 0;\n      \
    \  for (long l : arr) {\n            sum += l;\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcc3ypblf.java:35)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for (int i = 0; i < arr.size(); i++)\n\
    \            if (arr.get(i) > 0)\n                count = count + (long) Math.pow(10,\
    \ arr.size() - i - 1);\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpytkxtyql.java:29)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Your code here...\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1b124f_l.java:21: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long[] digits = new long[arr.size()];\n        long sum = 0;\n\
    \        for (int i = 0; i < arr.size(); i++)\n            digits[i] = Math.abs(arr.get(i));\n\
    \        for (long i = 0; i < digits.length; i++)\n            sum += digits[i]\
    \ * Math.pow(10, i);\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1mhri_ef.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            sum += digits[i] * Math.pow(10, i);\n        \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.isEmpty()) return (0l);\n        long count = 0;\n \
    \       for (long i : arr) {\n            if (i > 0) count += i;\n           \
    \ else if ((i & Long.MIN_VALUE) > 0) count += Long.MIN_VALUE;\n        }\n   \
    \     return count;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpah4wa5mf.java:31)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return arr.stream()\n                .filter(t -> t >= 0)\n\
    \                .filter(t -> t % 10 == 0)\n                .distinct()\n    \
    \            .count();\n    }\n    public static void main(String[] args) {\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6a_5z_l7.java:28)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (Long n : arr) {\n            sum\
    \ += n % 10;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpztfi7cvu.java:28)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // write your logic here\n        long count = 0L;\n       \
    \ if (arr.size() > 0) {\n            Long temp = (Long) arr.get(0);\n        \
    \    while (arr.size() > 1) {\n                long temp_long = 0;\n         \
    \       for (int i = 1; i < arr.size(); i++) {\n                    if (arr.get(i)\
    \ > 0) {\n                        temp_long += arr.get(i).longValue();\n     \
    \               } else {\n                        temp_long += (temp_long < 0\
    \ ? temp : -temp);\n                        temp_long = temp_long % 10;\n    \
    \                }\n                }\n                if (temp_long > 0) {\n\
    \                    count += temp_long;\n                }\n                temp\
    \ = (Long) arr.get(0);\n            }\n        }\n        return count;\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011577
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for (long num : arr) {\n          \
    \  long sum = 0;\n            while (num > 0) {\n                sum += num %\
    \ 10;\n                num /= 10;\n            }\n            if (sum > 0) count++;\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpesg1iawd.java:37)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long result = Long.MIN_VALUE;\n        for (Long i : arr) {\n\
    \            if (i < 0) {\n                i = i.longValue();\n              \
    \  i -= (int) (i % 10) * Math.pow(10, i%10);\n            } else {\n         \
    \       i /= 10;\n            }\n            if (result < i) {\n             \
    \   result = i;\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe27th0yn.java:24: error: incompatible types: double cannot be converted\
    \ to Long\n                i -= (int) (i % 10) * Math.pow(10, i%10);\n       \
    \                             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        long sum = 0;\n        if (arr.isEmpty())\
    \ return sum;\n\n        for (long num : arr) {\n            if (num < 0)\n  \
    \              num *= -1;\n            sum += num;\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc52ay74w.java:33)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // YOUR CODE GOES BELOW\n        long numSum = 0;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0) numSum =\
    \ Math.abs(numSum) + Math.abs(arr.get(i));\n            else numSum = numSum +\
    \ arr.get(i);\n        }\n        return numSum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2iav1usk.java:30)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0;\n        for (long i : arr) {\n            sum\
    \ += i;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjo4jeeyx.java:28)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long sum = 0, count = 1;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            sum += Math.abs(arr.get(i));\n            count += arr.contains(Math.abs(arr.get(i)))\
    \ ? 1 : 0;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpju9c6m1n.java:29)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Write your logic here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiqhay2j9.java:21: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long[] digits = arr\n            .stream()\n            .map(a\
    \ -> (a < 0 ? -a % 10 : a) % 10)\n            .toArray();\n        long sum =\
    \ 0;\n        for (long d : digits) sum += d;\n        return sum > 0 ? sum :\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrmiigyq.java:23: error: incompatible types: Object[] cannot be\
    \ converted to long[]\n            .toArray();\n                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return arr.stream().filter(v -> v > 0).count();\n    }\n   \
    \ public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppt0udwnk.java:28)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Your code here\n        long sum = 0;\n        boolean first\
    \ = false;\n        for (Long num : arr) {\n            if (num < 0) {\n     \
    \           sum += Math.signum(num) * Math.abs(num);\n                if (first)\
    \ {\n                    sum = sum - Math.abs(num);\n                    break;\n\
    \                } else {\n                    first = true;\n               \
    \ }\n            } else {\n                sum += num;\n            }\n      \
    \  }\n        return sum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu18ipprj.java:40)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        long sign = arr.get(0).signum();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long n = arr.get(i);\n\
    \            if (n < 0) {\n                sign = -1;\n                if (n <\
    \ 0) {\n                    n = -n;\n                }\n            } else {\n\
    \                if (n < 0) {\n                    n = n * sign;\n           \
    \     }\n            }\n            long sum = 0;\n            while (n > 0) {\n\
    \                sum += n % 10;\n                n /= 10;\n            }\n   \
    \         if (sum > 0) {\n                count++;\n            }\n        }\n\
    \        return count;\n    }\n    public static void main(String[] args) {\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpom2hk876.java:21: error: method signum in class Long cannot be\
    \ applied to given types;\n        long sign = arr.get(0).signum();\n        \
    \                      ^\n  required: long\n  found:    no arguments\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // This class will contain all the results of digitSum\n   \
    \     ArrayList<Long> digitsSum = new ArrayList<>();\n        // This variable\
    \ will be the count of the elements that has a sum of digits > 0\n        long\
    \ nums = 0;\n        // Loop through each element of the array\n        for (long\
    \ element : arr) {\n            // Count how many of the element is a digit sum\n\
    \            long digitSum = 0;\n            // Loop through each digit of the\
    \ element\n            for (long digit : countDigits(element)) {\n           \
    \     // If digit is 0, then it is not a digit sum\n                if (digit\
    \ == 0) {\n                    continue;\n                }\n                //\
    \ If digit is negative, then it is the first signed digit\n                if\
    \ (digit < 0) {\n                    digitSum = digitSum * 10 + (int)digit;\n\
    \                    continue;\n                }\n                // If the sum\
    \ is greater than 0, then it must be the sum of the digits\n                digitSum\
    \ += digit;\n            }\n            // If the element is a digit sum, then\
    \ add it to the list\n            if (digitSum > 0) {\n                digitsSum.add(digitSum);\n\
    \            }\n            // If there are no elements with digit sums, then\
    \ just add it to the count\n            else if (digitsSum.isEmpty()) {\n    \
    \            digitsSum.add(element);\n                nums++;\n            }\n\
    \        }\n        return nums;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfkg9evr2.java:29: error: cannot find symbol\n            for (long\
    \ digit : countDigits(element)) {\n                              ^\n  symbol:\
    \   method countDigits(long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        int count = 0;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long a = arr.get(i);\n            int digits = 0;\n         \
    \   while (a != 0) {\n                if (a >= Math.pow(10, digits)) {\n     \
    \               digits++;\n                }\n                a = a / 10;\n  \
    \          }\n            if (digits > 0) count++;\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdxlc4chw.java:40)\n"
  stdout: ''
  timestamp: 1660011573
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        long total = 0;\n        for\
    \ (long i : arr) {\n            if (i > 0) total += i;\n        }\n        return\
    \ total;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsek9rnhz.java:30)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        \n        if (arr.size() < 1) {\n            return 0;\n   \
    \     }\n        \n        List<Long> nums = arr.stream()\n                .filter(n\
    \ -> n > 0)\n                .collect(Collectors.toList());\n        \n      \
    \  long ans = nums.size();\n        \n        long digitSum = 0;\n        \n \
    \       // iterate over all numbers to find the digit sum\n        for (int i\
    \ = 0; i < ans; i++){\n            digitSum += nums.get(i);\n        }\n     \
    \   \n        return digitSum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprf2nty0o.java:43)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for (Long l : arr) {\n            long\
    \ n = Math.abs(l);\n            count += (int) Math.pow(10, arr.indexOf(n) + 1)\
    \ - 1;\n        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpezihu9qg.java:29)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for (long num : arr) {\n          \
    \  long sum = 0;\n            while (num > 0) {\n                sum += (num %\
    \ 10); // get last digit\n                num /= 10;          // remove last digit\n\
    \            }\n            if (sum > 0)\n                count++;\n        }\n\
    \        return count;\n    }\n    public static void main(String[] args) {\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaul5bm2k.java:38)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        LongStream stream=arr.stream();\n        Stream<Long> negatives\
    \ = stream.filter(x -> x < 0L);\n        LongStream positives = stream.filter(x\
    \ -> x >= 0L);\n\n        long[] digits=positives.mapToLong(x->Math.abs(x%10)).limit(10).toArray();\n\
    \        int length=digits.length;\n        long[] signedDigits=negatives.mapToLong(x->Math.abs(x%10)).limit(10).toArray();\n\
    \        Arrays.sort(signedDigits);\n        long count = 0;\n\n        int i=0;\n\
    \        while (i<length) {\n            long digitSum = digits[i] + signedDigits[i];\n\
    \            count += (int) Math.pow(10, length - i - 1);\n            if (digitSum\
    \ > 0) {\n                count += (int) Math.pow(10, digitSum);\n           \
    \ }\n            i++;\n        }\n\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb016yuyq.java:20: error: incompatible types: Stream<Long> cannot\
    \ be converted to LongStream\n        LongStream stream=arr.stream();\n      \
    \                              ^\n/tmp/tmpb016yuyq.java:21: error: incompatible\
    \ types: LongStream cannot be converted to Stream<Long>\n        Stream<Long>\
    \ negatives = stream.filter(x -> x < 0L);\n                                  \
    \            ^\n/tmp/tmpb016yuyq.java:24: error: cannot find symbol\n        long[]\
    \ digits=positives.mapToLong(x->Math.abs(x%10)).limit(10).toArray();\n       \
    \                        ^\n  symbol:   method mapToLong((x)->Math.[...]% 10))\n\
    \  location: variable positives of type LongStream\n3 errors\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long n = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            n = n + Math.abs(arr.get(i));\n        }\n        return n;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_uglj1yz.java:28)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Complete the implementation here.\n        long sum = 0l;\n\
    \        for (Long value : arr) {\n            if (value < 0) {\n            \
    \    int firstDigit = Math.abs(value.intValue() % 10);\n                value\
    \ /= firstDigit;\n                sum += firstDigit * (value % 10);\n        \
    \    } else {\n                sum += value.intValue();\n            }\n     \
    \   }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp01w6rnwa.java:35)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        int sum = 0;\n        for(Long\
    \ value : arr){\n            sum += Math.abs((int) value);\n        }\n      \
    \  return sum;\n    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp90w7wwge.java:23: error: incompatible types: Long cannot be converted\
    \ to int\n            sum += Math.abs((int) value);\n                        \
    \          ^\n1 error\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long countNums = 0;\n        Long prevNum = null;\n        for\
    \ (Long num : arr) {\n            if (prevNum != null && num != prevNum) {\n \
    \               // add up all non-zero digits\n                long nonZeroDigits\
    \ = countNums(new ArrayList<Long>(arr.subList(0, arr.indexOf(prevNum))));\n  \
    \              countNums += (long)Math.pow(10, nonZeroDigits - 1);\n         \
    \   }\n            countNums += num;\n            prevNum = num;\n        }\n\
    \        return countNums;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l,\
    \ (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9mcs2b_b.java:35)\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return arr.stream().filter(elem -> elem > 0).count();\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnh3tsoh8.java:28)\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        if (arr.isEmpty())\n            return 0l;\n        // If the\
    \ first element is a negative one, we need to ignore it.\n        if (arr.get(0l)\
    \ < 0l)\n            arr.add(0, -arr.get(0));\n\n        long nums = 0;\n    \
    \    long sum = arr.get(0l);\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            long a = arr.get(i) - sum;\n            if (a < 0) {\n          \
    \      a = -a;\n                if (a > 0)\n                    nums++;\n    \
    \        }\n            sum += a;\n        }\n        return nums;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnykxhpii.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n        if (arr.get(0l) < 0l)\n                    ^\n/tmp/tmpnykxhpii.java:27:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    long sum = arr.get(0l);\n                           ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long nums = 0;\n        for (Long i : arr) {\n            nums\
    \ += (int) i;\n        }\n        if (nums < 0) nums *= -1;\n        return nums;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_025e5oj.java:22: error: incompatible types: Long cannot be converted\
    \ to int\n            nums += (int) i;\n                          ^\n1 error\n"
  stdout: ''
  timestamp: 1660011574
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count1 = 0l; long count2 = 0l;\n        for(long num :\
    \ arr) {\n            int sum = 0;\n            while(num >= 10) {\n         \
    \       sum += num % 10;\n                num = num / 10;\n            }\n   \
    \         if((sum > 0) && (sum < 9)) {\n                count1++;\n          \
    \  } else {\n                count2++;\n            }\n        }\n        return\
    \ (count1 * 10 + count2);\n    }\n    public static void main(String[] args) {\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-2l, (long)0l)))) == (0l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)1l, (long)2l,\
    \ (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l, (long)-6l, (long)0l,\
    \ (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)100l, (long)98l, (long)-7l, (long)1l, (long)-1l)))) == (4l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)12l, (long)23l, (long)34l, (long)-45l, (long)-56l,\
    \ (long)0l)))) == (5l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l)))) == (1l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l))))\
    \ == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprgji59vk.java:37)\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long count = 0;\n        for (Long l : arr) {\n            if\
    \ ((l < 0l)) {\n                if ((l > 0l)) {\n                    if (l.signum()\
    \ < 0l) l = l.negate();\n                    l = (-l).divide(10l);\n         \
    \           l += ((-l).remainder(10l))/10l;\n                    l += ((-l).remainder(10l))%10l;\n\
    \                    count += l;\n                }\n            }\n         \
    \   else\n                count += l;\n        }\n        return count;\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5boy_xl1.java:24: error: method signum in class Long cannot be\
    \ applied to given types;\n                    if (l.signum() < 0l) l = l.negate();\n\
    \                         ^\n  required: long\n  found:    no arguments\n  reason:\
    \ actual and formal argument lists differ in length\n/tmp/tmp5boy_xl1.java:24:\
    \ error: cannot find symbol\n                    if (l.signum() < 0l) l = l.negate();\n\
    \                                              ^\n  symbol:   method negate()\n\
    \  location: variable l of type Long\n/tmp/tmp5boy_xl1.java:25: error: long cannot\
    \ be dereferenced\n                    l = (-l).divide(10l);\n               \
    \             ^\n/tmp/tmp5boy_xl1.java:26: error: long cannot be dereferenced\n\
    \                    l += ((-l).remainder(10l))/10l;\n                       \
    \       ^\n/tmp/tmp5boy_xl1.java:27: error: long cannot be dereferenced\n    \
    \                l += ((-l).remainder(10l))%10l;\n                           \
    \   ^\n5 errors\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long ret = 0l;\n        for (long num : arr) {\n           \
    \ int cnt = 0;\n            while (num > 0) {\n                cnt += num % 10;\n\
    \                num /= 10;\n            }\n            if (cnt > 0) {\n     \
    \           ret += cnt;\n            }\n        }\n        return ret;\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwkqpr8qg.java:36)\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long nums = arr.stream().filter(n -> n > 0).count();\n     \
    \   if (nums == 0)\n            nums = -1;\n        List<Long> signs = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            int n = num / 10;\n            if (n > 0) {\n                signs.add(num\
    \ % 10);\n            }\n            nums = Math.abs(nums);\n        }\n     \
    \   if (signs.size() == 0) {\n            if (nums > 0)\n                nums\
    \ = -1;\n            else\n                nums = +1;\n        } else {\n    \
    \        signs.add(nums);\n        }\n        if (signs.size() > 2)\n        \
    \    signs.removeIf(n -> n < 0);\n        return signs.get(0);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3b6f37v.java:26: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int n = num / 10;\n                        ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        long ret = 0;\n        ArrayList<Integer> digits = arr.stream().map(i\
    \ -> Math.abs(i)).filter(i -> i > 0).boxed().collect(Collectors.toList());\n \
    \       Arrays.sort(digits);\n        long sum = 0;\n        for (int i = 0; i\
    \ < digits.size(); i++) {\n            sum += digits.get(i);\n        }\n    \
    \    if (sum > 0) {\n            ret++;\n        }\n        return ret;\n    }\n\
    \    public static void main(String[] args) {\n    assert(countNums((new ArrayList<Long>(Arrays.asList())))\
    \ == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9__j38xj.java:21: error: cannot find symbol\n        ArrayList<Integer>\
    \ digits = arr.stream().map(i -> Math.abs(i)).filter(i -> i > 0).boxed().collect(Collectors.toList());\n\
    \                                                                            \
    \             ^\n  symbol:   method boxed()\n  location: interface Stream<Long>\n\
    /tmp/tmp9__j38xj.java:22: error: no suitable method found for sort(ArrayList<Integer>)\n\
    \        Arrays.sort(digits);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        int sum = 0;\n        boolean neg = false;\n        long sumOfDigits\
    \ = 0;\n        Long firstSignedDigit = null;\n        for (Long val : arr) {\n\
    \            sum += val;\n            if (val < 0) {\n                neg = true;\n\
    \                val = -val;\n                firstSignedDigit = -firstSignedDigit;\n\
    \            }\n            if (sum >= 10) {\n                sumOfDigits += sum\
    \ - 10;\n                sum = 0;\n            }\n        }\n        if (neg)\
    \ sumOfDigits -= 10; // The sign has been counted\n        if (sumOfDigits > 0)\
    \ return 1l;\n        if (sumOfDigits == 0) {\n            return 0;\n       \
    \ }\n        return sumOfDigits + countNums(arr.subList(0, arr.size()-1));\n \
    \   }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpavycoocd.java:41: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return sumOfDigits + countNums(arr.subList(0,\
    \ arr.size()-1));\n                                                  ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        return arr.stream().filter(l -> l.longValue() > 0).count();\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp889kog87.java:28)\n"
  stdout: ''
  timestamp: 1660011575
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function count_nums which takes an array array\
    \ list of integers and returns\n    // the number of elements which has a sum\
    \ of digits > 0.\n    // If a number is negative, then its first signed digit\
    \ will be negative:\n    // e.g. -123 has signed digits -1, 2, and 3.\n    //\
    \ >>> countNums((new ArrayList<Long>(Arrays.asList())))\n    // (0l)\n    // >>>\
    \ countNums((new ArrayList<Long>(Arrays.asList((long)-1l, (long)11l, (long)-11l))))\n\
    \    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
    \ arr) {\n        // Write your code here\n        long count = 0;\n        for\
    \ (Long l : arr) {\n            long sum = 0;\n            while (l > 0) {\n \
    \               sum += l % 10;\n                l /= 10;\n            }\n    \
    \        if (sum > 0)\n                ++count;\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n\
    \    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
    \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
    \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
    \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
    \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpld_bx5dm.java:39)\n"
  stdout: ''
  timestamp: 1660011575
