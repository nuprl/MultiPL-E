name: HumanEval_35_max_element
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return maximum element in the array list.\n    // >>> maxElement((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n    // (3l)\n\
  \    // >>> maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l,\
  \ (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l))))\n\
  \    // (123l)\n    public static long maxElement(ArrayList<Long> l) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(maxElement((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l)))) == (3l));\n   \
  \ assert(maxElement((new ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l,\
  \ (long)2l, (long)-3l, (long)3l, (long)9l, (long)0l, (long)124l, (long)1l, (long)-10l))))\
  \ == (124l));\n    }\n\n}\n"
completions: ["        long max = 0l;\n        for (int i = 0; i < l.size(); i++)\
    \ {\n            max = Math.max(max, l.get(i));\n        }\n        return max;",
  "        long max = Long.MIN_VALUE;\n        for(long i : l) {\n            if(i>max)\
    \ {\n                max = i;\n            }\n        }\n        return max;",
  '        return Collections.max(l);', '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = Long.MIN_VALUE;\n        long curr = Long.MIN_VALUE;\n     \
    \   for (Long v : l) {\n            curr = Math.max(curr, v);\n            max\
    \ = Math.max(max, curr);\n        }\n        return max;", "        long res =\
    \ Long.MIN_VALUE;\n        for (long val : l) {\n            if (val > res)\n\
    \                res = val;\n        }\n        return res;", "        Comparator<Long>\
    \ comparator = Comparator.comparingLong(Long::longValue);\n        Long max =\
    \ l.stream().max(comparator).get();\n        return max;", "        long max =\
    \ l.get(0);\n        for (Long i : l) {\n            if (i >max) {\n         \
    \       max = i;\n            }\n        }\n        return max;", "        long\
    \ max = Long.MIN_VALUE;\n        for (Long value : l) {\n            if (max <\
    \ value) {\n                max = value;\n            }\n        }\n        return\
    \ max;", "        if (l == null || l.isEmpty()) {\n            return 0;\n   \
    \     }\n        long max = l.get(0);\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            if (l.get(i) > max) {\n                max = l.get(i);\n    \
    \        }\n        }\n        return max;", "        Collections.sort(l);\n \
    \       Collections.reverse(l);\n        long maxElement = l.get(0);\n       \
    \ for (long element : l)\n            if (maxElement < element)\n            \
    \    maxElement = element;\n        return maxElement;", '        return Collections.max(l);',
  "        if (l.isEmpty())\n            return (Long) 0;\n        Long max = l.get(0);\n\
    \        for (long x : l)\n            if (x > max)\n                max = x;\n\
    \        return max;", "        long max = Long.MIN_VALUE;\n        for (long\
    \ i : l) {\n            if (i > max)\n                max = i;\n        }\n  \
    \      return max;", "        long maxElem = Collections.max(l);\n        return\
    \ maxElem;", "        return l.stream()\n                .max(Long::compare)\n\
    \                .orElse(-1l);", "        if (l.isEmpty()) return 0L;\n      \
    \  BigInteger max = BigInteger.ZERO;\n        for (long e : l) {\n           \
    \ if (BigInteger.ZERO.compareTo(e) > 0) {\n                max = e;\n        \
    \    }\n        }\n        return max.longValue();", "        long max = Long.MIN_VALUE;\n\
    \        for (Long ele : l) {\n            if (ele > max) {\n                max\
    \ = ele;\n            }\n        }\n        return max;", '        return Math.max(l.get(0),
    Math.max(l.get(1), Math.max(l.get(2), l.get(3)));', "        Collections.sort(l);\n\
    \        return l.get(l.size() - 1);", '        return Collections.max(l);', " \
    \       long maxValue = 0L;\n        for (long v : l) {\n            if (v > maxValue)\
    \ maxValue = v;\n        }\n        return maxValue;", "        Long max = Long.valueOf(0l);\n\
    \        for (Long e : l)\n            if (e > max)\n                max = e;\n\
    \        return max;", '        return Math.max(l.stream().mapToLong(Long::longValue).max().getAsLong());',
  "        long max = Long.MIN_VALUE;\n        for (Long l : l)\n            if (l\
    \ > max)\n                max = l;\n        return max;", "        if (l == null\
    \ || l.isEmpty()) {\n            throw new IllegalArgumentException(\"List is\
    \ empty or null.\");\n        }\n        LongStream s = l.stream().mapToLong(Long::longValue);\n\
    \        Optional<Long> max = s.max();\n        if (max.isPresent()) {\n     \
    \       return max.get();\n        } else {\n            throw new RuntimeException(\"\
    Empty list is not allowed.\");\n        }", "        Long max = Long.MIN_VALUE;\n\
    \        long maxElement = 0;\n        for (Long i : l) {\n            if (maxElement.compareTo(i)\
    \ > 0) {\n                max = i;\n                maxElement = i;\n        \
    \    }\n        }\n        return maxElement;", "        long result = Long.MIN_VALUE;\n\
    \        for (Long i : l) {\n            if (result > i) {\n                result\
    \ = i;\n            }\n        }\n        return result;", '        return Collections.max(l);',
  "        Collections.sort(l);\n        return l.isEmpty() ? 0l : l.get(l.size()\
    \ - 1);", "        long result = 0l;\n        for (long element: l) {\n      \
    \      if (element > result) {\n                result = element;\n          \
    \  }\n        }\n        return result;", "        // Get size to find greatest\
    \ element.\n        int size = l.size();\n        // Find greatest element by\
    \ sorting in descending order.\n        Collections.sort(l, Collections.reverseOrder());\n\
    \        // Return greatest element or return 0 if list empty.\n        return\
    \ size == 0 ? 0 : l.get(0);", "        // Return the element of the maximum value\
    \ in the array.\n        // >>> maxElement((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l)))) == (123l)\n        long maxElement = l.stream().reduce((maxValue,\
    \ element) -> maxValue > element ? maxValue : element).get();\n        return\
    \ maxElement;", "        long max = Long.MIN_VALUE;\n        for(long l : l) {\n\
    \            if(l > max) {\n                max = l;\n            }\n        }\n\
    \        return max;", '        return l.stream().max(Comparator.naturalOrder()).orElse(-1l);',
  "        if (l.isEmpty())\n            throw new RuntimeException(\"Empty list\"\
    );\n        Long maxElem = Collections.max(l);\n        if (maxElem == null)\n\
    \            throw new RuntimeException(\"List is all zeros\");\n        return\
    \ maxElem;", "        long max = Long.MIN_VALUE;\n        for (long l : l) {\n\
    \            max = Math.max(max, l);\n        }\n        return max;", "     \
    \   if (l.isEmpty()) {\n            return 0L;\n        }\n        return Collections.max(l);",
  "        if (l.isEmpty()) {\n            return 0;\n        } else {\n         \
    \   int max = l.get(0); // We assume list has at least two elements.\n       \
    \     for (int i = 1; i < l.size(); i++) {\n                if (l.get(i) > max)\
    \ {\n                    max = l.get(i);\n                }\n            }\n \
    \           return max;\n        }", "        l.sort(Long::compareTo);\n     \
    \   return l.get(l.size() - 1);", '        return Collections.max(l);', "    \
    \    Long max = Collections.max(l);\n        return max;", "        if (l.size()\
    \ > 0) {\n            return Collections.max(l);\n        }\n        return 0;",
  "        if (l.isEmpty()) {\n            return 0L;\n        }\n        Arrays.sort(l);\n\
    \        return l.get(l.size() - 1);", "        long max = 0L;\n        Long maxElement\
    \ = null;\n        for(long i : l) {\n            if(max < i) {\n            \
    \    max = i;\n                maxElement = i;\n            }\n        }\n   \
    \     return maxElement;", '        l.stream().max().orElse(Long.MIN_VALUE);',
  "        long max = Long.MIN_VALUE;\n        for (Long i : l) {\n            if\
    \ (max < i) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        l.sort((e1, e2) -> Long.compare(e2, e1));\n        return l.get(l.size()\
    \ - 1);", "        long max = Long.MIN_VALUE;\n        for (long e : l) {\n  \
    \          if (e > max) {\n                max = e;\n            }\n        }\n\
    \        return max;", "        Collections.sort(l);\n        return l.get(l.size()\
    \ - 1);", '        return Collections.max(l);', "        long max = Long.MIN_VALUE;\n\
    \        for (long i : l) {\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for (Long l : l) {\n            if (l > max) max = l;\n        }\n  \
    \      return max;", "        long max = l.get(0l);\n        for (long i : l)\
    \ {\n            if (max < i) { max = i; }\n        }\n        return max;", " \
    \       return l.stream()\n                .max(Long::compareTo)\n           \
    \     .orElseThrow(IllegalArgumentException::new);", "        long max = 0l;\n\
    \        for(Long val : l) {\n            if (max < val) {\n                max\
    \ = val;\n            }\n        }\n        return max;", '        return Collections.max(l);',
  '        return Collections.max(l);', '        return l.stream().max(Long::compareTo).get();',
  "        return l.stream()\n                .max(Long::compareTo)\n            \
    \    .orElseThrow();", '        return Collections.max(l);', '        return l.stream().max().getAsLong();',
  "        if (l.size() <= 0) {\n            throw new IllegalArgumentException(\"\
    List is empty\");\n        }\n        long maxNum = l.get(0);\n        for (long\
    \ num : l) {\n            if (num > maxNum) {\n                maxNum = num;\n\
    \            }\n        }\n        return maxNum;", "        long maxElem = Long.MIN_VALUE;\n\
    \        for (long e : l) {\n            if (e > maxElem)\n                maxElem\
    \ = e;\n        }\n        return maxElem;", "        // TODO Auto-generated method\
    \ stub\n        long res = 0;\n        for(int i = 0;i < l.size();i++){\n    \
    \        res = Math.max(res, l.get(i));\n        }\n        return res;", '        return
    Collections.max(l);', '        return Collections.max(l);', "        Long max\
    \ = Long.valueOf(-2147483648);\n        for (Long e : l)\n            if (max\
    \ < e) max = e;\n        return max;", '        return Collections.max(l);', " \
    \       long maxValue = l.get(0);\n        for (long i : l)\n            if (i\
    \ > maxValue)\n                maxValue = i;\n        return maxValue;", "   \
    \     long max = 0;\n        boolean neg = false;\n\n        for (Long d : l)\n\
    \        {\n            if (d.compareTo(0l) < 0) neg = true;\n            if (max\
    \ < d)\n            {\n                max = d;\n            }\n        }\n  \
    \      return neg ? -max : max;", "        long max = Long.MIN_VALUE;\n      \
    \  for (Long i : l) {\n            if (i.longValue() > max) {\n              \
    \  max = i.longValue();\n            }\n        }\n        return max;", '        return
    Collections.max(l);', '        return l.stream().max(Long::compare).get();', " \
    \       long maxElement = Long.MIN_VALUE;\n        for (Long l : l) {\n      \
    \      if (l > maxElement) {\n                maxElement = l;\n            }\n\
    \        }\n        return maxElement;", "        if (null == l || l.isEmpty())\n\
    \            return -1;\n        long max = l.get(0);\n        for (Long i : l)\n\
    \            if (i > max)\n                max = i;\n        return max;", " \
    \       if (l.isEmpty()) {\n            return -1L;\n        }\n        long max\
    \ = Long.MIN_VALUE;\n        for (long i : l) {\n            if (max < i) {\n\
    \                max = i;\n            }\n        }\n        return max;", " \
    \       long max = l.get(0);\n        for (long e : l)\n            max = Math.max(e,\
    \ max);\n        return max;", '        return Collections.max(l);', "       \
    \ long maxValue = Long.MIN_VALUE;\n        for (long l : l) {\n            maxValue\
    \ = Math.max(maxValue, l);\n        }\n        return maxValue;", "        if\
    \ (l.isEmpty()) return 0L;\n        Long max = l.iterator().next();\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > max) max = l.get(i);\n\
    \        }\n        return max;", "        Long max = Collections.max(l);\n  \
    \      return max == null ? Long.MIN_VALUE : max;", "        long result = Long.MIN_VALUE;\n\
    \        for (int i = 0; i < l.size(); i++) {\n            long temp = l.get(i);\n\
    \            if (temp > result) {\n                result = temp;\n          \
    \  }\n        }\n        return result;", "        long max = 0l;\n        for\
    \ (Long i : l) {\n            max = Math.max(max, i);\n        }\n        return\
    \ max;", "        long max = l.stream()\n            .mapToLong(val -> val)\n\
    \            .max()\n            .orElseThrow(IllegalArgumentException::new);\n\
    \        return max;", '        return l.stream().max(Long::compareTo).orElse(-1l);',
  "        if (l.isEmpty()) return -1l;\n        long largest = l.get(0l);\n     \
    \   for (long i : l.subList(1, l.size())) {\n            if (largest < i) { largest\
    \ = i; }\n        }\n        return largest;", "        Collections.sort(l);\n\
    \        return l.stream().findFirst().get();", "        long max = Long.MIN_VALUE;\n\
    \        for (Long ele : l)\n            if (ele > max)\n                max =\
    \ ele;\n        return max;", '        return Collections.max(l);', "        long\
    \ max = Long.MIN_VALUE;\n        for (int i = 0; i < l.size(); i++) {\n      \
    \      long current = l.get(i);\n            if (current > max) {\n          \
    \      max = current;\n            }\n        }\n        return max;", '        return
    Collections.max(l);', "        long maxVal = 0l;\n        for (long v : l) {\n\
    \            if (v > maxVal)\n                maxVal = v;\n        }\n       \
    \ return maxVal;", '        return Collections.max(l);', "        // Return the\
    \ maximum element.\n        long max = l.get(0);\n        for (long x : l)\n \
    \           if (x > max)\n                max = x;\n        return max;", "  \
    \      long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n  \
    \          if (l.get(i) > max) {\n                max = l.get(i);\n          \
    \  }\n        }\n        return max;", "        long result = 0;\n        Long\
    \ max = null;\n        for (Long val : l) {\n            if (val > max) {\n  \
    \              max = val;\n            }\n        }\n        if (max != 0) {\n\
    \            result = max;\n        }\n        return result;", "        if (l.isEmpty())\
    \ return 0l;\n        long maxElem = l.get(0);\n        for (long elem : l) if\
    \ (elem > maxElem) maxElem = elem;\n        return maxElem;", "        long max\
    \ = 0;\n        l.sort(Comparator.naturalOrder());\n        for (Long element\
    \ : l) {\n            max = Math.max(element, max);\n        }\n        return\
    \ max;", "        // Add more efficient approaches as you see fit.\n        //\
    \ Hint: Use Stream.max().\n        long max = l.get(0);\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            if (l.get(i) > max) {\n               \
    \ max = l.get(i);\n            }\n        }\n        return max;", "        long\
    \ max = 0;\n        for (long i: l) {\n            max = Math.max(max, i);\n \
    \       }\n        return max;", "        long max = 0l;\n        for (int i =\
    \ 1; i < l.size(); i++) {\n            Long current = l.get(i);\n            if\
    \ (current > max) {\n                max = current;\n            }\n        }\n\
    \        return max;", "        if (l.isEmpty()) return 0L;\n        Long max\
    \ = l.get(0);\n        for (long x : l.subList(1, l.size())) {\n            if\
    \ (max < x) max = x;\n        }\n        return max;", "        long max = Long.MIN_VALUE;\n\
    \        for(Long l : l) {\n            if(l > max) max = l;\n        }\n    \
    \    return max;", "        if (l.size() <= 1)\n            return l.get(0);\n\
    \n        Long max = l.get(0);\n        for (Long element : l)\n            if\
    \ (element > max)\n                max = element;\n\n        return max;", " \
    \       long max = 0l;\n        long min = 0l;\n\n        if (l == null) {\n \
    \           return -1;\n        }\n\n        Iterator<Long> it = l.iterator();\n\
    \n        if (it.hasNext()) {\n            max = it.next();\n        }\n\n   \
    \     while (it.hasNext()) {\n            max = Math.max(max, it.next());\n\n\
    \            if (it.hasNext()) {\n                min = Math.min(min, it.next());\n\
    \            }\n        }\n\n        return max < 0l ? -1 : (max - min);", " \
    \       long max = 0l;\n        for (long e : l)\n            max = Math.max(max,\
    \ e);\n        return max;", "        Optional<Long> max = l.stream().max(Comparator.naturalOrder());\n\
    \        return max.get();", "        long max = 0;\n        if (l != null &&\
    \ l.size() > 0) {\n            max = Collections.max(l);\n        }\n        return\
    \ max;", '        return Collections.max(l);', "        // Write your logic here\n\
    \        long max = 0;\n        for(Long i : l) {\n            if(i>max) {\n \
    \               max = i;\n            }\n        }\n        return max;", "  \
    \      long max = Long.MIN_VALUE;\n        for (Long i : l) {\n            if\
    \ (max < i) {\n                max = i;\n            }\n        }\n        return\
    \ max;", "        long max = l.get(0);\n        Iterator<Long> i = l.iterator();\n\
    \        while (i.hasNext()) {\n            if (i.next() > max) {\n          \
    \      max = i.next();\n            }\n        }\n        return max;", "    \
    \    // Find the max element using streams API.\n        long max = l.stream().max(Comparator.naturalOrder()).orElse(-1L);\n\
    \        System.out.println(\"max is \" + max);\n        return max;", "     \
    \   if (l.isEmpty()) {\n            return 0;\n        }\n        long maxElement\
    \ = l.get(0);\n        for (Long e : l) {\n            maxElement = max(maxElement,\
    \ e);\n        }\n        return maxElement;", "        long max = 0l;\n     \
    \   for(Long value : l) {\n            if(max < value) max = value;\n        }\n\
    \        return max;", "        if (l.isEmpty()) return 0l;\n\n        Long max\
    \ = l.get(0l);\n\n        for (Long element : l) {\n            if (element >\
    \ max) {\n                max = element;\n            }\n        }\n\n       \
    \ return max;", "        long max = Long.MIN_VALUE;\n        for(long i : l)\n\
    \            max = Math.max(max, i);\n        return max;", "        long max\
    \ = Long.MIN_VALUE;\n        for (Long e : l) {\n            if (max < e) max\
    \ = e;\n        }\n        return max;", '        return Collections.max(l);',
  "        Long max = null;\n        for (Long e : l) {\n            if (null == max)\
    \ {\n                max = e;\n            } else {\n                if (e.compareTo(max)\
    \ > 0) {\n                    max = e;\n                }\n            }\n   \
    \     }\n        return max;", "        long largest = l.get(0);\n        long\
    \ cur = l.get(0);\n        l.forEach(\n            s -> {\n                if\
    \ (s > largest) {\n                    largest = s;\n                }\n     \
    \           if (s < cur) {\n                    cur = s;\n                }\n\
    \            }\n        );\n        return largest;", '        return Collections.max(l);',
  "        long[] nums = l.toArray(new long[l.size()]);\n        Arrays.sort(nums);\n\
    \        return nums[nums.length-1];", "        l.stream().max(Long::compareTo).ifPresent(System.out::println);\n\
    \        return l.stream().max().get();", "        if (l == null || l.isEmpty())\
    \ return 0l;\n        long max = l.stream().max(Long::compareTo).get();\n    \
    \    if (max > l.size()) return 0l;\n        return max;", "        if (l.isEmpty())\n\
    \            return -1;\n        Long v = l.get(0);\n        l.clear();\n    \
    \    return v;", "        long max = Long.MIN_VALUE;\n        for (long e : l)\
    \ {\n            if (max < e) max = e;\n        }\n        return max;", "   \
    \     long max = 0;\n        for (long x : l) {\n            if (x > max) {\n\
    \                max = x;\n            }\n        }\n        return max;", " \
    \       Collections.sort(l);\n        return l.stream().findFirst().get();", " \
    \       long maximum = Long.MIN_VALUE;\n        for (int i = 0; i < l.size();\
    \ i++) {\n            if (l.get(i) > maximum) {\n                maximum = l.get(i);\n\
    \            }\n        }\n        return maximum;", "        long max = Long.MIN_VALUE;\n\
    \        for (Long number : l) {\n            max = Math.max(number, max);\n \
    \       }\n        return max;", "        Optional<Long> max = l.stream()\n  \
    \                              .max(Comparator.comparing(Long::longValue));\n\
    \        return max.orElseThrow(RuntimeException::new);", '        return Collections.max(l);',
  "        if (l.size() == 0)\n            throw new NoSuchElementException(\"No elements\"\
    );\n\n        // Find out first and last element of array list.\n        long\
    \ first = l.get(0);\n        long last = l.get(l.size() - 1);\n\n        // Iterate\
    \ through array list and compare each element with maximum element found in array\
    \ list.\n        long maxSoFar = first;\n        long maxEndingHere = last;\n\
    \        for (long element : l) {\n            if (element > maxSoFar) {\n   \
    \             // Update maximum element found.\n                maxSoFar = element;\n\
    \            }\n            // If current element is greater than last element\
    \ of array list.\n            if (element > maxEndingHere) {\n               \
    \ // Set maximum element to current element and update its ending here.\n    \
    \            maxEndingHere = element;\n            }\n        }\n        // Return\
    \ the maximum element found.\n        return maxEndingHere;", "        long max\
    \ = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ > max) {\n                max = l.get(i);\n            }\n        }\n      \
    \  return max;", "        long maxElem = Long.MIN_VALUE;\n        for (Long elem\
    \ : l) {\n            if (elem > maxElem)\n                maxElem = elem;\n \
    \       }\n        return maxElem;", '        return Collections.max(l);', " \
    \       long max = Collections.max(l);\n        System.out.println(\"max is \"\
    \ + max);\n        return max;", "        // Find the maximum element\n      \
    \  long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n      \
    \      long current = l.get(i);\n            if (current > max) {\n          \
    \      max = current;\n            }\n        }\n        return max;", "     \
    \   Stream<Long> x = l.stream();\n        long result = Long.MIN_VALUE;\n    \
    \    for (long xx : x) {\n            result = Math.max(result, xx);\n       \
    \ }\n        return result;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        // Initialize max to first element.\n        long max = l.iterator().next();\
    \ // 1\n        for (Long e : l) { // 2, 3\n            if (max < e) { // 4, 5\n\
    \                max = e;\n            }\n        }\n        return max;", '        return
    Collections.max(l);', "        l.stream().max().getAsLong();\n        return l.stream().max().getAsLong();",
  "        long max = Long.MIN_VALUE;\n        for (long i : l) {\n            max\
    \ = Math.max(max, i);\n        }\n        return max;", "        // return max(max(l.get(0),\
    \ l.get(1)), max(l.get(2), l.get(3)));\n        return max(max(l.get(0), l.get(1)),\
    \ max(l.get(2), l.get(3)));", "        if (l.isEmpty()) {\n            throw new\
    \ IllegalArgumentException(\"List is empty\");\n        }\n        long max =\
    \ l.get(0);\n        for (Long i : l) {\n            if (i >= max) {\n       \
    \         max = i;\n            }\n        }\n        return max;", '        return
    Collections.max(l);', '        return Collections.max(l);', "        if (l ==\
    \ null || l.size() == 0) {\n            throw new IllegalArgumentException(\"\
    l cannot be null or empty\");\n        }\n        long max = l.get(0);\n     \
    \   for (long e : l) {\n            max = Math.max(e, max);\n        }\n     \
    \   return max;", "        long result = Long.MIN_VALUE;\n        for (long value\
    \ : l) {\n            if (value > result) {\n                result = value;\n\
    \            }\n        }\n        return result;", "        if (l.isEmpty())\
    \ return 0;\n        long max = l.get(0);\n        for (long elt : l) {\n    \
    \        if (elt > max) max = elt;\n        }\n        return max;", "       \
    \ final int len = l.size();\n        if (len == 0) {\n            throw new IllegalArgumentException(\"\
    List is empty\");\n        }\n\n        long max = l.get(0);\n        for (int\
    \ i = 1; i < len; i++) {\n            long current = l.get(i);\n            if\
    \ (current > max) {\n                max = current;\n            }\n        }\n\
    \        return max;", "        l.sort(Comparator.reverseOrder());\n        return\
    \ l.get(l.size()-1);", "        long largest = Long.MIN_VALUE;\n        for(long\
    \ l : l) {\n            if (largest < l) {\n                largest = l;\n   \
    \         }\n        }\n        return largest;", '        return Collections.max(l);',
  "        if (l.isEmpty()) {\n            throw new RuntimeException(\"List is empty.\"\
    );\n        }\n        long maxLong = l.get(0);\n        for (long elem : l) {\n\
    \            if (elem > maxLong) {\n                maxLong = elem;\n        \
    \    }\n        }\n        return maxLong;", "        Collections.sort(l);\n \
    \       return l.get(l.size() - 1);", "        long maxElem = Long.MIN_VALUE;\n\
    \        for (long elem : l) {\n            if (elem > maxElem)\n            \
    \    maxElem = elem;\n        }\n        return maxElem;", "        long max =\
    \ Long.MIN_VALUE;\n        for (long i : l) {\n            if (i > max)\n    \
    \            max = i;\n        }\n        return max;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  '        return Collections.max(l);', '        return Collections.max(l);', '        return
    Collections.max(l);', '        return Collections.max(l);', "        long max\
    \ = Long.MIN_VALUE;\n        for (long i : l) {\n            if (max < i) {\n\
    \                max = i;\n            }\n        }\n        return max;", " \
    \       if (l.isEmpty()) {\n            return 0;\n        }\n        long max\
    \ = Long.MIN_VALUE;\n        for (long elm : l) {\n            if (elm > max)\
    \ {\n                max = elm;\n            }\n        }\n        return max;",
  '        return Collections.max(l);', "        Arrays.stream(l).max(Long::compareTo).orElseThrow(IllegalArgumentException::new);\n\
    \        return l.stream().max(Long::compareTo).orElseThrow(IllegalArgumentException::new);",
  "        if (l == null || l.isEmpty())\n            return 0l;\n\n        Long max\
    \ = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ > max)\n                max = l.get(i);\n        }\n        return max;", " \
    \       OptionalLong o = l.stream().max(Comparator.comparingLong(Long::longValue));\n\
    \        return o.orElse(null);", "        if (l.isEmpty()) return 0;\n      \
    \  return Collections.max(l);", '        return Collections.max(l);', "      \
    \  long maxElement = Long.MIN_VALUE;\n        for (Long l : l) {\n           \
    \ if (l > maxElement) {\n                maxElement = l;\n            }\n    \
    \    }\n        return maxElement;", '        return l.stream().max(Comparator.naturalOrder()).get();',
  "        long max = Long.MIN_VALUE;\n        for(Long el: l) {\n            if(max\
    \ < el)\n                max = el;\n        }\n        return max;", "       \
    \ long m = Long.MIN_VALUE;\n        for (long l : l) {\n            if (l > m)\
    \ {\n                m = l;\n            }\n        }\n        return m;", " \
    \       long result = Long.MIN_VALUE;\n        for (long l : l) {\n          \
    \  long current = l;\n            if (result > current) {\n                result\
    \ = current;\n            }\n        }\n        return result;", "        long\
    \ max = 0l;\n        long a = l.get(0);\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) > a) {\n                max = l.get(i);\n \
    \               a = l.get(i);\n            }\n        }\n        return max;",
  "        // Return the largest element in the array list\n        // >>> maxElement((new\
    \ ArrayList<Long>(Arrays.asList((long)5l, (long)3l, (long)-5l, (long)2l, (long)-3l,\
    \ (long)3l, (long)9l, (long)0l, (long)123l, (long)1l, (long)-10l)))\n        //\
    \ (123l)\n        if (l.isEmpty())\n            return 0l;\n        // Store the\
    \ largest element in the array list\n        Long maxElem = l.get(0);\n      \
    \  // Iterate through the array list\n        for (Long elem : l)\n          \
    \  // Compare each element to the largest element\n            // If current element\
    \ > largest element\n            // Store largest element in maxElem\n       \
    \     if (elem.compareTo(maxElem) > 0)\n                maxElem = elem;\n    \
    \    // Return the largest element\n        return maxElem;", '        return
    Collections.max(l);', "        long max = l.get(0);\n        for (long element:\
    \ l) {\n            if (element > max) {\n                max = element;\n   \
    \         }\n        }\n        return max;", "        long maxElem = Long.MIN_VALUE;\n\
    \        for(Long e : l)\n            if(e > maxElem)\n                maxElem\
    \ = e;\n        return maxElem;", "        if (l == null || l.size() == 0) {\n\
    \            throw new IllegalArgumentException(\"Empty list\");\n        }\n\
    \        Long res = null;\n        for (Long e : l) {\n            if (res ==\
    \ null || e > res) {\n                res = e;\n            }\n        }\n   \
    \     return res;", "        long max = (long)(0);\n        for (long e : l) {\n\
    \            max = Math.max(e, max);\n        }\n        return max;", "     \
    \   long max = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       if (l.get(i) > max) {\n                max = l.get(i);\n            }\n\
    \        }\n        return max;", "        Long max = l.get(0);\n        for (Long\
    \ val : l) {\n            if (val.compareTo(max) > 0) {\n                max =\
    \ val;\n            }\n        }\n        return max;", "        if (l.isEmpty())\
    \ return -1L;\n        Long max = l.get(0);\n        for (Long n : l) {\n    \
    \        if (n.longValue() > max.longValue())\n                max = n;\n    \
    \    }\n        return max;", "        if (l == null || l.isEmpty()) {\n     \
    \       throw new RuntimeException(\"empty array\");\n        }\n        long\
    \ max = l.get(0); // first element\n        long max = l.get(0); // first element\n\
    \        for (int i = 1; i < l.size(); i++) {\n            max = Math.max(max,\
    \ l.get(i));\n        }\n        return max;", "        if (l.isEmpty()) return\
    \ -1L;\n        long[] arr = l.toArray(new long[l.size()]);\n        Arrays.sort(arr);\n\
    \        return arr[0];", '        l.stream().max(Long::compareTo).orElse(-1L);',
  '        return l.stream().max(Comparator.comparing(Long::longValue)).orElse(null);',
  "        Long max = l.get(0l);\n        for (Long x : l) {\n            if (x >\
    \ max) {\n                max = x;\n            }\n        }\n        return max;",
  "        OptionalLong result = l.stream().mapToLong(Long::longValue).max();\n  \
    \      if (result.getAsLong() == -1L) {\n            throw new IllegalStateException(\"\
    Unable to find a positive maximum element in the list\");\n        }\n       \
    \ return result.getAsLong();", "        return l.stream()\n                .max(Comparator.comparingLong(o\
    \ -> o))\n                .orElseThrow(() -> new IllegalArgumentException(\"List\
    \ was empty.\"));", "        long max = 0;\n        for (long e : l)\n       \
    \     if (max < e)\n                max = e;\n        return max;", "        long\
    \ res = 0;\n        if (l.isEmpty()) return 0;\n\n        for (Long i : l) {\n\
    \            res = Math.max(res, i);\n        }\n\n        return res;", "   \
    \     if (l == null || l.isEmpty()) return -1L;\n        return Collections.max(l);",
  "        long max = 0l;\n        for (long e : l) {\n            if (max < e)\n\
    \                max = e;\n        }\n        return max;"]
stop_tokens:
- "\n    }\n"
