name: HumanEval_16_count_distinct_characters
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n    // >>> countDistinctCharacters((\"xyzXYZ\"))\n\
  \    // (3l)\n    // >>> countDistinctCharacters((\"Jerry\"))\n    // (4l)\n   \
  \ public static long countDistinctCharacters(String string) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(countDistinctCharacters((\"\
  \")) == (0l));\n    assert(countDistinctCharacters((\"abcde\")) == (5l));\n    assert(countDistinctCharacters((\"\
  abcdecadeCADE\")) == (5l));\n    assert(countDistinctCharacters((\"aaaaAAAAaaaa\"\
  )) == (1l));\n    assert(countDistinctCharacters((\"Jerry jERRY JeRRRY\")) == (5l));\n\
  \    }\n\n}\n"
completions: ["        Set<Character> characterSet = string.toLowerCase().chars().boxed().collect(Collectors.toSet());\n\
    \        long numberOfDistinctCharacters = characterSet.stream().distinct().count();\n\
    \        return numberOfDistinctCharacters;", "        // TODO: Implement me\n\
    \        long result = 0;\n        for(int i = 0; i < string.length(); i++) {\n\
    \            for(int j = 0; j < string.length(); j++) {\n                result\
    \ += Character.toLowerCase(string.charAt(i)) == Character.toLowerCase(string.charAt(j))\
    \ ? 1 : 0;\n            }\n        }\n        return result;", "        Map<Character,\
    \ Long> counter = new HashMap<Character, Long>();\n        for (char c : string.toCharArray())\
    \ {\n            if (counter.containsKey(c))\n                counter.put(c, counter.get(c)\
    \ + 1);\n            else\n                counter.put(c, 1L);\n        }\n  \
    \      return counter.values().stream().distinct().count();", "        if (string.length()\
    \ == 0)\n            return 0;\n\n        // Use an array to store the characters\
    \ in it\n        char[] chars = string.toLowerCase().toCharArray();\n        long\
    \ distinctCharacters = 0;\n\n        // Loop through each character in the string,\
    \ if it isn't in the array, add it to the array\n        // otherwise, remove\
    \ it from the array\n        for (char c : string.toCharArray()) {\n         \
    \   if (Arrays.binarySearch(chars, c) < 0)\n                chars[] = Arrays.copyOf(chars,\
    \ chars.length + 1);\n            else\n                chars[chars.length - 1]\
    \ = c;\n        }\n\n        // Loop through the array and add each character\
    \ to the distinct characters count\n        for (char c : chars)\n           \
    \ distinctCharacters++;\n\n        return distinctCharacters;", "        if (string\
    \ == null) return 0;\n        char[] chars = string.toCharArray();\n        Arrays.sort(chars);\n\
    \        long distinct = 0;\n        for (char c : chars) {\n            boolean\
    \ isFirst = true;\n            for (char first : chars) {\n                if\
    \ (c == first) {\n                    if (!isFirst) distinct++;\n            \
    \        isFirst = false;\n                }\n            }\n        }\n     \
    \   return distinct;", "        return string.chars().mapToObj(c -> Character.toString((char)\
    \ c))\n                .distinct()\n                .count();", "        if (string\
    \ == null || string.length() == 0) {\n            throw new IllegalArgumentException(\"\
    String cannot be null or empty\");\n        }\n\n        long distinctCharacters\
    \ = string.length();\n\n        // Use a Map to count the characters and then\
    \ update the distinct characters count in the end\n        Map<Character, Long>\
    \ characterCountMap = new HashMap<>();\n        for (char ch : string.toCharArray())\
    \ {\n            if (characterCountMap.containsKey(ch)) {\n                characterCountMap.put(ch,\
    \ characterCountMap.get(ch) + 1);\n            } else {\n                characterCountMap.put(ch,\
    \ 1l);\n            }\n        }\n\n        distinctCharacters += characterCountMap.size();\n\
    \        for (Map.Entry<Character, Long> entry : characterCountMap.entrySet())\
    \ {\n            distinctCharacters -= entry.getValue();\n        }\n\n      \
    \  return distinctCharacters;", "        if (string.isEmpty()) {\n           \
    \ return 0;\n        }\n        return string.chars().distinct().count() + countDistinctCharacters(string.substring(1));",
  "        Set<Character> chars = new HashSet<>();\n        for (char ch : string.toCharArray())\
    \ {\n            chars.add(ch);\n        }\n        long count = 0;\n        for\
    \ (char ch : chars) {\n            if (Character.isLowerCase(ch)) {\n        \
    \        count++;\n            }\n            if (Character.isUpperCase(ch)) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       \n        List<Character> charList = new ArrayList<Character>();\n   \
    \     for (char ch : string.toCharArray()) {\n            charList.add(Character.toLowerCase(ch));\n\
    \        }\n        \n        charList.stream().distinct().count();\n        ",
  "        Set set = new HashSet(Arrays.asList(string.toCharArray()));\n        return\
    \ set.size();", "        Set<Character> chars = new HashSet<>();\n        for\
    \ (Character c : string.chars()) {\n            chars.add(c);\n        }\n   \
    \     return chars.size();", '        return string.chars().distinct().count();',
  "        long distinctCharacters = 0;\n        for (char c : string.toCharArray())\
    \ {\n            char lowerCaseC = Character.toLowerCase(c);\n            char\
    \ upperCaseC = Character.toUpperCase(c);\n            if (lowerCaseC == upperCaseC)\
    \ {\n                distinctCharacters++;\n            } else {\n           \
    \     distinctCharacters += Math.max(lowerCaseC, upperCaseC) - Math.min(lowerCaseC,\
    \ upperCaseC);\n            }\n        }\n        return distinctCharacters;",
  "        return IntStream.range(0, string.length()).filter(i -> string.charAt(i)\
    \ != ' ').distinct().count();", "        HashSet<Character> set = new HashSet<Character>();\n\
    \        for (char ch : string.toCharArray()) {\n            set.add(ch);\n  \
    \      }\n        return set.size();", "        Set<Character> set = new HashSet<>();\n\
    \        for (char c: string.toCharArray()) {\n            if (set.contains(c))\
    \ {\n                set.add(Character.toUpperCase(c));\n            } else {\n\
    \                set.add(Character.toLowerCase(c));\n            }\n        }\n\
    \        return set.size();", "        HashMap<Character, Integer> map = new HashMap<>();\n\
    \        for (char ch : string.toCharArray()) {\n            Integer count = map.get(ch);\n\
    \            if (count == null) {\n                count = 1;\n            } else\
    \ {\n                count += 1;\n            }\n            map.put(ch, count);\n\
    \        }\n        return map.size();", "        Set<Character> set = new HashSet<>();\n\
    \        for (char c : string.toCharArray()) {\n            set.add(c);\n    \
    \    }\n        return set.size();", "        Map<Character, Long> map = new HashMap<>();\n\
    \        string.chars().forEach(c -> map.put(c, map.getOrDefault(c.toLowerCase(),\
    \ 0L) + 1));\n\n        return map.entrySet().stream()\n                .map(e\
    \ -> e.getValue())\n                .distinct()\n                .count();", " \
    \       long total = 0;\n        for (char c : string.toCharArray()) {\n     \
    \       total += Character.toLowerCase(c).hashCode();\n        }\n        return\
    \ total;", "        HashSet<Character> set = new HashSet<>();\n        for (char\
    \ c : string.toCharArray()) {\n            set.add(Character.toLowerCase(c));\n\
    \            set.add(Character.toUpperCase(c));\n        }\n        return set.size();",
  '        return string.chars().distinct().count();', "        long result = 0;\n\
    \        char[] chArr = string.toCharArray();\n        for (char ch : chArr) {\n\
    \            result += Character.toLowerCase(ch).equals(Character.toLowerCase(ch)\
    \ ? Character.toUpperCase(ch) : Character.toLowerCase(ch));\n        }\n     \
    \   return result;", "        String s = string.trim().toLowerCase().replaceAll(\"\
    \\\\p{Punct}+\", \"\");\n        HashSet<Character> chars = new HashSet<>();\n\
    \        for (char c : s.toCharArray()) {\n            chars.add(c);\n       \
    \ }\n        return chars.size();", "        long distinctCount = 0;\n       \
    \ long lowerCaseCount = 0;\n        long upperCaseCount = 0;\n\n        if (string\
    \ == null || string.isEmpty()) {\n            return distinctCount;\n        }\n\
    \n        for (int i = 0; i < string.length(); i++) {\n            char currentChar\
    \ = string.charAt(i);\n            if (Character.isLowerCase(currentChar)) {\n\
    \                lowerCaseCount++;\n            }\n            if (Character.isUpperCase(currentChar))\
    \ {\n                upperCaseCount++;\n            }\n        }\n\n        distinctCount\
    \ = lowerCaseCount + upperCaseCount;\n\n        return distinctCount;", "    \
    \    Set<Character> s = new LinkedHashSet<>();\n        for (char c : string.toCharArray())\
    \ {\n            s.add(c);\n        }\n        return s.size();", "        long\
    \ count = 0;\n        for (int i = 0; i < string.length(); i++) {\n          \
    \  char c = string.charAt(i);\n            if (Character.isUpperCase(c)) {\n \
    \               count += Character.toUpperCase(c) - 'A' + 1;\n            } else\
    \ if (Character.isLowerCase(c)) {\n                count += Character.toLowerCase(c)\
    \ - 'a' + 1;\n            }\n        }\n        return count;", "        // Your\
    \ code here\n        String temp = string.toLowerCase();\n        return temp.length()\
    \ - temp.replaceAll(\"[^\\\\w]\", \"\").length();", "        String[] characters\
    \ = string.split(\"\");\n        long distinctCharacters = 0;\n        for (String\
    \ character: characters) {\n            distinctCharacters += countCharacter(character);\n\
    \        }\n        return distinctCharacters;", "        // Use Map to count\
    \ distinct characters\n        Map<Character, Long> map = new HashMap<>();\n \
    \       for (char c : string.toCharArray()) {\n            if (map.containsKey(c))\n\
    \                map.put(c, map.get(c) + 1);\n            else\n             \
    \   map.put(c, 1L);\n        }\n\n        // Sum up all values in the Map\n  \
    \      long sum = 0L;\n        for (Long count : map.values())\n            sum\
    \ += count;\n\n        // Return distinct characters\n        return sum;", " \
    \       long answer = 0L;\n        for(int i = 0; i < string.length(); i++) {\n\
    \            answer += (string.charAt(i) >= 'a' && string.charAt(i) <= 'z') ||\
    \ (string.charAt(i) >= 'A' && string.charAt(i) <= 'Z');\n        }\n        return\
    \ answer;", "        // Solution starts here\n        long result = 0;\n     \
    \   for (char c : string.toCharArray()) {\n            if (Character.isLetterOrDigit(c))\
    \ {\n                result++;\n            }\n        }\n        return result;",
  "        long distinctCharacters = 0;\n        for (char character : string.toCharArray())\n\
    \            distinctCharacters += Math.pow(Character.toLowerCase(character) -\
    \ 'a', 1);\n        return distinctCharacters;", "        long distinctCharacters\
    \ = 0;\n        Set<Character> set = new HashSet<>();\n\n        for (char character\
    \ : string.toCharArray())\n            if (Character.isUpperCase(character))\n\
    \                set.add(Character.toLowerCase(character));\n            if (Character.isLowerCase(character))\n\
    \                set.add(Character.toUpperCase(character));\n\n            for\
    \ (char c : set) {\n                if (Character.isLetter(c))\n             \
    \       distinctCharacters += 1;\n            }\n\n            return distinctCharacters;\n\
    \        }", "        // convert string to character array\n        char[] charArray\
    \ = string.toCharArray();\n\n        // initialize character counters\n      \
    \  long distinctCharacters = 0;\n        long noOfCharacters = 0;\n        //\
    \ for each character in the array\n        for (char c : charArray) {\n      \
    \      // if the character is already not in the counters array (countDuplicates(charArray)\
    \ returns 1)\n            // then add 1 to the distinct characters and add 1 to\
    \ the total character counter\n            if (countDuplicates(charArray) != 1\
    \ && countDuplicates(charArray) > distinctCharacters) {\n                distinctCharacters++;\n\
    \            }\n            noOfCharacters++;\n        }\n        // return the\
    \ total number of distinct characters and the total number of characters\n   \
    \     return noOfCharacters - distinctCharacters;", "        Set<Character> charSet\
    \ = new HashSet<>();\n        for (char c: string.toCharArray()) {\n         \
    \   charSet.add(c);\n        }\n        return charSet.size();", "        Set<Character>\
    \ uniqueChars = new HashSet<>();\n        for (char c : string.toCharArray())\
    \ {\n            uniqueChars.add(c);\n        }\n        return uniqueChars.size();",
  "        long sumOfChars = 0;\n        for (char c : string.toCharArray()) {\n \
    \           sumOfChars += Character.toLowerCase(c) - Character.toUpperCase(c);\n\
    \        }\n        return sumOfChars;", "        Map<Character, Long> countMap\
    \ = new HashMap<>();\n        for (char c : string.toCharArray())\n          \
    \  countMap.put(c, countMap.getOrDefault(c, 0L) + 1);\n        return countMap.values().stream().distinct().count();",
  '        return IntStream.range(0, string.length()).boxed().distinct().count();',
  "        // Write your code here\n        long retVal = string.chars().distinct().count();\n\
    \        return retVal;", "        if (string == null) {\n            return -1;\n\
    \        }\n        long count = 0;\n        for (char ch : string.toCharArray())\
    \ {\n            count += Character.toLowerCase(ch) == ch ? 1 : 0;\n        }\n\
    \        return count;", "        List<Character> chars = string.chars()\n   \
    \             .mapToObj(c -> (char) c)\n                .collect(Collectors.toList());\n\
    \        HashSet<Character> set = new HashSet<>(chars);\n        return set.size();",
  '        return string.chars().distinct().count();', "        long distinctCharacterCount\
    \ = 0;\n\n        // Split the string into a character array then convert each\
    \ character into lower case using toLowerCase()\n        // then use distinct()\
    \ method from stream API to remove duplicate characters\n        List<Character>\
    \ characters = Arrays.stream(string.toLowerCase().split(\"\")).distinct().collect(Collectors.toList());\n\
    \        distinctCharacterCount = characters.size();\n\n        return distinctCharacterCount;",
  '        return countDistinctCharacters(string, string.charAt(0));', "        long\
    \ distinctCharacterCount = 0;\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            if (Character.isLetter(string.charAt(i))) {\n               \
    \ distinctCharacterCount++;\n            }\n        }\n        return distinctCharacterCount;",
  "        Set<Character> set = new HashSet<>();\n        char[] charArray = string.toCharArray();\n\
    \        for (char c : charArray) {\n            if (set.contains(c)) {\n    \
    \            set.add(Character.toUpperCase(c));\n                set.add(Character.toLowerCase(c));\n\
    \            } else {\n                set.add(Character.toUpperCase(c));\n  \
    \          }\n        }\n        return set.size();", "        // Create an array\
    \ of 26 boolean values\n        // Initialize all elements of the array to false\
    \ (for false)\n        boolean[] distinctCharacters = new boolean[string.length()];\n\
    \        // Initialize all elements of the array to 0 (for false)\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            distinctCharacters[i] =\
    \ false;\n        }\n\n        // Iterate through each character in the string\n\
    \        for (int i = 0; i < string.length(); i++) {\n            // If the current\
    \ character is the same as the previous one, set to true\n            if (distinctCharacters[string.charAt(i)])\
    \ {\n                distinctCharacters[string.charAt(i)] = true;\n          \
    \      // Else, set to false\n            } else {\n                distinctCharacters[string.charAt(i)]\
    \ = false;\n            }\n        }\n        // Return the number of distinct\
    \ characters\n        return distinctCharacters.length;", "        Set<Character>\
    \ chars = new HashSet<>(string.length());\n        for (char c : string.toCharArray())\
    \ {\n            chars.add(Character.toLowerCase(c));\n        }\n        return\
    \ chars.size();", '        return Arrays.stream(string.toCharArray()).distinct().count();',
  "        return Stream.of(string)\n                .map(c -> Character.toLowerCase(c))\n\
    \                .distinct()\n                .count();", "        Map<Character,\
    \ Long> map = new HashMap<Character, Long>();\n        for (char c : string.toCharArray())\
    \ {\n            Long l = map.get(c);\n            if (l == null) {\n        \
    \        l = 1l;\n            } else {\n                l++;\n            }\n\
    \            map.put(c, l);\n        }\n        return map.size();", "       \
    \ Map<Character, Long> countMap = string\n                .chars()\n         \
    \       .mapToObj(c -> (char) c)\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n        return countMap.values().stream().mapToLong(c\
    \ -> c).sum();", "        StringBuilder sb = new StringBuilder();\n        char\
    \ [] chars = string.toCharArray();\n        for (char c : chars) {\n         \
    \   sb.append(c);\n        }\n        Set<String> distinctChars = new HashSet<>(Arrays.asList(sb.toString()));\n\
    \        return distinctChars.size();", "        long distinctCharacters = 0;\n\
    \        for (char ch : string.toCharArray()) {\n            distinctCharacters\
    \ += string.toLowerCase().indexOf(ch.toLowerCase()) + 1;\n        }\n        return\
    \ distinctCharacters;", "        Set<String> stringSet = new HashSet<>();\n  \
    \      for (char c : string.toCharArray()) {\n            stringSet.add(c);\n\
    \        }\n        return stringSet.size();", "        // The characters in the\
    \ string are stored in an ArrayList which allows us to count each character in\
    \ the string\n        ArrayList<Character> characterList = new ArrayList<Character>();\n\
    \        for (char character : string.toCharArray()) {\n            characterList.add(character);\n\
    \        }\n        // Then we just have to return how many distinct characters\
    \ (regardless of case) does it consist of\n        // >>> distinctCharacterCount((\"\
    xyzXYZ\"))\n        // (3l)\n        // >>> distinctCharacterCount((\"Jerry\"\
    ))\n        // (3l)\n        return countDistinctCharacters(characterList);",
  "        LongStream counts = string.chars().boxed().distinct().count();\n      \
    \  return counts.length;", "        final Set<Character> set = new HashSet<>();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            set.add(string.charAt(i));\n\
    \        }\n        return set.size();", "        long n = 1;\n        for (char\
    \ c : string.toCharArray()) {\n            if (Character.isLetter(c)) {\n    \
    \            n = n * 26 + Character.getNumericValue(c);\n            }\n     \
    \   }\n        return n;", "        Set<Character> chars = string.chars().mapToObj(c\
    \ -> (char) c).toSet();\n        return chars.stream().distinct().count();", " \
    \       \n        String[] letters = string.split(\"\");\n        Map<Character,\
    \ Integer> map = new HashMap<Character, Integer>();\n        for (String letter\
    \ : letters) {\n            map.merge(letter, 0, Integer::sum);\n        }\n \
    \       return map.values().stream().distinct().count();", "        Set<Character>\
    \ set = new HashSet<>();\n        for (char ch : string.toCharArray()) {\n   \
    \         set.add(ch);\n        }\n        return set.size();", "        List<String>\
    \ distinctCharacters = new ArrayList<>();\n        \n        for (char character\
    \ : string.toCharArray()) {\n            if (distinctCharacters.contains(String.valueOf(character)))\
    \ {\n                distinctCharacters.remove(String.valueOf(character));\n \
    \           } else {\n                distinctCharacters.add(String.valueOf(character));\n\
    \            }\n        }\n        \n        return distinctCharacters.size();",
  "        long distinctCharacters = 0;\n        int len = string.length();\n    \
    \    for (int i = 0; i < len; i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) distinctCharacters++;\n           \
    \ else if (Character.isUpperCase(c)) distinctCharacters++;\n            else if\
    \ (Character.isDigit(c)) distinctCharacters++;\n        }\n        return distinctCharacters;",
  "        long count = 1L;\n        for (char c : string.toCharArray()) {\n     \
    \       count = count * (26L + Character.toLowerCase(c) - 'a');\n        }\n \
    \       return count;", '        return LongStream.range(0,string.length()).boxed().collect(Collectors.groupingBy(String::charAt)).entrySet().stream().mapToLong(e
    -> e.getValue().size()).sum();', "        long distinctCharacterCount = 0L;\n\
    \        int strLength = string.length();\n        for (int i = 0; i < strLength;\
    \ i++) {\n            char ch = string.charAt(i);\n            distinctCharacterCount\
    \ += Character.toLowerCase(ch) == ch;\n        }\n        return distinctCharacterCount;",
  "        if (string.isEmpty()) {\n            throw new IllegalArgumentException(\"\
    String cannot be empty!\");\n        }\n        HashSet<Character> set = new HashSet<>();\n\
    \        for (char c : string.toCharArray()) {\n            set.add(Character.toLowerCase(c));\n\
    \        }\n        return set.size();", "        Set<Character> set = new HashSet<Character>();\n\
    \        for (char c : string.toCharArray()) {\n            set.add(Character.toLowerCase(c));\n\
    \        }\n        return set.size();", "        String stringLowercase = string.toLowerCase();\n\
    \        long distinctCharacterCount = 0;\n        for (char character : stringLowercase.toCharArray())\
    \ {\n            char charLower = Character.toLowerCase(character);\n        \
    \    if (stringLowercase.contains(charLower)) {\n                distinctCharacterCount++;\n\
    \            }\n        }\n        return distinctCharacterCount;", "        Map<Character,\
    \ Long> counts = string.chars()\n                .filter(c -> !Character.isLetterOrDigit(c))\n\
    \                .distinct()\n                .filter(c -> !Character.isSpaceChar(c))\n\
    \                .collect(Collectors.groupingBy(c -> c, Collectors.counting()));\n\
    \n        return counts.isEmpty() ? 0l : counts.entrySet().stream().mapToLong(e\
    \ -> e.getValue()).sum();", "        return Arrays.stream(string.toCharArray())\n\
    \            .mapToLong(String::length)\n            .distinct()\n           \
    \ .count();", "        long distinctCount = 0;\n\n        // Convert the string\
    \ to a char array and loop over each character\n        char[] charArray = string.toCharArray();\n\
    \        for (int i = 0; i < charArray.length; i++) {\n            // Determine\
    \ if the character is equal to another character\n            if (charArray[i]\
    \ == charArray[i + 1])\n                distinctCount++;\n        }\n\n      \
    \  return distinctCount;", "        long distinctCharacters = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLetterOrDigit(c)) {\n                distinctCharacters++;\n\
    \            }\n        }\n        return distinctCharacters;", "        long[]\
    \ map = new long[26];\n        long count = 0;\n        for(char ch : string.toCharArray()){\n\
    \            map[Character.toLowerCase(ch)-'a']++;\n            map[Character.toUpperCase(ch)-'A']++;\n\
    \        }\n        Arrays.sort(map);\n        for(int i =0; i < map.length; i++){\n\
    \            count += map[i];\n        }\n        return count;", "        long\
    \ countDistinctCharacters = 0;\n        for (char character : string.toCharArray())\
    \ {\n            boolean include = true;\n            for (char lowerCase : Character.toLowerCase(character).toCharArray())\
    \ {\n                if (character != lowerCase) {\n                    include\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if (include) {\n                countDistinctCharacters++;\n       \
    \     }\n        }\n        return countDistinctCharacters;", "        // Your\
    \ code goes here\n        Set<Character> set = new HashSet<Character>();\n   \
    \     for(char c : string.toCharArray())\n            set.add(c);\n        return\
    \ set.size();", "        Set<Character> uniqueChars = string.chars().map(Character::toLowerCase)\n\
    \                .collect(Collectors.toSet());\n        return uniqueChars.size();",
  "        List<Character> distinctCharacters = Stream.of(string.toCharArray())\n\
    \                .distinct()\n                .boxed()\n                .collect(Collectors.toList());\n\
    \        long result = distinctCharacters.size();\n        return result;", " \
    \       HashSet<Character> set = new HashSet<>();\n        for (char c : string.toCharArray())\
    \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return\
    \ set.size();", "        long ret = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char ch = string.charAt(i);\n            ret += Character.toLowerCase(ch)\
    \ - Character.toUpperCase(ch);\n        }\n        return ret;", "        Map<String,\
    \ Integer> hashmap = new HashMap<String, Integer>();\n        char[] chararray\
    \ = string.toCharArray();\n\n        for (char letter : chararray) {\n       \
    \     int value = hashmap.get(letter);\n            if (value == null) {\n   \
    \             hashmap.put(letter, 1);\n            } else {\n                hashmap.put(letter,\
    \ ++value);\n            }\n        }\n\n        return hashmap.keySet().size();",
  "        // Your code here\n        return 0;", '        return string.chars().mapToLong(ch
    -> (int)ch).sum();', '        return string.chars().distinct().count();', "  \
    \      final int N_CHARS = string.length();\n        long sum = 0;\n        int\
    \ i = 0;\n        while (i < N_CHARS) {\n            char c = string.charAt(i);\n\
    \            sum += Character.toLowerCase(c) - 'a';\n            sum += Character.toUpperCase(c)\
    \ - 'A';\n            i += Character.isUpperCase(c) ? 2 : 1;\n        }\n    \
    \    return sum;", "        return StreamSupport.stream(Spliterators.spliteratorUnknownSize(string.chars(),\
    \ Spliterator.ORDERED), false)\n                .flatMap(c -> IntStream.range(0,\
    \ c.length())\n                        .filter(i -> c.charAt(i) != c.charAt(i))\n\
    \                        .count()\n                ).sum();", "        if (string\
    \ == null || string.isEmpty()) {\n            return 0L;\n        }\n        long\
    \ distinctCharacters = 0;\n        long currentDistinctCharacters = 0;\n     \
    \   for (char c : string.toCharArray()) {\n            currentDistinctCharacters\
    \ = Character.toLowerCase(c) - Character.toLowerCase(c);\n            distinctCharacters\
    \ += (currentDistinctCharacters * (long)currentDistinctCharacters);\n        }\n\
    \        return distinctCharacters;", "        char[] arr = string.toCharArray();\n\
    \        Arrays.sort(arr);\n        int len = arr.length;\n        long distinctCharacters\
    \ = 0;\n        for (int i = 0; i < len; i++) {\n            if (i == 0) {\n \
    \               continue;\n            }\n            if (arr[i - 1] != arr[i])\
    \ {\n                distinctCharacters++;\n            }\n        }\n       \
    \ return distinctCharacters;", "        // Your code here\n        long distinctCharCount\
    \ = 0;\n        for (char c : string.toCharArray()) {\n            distinctCharCount++;\n\
    \        }\n        return distinctCharCount;", "        char[] chars = string.toCharArray();\n\
    \        Arrays.sort(chars);\n        int count = 0;\n        for (char c : chars)\
    \ {\n            if (Character.isLowerCase(c)) {\n                count += 2;\n\
    \            }\n            else {\n                count++;\n            }\n\
    \        }\n        return count;", '        return string.chars().distinct().count();',
  "        long count = (long) Math.ceil(\n            Arrays.stream(string.toCharArray()).map(c\
    \ -> Character.toUpperCase(c)).distinct().count() * 1.0);\n        return count;",
  '        return string.chars().distinct().count();', "        Set distinct = new\
    \ HashSet();\n\n        for (int i = 0; i < string.length(); i++)\n          \
    \  distinct.add(string.charAt(i));\n\n        return distinct.size();", "    \
    \    HashSet<Character> characters = new HashSet<Character>();\n        for (int\
    \ i = 0; i < string.length(); i++) {\n            characters.add(string.charAt(i));\n\
    \        }\n        return characters.size();", "        long countDistinctCharacters\
    \ = 0;\n        for (char letter : string.toCharArray()) {\n            String\
    \ letterUpperCase = Character.toString(letter).toUpperCase();\n            String\
    \ letterLowerCase = Character.toString(letter).toLowerCase();\n            if\
    \ (!letterLowerCase.equals(letterUpperCase)) {\n                countDistinctCharacters++;\n\
    \            }\n        }\n        return countDistinctCharacters;", "       \
    \ HashMap<Character, Integer> map = new HashMap<>();\n        for (char c : string.toCharArray())\
    \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
    \                map.put(c, 1);\n            } else {\n                map.put(c,\
    \ count + 1);\n            }\n        }\n        return map.keySet().stream().distinct().count();",
  "        long count = 1;\n        for (char c : string.toCharArray()) {\n      \
    \      char lower = Character.toLowerCase(c);\n            char upper = Character.toUpperCase(c);\n\
    \            if (lower == upper) {\n                continue;\n            }\n\
    \            if (lower > upper) {\n                if (count > 0) {\n        \
    \            count--;\n                } else {\n                    count +=\
    \ 2;\n                }\n            } else {\n                count++;\n    \
    \        }\n        }\n        return count;", "        HashMap<Character, Long>\
    \ map = new HashMap<>();\n        for (char c : string.toCharArray()) {\n    \
    \        if (map.containsKey(c)) {\n                map.put(c, map.get(c) + 1);\n\
    \            } else {\n                map.put(c, 1);\n            }\n       \
    \ }\n        return map.values().stream().distinct().count();", "        long\
    \ length = 0;\n        if (string == null || string.isEmpty()) {\n           \
    \ throw new IllegalArgumentException(\"String argument must not be null or empty\"\
    );\n        }\n        char[] charArray = string.toCharArray();\n        Set<Character>\
    \ set = new HashSet<>(charArray.length);\n        for (char c : charArray) {\n\
    \            set.add(c);\n            length++;\n        }\n        return length;",
  "        long sum = 0;\n        for(int i = 0; i < string.length(); i++) {\n   \
    \         char currentChar = string.charAt(i);\n            sum += currentChar\
    \ - 'a' + 1; // subtract 'a' so that 'A' is a distinct character\n        }\n\
    \        return sum;", "        // Initialize our map with one element (an empty\
    \ string)\n        Map<Character, Long> charCount = new HashMap<>();\n       \
    \ for (char c : string.toCharArray()) {\n            // If the string does not\
    \ have a key for this char, add an empty string as the value\n            charCount.computeIfAbsent(Character.toLowerCase(c),\
    \ x -> new Long(1))\n                .incrementAndGet();\n        }\n\n      \
    \  // Return the count of distinct characters\n        return charCount.size();",
  "        if (string == null) {\n            throw new IllegalArgumentException(\"\
    The string can not be null\");\n        }\n        \n        List<Character> charList\
    \ = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n      \
    \      charList.add(c);\n        }\n        \n        long distinctCharacterCount\
    \ = charList.size();\n        for (char c : string.toCharArray()) {\n        \
    \    distinctCharacterCount -= Character.toUpperCase(c).equals(c);\n         \
    \   distinctCharacterCount -= Character.toLowerCase(c).equals(c);\n        }\n\
    \        return distinctCharacterCount;", "        long counter = 0;\n       \
    \ for (char character : string.toCharArray()) {\n            counter += Character.toLowerCase(character)\
    \ == character ? 1 : 0;\n        }\n        return counter;", "        return\
    \ string.chars()\n            .map(i -> String.format(\"%10d\", i))\n        \
    \    .distinct()\n            .count();", "        HashMap<Character, Long> charCount\
    \ = new HashMap<>();\n        charCount.put('A', 1);\n        charCount.put('Z',\
    \ 1);\n        for (char ch : string.toCharArray()) {\n            charCount.put(ch,\
    \ charCount.get(ch) + 1);\n        }\n        return charCount.entrySet().stream().filter(entry\
    \ -> entry.getValue() > 1).count();", "        if (string == null || string.isEmpty())\
    \ {\n            return 0;\n        }\n\n        // HashSet<Character> uniqueChars\
    \ = new HashSet<>();\n        Set<Character> uniqueChars = new HashSet<>(string.toLowerCase().chars());\n\
    \n        // System.out.println(uniqueChars);\n\n        // return uniqueChars.size();\n\
    \        return uniqueChars.size();", "        long result = 0;\n        for (char\
    \ c : string.toCharArray()) {\n            result += (int)c;\n        }\n    \
    \    return result;", "        // Write your code here\n        ArrayList<Character>\
    \ arr = new ArrayList<>();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            arr.add(string.charAt(i));\n        }\n        long countDistinctCharacters\
    \ = 0;\n        HashMap<Character, Integer> hMap = new HashMap<Character, Integer>();\n\
    \        for (Character c : arr) {\n            if (hMap.containsKey(c)) {\n \
    \               hMap.put(c, hMap.get(c) + 1);\n            } else {\n        \
    \        hMap.put(c, 1);\n            }\n        }\n        System.out.println(hMap);\n\
    \        for (int i = 0; i < arr.length; i++) {\n            char c = arr[i];\n\
    \            if (hMap.containsKey(c)) {\n                hMap.put(c, hMap.get(c)\
    \ - 1);\n                countDistinctCharacters += hMap.get(c);\n           \
    \ }\n        }\n        return countDistinctCharacters;", '        return countDistinctCharacters(string.chars().boxed(),
    string.codePoints().mapToObj(i -> i).collect(Collectors.toList()));', "      \
    \  long n = 0;\n        char[] array = string.toCharArray();\n        for (int\
    \ i = 0; i < array.length; i++) {\n            n += Character.toLowerCase(array[i])\
    \ != array[i] ? 1 : 0;\n        }\n        return n;", "        HashMap<Character,\
    \ Integer> map = new HashMap<>();\n\n        for (char c : string.toCharArray())\
    \ {\n            Integer count = map.get(c);\n            if (count == null) {\n\
    \                count = 0;\n            }\n            map.put(c, count + 1);\n\
    \        }\n\n        return map.size();", "        if (string == null || string.trim().isEmpty())\
    \ {\n            return 0;\n        }\n        char[] stringArray = string.toCharArray();\n\
    \        Set<Character> distinctCharacters = new HashSet<>();\n        for (char\
    \ character : stringArray) {\n            distinctCharacters.add(character);\n\
    \        }\n        return distinctCharacters.size();", "        char[] charArray\
    \ = string.toCharArray();\n        Set<Character> set = new HashSet<>(charArray.length);\n\
    \        long count = charArray.length;\n        for (char c : charArray) {\n\
    \            if (set.add(c))\n                count++;\n        }\n        return\
    \ count;", "        long countDistinctCharacters = 0;\n        for(Character char\
    \ : string.toLowerCase().toCharArray()){\n            countDistinctCharacters\
    \ += string.toLowerCase().chars().filter(c -> c!=char).count();\n        }\n \
    \       return countDistinctCharacters;", "        // Your code goes here\n  \
    \      Arrays.sort(string.toCharArray());\n        return Collections.frequency(string,\
    \ string.charAt(0));", "        if (string.isEmpty()) return 0;\n        return\
    \ count(string, string.toCharArray());", "        HashMap<Character, Integer>\
    \ map = new HashMap<>();\n        for (char c : string.toCharArray())\n      \
    \      map.put(c, map.getOrDefault(c, 0) + 1);\n        return map.keySet().stream().distinct().count();",
  "        Map<Character, Integer> map = new HashMap<>();\n        Set<Character>\
    \ set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n    \
    \        map.put(c, map.getOrDefault(c, 0) + 1);\n            set.add(Character.toLowerCase(c));\n\
    \            set.add(Character.toUpperCase(c));\n        }\n        return map.size()\
    \ - set.size();", "        Set<Character> set = new HashSet<Character>();\n  \
    \      \n        for (char c: string.toCharArray()) {\n            if (set.contains(c))\
    \ {\n                set.delete(c);\n            } else {\n                set.add(c);\n\
    \            }\n        }\n        \n        return set.size();", "        HashMap<Character,\
    \ Long> countMap = new HashMap<Character, Long>();\n        for (char ch: string.toCharArray())\
    \ {\n            countMap.put(ch, countMap.getOrDefault(ch, 0) + 1);\n       \
    \ }\n        long distinctCharacterCount = countMap.values().stream().distinct().count();\n\
    \        return distinctCharacterCount;", '        return string.length() * string.codePoints().distinct().count();',
  '        return string.chars().distinct().count();', "        List<Character> list\
    \ = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n      \
    \      if (Character.isUpperCase(c)) {\n                list.add(Character.toLowerCase(c));\n\
    \            } else {\n                list.add(Character.toUpperCase(c));\n \
    \           }\n        }\n        // Counting distinct characters in a set\n \
    \       // Set<Character> mySet = new HashSet<Character>();\n        // for (char\
    \ c : list) {\n        //     if (mySet.add(c)) {\n        //         // mySet.add(c);\n\
    \        //         System.out.println(list);\n        //     }\n        // }\n\
    \        // Counting distinct characters in a Map\n        Map<Character, Long>\
    \ charCountMap = new HashMap<Character, Long>();\n        for (char c : list)\
    \ {\n            if (charCountMap.containsKey(c)) {\n                charCountMap.put(c,\
    \ charCountMap.get(c) + 1);\n            } else {\n                charCountMap.put(c,\
    \ 1l);\n            }\n        }\n        // Counting distinct characters in a\
    \ Multimap\n        // Multimap<Character, Long> charCountMap = ArrayListMultimap.create();\n\
    \        // for (char c : list) {\n        //     if (charCountMap.containsKey(c))\
    \ {\n        //         charCountMap.put(c, charCountMap.get(c) + 1);\n      \
    \  //     } else {\n        //         charCountMap.put(c, 1l);\n        //  \
    \   }\n        // }\n        return charCountMap.size();", "        Set<Character>\
    \ set = new HashSet<Character>();\n        for (char c : string.toCharArray())\
    \ {\n            set.add(Character.toLowerCase(c));\n        }\n        return\
    \ set.size();", "        long result = 0;\n        for (char c: string.toCharArray())\
    \ {\n            if (c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z') {\n       \
    \         result += 1;\n            }\n        }\n        return result;", " \
    \       long[] map = new long[26];\n        for (char c : string.toCharArray())\
    \ {\n            map[c - 'a']++;\n        }\n        return IntStream.range(0,\
    \ 26).filter(i -> map[i] != 0).count();", "        // return Long.parseLong(string.split(\"\
    \").filter(s -> !s.equals(\"z\")));\n        StringBuilder builder = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            builder.append(string.toLowerCase().charAt(i));\n\
    \        }\n        Set<Character> set = new HashSet<>();\n        for (char c\
    \ : builder.toString().toCharArray()) {\n            set.add(Character.toLowerCase(c));\n\
    \        }\n        return set.size();", "        StringBuilder result = new StringBuilder();\n\
    \        for(char c : string.toCharArray()) {\n            result.append(c);\n\
    \        }\n        return result.countCharsInSet(new HashSet<>(string.chars()));",
  "        Map<Character, Long> charCounts = string.chars().boxed()\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n        return charCounts.entrySet().stream().collect(Collectors.summingLong(\n\
    \            e -> e.getValue()));", "        char[] arr = string.toCharArray();\n\
    \        List<Character> charsList = new ArrayList<>(arr.length);\n        for\
    \ (char ch : arr) {\n            charsList.add(ch);\n        }\n        long countDistinctCharacters\
    \ = charsList.size();\n        return countDistinctCharacters;", "        long\
    \ count = 0;\n        char charArray[] = string.toCharArray();\n        for (int\
    \ i = 0; i < charArray.length; i++) {\n            count += Character.isLetter(charArray[i])\
    \ ? 1 : 0;\n        }\n        return count;", "        Set<Character> characters\
    \ = new HashSet<>();\n        long distinctCharacters = 0;\n\n        for (char\
    \ c : string.toCharArray()) {\n            characters.add(c);\n            distinctCharacters++;\n\
    \        }\n        return distinctCharacters;", "        Map<String, Long> counts\
    \ = HashMap::new;\n        for (char c : string.toCharArray()) {\n           \
    \ counts.putIfAbsent(Character.toString(c), 1L);\n            counts.put(Character.toUpperCase(c),\
    \ counts.get(Character.toUpperCase(c))+1);\n            counts.put(Character.toLowerCase(c),\
    \ counts.get(Character.toLowerCase(c))+1);\n        }\n        return counts.values().stream().reduce((a,\
    \ b) -> a+b).orElse(0L);", "        if (string.length() == 0) {\n            throw\
    \ new IllegalArgumentException(\"Empty String\");\n        }\n\n        return\
    \ count(string, new HashMap<>());", "        int[] counts = new int[256];\n  \
    \      for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isUpperCase(c))\n                counts[Character.toUpperCase(c)]\
    \ += 1;\n            else if (Character.isLowerCase(c))\n                counts[Character.toLowerCase(c)]\
    \ += 1;\n            else\n                counts[c] += 1;\n        }\n      \
    \  long result = 0;\n        for (char c = 'a'; c <= 'z'; c++)\n            result\
    \ += counts[c];\n        for (char c = 'A'; c <= 'Z'; c++)\n            result\
    \ += counts[c];\n        return result;", "        Map<Character, Long> charCount\
    \ = new HashMap<>();\n        long distinctCount = 0;\n\n        // Use string\
    \ length to avoid string index out of bounds exceptions\n        for (int i =\
    \ 0; i < string.length(); i++) {\n            Character c = string.charAt(i);\n\
    \            // If character is already counted\n            if (charCount.containsKey(c))\
    \ {\n                Long count = charCount.get(c);\n                count +=\
    \ 1;\n                charCount.put(c, count);\n            }\n            //\
    \ Otherwise initialize to 1\n            else {\n                Long count =\
    \ 1;\n                charCount.put(c, count);\n            }\n\n            //\
    \ Add distinct count to the total distinct count\n            distinctCount +=\
    \ 1;\n        }\n\n        return distinctCount;", "        // TODO: Write your\
    \ function here\n        return 0;", "        long total = 0;\n        for(char\
    \ c: string.toCharArray())\n            total += countDistinctCharactersOf(c)\
    \ == 1 ? 1 : 0;\n        return total;", '        return Collections.frequency(string.split("(?i)"),
    String.valueOf((char) 0));', "        long count = 0;\n        int len = string.length();\n\
    \        for (int i = 0; i < len; i++) {\n            char ch = string.charAt(i);\n\
    \            // Ignore the case for this letter\n            // Add it if it isn't\
    \ already there\n            if (Character.isLowerCase(ch)) {\n              \
    \  count = count + 1;\n            }\n        }\n        return count;", "   \
    \     long result = 0;\n        for (char c : string.toCharArray()) {\n      \
    \      String value = Character.toString(c);\n            result += value.chars().distinct().count();\n\
    \        }\n        return result;", "        Map<Character, Long> counts = new\
    \ HashMap<>();\n        for (int i = 0; i < string.length(); i++) {\n        \
    \    Character c = string.charAt(i);\n            Long count = counts.get(c);\n\
    \            if (count == null) {\n                count = new Long(1);\n    \
    \        } else {\n                count = count.longValue() + 1;\n          \
    \  }\n            counts.put(c, count);\n        }\n        return counts.values().stream().mapToLong(x\
    \ -> x.longValue()).sum();", "        HashMap<Character, Integer> result = new\
    \ HashMap<>();\n        for (char c : string.toCharArray()) {\n            if\
    \ (result.containsKey(c)) {\n                int count = result.get(c);\n    \
    \            result.put(c, count + 1);\n            } else {\n               \
    \ result.put(c, 1);\n            }\n        }\n        return result.size();",
  "        // O(n log n)\n        HashSet<Character> charSet = new HashSet<>();\n\
    \        for (char ch : string.toCharArray()) {\n            charSet.add(ch);\n\
    \        }\n        long count = charSet.size();\n        for (int i = 0; i <\
    \ string.length(); i++) {\n            char ch = string.charAt(i);\n         \
    \   charSet.remove(ch);\n            count --;\n        }\n        return count;",
  "        long distinctCharacters = 0l;\n        char[] characters = string.toCharArray();\n\
    \n        for (int i = 0; i < characters.length; i++) {\n            boolean flag\
    \ = false;\n            for (int j = 0; j < characters.length; j++) {\n      \
    \          if (i != j && characters[i] == characters[j]) {\n                 \
    \   flag = true;\n                    break;\n                }\n            }\n\
    \            if (!flag) {\n                distinctCharacters++;\n           \
    \ }\n        }\n        return distinctCharacters;", '        return string.chars().mapToObj(x
    -> (char) x).distinct().count();', "        // Initialize count\n        long\
    \ count = 0;\n        // Iterate all chars of given string\n        for (char\
    \ c : string.toCharArray()) {\n            // Check case sensitive or not\n  \
    \          if (Character.isUpperCase(c)) count++;\n            else if (!Character.isUpperCase(c))\
    \ count--;\n        }\n        // Return count\n        return count;", '        return
    string.chars().distinct().count();', "        long distinctChars = 0;\n      \
    \  for (Character c : string.chars()) {\n            Character c2 = Character.toLowerCase(c);\n\
    \            Character c3 = Character.toUpperCase(c);\n            distinctChars\
    \ += (\n                    (!c2.equals(c)) &&\n                    (!c3.equals(c))\n\
    \            );\n        }\n        return distinctChars;", "        return LongStream.of(string.toLowerCase().chars())\n\
    \            .map(i -> String.valueOf(i))\n            .distinct()\n         \
    \   .count();", '        return countDistinctCharacters(string, new HashMap<>());',
  "        // Initialize the result counter to zero\n        long countDistinctCharacters\
    \ = 0;\n        \n        // Iterate through the string\n        for (char letter\
    \ : string.toCharArray()) {\n            // Convert to lower case to compare case\
    \ insensitive\n            if (Character.toLowerCase(letter) == letter) {\n  \
    \              // If it is an upper case letter, just increment the counter\n\
    \                countDistinctCharacters++;\n            } else {\n          \
    \      // If it is a lower case letter, check if the upper case letter is also\n\
    \                // lower case and if it is, the counter is increased\n      \
    \          if (Character.isUpperCase(letter) && Character.toLowerCase(letter)\
    \ != letter) {\n                    countDistinctCharacters++;\n             \
    \   }\n            }\n        }\n        \n        // Return the result (should\
    \ be 3 for the input string above)\n        return countDistinctCharacters;",
  "        Set<Character> charSet = string.chars().boxed().collect(Collectors.toSet());\n\
    \        return charSet.stream().distinct().count();", "        long distinctCharacters\
    \ = 0;\n\n        if (string == null || string.isEmpty()) {\n            return\
    \ 0;\n        }\n\n        // iterate over all characters of the given string\n\
    \        for (char character : string.toCharArray()) {\n            if (Character.isUpperCase(character))\
    \ {\n                distinctCharacters ++;\n            } else {\n          \
    \      distinctCharacters --;\n            }\n        }\n\n        // return the\
    \ number of distinct characters\n        return distinctCharacters;", "      \
    \  HashSet<Character> hs = new HashSet<>();\n        for (char c : string.toCharArray())\n\
    \            if (Character.isUpperCase(c))\n                hs.add('A' + c - 'A');\n\
    \            else if (Character.isLowerCase(c))\n                hs.add('a' +\
    \ c - 'a');\n            else\n                hs.add(c);\n        return hs.size();",
  "        long result = 1;\n        for(int i = 0; i < string.length(); i++) {\n\
    \            char character = string.charAt(i);\n            char upperCaseCharacter\
    \ = Character.toUpperCase(character);\n            char lowerCaseCharacter = Character.toLowerCase(character);\n\
    \            if(Character.isUpperCase(character) && Character.isUpperCase(upperCaseCharacter))\n\
    \                result *= 2;\n            else if(Character.isLowerCase(character)\
    \ && Character.isLowerCase(lowerCaseCharacter))\n                result *= 2;\n\
    \            else\n                result *= 2;\n        }\n        return result;",
  "        long answer = 0;\n        char[] charArray = string.toCharArray();\n  \
    \      Arrays.sort(charArray);\n        for (char c : charArray) {\n         \
    \   answer += 1;\n        }\n        return answer;", "        long distinctCharCount\
    \ = 0;\n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                distinctCharCount++;\n            } else if (Character.isUpperCase(c))\
    \ {\n                distinctCharCount++;\n            } else {\n            \
    \    distinctCharCount += 2;\n            }\n        }\n        return distinctCharCount;",
  "        Set<Character> distinctChars = new HashSet<>();\n        for(char c : string.toCharArray())\
    \ {\n            distinctChars.add(c);\n        }\n        return distinctChars.size();",
  '        return string.chars().distinct().count();', "        long[] chars = new\
    \ long[26];\n        for (char c : string.toCharArray())\n            chars[c]++;\n\
    \        return Arrays.stream(chars).distinct().count();", "        long total\
    \ = 0;\n        for (char c : string.toCharArray()) {\n            total += Character.toUpperCase(c).equals(c)\
    \ ? 1 : 0;\n            total += Character.toLowerCase(c).equals(c) ? 1 : 0;\n\
    \        }\n        return total;", "        long length = 0;\n        if (string\
    \ != null && string.length() > 0) {\n            Set<Character> set = new HashSet<>();\n\
    \            for (char character : string.toCharArray()) {\n                set.add((Character)\
    \ character);\n            }\n            length = set.size();\n        }\n  \
    \      return length;", "        long[] result = new long[string.length()];\n\
    \        Arrays.fill(result,0L);\n        for(char c : string.toCharArray()) {\n\
    \            char lower = Character.toLowerCase(c);\n            char upper =\
    \ Character.toUpperCase(c);\n            result[Math.min(upper-lower,result.length-1)]\
    \ += 1;\n        }\n        return result.length;", "        Set<Character> distinctCharacters\
    \ = Sets.newHashSet();\n        for(char c : string.toCharArray()) {\n       \
    \     distinctCharacters.add(c);\n        }\n        return distinctCharacters.size();",
  '        return Stream.of(string.split("")).map(c -> String.valueOf(c).trim()).map(String::toLowerCase).distinct().count();',
  "        char[] chars = string.toLowerCase().toCharArray();\n        long result\
    \ = 0L;\n        for (char ch : chars) {\n            if (Character.isLetter(ch))\
    \ {\n                result += 1;\n            }\n        }\n        return result;",
  "        \n        \n        \n        return string.chars().distinct().count();",
  "        long distinctCharacters = 0;\n        for (char c : string.toCharArray())\
    \ {\n            distinctCharacters += (c == Character.toLowerCase(c)) ? 1 : 0;\n\
    \            distinctCharacters += (c == Character.toUpperCase(c)) ? 1 : 0;\n\
    \        }\n        return distinctCharacters;", "        long[] frequencies =\
    \ new long[128];\n        for (char c : string.toCharArray()) {\n            int\
    \ val = Character.getNumericValue(c);\n            frequencies[val]++;\n     \
    \   }\n        long count = 1;\n        for (long count : frequencies) {\n   \
    \         count *= 2;\n        }\n        return count;", '        Arrays.stream(string.toCharArray()).distinct().count();',
  "        long count = 0; //\n        Set<Character> characters = new HashSet<>();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (!characters.contains(c)) {\n                characters.add(c);\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       Map<Character, Long> count = new HashMap<>();\n        for (char c : string.toCharArray())\
    \ {\n            count.put(c, count.getOrDefault(c, 0L) + 1);\n        }\n   \
    \     return count.entrySet().stream()\n                .filter(entry -> entry.getValue()\
    \ == string.length())\n                .collect(Collectors.counting());", '        return
    string.chars().distinct().count();', "        if (string == null) {\n        \
    \    throw new IllegalArgumentException(\"Cannot find distinct characters on null\"\
    );\n        }\n        Set<Character> distinctChars = new HashSet<>();\n     \
    \   boolean start = true;\n        for (char c : string.toCharArray()) {\n   \
    \         if (start) {\n                start = false;\n                continue;\n\
    \            }\n            if (Character.isLowerCase(c)) {\n                continue;\n\
    \            }\n            distinctChars.add(c);\n        }\n        return distinctChars.size();",
  "        if (string == null || string.isEmpty()) {\n            return 0L;\n   \
    \     }\n\n        HashMap<Character, Long> map = new HashMap<Character, Long>();\n\
    \        for (char c : string.toCharArray()) {\n            Long count = map.get(c);\n\
    \            if (count == null) {\n                map.put(c, 1l);\n         \
    \   } else {\n                map.put(c, count.longValue() + 1l);\n          \
    \  }\n        }\n\n        return map.values().stream().filter(l -> l > 0l).count();",
  "        Set<Character> set = new HashSet<>();\n\n        for (char character :\
    \ string.toCharArray()) {\n            if (set.add(character)) {\n           \
    \     set.add(Character.toUpperCase(character));\n                set.add(Character.toLowerCase(character));\n\
    \            }\n        }\n\n        return set.size();", "        long result\
    \ = 0;\n        long hash;\n        long charCount;\n        char[] charArray\
    \ = string.toCharArray();\n        for (int i = 0; i < charArray.length; i++)\
    \ {\n            hash = hashCode(charArray[i]);\n            if (hash == 0) {\n\
    \                result++;\n            }\n            if (result != 0) {\n  \
    \              charCount = (1l << result);\n                if (hash == charCount)\
    \ {\n                    hash++;\n                }\n            }\n        }\n\
    \        return result;", "        HashMap<Character, Integer> count = new HashMap<Character,\
    \ Integer>();\n        for (Character ch: string.toCharArray()) {\n          \
    \  if (count.containsKey(ch)) {\n                count.put(ch, count.get(ch) +\
    \ 1);\n            } else {\n                count.put(ch, 1);\n            }\n\
    \        }\n\n        return count.values().stream().mapToLong(Integer::longValue).sum();",
  "        long res = 0;\n        Set<Character> set = new HashSet<>();\n        for\
    \ (char c : string.toCharArray()) {\n            set.add(Character.toLowerCase(c));\n\
    \        }\n        set.forEach(c -> { res += (set.size() - set.contains(c));\
    \ });\n        return res;", "        long num = 0;\n        for(int i = 0; i\
    \ < string.length(); i++) {\n            if(Character.isLetter(string.charAt(i)))\
    \ {\n                num += 1;\n            }\n        }\n        return num;",
  "        final HashMap<Character, Long> charCounts = new HashMap<Character, Long>();\n\
    \        // Iterate through all characters and store their count in a HashMap\n\
    \        for (Character character : string.toCharArray()) {\n            long\
    \ currentCount = charCounts.getOrDefault(character, 0L);\n            charCounts.put(character,\
    \ currentCount + 1L);\n        }\n        // Return the sum of the count of the\
    \ chars found in string\n        return charCounts.values().stream().mapToLong(Long::longValue).sum();",
  "        HashMap<String, Long> characters = new HashMap<>();\n        char[] charArray\
    \ = string.toCharArray();\n        for (char c : charArray) {\n            long\
    \ count = characters.containsKey(c) ? characters.get(c) : 0;\n            characters.put(c,\
    \ ++count);\n        }\n        return characters.values().stream().mapToLong(count\
    \ -> count < 4 ? count : 4l).sum();", "        Set<Character> set = new HashSet<Character>();\n\
    \        for (char c : string.toCharArray())\n            set.add(c);\n      \
    \  return set.size();", "        HashMap<Character, Long> map = new HashMap<>();\n\
    \        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            map.put(c, map.getOrDefault(c, 0L) + 1);\n        }\n        Long\
    \ v = 0;\n        for (long key : map.keySet()) {\n            v = Math.max(v,\
    \ key);\n        }\n        return v;", "        List<Character> chars = new ArrayList<Character>();\n\
    \        for (char c : string.toCharArray()) {\n            chars.add(c);\n  \
    \      }\n        long distinctCharCount = chars.size();\n        chars.clear();\n\
    \        for (char c : string.toCharArray()) {\n            if (chars.contains(c))\
    \ {\n                chars.remove(c);\n            }\n        }\n        return\
    \ distinctCharCount;", "        long distinct = 0, c;\n        for (int i = 0;\
    \ i < string.length(); i++)\n            for (int j = 0; j < string.length();\
    \ j++)\n                if (i != j && string.charAt(i) == string.charAt(j))\n\
    \                    distinct++;\n        return distinct;", "        Set<Character>\
    \ set = new HashSet<>();\n        for (int i = 0; i < string.length(); i++)\n\
    \            set.add(string.charAt(i));\n        return set.size();", "      \
    \  Set<Character> charSet = new HashSet<>();\n        for (char c : string.toCharArray())\n\
    \            charSet.add(c);\n        return charSet.size();", '        return
    countDistinctCharacters(string, new char[string.length()]);', "        Map<Character,\
    \ Long> countMap = new HashMap<Character, Long>();\n        for (char c : string.toCharArray())\
    \ {\n            Long count = countMap.get(c);\n            if (count == null)\
    \ {\n                countMap.put(c, 1l);\n            } else {\n            \
    \    countMap.put(c, count + 1l);\n            }\n        }\n        return countMap.entrySet().stream().mapToLong(e\
    \ -> e.getValue()).sum();", "        // Create a map of distinct characters, counting\
    \ them\n        HashMap<Character, Integer> map = new HashMap<>();\n        for\
    \ (char ch : string.toCharArray()) {\n            map.put(ch, map.getOrDefault(ch,\
    \ 0) + 1);\n        }\n\n        // Return number of distinct characters plus\
    \ one\n        return map.size() + 1;", "        long total = 0;\n        for\
    \ (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            int j = i;\n            while (j < string.length() && string.charAt(j)\
    \ == c) {\n                j++;\n            }\n            if (j != i) {\n  \
    \              total += (string.charAt(i) - c);\n            }\n        }\n  \
    \      return total;", '        return string.replaceAll("[^A-Za-z]+", "").length();',
  '        return countDistinctCharacters(string, string.toCharArray());']
stop_tokens:
- "\n    }\n"
