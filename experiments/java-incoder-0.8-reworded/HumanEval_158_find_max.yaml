name: HumanEval_158_find_max
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that accepts an array array list of strings.\n\
  \    // The array list contains different words. Return the word with maximum number\n\
  \    // of unique characters. If multiple strings have maximum number of unique\n\
  \    // characters, return the one which comes first in lexicographical order.\n\
  \    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"name\", (String)\"\
  of\", (String)\"string\"))))\n    // (\"string\")\n    // >>> findMax((new ArrayList<String>(Arrays.asList((String)\"\
  name\", (String)\"enam\", (String)\"game\"))))\n    // (\"enam\")\n    // >>> findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
  cc\"))))\n    // (\"aaaaaaa\")\n    public static String findMax(ArrayList<String>\
  \ words) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\"\
  )))).equals((\"string\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  name\", (String)\"enam\", (String)\"game\")))).equals((\"enam\")));\n    assert(findMax((new\
  \ ArrayList<String>(Arrays.asList((String)\"aaaaaaa\", (String)\"bb\", (String)\"\
  cc\")))).equals((\"aaaaaaa\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  abc\", (String)\"cba\")))).equals((\"abc\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  play\", (String)\"this\", (String)\"game\", (String)\"of\", (String)\"footbott\"\
  )))).equals((\"footbott\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"\
  we\", (String)\"are\", (String)\"gonna\", (String)\"rock\")))).equals((\"gonna\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"we\", (String)\"\
  are\", (String)\"a\", (String)\"mad\", (String)\"nation\")))).equals((\"nation\"\
  )));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"this\",\
  \ (String)\"is\", (String)\"a\", (String)\"prrk\")))).equals((\"this\")));\n   \
  \ assert(findMax((new ArrayList<String>(Arrays.asList((String)\"b\")))).equals((\"\
  b\")));\n    assert(findMax((new ArrayList<String>(Arrays.asList((String)\"play\"\
  , (String)\"play\", (String)\"play\")))).equals((\"play\")));\n    }\n\n}\n"
completions: ["        // write your code here\n        String max = \"\";\n     \
    \   long maxCount = 0;\n        for(String s : words) {\n            int count\
    \ = 0;\n            for(char c : s.toCharArray()) {\n                if(words.contains(Character.toString(c)))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    max = String.valueOf(s);\n            maxCount = count;\n        }\n    \
    \    if(maxCount > words.size()) {\n            return max;\n        }\n     \
    \   return words.get(0);", "        int maxCount = 0;\n        String maxWord\
    \ = null;\n        for (String word : words) {\n            char[] chars = word.toCharArray();\n\
    \            int len = chars.length;\n            if (len > maxCount) {\n    \
    \            maxCount = len;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;", "        if (words == null || words.isEmpty())\
    \ {\n            return \"empty\";\n        }\n\n        String max = \"\", first\
    \ = \"\";\n        Set<Character> charSet = new HashSet<>();\n        for (String\
    \ word : words) {\n            charSet.addAll(Arrays.stream(word.toCharArray()).distinct().collect(Collectors.toSet()));\n\
    \            first = first.length() == 0 ? charSet.stream().mapToObj(c -> c).collect(Collectors.joining())\
    \ : charSet.stream().mapToObj(c -> c + first).collect(Collectors.joining());\n\
    \            max = max.length() == 0 ? charSet.stream().mapToObj(c -> c).collect(Collectors.joining())\
    \ : charSet.stream().mapToObj(c -> c + max).collect(Collectors.joining());\n \
    \       }\n\n        return first;", "        return words.stream()\n        \
    \    .flatMap(word -> word.chars().mapToObj(String::valueOf).collect(Collectors.toList()))\n\
    \            .map(uniqueChars(word))\n            .max(String::compareTo)\n  \
    \          .get();", "        // If empty array, return empty string.\n      \
    \  if (words.isEmpty())\n            return \"\";\n        // Create Map<Integer,\
    \ String> to store number of occurrences of each unique character of the words.\n\
    \        Map<Integer, String> count = new HashMap<>();\n        for (String word\
    \ : words)\n            for (char c : word.toCharArray())\n                count.putOrDefault(Character.toUpperCase(c),\
    \ count.getOrDefault(Character.toUpperCase(c), 0) + 1);\n        // Find the key\
    \ in the map with highest value.\n        // If multiple keys have same highest\
    \ value, pick the one with the least index first.\n        Integer maxCount =\
    \ Collections.max(count.values());\n        String maxWord = null;\n        for\
    \ (Map.Entry<Integer, String> entry : count.entrySet())\n            if (entry.getKey()\
    \ == maxCount)\n                maxWord = entry.getValue();\n        // If no\
    \ word with maximum number of occurrences found, return empty string.\n      \
    \  if (maxWord == null)\n            return \"\";\n        // Else, sort the words\
    \ in lexicographical order\n        List<String> sortedWords = new ArrayList<>();\n\
    \        for (String word : words) {\n            Collections.sort(word);\n  \
    \          sortedWords.add(word);\n        }\n        // Find the word with least\
    \ index in lexicographical order\n        int minIndex = 0;\n        for (String\
    \ word : sortedWords) {\n            int index = word.toCharArray().indexOf(maxWord);\n\
    \            if (index < minIndex)\n                minIndex = index;\n      \
    \  }\n        return sortedWords.get(minIndex);", "        int counter = 0;\n\
    \        ArrayList<String> words2 = new ArrayList<>();\n        for (String word\
    \ : words) {\n            String word2 = new String();\n            String count\
    \ = word.replaceAll(\"\\\\s\", \"\").replaceAll(\"[\\\\p{P}]\", \"\").length();\n\
    \            words2.add(String.valueOf(count));\n        }\n        Collections.sort(words2);\n\
    \        StringBuilder stringBuilder = new StringBuilder();\n        for (String\
    \ s : words2)\n            stringBuilder.append(s);\n        int max = 0;\n  \
    \      String biggest = words.get(0);\n        for (int i = 1; i < words.size();\
    \ i++)\n            if (words.get(i).compareTo(biggest) > 0)\n               \
    \ biggest = words.get(i);\n        ArrayList<String> biggestWords = words2.stream()\n\
    \                .filter(biggest -> biggest.equals(biggestWords.get(0)))\n   \
    \             .collect(Collectors.toCollection(ArrayList::new));\n        if (biggestWords.size()\
    \ > 0)\n            return biggest.get(0);\n        else\n            return null;",
  "        // Your code here.\n        StringBuilder stringBuilder = new StringBuilder();\n\
    \        Set<Character> set = new HashSet<>();\n        for (String word : words)\
    \ {\n            int count = 0;\n            for (char character : word.toCharArray())\
    \ {\n                if (set.contains(character)) {\n                    count++;\n\
    \                }\n                set.add(character);\n            }\n     \
    \       stringBuilder.append(word);\n            stringBuilder.append(count);\n\
    \        }\n        return stringBuilder.toString();", "        String[] array\
    \ = words.toArray(new String[words.size()]);\n        Set<String> set = Arrays.stream(array)\n\
    \            .distinct()\n            .sorted()\n            .map(String::length)\n\
    \            .boxed()\n            .collect(Collectors.toSet());\n        String\
    \ maxChar = set.stream()\n            .min(Comparator.comparingInt(String::length))\n\
    \            .map(String::length)\n            .map(String::value)\n         \
    \   .orElse(\"\");\n        return words.get(0) == maxChar ? words.get(0) : findMax(Arrays.copyOfRange(words,\
    \ 1, words.size()));", "        Map<String, Integer> map = new HashMap<String,\
    \ Integer>();\n        words.stream().forEach(x -> map.put(x, words.size()));\n\
    \        IntStream.range(0, words.size()).forEach(i -> {\n            for (int\
    \ j = i + 1; j < words.size(); j++) {\n                String a = words.get(i);\n\
    \                String b = words.get(j);\n                map.merge(a, b, (o,\
    \ n) -> Math.min(o, n));\n            }\n        });\n        IntStream.range(0,\
    \ words.size()).forEach(i -> {\n            String a = words.get(i);\n       \
    \     if (map.containsKey(a)) {\n                words.set(i, map.get(a));\n \
    \           }\n        });\n        int max = 0;\n        for (String word : words)\
    \ {\n            max = Math.max(max, word.length());\n        }\n        return\
    \ new String(words.subList(0, words.size() - max));", "        List<String> tempWords\
    \ = words;\n        Collections.sort(tempWords);\n        int max = 0;\n     \
    \   String maxWord = \"\";\n        int i = 0;\n        while (i < tempWords.size()\
    \ && tempWords.size() > max) {\n            String word = tempWords.get(i);\n\
    \            int uniqueChar = 0;\n            for (String word : words) {\n  \
    \              if (word.equals(word)) {\n                    continue;\n     \
    \           }\n                if (word.contains(word)) {\n                  \
    \  uniqueChar++;\n                }\n            }\n            if (uniqueChar\
    \ > max) {\n                max = uniqueChar;\n                maxWord = word;\n\
    \            }\n            i++;\n        }\n        return maxWord;", "     \
    \   // your code\n        Map<Character, Integer> counts = new HashMap<Character,\
    \ Integer>();\n        int maxCount = 0;\n        for(String word : words) {\n\
    \            for(char c : word.toCharArray()) {\n                if(!counts.containsKey(c))\
    \ {\n                    counts.put(c, 1);\n                } else {\n       \
    \             counts.put(c, counts.get(c) + 1);\n                    if(counts.get(c)\
    \ > maxCount) {\n                        maxCount = counts.get(c);\n         \
    \           }\n                }\n            }\n        }\n        return words.stream().filter(w\
    \ -> w.toCharArray().length == maxCount).sorted(Comparator.comparing(w -> w.toCharArray())).findFirst().get();",
  '        return words.stream().flatMap(word -> word.chars().distinct().count()).max();',
  "        Set<Character> uniqueChars = new HashSet<>();\n        for (String s :\
    \ words) {\n            uniqueChars.addAll(s.toCharArray());\n        }\n    \
    \    Collections.sort(words, (x, y) -> {\n            int compare = uniqueChars.compareTo(x);\n\
    \            if (compare != 0) {\n                return compare;\n          \
    \  }\n            return y.toCharArray().compareTo(x);\n        });\n        return\
    \ words.stream().max(Comparator.comparingInt(x -> uniqueChars.size()))\n     \
    \           .orElse(null);", "        Map<Character, Integer> charCount = words.stream().collect(groupingBy(Function.identity(),\
    \ counting()));\n        Optional<Entry<Character, Integer>> maxCount = charCount.entrySet().stream().max(Map.Entry.comparingByValue());\n\
    \        if (maxCount.isPresent()) {\n            return words.get(charCount.keySet().toArray()[charCount.keySet().toArray().length\
    \ - 1 - charCount.get(maxCount.get().getKey())]);\n        }\n        return words.get(0);",
  "        Map<String, Integer> map = new HashMap<>();\n        wordList.forEach((word)\
    \ -> {\n            int count = 0;\n            if (map.containsKey(word)) {\n\
    \                count = map.get(word);\n            } else {\n              \
    \  map.put(word, 1);\n            }\n            map.put(word, count + 1);\n \
    \       });\n        List<String> sortedWords = new ArrayList<>(map.keySet());\n\
    \        Collections.sort(sortedWords);\n        return sortedWords.get(0);",
  "        Collections.sort(words, (a, b) -> {\n            Set<Character> aSet =\
    \ new HashSet<Character>();\n            for(String aString : a)\n           \
    \ {\n                for(char c : aString.toCharArray())\n                {\n\
    \                    aSet.add(c);\n                }\n            }\n        \
    \    Set<Character> bSet = new HashSet<Character>();\n            for(String aString\
    \ : b)\n            {\n                for(char c : aString.toCharArray())\n \
    \               {\n                    bSet.add(c);\n                }\n     \
    \       }\n            int result = aSet.size() - bSet.size();\n            if(result\
    \ != 0)\n                return result;\n            return aSet.size() > bSet.size()\
    \ ? 1 : 0;\n        });\n        return words.get(0);", "        int max = words.size();\n\
    \        Set<Character> uniqueChars = words.get(0).toCharArray().stream().distinct().collect(Collectors.toSet());\n\
    \        for(int i = 1; i < words.size(); i++) {\n            if(words.get(i).toCharArray().size()\
    \ > max) {\n                max = words.get(i).toCharArray().size();\n       \
    \     }\n            Set<Character> newUniqueChars = words.get(i).toCharArray().stream().distinct().collect(Collectors.toSet());\n\
    \            uniqueChars.removeAll(newUniqueChars);\n        }\n        return\
    \ words.stream().filter(word -> word.toCharArray().size() == max).min(Comparator.comparing(String::length)).orElse(null);",
  "        // Write your code here\n        String result = \"\";\n        int max\
    \ = 0;\n        String max = words.get(0);\n\n        for(int i=1; i<words.size();\
    \ i++) {\n            if (words.get(i).length() > max) {\n                max\
    \ = words.get(i).length();\n                max = words.get(i);\n            }\n\
    \        }\n        return max;", "        Arrays.sort(words);\n        return\
    \ words.stream().sorted().distinct().findFirst().orElse(null);", "        // Complete\
    \ the findMax method here.\n        Set<Character> set = new HashSet<>();\n  \
    \      for(int i = 0; i < words.size(); i++) {\n            for (int j = 0; j\
    \ < words.get(i).length(); j++) {\n                set.add(words.get(i).charAt(j));\n\
    \            }\n        }\n        System.out.println(set);\n        \n      \
    \  for(String s : words) {\n            int count = 1;\n            for(char c\
    \ : s.toCharArray()) {\n                count++;\n            }\n            int\
    \ maxCount = 1;\n            for(char c : s.toCharArray()) {\n               \
    \ maxCount++;\n                if(count > maxCount) {\n                    count\
    \ = maxCount;\n                }\n            }\n            \n            System.out.println(maxCount);\n\
    \            \n        }\n        // return max;\n        // }", "        int\
    \ maxCount = 0;\n        int maxIdx = 0;\n\n        int n = words.size();\n  \
    \      for(int i=0; i<n; i++) {\n            int count = 0;\n            for(int\
    \ j=0; j<words.size(); j++) {\n                if(words.get(j).equalsIgnoreCase(words.get(i)))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if(count > maxCount) {\n                maxCount = count;\n             \
    \   maxIdx = i;\n            }\n        }\n        return words.get(maxIdx);",
  "        int[] counter = new int[256];\n        Map<String, Integer> characterCount\
    \ = new HashMap<String, Integer>();\n\n        words.forEach(word -> {\n     \
    \       int charCount = 0;\n            for (char c : word.toCharArray()) {\n\
    \                charCount += counter[c];\n                counter[c] = 0;\n \
    \           }\n            characterCount.put(word, charCount);\n        });\n\
    \n        int max = 0;\n        String maxChar = null;\n\n        words.forEach(word\
    \ -> {\n            int charCount = characterCount.get(word);\n            if\
    \ (charCount > max) {\n                max = charCount;\n                maxChar\
    \ = word;\n            }\n        });\n\n        if (max == 0) return null;\n\n\
    \        words.sort(Comparator.comparingInt(word -> characterCount.get(word)));\n\
    \        words.forEach(word -> {\n            if (characterCount.get(word) ==\
    \ max) {\n                return word;\n            }\n        });\n\n       \
    \ return maxChar;", "        // TODO: Complete the function\n        Map<String,\
    \ Integer> uniqueCharacters = new HashMap<>();\n        for (String word : words)\
    \ {\n            int count = 1;\n            for (char c : word.toCharArray())\
    \ {\n                if (uniqueCharacters.containsKey(c))\n                  \
    \  uniqueCharacters.put(c, count + uniqueCharacters.get(c));\n               \
    \ else\n                    uniqueCharacters.put(c, count);\n                count\
    \ += 1;\n            }\n        }\n        Integer max = uniqueCharacters.values().stream().max(Comparator.naturalOrder()).get();\n\
    \        String[] maxStrings = words.stream().filter(w -> w.length() == max).map(w\
    \ -> w.substring(0, max)).sorted().toArray(String[]::new);\n        Arrays.sort(maxStrings);\n\
    \        return maxStrings[maxStrings.length - 1];", "        Map<Character, Integer>\
    \ characterCounts = new HashMap<>();\n\n        // count the number of unique\
    \ characters in each word\n        for (String word : words) {\n            for\
    \ (char c : word.toCharArray()) {\n                Integer count = characterCounts.get(c);\n\
    \                if (count == null) {\n                    count = 1;\n      \
    \          } else {\n                    count += 1;\n                }\n    \
    \            characterCounts.put(c, count);\n            }\n        }\n\n    \
    \    List<Integer> keys = new ArrayList<>(characterCounts.keySet());\n       \
    \ Collections.sort(keys);\n\n        // find the maximum unique character\n  \
    \      int maxCount = keys.get(0);\n        for (Integer key : keys) {\n     \
    \       if (maxCount > key) {\n                maxCount = key;\n            }\n\
    \        }\n\n        // find the word with the maximum unique characters\n  \
    \      for (String word : words) {\n            char[] chars = word.toCharArray();\n\
    \            int maxCountIndex = 0;\n            for (int i = 0; i < chars.length;\
    \ i++) {\n                char c = chars[i];\n                Integer count =\
    \ characterCounts.get(c);\n                if (count > maxCount) {\n         \
    \           maxCount = count;\n                    maxCountIndex = i;\n      \
    \          }\n            }\n            if (maxCount == maxCountIndex) {\n  \
    \              return word;\n            }\n        }\n\n        return null;",
  "        Map<Character, Integer> map = new HashMap<>();\n        for (String w :\
    \ words) {\n            for (int i = 0; i < w.length(); i++) {\n             \
    \   char c = w.charAt(i);\n                int count = map.getOrDefault(c, 0);\n\
    \                map.put(c, count + 1);\n            }\n        }\n        Integer\
    \ maxCount = map.entrySet().stream().max(Map.Entry.comparingByValue()).getValue();\n\
    \        String result = null;\n        for (Map.Entry<Character, Integer> e :\
    \ map.entrySet()) {\n            if (maxCount == e.getValue()) {\n           \
    \     result = e.getKey();\n            }\n        }\n        return result;",
  "        int maxCount = 0;\n        String maxWord = \"\";\n        int count =\
    \ 0;\n        for (String word : words) {\n            count = 1;\n          \
    \  for (int i = 0; i < word.length(); i++) {\n                for (int j = 0;\
    \ j < word.length(); j++) {\n                    if (i != j)\n               \
    \         if (word.charAt(i) == word.charAt(j))\n                            count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        if (maxCount != 0) {\n            System.out.println(\"Max\
    \ count \" + maxCount + \" at \" + maxWord + \"\");\n        }\n        return\
    \ maxWord;", "        int counter = 0;\n        String result = \"\";\n      \
    \  for (String word : words) {\n            for (int i = 0; i < word.length();\
    \ i++) {\n                String ch = word.substring(i, i + 1);\n            \
    \    if (words.stream().anyMatch(w -> w.equals(ch))) {\n                    counter++;\n\
    \                } else {\n                    if (counter > words.size()) {\n\
    \                        result = word;\n                        break;\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> unique = new ArrayList<String>();\n   \
    \     Collections.sort(words, (String s1, String s2) -> s1.length() - s2.length());\n\
    \        words.stream().map(String::toLowerCase).forEach(unique::add);\n     \
    \   int maxNum = 0;\n        for(String str : words) {\n            int count\
    \ = 0;\n            for(int i = 0; i<str.length(); i++) {\n                for(int\
    \ j = i+1; j <= str.length(); j++) {\n                    if(str.charAt(i) ==\
    \ str.charAt(j)) {\n                        count++;\n                    }\n\
    \                }\n            }\n            if(count > maxNum) {\n        \
    \        maxNum = count;\n            }\n        }\n        if(maxNum == 0)\n\
    \            return \"No word with max number of unique characters in it\";\n\
    \        int index = 0;\n        for(String str : words) {\n            int count\
    \ = 0;\n            for(int i = 0; i<str.length(); i++) {\n                for(int\
    \ j = i+1; j <= str.length(); j++) {\n                    if(str.charAt(i) ==\
    \ str.charAt(j)) {\n                        count++;\n                    }\n\
    \                }\n            }\n            if(count > maxNum && index != words.size()\
    \ - 1) {\n                maxNum = count;\n                index = words.size()\
    \ - 1;\n            }\n        }\n        return words.get(index);", "       \
    \ // Write your logic here\n        StringBuilder builder = new StringBuilder();\n\
    \        words.stream().map(a -> a).collect(Collectors.groupingBy(a -> a, Collectors.counting())).entrySet().stream().sorted((a,\
    \ b) -> b.getValue().compareTo(a.getValue())).map(e -> e.getKey()).forEach(s ->\
    \ builder.append(s) + \" \"));\n        return builder.toString().substring(0,\
    \ builder.toString().lastIndexOf(\" \")).trim();", "        ArrayList<Integer>\
    \ counts = new ArrayList<Integer>();\n        for(String word : words){\n    \
    \        counts.add(0,0);\n            for(char c : word.toCharArray()){\n   \
    \             counts.get(c).add(0,0);\n                counts.get(c).set(0,counts.get(c).get(0)\
    \ + (word.indexOf(c) == -1 ? 0 : 1));\n            }\n        }\n        int maxCount\
    \ = 0;\n        for(Integer i : counts){\n            int count = i.size();\n\
    \            if(count == maxCount) continue;\n            if(i.get(0).intValue()\
    \ >= maxCount){\n                maxCount = count;\n            }\n        }\n\
    \        int maxIndex = 0;\n        for(Integer i : counts){\n            if(i.get(0).intValue()\
    \ == maxCount){\n                maxIndex = i.size()-1;\n            }\n     \
    \   }\n        if(maxIndex == 0) return null;\n        ArrayList<String> word\
    \ = new ArrayList<String>();\n        for(int i = 0; i < maxIndex; i++){\n   \
    \         word.add(words.get(i));\n        }\n        return word.get(maxIndex);",
  "        int maxCount = 0;\n        Integer max = null;\n        for (String word\
    \ : words) {\n            int count = getUniqueCharacters(word);\n           \
    \ if (count > maxCount) {\n                maxCount = count;\n               \
    \ max = word;\n            }\n        }\n        return max;", "        ArrayList<Character>\
    \ uniques = new ArrayList<Character>();\n        Set<Character> set = new HashSet<Character>();\n\
    \        for (String s : words) {\n            for (char c : s.toCharArray())\
    \ {\n                if (!uniques.contains(c)) {\n                    uniques.add(c);\n\
    \                    set.add(c);\n                }\n            }\n        }\n\
    \        int maxCount = uniques.size();\n        String maxString = null;\n  \
    \      for (char c : set) {\n            if (maxCount <= uniques.size()) {\n \
    \               maxCount = uniques.size();\n                maxString = s;\n \
    \           }\n        }\n        return maxString;", "        int count = 1;\n\
    \        for (String word : words) {\n            int length = (word.length());\n\
    \            for (String word : words) {\n                if (word.equals(word))\
    \ {\n                    continue;\n                }\n                if (word.equals(word.substring(0,\
    \ length))) {\n                    count++;\n                }\n            }\n\
    \            if (count > 1) {\n                word = word.substring(0, length);\n\
    \                return word;\n            }\n        }\n        return words.get(0);\
    \ // default case", "        // Complete the code here\n        int maxNumber\
    \ = 0;\n        String maxWord = null;\n        for (String word : words) {\n\
    \            int counter = 0;\n            for (char c : word.toCharArray()) {\n\
    \                counter++;\n            }\n            if (counter > maxNumber)\
    \ {\n                maxNumber = counter;\n                maxWord = word;\n \
    \           }\n        }\n        return maxWord;", "        Map<String, Integer>\
    \ counter = new HashMap<>();\n        for (int i = 0; i < words.size(); i++) {\n\
    \            String word = words.get(i);\n            int count = counter.computeIfAbsent(word,\
    \ key -> 0) + 1;\n            if (count > counter.size()) {\n                counter\
    \ = counter.entrySet().stream().sorted(Map.Entry.comparingByValue(Comparator.reverseOrder())).collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (oldValue, newValue) -> oldValue, LinkedHashMap::new));\n\
    \            }\n        }\n        return counter.keySet().stream().sorted().findFirst().get().getKey();",
  "        Map<Character, Integer> charMap = new HashMap<>();\n        for (String\
    \ str : words) {\n            charMap.clear();\n            for (char c : str.toCharArray())\
    \ {\n                if (charMap.containsKey(c)) {\n                    charMap.put(c,\
    \ charMap.get(c) + 1);\n                } else {\n                    charMap.put(c,\
    \ 1);\n                }\n            }\n        }\n        Optional<Map.Entry<Character,\
    \ Integer>> maxEntry = charMap.entrySet().stream().max(Comparator.comparing(Map.Entry::getValue));\n\
    \        Optional<String> maxEntryStr = maxEntry.map(Map.Entry::getKey).map(String::valueOf).findFirst();\n\
    \        if (maxEntryStr.isPresent()) {\n            return maxEntryStr.get();\n\
    \        } else {\n            throw new IllegalArgumentException(\"No string\
    \ has max number of unique characters.\");\n        }", "        int[] count =\
    \ new int[26];\n\n        for (String w : words) {\n            for (int i = 0;\
    \ i < w.length(); i++) {\n                count[w.charAt(i) - 'a']++;\n      \
    \      }\n        }\n        String max = null;\n        for (int i = 0; i < 26;\
    \ i++) {\n            if (count[i] > count[max]) {\n                max = String.valueOf((char)(i\
    \ + 'a'));\n            }\n        }\n        return words.stream().filter((s)\
    \ -> s.toLowerCase().contains(max.toLowerCase())).findFirst().get();", "     \
    \   \n        int max = 0;\n        int count = 0;\n        \n        for(String\
    \ word: words) {\n            \n            int length = word.length();\n    \
    \        \n            if(count > max) {\n                max = count;\n     \
    \       }\n            \n            count += length;\n            \n        }\n\
    \        \n        if(max != 0) {\n            return words.get(words.size()-1);\n\
    \        }\n        \n        return null;", "        int max = 0;\n        String\
    \ maxString = \"\";\n        for (String word : words) {\n            int uniqueCharacters\
    \ = word.length();\n            if (uniqueCharacters > max) {\n              \
    \  max = uniqueCharacters;\n                maxString = word;\n            }\n\
    \        }\n        return maxString;", "        Comparator<String> comparator\
    \ = Comparator.comparing(str -> str.chars().distinct().count());\n        Optional<String>\
    \ res = words.stream().max(comparator);\n        System.out.println(res);\n  \
    \      return res.get();", "        // Your code here\n        List<String> array\
    \ = new ArrayList<>();\n        for(String word : words) {\n            array.add(word);\n\
    \        }\n        HashMap<String, Integer> countMap = new HashMap<>();\n   \
    \     for(int i = 0; i < array.size(); i++) {\n            String element = array.get(i);\n\
    \            int count = 0;\n            for(String word : words) {\n        \
    \        char elementChar = element.charAt(0);\n                char wordChar\
    \ = word.charAt(0);\n                if(elementChar == wordChar) {\n         \
    \           count++;\n                }\n            }\n            countMap.put(element,\
    \ count);\n        }\n        HashSet<String> keySet = countMap.keySet();\n  \
    \      Integer maxValue = keySet.size();\n        if(maxValue == 0) {\n      \
    \      return \"No word has maximum number of unique characters\";\n        }\n\
    \        for(String key : countMap.keySet()) {\n            Integer value = countMap.get(key);\n\
    \            if(value == maxValue) {\n                return key;\n          \
    \  }\n        }\n        return \"\";", "        if (words.size() <= 0) return\
    \ \"\";\n        ArrayList<String> temp = new ArrayList<>();\n        int max\
    \ = 0;\n        boolean found = false;\n        char maxChr = '\\0';\n       \
    \ for (int i = 0; i < words.size(); i++) {\n            temp.add(words.get(i));\n\
    \            int counter = 0;\n            boolean isFound = false;\n        \
    \    for (int j = 0; j < temp.size(); j++) {\n                char currentChar\
    \ = temp.get(j).charAt(0);\n                if (currentChar != maxChr) {\n   \
    \                 if (currentChar > maxChr) {\n                        isFound\
    \ = false;\n                        maxChr = currentChar;\n                  \
    \  } else if (currentChar == maxChr) {\n                        isFound = true;\n\
    \                        counter++;\n                    }\n                }\
    \ else {\n                    if (isFound) {\n                        if (counter\
    \ > max) {\n                            max = counter;\n                     \
    \       maxChr = temp.get(j).charAt(0);\n                            found = true;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        if (found) {\n            Collections.sort(temp);\n\
    \        }\n        return temp.get(0);", "        Map<String, Integer> map =\
    \ new HashMap<String, Integer>();\n        for (String word : words) {\n     \
    \       Integer count = map.get(word);\n            if (count == null) {\n   \
    \             map.put(word, 1);\n            } else {\n                map.put(word,\
    \ count + 1);\n            }\n        }\n        \n        String[] wordList =\
    \ words.toArray(new String[words.size()]);\n        Arrays.sort(wordList, Comparator.comparing(s\
    \ -> map.get(s)));\n        \n        return wordList[0];", "        Map<Character,\
    \ Integer> charCount = new HashMap<>();\n        words.forEach(str -> {\n    \
    \        for (char c : str.toCharArray()) {\n                if (charCount.containsKey(c))\
    \ {\n                    int value = charCount.get(c);\n                    value\
    \ += 1;\n                    charCount.put(c, value);\n                } else\
    \ {\n                    charCount.put(c, 1);\n                }\n           \
    \ }\n        });\n        Integer maxValue = charCount.values().stream().max(Integer::compare).get();\n\
    \        for (Map.Entry<Character, Integer> entry : charCount.entrySet()) {\n\
    \            if (maxValue.equals(entry.getValue()))\n                return words.get(words.size()\
    \ - 1 - words.size() % words.indexOf(entry.getKey()));\n        }\n        return\
    \ \"\";", "        Map<String, Integer> map = new HashMap<>();\n        words.stream().forEach(s\
    \ -> map.putIfAbsent(s, 0));\n        int max = Integer.MIN_VALUE;\n        for\
    \ (String s: map.keySet()) {\n            if (map.get(s) > max) {\n          \
    \      max = map.get(s);\n            }\n        }\n        String key = max !=\
    \ Integer.MIN_VALUE ? Collections.min(map.keySet()) : null;\n        return key;",
  "        int max = 0;\n        for (String word : words) {\n            for (char\
    \ ch : word.toCharArray()) {\n                if (++max > word.length()) {\n \
    \                   return word;\n                }\n            }\n        }\n\
    \        return null;", "        // Write the logic for findMax()\n        TreeMap<Character,\
    \ Integer> map = new TreeMap<>();\n        for (String word : words) {\n     \
    \       char[] chars = word.toCharArray();\n            int count = chars.length;\n\
    \            for (int i = 0; i < chars.length; i++) {\n                if (map.containsKey(chars[i]))\
    \ {\n                    map.put(chars[i], map.get(chars[i]) + count);\n     \
    \           } else {\n                    map.put(chars[i], count);\n        \
    \        }\n            }\n        }\n        int maxCount = 0;\n        String\
    \ maxWord = null;\n        for (Map.Entry<Character, Integer> entry : map.entrySet())\
    \ {\n            if (entry.getValue() > maxCount) {\n                maxCount\
    \ = entry.getValue();\n                maxWord = entry.getKey().toString();\n\
    \            }\n        }\n        return maxWord;", "        Map<String, Integer>\
    \ map = new HashMap<>();\n        List<String> unique = new ArrayList<>();\n \
    \       for (String word : words) {\n            map.put(word, map.getOrDefault(word,\
    \ 0) + 1);\n            unique.add(word);\n        }\n        Integer max = Collections.max(map.values());\
    \ // max occurs in map\n        if (max.equals(map.size())) {\n            return\
    \ words.get(0); // multiple strings have max occurs\n        }\n        Integer\
    \ index = Collections.binarySearch(unique, max); // returns index of max occurring\
    \ in unique\n        if (index < 0) {\n            return null;\n        }\n \
    \       return unique.get(index); // return one which comes first in lexicographical\
    \ order", '        return words.stream().reduce((first, second) -> second.length()
    - first.length()).distinct().findFirst().orElseThrow();', "        if (words.size()\
    \ == 0) return \"no words\";\n        String first = words.get(0); // First word\n\
    \        Map<String, Integer> freq = new HashMap<String, Integer>();\n       \
    \ for (String w : words) {\n            if (freq.containsKey(w)) {\n         \
    \       freq.put(w, freq.get(w) + 1);\n            } else {\n                freq.put(w,\
    \ 1);\n            }\n        }\n        Set<String> keys = freq.keySet();\n \
    \       Collections.sort(keys, new Comparator<String>() {\n            public\
    \ int compare(String w1, String w2) {\n                return freq.get(w1) - freq.get(w2);\n\
    \            }\n        });\n        String max = keys.get(0);\n        int maxCount\
    \ = freq.get(max);\n        for (int i = 1; i < keys.size(); i++) {\n        \
    \    int currCount = freq.get(keys.get(i));\n            if (currCount > maxCount)\
    \ {\n                max = keys.get(i);\n                maxCount = currCount;\n\
    \            }\n        }\n        if (maxCount == 0) return first;\n        return\
    \ first+\" \"+max;", "        int max = 1;\n        int maxIndex = -1;\n     \
    \   ArrayList<String> wordList = Arrays.asList(words);\n        wordList.sort(Comparator.comparingInt((String\
    \ s) -> s.size()));\n        String word = \"\";\n        for (int i = 0; i <\
    \ wordList.size(); i++) {\n            if (wordList.get(i).size() == max) {\n\
    \                word = wordList.get(i);\n                maxIndex = i;\n    \
    \        }\n        }\n        return word;", "        boolean found = false;\n\
    \        Collections.sort(words);\n        int index = 0;\n        for(String\
    \ word : words) {\n            int n = 0;\n            int index2 = 0;\n     \
    \       for(String word2 : words) {\n                if(!found && word.equals(word2))\
    \ {\n                    found = true;\n                }\n                else\
    \ if(found && word.compareTo(word2) < 0) {\n                    found = false;\n\
    \                }\n                else {\n                    if(word.compareTo(word2)\
    \ >= 0) {\n                        n++;\n                        index2 = index;\n\
    \                    }\n                }\n            }\n            index =\
    \ index2;\n            if(n > words.size()) {\n                return word;\n\
    \            }\n        }\n        return words.get(0);", '        return null;',
  "        // Write your code here\n        String max = null;\n        HashMap<Character,\
    \ Integer> map = new HashMap<Character, Integer>();\n        for(String word :\
    \ words){\n            for (int i = 0; i < word.length(); i++) {\n           \
    \     char c = word.charAt(i);\n                if (map.containsKey(c)) {\n  \
    \                  int count = map.get(c);\n                    count++;\n   \
    \                 map.put(c, count);\n                    if (count > map.get(max))\
    \ {\n                        max = c;\n                    }\n               \
    \ } else {\n                    map.put(c, 1);\n                }\n          \
    \  }\n        }\n        System.out.printf(\"%s\", max);\n        return max;",
  "        List<String> wordsAndNumbers = words.stream().collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));\n        int maxNumber = wordsAndNumbers.stream().max((String\
    \ t1, int t1) -> t1).get();\n        List<String> maxStrings = wordsAndNumbers.entrySet().stream().filter(e\
    \ -> e.getValue() == maxNumber).map(Map.Entry::getKey).collect(Collectors.toList());\n\
    \        Collections.sort(maxStrings);\n        return maxStrings.get(0);", " \
    \       Set<String> uniqueLetters = new HashSet<>();\n        Iterator<String>\
    \ it = words.iterator();\n        while (it.hasNext()) {\n            String word\
    \ = it.next();\n            for (int i = 0; i < word.length(); i++) {\n      \
    \          uniqueLetters.add(word.charAt(i));\n            }\n        }\n    \
    \    int max = 0;\n        String best = null;\n        for (String letter : uniqueLetters)\
    \ {\n            int count = words.size();\n            for (String word : words)\
    \ {\n                for (int i = 0; i < word.length(); i++) {\n             \
    \       if(word.charAt(i) == letter) {\n                        count--;\n   \
    \                 }\n                }\n            }\n            if (count >\
    \ max) {\n                max = count;\n                best = letter;\n     \
    \       }\n        }\n        return best;", "        Set<String> uniqueCharacters\
    \ = new HashSet<>();\n        for (String str : words) {\n            for (int\
    \ i = 0; i < str.length(); i++) {\n                uniqueCharacters.add(str.charAt(i));\n\
    \            }\n        }\n        int max = 1;\n        String maxChar = \"\"\
    ;\n        for (String str : words) {\n            if (uniqueCharacters.size()\
    \ > max) {\n                maxChar = str;\n                max = uniqueCharacters.size();\n\
    \            }\n        }\n        return maxChar;", "        int[] count = new\
    \ int[256];\n        for (int i = 0; i < words.size(); i++) {\n            for\
    \ (int j = i; j < words.size(); j++) {\n                if (words.get(i).compareTo(words.get(j))\
    \ > 0) {\n                    String[] temp = words.get(i).split(\"\");\n    \
    \                temp = words.get(j).split(\"\");\n                    for (int\
    \ k = 0; k < temp.length; k++) {\n                        count[temp[k]] += 1;\n\
    \                    }\n                }\n            }\n        }\n\n      \
    \  int maxCharCount = 0;\n        String maxChars = \"\";\n        for (int i\
    \ = 0; i < 256; i++) {\n            if (count[i] > maxCharCount) {\n         \
    \       maxCharCount = count[i];\n                maxChars = Integer.toString(i);\n\
    \            }\n        }\n\n        Arrays.sort(words);\n        for (int i =\
    \ 0; i < words.size(); i++) {\n            if (words.get(i).compareTo(maxChars)\
    \ < 0) {\n                words.set(i, maxChars);\n            }\n        }\n\n\
    \        return words.get(0);", "        int max = 0;\n        String result =\
    \ \"\";\n        for (String str : words) {\n            for (int i = 0; i < str.length();\
    \ i++) {\n                char ch = str.charAt(i);\n                int count\
    \ = 0;\n                for (String word : words) {\n                    if (word.equals(str))\
    \ {\n                        count += 1;\n                    }\n            \
    \    }\n                if (count > max) {\n                    max = count;\n\
    \                    result = str;\n                }\n            }\n       \
    \ }\n        return result;", "        ArrayList<String> uniqueChars = new ArrayList<>();\n\
    \        for (String word : words) {\n            uniqueChars.addAll(Arrays.asList(word));\n\
    \        }\n        int maxCount = 0;\n        String maxWord = \"\";\n      \
    \  for (String word : words) {\n            int count = 0;\n            for (char\
    \ c : word.toCharArray()) {\n                if (uniqueChars.contains(String.valueOf(c)))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;", "  \
    \      String result = \"\";\n        for (String string : words) {\n        \
    \    int uniqueChar = string.chars().distinct().count();\n            if (uniqueChar\
    \ > result.length()) {\n                result = string;\n            } else if\
    \ (uniqueChar == result.length()) {\n                int compare = string.compareToIgnoreCase(result);\n\
    \                if (compare > 0) {\n                    result = string;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ // Write your code here.\n        \n        \n        int max = 0;\n       \
    \ \n        for(String s: words){\n            \n            String temp = \"\"\
    ;\n            \n            int counter = 0;\n            \n            for(char\
    \ c: s.toCharArray()){\n                \n                if(s.contains(String.valueOf(c))\
    \ && !s.contains(temp)){\n                    temp += c;\n                   \
    \ counter++;\n                }\n                \n            }\n           \
    \ \n            \n            if(counter > max){\n                max = counter;\n\
    \            }\n            \n        }\n        \n        \n        \n      \
    \  return words.get(0);\n        ", "        int max = 0;\n        int maxIndex\
    \ = 0;\n        int count[] = new int[256];\n        Set<Character> chars = new\
    \ HashSet<>();\n        for (String word : words) {\n            for (int i =\
    \ 0; i < word.length(); ++i) {\n                if (chars.contains(word.charAt(i)))\
    \ {\n                    int index = word.charAt(i) - 'a';\n                 \
    \   if (count[index] > 0) {\n                        count[index]--;\n       \
    \             }\n                    if (count[index] == 0) {\n              \
    \          count[index] = 1;\n                    } else {\n                 \
    \       count[index]++;\n                    }\n                } else {\n   \
    \                 chars.add(word.charAt(i));\n                    count[word.charAt(i)\
    \ - 'a']++;\n                }\n            }\n        }\n        for (char ch\
    \ : chars) {\n            if (count[ch - 'a'] > max) {\n                max =\
    \ count[ch - 'a'];\n                maxIndex = ch - 'a';\n            }\n    \
    \    }\n        return words.get(maxIndex);", "        int maxUnique = 0;\n  \
    \      String max = null;\n        for (String w : words) {\n            if (maxUnique\
    \ < w.length())\n                maxUnique = w.length();\n            if (maxUnique\
    \ == w.length() && w.compareTo(max) < 0)\n                max = w;\n        }\n\
    \        return max;", "        Map<String, Integer> wordMap = new HashMap<>();\n\
    \        for (String word : words) {\n            Integer value = wordMap.get(word);\n\
    \            if (value == null || value.equals(0)) {\n                wordMap.put(word,\
    \ 1);\n            } else {\n                wordMap.put(word, wordMap.get(word)\
    \ + 1);\n            }\n        }\n        return wordMap.entrySet().stream().max(Map.Entry.comparingByValue(Comparator.reverseOrder())).get().getKey();",
  "        int max = 0;\n        for(int i = 0; i < words.size(); i++) {\n       \
    \     int count = 1;\n            for(int j = i; j < words.size(); j++) {\n  \
    \              if (words.get(i).compareTo(words.get(j)) > 0) {\n             \
    \       count++;\n                }\n            }\n            if (count > max)\
    \ {\n                max = count;\n            }\n        }\n        return words.get(0);",
  "        Arrays.sort(words);\n        int max = words.stream().filter(word -> word.chars().distinct().count()\
    \ == word.length()).count();\n        if (max == words.size()) {\n           \
    \ return words.get(0);\n        }\n        Arrays.sort(words, Comparator.reverseOrder());\n\
    \        return words.get(0);", "        // Initialize maxCharacter as a character\
    \ variable of class String.\n        String maxCharacter = \"\";\n\n        //\
    \ Initialize uniqueCharacters as a hash set for characters of class String.\n\
    \        HashSet<Character> uniqueCharacters = new HashSet<>();\n\n        //\
    \ Initialize maxUniqueCharacters as the count of unique characters in class String.\n\
    \        int maxUniqueCharacters = 0;\n\n        // Iterate through each word.\n\
    \        for (String word : words) {\n            // Initialize wordCount as a\
    \ character variable of class String.\n            String wordCount = \"0\";\n\
    \n            // Iterate through each character of the word.\n            for\
    \ (char c : word.toCharArray()) {\n\n                // If the character is already\
    \ in the hash set, then increment the count.\n                if (uniqueCharacters.contains(c))\
    \ {\n                    wordCount = wordCount + c;\n                }\n\n   \
    \             // Add the character to the hash set and increment the count.\n\
    \                uniqueCharacters.add(c);\n                wordCount = wordCount\
    \ + c;\n            }\n\n            // If the number of unique characters increases\
    \ in class String\n            // then the word has the maximum number of unique\
    \ characters.\n            if (wordCount.length() > maxUniqueCharacters) {\n \
    \               maxUniqueCharacters = wordCount.length();\n                maxCharacter\
    \ = word;\n            }\n        }\n\n        // Return maxCharacter.\n     \
    \   return maxCharacter;", "        int max = 0;\n        int count = 0;\n   \
    \     for(String w : words){\n            if (w.length() > count){\n         \
    \       max = count;\n                count = 0;\n            }\n            count\
    \ += w.length();\n        }\n        if (count > max){\n            max = count;\n\
    \        }\n        return words.stream().filter(w -> w.length() == max).sorted().findFirst().get();",
  "        long res = 0;\n        long count = 0;\n        for (String word : words)\
    \ {\n            count = 0;\n            for (int i = 0; i < word.length(); i++)\
    \ {\n                char c = word.charAt(i);\n                count++;\n    \
    \        }\n            if (count > res) {\n                res = count;\n   \
    \         }\n        }\n        if (res == 0) {\n            return \"\";\n  \
    \      }\n        return words.get(0);", "        int uniqueCharacters = 0;\n\
    \        \n        words.add(\"name\");\n        words.add(\"of\");\n        words.add(\"\
    string\");\n        \n        \n        // Create a map of unique characters and\
    \ the number of times they appear\n        Map<Character, Integer> charFrequency\
    \ = new HashMap<>();\n        for (String word : words) {\n            for (char\
    \ c : word.toCharArray()) {\n                if (charFrequency.containsKey(c))\
    \ {\n                    charFrequency.put(c, charFrequency.get(c) + 1);\n   \
    \             } else {\n                    charFrequency.put(c, 1);\n       \
    \         }\n            }\n        }\n        \n        // Find the characters\
    \ that have the maximum number appearances\n        Iterator<Map.Entry<Character,\
    \ Integer>> iterator = charFrequency.entrySet().iterator();\n        while (iterator.hasNext())\
    \ {\n            Map.Entry<Character, Integer> entry = iterator.next();\n    \
    \        if (entry.getValue() > uniqueCharacters) {\n                uniqueCharacters\
    \ = entry.getValue();\n            }\n        }\n        \n        // Return the\
    \ character with the maximum number of appearances\n        Iterator<Map.Entry<Character,\
    \ Integer>> iterator = charFrequency.entrySet().iterator();\n        while (iterator.hasNext())\
    \ {\n            Map.Entry<Character, Integer> entry = iterator.next();\n    \
    \        if (entry.getValue().equals(uniqueCharacters)) {\n                return\
    \ entry.getKey();\n            }\n        }\n        return \"Error\";", "   \
    \     // write your code\n        // write your code\n        // write your code\n\
    \        // write your code\n        // write your code\n        // write your\
    \ code\n        // write your code\n        // write your code\n        // write\
    \ your code\n        return \"\";", "        \n        //return new String(words.get(0).chars().sorted().distinct().limit(1).collect(Collectors.toList()));\n\
    \n        String result = \"No string\";\n        int maxCount = 0;\n        for(int\
    \ i = 0; i < words.size(); i++) {\n            \n            //List<Character>\
    \ words = Arrays.asList(words.get(i).chars().sorted().distinct().limit(1).collect(Collectors.toList()));\n\
    \            String temp = new String(words.get(i).chars().sorted().distinct().limit(1).collect(Collectors.toList()));\n\
    \            int tempCount = 0;\n            for(int j = 0; j < words.size();\
    \ j++) {\n                //System.out.println(words.get(j));\n              \
    \  if(temp.equals(words.get(j))) {\n                    tempCount++;\n       \
    \         }\n                \n            }\n            if(tempCount > maxCount)\
    \ {\n                maxCount = tempCount;\n                result = temp;\n \
    \           }\n        }\n        \n        return result;", "        Set<String>\
    \ seen = new HashSet<>();\n        \n        List<Integer> counts = words.stream().map(word\
    \ -> {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (seen.contains(c)) {\n                    count++;\n \
    \               }\n                else {\n                    seen.add(word);\n\
    \                }\n            }\n            return count;\n        }).sorted(Collections.reverseOrder()).collect(Collectors.toList());\n\
    \        \n        if (counts.size() > 0) {\n            return words.get(counts.indexOf(Collections.max(counts)));\n\
    \        }\n        return null;", "        // Your code here.\n        int max\
    \ = 0;\n        for(String word : words){\n            char[] chars = word.toCharArray();\n\
    \            int count = 0;\n            for(char c : chars){\n              \
    \  if(count++ > max){\n                    max = count;\n                    String\
    \ best = word;\n                }\n            }\n        }\n        return words.get(0);",
  "        Map<String, Integer> chars = new HashMap<String, Integer>();\n        \n\
    \        for (String word : words) {\n            for (char c : word.toCharArray())\
    \ {\n                Integer numChars = chars.get(c);\n                if (numChars\
    \ == null) {\n                    numChars = 0;\n                }\n         \
    \       numChars++;\n                chars.put(c, numChars);\n            }\n\
    \        }\n        int maxKey = 0;\n        String maxValue = \"\";\n       \
    \ for (Integer i : chars.values()) {\n            if (i.compareTo(maxKey) > 0)\
    \ {\n                maxKey = i;\n                maxValue = chars.keySet().stream().filter(x->x.equals(maxKey)).findFirst().get();\n\
    \            }\n        }\n        return maxValue;", "        Map<String, Integer>\
    \ counts = new HashMap<>();\n        for (String word : words) {\n           \
    \ int cnt = counts.getOrDefault(word, 0);\n            counts.put(word, cnt +\
    \ 1);\n        }\n        \n        int maxCount = -1;\n        String maxWord\
    \ = null;\n        Set<String> keys = new HashSet<>(counts.keySet());\n      \
    \  for (String key : keys) {\n            int cnt = counts.get(key);\n       \
    \     if (cnt > maxCount) {\n                maxCount = cnt;\n               \
    \ maxWord = key;\n            }\n        }\n        return maxWord;", "      \
    \  int maxCount = 0;\n        String maxWord = \"\";\n        for (int i = 0;\
    \ i < words.size(); i++) {\n            String currentWord = words.get(i);\n \
    \           if (currentWord.length() > maxCount) {\n                maxCount =\
    \ currentWord.length();\n                maxWord = currentWord;\n            }\n\
    \        }\n        return maxWord;", "        List<String> unique = new ArrayList<>();\n\
    \        int max = 0;\n        for (int i = 0; i < words.size(); i++) {\n    \
    \        String word = words.get(i);\n            int count = 0;\n           \
    \ for (int j = i; j < words.size(); j++) {\n                String temp = words.get(j);\n\
    \                for (int k = 0; k < word.length(); k++) {\n                 \
    \   char c = word.charAt(k);\n                    if (unique.contains(new String(c\
    \ + temp))) {\n                        count++;\n                    }\n     \
    \           }\n                if (count > max) {\n                    max = count;\n\
    \                }\n            }\n            unique.add(word);\n        }\n\
    \        return unique.get(0);", "        \n        \n        \n        \n   \
    \     String maxValue = \"\";\n        Set<Character> characters = new HashSet<>();\n\
    \        \n        \n        int counter = 0;\n        int maxCharCount = 0;\n\
    \        \n        \n        \n        for(String word : words) {\n          \
    \  \n            characters = new HashSet<>();\n            \n            for(char\
    \ c : word.toCharArray()) {\n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n", "        ArrayList<Integer>\
    \ count = new ArrayList<Integer>(words.size());\n        for (String word: words)\
    \ {\n            count.add(countChars(word));\n        }\n        int maxCount\
    \ = Integer.MIN_VALUE;\n        int maxIndex = -1;\n        for (int i = 0; i\
    \ < words.size(); i++) {\n            if (count.get(i) == maxCount) {\n      \
    \          maxIndex = i;\n            }\n            if (count.get(i) > maxCount)\
    \ {\n                maxCount = count.get(i);\n            }\n        }\n    \
    \    Collections.reverse(words);\n        return words.get(maxIndex);", "    \
    \    String[] countsArray = words.stream()\n                .map(word -> word.toCharArray())\n\
    \                .toArray(String[]::new);\n        Map<Integer, Integer> counts\
    \ = new HashMap<>();\n        for (String word : countsArray) {\n            for\
    \ (int i = 0; i < word.length(); i++) {\n                Integer count = counts.get(word.charAt(i));\n\
    \                if (count == null)\n                    counts.put(word.charAt(i),\
    \ 1);\n                else\n                    counts.put(word.charAt(i), (count\
    \ + 1));\n            }\n        }\n        Arrays.sort(countsArray);\n      \
    \  int maxCount = 0;\n        String maxWord = null;\n        for (String word\
    \ : countsArray) {\n            int count = counts.get(word.charAt(0));\n    \
    \        if (count > maxCount) {\n                maxCount = count;\n        \
    \        maxWord = word;\n            }\n        }\n        return maxWord;",
  "        Map<Character, Integer> m = new HashMap<Character, Integer>();\n      \
    \  for (String w : words) {\n            for (int i=0; i<w.length(); i++) {\n\
    \                char c = w.charAt(i);\n                m.put(c, m.getOrDefault(c,\
    \ 0) + 1);\n            }\n        }\n        for (Map.Entry<Character, Integer>\
    \ me : m.entrySet()) {\n            if (me.getValue().equals(m.size())) {\n  \
    \              return me.getKey();\n            }\n        }\n        return words.get(0);",
  "        Map<String, Integer> countMap = new HashMap<>();\n        for(String word\
    \ : words) {\n            Integer count = countMap.get(word);\n            if(count\
    \ == null) {\n                count = 0;\n            }\n            countMap.put(word,\
    \ count + 1);\n        }\n        for(Map.Entry<String, Integer> entry : countMap.entrySet())\
    \ {\n            if(entry.getValue().equals(words.size())) {\n               \
    \ return entry.getKey();\n            }\n        }\n        return \"\";", " \
    \       // Your code here\n        Map<String, Integer> charCount = new HashMap<>();\n\
    \        for(String word : words) {\n            charCount.put(word, 0);\n   \
    \     }\n\n        for(String word : words) {\n            charCount.merge(word,\
    \ 1, 1, (count1, count2) -> count1 + count2);\n        }\n        int maxCount\
    \ = 0;\n        String maxWord = null;\n        for (String word : words) {\n\
    \            int charCount = charCount.get(word);\n            int uniqueCharacters\
    \ = word.length() - charCount;\n            if (uniqueCharacters > maxCount) {\n\
    \                maxCount = uniqueCharacters;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;", "        if (words.size()\
    \ == 0) return \"\";\n        Map<Character, Integer> charCountMap = new TreeMap<>();\n\
    \        for (String word : words) {\n            for (char c : word.toCharArray())\
    \ {\n                Integer count = charCountMap.get(c);\n                if\
    \ (count == null) {\n                    charCountMap.put(c, 1);\n           \
    \     } else {\n                    charCountMap.put(c, count + 1);\n        \
    \        }\n            }\n        }\n        Integer max = Integer.MIN_VALUE;\n\
    \        for (Integer count : charCountMap.values()) {\n            if (count\
    \ > max) {\n                max = count;\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (String word : words) {\n           \
    \ boolean match = false;\n            for (char c : word.toCharArray()) {\n  \
    \              if (charCountMap.get(c) == max) {\n                    match =\
    \ true;\n                    break;\n                }\n            }\n      \
    \      if (match) {\n                sb.append(word);\n            }\n       \
    \ }\n        return sb.toString();", "        String max = words.get(0);\n   \
    \     int maxCount = 0;\n        for (String word : words) {\n            int\
    \ count = getUniqueCharacters(word).length();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                max = word;\n        \
    \    }\n        }\n        return max;", "        TreeMap<Integer, String> wordsByCount\
    \ = new TreeMap<>();\n        words.forEach(word -> {\n            Integer count\
    \ = wordsByCount.getOrDefault(word.length(), 0);\n            wordsByCount.put(count,\
    \ word);\n        });\n        return wordsByCount.lastEntry().getValue();", " \
    \       HashSet<Character> chars = new HashSet<Character>();\n        HashSet<Character>\
    \ maxSet = new HashSet<Character>();\n        for (String str : words) {\n   \
    \         for (char c : str.toCharArray()) {\n                if (chars.contains(c))\
    \ {\n                    chars.replace(c);\n                    maxSet.add(c);\n\
    \                } else {\n                    chars.add(c);\n               \
    \ }\n            }\n        }\n        if (maxSet.size() == chars.size()) {\n\
    \            return words.get(0);\n        }\n        return findMax(words).compareTo(findMax(words))\
    \ > 0 ? words.get(0) : words.get(1);", "        // Complete the code below\n\n\
    \        Arrays.sort(words);\n        \n        int maxCount = 0;\n        String\
    \ maxWord = \"\";\n\n        for (String word : words){\n            int count\
    \ = 0;\n            for(char letter : word.toCharArray()) {\n                if(Character.isLetter(letter)){\n\
    \                    count++;\n                }\n            }\n            \n\
    \            if(count > maxCount) {\n                maxCount = count;\n     \
    \           maxWord = word;\n            }\n        }\n        \n        return\
    \ maxWord;", "        int max = words.stream()\n                .map(s -> s.chars().distinct().count())\n\
    \                .max(Comparator.reverseOrder()).orElse(0);\n        ArrayList<String>\
    \ res = words.stream()\n                .filter(s -> s.chars().distinct().count()\
    \ == max)\n                .collect(toList());\n        int firstMax = words.stream()\n\
    \                .map(s -> s.chars().distinct().count())\n                .filter(s\
    \ -> s.chars().distinct().count() == max)\n                .min(Comparator.reverseOrder()).orElse(0);\n\
    \        return res.size() > firstMax ? res.get(firstMax) : null;", "        //\
    \ Initialize maximum and count to zero\n        int max = 0;\n        int count\
    \ = 0;\n        // Iterate over the words in words\n        for (String s : words)\
    \ {\n            // Increment count if s is unique\n            for (int i = 0;\
    \ i < s.length(); i++) {\n                if (s.charAt(i) == s.charAt(i)) {\n\
    \                    count++;\n                }\n            }\n            //\
    \ Update maximum if count is greater\n            if (count > max) {\n       \
    \         max = count;\n            }\n            // Initialize count to zero\n\
    \            count = 0;\n        }\n        // Return the string with the maximum\
    \ number of unique characters\n        if (count > max) {\n            return\
    \ words.get(0);\n        } else {\n            return words.get(1);\n        }",
  "        String[] strings = words.toArray(new String[words.size()]);\n        int[]\
    \ lengths = strings.stream().map(s -> s.length()).sorted().distinct().toArray();\n\
    \        if (strings.length > 1) {\n            return String.valueOf(strings[Arrays.asList(lengths).lastIndexOf(0)]);\n\
    \        } else {\n            return words.get(0); // or something else to indicate\
    \ no max could be found\n        }", "        int max = 0;\n        String max\
    \ = words.get(0);\n        for(String word:words){\n            int unique = 0;\n\
    \            for(int i=0;i<word.length();i++){\n                unique+=word.charAt(i);\n\
    \            }\n            if(unique>max)\n                max=unique;\n    \
    \    }\n        for(int i=0;i<words.size();i++){\n            if(words.get(i).charAt(0)>max){\n\
    \                max=words.get(i).charAt(0);\n            }\n        }\n     \
    \   return max;", "        // Write your code here\n        List<String> sortedList\
    \ = words.stream().sorted((s1, s2) -> s2.length() - s1.length()).collect(Collectors.toList());\n\
    \        return sortedList.get(0);", "        \n        HashMap<Character, Integer>\
    \ charCount = new HashMap<Character, Integer>();\n\n        for(String word :\
    \ words) {\n            for(char c : word.toCharArray()) {\n                charCount.put(c,\
    \ charCount.get(c) == null ? 1 : charCount.get(c) + 1);\n            }\n     \
    \   }\n        \n        Set<Map.Entry<Character, Integer>> sortedChars = charCount.entrySet().stream().sorted((e1,\
    \ e2) -> e1.getValue().compareTo(e2.getValue())).collect(Collectors.toSet());\n\
    \n        String highest = \"none\";\n        \n        for (Map.Entry<Character,\
    \ Integer> e : sortedChars) {\n            if (e.getValue().equals(sortedChars.get(0).getValue()))\
    \ {\n                highest = e.getKey();\n            }\n        }\n       \
    \ \n        return highest;", "        int maxCharacterCount = 0;\n        String\
    \ maxWord = \"\";\n        for (String word: words) {\n            int wordCharacterCount\
    \ = word.length();\n            if (wordCharacterCount > maxCharacterCount) {\n\
    \                maxCharacterCount = wordCharacterCount;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;", '        return
    words.stream().map(x -> new StringTokenizer(x, ",").countTokens()).max(Comparator.comparingLong(Integer::longValue)).map(x
    -> x.toString()).orElse(null);', "        // Add your logic here\n        // Find\
    \ count of unique characters\n        int countOfUniqueCharacters = Collections.frequency(words,\
    \ \"a\");\n        // If count of unique characters is less than word length\n\
    \        if(countOfUniqueCharacters < words.size()) {\n            // Return the\
    \ word\n            return words.get(words.size() - 1 - countOfUniqueCharacters);\n\
    \        }\n        // Return null if the count of unique characters equals the\
    \ word length\n        return null;", "        HashMap<Integer, String> count\
    \ = new HashMap<Integer, String>();\n\n        for (String str: words) {\n   \
    \         int len = str.length();\n\n            for (int i = 0; i < len; i++)\
    \ {\n                int charIndex = str.charAt(i) - 'a';\n\n                if\
    \ (!count.containsKey(charIndex)) {\n                    count.put(charIndex,\
    \ str);\n                }\n            }\n        }\n\n        int maxCount =\
    \ -1;\n\n        for (Integer i : count.keySet()) {\n            if (count.get(i).length()\
    \ > maxCount) {\n                maxCount = count.get(i).length();\n         \
    \   }\n        }\n\n        ArrayList<String> strArr = new ArrayList<String>();\n\
    \        for (Integer i : count.keySet()) {\n            if (count.get(i).length()\
    \ == maxCount) {\n                strArr.add(count.get(i));\n            }\n \
    \       }\n\n        if (strArr.size() > 1) {\n            Collections.sort(strArr);\n\
    \            return strArr.get(0);\n        }\n        return strArr.get(0);",
  "        if (words.size() < 1) return \"\";\n        Map<String, Integer> map =\
    \ new HashMap<>();\n        int max = 0;\n        String curr = null;\n      \
    \  for (String word : words) {\n            for (int i = 0; i < word.length();\
    \ ++i) {\n                char chr = word.charAt(i);\n                if (!map.containsKey(chr))\
    \ {\n                    map.put(chr, 1);\n                } else {\n        \
    \            int count = map.get(chr);\n                    map.put(chr, count\
    \ + 1);\n                    if (count > max) {\n                        max =\
    \ count;\n                        curr = word;\n                    }\n      \
    \          }\n            }\n        }\n        return curr;", "        int maxCnt\
    \ = 0, maxCntIndex = 0;\n        String maxWord = \"\";\n        for (String word\
    \ : words) {\n            if (word.length() > maxCnt) {\n                maxCnt\
    \ = word.length();\n                maxCntIndex = i;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;", "        // O(M)\
    \ time | O(1) space\n        int maxCount = 0;\n        String longestWord = \"\
    \";\n        for(int i = 0; i < words.size(); i++) {\n            int currentCount\
    \ = words.get(i).length();\n            if(currentCount > maxCount) {\n      \
    \          maxCount = currentCount;\n                longestWord = words.get(i);\n\
    \            }\n        }\n        return longestWord;", "        TreeMap<String,\
    \ Integer> tm = new TreeMap<>();\n        for (String word : words) {\n      \
    \      if (tm.containsKey(word)) {\n                int count = getCount(tm, word);\n\
    \                if (count > tm.get(word)) {\n                    tm.put(word,\
    \ count);\n                }\n            } else {\n                Integer count\
    \ = getCount(tm, word);\n                if (count == null) {\n              \
    \      tm.put(word, 1);\n                } else {\n                    tm.put(word,\
    \ count + 1);\n                }\n            }\n        }\n        Integer value\
    \ = -1;\n        if (tm.containsKey(\"\")) {\n            value = tm.get(\"\"\
    );\n            tm.remove(\"\");\n        }\n        return getWord(tm.keySet().stream().max(Comparator.naturalOrder()).orElse(null));",
  "        final int maxSize = words.size();\n        int maxCount = 0;\n        String\
    \ maxWord = null;\n        for (String word : words) {\n            int count\
    \ = word.length();\n            if (maxCount < count) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  if (maxCount == maxSize) {\n            return maxWord;\n        }\n      \
    \  int count = 0;\n        for(String word : words) {\n            count = word.length();\n\
    \            if (maxCount > count) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;",
  "        HashMap<Character, Integer> map = new HashMap<>();\n        for (String\
    \ word: words) {\n            for(char c:word.toCharArray()){\n              \
    \  if(c<97 || c>122) continue;\n                if(map.get(c)==null) map.put(c,\
    \ 1);\n                else map.put(c, map.get(c)+1);\n            }\n       \
    \ }\n        Comparator<Integer> c = Comparator.comparingInt(Integer::intValue);\n\
    \        Optional<Integer> maxValue = map.entrySet().stream().filter(e->e.getValue().equals(map.size()))\n\
    \                .max(c).map(Map.Entry::getKey);\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (String word: words) {\n            for (char\
    \ c:word.toCharArray()) {\n                if(c<97 || c>122) continue;\n     \
    \           if(map.get(c)!=null && map.get(c)>maxValue.get()) {\n            \
    \        sb.append(c);\n                    break;\n                }\n      \
    \      }\n        }\n        return sb.toString();", "        \n        return\
    \ null;", "        char[] alphabet = \"abcdefghijklmnopqrstuvwxyz\".toCharArray();\n\
    \        Map<Integer, List<String>> map = new HashMap<>();\n        for (String\
    \ word : words) {\n            int count = 0;\n            for (char c : word.toCharArray())\
    \ {\n                Integer count = map.getOrDefault(count, new ArrayList<>()).contains(c)\
    \ ? map.get(count).size() : 0;\n                map.put(count + 1, map.getOrDefault(count,\
    \ new ArrayList<>()).add(c));\n            }\n        }\n        return map.keySet().stream().max(Comparator.comparing(Collections::size)).orElse(\"\
    No unique characters\").stream().findFirst().orElse(null);", "        return words.stream()\n\
    \                .map(s -> {\n                    int counts = s.chars().mapToObj(i\
    \ -> (char) i).distinct().count();\n                    if (counts > words.size())\
    \ {\n                        return s;\n                    }\n              \
    \      else {\n                        String first = String.valueOf(counts);\n\
    \                        return s.substring(0,s.indexOf(first));\n           \
    \         }\n                })\n                .min(Comparator.comparingInt(String::length))\n\
    \                .orElse(null);", "        /*\n            This solution works\
    \ with sorted lists - it loops through the list once\n            and keeps track\
    \ of the current maximum encountered\n        */\n        int currentMax = 0;\n\
    \        int currentWordLength = 0;\n        int currentWordIndex = 0;\n     \
    \   String currentWord = \"\";\n        for(String word : words) {\n         \
    \   currentWord = word;\n            currentWordLength = currentWord.length();\n\
    \            currentMax = 1;\n            currentWordIndex = words.size() - 1;\n\
    \            for(String word2 : (ArrayList<String>) words) {\n               \
    \ int compare = currentWord.length() - word2.length();\n                if(compare\
    \ > 0 && currentWord.indexOf(word2) != -1) {\n                    currentMax++;\n\
    \                }\n            }\n            if(currentMax == 1) {\n       \
    \         return word;\n            }\n            if(currentMax == currentWordLength)\
    \ {\n                if(currentWordIndex > 0) {\n                    return currentWord;\n\
    \                } else {\n                    return \"\";\n                }\n\
    \            }\n            currentMax = 0;\n            currentWordLength = 0;\n\
    \            currentWordIndex = 0;\n            currentWord = \"\";\n        }\n\
    \        return \"\";", "        if (words.size() > 0)\n            return findMax(words.get(0),\
    \ words);\n        return \"\";", "        // Your code here\n        int max=0;\n\
    \        String maxString=null;\n        for(int i=0;i<words.size();i++) {\n \
    \           if(words.size()>0) {\n                String word=words.get(i);\n\
    \                int count=0;\n                for(int j=0;j<word.length();j++)\
    \ {\n                    count=0;\n                    for(int k=0;k<word.length();k++)\
    \ {\n                        if(word.charAt(k)==word.charAt(j)) {\n          \
    \                  count++;\n                        }\n                    }\n\
    \                    if (count > max) {\n                        max=count;\n\
    \                        maxString=word;\n                    }\n            \
    \    }\n            }\n        }\n        return maxString;", "        Map<String,\
    \ Integer> wordCounts = new HashMap<>();\n        for(String word: words) {\n\
    \            int characterCount = word.length();\n            wordCounts.put(word,\
    \ characterCount);\n        }\n        Set<Map.Entry<String, Integer>> entries\
    \ = wordCounts.entrySet();\n        Integer maxCount = Collections.max(entries);\n\
    \        List<Map.Entry<String, Integer>> maxEntries = new ArrayList<>();\n  \
    \      for(Map.Entry<String, Integer> entry : entries) {\n            if(entry.getValue()\
    \ == maxCount) {\n                maxEntries.add(entry);\n            }\n    \
    \    }\n        if(maxEntries.isEmpty()) {\n            return null;\n       \
    \ }\n        Integer maxValue = Collections.max(maxEntries);\n        Map.Entry<String,\
    \ Integer> maxEntry = maxEntries.get(0);\n        if(maxValue.getValue() == maxEntry.getValue())\
    \ {\n            return maxEntry.getKey();\n        }\n        Set<Map.Entry<String,\
    \ Integer>> lexMaxEntries = maxEntries.stream().sorted((o1, o2) -> {\n       \
    \     if(o1.getValue() < o2.getValue()) {\n                return -1;\n      \
    \      } else if(o1.getValue() > o2.getValue()) {\n                return 1;\n\
    \            } else {\n                return 0;\n            }\n        }).collect(Collectors.toSet());\n\
    \        if(lexMaxEntries.size() == 1) {\n            return lexMaxEntries.iterator().next().getKey();\n\
    \        }\n        return lexMaxEntries.iterator().next().getKey() + findMax(lexMaxEntries);",
  "        int maxCnt = Integer.MIN_VALUE;\n        String maxWord = null;\n     \
    \   for(String word : words) {\n            int cnt = countUniqueCharacters(word);\n\
    \            if(cnt > maxCnt) {\n                maxCnt = cnt;\n             \
    \   maxWord = word;\n            }\n        }\n        return maxWord;", '        return
    words.stream().map(s -> s.chars().mapToObj(c -> (char) c).distinct().count() ==
    s.chars().mapToObj(c -> (char) c).distinct().count() ? s : findMax(words.stream().filter(s
    -> !s.equals(s)).collect(Collectors.toList()));', "        // Complete this function\n\
    \        List<String> words = null;\n        int max = 0;\n        Collections.sort(words);\n\
    \        Collections.sort(words);\n        if (words.equals(words)) {\n      \
    \      int wordCount = words.size();\n            return words.get(wordCount -\
    \ 1);\n        }\n        return words.get(max);", "        ArrayList<String>\
    \ wordsList = words;\n        Arrays.sort(wordsList);\n        int largest = wordsList.get(wordsList.length()\
    \ - 1).length();\n        String maxWord = wordsList.get(wordsList.length() -\
    \ 1);\n        ArrayList<String> maxWordsList = new ArrayList<>();\n        Arrays.sort(wordsList);\n\
    \        Arrays.stream(wordsList.subList(0, wordsList.length() - 1)).forEach(word\
    \ -> {\n            int currentLength = word.length();\n            if (currentLength\
    \ > largest) {\n                largest = currentLength;\n                maxWord\
    \ = word;\n            }\n            if (currentLength == largest) {\n      \
    \          maxWordsList.add(word);\n            }\n        });\n        if (maxWordsList.get(maxWordsList.size()\
    \ - 1).length() == largest) {\n            maxWord = maxWordsList.get(maxWordsList.size()\
    \ - 1);\n        }\n        return maxWord;", "        HashMap<String, Integer>\
    \ map = new HashMap<>();\n        for (String word : words) {\n            for\
    \ (int i = 0; i < word.length(); i++) {\n                String key = word.substring(i,\
    \ i + 1);\n                if (map.containsKey(key)) {\n                    Integer\
    \ count = map.get(key);\n                    map.put(key, count.intValue() + 1);\n\
    \                } else {\n                    map.put(key, 1);\n            \
    \    }\n            }\n        }\n        for (String word : map.keySet()) {\n\
    \            if (map.get(word).equals(new Integer(map.get(word).intValue())))\
    \ {\n                return word;\n            }\n        }\n        return null;",
  "        List<String> wordList = words.stream().collect(Collectors.toList());\n\
    \        HashSet<Character> hs = new HashSet<>();\n        wordList.forEach((word)\
    \ -> {\n            char[] chars = word.toCharArray();\n            hs.addAll(Arrays.asList(chars));\n\
    \        });\n        wordList.sort(Comparator.comparing(String::length));\n \
    \       wordList.forEach((word) -> {\n            char[] chars = word.toCharArray();\n\
    \            hs.stream().forEach((char) -> hs.remove((char)));\n        });\n\
    \        return wordList.get(0);", "        int count = getUniqueCharacters(words);\n\
    \        if (count > 1) {\n            String max = getFirstWord(words);\n   \
    \         if (max.compareTo(words.get(words.size()-1)) < 0) {\n              \
    \  return max;\n            }\n            return words.get(words.size()-1);\n\
    \        }\n        return words.get(0);", "        Map<String, Integer> map =\
    \ new HashMap<>();\n        for (String word : words) {\n            Integer count\
    \ = map.getOrDefault(word, 0);\n            count = count + 1;\n            map.put(word,\
    \ count);\n        }\n\n        Arrays.sort(words, (a, b) -> map.get(b).compareTo(map.get(a)));\n\
    \        return words.get(0);", "        int maxCount = 0;\n        int maxCountIndex\
    \ = 0;\n        int uniqueCount = 1;\n        String word = \"\";\n        String\
    \ temp = words.get(0);\n        for (int i = 1; i < words.size(); i++) {\n   \
    \         String element = words.get(i);\n            int currentCount = 0;\n\
    \            int currentCountIndex = 0;\n            for (int j = 0; j < temp.length();\
    \ j++) {\n                if (temp.charAt(j) == element.charAt(j)) {\n       \
    \             currentCount++;\n                    currentCountIndex++;\n    \
    \            }\n            }\n            if (currentCount > maxCount) {\n  \
    \              maxCount = currentCount;\n                maxCountIndex = currentCountIndex;\n\
    \                word = element;\n            } else if (currentCount == maxCount\
    \ && currentCountIndex > maxCountIndex) {\n                maxCount = currentCount;\n\
    \                maxCountIndex = currentCountIndex;\n                word = element;\n\
    \            }\n        }\n        return word;", "        int maxCount = 0;\n\
    \        String maxWord = null;\n        for (String word : words) {\n       \
    \     int count = countChars(word);\n            if (count > maxCount) {\n   \
    \             maxWord = word;\n                maxCount = count;\n           \
    \ }\n        }\n        return maxWord;", "        int max = 0;\n        ArrayList<Character>\
    \ counts = new ArrayList<>();\n        for (String word : words) {\n         \
    \   for (int i = 0, len = word.length(); i < len; i++) {\n                if (counts.get(i)\
    \ == null) {\n                    counts.set(i, 1);\n                }\n     \
    \           else {\n                    counts.set(i, counts.get(i) + 1);\n  \
    \              }\n                if (counts.get(i) > max) {\n               \
    \     max = counts.get(i);\n                }\n            }\n        }\n    \
    \    \n        ArrayList<String> res = new ArrayList<>(words);\n        Collections.sort(res,\
    \ new Comparator<String>() {\n            public int compare(String str1, String\
    \ str2) {\n                return max * str1.compareTo(str2);\n            }\n\
    \        });\n\n        return res.get(0);", "        int max = 0;\n        for\
    \ (String s: words) {\n            max = Math.max(max, s.length());\n        }\n\
    \n        ArrayList<String> result = new ArrayList<String>(words);\n        result.sort(Comparator.comparing(s\
    \ -> s.length()).reversed());\n        for (String s: result) {\n            if\
    \ (s.length() == max) {\n                return s;\n            }\n        }\n\
    \        return words.get(0); // no strings had same length", "        Map<String,\
    \ Integer> wordCount = new HashMap<>();\n        for (String word : words) {\n\
    \            int count = 0;\n            String currentWord = word;\n        \
    \    if (wordCount.containsKey(currentWord)) {\n                count = wordCount.get(currentWord);\n\
    \            }\n            wordCount.put(word, count + 1);\n        }\n     \
    \   String[] sortedKeys = wordCount.keySet().toArray(new String[wordCount.keySet().size()]);\n\
    \        Arrays.sort(sortedKeys);\n        return wordCount.keySet().toArray(sortedKeys)[0];",
  "        int max = 0;\n        int wordMax = 0;\n        String maxChar = \"\";\n\
    \n        for(String str: words) {\n            int numOfChars = str.length();\n\
    \            if(numOfChars > max) {\n                max = numOfChars;\n     \
    \           wordMax = words.size();\n                maxChar = str;\n        \
    \    }\n        }\n        if(wordMax > words.size())\n            return findMax(words);\n\
    \n        for(int i = 0; i < wordMax; i++)\n            if(words.get(i).compareTo(maxChar)\
    \ < 0) {\n                maxChar = words.get(i);\n            }\n\n        return\
    \ maxChar;", "        Map<String, Integer> wordCountMap = new HashMap<>();\n \
    \       for (String word : words) {\n            if (!wordCountMap.containsKey(word))\
    \ {\n                wordCountMap.put(word, 1);\n            } else {\n      \
    \          int count = wordCountMap.get(word);\n                wordCountMap.put(word,\
    \ count + 1);\n            }\n        }\n        List<String> sortedKeys = wordCountMap.entrySet().stream()\n\
    \                .sorted(Map.Entry.comparingByValue())\n                .map(Map.Entry::getKey)\n\
    \                .collect(Collectors.toList());\n        int maxCount = 0;\n \
    \       String maxWord = sortedKeys.get(0);\n        for (String key : sortedKeys)\
    \ {\n            if (wordCountMap.get(key) > maxCount) {\n                maxCount\
    \ = wordCountMap.get(key);\n                maxWord = key;\n            }\n  \
    \      }\n        return maxWord;", "        int maxCount = 0;\n        int firstIndex\
    \ = -1;\n        for(int i = 0; i < words.size(); i++) {\n            String s\
    \ = words.get(i);\n            int c = 0;\n            for(int j = 0; j < s.length();\
    \ j++) {\n                char ch = s.charAt(j);\n                c += Character.toLowerCase(ch)\
    \ - 'a';\n            }\n            maxCount = Math.max(c, maxCount);\n     \
    \       if (firstIndex == -1) {\n                firstIndex = i;\n           \
    \ }\n        }\n        if (firstIndex != -1 && maxCount > words.size() / 2)\n\
    \            return words.get(firstIndex);\n        else if (maxCount > words.size()\
    \ / 2)\n            return words.get(words.size() - 1);\n        else {\n    \
    \        int i = 0;\n            while(words.get(i).length() != words.size() /\
    \ 2) {\n                i++;\n            }\n            return words.get(i);\n\
    \        }", "        Map<String, Integer> charCount = new HashMap<String, Integer>();\n\
    \        for (String word : words) {\n            charCount.put(word, new Integer(0));\n\
    \        }\n        for (String word : words) {\n            int count = charCount.get(word);\n\
    \            if (count == 0) {\n                charCount.put(word, 1);\n    \
    \        } else if (count > charCount.get(word)) {\n                charCount.put(word,\
    \ count);\n            }\n        }\n        Set<String> keys = charCount.keySet();\n\
    \        Iterator<String> iterator = keys.iterator();\n        if (iterator.hasNext())\
    \ {\n            String max = iterator.next();\n            Integer max = charCount.get(max);\n\
    \            while (iterator.hasNext()) {\n                String value = iterator.next();\n\
    \                Integer count = charCount.get(value);\n                if (count\
    \ > max) {\n                    max = count;\n                    max = value;\n\
    \                }\n            }\n            return max;\n        }\n      \
    \  return null;", "        int max = 0;\n        \n        // Create a map of\
    \ all the characters.\n        Map<Character, Integer> charMap = new HashMap<>();\n\
    \        \n        // Iterate over the list of strings.\n        for(String word\
    \ : words) {\n            // Iterate over each character.\n            for(char\
    \ c : word.toCharArray()) {\n                // Check if the character is present\
    \ in the map, if yes, increment the count.\n                if(charMap.containsKey(c))\
    \ {\n                    charMap.put(c, charMap.get(c) + 1);\n               \
    \ }\n                else {\n                    // If not present, put the current\
    \ character with count 1.\n                    charMap.put(c, 1);\n          \
    \      }\n            }\n            // Get the count for each character.\n  \
    \          for(Integer i : charMap.values()) {\n                // If max is less\
    \ than the count, update max value.\n                if(i.compareTo(max) < 0)\
    \ {\n                    max = i;\n                }\n            }\n        }\n\
    \        \n        // If max is greater than zero, return the word which has the\
    \ max unique characters.\n        if(max > 0) {\n            return words.get(0);\n\
    \        }\n        \n        return null;", "        Map<Integer, Integer> map\
    \ = new HashMap<>();\n        words.forEach(s -> map.merge(s.length(), 1, Integer::sum));\n\
    \        Optional<Integer> maxVal = map.entrySet().stream().max(Map.Entry.comparingByValue());\n\
    \        return maxVal.map(entry -> words.get(entry.getKey())).orElse(null);",
  "        String[] max = new String[words.size()];\n        Arrays.sort(words);\n\
    \        Arrays.fill(max, words.get(0));\n        char maxChar = words.get(0).charAt(0);\n\
    \        int maxCount = 0;\n        for (int i = 1; i < words.size(); i++) {\n\
    \            char thisChar = words.get(i).charAt(0);\n            int thisCount\
    \ = 1;\n            for (int j = 0; j < i; j++) {\n                thisCount++;\n\
    \                if (thisChar == words.get(j).charAt(0)) {\n                 \
    \   if (thisCount > maxCount) {\n                        maxCount = thisCount;\n\
    \                        maxChar = thisChar;\n                    }\n        \
    \            break;\n                }\n            }\n        }\n        return\
    \ maxChar + new String(new char[maxCount]).replace(\"\\0\", maxChar);", "    \
    \    String max = words.get(0); // get the first word (first String)\n       \
    \ int count = 1;\n        for (String s : words) { // loop over each word\n  \
    \          if (s.equals(max)) { // if the word is the same as the last word (last\
    \ String)\n                count++; // then count it\n            }\n        \
    \    else {\n                if (count > words.size() - 1)\n                 \
    \   return max; // if we haven't got the max count yet, return the word with max\
    \ count\n                max = s; // else update the max word\n              \
    \  count = 1; // and set the count to 1\n            }\n        }\n        return\
    \ max; // if we haven't got the max count yet, return the last word", "      \
    \  int maxCount = 0;\n        String maxWord = null;\n        for (String word\
    \ : words) {\n            int charCount = 0;\n            for (char c : word.toCharArray())\
    \ {\n                if (charCount == maxCount) {\n                    maxWord\
    \ = word;\n                    break;\n                }\n                if (charCount\
    \ < maxCount) {\n                    maxWord = word;\n                    maxCount\
    \ = charCount;\n                }\n                charCount++;\n            }\n\
    \        }\n        return maxWord;", "        Set<Character> chars = words.stream().flatMap(w\
    \ -> w.chars()).collect(Collectors.toSet());\n        String max = \"-1\";\n \
    \       String temp = \"-1\";\n        for (char c : chars) {\n            if\
    \ (temp != null && temp.contains(Integer.toString(c))) {\n                max\
    \ = temp;\n                break;\n            }\n            temp = temp + c;\n\
    \        }\n        return max;", "        // TODO: write this function\n    \
    \    String max = \"\";\n        for (String word : words) {\n            if (word.length()\
    \ > max.length()) {\n                max = word;\n            }\n        }\n \
    \       return max;", "        Map<String, Integer> map = new HashMap<>();\n \
    \       for (int i = 0; i < words.size(); i++)\n            map.merge(words.get(i),\
    \ 1, Integer::sum);\n        List<String> result = new ArrayList<>(map.keySet());\n\
    \        result.sort(Comparator.comparingInt(s -> map.get(s)));\n        if (result.size()\
    \ > 1)\n            return result.get(0);\n        return words.get(0);", "  \
    \      Map<String, Integer> map = new HashMap<>();\n        for (String word :\
    \ words) {\n            if (map.containsKey(word)) {\n                Integer\
    \ count = map.get(word);\n                map.put(word, ++count);\n          \
    \  } else {\n                map.put(word, 1);\n            }\n        }\n   \
    \     Optional<Map.Entry<String, Integer>> maxEntry = map.entrySet()\n       \
    \         .stream()\n                .max(Map.Entry.comparingByValue());\n   \
    \     return maxEntry.get().getKey();", "        int max = Integer.MIN_VALUE;\n\
    \        for (String w : words) {\n            for (int i = w.length() - 1; i\
    \ >= 0; i--) {\n                char ch = w.charAt(i);\n                if (Character.isLetter(ch))\
    \ {\n                    char c = Character.toUpperCase(ch);\n               \
    \     if (Character.isLetterOrDigit(c)) {\n                        int count =\
    \ wordCount(w, ch);\n                        if (count > max) {\n            \
    \                max = count;\n                        }\n                   \
    \ }\n                }\n            }\n        }\n        return words.stream().filter(s\
    \ -> s.equalsIgnoreCase(words.get(0))).findFirst().get();", "        // Use a\
    \ HashMap to keep track of unique characters\n        Map<Character, Integer>\
    \ uniqueChars = new HashMap<>();\n        // Iterate through every word and keep\
    \ track of unique characters\n        for (String word : words) {\n          \
    \  int uniqueCharsCount = 0;\n            // Go through every character in the\
    \ word\n            for (char character : word.toCharArray()) {\n            \
    \    // If the character is not in the map, add it\n                if (!uniqueChars.containsKey(character))\
    \ {\n                    uniqueChars.put(character, uniqueCharsCount);\n     \
    \               uniqueCharsCount++;\n                }\n            }\n      \
    \  }\n        // If only one unique character, return it\n        if (uniqueChars.size()\
    \ == 1) {\n            return uniqueChars.keySet().iterator().next();\n      \
    \  }\n        // If multiple unique characters, return the one with max count\n\
    \        Integer max = -1;\n        for (Integer count : uniqueChars.values())\
    \ {\n            if (count > max) {\n                max = count;\n          \
    \  }\n        }\n        // If max is -1, then there is no word with maximum unique\
    \ characters\n        if (max == -1) {\n            return \"no word\";\n    \
    \    }\n        // Otherwise, return the one with the max unique characters\n\
    \        return words.get(uniqueChars.keySet().iterator().next());", "       \
    \ System.out.println(\"words\" + words);\n        ArrayList<String> temp = new\
    \ ArrayList<String>();\n        int max = 0;\n        int count = 0;\n       \
    \ System.out.println(\"words\" + words);\n        for (String s : words) {\n \
    \           if (s.length() >= max) {\n                max = s.length;\n      \
    \      }\n            if (s.length() == max) {\n                count++;\n   \
    \         }\n        }\n\n        for (String s : words) {\n            if (s.length()\
    \ == max) {\n                temp.add(s);\n            }\n        }\n        System.out.println(\"\
    count\" + count);\n        System.out.println(\"temp\" + temp);\n        Collections.sort(temp);\n\
    \        return temp.get(0);", "        Map<String, Integer> charCountMap = new\
    \ HashMap<>();\n        for (String s : words) {\n            for (char c : s.toCharArray())\
    \ {\n                if (charCountMap.containsKey(c)) {\n                    charCountMap.put(c,\
    \ charCountMap.get(c) + 1);\n                } else {\n                    charCountMap.put(c,\
    \ 1);\n                }\n            }\n        }\n        int maxCount = -1;\n\
    \        String maxValue = null;\n        for (String key : charCountMap.keySet())\
    \ {\n            if (charCountMap.get(key) > maxCount) {\n                maxCount\
    \ = charCountMap.get(key);\n                maxValue = key;\n            }\n \
    \       }\n        return maxValue;", '        // Your code here', "        int\
    \ unique = 0;\n        String max = \"\";\n        for (String word : words) {\n\
    \            unique = word.length();\n            if (unique > unique) {\n   \
    \             unique = unique;\n            }\n        }\n        for (String\
    \ word : words) {\n            if (word.length() == unique) {\n              \
    \  if (word.compareTo(max) < 0) {\n                    max = word;\n         \
    \       }\n            }\n        }\n        return max;", "        Map<Integer,\
    \ String> countMap = new HashMap<>();\n        for (int i = 0; i < words.size();\
    \ i++) {\n            for (int j = 0; j < words.get(i).length(); j++) {\n    \
    \            String key = String.valueOf(words.get(i).charAt(j));\n          \
    \      if (!countMap.containsKey(key)) {\n                    countMap.put(key,\
    \ 1);\n                } else {\n                    countMap.put(key, countMap.get(key)\
    \ + 1);\n                }\n            }\n        }\n        Integer maxCount\
    \ = Collections.max(countMap.values());\n        Optional<String> maxWord = countMap.entrySet().stream().filter(e\
    \ -> e.getValue() == maxCount).collect(Collectors.toList()).stream().sorted((e1,\
    \ e2) -> e1.getKey().compareTo(e2.getKey())).findFirst().get().getKey();\n   \
    \     return maxWord;", "        Arrays.sort(words);\n        Set<String> unique\
    \ = new HashSet<>();\n        words.addAll(unique);\n        int maxCount = words.stream().flatMap(s\
    \ -> s.chars().mapToObj(c -> new SimpleEntry<>(s, c)).collect(Collectors.toList())).count((e)\
    \ -> e.v).max().getValue();\n        if (maxCount == 0) {\n            return\
    \ \"\";\n        } else {\n            words.remove(maxCount);\n            return\
    \ words.get(0);\n        }", "        Set<String> characters = new HashSet<>();\n\
    \        for (String word : words) {\n            for (int i = 0; i < word.length();\
    \ i++) {\n                characters.add(word.charAt(i));\n            }\n   \
    \     }\n        System.out.println(\"characters \" + characters);\n        Collections.sort(characters);\n\
    \        System.out.println(\"sortedCharacters \" + characters);\n        Set<String>\
    \ wordWithMaxNumberOfCharacters = new HashSet<>();\n        wordWithMaxNumberOfCharacters.addAll(characters);\n\
    \        int maxNumberOfCharacters = Character.MAX_VALUE;\n        for (String\
    \ word : words) {\n            if (wordWithMaxNumberOfCharacters.size() > maxNumberOfCharacters)\
    \ {\n                maxNumberOfCharacters = wordWithMaxNumberOfCharacters.size();\n\
    \                wordWithMaxNumberOfCharacters = word;\n            }\n      \
    \      for (int i = 0; i < word.length(); i++) {\n                wordWithMaxNumberOfCharacters.remove(word.charAt(i));\n\
    \            }\n        }\n        return wordWithMaxNumberOfCharacters;", " \
    \       int uniqueCharsCount;\n        uniqueCharsCount = getUniqueCharsCount(words);\n\
    \n        if (uniqueCharsCount == words.size()) {\n            return words.get(0);\n\
    \        }\n\n        Integer max = Collections.max(words, (word1, word2) -> {\n\
    \            Integer count1 = getUniqueCharsCount(Arrays.asList(word1));\n   \
    \         Integer count2 = getUniqueCharsCount(Arrays.asList(word2));\n      \
    \      return Integer.compare(count1, count2);\n        });\n\n        return\
    \ max.toString();", "        int max = 0;\n        String maxWord = \"\";\n  \
    \      for (String word : words) {\n            for (int i = 0; i < word.length();\
    \ i++) {\n                String currentChar = word.substring(0, i);\n       \
    \         int currentCharCount = Collections.frequency(words, currentChar);\n\
    \                if (currentCharCount > max) {\n                    max = currentCharCount;\n\
    \                    maxWord = word;\n                }\n            }\n     \
    \   }\n        return maxWord;", "        int maxUniqueCharCount = 0;\n      \
    \  String wordWithMaxCount = \"\";\n\n        for (int i = 0; i < words.size();\
    \ i++) {\n            int uniqueCharCount = 0;\n            for (int j = 0; j\
    \ < words.get(i).length(); j++) {\n                uniqueCharCount += words.get(i).charAt(j);\n\
    \            }\n            if (uniqueCharCount > maxUniqueCharCount) {\n    \
    \            maxUniqueCharCount = uniqueCharCount;\n                wordWithMaxCount\
    \ = words.get(i);\n            }\n        }\n        return wordWithMaxCount;",
  "        Map<String, Integer> map = new HashMap<String, Integer>();\n        for\
    \ (String word : words) {\n            String lowerWord = word.toLowerCase();\n\
    \            if (map.containsKey(lowerWord)) {\n                int count = map.get(lowerWord);\n\
    \                map.put(lowerWord, count + 1);\n            } else {\n      \
    \          map.put(lowerWord, 1);\n            }\n        }\n\n        Integer\
    \ maxCountValue = null;\n        String maxCountWord = null;\n\n        for (Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            Integer count = entry.getValue();\n\
    \            if (maxCountValue == null || count > maxCountValue) {\n         \
    \       maxCountValue = count;\n                maxCountWord = entry.getKey();\n\
    \            }\n        }\n\n        return maxCountWord;", "        int max =\
    \ 0, charCount = 0;\n        for (String word : words) {\n            if (word.length()\
    \ > max) {\n                max = word.length();\n            }\n            charCount\
    \ += word.length();\n        }\n        charCount /= words.size();\n        int\
    \ result = Integer.MAX_VALUE;\n        for (String word : words) {\n         \
    \   if (word.length() == max) {\n                char [] chars = word.toCharArray();\n\
    \                for (int i = 0; i < chars.length; i++) {\n                  \
    \  if (chars[i] == ' ') {\n                        charCount = charCount - 1;\n\
    \                    }\n                }\n                if (charCount < result)\
    \ {\n                    result = charCount;\n                }\n            }\n\
    \        }\n        return words.get(words.size()-1);", "        int count[] =\
    \ new int[Character.MAX_VALUE + 1];\n        for (String s : words) {\n      \
    \      for (int i = 0; i < s.length(); i++) {\n                count[s.charAt(i)]++;\n\
    \            }\n        }\n        int maxCount = 0;\n        int maxCharCount\
    \ = 0;\n        int maxStringCount = 0;\n        for (Character c : count) {\n\
    \            if (c.intValue() > maxCount) {\n                maxCount = c.intValue();\n\
    \                maxCharCount = maxCount;\n            }\n            if (c.intValue()\
    \ > maxStringCount) {\n                maxStringCount = c.intValue();\n      \
    \      }\n        }\n        \n        if (maxCount > maxCharCount) {\n      \
    \      return null;\n        }\n        return words.stream().filter(x -> x.length()\
    \ == maxCharCount).max(Comparator.comparing(x -> x.charAt(0))).orElse(null);",
  "        int maxCount = 0;\n        for (String word : words) {\n            int\
    \ uniqueCharCount = word.chars().distinct().count();\n            if (uniqueCharCount\
    \ > maxCount) {\n                maxCount = uniqueCharCount;\n            }\n\
    \        }\n        if (maxCount > words.size()) {\n            return words.get(0);\n\
    \        } else {\n            return words.get(words.size() - 1);\n        }",
  "        // Initialize a map for keeping track of unique characters.\n        Map<Character,\
    \ Integer> counts = new HashMap<>();\n        // Iterate through all the strings\
    \ in words array list.\n        for (String s : words) {\n            // Iterate\
    \ through all the characters in word and keep track\n            // of unique\
    \ characters and keep track of character counts.\n            for (char c : s.toCharArray())\
    \ {\n                if (counts.get(c) == null) {\n                    counts.put(c,\
    \ 1);\n                } else {\n                    counts.put(c, counts.get(c)\
    \ + 1);\n                }\n            }\n        }\n        // Return the word\
    \ which has maximum number of unique characters.\n        int maxCount = 0;\n\
    \        String maxWord = \"\";\n        for (Map.Entry<Character, Integer> entry\
    \ : counts.entrySet()) {\n            int count = entry.getValue();\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = entry.getKey().toString();\n            }\n        }\n        return\
    \ maxWord;", '        return words.stream().max(Comparator.comparing((w -> countUnique(w)))).orElse("");',
  '        return words.size() > 0 ? Collections.max(words) : null;', "        Set<String>\
    \ uniqueCharsSet = new HashSet<>();\n        int maxCount = Integer.MIN_VALUE;\n\
    \        String maxWord = null;\n        for (String word : words) {\n       \
    \     for (char c : word.toCharArray()) {\n                if (!uniqueCharsSet.contains(String.valueOf(c)))\
    \ {\n                    uniqueCharsSet.add(String.valueOf(c));\n            \
    \        int count = uniqueCharsSet.size();\n                    if (count > maxCount)\
    \ {\n                        maxCount = count;\n                        maxWord\
    \ = word;\n                    }\n                }\n            }\n        }\n\
    \        return maxWord;", "        String[] strings = words.stream().toArray(String[]::new);\n\
    \        Arrays.sort(strings, new Comparator<String>() {\n            public int\
    \ compare(String o1, String o2) {\n                int count = 0;\n          \
    \      for (char c : o1.toCharArray()) {\n                    if (o2.indexOf(String.valueOf(c))\
    \ == -1) {\n                        count++;\n                    }\n        \
    \        }\n                return count > 0 ? count : o2.compareTo(o1);\n   \
    \         }\n        });\n        return strings[0];", "        String maxWord\
    \ = null;\n        int maxCount = 1;\n        for (String word : words) {\n  \
    \          int count = word.length();\n            if (maxCount < count) {\n \
    \               maxCount = count;\n                maxWord = word;\n         \
    \   } else if (maxCount > count) {\n                break;\n            }\n  \
    \      }\n        return maxWord;", "        // write your code here\n       \
    \ // Arrays.asList returns a list of strings as a String array type\n        //\
    \ and Arrays.asList((String)\"name\", (String)\"of\", (String)\"string\") returns\
    \ a list of strings as an array list containing arrays of strings and each array\
    \ is of the type String of the individual strings\n        List<String> wordList\
    \ = new ArrayList<String>(Arrays.asList(words));\n        Set<String> uniqueCharSet\
    \ = new HashSet<String>();\n\n        //The code iterates through the list to\
    \ get the unique characters\n        for (String s : wordList) {\n           \
    \ char[] chars = s.toCharArray();\n            for (int i = 0; i < chars.length;\
    \ i++) {\n                if (!uniqueCharSet.contains(chars[i])) {\n         \
    \           uniqueCharSet.add(chars[i]);\n                }\n            }\n \
    \       }\n        //Now the set contains unique characters\n        //we iterated\
    \ through the list to get a list of words with max\n        //number of unique\
    \ characters\n        List<String> result = new ArrayList<String>();\n       \
    \ int maxCount = Integer.MIN_VALUE;\n        for (String s : wordList) {\n   \
    \         char[] chars = s.toCharArray();\n            int count = 0;\n      \
    \      for (int i = 0; i < chars.length; i++) {\n                if (!uniqueCharSet.contains(chars[i]))\
    \ {\n                    count++;\n                    if (count > maxCount) {\n\
    \                        maxCount = count;\n                        result.clear();\n\
    \                        result.add(s);\n                    }\n             \
    \   }\n            }\n        }\n        //we iterated through the list to find\
    \ the first word with max\n        //number of unique characters\n        if (result.isEmpty())\
    \ {\n            for (String s : wordList) {\n                char[] chars = s.toCharArray();\n\
    \                for (char c : chars) {\n                    if (!uniqueCharSet.contains(c))\
    \ {\n                        return s;\n                    }\n              \
    \  }\n            }\n        }\n        //if all else fails we return the word\
    \ with max number of unique characters\n        return maxCount == Integer.MIN_VALUE\
    \ ? wordList.get(0).toString() : result.get(0).toString();", "        if (words.isEmpty())\
    \ {\n            return \"No words in list\";\n        }\n        boolean hasDuplicates\
    \ = false;\n        int max = 0;\n        int index = 0;\n        int maxIndex\
    \ = 0;\n        int maxCount = 0;\n        for (int i = 0; i < words.size(); i++)\
    \ {\n            for (int j = 0; j < words.size(); j++) {\n                if\
    \ (i != j && words.get(i).equals(words.get(j))) {\n                    hasDuplicates\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (hasDuplicates) {\n                break;\n            }\n       \
    \     char c;\n            try {\n                c = words.get(i).charAt(0);\n\
    \            } catch (StringIndexOutOfBoundsException e) {\n                hasDuplicates\
    \ = true;\n                break;\n            }\n            int count = 0;\n\
    \            for (int j = 0; j < words.size(); j++) {\n                try {\n\
    \                    char d = words.get(j).charAt(0);\n                    if\
    \ (c == d) {\n                        count++;\n                    }\n      \
    \          } catch (StringIndexOutOfBoundsException e) {\n                   \
    \ hasDuplicates = true;\n                    break;\n                }\n     \
    \       }\n            if (count > maxCount) {\n                max = count;\n\
    \                maxIndex = i;\n                maxCount = count;\n          \
    \  } else if (count == maxCount) {\n                if (i == maxIndex) {\n   \
    \                 max = count;\n                    maxIndex = i;\n          \
    \          maxCount = count;\n                }\n            }\n        }\n  \
    \      return words.get(maxIndex);", "        int maxCount = 0;\n        String\
    \ maxChars = \"\";\n\n        for (String word : words) {\n            int count\
    \ = word.length();\n            if (maxCount < count) {\n                maxCount\
    \ = count;\n                maxChars = word;\n            }\n        }\n     \
    \   return maxChars;", "        // TODO: Your code here!\n        String max =\
    \ \"\";\n        for(String s : words){\n            for(char c : s.toCharArray()){\n\
    \                if(!max.contains(String.valueOf(c))){\n                    max\
    \ = String.valueOf(c);\n                    break;\n                }\n      \
    \      }\n        }\n        return max;", "        Map<Character, Integer> charCounts\
    \ = new HashMap<>();\n        for (String word : words) {\n            for (int\
    \ i = 0; i < word.length(); i++) {\n                char c = word.charAt(i);\n\
    \                if (!charCounts.containsKey(c)) {\n                    charCounts.put(c,\
    \ 1);\n                } else {\n                    charCounts.put(c, charCounts.get(c)\
    \ + 1);\n                }\n            }\n        }\n        int maxValue = Integer.MIN_VALUE;\n\
    \        String maxString = null;\n        for (Map.Entry<Character, Integer>\
    \ entry : charCounts.entrySet()) {\n            if (entry.getValue() > maxValue)\
    \ {\n                maxValue = entry.getValue();\n                maxString =\
    \ entry.getKey();\n            }\n        }\n        return maxString;", "   \
    \     // Create character set and map\n        Map<Character, Integer> counts\
    \ = new HashMap<>();\n\n        // Use stream API to loop through each word\n\
    \        words.stream().forEach(word -> {\n            // Use stream to loop through\
    \ each character\n            word.chars().forEach(ch -> {\n                //\
    \ Check if character is already present in the map\n                if (!counts.containsKey(ch))\
    \ {\n                    // Add character to map if not present\n            \
    \        counts.put(ch, 1);\n                } else {\n                    //\
    \ Increment the count in the map if present\n                    counts.put(ch,\
    \ counts.get(ch) + 1);\n                }\n            });\n        });\n\n  \
    \      // If maximum count found, return that word\n        if (counts.entrySet().stream().max(Map.Entry.comparingByValue()).get().getValue()\
    \ == 1) {\n            return words.stream().max(Map.Entry.comparingByValue()).get().getKey();\n\
    \        }\n\n        // If not, return null as no word with maximum characters\
    \ is found\n        return null;", "        int maxCount = 0;\n        Optional<String>\
    \ optMax = null;\n        for (String word : words) {\n            int count =\
    \ word.length();\n            if (optMax.isPresent()) {\n                int temp\
    \ = optMax.get().length();\n                if (temp > count) {\n            \
    \        optMax = Optional.of(word);\n                    continue;\n        \
    \        }\n                if (temp == count) {\n                    optMax =\
    \ optMax.filter(w1 -> !word.equals(w1));\n                }\n            }\n \
    \           if (count > maxCount) {\n                optMax = Optional.of(word);\n\
    \                maxCount = count;\n            } else if (count == maxCount)\
    \ {\n                if (word.equals(optMax.get())) {\n                    optMax\
    \ = optMax.filter(w1 -> !word.equals(w1));\n                }\n            }\n\
    \        }\n        return optMax.get();", "        Map<String, Integer> counts\
    \ = new HashMap<>();\n        for(String word: words) {\n            int count\
    \ = counts.getOrDefault(word, 0);\n            counts.put(word, count + 1);\n\
    \        }\n        List<String> list = words.stream().sorted(Map.Entry.comparingByValue())\n\
    \                                          .collect(Collectors.toList());\n  \
    \      return list.size() > 0 ? list.get(0) : null;", "        int maxCount =\
    \ 0;\n        String maxWord = \"\";\n\n        for (String word : words) {\n\
    \            int count = 0;\n            for (char c : word.toCharArray()) {\n\
    \                ++count;\n            }\n            if (count > maxCount) {\n\
    \                maxCount = count;\n                maxWord = word;\n        \
    \    }\n        }\n\n        return maxWord;", "        Map<String, Integer> map\
    \ = new HashMap<>();\n        for(String word: words){\n            int numOfChars\
    \ = word.length();\n            map.put(word, numOfChars);\n        }\n      \
    \  \n        Collections.sort(map.entrySet());\n        String maxWord = map.get(map.lastKey());\n\
    \        \n        return maxWord;", "        String maxWord = \"\";\n       \
    \ int maxLength = 0;\n        int maxCount = 0;\n        for (String word : words)\
    \ {\n            int length = 0;\n            int count = 0;\n            char\
    \ letter = ' ';\n            for (char c : word.toCharArray()) {\n           \
    \     if (Character.isLetter(c)) {\n                    count++;\n           \
    \         letter = c;\n                } else {\n                    break;\n\
    \                }\n                length++;\n            }\n            if (count\
    \ > maxCount) {\n                maxWord = word;\n                maxCount = count;\n\
    \                maxLength = length;\n            }\n        }\n        return\
    \ maxWord;", "        return Collections.max(\n                words.stream()\n\
    \                        .collect(\n                                Collectors.toMap(s\
    \ -> s.length(),\n                                        s -> s,\n          \
    \                              (s, s2) -> s2)));", "        // write your code\
    \ here\n        Map<String, Integer> map = words().stream().collect(Collectors.toMap(Function.identity(),\
    \ w -> words().stream().filter(s -> w.equals(s)).collect(Collectors.toSet()).size()));\n\
    \        System.out.println(map);\n        System.out.println(words.get(Collections.max(words().stream().collect(Collectors.toMap(Function.identity(),\
    \ w -> words().stream().filter(s -> w.equals(s)).collect(Collectors.toSet()).size()).entrySet(),\
    \ Map.Entry.comparingByValue()).getKey()));\n        return words.get(Collections.max(words().stream().collect(Collectors.toMap(Function.identity(),\
    \ w -> words().stream().filter(s -> w.equals(s)).collect(Collectors.toSet()).size()).entrySet(),\
    \ Map.Entry.comparingByValue()).getKey());", "        Integer maxCount = 0;\n\
    \        String maxWord = null;\n        for (String word : words) {\n       \
    \     Integer count = word.chars().distinct().count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;", '        String max
    = "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',
  "        List<String> uniqueWords = words.stream().distinct().collect(Collectors.toList());\n\
    \        return uniqueWords.isEmpty() ? null : uniqueWords.get(0);", "       \
    \ Map<String, Integer> charMap = new HashMap<>();\n        for (String word :\
    \ words) {\n            charMap.putIfAbsent(word, new Integer(0));\n         \
    \   charMap.merge(word, 1, Integer::sum);\n        }\n        Collection<String>\
    \ wordsWithMaxChars = new ArrayList<>(charMap.keySet());\n        Collections.sort(wordsWithMaxChars);\n\
    \        return wordsWithMaxChars.isEmpty() ? null : wordsWithMaxChars.get(0);",
  "        Map<Character, Integer> map = new HashMap<>();\n        for (String word\
    \ : words) {\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n        }\n        Object[] keys = map.keySet().toArray();\n\
    \        return Collections.max(Arrays.asList(keys), Comparator.comparing((Object\
    \ k) -> map.get(k))).toString();", "        Comparator<String> comp = Comparator.comparing(s\
    \ -> charCount(s));\n        Optional<String> optionalWord = words.stream()\n\
    \                                          .max(comp)\n                      \
    \                    .orElse(\"\");\n        return optionalWord.orElseThrow();",
  "        Map<Character, Integer> map = new HashMap<Character, Integer>();\n    \
    \    for (String word : words) {\n            for (Character c : word.toCharArray())\
    \ {\n                Integer currentCount = map.get(c);\n                if (currentCount\
    \ == null) {\n                    map.put(c, 1);\n                } else {\n \
    \                   map.put(c, currentCount + 1);\n                }\n       \
    \     }\n        }\n        String[] sortedWords = words.stream()\n          \
    \      .sorted(Comparator.comparing(w -> {\n                    int currentCount\
    \ = map.get(w.charAt(0));\n                    if (currentCount != 0) {\n    \
    \                    return currentCount;\n                    }\n           \
    \         return -w.length();\n                }))\n                .toArray(String[]::new);\n\
    \        return sortedWords[sortedWords.length - 1];", "        if (words == null\
    \ || words.isEmpty())\n            return null;\n        TreeSet<Character> maxUniqueChars\
    \ = new TreeSet<Character>();\n        HashMap<Character, Integer> charCount =\
    \ new HashMap<Character, Integer>();\n        for (String word: words) {\n   \
    \         for (int i = 0; i < word.length(); i++) {\n                char c =\
    \ word.charAt(i);\n                if (charCount.containsKey(c))\n           \
    \         charCount.put(c, charCount.get(c) + 1);\n                else\n    \
    \                charCount.put(c, 1);\n                if (charCount.get(c) >\
    \ maxUniqueChars.size()) {\n                    maxUniqueChars = new TreeSet<Character>(charCount);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     if (maxUniqueChars.size() < words.size())\n            return words.get(maxUniqueChars.firstEntry().getValue());\n\
    \        return words.get(words.indexOf(maxUniqueChars.firstEntry().getValue()));",
  "        String[] arr = (String[]) words.toArray();\n        long max = Long.MIN_VALUE;\n\
    \        long countMax = Long.MIN_VALUE;\n        boolean isMax = false;\n   \
    \     long count = 1;\n        int index = 0;\n        int k = 0;\n        String\
    \ result = \"\";\n        for (int i = 0; i < arr.length - 1; i++) {\n       \
    \     String first = arr[i];\n            String second = arr[i + 1];\n      \
    \      if (first.length() > second.length()) {\n                first = first.substring(0,\
    \ second.length());\n            } else if (first.length() < second.length())\
    \ {\n                second = second.substring(0, first.length());\n         \
    \   }\n            StringBuilder sb = new StringBuilder();\n            for (int\
    \ j = 0; j < first.length(); j++) {\n                if (second.indexOf(first.charAt(j))\
    \ != -1) {\n                    sb.append(first.charAt(j));\n                \
    \    count++;\n                }\n            }\n            countMax = Math.max(count,\
    \ countMax);\n            if (isMax) {\n                result = sb.toString();\n\
    \                isMax = false;\n                index = 0;\n                count\
    \ = 1;\n                k = 0;\n            } else {\n                if (count\
    \ == countMax) {\n                    isMax = true;\n                    index\
    \ = k;\n                } else {\n                    sb.deleteCharAt(index);\n\
    \                    sb.deleteCharAt(index);\n                    count = countMax;\n\
    \                    k = index;\n                }\n            }\n        }\n\
    \        return result;", "        // TODO: Complete this method\n        int\
    \ highestUniqueChar = 0;\n        int wordLength = -1;\n        for(String s:\
    \ words) {\n            wordLength = s.length();\n            char uniqueChar\
    \ = 0;\n            for(int i = 0; i < wordLength; i++) {\n                uniqueChar\
    \ = s.charAt(i) == s.charAt(i)? uniqueChar : uniqueChar + 1;\n            }\n\
    \            if(highestUniqueChar < uniqueChar) {\n                highestUniqueChar\
    \ = uniqueChar;\n            }\n        }\n        for(String s: words) {\n  \
    \          wordLength = s.length();\n            char uniqueChar = 0;\n      \
    \      for(int i = 0; i < wordLength; i++) {\n                uniqueChar = s.charAt(i)\
    \ == s.charAt(i)? uniqueChar : uniqueChar + 1;\n            }\n            if(highestUniqueChar\
    \ < uniqueChar) {\n                highestUniqueChar = uniqueChar;\n         \
    \   }\n        }\n        return words.get(0);", "        String[] array = words.toArray(new\
    \ String[words.size()]);\n        Map<Integer, Integer> characterCount = new HashMap<>();\n\
    \        Arrays.sort(array);\n        int maxCount = 0;\n        for (String s\
    \ : array) {\n            int uniqueCharacterCount = s.length();\n           \
    \ if (uniqueCharacterCount > maxCount) {\n                maxCount = uniqueCharacterCount;\n\
    \            }\n            for (int i = 0; i < s.length(); i++) {\n         \
    \       if (!characterCount.containsKey(s.charAt(i))) {\n                    characterCount.put(s.charAt(i),\
    \ 1);\n                } else {\n                    characterCount.put(s.charAt(i),\
    \ characterCount.get(s.charAt(i)) + 1);\n                }\n            }\n  \
    \      }\n        int largestCount = 0;\n        for (Map.Entry<Integer, Integer>\
    \ entry : characterCount.entrySet()) {\n            if (entry.getValue() > largestCount)\
    \ {\n                largestCount = entry.getValue();\n            }\n       \
    \ }\n        String maxWord = null;\n        if (largestCount > 0) {\n       \
    \     Arrays.sort(array);\n            for (String s : array) {\n            \
    \    if (characterCount.containsKey(s.charAt(0))) {\n                    if (characterCount.get(s.charAt(0))\
    \ > largestCount) {\n                        maxWord = s;\n                  \
    \      break;\n                    }\n                }\n            }\n     \
    \   }\n        return maxWord;", "        Map<String, Integer> charCount = new\
    \ HashMap<>();\n        words.forEach(s -> charCount.merge(s, 1, Integer::sum));\n\
    \        \n        charCount = charCount.entrySet().stream().sorted((e1, e2) ->\
    \ Integer.compare(e2.getValue(), e1.getValue())).collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (v1, v2) -> v1, LinkedHashMap::new));\n        \n     \
    \   return charCount.isEmpty() ? \"empty\" : charCount.entrySet().stream().filter((e)\
    \ -> e.getValue().equals(e.getKey())).findFirst().get().getKey();", "        Set<Character>\
    \ uniqueChars = new HashSet<>();\n        for (String word : words) {\n      \
    \      uniqueChars.addAll(Arrays.asList(word.toCharArray()));\n        }\n   \
    \     int max = 0;\n        String maxWord = null;\n        for (char c : uniqueChars)\
    \ {\n            int count = words.stream().filter(w -> w.contains(String.valueOf(c))).count();\n\
    \            if (count > max) {\n                max = count;\n              \
    \  maxWord = word;\n            }\n        }\n        if (maxWord == null) return\
    \ words.get(0);\n        return maxWord;", "        int max = Integer.MIN_VALUE;\n\
    \        String maxString = \"\";\n        for (String word : words) {\n     \
    \       int uniqueChars = word.length();\n            if (max < uniqueChars) {\n\
    \                max = uniqueChars;\n                maxString = word;\n     \
    \       }\n        }\n        return maxString;", "        if (words.size() ==\
    \ 0) return \"\";\n        Arrays.sort(words);\n        Map<String, Integer> counts\
    \ = new HashMap<>();\n        for (String word : words) {\n            if (counts.get(word)\
    \ == null) counts.put(word, 1);\n            else counts.put(word, counts.get(word)\
    \ + 1);\n        }\n        return words.get(0);", "        String max;\n    \
    \    long maxUniqueCharacters = 0;\n        for (String s : words) {\n       \
    \     if (s.isEmpty())\n                continue;\n            long characters\
    \ = s.chars().distinct().count();\n            if (maxUniqueCharacters < characters)\
    \ {\n                maxUniqueCharacters = characters;\n                max =\
    \ s;\n            }\n        }\n        if (maxUniqueCharacters > words.size())\
    \ {\n            max = words.get(0);\n        } else {\n            Collections.sort(words);\n\
    \            for (String s : words) {\n                if (s.compareTo(max) >\
    \ 0)\n                    max = s;\n            }\n        }\n        return max;",
  "        int maxCount = 0;\n        int currCount = 0;\n        String maxWord =\
    \ \"\";\n        for (String s : words) {\n            if (s.matches(\"[a-zA-Z]+\"\
    )) {\n                currCount = s.chars().filter(Character::isLetter).count();\n\
    \                if (currCount > maxCount) {\n                    maxCount = currCount;\n\
    \                    maxWord = s;\n                }\n            }\n        }\n\
    \        if (maxCount == 1) {\n            return maxWord;\n        } else {\n\
    \            return findMax(Arrays.asList(maxWord));\n        }", '        return
    words.stream().max(Comparator.comparing(w -> w.length())).orElse(null).toString();',
  "        TreeMap<Integer, List<String>> map = new TreeMap<>();\n        for (String\
    \ word : words) {\n            map.computeIfAbsent(new HashSet<>(word).size(),\n\
    \                    key -> new ArrayList<>()).add(word);\n        }\n\n     \
    \   String wordWithMaxCount = map.lastEntry().getValue().get(0);\n        return\
    \ wordWithMaxCount;", "        // Your code here\n        \n        \n       \
    \ \n        \n\n        \n        \n\n        return words.get(0); ", "      \
    \  // Your code here\n        int maxLength = 0;\n        int maxCount = 0;\n\
    \        ArrayList<Integer> count = new ArrayList<Integer>();\n        \n    \
    \    // For each word\n        for (String word : words) {\n            // For\
    \ each character in word\n            for (char c : word.toCharArray()) {\n  \
    \              // If character is in count\n                if (count.contains(c))\
    \ {\n                    // Increment count\n                    count.set(c,\
    \ count.get(c) + 1);\n                } else {\n                    // Add character\
    \ as new key\n                    count.set(c, 1);\n                }\n      \
    \      }\n        }\n        \n        // Get max number for keys in count\n \
    \       for (Map.Entry<Integer, Integer> entry : count.entrySet()) {\n       \
    \     if (entry.getValue() > maxCount) {\n                maxCount = entry.getValue();\n\
    \                maxLength = entry.getKey();\n            }\n        }\n     \
    \   \n        // Find words with same max number\n        ArrayList<String> ret\
    \ = new ArrayList<String>();\n        for (Map.Entry<Integer, Integer> entry :\
    \ count.entrySet()) {\n            if (entry.getValue() == maxCount) {\n     \
    \           ret.add(words.get(entry.getKey()));\n            }\n        }\n  \
    \      \n        // Return word with max number of unique characters\n       \
    \ if (ret.size() == 0) {\n            return words.get(0);\n        }\n      \
    \  \n        // Return word with max number of unique characters\n        if (ret.size()\
    \ > 1) {\n            return ret.get(0);\n        }\n        \n        // Return\
    \ word with max number of unique characters\n        return ret.get(0);", "  \
    \      Map<String, Integer> wordsCount = new HashMap<String, Integer>();\n   \
    \     for(String word: words) {\n            if(!wordsCount.containsKey(word))\
    \ {\n                wordsCount.put(word, 0);\n            }\n            Integer\
    \ count = wordsCount.get(word);\n            wordsCount.put(word, count + 1);\n\
    \        }\n        String max = null;\n        for(Entry<String, Integer> entry:\
    \ wordsCount.entrySet()) {\n            if(entry.getValue().equals(wordsCount.get(max)))\
    \ {\n                max = entry.getKey();\n            }\n        }\n       \
    \ return max;", "        int numUniq = 0;\n        int max = 0;\n        for (String\
    \ word : words) {\n            int uniqueChar = word.chars().distinct().count();\n\
    \            if (uniqueChar > max) {\n                max = uniqueChar;\n    \
    \            numUniq = uniqueChar;\n            }\n        }\n\n        if (numUniq\
    \ > 1) {\n            return words.stream()\n                    .min(Comparator.comparingInt(String::length))\n\
    \                    .collect(Collectors.toList())\n                    .get(0);\n\
    \        }\n        return words.stream()\n                .max(Comparator.comparingInt(String::length))\n\
    \                .collect(Collectors.toList())\n                .get(0);", " \
    \       int maxCnt = 0;\n        String maxWord = \"\";\n        Map<Character,\
    \ Integer> map = new HashMap<Character, Integer>();\n        for (String word\
    \ : words) {\n            for (char c : word.toCharArray()) {\n              \
    \  if (map.containsKey(c)) {\n                    map.put(c, map.get(c) + 1);\n\
    \                } else {\n                    map.put(c, 1);\n              \
    \  }\n            }\n        }\n        boolean found = false;\n        for (String\
    \ word : words) {\n            for (char c : word.toCharArray()) {\n         \
    \       if (map.containsKey(c)) {\n                    map.put(c, map.get(c) -\
    \ 1);\n                    found = true;\n                    int count = map.get(c);\n\
    \                    if (count > maxCnt) {\n                        maxCnt = count;\n\
    \                        maxWord = word;\n                    }\n            \
    \        if (count == 0) {\n                        break;\n                 \
    \   }\n                }\n            }\n        }\n        if (!found) {\n  \
    \          return null;\n        }\n        return maxWord;", "        int maxCount\
    \ = 0;\n        String word = null;\n        for (String word : words) {\n   \
    \         int uniqueCharCount = 0;\n            for (String str : word) {\n  \
    \              uniqueCharCount += word.length() - str.length();\n            }\n\
    \            if (uniqueCharCount > maxCount) {\n                maxCount = uniqueCharCount;\n\
    \                word = word;\n            }\n        }\n        if (maxCount\
    \ == word.length()) {\n            return word;\n        }\n        word = words.get(0);\n\
    \        for (String word : words) {\n            if (word.substring(0, word.length()\
    \ - maxCount).compareTo(word) > 0) {\n                word = word;\n         \
    \   }\n        }\n        return word;", "        ArrayList<Character> chars =\
    \ new ArrayList<>();\n        words.stream().forEach(word -> {\n            chars.addAll(Arrays.stream(word.split(\"\
    \")).mapToObj(c -> (char) c).toArray());\n        });\n        Arrays.sort(chars);\n\
    \        int maxChar = 0;\n        String maxWord = \"\";\n        for (Character\
    \ c : chars) {\n            if (maxChar < chars.indexOf(c)) {\n              \
    \  maxChar = chars.indexOf(c);\n                maxWord = words.get(chars.indexOf(c));\n\
    \            }\n        }\n        return maxWord;"]
stop_tokens:
- "\n    }\n"
