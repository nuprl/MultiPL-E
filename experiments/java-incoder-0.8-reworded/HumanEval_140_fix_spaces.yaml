name: HumanEval_140_fix_spaces
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string text, replace all spaces in it with underscores,\
  \ \n    // and if a string has more than 2 consecutive spaces, \n    // then replace\
  \ all consecutive spaces with - \n    // >>> fixSpaces((\" Example\"))\n    // (\"\
  Example\")\n    // >>> fixSpaces((\" Example 1\"))\n    // (\"Example_1\")\n   \
  \ // >>> fixSpaces((\" Example 2\"))\n    // (\"_Example_2\")\n    // >>> fixSpaces((\"\
  \ Example 3\"))\n    // (\"_Example-3\")\n    public static String fixSpaces(String\
  \ text) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(fixSpaces((\"\
  Example\")).equals((\"Example\")));\n    assert(fixSpaces((\"Mudasir Hanif \")).equals((\"\
  Mudasir_Hanif_\")));\n    assert(fixSpaces((\"Yellow Yellow  Dirty  Fellow\")).equals((\"\
  Yellow_Yellow__Dirty__Fellow\")));\n    assert(fixSpaces((\"Exa   mple\")).equals((\"\
  Exa-mple\")));\n    assert(fixSpaces((\"   Exa 1 2 2 mple\")).equals((\"-Exa_1_2_2_mple\"\
  )));\n    }\n\n}\n"
completions: ["        return text.replaceAll(\"\\\\s+\", \"_\")\n               \
    \     .replaceAll(\"(?<=(.{3}).*)\\\\s+(?=(.{3}).*)\", \"_\");", "        if (text\
    \ == null || text.trim().isEmpty()) {\n            return text;\n        }\n \
    \       \n        int len = text.length();\n        StringBuilder result = new\
    \ StringBuilder(len);\n        \n        for (int i = 0; i < len; i++) {\n   \
    \         char c = text.charAt(i);\n            \n            if (c == ' ') {\n\
    \                result.append(c + '-');\n            } else {\n             \
    \   result.append(c);\n            }\n        }\n\n        return result.toString();",
  "        String[] words = text.split(\" \");\n        StringBuilder sb = new StringBuilder(words[0]);\n\
    \        for (int i = 1; i < words.length; i++) {\n            if (words[i].equals(\"\
    \ \")) {\n                sb.append(\"_\");\n            } else {\n          \
    \      sb.append(words[i]);\n            }\n        }\n        return sb.toString();",
  "        int start = 0;\n        int index = 0;\n        int end = 0;\n        String\
    \ result = \"\";\n        while (true) {\n            start = index;\n       \
    \     end = index += text.length() - 1;\n            while (start <= end && !text.charAt(start).equals(text.charAt(end)))\
    \ {\n                start++;\n            }\n            while (index >= 0) {\n\
    \                if (!text.charAt(index).equals(text.charAt(index - 1))) {\n \
    \                   result += text.charAt(index);\n                    index--;\n\
    \                    break;\n                }\n                index--;\n   \
    \         }\n            if (start == end) {\n                result += text.substring(start,\
    \ index + 1);\n                break;\n            }\n            index++;\n \
    \       }\n        return result;", "        String[] words = text.split(\" \"\
    );\n        return words.reduce((text, word) -> {\n            String toReturn\
    \ = text.replace(\" \", word);\n            return toReturn.replaceAll(\"\\\\\
    s+\", \"-\");\n        }\n        );", "        // Your code here\n        return\
    \ text;", "        StringBuilder sb = new StringBuilder(text);\n        for(int\
    \ i = 0; i < sb.length(); i++) {\n            if(sb.charAt(i) == ' ') {\n    \
    \            sb.setCharAt(i, '_');\n            }\n            else if(sb.charAt(i)\
    \ == ' ' && i+1 < sb.length() && sb.charAt(i+1) == ' ') {\n                sb.setCharAt(i,\
    \ '-');\n                i++;\n            }\n        }\n        return sb.toString();",
  "        if (text.isEmpty()) {\n            return text;\n        }\n        Matcher\
    \ m = Pattern.compile(\"\\\\s\").matcher(text);\n        StringBuilder sb = new\
    \ StringBuilder(text.length());\n        while (m.find()) {\n            String\
    \ replacement = m.group().replace(\"_\", \"\");\n            if (replacement.equals(\"\
    \ \")) {\n                replacement = \"_\";\n            }\n            m.appendReplacement(sb,\
    \ replacement);\n        }\n        m.appendTail(sb);\n        return sb.toString();",
  "        StringBuilder fixedText = new StringBuilder();\n        int count = 0;\n\
    \        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if (c == ' ' && count < 2) {\n                fixedText.append(\"\
    _\");\n            } else if (c != ' ' && count >= 2) {\n                fixedText.append(\"\
    _\");\n                count = 0;\n            } else {\n                fixedText.append(c);\n\
    \                count++;\n            }\n        }\n        return fixedText.toString();",
  '        return text.replaceAll(" ", "_").replaceAll("  +", "_-");', "        String[]\
    \ arr = text.split(\" \");\n        int len = arr.length;\n        for (int i\
    \ = 0; i < len; i++) {\n            arr[i] = arr[i].trim();\n            arr[i]\
    \ = arr[i].length() > 2 ? \"-\" : arr[i];\n        }\n        return String.join(\"\
    \ \", arr);", "        String result = text;\n        result = result.replaceAll(\"\
    \\\\s+\", \" \");\n        // Replace all consecutive spaces with _\n        String\
    \ finalResult = result.trim();\n        if (result.contains(\"  \")) {\n     \
    \       finalResult = finalResult.replaceAll(\"\\\\s+\", \"_\");\n        }\n\
    \        return finalResult;", "        String s = text.replaceAll(\" +\", \"\
    \ \");\n        int firstSpace = s.indexOf(\"    \");\n        int secondSpace\
    \ = s.lastIndexOf(\"    \");\n        if (firstSpace >= 0 && secondSpace > firstSpace)\
    \ {\n            String result = s.substring(0, firstSpace);\n            String\
    \ replaced = s.substring(firstSpace + 4, secondSpace);\n            result +=\
    \ \"-\";\n            result += replaced;\n            s = result;\n        }\
    \ else {\n            s = s.replaceAll(\" +\", \"-\");\n        }\n        return\
    \ s;", '        return text.replaceAll("\\s+", "_").replaceAll("( )+", "-");',
  "        // Write your code here\n        if(text==null) return \"\";\n        text\
    \ = text.replaceAll(\" \", \"_\");\n        if(text.matches(\".*\\\\S.{2,}.*\"\
    )){\n            String newtext=\"\";\n            for(int i=0; i<text.length()-1;\
    \ i++){\n                newtext+=text.charAt(i)+text.charAt(i+1);\n         \
    \   }\n            newtext+=text.charAt(text.length()-1);\n            return\
    \ newtext;\n        }\n        return text;", '        return text.replace(" ",
    "_").replace("  ", "_");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        if (text.contains(\" \")){\n            return text.replace(\"\
    \ \", \"_\");\n        }else{\n            return text;\n        }", "       \
    \ String result = text.replaceAll(\" +\", \"_\");\n        result = result.trim().replaceAll(\"\
    \  +\", \"-\");\n        return result;", "        final String SPACE = \"\\\\\
    s+\";\n        return text.replaceAll(SPACE, \" \").replace(\" \", \"-\").replaceAll(\"\
    \\\\s+\", \"-\");", "        // your code\n        return text;", "        int\
    \ count = 0;\n        for (char c : text.toCharArray())\n            if (c ==\
    \ ' ')\n                count++;\n        \n        if (count > 2)\n         \
    \   text = text.replaceAll(\" +\", \" \");\n        else if (count > 0)\n    \
    \        text = text.replaceAll(\" +\", \"-\");\n        return text;", "    \
    \    if(text.equals(\"\")) return text;\n        StringBuilder stringBuilder =\
    \ new StringBuilder();\n        for(int i = 0; i < text.length(); i++) {\n   \
    \         char c = text.charAt(i);\n            if(c == ' ') {\n             \
    \   stringBuilder.append('_');\n            } else {\n                stringBuilder.append(c);\n\
    \            }\n        }\n        return stringBuilder.toString();", "      \
    \  StringBuilder sb = new StringBuilder();\n        StringBuilder sb2 = new StringBuilder();\n\
    \        for(int i = 0; i < text.length(); i++) {\n            char ch = text.charAt(i);\n\
    \            if(ch != ' ') {\n                sb.append(ch);\n            } else\
    \ {\n                sb.append(Character.toUpperCase(ch));\n            }\n  \
    \      }\n        for(int i = 0; i < text.length(); i++) {\n            char ch\
    \ = text.charAt(i);\n            if(ch == ' ') {\n                for(int j =\
    \ i; j < text.length(); j++) {\n                    char ch2 = text.charAt(j);\n\
    \                    if(ch2 == ' ') {\n                        sb2.append(Character.toUpperCase(ch));\n\
    \                        sb2.append(Character.toUpperCase(ch2));\n           \
    \             i = j;\n                        break;\n                    }\n\
    \                }\n            }\n        }\n        return sb.toString().replaceAll(\"\
    \ \", \"_\").replace(\" \", \"-\").replace(\" \", \"\").replaceAll(\"-\", \" \"\
    );", "        if (text.isEmpty()) return text;\n        text = text.replaceAll(\"\
    \\\\s\", \"\"); // Get rid of spaces\n        if (text.endsWith(\" \")) text =\
    \ text.substring(0, text.length()-1); // Remove trailing space\n        if (text.endsWith(\"\
    _\")) text = text.substring(0, text.length()-2); // Remove _ if needed\n     \
    \   if (text.startsWith(\"_\")) text = text.substring(1); // Remove _ if needed\n\
    \        return text;", "        StringBuilder sb = new StringBuilder();\n   \
    \     boolean isFirst = true;\n        StringBuilder firstSpace = new StringBuilder();\n\
    \        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if (c == ' ') {\n                if (isFirst) {\n               \
    \     firstSpace.append(c);\n                    isFirst = false;\n          \
    \      } else {\n                    sb.append(firstSpace).append('-');\n    \
    \                firstSpace = new StringBuilder();\n                }\n      \
    \      } else {\n                sb.append(c);\n            }\n        }\n   \
    \     sb.append(firstSpace);\n        return sb.toString();", '        return
    text.replace(" ", "_");', '        return text.replace(" ", "_").replace(" ",
    "-").replaceAll("[ ]{2,}", "-");', "        StringBuilder sb = new StringBuilder(text);\n\
    \        for(int i=0; i<sb.length(); i++) {\n            char ch = sb.charAt(i);\n\
    \            if(ch == ' ') {\n                sb.setCharAt(i, '_');\n        \
    \    } else if(ch == '-' && i!=sb.length()-1) {\n                sb.setCharAt(i,\
    \ '_');\n                i++;\n            }\n        }\n        return sb.toString();",
  '        return text.replaceAll(" ", "_").replaceAll("\\s+", "-");', "        return\
    \ text.trim().replaceAll(\"\\\\s+\", \"_\")\n                        .replaceAll(\"\
    \  +\", \"_\");", "        boolean isConsecutiveSpace = false;\n        StringBuilder\
    \ result = new StringBuilder();\n        for (int i = 0; i <= text.length() -\
    \ 1; i++) {\n            if (text.charAt(i) == ' ') {\n                if (!isConsecutiveSpace)\
    \ {\n                    isConsecutiveSpace = true;\n                    result.append(text.charAt(i));\n\
    \                } else {\n                    result.append(\"_\");\n       \
    \         }\n            } else {\n                result.append(text.charAt(i));\n\
    \                isConsecutiveSpace = false;\n            }\n        }\n     \
    \   return result.toString();", "        if (text == null || text.trim().isEmpty())\
    \ {\n            return text;\n        }\n        StringBuilder sb = new StringBuilder(text.length());\n\
    \        boolean space = false;\n        for (int i = 0, len = text.length();\
    \ i < len; i++) {\n            char c = text.charAt(i);\n            space = !space\
    \ && Character.isSpaceChar(c);\n            if (space && sb.length() > 0) {\n\
    \                sb.append(\" \");\n            }\n            sb.append(c);\n\
    \        }\n        return sb.toString();", "        return text.replaceAll(\"\
    \\\\s+\", \"_\")\n            .trim()\n            .replaceAll(\"\\\\s+\", \"\
    \ \");", "        return text.replaceAll(\"\\\\s+\", \"_\")\n                .replaceAll(\"\
    ( \\\\s|\\\\b)+\", \"_\")\n                .replaceAll(\"_{2,}\", \"_\");", " \
    \       // Replace multiple spaces with single space\n        text = text.replaceAll(\"\
    \\\\s+\", \" \");\n\n        // Replace multiple consecutive spaces with a single\
    \ dash\n        text = text.replaceAll(\"\\\\s+\", \" -\");\n\n        return\
    \ text;", '        return text.replaceAll("[ ]{2,}", "-");', "        if(text.length()==0)\
    \ return \"\";\n        String s = text.replaceAll(\" \",\"_\");\n        s =\
    \ s.replaceAll(\"  \",\"-\");\n        return s;", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s+", "-");', "        text=text.toLowerCase();\n        return\
    \ text.replaceAll(\"\\\\s+\",\"_\").replaceAll(\"\\\\s{2,}\",\"\").replaceAll(\"\
    _\",\" \");", "        StringBuilder strBuilder = new StringBuilder();\n     \
    \   String[] strArray = text.split(\"\\\\s\");\n        for (String str : strArray)\
    \ {\n            strBuilder.append(str.replaceAll(\" \", \"_\"));\n          \
    \  if (str.length() > 1) {\n                strBuilder.append(str.substring(str.length()\
    \ - 1));\n            }\n            strBuilder.append(\"_\");\n        }\n  \
    \      return strBuilder.toString();", "        // write your code in Java 7\n\
    \        StringBuilder sb = new StringBuilder(text);\n        StringBuilder sb2\
    \ = new StringBuilder();\n        for(int i = 0; i <text.length(); i++){\n   \
    \         if(text.charAt(i)== ' '){\n                sb.setCharAt(i, sb.charAt(i)+'_');\n\
    \                sb2.setCharAt(i, sb.charAt(i)+'_');\n            }else if(text.charAt(i)==\
    \ '_'){\n                sb.setCharAt(i, ' ');\n                sb2.setCharAt(i,\
    \ ' ');\n            }\n            if(sb.charAt(i)== ' '){\n                sb2.append(text.charAt(i));\n\
    \            }else if(text.charAt(i)== '_'){\n                sb2.append(text.charAt(i));\n\
    \            }\n        }\n        return sb.toString();", "        String result\
    \ = text;\n        result = result.replace(\" \", \"_\");\n        if (result.length()\
    \ > 2) {\n            result = result.replaceAll(\"\\\\s+\", \"-\");\n       \
    \ }\n        return result;", "        // Write your code here\n        if(text\
    \ == null || text.equals(\"\")) {\n            return text;\n        }\n     \
    \   text = text.replaceAll(\" \", \"_\");\n        int counter = 0;\n        while(counter\
    \ < text.length() - 1) {\n            if(text.charAt(counter + 1) != \" \") {\n\
    \                text = text.replaceAll(\" \", \"_\");\n                counter++;\n\
    \            } else {\n                text = text.replaceAll(\"_\", \"-\");\n\
    \                counter++;\n            }\n        }\n        return text;",
  "        StringBuilder sb = new StringBuilder(text);\n        Matcher m = Pattern.compile(\"\
    \\\\s\").matcher(text);\n        while (m.find()) {\n            sb.append(m.group());\n\
    \            sb.append(Character.toUpperCase(\n                    (char)m.end())\n\
    \                    .replaceAll(\"_\", \"-\"));\n        }\n        return sb.toString();",
  "        if (text == null || text.length() <= 2) {\n            return text;\n \
    \       }\n\n        char[] charArray = text.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < charArray.length; i++)\
    \ {\n            if (charArray[i] == ' ') {\n                sb.append(\"_\");\n\
    \            } else {\n                sb.append(charArray[i]);\n            }\n\
    \        }\n        return sb.toString();", "        if (text == null) {\n   \
    \         return text;\n        }\n        StringBuilder result = new StringBuilder(text.length());\n\
    \        for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if (c == ' ') {\n                result.append(c);\n            }\
    \ else {\n                result.append(Character.toUpperCase(c));\n         \
    \   }\n        }\n        return result.toString();", '        return text.replaceAll("\\s+",
    "_");', "        if (text.length() == 0) {\n            return text;\n       \
    \ }\n        StringBuilder sb = new StringBuilder(text);\n        boolean startsWithSpace\
    \ = true;\n        for (int i = 0; i < text.length(); i++) {\n            if (text.charAt(i)\
    \ == ' ') {\n                if (startsWithSpace) {\n                    sb.insert(i,\
    \ \"_\");\n                }\n                startsWithSpace = true;\n      \
    \      } else {\n                startsWithSpace = false;\n            }\n   \
    \     }\n        return sb.toString();", "        return text.replaceAll(\"\\\\\
    s+\", \"_\")\n            .replaceAll(\"\\\\s{2,}\", \"-\");", "        String[]\
    \ words = text.split(\" \");\n        StringBuilder builder = new StringBuilder();\n\
    \        builder.setLength(text.length());\n        for (String word : words)\
    \ {\n            builder.append(word);\n        }\n        System.out.println(builder.toString());\n\
    \        return builder.toString();", '        return text.replaceAll(" ", "_");',
  "        return text.replaceAll(\" +\", \" \")\n                   .replaceAll(\"\
    \\\\s+\", \"-\");", "        StringBuilder result = new StringBuilder();\n   \
    \     for (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if (Character.isWhitespace(c)) {\n                if (((i + 1) !=\
    \ text.length()) && text.charAt(i + 1) == c) {\n                    result.append((char)\
    \ (c + 0x20));\n                    i++;\n                } else {\n         \
    \           result.append(c);\n                }\n            } else {\n     \
    \           result.append(c);\n            }\n        }\n        return result;",
  "        String[] split = text.split(\" \");\n        StringBuilder fixed = new\
    \ StringBuilder();\n        for (int i = 0; i < split.length; i++) {\n       \
    \     if (split[i].length() == 1) {\n                fixed.append(\"-\");\n  \
    \          } else {\n                fixed.append(split[i]);\n            }\n\
    \            if (i + 1 < split.length) {\n                if (split[i].equals(\"\
    _\") && split[i + 1].equals(\"_\")) {\n                    fixed.append(\"_\"\
    );\n                    i += 1;\n                } else {\n                  \
    \  fixed.append(\" \");\n                }\n            }\n        }\n       \
    \ return fixed.toString();", "        if (text == null || text.trim().equals(\"\
    \"))\n            return text;\n        String[] lines = text.split(\"\\n\");\n\
    \        StringBuilder sb = new StringBuilder();\n        boolean space = false;\n\
    \        for (String line : lines) {\n            if (!space) {\n            \
    \    space = line.contains(\" \");\n                sb.append(line.replaceAll(\"\
    \\\\s+\", \"_\"));\n            } else\n                sb.append(line.substring(line.lastIndexOf(\"\
    \  \") + 2));\n            sb.append(\"\\n\");\n        }\n        return sb.toString();",
  "        if (text == null || text.length() == 0) {\n            return \"\";\n \
    \       }\n        String text = text.replaceAll(\"\\\\s+\", \"_\");\n       \
    \ if (text.contains(\"_\")) {\n            text = text.replaceAll(\"_+\", \" \"\
    );\n        }\n        return text;", "        if (text.isEmpty()) return text;\n\
    \        if (text.indexOf(' ') != 0) return text;\n\n        StringBuilder sb\
    \ = new StringBuilder(text);\n        List<Character> sbChars = new ArrayList<>();\n\
    \n        // Split up the string into characters.\n        for (char c: text.toCharArray())\
    \ {\n            if (c == ' ') {\n                sbChars.add(new Character(c));\n\
    \            } else {\n                // Add the current character to a StringBuilder\
    \ if it's not already there\n                if (sbChars.stream().noneMatch(chr\
    \ -> chr == c)) sb.append(c);\n                sbChars.clear();\n            }\n\
    \        }\n\n        // Add any trailing spaces if there are any.\n        if\
    \ (sbChars.size() > 0) {\n            sb.append(sbChars.stream().findFirst().get());\n\
    \            sb.append(' ');\n        }\n\n        return sb.toString();", '        return
    text.replaceAll("\\s+", "_").replaceAll("[ ]{2,}", "_");', "        String newText\
    \ = \"\";\n        // Replace all spaces with underscores\n        newText +=\
    \ text.replaceAll(\" \", \"_\");\n        // If text has more than 2 consecutive\
    \ spaces\n        if(text.contains(\"  \")){\n            // Replace all consecutive\
    \ spaces with -\n            newText += text.replaceAll(\"\\\\s+\", \"-\");\n\
    \        }\n        return newText;", "        String[] words = text.split(\"\
    \ \");\n        StringBuilder sb = new StringBuilder();\n        for(String w\
    \ : words) {\n            w = w.replaceAll(\"\\\\s+\",\"-\");\n            if(sb.length()>0)\
    \ sb.append(\"_\");\n            sb.append(w);\n        }\n        return sb.toString();",
  "        if (text == null || text.trim().isEmpty()) return text;\n        StringBuilder\
    \ result = new StringBuilder(text);\n        \n        // replace all spaces with\
    \ underscores\n        result.replace(\" \", \"_\");\n\n        // replace 2 consecutive\
    \ spaces with single dash\n        boolean consecutive = false;\n        for (int\
    \ i = 1, len = result.length(); i < len; i++) {\n            char c = result.charAt(i);\n\
    \            if (c == '_') {\n                if (consecutive) {\n           \
    \         result.setCharAt(i, '-');\n                }\n                else {\n\
    \                    consecutive = true;\n                }\n            }\n \
    \           consecutive = false;\n        }\n        return result.toString();",
  '        return text.replaceAll("\\s+","_");', '        return text.trim().replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        if(text == null) {\n            return\
    \ null;\n        }\n        if(text.length() <= 2) {\n            return text;\n\
    \        }\n        return text.replaceAll(\" \", \"_\").replaceAll(\"  +\", \"\
    _\");", '        return text.trim().replaceAll("\\s+","_").length()>2? text.replaceAll("\\s+",
    "_"): text;', "        StringBuilder fixed = new StringBuilder();\n        if\
    \ (text == null || text.isEmpty()) {\n            return text;\n        }\n  \
    \      int j = 0;\n        for (char c : text.toCharArray()) {\n            if\
    \ (c == '_') {\n                while (j < fixed.length() && \n              \
    \         fixed.charAt(j) == c) {\n                    j++;\n                }\n\
    \                if (j == fixed.length()) {\n                    fixed.append(c);\n\
    \                } else {\n                    fixed.append(c, '_');\n       \
    \             j += 1;\n                }\n            } else {\n             \
    \   fixed.append(c);\n                j++;\n            }\n        }\n       \
    \ if (fixed.length() > 1 && fixed.charAt(fixed.length() - 1) == '-') {\n     \
    \       fixed.setLength(fixed.length() - 1);\n        }\n        return fixed.toString();",
  "        // The function must return a new string.\n        String result = \"\"\
    ;\n        \n        // Iterate through all characters in the string.\n      \
    \  for(int i = 0; i < text.length(); i++) {\n            \n            // If character\
    \ is space, then append underscore at end of string.\n            if(text.charAt(i)\
    \ == ' ') {\n                result += text.charAt(i);\n            }\n      \
    \      else {\n                // Otherwise check if a space is followed by a\
    \ non-space character.\n                // If so, append underscore to the string\
    \ at position i \n                // and continue iterating.\n               \
    \ if(text.charAt(i + 1) == ' ') {\n                    result += text.charAt(i);\n\
    \                }\n                else {\n                    // Otherwise if\
    \ there are more than one consecutive spaces, \n                    // then append\
    \ underscore to the string at position \n                    // i (not at position\
    \ i+1), and continue iterating.\n                    if(text.charAt(i) == ' '\
    \ && text.charAt(i + 1) == ' ') {\n                        result += text.charAt(i);\n\
    \                    }\n                    // Otherwise append character at position\
    \ i to result string.\n                    else {\n                        result\
    \ += text.charAt(i);\n                    }\n                }\n            }\n\
    \        }\n        \n        return result;", "        // Replace all spaces\
    \ with underscores >>> \n        text = text.replaceAll(\"[ ]{2,}\", \"_\");\n\
    \        // If there are more than 2 consecutive underscores, \n        // then\
    \ replace them with dash >>> \n        if (text.contains(\"__\"))\n          \
    \  text = text.replaceAll(\"__\", \"-\");\n        return text;", "        StringBuilder\
    \ fixed = new StringBuilder();\n        \n        for(int i = 0; i < text.length();\
    \ i++) {\n            if(text.charAt(i) == ' ') {\n                fixed.append(text.charAt(i));\n\
    \            }\n            else {\n                fixed.append(text.charAt(i));\n\
    \                \n                if(text.charAt(i) == ' ')\n               \
    \     fixed.append(text.charAt(i+1));\n            }\n        }\n        return\
    \ fixed.toString();", '        return text.replaceAll(" ", "_").replaceAll(" +",
    "_");', '        return text.replaceAll(" ", "_").replaceAll("\\s+", "-");', " \
    \       String result = \"\";\n        int len = text.length();\n        char\
    \ c;\n        for (int i = 0; i < len; i++){\n            c = text.charAt(i);\n\
    \            if (c == ' ') {\n                if (i + 1 < len){\n            \
    \        char next = text.charAt(i+1);\n                    if (next == ' '){\n\
    \                        result+= (char)((int)c - 32);\n                    }\n\
    \                    else{\n                        result += c;\n           \
    \         }\n                }\n            }\n            else{\n           \
    \     result += c;\n            }\n        }\n        return result;", "     \
    \   StringBuilder sb = new StringBuilder();\n        boolean change = false;\n\
    \        boolean consecutive = false;\n        char[] chars = text.toCharArray();\n\
    \        for(int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if(c == ' ') {\n                if(i == chars.length - 1) {\n   \
    \                 if(!consecutive) {\n                        change = true;\n\
    \                        sb.append(c);\n                    } else {\n       \
    \                 change = true;\n                        sb.append('-');\n  \
    \                  }\n                } \n                if(!change) {\n    \
    \                sb.append(c);\n                    change = true;\n         \
    \           consecutive = false;\n                }\n            } else {\n  \
    \              consecutive = false;\n                if(change && sb.length()\
    \ > 1) {\n                    sb.append('-');\n                }\n           \
    \     change = false;\n                sb.append(c);\n            }\n        }\n\
    \        return sb.toString();", '        return text.replaceAll("\\s+","_").replaceAll("\\s{2,}","-");',
  "        // Split the input into words\n        String[] words = text.trim().split(\"\
    \\\\s+\");\n        // If there are 2 or less words in input, just return it\n\
    \        if(words.length <= 2) {\n            return text;\n        }\n      \
    \  // Otherwise, start with a copy of words[0]\n        String copy = words[0];\n\
    \        // Process the rest of the words\n        for(int i = 1; i < words.length;\
    \ i++) {\n            // Check if the current word is entirely made up of space\n\
    \            if(words[i].trim().equals(\"\")) {\n                // If so, add\
    \ copy to the output and start over\n                copy = copy+\"_\"+copy;\n\
    \            } else {\n                // Otherwise, check if the previous word\
    \ was made up of space\n                if(words[i-1].trim().equals(\"\")) {\n\
    \                    // If so, add copy to the output and start over\n       \
    \             copy = copy+\"_\"+copy;\n                } else {\n            \
    \        // Otherwise, check if the current word is a space\n                \
    \    if(words[i].trim().equals(\" \")) {\n                        // If so, add\
    \ copy to the output and start over\n                        copy = copy+\"-\"\
    +copy;\n                    } else {\n                        // Otherwise, add\
    \ the current word to copy\n                        copy = copy+\"_\"+words[i];\n\
    \                    }\n                }\n            }\n        }\n        //\
    \ Return the output and remove trailing underscores and spaces\n        return\
    \ copy.replace(\"_\", \"\");", '        return text.replaceAll("\\s+", "_");',
  "        char[] chars = text.toCharArray();\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            if (chars[i] == ' ') {\n                chars[i] = '_';\n\
    \            }\n            else if (chars[i + 1] == ' ') {\n                chars[i\
    \ + 1] = '-';\n            }\n        }\n        return new String(chars);", " \
    \       String[] strArr = text.split(\"\\\\s+\");\n        Arrays.stream(strArr).map((e)\
    \ -> e.replaceAll(\"\\\\s+\", \"_\"))\n                .filter(e -> e.length()\
    \ > 1).forEach(e -> e = e.replaceAll(\"\\\\s+\", \"-\"));\n        return Arrays.stream(strArr).map((e)\
    \ -> e.replaceAll(\"_\", \"-\"))\n                .reduce(\"\", String::concat);",
  "        StringBuilder result = new StringBuilder(text);\n        do {\n       \
    \     String space = \" \";\n            if (result.length() > 0 && result.charAt(result.length()\
    \ - 1) == space) {\n                result.setCharAt(result.length() - 1, _);\n\
    \            }\n        } while (!result.toString().isEmpty());\n        return\
    \ result.toString();", "        return text.replaceAll(\"\\\\s\", \"\")\n    \
    \               .replaceAll(\"  +\", \" \")\n                   .replaceAll(\"\
    \\\\s+-\", \"_\");", "        // Replace all spaces with underscores\n       \
    \ final String result = text.replaceAll(\"\\\\s+\", \"_\");\n        // If a string\
    \ has more than 2 consecutive spaces\n        if (result.contains(\"___\")) {\n\
    \            // Then replace all consecutive spaces with -\n            final\
    \ String result2 = result.replace(\"___\", \"-\");\n            // Return result\n\
    \            return result2;\n        }\n        // Return result\n        return\
    \ result;", "        StringBuilder sb = new StringBuilder();\n        Matcher\
    \ m = Pattern.compile(\"\\\\s*\").matcher(text);\n        while (m.find()) {\n\
    \            String s = m.group(0);\n            sb.append(s.replace(\"_\", \"\
    \ \")); // replace all spaces with underscores\n            sb.append(s.length()\
    \ > 2 ? \"-\" : \"\"); // replace all consecutive spaces with -\n        }\n \
    \       return sb.toString();", '        return text.replaceAll("[ ]+","_");',
  "        text = text.replaceAll(\" \", \"_\");\n        int spaceCount = text.length()\
    \ - text.replaceAll(\" \", \"\").length();\n        if (spaceCount > 2)\n    \
    \        text = text.replaceAll(\" +\", \" - \");\n        return text;", "  \
    \      String fixed = text;\n        fixed.equalsIgnoreCase(\"\")\n          \
    \  ? fixed\n            : text.split(\" \").stream().map(word -> {\n         \
    \       String fixed = word;\n                fixed.equalsIgnoreCase(\"\")\n \
    \                   ? fixed\n                    : fixed.split(\"\").stream().filter(c\
    \ -> c != ' ').map(c -> '_' + c).collect(Collectors.joining(\"\"));\n        \
    \    }).collect(Collectors.joining(\"\"));\n        return fixed;", '        return
    text.replaceAll("\\s+","_").replaceAll("(^| )\\s(.)","$1$2").replaceAll("( |$)","-");',
  "        // The result string\n        String result = \"\";\n\n        // Count\
    \ consecutive spaces and add \"_\" to result string\n        char[] charArray\
    \ = text.toCharArray();\n        Arrays.stream(charArray).filter(c -> c == ' ').forEach(c\
    \ -> result += c == '\\n' ? \"-\" : c);\n        \n        // If we have more\
    \ than 2 consecutive spaces, \n        // then replace all consecutive spaces\
    \ with -\n        char[] charArray2 = result.toCharArray();\n        Arrays.stream(charArray2).filter(c\
    \ -> c == ' ' || c == '-').forEach(c -> result += \"-\");\n\n        // Return\
    \ string\n        return result;", "        Map<Character, String> replacements\
    \ = new HashMap<>();\n        replacements.put(' ', '_');\n        int lastSpace\
    \ = 1;\n        for (int i = 0; i < text.length(); i++) {\n            char c\
    \ = text.charAt(i);\n            if (c == ' ') {\n                if (lastSpace\
    \ == 1) {\n                    replacements.put(c, '_');\n                }\n\
    \                lastSpace = 1;\n            } else if (lastSpace == 2) {\n  \
    \              replacements.put(c, '-');\n            }\n            lastSpace++;\n\
    \        }\n        String result = text;\n        for (Map.Entry<Character, String>\
    \ entry : replacements.entrySet()) {\n            result = result.replace(entry.getKey(),\
    \ entry.getValue());\n        }\n        return result;", "        text = text.replace(\"\
    _\",\" \");\n        text = text.replace(\" \",\"\");\n        text = text.replace(\"\
    \  \",\"-\");\n        return text;", "        if (text == null) {\n         \
    \   return null;\n        }\n        if (text.trim().length() > 0) {\n       \
    \     return text.replaceAll(\"\\\\s+\", \"_\");\n        } else {\n         \
    \   return text;\n        }", "        text=text.replaceAll(\"\\\\s+\",\"_\");\n\
    \        if (text.endsWith(\"_\")){\n            return text.replaceFirst(\"_$\"\
    ,\"-\");\n        }\n        return text;", "        String[] parts = text.split(\"\
    \\\\s+\");\n        StringBuilder sb = new StringBuilder();\n        for(int i\
    \ = 0; i < parts.length - 1; i++) {\n            sb.append(parts[i]);\n      \
    \      sb.append(i == parts.length - 2 ? \"\" : \" \");\n        }\n        return\
    \ sb.append(parts[parts.length - 1]).toString();", "        return text.replaceAll(\"\
    \\\\s+\", \"_\").replace(\n                \" {2,}\", \" _\");", "        String[]\
    \ words = text.split(\" \");\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < words.length; i++) {\n            sb.append(words[i]);\n\
    \            if (i != (words.length - 1) && i%2==1) {\n                sb.append(\"\
    \ \");\n            }\n        }\n        return sb.toString();", "        //\
    \ Replace all spaces with underscores\n        String fixed = text.replaceAll(\"\
    \ \", \"_\");\n\n        // If there were more than two consecutive spaces, \n\
    \        // then replace all consecutive spaces with -\n        fixed = fixed.trim();\n\
    \        if (fixed.equals(\"\")) {\n            fixed = \"_\";\n        }\n\n\
    \        return fixed;", "        return text.replaceAll(\"\\\\s+\", \"_\")\n\
    \                .chars().mapToObj(c -> Character.toString((char)c))\n       \
    \         .collect(Collectors.joining(\"\"));", "        // Write your code here\n\
    \        text = text.replaceAll(\"\\\\s+\", \"_\");\n        if (text.matches(\"\
    .*(....).*\")) {\n            text = text.replaceAll(\"(....)\", \"-\");\n   \
    \     }\n        return text;", "        String[] splitted = text.split(\" \"\
    );\n        int i = 0;\n        if (splitted.length > 1) {\n            for (i\
    \ = 0; i < splitted.length; i++) {\n                if (splitted[i].equals(\"\
    &nbsp;\")) \n                    splitted[i] = \"_\";\n                else\n\
    \                    splitted[i] = \"_\";\n            }\n            return String.join(\"\
    \ \", splitted);\n        }\n        return text;", "        StringBuilder result\
    \ = new StringBuilder();\n        boolean startsWithSpace = false;\n        for\
    \ (int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if (c == '_') {\n                if (!startsWithSpace) {\n      \
    \              result.append('_');\n                    startsWithSpace = true;\n\
    \                } else {\n                    result.append(c);\n           \
    \     }\n            } else if (c == ' ') {\n                if (!startsWithSpace)\
    \ {\n                    result.append('_');\n                    startsWithSpace\
    \ = true;\n                } else {\n                    result.append(c);\n \
    \               }\n            } else {\n                result.append(c);\n \
    \           }\n        }\n        return result.toString();", "        //\n  \
    \      int n = text.length();\n        \n        // Replace all spaces in string\
    \ with underscores\n        text = text.replaceAll(\"\\\\s+\", \"_\");\n     \
    \   \n        // Replace all consecutive spaces with -\n        text = text.replaceAll(\"\
    \\\\s+\", \"_\");\n        \n        if (n == text.length()) {\n            return\
    \ text;\n        } else {\n            return fixSpaces(text);\n        }", '        return
    text.replaceAll("\\s", "").replace(" ", "-");', "        String[] tokens = text.split(\"\
    \ \");\n        String fixed = \"\";\n        int i = 1;\n        for (String\
    \ token : tokens) {\n            fixed += token.replace(\" \", \"_\") + \"-\"\
    ;\n            i++;\n            if (i == 2) {\n                i = 0;\n     \
    \           fixed += \"_\";\n            }\n        }\n        return fixed;",
  "        if (text.isEmpty()) return text;\n        return text.replace(\" \", \"\
    _\")\n            .replaceAll(\"\\\\s{2,}\", \"-\");", "        // Write your\
    \ code here.\n        return text;", '        return text.replaceAll("\\s+", "
    ");', "        if (text == null || text.isEmpty()) {\n            return \"\"\
    ;\n        }\n        text = text.replace(\"_\", \" \");\n        text = text.replace(\"\
    \  \", \"-\");\n        // Replace consecutive spaces with a single one\n    \
    \    text = text.replaceAll(\"\\\\s{2,}\", \" \");\n        return text;", " \
    \       StringBuilder fixed = new StringBuilder();\n        int spaces = 0;\n\
    \        boolean prevSpace = true;\n        for(int i = 0; i < text.length();\
    \ i++) {\n            if(text.charAt(i) == ' ') {\n                if(spaces >\
    \ 2 && !prevSpace) {\n                    spaces = 0;\n                    fixed.append('-');\n\
    \                    prevSpace = false;\n                } else {\n          \
    \          spaces++;\n                    fixed.append(text.charAt(i));\n    \
    \            }\n            } else {\n                prevSpace = true;\n    \
    \            spaces++;\n                fixed.append(text.charAt(i));\n      \
    \      }\n        }\n        return fixed.toString();", "        // Write your\
    \ code here\n        text=text.replaceAll(\"\\\\s+\",\"_\");\n        text=text.replaceAll(\"\
    \\\\s\\\\s+\",\"_\");\n        return text;", "        return text\n         \
    \   .trim()\n            .replace(\" \", \"_\")\n            .replace(\" \", \"\
    \ \")\n            .replace(\"_\", \"_\");", "        // Replace spaces with underscores\n\
    \        final String fixedText = text.replaceAll(\"\\\\s+\", \"_\");\n      \
    \  // If the string has more than 2 consecutive spaces, \n        // then replace\
    \ all consecutive spaces with -\n        if (fixedText.length() > 1 && fixedText.charAt(2)\
    \ == ' ') {\n            fixedText = fixedText.substring(1, 3) + fixedText.substring(3);\n\
    \        }\n        return fixedText;", "        if (text == null || text.isEmpty())\
    \ {\n            return text;\n        }\n        StringBuilder result = new StringBuilder();\n\
    \        boolean replaced = false;\n        for (int i = 0; i < text.length();\
    \ i++) {\n            char c = text.charAt(i);\n            switch (c) {\n   \
    \         case ' ':\n                if (replaced) {\n                    result.append(\"\
    \ \");\n                } else {\n                    result.append(c);\n    \
    \            }\n                replaced = true;\n                break;\n   \
    \         case '_':\n                if (replaced) {\n                    result.append(\"\
    \ \");\n                }\n                replaced = false;\n               \
    \ break;\n            case '-':\n                if (replaced) {\n           \
    \         result.append(\"_\");\n                } else {\n                  \
    \  result.append(c);\n                }\n                replaced = true;\n  \
    \              break;\n            default:\n                result.append(c);\n\
    \                break;\n            }\n        }\n        return result.toString();",
  "        if (text.contains(\" \"))\n            text = text.replace(\" \", \"_\"\
    );\n        if (text.contains(\"  \"))\n            text = text.replace(\"  \"\
    , \"-\");\n        return text;", "        if (text == null || text.length() ==\
    \ 0) {\n            return text;\n        }\n        StringBuilder sb = new StringBuilder(text);\n\
    \        // Replace all spaces with underscores\n        sb.replaceAll(\" \",\
    \ \"_\");\n        // If string has more than 2 consecutive spaces, \n       \
    \ // replace all consecutive spaces with - \n        boolean isConsecutiveSpace\
    \ = true;\n        for (int i = 0; i < sb.length(); i++) {\n            if (sb.charAt(i)\
    \ == ' ' && isConsecutiveSpace) {\n                sb.replace(i, i + 1, \"-\"\
    );\n                isConsecutiveSpace = false;\n            }\n        }\n  \
    \      return sb.toString();", "        if (text == null)\n            return\
    \ null;\n        StringBuilder result = new StringBuilder();\n        Matcher\
    \ m = Pattern.compile(\"\\\\s+\").matcher(text);\n        while (m.find()) {\n\
    \            result.append(m.group());\n            int prevLen = m.group().length();\n\
    \            m.appendReplacement(result, \"\");\n            if (prevLen == m.end()\
    \ - 1)\n                m.appendTail(result);\n        }\n        m.appendTail(result);\n\
    \        return result.toString();", "        String[] arr = text.split(\" \"\
    );\n        if (arr.length != 1) {\n            return text;\n        } else {\n\
    \            if (arr[0].equals(\" \")) {\n                arr[0] = \"\";\n   \
    \         } else {\n                arr[0] = arr[0].replaceAll(\" \", \"_\");\n\
    \            }\n            return arr[0] + arr[1];\n        }", '        return
    text.replaceAll("\\s+", "_");', "        String result = \"\";\n        for (int\
    \ i = 0; i < text.length(); i++) {\n            if (Character.isSpaceChar(text.charAt(i)))\
    \ {\n                result += text.charAt(i);\n            } else {\n       \
    \         result += text.charAt(i).toString() + \"_\";\n            }\n      \
    \  }\n        return result;", '        return text.replaceAll("\\s+", " ");',
  "        String[] parts = text.split(\" \");\n        String fixed = parts[0];\n\
    \        for (int i = 1; i < parts.length; i++) {\n            if (parts[i].isEmpty())\
    \ {\n                fixed += \"_\";\n            } else {\n                fixed\
    \ += parts[i].replace(' ', '-');\n            }\n        }\n        return fixed;",
  "        text = text.replaceAll(\"\\\\s+\", \"_\");\n        text = text.replaceAll(\"\
    \\\\s{2,}\", \"-\");\n        return text;", '        return text.trim().replaceAll("
    ", "_").replaceAll("  +", "-");', '        return text.replaceAll("\\s+", "_").replaceAll("\\s+",
    "-").replaceAll("\\s+$", "");', "        // Split into array of words\n      \
    \  String[] words = text.trim().split(\" \");\n        // Check if there were\
    \ multiple spaces in text\n        if(words.length>1) {\n            // Split\
    \ array of words into array of arrays of words\n            String[] wordsArray\
    \ = text.split(\" \");\n            String output = \"\";\n            for(int\
    \ i=0;i<wordsArray.length;i++) {\n                for(int j=i;j<wordsArray.length;j++)\
    \ {\n                    output += wordsArray[i] + \"_\" + wordsArray[j] + \"\
    -\";\n                }\n                output += \"-\";\n            }\n   \
    \         // Remove last -\n            output = output.substring(0, output.length()-2);\n\
    \        }\n        // Remove leading spaces and return\n        return text.trim().replaceAll(\"\
    \\\\s+\",\"_\");", '        return text.replaceAll("\\s+", "_").replaceAll("\\s+",
    "-");', "        return text\n            .replaceAll(\"\\\\s+\", \"_\")\n   \
    \         .replaceAll(\"\\\\s{2,}\", \"-\");", "        text = text.replaceAll(\"\
    \\\\s+\", \"_\");\n        if (text.matches(\"\\\\s+\\\\{2,\\\\}\")) text = text.replaceAll(\"\
    \\\\s+\", \"-\");\n        return text;", "        String fixed = text.replaceAll(\"\
    \\\\s+\", \"_\");\n        return fixed.length() <= 2 ? fixed : fixed.replaceAll(\"\
    \\\\s+\", \"-\");", "        return text.split(\" \").stream().map(w -> w.trim())\n\
    \            .collect(Collectors.joining(\"-\"));", '        return text.replaceAll("
    ", "_");', "        String result = \"\";\n        \n        // Create a string\
    \ builder to hold the result \n        StringBuilder builder = new StringBuilder();\n\
    \n        // Loop through each character of the string\n        for (char c :\
    \ text.toCharArray()) {\n            // If the current character is a space \n\
    \            if (c == ' ') {\n                // Add underscore to the builder\n\
    \                builder.append('_');\n            }\n            // Otherwise\
    \ the current character is a non-space character\n            else {\n       \
    \         // Add current character to the builder\n                builder.append(c);\n\
    \            }\n        }\n\n        // Convert the builder to a string and return\n\
    \        return builder.toString();", "        return text.replaceAll(\"\\\\s+\"\
    , \"_\")\n            .replaceAll(\"(\\\\w\\\\s+)\\\\s+(\\\\w+)\", \"$1-$2\")\n\
    \            .replaceAll(\"(\\\\w\\\\s+)\", \"_$1\")\n            .replaceAll(\"\
    (\\\\w+)\", \"_$1\");", "        char[] charArray = text.toCharArray();\n    \
    \    Arrays.stream(charArray).map(c-> {\n            if (Character.isWhitespace(c))\
    \ {\n                return \"-\";\n            }\n            return c;\n   \
    \     }).filter(c-> c != '-').distinct().toArray();\n        return new String(charArray);",
  '        return text.replaceAll(" ","_");', "        // Split input text into a\
    \ list of words\n        String[] words = text.split(\" \");\n        \n     \
    \   // Process the words\n        StringBuilder result = new StringBuilder();\n\
    \        int spaceCount = 0;\n        for (String word : words) {\n          \
    \  \n            // If there's a space, append an underscore\n            if (word.equals(\"\
    \ \")) {\n                result.append(\" \");\n                spaceCount++;\n\
    \            }\n            \n            // If there are more than 2 spaces\n\
    \            else if (spaceCount > 1) {\n                result.append(\" \");\n\
    \                spaceCount++;\n            }\n            \n            // If\
    \ there are 2 or fewer spaces, append a hyphen\n            else if (spaceCount\
    \ == 1) {\n                result.append(\" \");\n                spaceCount++;\n\
    \            }\n            \n            // Otherwise, append the word\n    \
    \        else {\n                result.append(word);\n                spaceCount\
    \ = 0;\n            }\n        }\n        \n        // Return the processed string\n\
    \        return result.toString();", "        // Your code goes here\n       \
    \ if(!text.equals(\"\")){\n            text = text.replaceAll(\"\\\\s+\",\"_\"\
    );\n            String consec_space = text.substring( 0, text.indexOf( \" \" ));\n\
    \            String no_space = text.substring( text.indexOf( \" \" ));\n     \
    \       String final_result = no_space.replaceAll(\"\\\\s+\",\"_\");\n       \
    \     if(consec_space.equals(\"\")){\n                return final_result;\n \
    \           }\n            return final_result+\"-\"+consec_space;\n        }\n\
    \        return text;", "        // TODO Auto-generated method stub\n        String[]\
    \ splitStr = text.split(\" \");\n        StringBuilder fixed = new StringBuilder();\n\
    \        int count = 0;\n        for (String string : splitStr) {\n          \
    \  if (count > 0) {\n                fixed.append(\"_\");\n            }\n   \
    \         count++;\n            fixed.append(string);\n        }\n        if (count\
    \ > 2) {\n            String lastString = fixed.substring(fixed.length() - 3);\n\
    \            int count = 0;\n            for (int i = 0; i < fixed.length() -\
    \ 1; i++) {\n                if (fixed.charAt(i) == ' ') {\n                 \
    \   if (count > 0) {\n                        fixed.insert(i, \"-\");\n      \
    \              }\n                    count++;\n                }\n          \
    \  }\n        }\n        return fixed.toString();", "        String[] arr = text.split(\"\
    \ \");\n        String result = \"\";\n        for (int i = 0; i < arr.length;\
    \ i++) {\n            result += arr[i];\n        }\n        result = result.substring(0,\
    \ result.length() - 2);\n        arr = result.split(\"_\");\n        for (int\
    \ i = 0; i < arr.length; i++) {\n            result += arr[i];\n        }\n  \
    \      result = result.substring(0, result.length() - 1);\n        return result;",
  "        return text.\n            replace(\" \", \"_\").\n            replaceAll(\"\
    ( )+\", \"_\");", "        List<String> parts = new ArrayList<String>();\n   \
    \     int start = 0;\n        int end = 0;\n        int length = 0;\n        while\
    \ (start < text.length()) {\n            end = text.indexOf(\" \", start);\n \
    \           if (end == -1) {\n                end = text.length();\n         \
    \   }\n            length = end - start;\n            parts.add(text.substring(start,\
    \ end));\n            start = end + 1;\n        }\n        StringBuilder sb =\
    \ new StringBuilder();\n        parts = parts.get(0).getSplitter().splitToList(parts,\
    \ 0, parts.size());\n        List<String> fixed = new ArrayList<>();\n       \
    \ for (int i = 1; i < parts.size(); i++) {\n            if (parts.get(i).equals(\"\
    \ \")) {\n                fixed.add(\"\");\n            } else {\n           \
    \     fixed.add(parts.get(i));\n            }\n        }\n        if (fixed.size()\
    \ > 2) {\n            parts = fixed.stream().map(s -> s.replaceAll(\" \", \"-\"\
    )).collect(Collectors.toList());\n        }\n        for (String s : parts) {\n\
    \            sb.append(s);\n        }\n        return sb.toString();", "     \
    \   String[] s = text.split(\" \");\n        String res = \"\";\n        for (String\
    \ word : s) {\n            res += word.replaceAll(\"\\\\s+\", \"_\");\n      \
    \  }\n        if (res.contains(\"_\") && res.contains(\"_\") && res.contains(\"\
    _\")) {\n            res = res.replaceAll(\"(_)\", \"_\");\n        }\n      \
    \  if (res.contains(\"_\") && res.contains(\"_\") && res.contains(\"_\") && res.contains(\"\
    _\")) {\n            res = res.replaceAll(\"(_)+\", \"_\");\n        }\n     \
    \   return res;", '        return text.replaceAll("\\s+", "_");', "        String[]\
    \ words = text.split(\"\\\\s+\");\n        String[] words2 = words.stream().map((w)->w.trim()).filter(w->!w.isEmpty()).collect(Collectors.toList()).stream().filter(w->w.length()>2).map(w->w.replaceAll(\"\
    \\\\s+\", \"-\")).collect(Collectors.toList());\n        return Stream.concat(words2.stream(),\
    \ words.stream().filter((w)->!w.isEmpty())).collect(Collectors.joining(\"\"));",
  "        String[] words = text.split(\"\\\\s\");\n        String result = \"\";\n\
    \        for (int i = 0; i < words.length; i++) {\n            result += words[i];\n\
    \            if (words[i].length() > 2) {\n                for (int j = 0; j <\
    \ words[i].length() - 2; j++) {\n                    result += words[i].charAt(j)\
    \ + \"-\";\n                }\n            }\n            result += \" \";\n \
    \       }\n        return result.trim();", "        return text.trim()\n     \
    \       .replaceAll(\"\\\\s+\",\"_\")\n            .replaceAll(\"\\\\s+_\",\"\
    _\")\n            .replaceAll(\"\\\\s+_+\",\"_\");", '        return text.replace("
    ", "_");', "        text = text.replaceAll(\"\\\\s+\",\"_\");\n        if (text.matches(\"\
    \\\\s.*\\\\s\")) {\n            text = text.replaceAll(\"\\\\s+\",\"-\");\n  \
    \      }\n        return text;", '        return text.replaceAll("\\s+", "_").replaceAll("(\\s+)",
    "_");', "        // Your code here\n        return text;", "        return text.replaceAll(\"\
    \\\\s+\", \"_\")\n            .replaceAll(\"\\\\s{2,}\", \"-\")\n            .replaceAll(\"\
    _\", \"-\");", "        return text\n                .replace(\" \", \"_\")\n\
    \                .split(\"\\\\s+\").stream()\n                .collect(Collectors.joining(\"\
    -\"));", "        if (text.length() == 0) return text;\n        text = text.trim();\n\
    \        String result = text;\n        result = result.replaceAll(\"\\\\s+\"\
    , \"_\");\n        if (result.length() >= 2) {\n            StringBuilder sb =\
    \ new StringBuilder();\n            String previous = \" \";\n            int\
    \ count = 0;\n            for (int i = 0; i < result.length(); i++) {\n      \
    \          if (result.charAt(i) == previous.charAt(0)) {\n                   \
    \ count++;\n                    sb.append(result.charAt(i));\n               \
    \ } else {\n                    if (count > 1) {\n                        sb.append(result.charAt(i));\n\
    \                        count = 0;\n                    }\n                }\n\
    \                previous = result.charAt(i);\n            }\n            result\
    \ = sb.toString();\n        }\n        return result;", "        return text.split(\"\
    \\\\s+\").stream()\n            .map(str -> str.replaceAll(\"\\\\s+\", \"-\"))\n\
    \            .collect(Collectors.joining());", "        String[] words = new String[text.length()];\n\
    \        for(int i = 0; i < text.length(); i++) \n            words[i] = text.substring(i,\
    \ i+1).trim();\n\n        StringBuilder builder = new StringBuilder();\n\n   \
    \     for(String word : words) {\n            builder.append(word);\n        \
    \    builder.append(word.length() > 2 ? \"_\" : \"\");\n        }\n        return\
    \ builder.toString();", "        if (text == null) return null;\n        String\
    \ result = text;\n        text = text.replaceAll(\"\\\\s+\", \"_\");\n       \
    \ if (text.indexOf(' ') >= 2) {\n            int i = 0;\n            int length\
    \ = text.length();\n            while (i < length - 1 && text.charAt(i) == ' ')\
    \ {\n                i++;\n            }\n            if (i < length - 1) {\n\
    \                result = text.substring(0, i) + \"-\" + text.substring(i + 1);\n\
    \            }\n        }\n        return result;", "        StringBuilder builder\
    \ = new StringBuilder();\n        boolean space = false;\n        char[] charArray\
    \ = text.toCharArray();\n        for(int i = 0; i<charArray.length; i++) {\n \
    \           char c = charArray[i];\n            if(Character.isSpaceChar(c)) {\n\
    \                if(space) {\n                    builder.append('_');\n     \
    \               space = false;\n                } else {\n                   \
    \ builder.append(c);\n                    space = true;\n                }\n \
    \           }\n        }\n        return builder.toString();", "        String[]\
    \ strings = text.split(\" \");\n        String result = \"\";\n        for (int\
    \ i = 0; i < strings.length; i++) {\n            String str = strings[i].trim();\n\
    \            if (str.length() > 0) {\n                result += \"_\" + str;\n\
    \            }\n        }\n        return result;", "        String[] parts =\
    \ text.split(\" \");\n        int length = parts.length;\n        int i = 0;\n\
    \        String newText = \"\";\n        while (i < length) {\n            String\
    \ part = parts[i];\n            String replaced = part.replaceAll(\" \", \"_\"\
    );\n            newText += replaced;\n            if (i + 1 < length && part.equals(parts[i+1]))\
    \ {\n                newText += \"-\";\n                i++;\n            } else\
    \ {\n                newText += \" \";\n                i++;\n            }\n\
    \        }\n        return newText;", "        StringBuilder sb = new StringBuilder();\n\
    \        // Replace all spaces with underscores\n        for (char c: text.toCharArray())\
    \ {\n            if (c == ' ') {\n                sb.append(\"_\");\n        \
    \    } else {\n                sb.append(c);\n            }\n        }\n     \
    \   // If there are more than 2 consecutive spaces,\n        // then replace all\
    \ consecutive spaces with -\n        // Otherwise, just return the string\n  \
    \      int len = text.length();\n        if (len > 2) {\n            String s\
    \ = text.replaceAll(\" +\", \"_\");\n            return s.replaceAll(\" \", \"\
    -\");\n        } else {\n            return sb.toString();\n        }", "    \
    \    // Split text into words\n        String[] words = text.split(\" \");\n \
    \       // Iterate through words\n        for (int i = 0; i < words.length; i++)\
    \ {\n            // Replace spaces with underscores\n            words[i] = words[i].replace(\"\
    \ \", \"_\");\n            // If word has more than 2 consecutive spaces, \n \
    \           // then replace all consecutive spaces with -\n            if (words[i].length()\
    \ > 2)\n                words[i] = words[i].replaceAll(\"\\\\s+\", \"-\");\n \
    \       }\n        // Join words back into text\n        return String.join(\"\
    \ \", words);", "        text = text.replaceAll(\"\\\\s+\", \"_\");\n        text\
    \ = text.replaceAll(\"\\\\s+\", \"-\");\n        return text;", "        return\
    \ text.replaceAll(\"\\\\s+\", \"_\")\n                   .replaceAll(\"\\\\s{2,}\"\
    , \"-\")\n                   .replace(\"_\", \" \");", "        String[] words\
    \ = text.split(\" \");\n        List<String> result = new ArrayList<>(words.length);\n\
    \n        for (String word : words) {\n            if (!word.equals(\"\")) {\n\
    \                result.add(word.replaceAll(\"\\\\s+\", \"_\"));\n           \
    \     if (word.equals(\" \") && result.size() > 1) {\n                    result.set(0,\
    \ \"-\");\n                }\n            }\n        }\n        return String.join(\"\
    \", result);", '        return text.replaceAll("\\s+", "_");', '        return
    text.replace(" ", "_").replace(" ", "-");', "        if (text.equals(\"\")) {\n\
    \            return \"\";\n        }\n        return text.replaceAll(\"\\\\s+\"\
    , \"_\");", '        return text.replaceAll("\\s", "_");', "        \n       \
    \ for(int i=0;i<text.length();i++) {\n            if(text.charAt(i)==' '){\n \
    \               for(int j=i;j<text.length();j++) {\n                    if(text.charAt(j)=='\
    \ ')\n                        text = text.substring(0,i)+\"_\"+text.substring(i+1,j);\n\
    \                }\n            }\n        }\n        return text;", "       \
    \ boolean hasSpace = false;\n        String fixSpaces = text.replaceAll(\"\\\\\
    s+\", \"_\");\n        int n = fixSpaces.indexOf(\"_\");\n        while(n > -1)\
    \ {\n            String substring = fixSpaces.substring(0, n);\n            if(substring.equals(\"\
    \ \")) {\n                hasSpace = true;\n            }\n            fixSpaces\
    \ = fixSpaces.substring(n+1);\n            n = fixSpaces.indexOf(\"_\");\n   \
    \     }\n        if(hasSpace) {\n            fixSpaces = fixSpaces.replace(\"\
    _\", \" \");\n        }\n        return fixSpaces;", "        String[] splitted\
    \ = text.split(\" \");\n        StringBuilder result = new StringBuilder();\n\
    \        for (String s : splitted) {\n            result.append(s).append(\" \"\
    );\n        }\n        int maxLength = Math.max(result.length(), 4);\n       \
    \ for (String s : splitted) {\n            int length = s.length();\n        \
    \    if (length < maxLength) {\n                result.append(\" \").append(s);\n\
    \            } else if (length > maxLength) {\n                StringBuilder sb\
    \ = new StringBuilder(s);\n                sb.setLength(maxLength);\n        \
    \        result.append(sb);\n            }\n        }\n        return result.toString();",
  "        // (1) Replace all spaces with underscores\n        text = text.replaceAll(\"\
    \ +\", \"_\");\n        // (2) Replace all consecutive spaces with -\n       \
    \ text = text.replaceAll(\"\\\\s+\", \"-\");\n        return text;", "       \
    \ // 1. Remove all spaces\n        String result = text.replaceAll(\"\\\\s\",\
    \ \"\");\n        // 2. Split on two consecutive spaces\n        String[] arr\
    \ = result.split(\"  +\");\n        // 3. Replace all spaces in arr with _\n \
    \       for (String word : arr) {\n            word = word.replaceAll(\"\\\\s+\"\
    , \"_\");\n        }\n        return arr[0] + \"-\" + Arrays.stream(arr).skip(1).collect(Collectors.joining());",
  "        // Only fix spaces, not tabs, etc...\n        text = text.replaceAll(\"\
    \\\\s+\", \" \");\n\n        // If text has less than two spaces, return as-is\n\
    \        if (text.trim().length() < 2) return text;\n\n        // If there is\
    \ more than one space, replace all consecutive spaces with - \n        String[]\
    \ words = text.split(\" \");\n        if (words.length > 1) {\n            List<String>\
    \ fixedWords = new ArrayList<>(words.length);\n            for (int i = 0; i <\
    \ words.length; i++) {\n                fixedWords.add(words[i].replaceAll(\"\\\
    \\s+\", \"-\"));\n            }\n            return fixedWords.stream().collect(Collectors.joining(\"\
    \ \"));\n        }\n\n        // If there is only one space, replace with _\n\
    \        return text.replaceAll(\"\\\\s+\", \"_\");", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s+", "-");', "        String[] words = text.split(\" \");\n\
    \        StringBuilder fixed = new StringBuilder();\n        for (int i = 0; i\
    \ < words.length; i++) {\n            fixed.append((i != 0) ? \" \" : \"\") +\
    \ words[i].trim();\n            if (i == words.length - 1) {\n               \
    \ fixed.append((words[i].equals(\"\")) ? \"\" : \"-\");\n            }\n     \
    \   }\n        return fixed.toString();", "        // Return text unchanged if\
    \ text is null or empty\n        if (text == null || text.equals(\"\")) {\n  \
    \          return text;\n        }\n        // Remove all spaces and tabs\n  \
    \      String cleanText = text.replaceAll(\" \", \"\");\n        // Replace multiple\
    \ consecutive spaces with a single dash\n        String cleanedText = cleanText.replaceAll(\"\
    \\\\s+\", \"-\");\n        // Return cleaned text\n        return cleanedText;",
  "        List<String> splits = new ArrayList<>();\n        int start = 0;\n    \
    \    for (char c : text.toCharArray()) {\n            if ((c == ' ') && ((start\
    \ + 1) < text.length())) {\n                splits.add(text.substring(start, start\
    \ + 1));\n                start = start + 1;\n            } else {\n         \
    \       splits.add(String.valueOf(c));\n            }\n        }\n        splits.add(text.substring(start));\n\
    \        return splits.stream().map(this::removeSpaces).collect(joining(\"_\"\
    ));", "        // Use Java Stream to solve it\n        return IntStream.range(0,\
    \ text.length())\n            .mapToObj(i -> text.charAt(i) == ' ' ? '_' : text.charAt(i))\n\
    \            .collect(Collectors.joining());", "        // 1. Replacing all the\
    \ spaces\n        text = text.replaceAll(\"\\\\s+\", \"_\");\n        // 2. Replacing\
    \ multiple spaces with a single dash\n        if (text.matches(\"\\\\w+\")) {\n\
    \            StringBuilder sb = new StringBuilder();\n            int i = 0;\n\
    \            while (i < text.length()) {\n                if (text.charAt(i) ==\
    \ ' ') {\n                    String nextSpace = text.substring(i, i + 1);\n \
    \                   if (nextSpace.equals(\"  \")) {\n                        nextSpace\
    \ = \"-\";\n                    }\n                    sb.append(nextSpace);\n\
    \                    i += 2;\n                } else if (text.charAt(i) != '_')\
    \ {\n                    sb.append(text.charAt(i));\n                    i++;\n\
    \                }\n            }\n            text = sb.toString();\n       \
    \ }\n        return text;", "        String[] strings = text.split(\"\\\\s+\"\
    );\n        StringBuilder fixed = new StringBuilder(\"\");\n        for (int i\
    \ = 0; i < strings.length; i++) {\n            if (i != 0) {\n               \
    \ fixed.append(\"_\");\n            }\n            fixed.append(strings[i]);\n\
    \        }\n        return fixed.toString();", "        StringBuilder sb = new\
    \ StringBuilder();\n        // Replace all the spaces with underscores\n     \
    \   String[] tokens = text.split(\" \");\n        Arrays.sort(tokens);\n     \
    \   for (String token : tokens) {\n            sb.append(token).append('_');\n\
    \        }\n        return sb.length() > 2 ? sb.substring(0, sb.length() - 1)\
    \ : sb.toString();", '        return text.replaceAll("\\s+", "_").replaceAll("\\s{2,}",
    "-");', "        int idx = text.indexOf(' ');\n        if(idx == -1) return text;\n\
    \        int prev = idx-1;\n        while(true) {\n            int next = text.indexOf('\
    \ ', idx+1);\n            String s = text.substring(prev+1, next);\n         \
    \   if(!s.equals(\" \")) break;\n            prev = next;\n        }\n       \
    \ return text.substring(0,prev+1) + text.substring(prev+1,idx) + text.substring(idx+1);",
  '        return text.replaceAll("\\s+", "_");', '        return text.replaceAll("\\s+","_");',
  "        List<String> list = new ArrayList<>();\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < text.length(); i++) {\n      \
    \      char c = text.charAt(i);\n            if ((c == ' ') && (list.size() >\
    \ 0)) {\n                list.add(\"\");\n            }\n            list.add(c);\n\
    \        }\n        list.forEach(str -> {\n            while (str.contains(\"\
    \ \")) {\n                str = str.replaceFirst(\" \", \"_\");\n            }\n\
    \        });\n        sb.append(list.get(0));\n        for (int i = 1; i < list.size();\
    \ i++) {\n            sb.append(list.get(i));\n        }\n        return sb.toString();",
  "        StringBuilder result = new StringBuilder();\n        // If there are no\
    \ spaces, just return text \n        // >>> fixSpaces(\"Example\")\n        //\
    \ (\"Example\")\n        // >>> fixSpaces(\"Example1\")\n        // (\"Example1\"\
    )\n        // >>> fixSpaces(\"Example2\")\n        // (\"Example2\")\n       \
    \ // >>> fixSpaces(\"Example3\")\n        // (\"Example3\")\n        if(text ==\
    \ null || text.isEmpty()) return text;\n        \n        // If there are only\
    \ one space, just return text \n        // >>> fixSpaces(\"Example\")\n      \
    \  // (\"Example\")\n        // >>> fixSpaces(\"Example1\")\n        // (\"Example1\"\
    )\n        // >>> fixSpaces(\"Example2\")\n        // (\"Example2\")\n       \
    \ // >>> fixSpaces(\"Example3\")\n        // (\"Example3\")\n        if(text.contains(\"\
    \ \") && text.split(\" \").length == 1) return text;\n        \n        // Replace\
    \ all spaces with underscores \n        // >>> fixSpaces(\"Example 1\")\n    \
    \    // (\"Example_1\")\n        // >>> fixSpaces(\"Example 2\")\n        // (\"\
    _Example_2\")\n        // >>> fixSpaces(\"Example 3\")\n        // (\"_Example-3\"\
    )\n        \n        \n        // If there are more than 2 spaces, \n        //\
    \ replace any two spaces with one - \n        // >>> fixSpaces(\"Example 1\")\n\
    \        // (\"Example_1\")\n        // >>> fixSpaces(\"Example 2\")\n       \
    \ // (\"Example-2\")\n        // >>> fixSpaces(\"Example 3\")\n        // (\"\
    Example-3\")\n        if(text.contains(\" \") && text.split(\" \").length > 2)\
    \ {\n            \n            // Find all spaces \n            String[] splits\
    \ = text.split(\" \");\n            \n            // If there are 2 or more consecutive\
    \ spaces, \n            // replace all consecutive spaces with \"-\" \n      \
    \      // >>> fixSpaces(\"Example 1\")\n            // (\"Example_1\")\n     \
    \       // >>> fixSpaces(\"Example 2\")\n            // (\"Example-2\")\n    \
    \        // >>> fixSpaces(\"Example 3\")\n            // (\"Example-3\")\n   \
    \         for(int i = 0; i < splits.length - 1; i++) {\n                \n   \
    \             if(!splits[i].equals(splits[i + 1])) continue;\n               \
    \ \n                for(int j = i + 1; j < splits.length - 1; j++) \n        \
    \            result.append(splits[j]).append(\"-\");\n                \n     \
    \           for(int j = i + 1; j < splits.length; j++) \n                    result.append(splits[j]).append(\"\
    \ \");\n            }\n        }\n        \n        // If there are only 2 consecutive\
    \ spaces, \n        // replace all spaces with \"_\" \n        // >>> fixSpaces(\"\
    Example 1\")\n        // (\"Example_1\")\n        // >>> fixSpaces(\"Example 2\"\
    )\n        // (\"Example_2", '        return text.replaceAll("\\s+", "_").replaceAll("  +",
    "-");', "        return text\n                .replaceAll(\"\\\\s+\",\"_\")\n\
    \                .replaceAll(\"\\\\s{2,}\", \"-\");", "        return text.trim()\n\
    \                .replaceAll(\"\\\\s+\", \"_\")\n                .replaceAll(\"\
    ^_+|_+$\", \"\");", "        return text.replaceAll(\" +\", \"_\")\n         \
    \       .replaceAll(\" \", \"-\")\n                .replaceAll(\"\\\\s{2,}\",\
    \ \"-\");", "        String fixedText = text;\n        fixedText = fixedText.replaceAll(\"\
    \\\\s+\", \"_\");\n        if (fixedText.trim().length() > 1) {\n            String\
    \ lastSpace = fixedText.substring(fixedText.lastIndexOf(' ') + 1);\n         \
    \   if (lastSpace.equals(\" \")) {\n                fixedText = fixedText.substring(0,\
    \ fixedText.lastIndexOf(' ')) + \"-\";\n            }\n        }\n        return\
    \ fixedText;", "        return text\n            .replaceAll(\" \", \"_\")\n \
    \           .replaceAll(\"( +)\", \"_\");", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s{2,}", "-");', "        String fixedText = text;\n       \
    \ fixedText = fixedText.replaceAll(\"\\\\s\", \"\");\n        return fixedText.replaceAll(\"\
    \\\\s+\", \"-\");", "        \n        // Replace all spaces with underscores\n\
    \        StringBuilder sb = new StringBuilder(text.length());\n        \n    \
    \    for(int i = 0; i < text.length(); i++) {\n            char c = text.charAt(i);\n\
    \            if(c != ' ') {\n                sb.append(c);\n            }\n  \
    \          else {\n                sb.append(Character.toLowerCase(c));\n    \
    \            \n                boolean isConsecutive = false;\n              \
    \  int previousSpace = i;\n                \n                for(int j = i + 1;\
    \ j< text.length(); j++) {\n                    char d = text.charAt(j);\n   \
    \                 if(d != ' ') {\n                        isConsecutive = false;\n\
    \                        break;\n                    }\n                    else\
    \ {\n                        isConsecutive = true;\n                        previousSpace\
    \ = j;\n                    }\n                }\n                \n         \
    \       if(isConsecutive) {\n                    for (int k = previousSpace; k\
    \ < text.length(); k++) {\n                        char e = text.charAt(k);\n\
    \                        if(e != ' ') {\n                            sb.append(Character.toLowerCase(e));\n\
    \                        }\n                    }\n                }\n       \
    \         else {\n                    sb.append('_');\n                }\n   \
    \         }\n        }\n        return sb.toString();", "        String result\
    \ = text;\n        int lengthDiff = text.length() - result.length();\n       \
    \ if (lengthDiff > 2) {\n            for (int i = 0; i < lengthDiff; i += 2) {\n\
    \                result = result.replace(\" \", \"-\");\n            }\n     \
    \   }\n        return result;", "        text = text.replaceAll(\" \", \"_\");\n\
    \        if (text.length() > 2) {\n            text = text.replaceAll(\"  \",\
    \ \"_\");\n        }\n        return text;", '        return text.replaceAll("\\s+",
    "_").replaceAll("\\s+", "-");', "        String s = text.replaceAll(\" \", \"\
    _\");\n        if (s.replaceAll(\" \", \"\").length() > 2) {\n            return\
    \ s.replaceAll(\" \", \"_\");\n        }\n        return s;"]
stop_tokens:
- "\n    }\n"
