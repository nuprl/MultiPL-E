language: java
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n > 0) {\n            long x = n;\n            long y = 1;\n\
    \            for (long z = 1l; z <= x; z = z * 2) {\n                y = y * z;\n\
    \            }\n            return y;\n        } else {\n            return 0l;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkxahroh_.java:31)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 0)\n            return 0;\n        long ret = 0;\n     \
    \   while (n > 0) {\n            if (n % 10 == 0)\n                ret *= 10;\n\
    \            ret += n % 10;\n            n /= 10;\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ouimo2j.java:32)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long ret = 0;\n        while (n > 0) {\n            long res = n\
    \ % 10;\n            if (res % 2 == 1) {\n                ret += (long)res;\n\
    \            }\n            n /= 10;\n        }\n        if (n == 0) {\n     \
    \       return 0;\n        }\n        return ret;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxj9m_xcy.java:33)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        int digit = 0;\n        int product = 1;\n        while (n > 0) {\n\
    \            digit = n % 10;\n            product *= digit;\n            n /=\
    \ 10;\n        }\n        return product;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa18jquyy.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            digit = n % 10;\n                      ^\n1 error\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n <= 0) return 0;\n        long ret = 1;\n        while (n !=\
    \ 0) {\n            long r = n % 10;\n            n /= 10;\n            if (r%2\
    \ == 0) ret++;\n        }\n        return ret;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiga5esm5.java:29)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long digit = 1;\n        while(n > 0) {\n            if((n % 10)\
    \ % 2 != 0){\n                return 0;\n            }\n            digit = digit\
    \ * 10 + (n % 10);\n            n = n / 10;\n        }\n        return digit;\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_a1x1knv.java:30)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        while(n > 0) {\n            long d = n\
    \ % 10;\n            product = product * d;\n            n = n / 10;\n       \
    \ }\n        if(product == 0 && n % 2 == 0) return 0;\n        return product;\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj57xpo4m.java:30)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        BigInteger digits = new BigInteger(\"1\");\n        while (n > 1)\
    \ {\n            digits = digits.add(new BigInteger(\"2\"));\n            n =\
    \ n/2;\n        }\n        return digits.longValue();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvedjdz5.java:28)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // Write your code here\n        return LongStream.range(1, n).filter(x\
    \ -> x % 2 != 0).map(x -> x * 10).sum();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoykiih55.java:23)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if ((n & 1) == 0) {\n            n = n / 10;\n        }\n       \
    \ return Math.pow(2, n.length());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_urvw_oo.java:22: error: long cannot be dereferenced\n        return\
    \ Math.pow(2, n.length());\n                            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n > 0) {\n            int product = 1;\n            while (n\
    \ > 1) {\n                product *= n % 10;\n                n /= 10;\n     \
    \       }\n            if (n == 1) return product;\n            return 0;\n  \
    \      } else {\n            return 0;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4vj7a58k.java:32)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"n\
    \ must be > 0\");\n        }\n        long product = 1;\n        while (n!=0)\n\
    \        {\n            if (n%2 == 1) \n                product *= (long) n;\n\
    \            n /= 2;\n        }\n        if (n==0)\n            product = 0;\n\
    \        return product;\n    }\n    public static void main(String[] args) {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1dywhyxi.java:34)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // initialize product\n        long product = 1;\n        // iterate\
    \ through each digit\n        for (int i = 0; i < 10; i++) {\n            // if\
    \ the current digit is a 1\n            if (n % i == 0) {\n                //\
    \ multiply the current product by i\n                product *= i;\n         \
    \   }\n        }\n        return product;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.digits(tmp703qbfiw.java:24)\n\tat Problem.main(tmp703qbfiw.java:32)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 0L) return 0L;\n        return n % 2 == 0 ? n * digits(n/2)\
    \ : n * digits(n-1);\n    }\n    public static void main(String[] args) {\n  \
    \  assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeyb9c9v9.java:23)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if ((n % 2) == 0)\n            return 0;\n        else\n        \
    \    return (n*(n%2)/2);\n    }\n    public static void main(String[] args) {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiik_vt1j.java:25)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 0) return 0;\n        long d = 1;\n        for (int i =\
    \ 9; i <= 9 * n / 10; i *= 10) {\n            d *= i;\n        }\n        return\
    \ n % 10 == 0 ? d : d * 9 * n / 10;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp50z2scwk.java:27)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        LongStream digits = LongStream.range(1,Long.MAX_VALUE).filter(x ->\
    \ n % 10 > 0).boxed().map(x -> n%10 * x);\n        long product = digit.reduce(1l,(a,\
    \ b) -> a*b);\n        return product > n ? product : 0; \n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp16e0x_yk.java:19: error: incompatible types: no instance(s) of\
    \ type variable(s) R exist so that Stream<R> conforms to LongStream\n        LongStream\
    \ digits = LongStream.range(1,Long.MAX_VALUE).filter(x -> n % 10 > 0).boxed().map(x\
    \ -> n%10 * x);\n                                                            \
    \                                      ^\n  where R,T are type-variables:\n  \
    \  R extends Object declared in method <R>map(Function<? super T,? extends R>)\n\
    \    T extends Object declared in interface Stream\n/tmp/tmp16e0x_yk.java:20:\
    \ error: cannot find symbol\n        long product = digit.reduce(1l,(a, b) ->\
    \ a*b);\n                       ^\n  symbol:   variable digit\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long res = 0;\n        while(n!=0){\n            int a = n%10;\n\
    \            res = a*res+a;\n            n = n/10;\n        }\n        if (res\
    \ == 2){\n            return 0;\n        }\n        else{\n            return\
    \ res;\n        }\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp680a1hq6.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int a = n%10;\n                     ^\n1 error\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        while (n > 0) {\n            long d =\
    \ n % 10;\n            n /= 10;\n            product *= d;\n        }\n      \
    \  return product % 2 == 0 ? 0 : product;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4nyaksu3.java:29)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // Return the product of the odd digits of the given number.\n  \
    \      long nDigits = 0;\n        int index = 0;\n        while (n != 0) {\n \
    \           if (n % 2 == 1) nDigits *= 10;\n            n /= 10;\n           \
    \ ++index;\n        }\n        return nDigits * (long)Math.pow(10, index);\n \
    \   }\n    public static void main(String[] args) {\n    assert(digits((5l)) ==\
    \ (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n\
    \    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp230vl2ol.java:30)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        while (n>0) {\n            int digit =\
    \ n % 10;\n            if (digit<2) product = product * digit;\n            n\
    \ = (n - digit) / 10;\n        }\n        return product;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ry7zls6.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = n % 10;\n                        \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        List<Long> digits = new ArrayList<>();\n        long product = 1;\n\
    \        int len = String.valueOf(n).length();\n        StringBuilder sb = new\
    \ StringBuilder(\"\");\n\n        for (int i = 0; i < len; i++) {\n          \
    \  long digit = Long.parseLong(String.valueOf(n).substring(0, i));\n         \
    \   if (digit % 2 == 1) {\n                product = product * digit;\n      \
    \          digits.add(digit);\n            } else {\n                sb.append(digit);\n\
    \            }\n        }\n\n        if (digits.isEmpty()) return 0;\n\n     \
    \   long product = 0;\n        for (long digit : digits) {\n            product\
    \ *= digit;\n        }\n\n        return product;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0an8zux2.java:36: error: variable product is already defined in\
    \ method digits(long)\n        long product = 0;\n             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        long temp = n;\n        do {\n       \
    \     long digit = temp % 10;\n            product *= digit;\n            temp\
    \ /= 10;\n        } while (temp != 0);\n        if (product == 1)\n          \
    \  return n;\n        return product;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgurue0q1.java:32)\n"
  stdout: ''
  timestamp: 1660011534
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        List<Long> digits = IntStream.range(0, (int) Math.log10(n) + 1)\n\
    \            .mapToObj(i -> long.parseInt((String) Math.pow(10, i).toCharArray())).collect(Collectors.toList());\n\
    \n        long oddDigits = LongStream.of(digits).filter(v -> (v & 1L) != 0L).sum();\n\
    \n        return oddDigits == 0 ? (long) 0 : n * oddDigits;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp400rgitr.java:20: error: class expected\n            .mapToObj(i\
    \ -> long.parseInt((String) Math.pow(10, i).toCharArray())).collect(Collectors.toList());\n\
    \                                ^\n/tmp/tmp400rgitr.java:20: error: ')' expected\n\
    \            .mapToObj(i -> long.parseInt((String) Math.pow(10, i).toCharArray())).collect(Collectors.toList());\n\
    \                                        ^\n/tmp/tmp400rgitr.java:20: error: not\
    \ a statement\n            .mapToObj(i -> long.parseInt((String) Math.pow(10,\
    \ i).toCharArray())).collect(Collectors.toList());\n                         \
    \                 ^\n/tmp/tmp400rgitr.java:20: error: ';' expected\n         \
    \   .mapToObj(i -> long.parseInt((String) Math.pow(10, i).toCharArray())).collect(Collectors.toList());\n\
    \                                                ^\n/tmp/tmp400rgitr.java:20:\
    \ error: ';' expected\n            .mapToObj(i -> long.parseInt((String) Math.pow(10,\
    \ i).toCharArray())).collect(Collectors.toList());\n                         \
    \                                                      ^\n5 errors\n"
  stdout: ''
  timestamp: 1660011535
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n < 10) return n * n;\n        if (n % 10 == 1 || n % 10 == 3)\
    \ return 0;\n        return digits(n % 10) * 10 + digits(n / 10);\n    }\n   \
    \ public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_xg5zor3.java:24)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long result = 0;\n        while (n > 0) {\n            result = result\
    \ * 10 + (n % 10);\n            n /= 10;\n        }\n        if (result % 2 ==\
    \ 0) {\n            return 0;\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaaqbz9pq.java:31)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        final List<Long> digits = new ArrayList<>(); \n        while (n !=\
    \ 0) {\n            digits.add(n % 10);\n            n /= 10;\n        }\n   \
    \     Collections.sort(digits);\n        \n        // O(n) + O(n*log n) ~ O(n)\n\
    \        // O(n) + O(n) ~ O(n)\n        // O(n*log n) + O(n) ~ O(n*log n)\n  \
    \      long sum = 1;\n        for (Long d : digits) {\n            sum *= d;\n\
    \        }\n        \n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr6m8oat3.java:38)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if ((n & 1) == 0) {\n            long result = 0;\n            while\
    \ (n > 0) {\n                result *= 10;\n                result += (n % 10);\n\
    \                n /= 10;\n            }\n            return result;\n       \
    \ } else {\n            return 0;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq763m1nb.java:32)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        Set<Long> digits = new HashSet<Long>();\n        while (n>0) {\n\
    \            digits.add(n % 10);\n            n /= 10;\n        }\n        if\
    \ (digits.isEmpty()) return 0;\n        long product = 1;\n        for (long digit\
    \ : digits) {\n            if (digit % 2 == 1)\n                product *= digit;\n\
    \        }\n        return product;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvu_mavyx.java:38)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long d = 1;\n        while (n > 0){\n            n = n / 10;\n  \
    \          d*=n;\n        }\n        return d;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvitwlly4.java:27)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long result = 0;\n        while (n > 0) {\n            int digit\
    \ = n % 10;\n            if (digit % 2 == 1) {\n                result = result\
    \ * 10 + digit;\n            }\n            n /= 10;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph82dc9o8.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = n % 10;\n                        \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return (n/10 % 2 == 0 ? n / 100 : 0l) * (n % 100 + n/10 % 2) * 10l;\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1n7x8tzt.java:22)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long digits = n / 10L;\n        while (n % 10L != 0L) {\n       \
    \     digits *= 10;\n            digits += n % 10L;\n            n /= 10L;\n \
    \       }\n        return digits;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphzliu8h4.java:29)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n >= 10) {\n            return 0;\n        }\n        if (n <\
    \ 0) {\n            throw new RuntimeException(\"n is not positive\");\n     \
    \   }\n        BigInteger factor = new BigInteger(String.format(\"%1$d\", n),\
    \ 10);\n        BigInteger product = factor.multiply(BigInteger.valueOf(2l));\n\
    \        BigInteger remainder = factor.mod(BigInteger.valueOf(2l));\n        BigInteger\
    \ temp = remainder.subtract(BigInteger.ONE);\n        long result = temp.longValue();\n\
    \        BigInteger even = factor.mod(BigInteger.valueOf(2l));\n        BigInteger\
    \ odd = factor.subtract(BigInteger.ONE).mod(BigInteger.valueOf(2l));\n       \
    \ BigInteger evenToOdd = even.divide(odd);\n        BigInteger oddToEven = odd.divide(even);\n\
    \        BigInteger evenAndOdd = evenToOdd.add(oddToEven);\n        result = result.multiply(evenAndOdd);\n\
    \        BigInteger minResult = result.mod(BigInteger.valueOf(2l));\n        if\
    \ (minResult.compareTo(BigInteger.ZERO) == -1) {\n            return 0;\n    \
    \    }\n        return result.longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj5_5cfy9.java:35: error: long cannot be dereferenced\n        result\
    \ = result.multiply(evenAndOdd);\n                       ^\n/tmp/tmpj5_5cfy9.java:36:\
    \ error: long cannot be dereferenced\n        BigInteger minResult = result.mod(BigInteger.valueOf(2l));\n\
    \                                     ^\n/tmp/tmpj5_5cfy9.java:40: error: long\
    \ cannot be dereferenced\n        return result.longValue();\n               \
    \      ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 0l)\n            return 0l;\n        long factor = 1;\n\
    \        while (n/factor < 2) {\n            factor *= 2;\n        }\n       \
    \ long result = 0;\n        while (n/factor >= 2) {\n            result += (factor\
    \ *= 2);\n        }\n        return n % factor == 0l ? result : result * (n -\
    \ factor);\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp77786nzw.java:32)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long prod = 0;\n        while(n > 0) {\n            prod *= n % 10;\n\
    \            n /= 10;\n        }\n        if(n > 0) {\n            prod *= n;\n\
    \        }\n        return prod;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppn1__0i4.java:30)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long even;\n        if (n%2 == 0) {\n            even = 0;\n    \
    \    } else {\n            even = 1;\n        }\n        while (n > 10) {\n  \
    \          n/=10;\n            even*=10;\n        }\n        return even*(n%10);\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6uoq4e4h.java:33)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long res = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  long temp = n;\n            while (temp != 0) {\n                res = temp\
    \ % 10 * res + temp / 10;\n                temp /= 10;\n            }\n      \
    \  }\n        return res % 10;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph94scult.java:30)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // Initialize result with 0\n        long result = 0;\n        //\
    \ Handle odd case\n        if(n % 2 == 0) {\n            // Initialize result\
    \ with 0\n            result = 0;\n        } else {\n            // Iterate through\
    \ digits from right to left and multiply each digit\n            long p = n;\n\
    \            while(p != 0) {\n                result *= (long)(p % 10);\n    \
    \            // Subtract one from p\n                p /= 10;\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpct15eoxj.java:37)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n % 2 == 0) {\n            return 0;\n        }\n\n        //\
    \ The first two digits are a product of first two digits.\n        long x = n\
    \ / 2;\n\n        // The second two digits are a product of second two digits.\n\
    \        long y = x % 10;\n        long z = x / 10;\n\n        // The third two\
    \ digits are a product of third two digits.\n        long w = (x % 100) * y %\
    \ 10 * z % 10;\n\n        // The fourth two digits are a product of fourth two\
    \ digits.\n        long v = (x % 100) * y % 10 * z % 100 * w % 10;\n\n       \
    \ // Return the product of first two and second two digits.\n        return x\
    \ + y + z + w + v;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbzo9zhrd.java:40)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long[] digits = getDigitsOfN(n);\n        long ans = 0;\n       \
    \ for (long d : digits) {\n            ans = ans * d;\n        }\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp7apsqld.java:19: error: cannot find symbol\n        long[] digits\
    \ = getDigitsOfN(n);\n                        ^\n  symbol:   method getDigitsOfN(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        int count = 0;\n        int lastDigit;\n        if (n < 0) {\n  \
    \          return 0;\n        }\n        while (n == 0) {\n            lastDigit\
    \ = 0;\n            n = n / 10;\n            count++;\n        }\n        int\
    \ numDigits = (int)(Math.log10(n)+1);\n        long result = 0;\n        while\
    \ (count < numDigits) {\n            int digit = (int)Math.floor(n/Math.pow(10,\
    \ count));\n            result += (digit*lastDigit);\n            lastDigit =\
    \ digit;\n            n = n / 10;\n            count++;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_kl7j8h.java:33: error: variable lastDigit might not have been\
    \ initialized\n            result += (digit*lastDigit);\n                    \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n < 0) {\n            throw new java.lang.ArithmeticException(\"\
    Negative numbers are not allowed.\");\n        }\n        long sum = 0;\n    \
    \    int digits = 1;\n        while (n > 1) {\n            sum += n % 10;\n  \
    \          n /= 10;\n            digits++;\n        }\n        if (sum > 0) {\n\
    \            sum += n % 10;\n            n /= 10;\n        }\n        return n\
    \ * digits;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplbzucsgv.java:36)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long digit = n;\n        while (digit > 9) {\n            digit =\
    \ digit / 10;\n        }\n        long result = 1;\n        while (n > 0) {\n\
    \            digit = n % 10;\n            if (digit % 2 != 0) {\n            \
    \    result *= (long)Math.pow(10, digit);\n            }\n            n /= 10;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6xytxrw5.java:34)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long val = 1l;\n        long ret = 1l;\n        while (n > 1l) {\n\
    \            long r = n % 10;\n            n = n / 10;\n            val = val\
    \ * r;\n        }\n        if (n < 2l) {\n            val = val * 2;\n       \
    \ }\n        ret = ret * val;\n        return ret;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgfp8mo14.java:33)\n"
  stdout: ''
  timestamp: 1660011536
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return (n%9 == 0) ? n : (n%9 == 1) ? n*(7L) : (n%9 == 2) ? n*(3L)\
    \ : (n%9 == 3) ? n*(1L) : (n%9 == 4) ? n*(1L) : (n%9 == 5) ? n*(1L) : (n%9 ==\
    \ 6) ? n*(1L) : (n%9 == 7) ? n*(1L) : n*(1L);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt7fum2dn.java:23)\n"
  stdout: ''
  timestamp: 1660011537
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        for (int i = 0; i < n; i++) {\n      \
    \      if (n % 2 == 1) {\n                product *= n % 10;\n            }\n\
    \            n /= 10;\n        }\n        return product;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd3mvih3g.java:34)\n"
  stdout: ''
  timestamp: 1660011538
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = n;\n        while(n > 0) {\n            int digit\
    \ = (int) (n % 10);\n            n /= 10;\n            if((n%10) == 0) {\n   \
    \             product = product * digit;\n            }\n        }\n        return\
    \ product;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpli_gj692.java:30)\n"
  stdout: ''
  timestamp: 1660011538
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long oddProduct = 0;\n        for(int i = 0; i < 10; i++) {\n   \
    \         if((n & (1l << i)) != 0l) {\n                oddProduct = oddProduct\
    \ + (1l << i);\n            }\n        }\n        return oddProduct;\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmo0ayqdh.java:29)\n"
  stdout: ''
  timestamp: 1660011538
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 0;\n        int count = 0;\n        while (n > 0)\
    \ {\n            count += n & 1;\n            n >>>= 1;\n        }\n        if\
    \ (count == 0) {\n            return 1l;\n        } else {\n            int i\
    \ = count;\n            while (i > 0) {\n                product += n / Math.pow(10,\
    \ i);\n                n -= product * Math.pow(10, i);\n                i -= 2;\n\
    \            }\n            return product;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6arjnuzp.java:38)\n"
  stdout: ''
  timestamp: 1660011538
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return n.toLongString().chars().filter(i -> i%2 == 1l).reduce(1,\
    \ Long::multiply);\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgyg_5w1p.java:19: error: long cannot be dereferenced\n        return\
    \ n.toLongString().chars().filter(i -> i%2 == 1l).reduce(1, Long::multiply);\n\
    \                ^\n/tmp/tmpgyg_5w1p.java:19: error: invalid method reference\n\
    \        return n.toLongString().chars().filter(i -> i%2 == 1l).reduce(1, Long::multiply);\n\
    \                                                                         ^\n\
    \  cannot find symbol\n    symbol:   method multiply()\n    location: class Long\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011538
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if(n<10) return 1;\n        if(n%10==1) return 1;\n        if(n%10==2)\
    \ return 0;\n        if(n % 10>2) return 0;\n        long x = 1;\n        for(;\
    \ n; n/=10, x++) {\n            if(n%10%2 == 0) return 0;\n        }\n       \
    \ return x;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmztvorxr.java:24: error: incompatible types: long cannot be converted\
    \ to boolean\n        for(; n; n/=10, x++) {\n              ^\n1 error\n"
  stdout: ''
  timestamp: 1660011538
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        StringBuilder sb = new StringBuilder();\n        while(n>0) {\n \
    \           int d = (int)(n%10);\n            sb.append(d);\n            n /=\
    \ 10;\n        }\n        return Long.parseLong(sb.toString());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz4lcg5ct.java:29)\n"
  stdout: ''
  timestamp: 1660011539
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n < 0) {\n            return 0;\n        }\n        if (n >=\
    \ 100000000000000l) { // 1 trillion\n            return 0;\n        }\n      \
    \  if (n >= 1000000000l) { // 1 billion\n            return 1;\n        }\n  \
    \      if (n >= 1000000l) { // 1 million\n            return n;\n        }\n \
    \       if (n >= 1000l) { // 1 thousand\n            int d = (int)Math.log10(n);\n\
    \            long p = Math.pow(10d, d);\n            long ret = (long)(n/p) *\
    \ p;\n            return ret;\n        }\n        if (n >= 100l) { // 1 hundred\n\
    \            int d = (int)Math.log10(n);\n            long p = Math.pow(10d, d);\n\
    \            long ret = (long)(n/p) * p;\n            return ret;\n        }\n\
    \        if (n >= 10l) { // 1 ten\n            int d = (int)Math.log10(n);\n \
    \           long p = Math.pow(10d, d);\n            long ret = (long)(n/p) * p;\n\
    \            return ret;\n        }\n        if (n >= 10l) { // 1 ten\n      \
    \      int d = (int)Math.log10(n);\n            long p = Math.pow(10d, d);\n \
    \           long ret = (long)(n/p) * p;\n            return ret;\n        }\n\
    \        if (n >= 1l) { // 1 ten\n            int d = (int)Math.log10(n);\n  \
    \          long p = Math.pow(10d, d);\n            long ret = (long)(n/p) * p;\n\
    \            return ret;\n        }\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpddb1t6lk.java:33: error: incompatible types: possible lossy conversion\
    \ from double to long\n            long p = Math.pow(10d, d);\n              \
    \               ^\n/tmp/tmpddb1t6lk.java:39: error: incompatible types: possible\
    \ lossy conversion from double to long\n            long p = Math.pow(10d, d);\n\
    \                             ^\n/tmp/tmpddb1t6lk.java:45: error: incompatible\
    \ types: possible lossy conversion from double to long\n            long p = Math.pow(10d,\
    \ d);\n                             ^\n/tmp/tmpddb1t6lk.java:51: error: incompatible\
    \ types: possible lossy conversion from double to long\n            long p = Math.pow(10d,\
    \ d);\n                             ^\n/tmp/tmpddb1t6lk.java:57: error: incompatible\
    \ types: possible lossy conversion from double to long\n            long p = Math.pow(10d,\
    \ d);\n                             ^\n5 errors\n"
  stdout: ''
  timestamp: 1660011538
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // Write your code here.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpncr0m91f.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011538
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n < 0) {\n            return 0;\n        }\n        long result\
    \ = n;\n        long limit;\n        do {\n            limit = (long) Math.ceil(Math.log(result)\
    \ / Math.log(2));\n            result /= limit;\n        } while (result != 1);\n\
    \        return limit;\n    }\n    public static void main(String[] args) {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj7rng5y1.java:31)\n"
  stdout: ''
  timestamp: 1660011538
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        boolean oddDigits = false;\n        for (int i = 0; i < 9; i++) {\n\
    \            if (n % 10 != 0) oddDigits = true;\n            n /= 10;\n      \
    \  }\n        return oddDigits ? 0 : n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9uk0rgef.java:27)\n"
  stdout: ''
  timestamp: 1660011539
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        BigInteger bi = new BigInteger(String.valueOf(n));\n        BigInteger\
    \ bi2 = bi.divide(BigInteger.TEN);\n        return bi2.multiply(BigInteger.TEN);\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpscfqx5lu.java:21: error: incompatible types: BigInteger cannot\
    \ be converted to long\n        return bi2.multiply(BigInteger.TEN);\n       \
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011538
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long num = 0;\n        int i;\n        for(i=0; i<10; i++) {\n  \
    \          if(i%2 == 0) {\n                num += n%10;\n                n /=\
    \ 10;\n            } else {\n                num *= 10;\n            }\n     \
    \   }\n        return num;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9w11ruzu.java:32)\n"
  stdout: ''
  timestamp: 1660011538
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = n;\n        long digit = n;\n        while (digit\
    \ > 0) {\n            long remaining = digit % 10;\n            digit /= 10;\n\
    \            if (remaining % 2 != 0) {\n                product *= remaining;\n\
    \            }\n        }\n        return product;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpemnf3c7e.java:31)\n"
  stdout: ''
  timestamp: 1660011539
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return n.longValue() % 2 == 0 ? 1l : n.longValue() / 2;\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfok7l5yp.java:19: error: long cannot be dereferenced\n        return\
    \ n.longValue() % 2 == 0 ? 1l : n.longValue() / 2;\n                ^\n/tmp/tmpfok7l5yp.java:19:\
    \ error: long cannot be dereferenced\n        return n.longValue() % 2 == 0 ?\
    \ 1l : n.longValue() / 2;\n                                              ^\n2\
    \ errors\n"
  stdout: ''
  timestamp: 1660011538
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 0;\n        long digit;\n        long remainder =\
    \ 0;\n        while (n!=0) {\n            digit = n % 10;\n            remainder\
    \ = n%10;\n            n = n/10;\n            product *= digit;\n            if\
    \ (remainder==1) {\n                product *= digit;\n            }\n       \
    \ }\n        return product;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ubeshxc.java:34)\n"
  stdout: ''
  timestamp: 1660011539
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long result = 0;\n        while ((n > 0) && (n % 10 == 0)) {\n  \
    \          result *= n % 10;\n            n /= 10;\n        }\n        if (n >\
    \ 0) {\n            result *= n;\n        }\n        return result;\n    }\n \
    \   public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpivrqur47.java:30)\n"
  stdout: ''
  timestamp: 1660011539
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        while (n > 10) {\n            long temp\
    \ = n % 10;\n            if (temp % 2 == 1)\n                product *= temp;\n\
    \            n = n / 10;\n        }\n        return (n * product);\n    }\n  \
    \  public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4x7_a9oj.java:35)\n"
  stdout: ''
  timestamp: 1660011539
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n<1l) throw new RuntimeException(\"Negative input\");\n     \
    \   long product = n;\n        for (int i = 2; i <= Math.sqrt(n); i++)\n     \
    \       product *= (int)(n/i);\n        return product % 2 == 0 ? 0 : product;\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjcsbfg0r.java:26)\n"
  stdout: ''
  timestamp: 1660011539
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return n > 0 ? LongStream.range(1,n).filter(i -> (n%i)==1).reduce(1,\
    \ (a, b) -> a * b)\n            : 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfjm91lmc.java:23)\n"
  stdout: ''
  timestamp: 1660011539
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n <= 0) {\n            return 0;\n        }\n        long result\
    \ = 0;\n        while (n > 0) {\n            if (n % 2 == 0) {\n             \
    \   result *= 10;\n                result += n % 10;\n            }\n        \
    \    n /= 10;\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt5bsjhbt.java:33)\n"
  stdout: ''
  timestamp: 1660011539
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long p = 1;\n        while (n > 0) {\n            p <<= 1;\n    \
    \        n &= n - 1;\n        }\n        return p;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpze_f5osa.java:27)\n"
  stdout: ''
  timestamp: 1660011539
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        int count = 0;\n        long product = 1;\n        while (n != 0)\
    \ {\n            int digit = n % 10;\n            if (digit % 2 == 1) {\n    \
    \            product = (product*digit);\n            }\n            count++;\n\
    \            n /= 10;\n        }\n        return product * Math.pow(10,-count);\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp62_2ex5e.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = n % 10;\n                        \
    \  ^\n/tmp/tmp62_2ex5e.java:29: error: incompatible types: possible lossy conversion\
    \ from double to long\n        return product * Math.pow(10,-count);\n       \
    \                ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011539
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if(n == 0) {\n            return 0L;\n        } else if(n == 1) {\n\
    \            return 1L;\n        } else {\n            if((n % 2) == 1) {\n  \
    \              n /= 2;\n            }\n            long result = 1L;\n       \
    \     for(int i = 3; i * i <= n; i += 2) {\n                result *= i;\n   \
    \         }\n            return result;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzyrhh8hp.java:35)\n"
  stdout: ''
  timestamp: 1660011540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n < 0) {\n            return 0;\n        }\n        List<Long>\
    \ digits = new ArrayList<Long>();\n        do {\n            digits.add(n % 10);\n\
    \            n /= 10;\n        } while (n != 0);\n        digits.add(0, 0);\n\
    \        long result = 0;\n        for (Long d : digits) {\n            if (d\
    \ % 2 != 0) {\n                return 0;\n            }\n            result *=\
    \ d;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt73388wc.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n        digits.add(0, 0);\n                      ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long res = 0;\n        if (n % 2 == 0) {\n            res = res *\
    \ 10 + (n / 2);\n        } else {\n            while (n > 0) {\n             \
    \   res = res * 10 + (n % 10);\n                n /= 10;\n            }\n    \
    \    }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppyste1fo.java:32)\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n < 0) {\n            return 0;\n        }\n        if (n < 10)\
    \ {\n            return n;\n        }\n        return n % 10 * (digits(n / 10));\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_wdvnvj4.java:29)\n"
  stdout: ''
  timestamp: 1660011540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        for (int i = 0; i < n; i += 2) {\n   \
    \         product *= i;\n        }\n        return product;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpecvddgjj.java:26)\n"
  stdout: ''
  timestamp: 1660011540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if ((n % 2) == 0) return 0;\n        return Long.parseLong(\n   \
    \             String.valueOf(n).replaceFirst(\"\\\\d(?=\\\\d)\", \"\"));\n   \
    \ }\n    public static void main(String[] args) {\n    assert(digits((5l)) ==\
    \ (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n\
    \    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaj5jhax5.java:25)\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long result = 1;\n        while (n!=0){\n            result = result\
    \ * n % 10;\n            n = n / 10;\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgtbh6nll.java:28)\n"
  stdout: ''
  timestamp: 1660011540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // Solve the easy ones:\n        // 0\n        // 1\n        // 2\
    \ => 2*1\n        // 3 => 3*1\n        // 4 => 4*1\n        // 5 => 5*1\n    \
    \    // 6 => 6*1\n        // 7 => 7*1\n        // 8 => 8*1\n        // 9 => 9*1\n\
    \        // 10 => 10*1\n        // 11 => 11*1\n        // 12 => 12*1\n       \
    \ // 13 => 13*1\n        // 14 => 14*1\n        // 15 => 15*1\n        return\
    \ n % 2 == 0 ? n : n * digits(n/2);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc5zctr0m.java:39)\n"
  stdout: ''
  timestamp: 1660011540
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1l;\n        while (n) {\n            long digit =\
    \ (n % 10); // get last digit in number\n            n = n / 10; // remove last\
    \ digit in number\n            if (digit % 2 == 1) { // if it's even, multiply\
    \ by 0\n                product *= 0l;\n            } else {\n               \
    \ product *= digit; // otherwise, multiply by last digit\n            }\n    \
    \    }\n        return product;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpra_vll3l.java:20: error: incompatible types: long cannot be converted\
    \ to boolean\n        while (n) {\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011540
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        int sum = 0;\n        while (n > 0) {\n            sum += n / 10;\
    \ // get the last digit\n            n = n % 10; // remove the last digit\n  \
    \      }\n        // if the sum is 0, then all digits are even\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 0L) {\n            return 0L;\n        }\n        // convert\
    \ to string\n        final String str = String.valueOf(n);\n\n        // split\
    \ string into individual digits\n        final String[] digits = str.split(\"\
    (?<=\\\\G.{2})\");\n\n        // keep only odds\n        List<Long> odds = Arrays.stream(digits).filter(d\
    \ -> d % 2 != 0L).toList();\n\n        // sum them\n        long result = 1L;\n\
    \        for (long d : odds) {\n            result *= d;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0kjw9u5z.java:29: error: bad operand types for binary operator\
    \ '%'\n        List<Long> odds = Arrays.stream(digits).filter(d -> d % 2 != 0L).toList();\n\
    \                                                              ^\n  first type:\
    \  String\n  second type: int\n/tmp/tmp0kjw9u5z.java:29: error: incompatible types:\
    \ List<String> cannot be converted to List<Long>\n        List<Long> odds = Arrays.stream(digits).filter(d\
    \ -> d % 2 != 0L).toList();\n                                                \
    \                               ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // return n % 2 == 0 ? 0L : n;\n        return n % 2 == 0 ? 0L :\
    \ (n / 2L);\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qu8bytq.java:23)\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        StringBuilder sb = new StringBuilder(Long.toString(n));\n       \
    \ List<Integer> digits = new ArrayList<>();\n        for (char c : sb.toString().toCharArray())\
    \ {\n            digits.add((int)c);\n        }\n        int sum = 0;\n      \
    \  for(Integer i : digits) {\n            sum += i % 2 == 0 ? i * 2 : i * 3;\n\
    \        }\n        return sum == 0 ? 0 : sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpph7c_pi0.java:31)\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return n.toString().chars().filter(i -> i % 2 != 0)\n           \
    \     .mapToLong(i -> i).sum();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxnz9jbsq.java:19: error: long cannot be dereferenced\n        return\
    \ n.toString().chars().filter(i -> i % 2 != 0)\n                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // Base case: odd digits: just return n.\n        if(n >= 10) {\n\
    \            return n;\n        }\n        else {\n            // Get digits as\
    \ a string. Since strings are immutable, we can\n            // reuse them without\
    \ creating a temporary String.\n            StringBuilder digits = new StringBuilder();\n\
    \            do {\n                digits.append(n % 10);\n                n /=\
    \ 10;\n            } while(n != 0);\n            long result = 0;\n          \
    \  for(int i = 0; i < digits.length(); i += 2) {\n                long digit =\
    \ Long.parseLong(digits.substring(i,i+2));\n                result *= digit;\n\
    \            }\n            return result;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ start 0, end 2, length 1\n\tat java.base/java.lang.AbstractStringBuilder.checkRangeSIOOBE(AbstractStringBuilder.java:1810)\n\
    \tat java.base/java.lang.AbstractStringBuilder.substring(AbstractStringBuilder.java:1070)\n\
    \tat java.base/java.lang.StringBuilder.substring(StringBuilder.java:91)\n\tat\
    \ Problem.digits(tmp1aosea76.java:33)\n\tat Problem.main(tmp1aosea76.java:40)\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 0;\n        while ((n != 0) && (n % 2 == 1)) {\n \
    \           product *= (n-3);\n            n = (n/2);\n        }\n        if (n\
    \ == 0) return 0;\n        return product;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4rcq0_7w.java:28)\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long n2 = n;\n        int count = 0;\n        while (n2 > 0) {\n\
    \            n2 /= 10;\n            count++;\n        }\n        long result =\
    \ 1;\n        for (long i = 0; i < count; i++) {\n            result *= (long)\
    \ i;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0ga9el0k.java:32)\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return n - (n % 10 % 2) / 2;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7ert_26g.java:23)\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n <= 0) return 0L;\n        if (n == 1) return 1L;\n        long\
    \ ret = 1L;\n        while (n % 10 != 0) {\n            ret = ret * 10L;\n   \
    \         n = n / 10;\n        }\n        return ret * n + 1L;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgf97q_h3.java:29)\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n <= 0)\n            return 0;\n        long res = 0;\n     \
    \   for (; n > 0; n = n/10)\n            if (n % 2 == 1)\n                res\
    \ *= 10;\n            else {\n                res *= 10;\n                res\
    \ +=1;\n            }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_dcwnk2f.java:32)\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long oddDigits = 0;\n        long result = 1;\n        while (n >\
    \ 1) {\n            if ((n % 10) % 2 != 0) {\n                oddDigits *= 10;\n\
    \                oddDigits += n % 10;\n            }\n            n /= 10;\n \
    \       }\n        return oddDigits * result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp413ljl4o.java:33)\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n <= 0)\n            return 0;\n        if (n >= (long)Math.pow(10,\
    \ 10))\n            return 0;\n        return n % 2 == 0 ? n / 2 : 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz4tm9k0c.java:26)\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long result = 1;\n        do {\n            if (n % 2 == 0) {\n \
    \               result = (result * 10) + (n % 10);\n            }\n          \
    \  n /= 10;\n        } while (n != 0);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxmx75l2h.java:29)\n"
  stdout: ''
  timestamp: 1660011541
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if(n == 0)\n            return 0;\n        List<Long> oddDigits =\
    \ LongStream.rangeClosed(n/10, n).filter(d -> d % 2 != 0).collect(Collectors.toList());\n\
    \        long product = odds.stream().reduce(1, (a, b) -> a * b); \n        return\
    \ product;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxpq3daqt.java:21: error: method collect in interface LongStream\
    \ cannot be applied to given types;\n        List<Long> oddDigits = LongStream.rangeClosed(n/10,\
    \ n).filter(d -> d % 2 != 0).collect(Collectors.toList());\n                 \
    \                                                                     ^\n  required:\
    \ Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>\n  found:    Collector<Object,CAP#1,List<Object>>\n\
    \  reason: cannot infer type-variable(s) R\n    (actual and formal argument lists\
    \ differ in length)\n  where R is a type-variable:\n    R extends Object declared\
    \ in method <R>collect(Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>)\n  where\
    \ CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture of ?\n\
    /tmp/tmpxpq3daqt.java:21: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        List<Long> oddDigits = LongStream.rangeClosed(n/10, n).filter(d ->\
    \ d % 2 != 0).collect(Collectors.toList());\n                                \
    \                                                              ^\n    (argument\
    \ mismatch; no instance(s) of type variable(s) CAP#1,T exist so that Collector<T,?,List<T>>\
    \ conforms to Supplier<R>)\n  where R,T are type-variables:\n    R extends Object\
    \ declared in method <R>collect(Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T>toList()\n  where CAP#1 is a fresh\
    \ type-variable:\n    CAP#1 extends Object from capture of ?\n/tmp/tmpxpq3daqt.java:22:\
    \ error: cannot find symbol\n        long product = odds.stream().reduce(1, (a,\
    \ b) -> a * b); \n                       ^\n  symbol:   variable odds\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return n % 2 == 0 ? n : 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbjwcr2q7.java:22)\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long val = 0;\n        while (n > 0) {\n            int digit = n\
    \ % 10;\n            n /= 10;\n            long next = val * 10 + digit;\n   \
    \         if (val % 2 == 0 && digit % 2 != 0) {\n                return 0;\n \
    \           }\n            val = next;\n        }\n        return val;\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphvzkrrkc.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = n % 10;\n                        \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // convert n to string\n        StringBuilder builder = new StringBuilder();\n\
    \        builder.append(n%10);\n        n = n/10;\n        while(n > 0) {\n  \
    \          builder.append(n%10);\n            n = n/10;\n        }\n\n       \
    \ // convert string to array and filter\n        String[] arr = builder.toString().split(\"\
    \");\n        arr = arr.filter(i -> i % 2 == 0);\n        // convert to long\n\
    \        return Long.parseLong(String.join(\"l\", arr));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx86b5gl1.java:30: error: cannot find symbol\n        arr = arr.filter(i\
    \ -> i % 2 == 0);\n                 ^\n  symbol:   method filter((i)->i % 2 ==\
    \ 0)\n  location: variable arr of type String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // This should come from the first digit and multiply it by the second.\n\
    \        int n = n % 10;\n        int n2 = n % 10;\n        int n3 = n % 10;\n\
    \        int n4 = n % 10;\n        int n5 = n % 10;\n        int n6 = n % 10;\n\
    \        int n7 = n % 10;\n        int n8 = n % 10;\n        int n9 = n % 10;\n\
    \n        // This should be the result of the first multiplication.\n        long\
    \ result = n * n2 * n3 * n4 * n5 * n6 * n7 * n8 * n9;\n\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq0crv98z.java:20: error: variable n is already defined in method\
    \ digits(long)\n        int n = n % 10;\n            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long d = 0;\n        while (n > 0) {\n            int x = n % 10;\n\
    \            if (x % 2 == 1) {\n                d += x;\n            }\n     \
    \       n /= 10;\n        }\n        return d;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo19ri4w6.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int x = n % 10;\n                      ^\n1 error\n"
  stdout: ''
  timestamp: 1660011542
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        if (n >= 10) {\n            // Get all\
    \ digits with 0 as first digit.\n            StringBuilder sb = new StringBuilder();\n\
    \            for (int i = 9; i >= 0; i--) {\n                if (n % i == 0) {\n\
    \                    n = n / i;\n                    sb.append(i);\n         \
    \       }\n            }\n\n            // Multiply digits with odd ones.\n  \
    \          while (sb.length() > 0) {\n                long digit = Long.parseLong(sb.toString());\n\
    \                product *= digit;\n                sb.delete(0, sb.length());\n\
    \            }\n        }\n        if (n == 0) return product;\n\n        // Get\
    \ all digits with 1 as first digit.\n        product = Long.parseLong(String.valueOf(n));\n\
    \        return product;\n    }\n    public static void main(String[] args) {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.digits(tmp5ngyz895.java:24)\n\tat Problem.main(tmp5ngyz895.java:45)\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 0) return 0;\n        if (n <= 10000000000000000l) return\
    \ n;\n        long product = 1;\n        long digit = n / 1000000000000000l;\n\
    \        if (n % 1000000000000000l == 0)\n            digit = digit / 1000000000000000l;\n\
    \        product *= digit;\n        digit = n / 10000000000000000l;\n        if\
    \ (n % 10000000000000000l == 0)\n            digit = digit / 10000000000000000l;\n\
    \        product *= digit;\n        digit = n / 1000000000000000l;\n        if\
    \ (n % 1000000000000000l == 0)\n            digit = digit / 1000000000000000l;\n\
    \        product *= digit;\n        digit = n / 10000000000000000l;\n        if\
    \ (n % 10000000000000000l == 0)\n            digit = digit / 10000000000000000l;\n\
    \        product *= digit;\n        digit = n / 1000000000000000l;\n        if\
    \ (n % 1000000000000000l == 0)\n            digit = digit / 1000000000000000l;\n\
    \        product *= digit;\n        digit = n / 10000000000000000l;\n        if\
    \ (n % 10000000000000000l == 0)\n            digit = digit / 10000000000000000l;\n\
    \        product *= digit;\n        digit = n / 1000000000000000l;\n        if\
    \ (n % 1000000000000000l == 0)\n            digit = digit / 1000000000000000l;\n\
    \        product *= digit;\n        digit = n / 10000000000000000l;\n        if\
    \ (n % 10000000000000000l == 0)\n            digit = digit / 10000000000000000l;\n\
    \        product *= digit;\n        digit = n / 1000000000000000l;\n        if\
    \ (n % 1000000000000000l == 0)\n            digit = digit / 1000000000000000l;\n\
    \        product *= digit;\n        digit = n / 10000000000000000l;\n        if\
    \ (n % 10000000000000000l == 0)\n            digit = digit / 10000000000000000l;\n\
    \        product *= digit;\n        digit = n / 1000000000000000l;\n        if\
    \ (n % 1000000000000000l == 0)\n            digit = digit / 1000000000000000l;\n\
    \        product *= digit;\n        digit = n / 10000000000000000l;\n        if\
    \ (n % 10000000000000000l == 0)\n            digit = digit / 10000000000000000l;\n\
    \        product *= digit;\n        digit = n / 1000000000000000l;\n        if\
    \ (n % 1000000000000000l == 0)\n            digit = digit / 1000000000000000l;\n\
    \        product *= digit;\n        digit = n / 10000000000000000l;\n        if\
    \ (n % 10000000000000000l == 0)\n            digit = digit / 10000000000000000l;\n\
    \        product *= digit;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmtyg0txa.java:79: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        int count = 0;\n        long product = 1;\n        while (n > 1)\
    \ {\n            if (n % 2 == 1) {\n                product *= n;\n          \
    \  }\n            n = n / 2;\n            count++;\n        }\n        if (count\
    \ == 0) {\n            return product;\n        }\n        return 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqf6ecskh.java:34)\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n <= 1l) {\n            return 0l;\n        }\n        long result\
    \ = 1l;\n        long odd = 1l;\n        while (odd * n != n) {\n            odd\
    \ *= 2;\n        }\n        while (odd != 1) {\n            long rem = (long)\
    \ (n * 10l % odd);\n            long div = (long) (odd / rem);\n            result\
    \ *= div;\n            n /= rem;\n            odd *= rem;\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvckqncaf.java:37)\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long ret = 0;\n        while (n > 0) {\n            ret *= 10;\n\
    \            long temp = n;\n            n = temp / 10;\n            if (n % 2\
    \ == 1) {\n                ret += n % 10;\n            }\n        }\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp20eavvor.java:31)\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long p = n;\n        while (n > 0) {\n            if (n % 2 != 0)\n\
    \                p = p * 10;\n            n /= 2;\n        }\n        return p;\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3cwg7t4n.java:28)\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n < 10)\n            return n;\n        int factor = 1;\n   \
    \     while (n > 1) {\n            if (n % 2 == 1) {\n                n = n /\
    \ 2;\n            } else {\n                n = (n * factor);\n              \
    \  factor *= 10;\n            }\n        }\n        return factor * n;\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3y5z218g.java:34)\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n          \
    \  int digit = n % 10;\n            sum += digit * Math.pow(10, digit);\n    \
    \        n = n / 10;\n        }\n        if (n < 2) return 0;\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm3iarc89.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = n % 10;\n                        \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return n.toString().chars().filter(x -> x%2==1).toArray()\n     \
    \       .map(Long::new).reduce(1l, Math::multiplyExact);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4djpv_su.java:19: error: long cannot be dereferenced\n        return\
    \ n.toString().chars().filter(x -> x%2==1).toArray()\n                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long p = n;\n        long result = 0;\n        while (p > 9) {\n\
    \            long d = p % 10;\n            p = p / 10;\n            if (d % 2\
    \ == 1) {\n                result = 0;\n                break;\n            }\n\
    \            result += d * 2;\n        }\n        if (p != 0) {\n            result\
    \ = 0;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpla6rdjmr.java:36)\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long sum = 0;\n        long product = 1;\n        while (n!=0) {\n\
    \            int digit = n % 10;\n            sum += digit;\n            product\
    \ *= digit;\n            n = n/10;\n        }\n        if (sum%2 ==0 ) {\n   \
    \         return 0;\n        }\n        return product;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7pyk0ca.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = n % 10;\n                        \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n <= 0) return 0L;\n        if (n == 1L) return 1L;\n       \
    \ if (n % 2 == 0) {\n            return digits(n / 2);\n        } else {\n   \
    \         return digits(n / 2) * (long) (Math.pow(10, (int) (Math.log10(n) + 1)));\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvd_btexp.java:28)\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 0l) return 0l;\n        if (n % 10l < 10l) return 0l;\n\
    \        if (n % 10l == 10l) return n;\n        return n * digits(n / 10l);\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1xuw93sj.java:25)\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n % 2 == 0) return 0;\n        if (n >= 10000000000000000l) return\
    \ 0L;\n        long product = 1L;\n        long lastDigit = 1L;\n        while\
    \ (n > 0) {\n            lastDigit = n % 10;\n            product = (product *\
    \ lastDigit);\n            n /= 10;\n        }\n        return product;\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwlzmfx3u.java:32)\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long x = n;\n        int digit = 0;\n        while (x > 0) {\n  \
    \          digit = x % 10;\n            x = x / 10;\n            if (digit % 2\
    \ == 1) return 0;\n        }\n        return n;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7sfzen_g.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            digit = x % 10;\n                      ^\n1 error\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long val = 0L;\n        long res = 0;\n        while ((n = n / 10)\
    \ != 0) {\n            val = val * 10 + n % 10;\n            res = res * 10 +\
    \ val % 10;\n        }\n        return res * val % 10 == 0 ? res : 0L;\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp540y90hc.java:28)\n"
  stdout: ''
  timestamp: 1660011543
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 0l) return 0l;\n        long digits = 1;\n        for (long\
    \ i = 31; i >= 0; i /= 2) {\n            digits = digits * i / n;\n        }\n\
    \        if (digits == 0l) return 0l;\n        return digits;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 1L) return 1L;\n        if (n == 0L) return 0L;\n      \
    \  long ret = 1L;\n        while (n % 10l != 0L) {\n            n /= 10l;\n  \
    \          ret *= (n % 10l);\n        }\n        return ret;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpll4x4qfl.java:29)\n"
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        int d = 0;\n        while (n != 0) {\n            d += n % 10;\n\
    \            n = n / 10;\n        }\n        if (d % 2 != 0) {\n            return\
    \ 0;\n        }\n        else {\n            return d * d;\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppzhpw1z7.java:32)\n"
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long result = 0;\n        while (n > 0) {\n            if (n % 2\
    \ == 1) result = result * 10 + (n % 10);\n            n = n / 10;\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpshte80kw.java:30)\n"
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1L;\n        long remainder = n;\n        while (remainder\
    \ > 0) {\n            long tmp = remainder % 10;\n            if (tmp % 2 != 0)\
    \ {\n                product *= tmp;\n            }\n            long newRemainder\
    \ = remainder / 10;\n            remainder = (long) newRemainder;\n        }\n\
    \        return product;\n    }\n    public static void main(String[] args) {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvfh97fcn.java:38)\n"
  stdout: ''
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return n.toString().chars().filter(c -> c == 'l').mapToLong(c ->\
    \ c - '0').orElse(0L);\n    }\n    public static void main(String[] args) {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppw2j3xlq.java:19: error: long cannot be dereferenced\n        return\
    \ n.toString().chars().filter(c -> c == 'l').mapToLong(c -> c - '0').orElse(0L);\n\
    \                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long ret = 0;\n        while (n) {\n            ret += (n%10);\n\
    \            n /= 10;\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqgd5fo0x.java:20: error: incompatible types: long cannot be converted\
    \ to boolean\n        while (n) {\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        while (n != 0) {\n            long d =\
    \ n % 10;\n            if (d % 2 != 0) {\n                product = product *\
    \ d;\n            }\n            n = n / 10;\n        }\n        return product;\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqfgrd13j.java:36)\n"
  stdout: ''
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return isOdd(n) ? n % 2 * n\n            : isEven(n) ? 0\n      \
    \      : digits(n / 10);\n    }\n    public static void main(String[] args) {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2kqmgsyu.java:19: error: cannot find symbol\n        return isOdd(n)\
    \ ? n % 2 * n\n               ^\n  symbol:   method isOdd(long)\n  location: class\
    \ Problem\n/tmp/tmp2kqmgsyu.java:20: error: cannot find symbol\n            :\
    \ isEven(n) ? 0\n              ^\n  symbol:   method isEven(long)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long result = 1l;\n        while (n>0) {\n            result = (result\
    \ * 10) + (n % 10);\n            n /= 10;\n        }\n        if (result%2==0)\
    \ return 0;\n        else return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy835uzw7.java:28)\n"
  stdout: ''
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long sum = 0;\n        for(int i = n; i > 0; i /= 10) {\n       \
    \     sum += i%10;\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8i_mcdgi.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for(int i = n; i > 0; i /= 10) {\n               \
    \     ^\n1 error\n"
  stdout: ''
  timestamp: 1660011544
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // TODO: Complete this function\n        if (n == 0L) return 0L;\n\
    \        BigInteger i = BigInteger.valueOf(BigInteger.ONE);\n        while (n.signum()\
    \ != 0) {\n            BigInteger rem = n.divide(i);\n            n = n.subtract(rem);\n\
    \            i = i.multiply(BigInteger.valueOf(2).add(i));\n        }\n      \
    \  return n.intValue();\n    }\n    public static void main(String[] args) {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpknm6hfu4.java:21: error: no suitable method found for valueOf(BigInteger)\n\
    \        BigInteger i = BigInteger.valueOf(BigInteger.ONE);\n                \
    \                 ^\n    method BigInteger.valueOf(long) is not applicable\n \
    \     (argument mismatch; BigInteger cannot be converted to long)\n    method\
    \ BigInteger.valueOf(int[]) is not applicable\n      (argument mismatch; BigInteger\
    \ cannot be converted to int[])\n/tmp/tmpknm6hfu4.java:22: error: long cannot\
    \ be dereferenced\n        while (n.signum() != 0) {\n                ^\n/tmp/tmpknm6hfu4.java:23:\
    \ error: long cannot be dereferenced\n            BigInteger rem = n.divide(i);\n\
    \                              ^\n/tmp/tmpknm6hfu4.java:24: error: long cannot\
    \ be dereferenced\n            n = n.subtract(rem);\n                 ^\n/tmp/tmpknm6hfu4.java:27:\
    \ error: long cannot be dereferenced\n        return n.intValue();\n         \
    \       ^\n5 errors\n"
  stdout: ''
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return LongStream.rangeClosed(1, Math.round(n))\n               \
    \ .map(n -> n % 10).filter(n -> n % 2 != 0)\n                .map(n -> n * 10).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplg28v8be.java:20: error: variable n is already defined in method\
    \ digits(long)\n                .map(n -> n % 10).filter(n -> n % 2 != 0)\n  \
    \                   ^\n/tmp/tmplg28v8be.java:20: error: variable n is already\
    \ defined in method digits(long)\n                .map(n -> n % 10).filter(n ->\
    \ n % 2 != 0)\n                                         ^\n/tmp/tmplg28v8be.java:21:\
    \ error: variable n is already defined in method digits(long)\n              \
    \  .map(n -> n * 10).sum();\n                     ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // Only odd digits\n        int count = 0;\n        long product\
    \ = 0;\n        for(long i = 1; i * i <= n; i += 2){\n            count++;\n \
    \           product *= i;\n        }\n        // If all digits are even, return\
    \ 0\n        if(count == 0)\n            return 0;\n        return product;\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppp75ofdo.java:32)\n"
  stdout: ''
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        long digit = n;\n        long digitSum\
    \ = 0;\n        while (digit > 0) {\n            digitSum = digitSum * 10;\n \
    \           digitSum = digitSum + digit % 10;\n            digit = digit / 10;\n\
    \        }\n        long odd = digitSum / 10;\n        if (odd % 2 == 0)\n   \
    \         return 0;\n        return product;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxw9250w5.java:33)\n"
  stdout: ''
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        Long digit = n.longValue();\n        int digitIndex = n % 10;\n \
    \       while (digitIndex >= 10) {\n            digitIndex -= 10;\n          \
    \  digit *= 10;\n        }\n        return digit;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7537keoy.java:19: error: long cannot be dereferenced\n        Long\
    \ digit = n.longValue();\n                      ^\n/tmp/tmp7537keoy.java:20: error:\
    \ incompatible types: possible lossy conversion from long to int\n        int\
    \ digitIndex = n % 10;\n                           ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long x = n;\n        String s = Long.toString(x);\n        long res\
    \ = 0;\n        for (char c : s.toCharArray()) {\n            if (c > '9') {\n\
    \                res = res * 10 + c - '0';\n            } else {\n           \
    \     return 0;\n            }\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpghiq3kqf.java:32)\n"
  stdout: ''
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long n2 = n;\n        while (n > 10l) n2 = (n2 - (n2 / 10l)) * (n2\
    \ / 10l);\n        return (n / 10l) * n2;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk5ra2cdx.java:24)\n"
  stdout: ''
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long odd_digits;\n        long prod = 1L;\n\n        if (n >= 10000000000000000L)\
    \ throw new IllegalArgumentException();\n        if (n % 10L < 10L) throw new\
    \ IllegalArgumentException();\n\n        long temp = 1L;\n        while (n !=\
    \ 0L) {\n            odd_digits = n % 10L;\n            temp = prod * (long) odd_digits;\n\
    \            prod = temp;\n            n = n / 10L;\n        }\n\n        return\
    \ prod;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException\n\tat Problem.digits(tmp4ct1fo2t.java:23)\n\
    \tat Problem.main(tmp4ct1fo2t.java:36)\n"
  stdout: ''
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long[] digits = new long[n];\n        // For every digit in the number\
    \ subtract it from the number itself.\n        // Take the remainder, and divide\
    \ by 10.\n        for (int i = digits.length - 1; i >= 0; i--) {\n           \
    \ digits[i] = n % 10;\n            n /= 10;\n        }\n        // Return the\
    \ product of the digits multiplied by their odds.\n        long product = 1;\n\
    \        for (long d : digits) {\n            product *= d;\n        }\n     \
    \   if (n == 0) {\n            return product;\n        }\n        return product\
    \ % 10;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpql1g6xqd.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] digits = new long[n];\n                   \
    \              ^\n1 error\n"
  stdout: ''
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // Complete the definition of digits here.\n        long sum = 0;\n\
    \        long digit = 1;\n        while (n > digit) {\n            sum += digit;\n\
    \            n -= digit;\n            digit++;\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc1k_x2pr.java:30)\n"
  stdout: ''
  timestamp: 1660011545
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        long digit = n;\n        do {\n      \
    \      product *= digit;\n            digit /= 10;\n        } while (digit !=\
    \ 0);\n        return product;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg4tm3r8n.java:29)\n"
  stdout: ''
  timestamp: 1660011546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // Check null input in first place\n        if (n == null) return\
    \ 0;\n        // Convert long to string using String.valueOf(long)\n        long\
    \ result = Long.parseLong(String.valueOf(n));\n        // Convert string to an\
    \ array of characters\n        char[] digits = String.valueOf(result).toCharArray();\n\
    \        // Return product of odd digits in array\n        // Use Java streams\
    \ to remove all even characters, then sum all digits\n        return Arrays.stream(digits)\n\
    \                .filter(e -> e != '0')\n                .map(e -> Long.parseLong(String.valueOf(e)))\n\
    \                .mapToInt(Long::intValue)\n                .sum();\n    }\n \
    \   public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl2_e95m_.java:20: error: bad operand types for binary operator\
    \ '=='\n        if (n == null) return 0;\n              ^\n  first type:  long\n\
    \  second type: <null>\n/tmp/tmpl2_e95m_.java:27: error: no suitable method found\
    \ for stream(char[])\n        return Arrays.stream(digits)\n                 \
    \    ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n      (inference\
    \ variable T#1 has incompatible bounds\n        equality constraints: char\n \
    \       lower bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int) is\
    \ not applicable\n      (cannot infer type-variable(s) T#2\n        (actual and\
    \ formal argument lists differ in length))\n    method Arrays.stream(int[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long result = 0;\n        long num = 0;\n        while(n > 0) {\n\
    \            int digit = n % 10;\n            if (digit % 2 == 1) {\n        \
    \        num /= 10;\n                result += (long)num;\n            }\n   \
    \         n /= 10;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkkrpa81g.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = n % 10;\n                        \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = n;\n        boolean oddDigits = (n&1) == 1;\n    \
    \    long digit = n;\n        while (true) {\n            int digit = digit/2;\n\
    \            if (digit&1) return 0;\n            product *= digit;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp70s4ys87.java:23: error: variable digit is already defined in method\
    \ digits(long)\n            int digit = digit/2;\n                ^\n/tmp/tmp70s4ys87.java:24:\
    \ error: incompatible types: int cannot be converted to boolean\n            if\
    \ (digit&1) return 0;\n                     ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 0l) {\n            return 0l;\n        }\n        // Find\
    \ out the product of odd digits starting from the left\n        // of the given\
    \ number\n        long product = 1;\n        while (n > 10l) {\n            product\
    \ *= n % 10l;\n            n /= 10l;\n        }\n        if (n == 0l) {\n    \
    \        return product;\n        }\n        // We are done: find the product\
    \ of even digits\n        if (n != 0l) {\n            // If we started with n==0,\
    \ then we return 0\n            long product = 0;\n            while (n > 0l)\
    \ {\n                product *= n % 10l;\n                n /= 10l;\n        \
    \    }\n            return product;\n        }\n        // We have reached this\
    \ point, which means we started with n==0, so\n        // we return 1 instead\n\
    \        return 1;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4hln1byf.java:35: error: variable product is already defined in\
    \ method digits(long)\n            long product = 0;\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011546
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n < 0)\n            throw new IllegalArgumentException(\"n must\
    \ be positive\");\n        if (n < 10) return n;\n        // Simplification: only\
    \ odd digits matter when multiplied by the product of even digits.\n        long\
    \ product = 1;\n        for (int i = 2; i <= n/2; i+=2)\n            product *=\
    \ i;\n        long result = product * (n/2);\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_3q6rtmq.java:31)\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long factor = 1;\n        long d = n;\n        long result = 0;\n\
    \n        do {\n            d = d / 10;\n            factor *= d;\n        } while\
    \ (d > 0);\n\n        while ((d & 1) == 1) {\n            result += 1l;\n    \
    \        d = d >> 1;\n        }\n\n        return result * factor;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphqa2lgtt.java:36)\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long factor = 1;\n        long sum = 0;\n        while (n > 0) {\n\
    \            sum += n / factor;\n            n %= factor;\n            factor\
    \ *= 10;\n        }\n        if (sum % 2 == 0) {\n            return 0;\n    \
    \    } else {\n            return sum;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdwsoi0yr.java:34)\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long total = 0;\n        while (n != 0) {\n            long d = n\
    \ % 10;\n            total = d * total + (d % 2 == 1 ? 1l : 0l);\n           \
    \ n = n / 10;\n        }\n        return total;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdn23j7fr.java:28)\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long sum = 0;\n        while (n > 0) {\n            sum += n % 10;\n\
    \            n /= 10;\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4dp54mvb.java:28)\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 0L) {\n            return 0L;\n        }\n        long lastDigit\
    \ = n;\n        long lastProduct = 1L;\n        long product;\n        while (true)\
    \ {\n            product = lastProduct * lastDigit;\n            lastDigit = n\
    \ / 10;\n            if (lastDigit == 0L) {\n                break;\n        \
    \    }\n            lastProduct = product;\n        }\n        return lastProduct;\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp51lke5x2.java:36)\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if ( n < 10l ) return n * n; // base case\n        int carry = 0;\n\
    \        for ( int i = 0; i < Math.ceil(n/10); i++) {\n            long product\
    \ = (long) n * Math.pow( 10, i+1 );\n            long digit = product % 10;\n\
    \            long rest = (long) product / 10;\n            carry = rest * Math.pow(\
    \ 10, i+1 );\n            return carry + digit;\n        }\n        return carry;\
    \ // if all digits are even, carry is 0\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzlus_fzi.java:22: error: incompatible types: possible lossy conversion\
    \ from double to long\n            long product = (long) n * Math.pow( 10, i+1\
    \ );\n                                    ^\n/tmp/tmpzlus_fzi.java:25: error:\
    \ incompatible types: possible lossy conversion from double to int\n         \
    \   carry = rest * Math.pow( 10, i+1 );\n                         ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // If all digits are even\n        if (n % 2 == 0) {\n          \
    \  return 0L;\n        }\n\n        long product = 1L;\n        for (int i = 3;\
    \ i * i <= n; i += 2) {\n            product *= i;\n        }\n\n        return\
    \ product;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsrm1sc6d.java:32)\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long sum = 0;\n        while (n) {\n            long next = n % 10;\n\
    \            if (next % 2 == 1)\n                sum -= next;\n            n /=\
    \ 10;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5motqurb.java:20: error: incompatible types: long cannot be converted\
    \ to boolean\n        while (n) {\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 0)\n            return 0;\n        long result = 0;\n  \
    \      while (n > 0) {\n            n /= 10;\n            if (n % 2 == 1)\n  \
    \              result *= 10;\n            result += (n - n % 2);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppcnuqmr6.java:31)\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long x = 0l;\n        while (n>0) {\n            long y = n % 10;\n\
    \            n /= 10;\n            if (y%2 == 1) x = (x*10) + (y&1);\n       \
    \ }\n        return x;\n    }\n    public static void main(String[] args) {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2eh7rj__.java:28)\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long prod = 0;\n        for (int i = 0; i < n; i = i + 2) {\n   \
    \         prod *= (long)Math.pow(10, i);\n        }\n        return prod;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(digits((5l)) ==\
    \ (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n\
    \    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcmybh6gm.java:26)\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 0l)\n            return 0l;\n\n        List<Integer> digits\
    \ = Lists.newArrayList();\n        while (!digits.add(n % 10l))\n            n\
    \ = n / 10l;\n\n        return digits.stream().mapToLong(i -> i).sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb7xrri87.java:22: error: cannot find symbol\n        List<Integer>\
    \ digits = Lists.newArrayList();\n                               ^\n  symbol:\
    \   variable Lists\n  location: class Problem\n/tmp/tmpb7xrri87.java:23: error:\
    \ incompatible types: long cannot be converted to Integer\n        while (!digits.add(n\
    \ % 10l))\n                             ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n < 10) {\n            return (long)Math.pow(10, n);\n      \
    \  }\n\n        int count = 0;\n        long x = n;\n\n        while (x != 0)\
    \ {\n            x /= 10;\n            count++;\n        }\n\n        if ((int)Math.sqrt(count)\
    \ == count) {\n            return n * Math.pow(10, count);\n        }\n\n    \
    \    return 0;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm6st6lyn.java:32: error: incompatible types: possible lossy conversion\
    \ from double to long\n            return n * Math.pow(10, count);\n         \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long sum = 0;\n        int counter = 1;\n        while (n != 0) {\n\
    \            sum += counter % 2 == 1 ? n % 10l : 1; // Odd number\n          \
    \  n /= 10;\n            counter *= 2;\n        }\n        return sum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcqtapuix.java:31)\n"
  stdout: ''
  timestamp: 1660011547
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // Find the least whole digit less than or equal to n.\n        while\
    \ (n != 0) {\n            long digit = n / 10;\n            n = n % 10;\n    \
    \        if (digit % 2 != 0) {\n                return 0;\n            }\n   \
    \     }\n        return n;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011552
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        long digit = n;\n\n        while (n !=\
    \ 0) {\n            digit = digit / 10;\n            product = product * digit;\n\
    \            n = n - (long)digit;\n        }\n\n        return product;\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011552
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return n.remainder(10) * (n.remainder(10)%2 == 0 ? 0 : 1);\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzr6n1vfw.java:19: error: long cannot be dereferenced\n        return\
    \ n.remainder(10) * (n.remainder(10)%2 == 0 ? 0 : 1);\n                ^\n/tmp/tmpzr6n1vfw.java:19:\
    \ error: long cannot be dereferenced\n        return n.remainder(10) * (n.remainder(10)%2\
    \ == 0 ? 0 : 1);\n                                   ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011548
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 0 || n % 2 == 0) {\n            return 0;\n        }\n\n\
    \        long product = 1;\n        while (n != 0) {\n            product *= n\
    \ % 10;\n            n /= 10;\n        }\n        return product;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplwapazzk.java:32)\n"
  stdout: ''
  timestamp: 1660011548
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long result = n;\n        int odd = 0;\n        while (result !=\
    \ 0) {\n            int digit = result % 10;\n            if (digit % 2 != 0)\
    \ {\n                odd = 1l << odd;\n            }\n            result /= 10;\n\
    \        }\n        return (odd == 0) ? 0l : odd;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_4y351c3.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = result % 10;\n                   \
    \            ^\n/tmp/tmp_4y351c3.java:24: error: incompatible types: possible\
    \ lossy conversion from long to int\n                odd = 1l << odd;\n      \
    \                   ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011548
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n < 0) {\n            return 0;\n        }\n        if (n ==\
    \ 0) {\n            return 1;\n        }\n        long result = 1;\n        int\
    \ d = (int) Math.ceil(Math.log10(n));\n        while (d > 0 && n >= 10) {\n  \
    \          result *= n % 10;\n            n /= 10;\n            d--;\n       \
    \ }\n        if (d > 0) {\n            result *= n % 10;\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn0ocifnu.java:39)\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1l;\n        while (n != 0) {\n            if (n %\
    \ 2 == 1l) {\n                product *= n;\n            }\n            n /= 2l;\n\
    \        }\n        return product;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5tmsrfcs.java:30)\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        if (n % 2 == 0) return 0;\n        int\
    \ digit = 2;\n        while (n/digit > 1) {\n            product *= digit;\n \
    \           n /= digit;\n            digit++;\n        }\n        return product;\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqoqxshnu.java:30)\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        String s = n.toString();\n        List<Integer> digits = Arrays.stream(s.chars()).boxed().map(c\
    \ -> (int) c).collect(Collectors.toList());\n        boolean allEven = digits.stream().allMatch(i\
    \ -> i % 2 == 0);\n        return allEven ? 0l : digits.stream().filter(i -> i\
    \ % 2 != 0).reduce(1, (a, b) -> a * b);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyqtvvapg.java:19: error: long cannot be dereferenced\n        String\
    \ s = n.toString();\n                    ^\n/tmp/tmpyqtvvapg.java:20: error: no\
    \ suitable method found for stream(IntStream)\n        List<Integer> digits =\
    \ Arrays.stream(s.chars()).boxed().map(c -> (int) c).collect(Collectors.toList());\n\
    \                                     ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; IntStream cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; IntStream cannot be converted to\
    \ int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; IntStream cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; IntStream cannot be converted to\
    \ double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return n != 0 ? n.longValue() % 2 == 0 ? (n / 2) : (n / 2) * 10 :\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg42o6xkg.java:19: error: long cannot be dereferenced\n        return\
    \ n != 0 ? n.longValue() % 2 == 0 ? (n / 2) : (n / 2) * 10 : 0;\n            \
    \             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011548
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long result = n;\n        // If n is even, just return 0\n      \
    \  if(n % 2 == 0) {\n            return 0;\n        }\n        while(n > 10) {\n\
    \            long temp = n % 10;\n            n /= 10;\n            long newResult\
    \ = (result * 10) + temp;\n            result = newResult;\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxs98eaib.java:34)\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // Complete this method!\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp188cy3jo.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011548
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long sum = 0;\n        while (n > 0) {\n            int digit = n\
    \ % 10;\n            n /= 10;\n            if (digit % 2 == 1)\n             \
    \   sum += digit;\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3fflgyt8.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = n % 10;\n                        \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long res = 1;\n        while (n != 0l) {\n            int digit =\
    \ (int)(n % 10);\n            res *= 10l*digit % 2;\n            n /= 10;\n  \
    \      }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu33boie_.java:28)\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 0;\n        while (n!=0)\n        {\n            int\
    \ lastDigit=n%10;\n            product+=lastDigit;\n            n/=10;\n     \
    \   }\n        return product;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd363ww5l.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int lastDigit=n%10;\n                        \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long result = 0;\n        while (n > 0) {\n            if (n % 10\
    \ != 0) {\n                result += (n % 10) * 2;\n            }\n          \
    \  n /= 10;\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9lb48bvi.java:29)\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long[] arr = (long[])java.lang.reflect.Array.getClass(n).getDeclaredField(\"\
    digits\").get(n);\n        if (arr == null)\n            return 0;\n        else\n\
    \            return arr[0];\n    }\n    public static void main(String[] args)\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiwzj51ws.java:19: error: method getClass in class Object cannot\
    \ be applied to given types;\n        long[] arr = (long[])java.lang.reflect.Array.getClass(n).getDeclaredField(\"\
    digits\").get(n);\n                                                    ^\n  required:\
    \ no arguments\n  found:    long\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // Your code here\n        LongStream digits = n.stream().filter(x\
    \ -> x % 2 != 0);\n        long product = LongStream.of(digits).mapToLong(x ->\
    \ x * 10).sum();\n        return product == 0 ? 0 : product;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp90jjjzdr.java:20: error: long cannot be dereferenced\n        LongStream\
    \ digits = n.stream().filter(x -> x % 2 != 0);\n                             ^\n\
    /tmp/tmp90jjjzdr.java:21: error: no suitable method found for of(LongStream)\n\
    \        long product = LongStream.of(digits).mapToLong(x -> x * 10).sum();\n\
    \                                 ^\n    method LongStream.of(long) is not applicable\n\
    \      (argument mismatch; LongStream cannot be converted to long)\n    method\
    \ LongStream.of(long...) is not applicable\n      (varargs mismatch; LongStream\
    \ cannot be converted to long)\n2 errors\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        int x = 0;\n        while (n != 0) {\n            if (n / 10l % 2\
    \ != 0) {\n                x = x * 10 + n % 10;\n                n = n / 10l;\n\
    \            }\n            n = n / 10l;\n        }\n        return x;\n    }\n\
    \    public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplvgopb0z.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n                x = x * 10 + n % 10;\n                   \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        List<Long> result = new ArrayList<>();\n        while (n>0) {\n \
    \           int digit = n%10;\n            result.add(digit);\n            n /=\
    \ 10;\n        }\n        \n        Long one = result.get(0);\n        Long two\
    \ = result.get(1);\n        Long three = result.get(2);\n        Long four = result.get(3);\n\
    \        Long five = result.get(4);\n        Long six = result.get(5);\n     \
    \   Long seven = result.get(6);\n        Long eight = result.get(7);\n       \
    \ Long nine = result.get(8);\n        \n        if ((one & 1) == 1)\n        \
    \    return 0;\n        \n        long product = one * two * three * four * five\
    \ * six * seven * eight * nine;\n        \n        for (int i=0; i<result.size();\
    \ i++) {\n            if (result.get(i) == 0)\n                product *= 0;\n\
    \            else if (result.get(i) == 1)\n                product *= 10;\n  \
    \          else\n                product *= 100;\n        }\n        \n      \
    \  return product;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1s0bowk4.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = n%10;\n                         ^\n\
    /tmp/tmp1s0bowk4.java:22: error: incompatible types: int cannot be converted to\
    \ Long\n            result.add(digit);\n                       ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if(n<1l) return 0l;\n        long x = n % (2l);\n        n = n /\
    \ 2l;\n        while(n != 0l) {\n            long x = x + (n % (2l));\n      \
    \      n = n / 2l;\n        }\n        return x;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpejcbc6ct.java:23: error: variable x is already defined in method\
    \ digits(long)\n            long x = x + (n % (2l));\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011549
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n < 10) return 1l;\n        long result = 1;\n        while (n\
    \ > 0) {\n            result *= n % 10;\n            n /= 10;\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsu45w308.java:28)\n"
  stdout: ''
  timestamp: 1660011550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n < 10)\n            return n;\n        if (n % 2 == 0)\n   \
    \         return 0;\n        long sum = 0;\n        while (n > 0) {\n        \
    \    sum *= 10;\n            sum += n % 10;\n            n /= 10;\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphs9_2i1z.java:33)\n"
  stdout: ''
  timestamp: 1660011550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        return Stream.of(n).map(Object::toString).map(String::valueOf).filter(s\
    \ -> s.chars().allMatch(c -> c == '0')).map(s -> Long.parseLong(s)).findFirst().getOrDefault(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf92gavmv.java:19: error: cannot find symbol\n        return Stream.of(n).map(Object::toString).map(String::valueOf).filter(s\
    \ -> s.chars().allMatch(c -> c == '0')).map(s -> Long.parseLong(s)).findFirst().getOrDefault(0);\n\
    \                                                                            \
    \                                                                            \
    \     ^\n  symbol:   method getOrDefault(int)\n  location: class Optional<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        int x = 0;\n        while (n != 0) {\n            if (n & 1L) {\n\
    \                x *= 10L;\n            }\n            n >>>= 1L;\n        }\n\
    \        return x;\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9m68uxi4.java:21: error: incompatible types: long cannot be converted\
    \ to boolean\n            if (n & 1L) {\n                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011550
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long val = 1l; // initialized to 1\n        long prod = 1l; // initialized\
    \ to 1\n        while( n > 0 ) {\n            val = val * n % 10;\n          \
    \  prod *= val;\n            n /= 10;\n        }\n        if ( n % 2 != 0 ) {\n\
    \            prod *= 0l;\n        }\n        return prod;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuq_b6byw.java:33)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        boolean even = n % 2 == 0;\n        if (even) {\n            return\
    \ 0;\n        }\n        long result = 1;\n        for (int i = 3; i * i <= n;\
    \ i += 2) {\n            result *= i;\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(digits((5l)) ==\
    \ (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n\
    \    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2s3wuepm.java:30)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n < 10) return n;\n        long rem = n;\n        while (n /\
    \ 10 != 0) rem = rem * 10 - n % 10;\n        return rem;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011555
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // return n - (n % 10) * (n % 10);\n        return (n - (n % 10))\
    \ * (n / 10);\n    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpst8l35f5.java:23)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n == 0l)\n            return 0l;\n        if (n < 0) {\n    \
    \        throw new NumberFormatException(\"Negative numbers aren't allowed\");\n\
    \        }\n        if (n % 2 == 0) {\n            return 0l;\n        }\n   \
    \     int maxDigits = (int) Math.floor(Math.log10(n));\n        long[] digits\
    \ = new long[maxDigits + 1];\n        long product = 1;\n        int i = 0;\n\
    \        while (n!=0)\n        {\n            digits[i++] = (n % 10);\n      \
    \      n /= 10;\n        }\n        Arrays.stream(digits).forEach(l -> {\n   \
    \         int idx = maxDigits - 1 - Arrays.binarySearch(digits, l);\n        \
    \    product *= (l % 2 == 0) ? 0 : 1;\n            if (idx > 0)\n            \
    \    product /= digits[idx];\n        });\n        return product;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcxf_mdyj.java:38: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n            product *= (l % 2\
    \ == 0) ? 0 : 1;\n            ^\n/tmp/tmpcxf_mdyj.java:40: error: local variables\
    \ referenced from a lambda expression must be final or effectively final\n   \
    \             product /= digits[idx];\n                ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if ((n % 100 == 0) && (n % 10 != 0)) {\n            return 0;\n \
    \       } else if (n < 0) {\n            return -1;\n        } else if (n == 0)\
    \ {\n            return 0;\n        }\n        long result = 1;\n        long\
    \ digit = n%10;\n        long factor = 1;\n        while (n > 0) {\n         \
    \   if (n % 10 == digit) {\n                factor *= 10;\n            } else\
    \ {\n                result *= factor;\n                factor = factor * 10;\n\
    \            }\n            n /= 10;\n        }\n        return result * factor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(digits((5l))\
    \ == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) ==\
    \ (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) ==\
    \ (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpow9xxg7h.java:41)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        if (n % 2 == 0)\n            return 0;\n        long ret = 1;\n \
    \       while (n > 0) {\n            n /= 10;\n            ret = (ret * 10 + n\
    \ % 10);\n            n = n / 10;\n        }\n        return ret;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7bj2pm30.java:30)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        int result = 0;\n        int i;\n        for (i = n / 10; n != 0;\
    \ i /= 10, n /= 10) {\n            if (i % 2 == 1) {\n                result +=\
    \ n / i;\n            }\n        }\n        return result * n;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsvmfpbyv.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for (i = n / 10; n != 0; i /= 10, n /= 10) {\n   \
    \                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long ans = 0;\n        while (n!=0){\n            ans = ans * 10\
    \ + n % 10;\n            n = n/10;\n        }\n        return ans;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppawncxs4.java:28)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long n1;\n        long n2;\n        int n3;\n        if (n >= 1000000000000l)\
    \ n1 = 1000000000000l; else n1 = n;\n        n2 = n1 / 10l; n3 = n1 % 10l;\n \
    \       return (n2 * 10l) + n3;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfn7wrc_m.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n        n2 = n1 / 10l; n3 = n1 % 10l;\n                  \
    \             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long n1 = n % 10;\n        n /= 10;\n        long n2 = n % 10;\n\
    \        n /= 10;\n        long n3 = n % 10;\n        n /= 10;\n        long n4\
    \ = n % 10;\n        return n1 * 10 + n2 * 100 + n3 * 1000 + n4 * 10000 + n1 *\
    \ 100 * 10 + n2 * 10 * 100 + n3 * 100 * 100 + n4 * 1000 * 1000;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp41ojw7qf.java:29)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 4
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        BigInteger x = BigInteger.valueOf(1);\n        BigInteger result\
    \ = BigInteger.ONE;\n        while (!n.equals(BigInteger.ZERO)) {\n          \
    \  x = x.multiply(BigInteger.valueOf(2).add(BigInteger.valueOf(n.divide(BigInteger.valueOf(2)))));\n\
    \            n = n.divide(BigInteger.valueOf(2).add(BigInteger.valueOf(n.divide(BigInteger.valueOf(2)))));\n\
    \        }\n        return x.longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdvd37c2p.java:21: error: long cannot be dereferenced\n        while\
    \ (!n.equals(BigInteger.ZERO)) {\n                 ^\n/tmp/tmpdvd37c2p.java:22:\
    \ error: long cannot be dereferenced\n            x = x.multiply(BigInteger.valueOf(2).add(BigInteger.valueOf(n.divide(BigInteger.valueOf(2)))));\n\
    \                                                                         ^\n\
    2 errors\nprinting javac parameters to: /work/arjunguha-research-group/repos/polyglot-codegen-evaluation/src/javac.20220808_221911.args\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        long digit;\n        while (n!=0) {\n\
    \            digit = n / 10;\n            product *= digit;\n            n = n\
    \ - (digit*10);\n        }\n        return product;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // Write your code here.\n        int i = 0;\n        while (n !=\
    \ 0) {\n            if (n % 2 == 1) {\n                n /= 2;\n            }\
    \ else {\n                n = n / 2;\n            }\n            i++;\n      \
    \  }\n        return i;\n    }\n    public static void main(String[] args) {\n\
    \    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l))\
    \ == (1l));\n    assert(digits((5014l)) == (5l));\n    assert(digits((98765l))\
    \ == (315l));\n    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l))\
    \ == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplya6i1kr.java:32)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        while (n!=0) {\n            product *=\
    \ n % 10;\n            n /= 10;\n        }\n        return product;\n    }\n \
    \   public static void main(String[] args) {\n    assert(digits((5l)) == (5l));\n\
    \    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n   \
    \ assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvwgwqjiz.java:28)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        if (n < 0) {\n            return 0;\n\
    \        }\n        while (n > 0) {\n            product *= n % 10;\n        \
    \    n /= 10;\n        }\n        return product;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l))\
    \ == (5l));\n    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) ==\
    \ (5l));\n    assert(digits((98765l)) == (315l));\n    assert(digits((5576543l))\
    \ == (2625l));\n    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj5fssceo.java:31)\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        // Complete this method\n        long product = 1;\n        long\
    \ value = n;\n        if (value != 0) {\n            int digit1 = value % 10;\n\
    \            int digit2 = value / 10;\n            if (digit2 % 2 != 0) {\n  \
    \              product *= digit1;\n            }\n            value /= 10;\n \
    \           if (value % 2 != 0) {\n                product *= digit1;\n      \
    \      }\n        }\n        return product;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n\
    \    assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n \
    \   assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl7rjwjth.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit1 = value % 10;\n                   \
    \            ^\n/tmp/tmpl7rjwjth.java:24: error: incompatible types: possible\
    \ lossy conversion from long to int\n            int digit2 = value / 10;\n  \
    \                             ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long res = 0;\n        while (n!=0)\n            res = (res % 10)\
    \ * (n%10);\n        res = (res % 10) * (n%10) % 10;\n        return res;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(digits((5l)) ==\
    \ (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n\
    \    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011556
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long[] digits = LongStream.range(n, 1, -1).toArray();\n        Arrays.sort(digits);\n\
    \        long p = 1;\n        for (long d : digits) {\n            p = p * d;\n\
    \        }\n        return p;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(digits((5l)) == (5l));\n    assert(digits((54l)) == (5l));\n \
    \   assert(digits((120l)) == (1l));\n    assert(digits((5014l)) == (5l));\n  \
    \  assert(digits((98765l)) == (315l));\n    assert(digits((5576543l)) == (2625l));\n\
    \    assert(digits((2468l)) == (0l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34kod6u9.java:19: error: method range in interface LongStream cannot\
    \ be applied to given types;\n        long[] digits = LongStream.range(n, 1, -1).toArray();\n\
    \                                  ^\n  required: long,long\n  found:    long,int,int\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011551
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given a positive integer n, return the product of the\
    \ odd digits.\n    // Return 0 if all digits are even.\n    // For example:\n\
    \    // >>> digits((1l))\n    // (1l)\n    // >>> digits((4l))\n    // (0l)\n\
    \    // >>> digits((235l))\n    // (15l)\n    public static long digits(long n)\
    \ {\n        long product = 1;\n        if (n % 2 == 0) return 0;\n        int\
    \ digit = -1;\n        do {\n            digit++;\n        } while (n /= 10);\n\
    \        product *= (long) Math.pow(10, digit);\n        return product;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(digits((5l)) ==\
    \ (5l));\n    assert(digits((54l)) == (5l));\n    assert(digits((120l)) == (1l));\n\
    \    assert(digits((5014l)) == (5l));\n    assert(digits((98765l)) == (315l));\n\
    \    assert(digits((5576543l)) == (2625l));\n    assert(digits((2468l)) == (0l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpckqj679m.java:24: error: incompatible types: long cannot be converted\
    \ to boolean\n        } while (n /= 10);\n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011551
