language: java
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        try\
    \ {\n            // TODO: Write code to validate date string\n            valid\
    \ = true;\n        } catch (Exception e) {\n            System.out.println(\"\
    Invalid Date String: \" + e);\n        }\n        return valid;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgfdvo_jq.java:38)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        Date\
    \ d = null;\n        try {\n            d = new SimpleDateFormat(\"dd-MM-yyyy\"\
    ).parse(date);\n        }\n        catch (Exception exp) {\n            return\
    \ false;\n        }\n        int days = d.toInstant().toEpochMilli() / 1000L -\
    \ new Date().getTime() / 1000L;\n        if (days < 1 || days > 31) {\n      \
    \      return false;\n        }\n        Calendar c = Calendar.getInstance();\n\
    \        c.setTime(new Date());\n        for (int i = 0; i < 12; i++) {\n    \
    \        if (i == d.getMonth()) {\n                c.add(Calendar.DAY_OF_MONTH,\
    \ days);\n                if (c.getTime().getYear() == d.getYear()) {\n      \
    \              c.add(Calendar.MONTH, days);\n                }\n            }\n\
    \        }\n        days = c.get(Calendar.DAY_OF_MONTH);\n        return days\
    \ == day;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp70tw1k5l.java:30: error: cannot find symbol\n            d = new\
    \ SimpleDateFormat(\"dd-MM-yyyy\").parse(date);\n                    ^\n  symbol:\
    \   class SimpleDateFormat\n  location: class Problem\n/tmp/tmp70tw1k5l.java:35:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    int days = d.toInstant().toEpochMilli() / 1000L - new Date().getTime() /\
    \ 1000L;\n                                                        ^\n/tmp/tmp70tw1k5l.java:50:\
    \ error: cannot find symbol\n        return days == day;\n                   \
    \    ^\n  symbol:   variable day\n  location: class Problem\nNote: /tmp/tmp70tw1k5l.java\
    \ uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation\
    \ for details.\n3 errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        Scanner scan = new Scanner(date);\n\
    \        scan.useDelimiter(\"-\");\n        if (scan.hasNext()) {\n          \
    \  String[] dateParts = scan.next().split(\"-\");\n            int day = Integer.parseInt(dateParts[0]);\n\
    \            int month = Integer.parseInt(dateParts[1]);\n            int year\
    \ = Integer.parseInt(dateParts[2]);\n            return isValid(day, month, year);\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5y2nv442.java:34: error: cannot find symbol\n            return\
    \ isValid(day, month, year);\n                   ^\n  symbol:   method isValid(int,int,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid;\n        if (date.length()\
    \ > 0) {\n            String month = \"0\";\n            int year;\n         \
    \   month = date.substring(0, 2);\n            year = Integer.parseInt(date.substring(6,\
    \ 10));\n            if (month.length() == 1) {\n                month = \"0\"\
    \ + month;\n            }\n            int month1 = Integer.parseInt(month);\n\
    \            int day1 = Integer.parseInt(date.substring(2, 4));\n            if\
    \ (day1 < 1 || day1 > 31) {\n                return false;\n            }\n  \
    \          if ((month1 == 1 || month1 == 3 || month1 == 5 || month1 == 7 || month1\
    \ == 8 || month1 == 10 || month1 == 12) && (day1 < 1 || day1 > 30)) {\n      \
    \          return false;\n            }\n            if ((month1 == 4 || month1\
    \ == 6 || month1 == 9 || month1 == 11) && (day1 < 1 || day1 > 29)) {\n       \
    \         return false;\n            }\n            if ((month1 == 2) && (day1\
    \ < 1 || day1 > 28)) {\n                return false;\n            }\n       \
    \     valid = true;\n        } else {\n            valid = false;\n        }\n\
    \        return valid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiom0ung4.java:57)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // TODO: Complete the function\n \
    \   }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpblpulopt.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) {\n          \
    \  return false;\n        }\n        int total = 0;\n        for (int i = 0; i\
    \ < 11; i++) {\n            if (date.charAt(i) == '1') {\n                total++;\n\
    \            }\n            if (date.charAt(i) == '3') {\n                total++;\n\
    \            }\n            if (date.charAt(i) == '5') {\n                total++;\n\
    \            }\n            if (date.charAt(i) == '7') {\n                total++;\n\
    \            }\n            if (date.charAt(i) == '8') {\n                total++;\n\
    \            }\n            if (date.charAt(i) == '10') {\n                total++;\n\
    \            }\n            if (date.charAt(i) == '12') {\n                total++;\n\
    \            }\n        }\n        if (total < 1 || total > 31) {\n          \
    \  return false;\n        }\n        for (int i = 0; i < 11; i++) {\n        \
    \    if (date.charAt(i) == '4') {\n                total++;\n            }\n \
    \           if (date.charAt(i) == '6') {\n                total++;\n         \
    \   }\n            if (date.charAt(i) == '9') {\n                total++;\n  \
    \          }\n            if (date.charAt(i) == '11') {\n                total++;\n\
    \            }\n        }\n        if (total < 1 || total > 30) {\n          \
    \  return false;\n        }\n        if (date.charAt(0) == '2') {\n          \
    \  if (total < 1 || total > 29) {\n                return false;\n           \
    \ }\n        }\n        if (date.charAt(2) == '-' && date.charAt(4) == '-') {\n\
    \            try {\n                Date dateFormat = format.parse(date);\n  \
    \              return dateFormat.after((new Date()));\n            } catch (Exception\
    \ ex) {\n                return false;\n            }\n        } else {\n    \
    \        return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsbpw1ysw.java:47: error: unclosed character literal\n         \
    \   if (date.charAt(i) == '10') {\n                                  ^\n/tmp/tmpsbpw1ysw.java:47:\
    \ error: unclosed character literal\n            if (date.charAt(i) == '10') {\n\
    \                                     ^\n/tmp/tmpsbpw1ysw.java:50: error: unclosed\
    \ character literal\n            if (date.charAt(i) == '12') {\n             \
    \                     ^\n/tmp/tmpsbpw1ysw.java:50: error: unclosed character literal\n\
    \            if (date.charAt(i) == '12') {\n                                 \
    \    ^\n/tmp/tmpsbpw1ysw.java:67: error: unclosed character literal\n        \
    \    if (date.charAt(i) == '11') {\n                                  ^\n/tmp/tmpsbpw1ysw.java:67:\
    \ error: unclosed character literal\n            if (date.charAt(i) == '11') {\n\
    \                                     ^\n6 errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) return false;\n\
    \        if (date.matches(\"^[01][0-9]\\\\-(0[1-9]|1[0-2])\\\\-[0-9]{4}$\")) {\n\
    \            String[] date = date.split(\"-\");\n            int month1 = Integer.parseInt(date[0]);\n\
    \            int day1 = Integer.parseInt(date[1]);\n            int year1 = Integer.parseInt(date[2]);\n\
    \            int month2 = Integer.parseInt(date[3]);\n            int day2 = Integer.parseInt(date[4]);\n\
    \            int year2 = Integer.parseInt(date[5]);\n            int totalDays\
    \ = day2 - day1;\n            int totalMonths = month2 - month1;\n           \
    \ int totalYears = year2 - year1;\n            int totalMonthDays = totalDays\
    \ / totalMonths;\n            int totalMonthDaysRemainder = totalDays % totalMonths;\n\
    \            int totalYearDays = totalMonthDays / totalYears;\n            int\
    \ totalYearDaysRemainder = totalMonthDaysRemainder % totalYears;\n           \
    \ int totalYearDaysRemainder1 = totalYearDaysRemainder % totalYears;\n       \
    \     return ((totalYearDaysRemainder == 0) && (totalMonthDaysRemainder == 0)\
    \ && (totalMonthDaysRemainder1 == 0));\n        } else return false;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqrws_cst.java:29: error: variable date is already defined in method\
    \ validDate(String)\n            String[] date = date.split(\"-\");\n        \
    \             ^\n/tmp/tmpqrws_cst.java:29: error: cannot find symbol\n       \
    \     String[] date = date.split(\"-\");\n                                ^\n\
    \  symbol:   method split(String)\n  location: variable date of type String[]\n\
    /tmp/tmpqrws_cst.java:44: error: cannot find symbol\n            return ((totalYearDaysRemainder\
    \ == 0) && (totalMonthDaysRemainder == 0) && (totalMonthDaysRemainder1 == 0));\n\
    \                                                                            \
    \            ^\n  symbol:   variable totalMonthDaysRemainder1\n  location: class\
    \ Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        //TODO: Implement the logic here\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplwpxi5oo.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] str = date.split(\"-\");\n\
    \        if(str.length != 3) {\n            return false;\n        }\n       \
    \ if(str[0].length() != 2 || str[1].length() != 2 || str[2].length() != 4 ) {\n\
    \            return false;\n        }\n        LocalDate d = LocalDate.of(Integer.parseInt(str[0]),\
    \ Integer.parseInt(str[1]), Integer.parseInt(str[2]));\n        \n        // month\
    \ of birth must be in range [1,12] or 0\n        if(d.getMonthOfYear() < 1 ||\
    \ d.getMonthOfYear() > 12) {\n            return false;\n        }\n        //\
    \ day of birth must be in range [1,31]\n        if(d.getDayOfMonth() < 1 || d.getDayOfMonth()\
    \ > 31) {\n            return false;\n        }\n        // year of birth must\
    \ be in range [1900,2100]\n        if(d.getYear() < 1900 || d.getYear() > 2100)\
    \ {\n            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpafl23fuk.java:34: error: cannot find symbol\n        LocalDate\
    \ d = LocalDate.of(Integer.parseInt(str[0]), Integer.parseInt(str[1]), Integer.parseInt(str[2]));\n\
    \        ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmpafl23fuk.java:34:\
    \ error: cannot find symbol\n        LocalDate d = LocalDate.of(Integer.parseInt(str[0]),\
    \ Integer.parseInt(str[1]), Integer.parseInt(str[2]));\n                     \
    \ ^\n  symbol:   variable LocalDate\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) {\n          \
    \  System.out.println(\"Date is empty\");\n            return false;\n       \
    \ }\n        int day = 0, month = 0, year = 0;\n        if (date.contains(\"-\"\
    )) {\n            String[] split = date.split(\"-\");\n            year = Integer.parseInt(split[0]);\n\
    \            month = Integer.parseInt(split[1]);\n            day = Integer.parseInt(split[2]);\n\
    \        } else {\n            month = Integer.parseInt(date);\n            day\
    \ = Integer.parseInt(date);\n            year = Integer.parseInt(date);\n    \
    \    }\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month\
    \ == 8 || month == 10 || month == 12) {\n            if (day > 31 && day < 1)\
    \ {\n                System.out.println(\"Invalid date\");\n                return\
    \ false;\n            }\n        } else if (month == 4 || month == 6 || month\
    \ == 9 || month == 11) {\n            if (day > 30 && day < 1) {\n           \
    \     System.out.println(\"Invalid date\");\n                return false;\n \
    \           }\n        }\n        if (month == 2) {\n            if (day > 29)\
    \ {\n                System.out.println(\"Invalid date\");\n                return\
    \ false;\n            }\n        }\n        if (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        \
    \    if (day > 31) {\n                System.out.println(\"Invalid date\");\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa34zpjgx.java:70)\n"
  stdout: 'Invalid date

    '
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7r0b0xhl.java:32)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.equals(\"\")) {\n       \
    \     return false;\n        }\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    mm-dd-yyyy\");\n        try {\n            Date convertedDate = format.parse(date);\n\
    \            if (convertedDate.after(new Date())){\n                return false;\n\
    \            }\n        } catch (ParseException e) {\n            System.out.println(\"\
    Invalid Date\");\n            return false;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp91nfhos.java:30: error: cannot find symbol\n        SimpleDateFormat\
    \ format = new SimpleDateFormat(\"mm-dd-yyyy\");\n        ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpp91nfhos.java:30: error:\
    \ cannot find symbol\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    mm-dd-yyyy\");\n                                      ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpp91nfhos.java:36: error: cannot find symbol\n\
    \        } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean isValid = false;\n       \
    \ // Write your code here\n        String[] dateSplitted = date.split(\"-\");\n\
    \        if(dateSplitted.length == 3) {\n            isValid = true;\n       \
    \ } else {\n            isValid = false;\n        }\n        return isValid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64me96r2.java:39)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return !Strings.isNullOrEmpty(date)\
    \ &&\n            date.length() > 0 &&\n            Integer.parseInt(date.substring(0,2))\
    \ <= 12 &&\n            Integer.parseInt(date.substring(3,5)) <= 12 &&\n     \
    \       Integer.parseInt(date.substring(6,10)) <= 29;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp36x2vs4l.java:27: error: cannot find symbol\n        return !Strings.isNullOrEmpty(date)\
    \ &&\n                ^\n  symbol:   variable Strings\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // TODO: Write code here\n       \
    \ return true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7cv7garr.java:32)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String regex = \"^\\\\d{2}-\\\\d{2}-\\\
    \\d{4}$\";\n        boolean valid = true;\n        try (SimpleDateFormat sdf =\
    \ new SimpleDateFormat(regex)) {\n            Date d1 = sdf.parse(date);\n   \
    \         Date d2 = new Date(System.currentTimeMillis());\n            if (d1.after(d2))\
    \ {\n                valid = false;\n            }\n        } catch (ParseException\
    \ ex) {\n            valid = false;\n        }\n        return valid;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsgyyzlk9.java:29: error: cannot find symbol\n        try (SimpleDateFormat\
    \ sdf = new SimpleDateFormat(regex)) {\n             ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpsgyyzlk9.java:29: error: cannot find symbol\n\
    \        try (SimpleDateFormat sdf = new SimpleDateFormat(regex)) {\n        \
    \                                ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmpsgyyzlk9.java:35: error: cannot find symbol\n       \
    \ } catch (ParseException ex) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return date.trim().length()>0 && date.matches(\"\
    ^[1-9]\\\\d{2}-[01]\\\\d-\\\\d\\\\d\\\\d\\\\d$\") && date.split(\"-\")[2]>0 &&\
    \ date.split(\"-\")[2]<31 && date.split(\"-\")[1]>1 && date.split(\"-\")[1]<12;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdt2ocb7d.java:27: error: bad operand types for binary operator\
    \ '>'\n        return date.trim().length()>0 && date.matches(\"^[1-9]\\\\d{2}-[01]\\\
    \\d-\\\\d\\\\d\\\\d\\\\d$\") && date.split(\"-\")[2]>0 && date.split(\"-\")[2]<31\
    \ && date.split(\"-\")[1]>1 && date.split(\"-\")[1]<12;\n                    \
    \                                                                            \
    \                 ^\n  first type:  String\n  second type: int\n/tmp/tmpdt2ocb7d.java:27:\
    \ error: bad operand types for binary operator '<'\n        return date.trim().length()>0\
    \ && date.matches(\"^[1-9]\\\\d{2}-[01]\\\\d-\\\\d\\\\d\\\\d\\\\d$\") && date.split(\"\
    -\")[2]>0 && date.split(\"-\")[2]<31 && date.split(\"-\")[1]>1 && date.split(\"\
    -\")[1]<12;\n                                                                \
    \                                                                         ^\n\
    \  first type:  String\n  second type: int\n/tmp/tmpdt2ocb7d.java:27: error: bad\
    \ operand types for binary operator '>'\n        return date.trim().length()>0\
    \ && date.matches(\"^[1-9]\\\\d{2}-[01]\\\\d-\\\\d\\\\d\\\\d\\\\d$\") && date.split(\"\
    -\")[2]>0 && date.split(\"-\")[2]<31 && date.split(\"-\")[1]>1 && date.split(\"\
    -\")[1]<12;\n                                                                \
    \                                                                            \
    \                      ^\n  first type:  String\n  second type: int\n/tmp/tmpdt2ocb7d.java:27:\
    \ error: bad operand types for binary operator '<'\n        return date.trim().length()>0\
    \ && date.matches(\"^[1-9]\\\\d{2}-[01]\\\\d-\\\\d\\\\d\\\\d\\\\d$\") && date.split(\"\
    -\")[2]>0 && date.split(\"-\")[2]<31 && date.split(\"-\")[1]>1 && date.split(\"\
    -\")[1]<12;\n                                                                \
    \                                                                            \
    \                                              ^\n  first type:  String\n  second\
    \ type: int\n4 errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // TODO: Write your code here\n  \
    \  }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmperu6hp1k.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return !date.equals(\"\") &&\n   \
    \     ((date.split(\"-\").length==3) && //2\n        ((Integer.parseInt(date.split(\"\
    -\")[0])>1 && //1\n        ((Integer.parseInt(date.split(\"-\")[0]) <12 && //3\n\
    \        ((Integer.parseInt(date.split(\"-\")[1])>0 && //1\n        (Integer.parseInt(date.split(\"\
    -\")[1])<31)) ||\n        (Integer.parseInt(date.split(\"-\")[1])>30 && //3\n\
    \        (Integer.parseInt(date.split(\"-\")[1])<31))))||\n        (Integer.parseInt(date.split(\"\
    -\")[0]) >12 && //3\n        (Integer.parseInt(date.split(\"-\")[0])<12))))||\n\
    \        (Integer.parseInt(date.split(\"-\")[0])==0 && //4\n        (Integer.parseInt(date.split(\"\
    -\")[1])==0 && //4\n        (Integer.parseInt(date.split(\"-\")[2])==0)));\n \
    \   }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpymp1r_aw.java:39: error: ')' expected\n        (Integer.parseInt(date.split(\"\
    -\")[2])==0)));\n                                                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if(date.trim().length()<=1)\n    \
    \        return false;\n        try{\n            Date parsedDate = dateValidator.parse(date);\n\
    \            Calendar cal = Calendar.getInstance();\n            cal.setTime(parsedDate);\n\
    \            int month = cal.get(Calendar.MONTH)+1;\n            int year = cal.get(Calendar.YEAR);\n\
    \            int day = cal.get(Calendar.DAY_OF_MONTH);\n            int daysInMonth\
    \ = MonthDay.getDaysInMonth(month,year);\n            if(day>daysInMonth)\n  \
    \              return false;\n            if(month<1 || month>12)\n          \
    \      return false;\n            int daysInYear = MonthDay.getDaysInYear(month);\n\
    \            if(year<1 || year>daysInYear)\n                return false;\n  \
    \      }catch(Exception e)\n        {\n            return false;\n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy200zi90.java:30: error: cannot find symbol\n            Date parsedDate\
    \ = dateValidator.parse(date);\n                              ^\n  symbol:   variable\
    \ dateValidator\n  location: class Problem\n/tmp/tmpy200zi90.java:36: error: cannot\
    \ find symbol\n            int daysInMonth = MonthDay.getDaysInMonth(month,year);\n\
    \                              ^\n  symbol:   variable MonthDay\n  location: class\
    \ Problem\n/tmp/tmpy200zi90.java:41: error: cannot find symbol\n            int\
    \ daysInYear = MonthDay.getDaysInYear(month);\n                             ^\n\
    \  symbol:   variable MonthDay\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        if\
    \ (date.isEmpty()) {\n            return false;\n        }\n\n        String[]\
    \ dateParts = date.split(\"-\");\n        int year = Integer.valueOf(dateParts[2]);\n\
    \        int month = Integer.valueOf(dateParts[0]);\n        int day = Integer.valueOf(dateParts[1]);\n\
    \n        if (month <= 0 || month > 12) {\n            return false;\n       \
    \ }\n\n        if (day <= 0 || day > 29) {\n            return false;\n      \
    \  }\n\n        if (month == 2 && day > 29) {\n            return false;\n   \
    \     }\n\n        if (month == 1 || month == 3 || month == 5 || month == 7 ||\
    \ month == 8 || month == 10 || month == 12 && day > 30) {\n            return\
    \ false;\n        }\n\n        if (month == 4 || month == 6 || month == 9 || month\
    \ == 11 && day > 30) {\n            return false;\n        }\n\n        if (year\
    \ < 1 || year > 3000) {\n            return false;\n        }\n\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0m22xiwe.java:64)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\n        try {\n            Date\
    \ validDate = sdf.parse(date);\n            SimpleDateFormat sdf2 = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n            Date validDate2 = sdf2.parse(date);\n            SimpleDateFormat\
    \ sdf3 = new SimpleDateFormat(\"dd-MMM-yyyy\");\n            Date validDate3 =\
    \ sdf3.parse(date);\n            SimpleDateFormat sdf4 = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n            Date validDate4 = sdf4.parse(date);\n            SimpleDateFormat\
    \ sdf5 = new SimpleDateFormat(\"MM-dd-yyyy\");\n            Date validDate5 =\
    \ sdf5.parse(date);\n            SimpleDateFormat sdf6 = new SimpleDateFormat(\"\
    dd-MM-yyyy\");\n            Date validDate6 = sdf6.parse(date);\n            SimpleDateFormat\
    \ sdf7 = new SimpleDateFormat(\"dd-MM-yyyy\");\n            Date validDate7 =\
    \ sdf7.parse(date);\n            SimpleDateFormat sdf8 = new SimpleDateFormat(\"\
    dd-MM-yyyy\");\n            Date validDate8 = sdf8.parse(date);\n            SimpleDateFormat\
    \ sdf9 = new SimpleDateFormat(\"dd-MM-yyyy\");\n            Date validDate9 =\
    \ sdf9.parse(date);\n            SimpleDateFormat sdf10 = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n            Date validDate10 = sdf10.parse(date);\n          \
    \  SimpleDateFormat sdf11 = new SimpleDateFormat(\"MM-dd-yyyy\");\n          \
    \  Date validDate11 = sdf11.parse(date);\n            SimpleDateFormat sdf12 =\
    \ new SimpleDateFormat(\"dd-MM-yyyy\");\n            Date validDate12 = sdf12.parse(date);\n\
    \            SimpleDateFormat sdf13 = new SimpleDateFormat(\"dd-MM-yyyy\");\n\
    \            Date validDate13 = sdf13.parse(date);\n            SimpleDateFormat\
    \ sdf14 = new SimpleDateFormat(\"MM-dd-yyyy\");\n            Date validDate14\
    \ = sdf14.parse(date);\n            SimpleDateFormat sdf15 = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n            Date validDate15 = sdf15.parse(date);\n          \
    \  SimpleDateFormat sdf16 = new SimpleDateFormat(\"MM-dd-yyyy\");\n          \
    \  Date validDate16 = sdf16.parse(date);\n            SimpleDateFormat sdf17 =\
    \ new SimpleDateFormat(\"MM-dd-yyyy\");\n            Date validDate17 = sdf17.parse(date);\n\
    \            SimpleDateFormat sdf18 = new SimpleDateFormat(\"MM-dd-yyyy\");\n\
    \            Date validDate18 = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqc1spirw.java:65: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpqc1spirw.java:29: error: 'try' without 'catch', 'finally' or resource\
    \ declarations\n        try {\n        ^\n/tmp/tmpqc1spirw.java:66: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid=true;\n        try {\n\
    \            DateFormat df=new SimpleDateFormat(\"MM/dd/yyyy\");\n           \
    \ df.setLenient(false);\n            Date d=df.parse(date);\n            if(d.getYear()>0\
    \ ||\n                    d.getMonth()>0 ||\n                    d.getDay()>0\
    \ ||\n                    d.getMonth()>12||\n                    d.getYear()>31){\n\
    \                valid=false;\n            }\n            else if(d.getDay()>1\
    \ ||\n                    d.getDay()>30 ||\n                    d.getMonth()>2\
    \ ||\n                    d.getMonth()<4){\n                valid=false;\n   \
    \         }\n        } catch (ParseException e) {\n            valid=false;\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaw9_7h69.java:29: error: cannot find symbol\n            DateFormat\
    \ df=new SimpleDateFormat(\"MM/dd/yyyy\");\n            ^\n  symbol:   class DateFormat\n\
    \  location: class Problem\n/tmp/tmpaw9_7h69.java:29: error: cannot find symbol\n\
    \            DateFormat df=new SimpleDateFormat(\"MM/dd/yyyy\");\n           \
    \                   ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n\
    /tmp/tmpaw9_7h69.java:45: error: cannot find symbol\n        } catch (ParseException\
    \ e) {\n                 ^\n  symbol:   class ParseException\n  location: class\
    \ Problem\nNote: /tmp/tmpaw9_7h69.java uses or overrides a deprecated API.\nNote:\
    \ Recompile with -Xlint:deprecation for details.\n3 errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            DateTimeFormatter\
    \ dateFormatter = DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");\n            LocalDate\
    \ localDate = LocalDate.parse(date, dateFormatter);\n            int year = localDate.getYear();\n\
    \            int month = localDate.getMonthValue();\n            int day = localDate.getDayOfMonth();\n\
    \            return ((year != -1) && (month >= 1) && (month <= 12) && (day >=\
    \ 1) && (day <= 31));\n        } catch (DateTimeParseException e) {\n        \
    \    return false;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8px0gat.java:28: error: cannot find symbol\n            DateTimeFormatter\
    \ dateFormatter = DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");\n            ^\n\
    \  symbol:   class DateTimeFormatter\n  location: class Problem\n/tmp/tmpu8px0gat.java:28:\
    \ error: cannot find symbol\n            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern(\"\
    MM-dd-yyyy\");\n                                              ^\n  symbol:   variable\
    \ DateTimeFormatter\n  location: class Problem\n/tmp/tmpu8px0gat.java:29: error:\
    \ cannot find symbol\n            LocalDate localDate = LocalDate.parse(date,\
    \ dateFormatter);\n            ^\n  symbol:   class LocalDate\n  location: class\
    \ Problem\n/tmp/tmpu8px0gat.java:29: error: cannot find symbol\n            LocalDate\
    \ localDate = LocalDate.parse(date, dateFormatter);\n                        \
    \          ^\n  symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmpu8px0gat.java:34:\
    \ error: cannot find symbol\n        } catch (DateTimeParseException e) {\n  \
    \               ^\n  symbol:   class DateTimeParseException\n  location: class\
    \ Problem\n5 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        LocalDate givenDate = LocalDate.parse(date,\
    \ DateTimeFormatter.ofPattern(\"MM-dd-yyyy\"));\n        int monthOfYear = givenDate.getMonthValue();\n\
    \        int dayOfMonth = givenDate.getDayOfMonth();\n        int daysInYear =\
    \ 31;\n        int monthsInYear = 12;\n        return !(givenDate.isBefore(LocalDate.of(2000,\
    \ 1, 1))\n                || givenDate.isAfter(LocalDate.of(9999, 12, 31))\n \
    \               || dayOfMonth < 1 || dayOfMonth > 31\n                || (monthOfYear\
    \ < 1 || monthOfYear > 12)\n                || daysInYear < 1 || daysInYear >\
    \ 29\n                || monthsInYear < 1 || monthsInYear > 12);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppxxld70e.java:27: error: cannot find symbol\n        LocalDate\
    \ givenDate = LocalDate.parse(date, DateTimeFormatter.ofPattern(\"MM-dd-yyyy\"\
    ));\n        ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmppxxld70e.java:27:\
    \ error: cannot find symbol\n        LocalDate givenDate = LocalDate.parse(date,\
    \ DateTimeFormatter.ofPattern(\"MM-dd-yyyy\"));\n                            \
    \  ^\n  symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmppxxld70e.java:27:\
    \ error: cannot find symbol\n        LocalDate givenDate = LocalDate.parse(date,\
    \ DateTimeFormatter.ofPattern(\"MM-dd-yyyy\"));\n                            \
    \                        ^\n  symbol:   variable DateTimeFormatter\n  location:\
    \ class Problem\n/tmp/tmppxxld70e.java:32: error: cannot find symbol\n       \
    \ return !(givenDate.isBefore(LocalDate.of(2000, 1, 1))\n                    \
    \                ^\n  symbol:   variable LocalDate\n  location: class Problem\n\
    /tmp/tmppxxld70e.java:33: error: cannot find symbol\n                || givenDate.isAfter(LocalDate.of(9999,\
    \ 12, 31))\n                                     ^\n  symbol:   variable LocalDate\n\
    \  location: class Problem\n5 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.equals(\"\")) {\n       \
    \     return false;\n        }\n        String[] months = {\n            \"01\"\
    , \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"\n        };\n        String[]\
    \ daysOfMonths = {\n            \"01\", \"03\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\"\n        };\n        String[] daysOfYear = {\n            \"00\", \"\
    01\", \"02\", \"03\", \"04\", \"05\", \"06\",\n            \"07\", \"08\", \"\
    09\", \"10\", \"11\", \"12\", \"13\",\n            \"14\", \"15\", \"16\", \"\
    17\", \"18\", \"19\", \"20\",\n            \"21\", \"22\", \"23\", \"24\", \"\
    25\", \"26\", \"27\",\n            \"28\", \"29\", \"30\", \"31\"\n        };\n\
    \        int daysInYear = daysOfYear.length;\n        int daysInMonth = daysOfMonths.length;\n\
    \        String formattedDate = date.substring(0, 2) + \"-\" + date.substring(3,\
    \ 5) + \"-\" + date.substring(6, 10);\n        LocalDate date = LocalDate.parse(formattedDate);\n\
    \        boolean isDayLessThanMonth = false;\n        boolean isMonthLessThanDay\
    \ = false;\n        boolean isYearLessThanDay = false;\n        for (int i = 0;\
    \ i < months; i++) {\n            if (date.monthOfYear().equals(months[i])) {\n\
    \                if (date.dayOfMonth().equals(daysOfMonths[i])) {\n          \
    \          isDayLessThanMonth = true;\n                }\n            }\n    \
    \    }\n        if (isDayLessThanMonth) {\n            isMonthLessThanDay = true;\n\
    \        }\n        for (int j = 0; j < daysOfYear; j++) {\n            if (date.dayOfYear().equals(daysOfYear[j]))\
    \ {\n                isYearLessThanDay = true;\n            }\n        }\n   \
    \     if (isYearLessThanDay) {\n            isMonthLessThanDay = true;\n     \
    \   }\n        if (isMonthLessThanDay) {\n            isDayLessThanMonth = true;\n\
    \        }\n        if (!isDayLessThanMonth && !isMonthLessThanDay && !isYearLessThanDay)\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiwi87lrn.java:46: error: cannot find symbol\n        LocalDate\
    \ date = LocalDate.parse(formattedDate);\n        ^\n  symbol:   class LocalDate\n\
    \  location: class Problem\n/tmp/tmpiwi87lrn.java:46: error: variable date is\
    \ already defined in method validDate(String)\n        LocalDate date = LocalDate.parse(formattedDate);\n\
    \                  ^\n/tmp/tmpiwi87lrn.java:46: error: cannot find symbol\n  \
    \      LocalDate date = LocalDate.parse(formattedDate);\n                    \
    \     ^\n  symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmpiwi87lrn.java:50:\
    \ error: bad operand types for binary operator '<'\n        for (int i = 0; i\
    \ < months; i++) {\n                          ^\n  first type:  int\n  second\
    \ type: String[]\n/tmp/tmpiwi87lrn.java:60: error: bad operand types for binary\
    \ operator '<'\n        for (int j = 0; j < daysOfYear; j++) {\n             \
    \             ^\n  first type:  int\n  second type: String[]\n5 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || \"\".equals(date))\n\
    \            return false;\n        LocalDate date1 = LocalDate.parse(date);\n\
    \        // If the date is not valid, return false\n        if (date1.isBefore(LocalDate.of(2010,\
    \ 1, 1))\n            || date1.isAfter(LocalDate.of(2020, 12, 31))) {\n      \
    \      return false;\n        }\n        int month = date1.getMonthValue();\n\
    \        // If the month is not valid, return false\n        if (month < 1 ||\
    \ month > 12) {\n            return false;\n        }\n        int day = date1.getDayOfMonth();\n\
    \        // If the day is not valid, return false\n        if (day < 1 || day\
    \ > 31) {\n            return false;\n        }\n        // If the month is february\
    \ and day is 29 and the last day of a month is\n        // not 31 then return\
    \ false\n        if (month == 1 && day == 29 && date1.plusMonths(1).getDayOfMonth()\
    \ != 31) {\n            return false;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkl89qd1i.java:29: error: cannot find symbol\n        LocalDate\
    \ date1 = LocalDate.parse(date);\n        ^\n  symbol:   class LocalDate\n  location:\
    \ class Problem\n/tmp/tmpkl89qd1i.java:29: error: cannot find symbol\n       \
    \ LocalDate date1 = LocalDate.parse(date);\n                          ^\n  symbol:\
    \   variable LocalDate\n  location: class Problem\n/tmp/tmpkl89qd1i.java:31: error:\
    \ cannot find symbol\n        if (date1.isBefore(LocalDate.of(2010, 1, 1))\n \
    \                          ^\n  symbol:   variable LocalDate\n  location: class\
    \ Problem\n/tmp/tmpkl89qd1i.java:32: error: cannot find symbol\n            ||\
    \ date1.isAfter(LocalDate.of(2020, 12, 31))) {\n                             ^\n\
    \  symbol:   variable LocalDate\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if(!StringUtils.isEmpty(date)){\n\
    \            Date date = DateUtil.getValidDate(date);\n            valid = DateUtil.isValid(date);\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyityzv09.java:28: error: cannot find symbol\n        if(!StringUtils.isEmpty(date)){\n\
    \            ^\n  symbol:   variable StringUtils\n  location: class Problem\n\
    /tmp/tmpyityzv09.java:29: error: variable date is already defined in method validDate(String)\n\
    \            Date date = DateUtil.getValidDate(date);\n                 ^\n/tmp/tmpyityzv09.java:29:\
    \ error: cannot find symbol\n            Date date = DateUtil.getValidDate(date);\n\
    \                        ^\n  symbol:   variable DateUtil\n  location: class Problem\n\
    /tmp/tmpyityzv09.java:30: error: cannot find symbol\n            valid = DateUtil.isValid(date);\n\
    \                    ^\n  symbol:   variable DateUtil\n  location: class Problem\n\
    4 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // TODO: Write code to do the following:\n\
    \        // >>> validDate(\"03-11-2000\")\n        // True\n        // >>> validDate(\"\
    15-01-2012\")\n        // False\n        // >>> validDate(\"04-0-2040\")\n   \
    \     // False\n        // >>> validDate(\"06-04-2020\")\n        // True\n  \
    \      // >>> validDate(\"06/04/2020\")\n        // False\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8xchl1d9.java:42)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) {\n          \
    \  return false;\n        }\n        int days;\n        int month;\n        int\
    \ year;\n        if (date.matches(\"^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$\")) {\n \
    \           String[] split = date.split(\"-\");\n            days = Integer.parseInt(split[0]);\n\
    \            month = Integer.parseInt(split[1]);\n            year = Integer.parseInt(split[2]);\n\
    \        } else {\n            return false;\n        }\n        if (month >=\
    \ 1 && month <= 12) {\n            if (days < 1 || days > 31) {\n            \
    \    return false;\n            }\n            if (month < 4 || month > 6) {\n\
    \                return false;\n            }\n            if (days < 1 || days\
    \ > 30) {\n                return false;\n            }\n            if (month\
    \ == 2) {\n                if (days > 29) {\n                    return false;\n\
    \                }\n            }\n            return true;\n        }\n     \
    \   return false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpixlruw56.java:61)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String\
    \ [] splittedDate = date.split(\"-\");\n        if (splittedDate.length != 3)\
    \ return false;\n        int month = Integer.parseInt(splittedDate[0]);\n    \
    \    int day = Integer.parseInt(splittedDate[1]);\n        int year = Integer.parseInt(splittedDate[2]);\n\
    \        if (month == 0 || month == 13) return false;\n        if (month == 1\
    \ || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) return false;\n        if (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) return false;\n        if (day == 0 || day == 1 || day == 2 ||\
    \ day == 3 || day == 4 || day == 5 || day == 6 || day == 7 || day == 8 || day\
    \ == 9 || day == 10 || day == 11) return false;\n        if (month == 2 && day\
    \ == 29) return false;\n        if (month == 2 && day == 30) return false;\n \
    \       return true;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1tmxjwps.java:42)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String pattern = \"mm-dd-yyyy\";\n\
    \        Pattern compiledPattern = Pattern.compile(pattern);\n        Matcher\
    \ matcher = compiledPattern.matcher(date);\n        return matcher.matches();\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_bdutbxm.java:28: error: cannot find symbol\n        Pattern compiledPattern\
    \ = Pattern.compile(pattern);\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmp_bdutbxm.java:28: error: cannot find symbol\n       \
    \ Pattern compiledPattern = Pattern.compile(pattern);\n                      \
    \            ^\n  symbol:   variable Pattern\n  location: class Problem\n/tmp/tmp_bdutbxm.java:29:\
    \ error: cannot find symbol\n        Matcher matcher = compiledPattern.matcher(date);\n\
    \        ^\n  symbol:   class Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean isNotEmpty = !date.equals(\"\
    \");\n        boolean monthLessThan12 = !date.equals(\"02-31-2010\");\n      \
    \  boolean monthLessThan30 = !date.equals(\"03-31-2020\");\n        boolean monthLessThan29\
    \ = !date.equals(\"04-30-2020\");\n        boolean dayLessThan1 = !date.equals(\"\
    02-31-2010\");\n        boolean dayLessThan31 = !date.equals(\"03-31-2020\");\n\
    \        boolean dayLessThan30 = !date.equals(\"04-30-2020\");\n        boolean\
    \ dayLessThan29 = !date.equals(\"05-31-2020\");\n\n        return isNotEmpty &&\
    \ (monthLessThan12 || monthLessThan30 || monthLessThan29) &&\n            (dayLessThan1\
    \ || dayLessThan31 || dayLessThan30 || dayLessThan29);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1eobz9mm.java:41)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Complete the function below.\n\
    \        boolean valid = true;\n        if(!date.isEmpty()){\n            String[]\
    \ dateArray = date.split(\"-\");\n            if(dateArray[2].length() == 2){\n\
    \                for(int i = 0;i < dateArray[2].length(); i++){\n            \
    \        int monthVal = Integer.parseInt(dateArray[2].substring(0, 1));\n    \
    \                int dayVal = Integer.parseInt(dateArray[2].substring(1, 2));\n\
    \                    int yearVal = Integer.parseInt(dateArray[2].substring(3,\
    \ dateArray[2].length()));\n                    \n                    if(monthVal\
    \ < 1 || monthVal > 12){\n                        valid = false;\n           \
    \         }\n                    else if(dayVal < 1 || dayVal > 31 && monthVal\
    \ != 1){\n                        valid = false;\n                    }\n    \
    \                else if(dayVal < 1 || dayVal > 30 && monthVal == 4 || monthVal\
    \ == 6 || monthVal == 9 || monthVal == 11){\n                        valid = false;\n\
    \                    }\n                    else if(dayVal < 1 || dayVal > 29\
    \ && monthVal == 2){\n                        valid = false;\n               \
    \     }\n                    else{\n                        valid = true;\n  \
    \                  }\n                    \n                }\n            }\n\
    \        }\n        return valid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ej73hhm.java:60)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try{\n            SimpleDateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n            Date d = format.parse(date);\n\
    \            Calendar c = Calendar.getInstance();\n            c.setTime(d);\n\
    \            c.add(Calendar.DATE, 29);\n            Date newDate = c.getTime();\n\
    \            boolean isValidDate = newDate.after(format.parse(\"01-01-1970\"));\n\
    \            return isValidDate;\n        }\n        catch(Exception e){\n   \
    \         return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjtno7fux.java:28: error: cannot find symbol\n            SimpleDateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpjtno7fux.java:28: error:\
    \ cannot find symbol\n            SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                          ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.trim().equals(\"\
    \"))\n            return false;\n        int daysInMonth[] = {31,28,31,30,31,30,31,30,31,30,31,30,31};\n\
    \        int daysBeforeMonth[] = {0,31,59,90,120,151,181,212,243,273,304,334};\n\
    \        String[] months = {\"January\",\"February\",\"March\",\"April\",\"May\"\
    ,\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"\
    };\n        try {\n            SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n            Date d = sdf.parse(date);\n            Calendar cal\
    \ = Calendar.getInstance();\n            cal.setTime(new Date());\n          \
    \  int monthNum = cal.get(Calendar.MONTH);\n            int dayNum = cal.get(Calendar.DAY_OF_MONTH);\n\
    \            int year = cal.get(Calendar.YEAR);\n            cal.setTime(d);\n\
    \            while (!cal.getTime().equals(d)) {\n                dayNum = cal.get(Calendar.DAY_OF_MONTH);\n\
    \                monthNum = cal.get(Calendar.MONTH);\n                int daysUntilMonth\
    \ = daysInMonth[monthNum];\n                int daysUntilDay = daysBeforeMonth[monthNum];\n\
    \                if ((dayNum + daysUntilMonth + daysUntilDay) >= 1 && dayNum <\
    \ daysUntilMonth) {\n                    cal.add(Calendar.DATE, 1);\n        \
    \        } else {\n                    cal.add(Calendar.MONTH, 1);\n         \
    \           daysUntilMonth = daysInMonth[monthNum];\n                    daysUntilDay\
    \ = daysBeforeMonth[monthNum];\n                    if (daysUntilMonth == 31 &&\
    \ (dayNum + daysUntilDay) >= 1 && dayNum < daysUntilDay) {\n                 \
    \       cal.add(Calendar.DATE, 1);\n                    } else if (daysUntilMonth\
    \ == 29 && (dayNum + daysUntilDay) >= 1 && dayNum < daysUntilDay) {\n        \
    \                cal.add(Calendar.DATE, 1);\n                    } else {\n  \
    \                      cal.add(Calendar.MONTH, 1);\n                        daysUntilMonth\
    \ = daysInMonth[monthNum];\n                        daysUntilDay = daysBeforeMonth[monthNum];\n\
    \                        if ((daysUntilMonth == 31 && (dayNum + daysUntilDay)\
    \ >= 1) || daysUntilMonth == 30) {\n                            cal.add(Calendar.DATE,\
    \ 1);\n                        }\n                    }\n                }\n \
    \           }\n            String correctDate = months[monthNum] + \" \" + dayNum\
    \ + \", \" + year;\n            return correctDate.equals(date);\n        } catch\
    \ (ParseException ex) {\n            Logger.getLogger(Problem.class.getName()).log(Level.SEVERE,\
    \ null, ex);\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmlsdc7j3.java:33: error: cannot find symbol\n            SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpmlsdc7j3.java:33: error:\
    \ cannot find symbol\n            SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                       ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpmlsdc7j3.java:68: error: cannot find symbol\n\
    \        } catch (ParseException ex) {\n                 ^\n  symbol:   class\
    \ ParseException\n  location: class Problem\n/tmp/tmpmlsdc7j3.java:69: error:\
    \ cannot find symbol\n            Logger.getLogger(Problem.class.getName()).log(Level.SEVERE,\
    \ null, ex);\n                                                          ^\n  symbol:\
    \   variable Level\n  location: class Problem\n/tmp/tmpmlsdc7j3.java:69: error:\
    \ cannot find symbol\n            Logger.getLogger(Problem.class.getName()).log(Level.SEVERE,\
    \ null, ex);\n            ^\n  symbol:   variable Logger\n  location: class Problem\n\
    5 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here!\n        if(date==null\
    \ || date.length()==0){\n            return false;\n        }\n        int day=Integer.parseInt(date.substring(0,\
    \ 2));\n        int month=Integer.parseInt(date.substring(3, 5));\n        int\
    \ year=Integer.parseInt(date.substring(6, 10));\n        if(day<1 || day>31 ||\
    \ month<1 || month>12){\n            return false;\n        }\n        else if(month==2\
    \ && day>29){\n            return false;\n        }\n        if(year%4==0){\n\
    \            if(month<4 || (month==4 && day>25)){\n                return false;\n\
    \            }\n        }\n        else{\n            if(month>6 || (month==6\
    \ && day>23)){\n                return false;\n            }\n        }\n    \
    \    return true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"0-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpmk55tz4x.java:32)\n\tat Problem.main(tmpmk55tz4x.java:55)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return !( ! date.isEmpty() && /* 1.\
    \ String is not empty */ date.length() < 31 &&\n                    date.length()\
    \ > 1 &&\n                    /* 2. Days of month is 1-31 & days of month is 1-30\
    \ & days of month is 1-29 for month 2 */\n                    date.length() <\
    \ 31 && date.length() < 30 && date.length() < 29 &&\n                    /* 3.\
    \ Months are 1-12 */ date.length() < 12 && date.length() < 12 &&\n           \
    \         /* 4. Date is in mm-dd-yyyy format */ date.matches(\"[0-9]+-[0-9]+-[0-9]+\"\
    ) &&\n                    /* 5. Check if there are leap year */\n            \
    \        (isLeapYear(date) ? true : false));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo1y242tc.java:34: error: cannot find symbol\n                 \
    \   (isLeapYear(date) ? true : false));\n                     ^\n  symbol:   method\
    \ isLeapYear(String)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    mm-dd-yyyy\");\n        Date inputDate = format.parse(date);\n        if (date\
    \ != null && !date.trim().isEmpty() && inputDate.getDate() < 1 && inputDate.getDate()\
    \ > 31) {\n            return false;\n        }\n        if (inputDate.getMonth()\
    \ < 1 || inputDate.getMonth() > 12) {\n            return false;\n        }\n\
    \        if (inputDate.getDate() < 1 || inputDate.getDate() > 30) {\n        \
    \    return false;\n        }\n        if (inputDate.getDate() < 1 || inputDate.getDate()\
    \ > 29) {\n            return false;\n        }\n        if (date.indexOf(format.parse(\"\
    mm-dd-yyyy\")) != -1) {\n            return true;\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzy6rhhs5.java:27: error: cannot find symbol\n        SimpleDateFormat\
    \ format = new SimpleDateFormat(\"mm-dd-yyyy\");\n        ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpzy6rhhs5.java:27: error:\
    \ cannot find symbol\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    mm-dd-yyyy\");\n                                      ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\nNote: /tmp/tmpzy6rhhs5.java uses or overrides a deprecated\
    \ API.\nNote: Recompile with -Xlint:deprecation for details.\n2 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String validdate=\"^(([0]{1}[1-9]|[1]{1}[0-2])-(0?[1-9]|[1-2][0-9]|3[0-1])|([1]{1}[0-2])-(0?[1-9]|1[0-9]|2[0-3]):(0?[0-9]|[1-5][0-9]):(0?[0-9]|[1-5][0-9]))$\"\
    ;\n        String regex=\"^(0?[1-9]|[1-2][0-9]|3[0-1])/(0?[1-9]|1[0-9]|2[0-3]):(0?[0-9]|[1-5][0-9]):(0?[0-9]|[1-5][0-9])$\"\
    ;\n        if(date.matches(validdate))\n        {\n            try{\n        \
    \    SimpleDateFormat dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\");\n   \
    \         Date date1 = dateFormat.parse(date);\n            SimpleDateFormat format\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\");\n            String formattedDate =\
    \ format.format(date1);\n            SimpleDateFormat fformat = new SimpleDateFormat(\"\
    MM/dd/yyyy\");\n            Date date2 = fformat.parse(formattedDate);\n     \
    \       int days=(date2.getTime() - date1.getTime())/(1000*60*60*24);\n      \
    \      boolean day=false;\n            if(!Integer.parseInt(String.valueOf(days))<31&&!Integer.parseInt(String.valueOf(days))>30&&!Integer.parseInt(String.valueOf(days))<29){\n\
    \                return false;\n            }\n            if(!Integer.parseInt(String.valueOf(days))<1&&!Integer.parseInt(String.valueOf(days))>12){\n\
    \                return false;\n            }\n            return true;\n    \
    \        }\n            catch(Exception e){\n                e.printStackTrace();\n\
    \                return false;\n            }\n        }\n        else{\n    \
    \        return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxnx1g9z2.java:32: error: cannot find symbol\n            SimpleDateFormat\
    \ dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:\
    \   class SimpleDateFormat\n  location: class Problem\n/tmp/tmpxnx1g9z2.java:32:\
    \ error: cannot find symbol\n            SimpleDateFormat dateFormat = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                              ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpxnx1g9z2.java:34: error:\
    \ cannot find symbol\n            SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n            ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmpxnx1g9z2.java:34: error: cannot find symbol\n       \
    \     SimpleDateFormat format = new SimpleDateFormat(\"MM-dd-yyyy\");\n      \
    \                                    ^\n  symbol:   class SimpleDateFormat\n \
    \ location: class Problem\n/tmp/tmpxnx1g9z2.java:36: error: cannot find symbol\n\
    \            SimpleDateFormat fformat = new SimpleDateFormat(\"MM/dd/yyyy\");\n\
    \            ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n\
    /tmp/tmpxnx1g9z2.java:36: error: cannot find symbol\n            SimpleDateFormat\
    \ fformat = new SimpleDateFormat(\"MM/dd/yyyy\");\n                          \
    \                 ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n\
    /tmp/tmpxnx1g9z2.java:38: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int days=(date2.getTime() - date1.getTime())/(1000*60*60*24);\n\
    \                                                        ^\n/tmp/tmpxnx1g9z2.java:40:\
    \ error: bad operand type int for unary operator '!'\n            if(!Integer.parseInt(String.valueOf(days))<31&&!Integer.parseInt(String.valueOf(days))>30&&!Integer.parseInt(String.valueOf(days))<29){\n\
    \               ^\n/tmp/tmpxnx1g9z2.java:40: error: bad operand type int for unary\
    \ operator '!'\n            if(!Integer.parseInt(String.valueOf(days))<31&&!Integer.parseInt(String.valueOf(days))>30&&!Integer.parseInt(String.valueOf(days))<29){\n\
    \                                          "
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        LocalDate today = LocalDate.now();\n\
    \        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"MM-dd-yyyy\"\
    );\n        LocalDate birthDate = LocalDate.parse(date, formatter);\n        int\
    \ birthYear = birthDate.getYear();\n        int birthMonth = birthDate.getMonthValue();\n\
    \        int birthDay = birthDate.getDayOfMonth();\n        if (StringUtils.isBlank(date)\
    \ || birthDay <= 0 || birthDay > 31 || birthMonth <= 0 || birthMonth > 12 || birthYear\
    \ < 1583 || birthYear > 2020) {\n            return false;\n        }\n      \
    \  LocalDate today1 = today.with(LocalTime.MIN);\n        LocalDate birthDate1\
    \ = birthDate.with(LocalTime.MIN);\n        LocalDate today2 = today.with(LocalTime.MAX);\n\
    \        LocalDate birthDate2 = birthDate.with(LocalTime.MAX);\n        LocalDate\
    \ birthDate3 = birthDate.minusDays(1);\n        LocalDate birthDate4 = birthDate.minusDays(30);\n\
    \        LocalDate birthDate5 = birthDate.minusDays(29);\n        LocalDate birthDate6\
    \ = birthDate.minusMonths(12);\n        LocalDate birthDate7 = birthDate.minusMonths(12);\n\
    \        LocalDate birthDate8 = birthDate.minusMonths(11);\n        LocalDate\
    \ birthDate9 = birthDate.minusMonths(9);\n        LocalDate birthDate10 = birthDate.minusMonths(6);\n\
    \        LocalDate birthDate11 = birthDate.minusMonths(6);\n        LocalDate\
    \ birthDate12 = birthDate.minusMonths(4);\n        return birthDate.isBefore(today1)\
    \ && birthDate.isBefore(today2) && birthDate.isBefore(birthDate1) && birthDate.isBefore(birthDate2)\
    \ && birthDate.isBefore(birthDate3) && birthDate.isBefore(birthDate4) && birthDate.isBefore(birthDate5)\
    \ && birthDate.isBefore(birthDate6) && birthDate.isBefore(birthDate7) && birthDate.isBefore(birthDate8)\
    \ && birthDate.isBefore(birthDate9) && birthDate.isBefore(birthDate10) && birthDate.isBefore(birthDate11)\
    \ && birthDate.isBefore(birthDate12);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyk5ysicl.java:27: error: cannot find symbol\n        LocalDate\
    \ today = LocalDate.now();\n        ^\n  symbol:   class LocalDate\n  location:\
    \ class Problem\n/tmp/tmpyk5ysicl.java:27: error: cannot find symbol\n       \
    \ LocalDate today = LocalDate.now();\n                          ^\n  symbol: \
    \  variable LocalDate\n  location: class Problem\n/tmp/tmpyk5ysicl.java:28: error:\
    \ cannot find symbol\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"\
    MM-dd-yyyy\");\n        ^\n  symbol:   class DateTimeFormatter\n  location: class\
    \ Problem\n/tmp/tmpyk5ysicl.java:28: error: cannot find symbol\n        DateTimeFormatter\
    \ formatter = DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");\n                 \
    \                     ^\n  symbol:   variable DateTimeFormatter\n  location: class\
    \ Problem\n/tmp/tmpyk5ysicl.java:29: error: cannot find symbol\n        LocalDate\
    \ birthDate = LocalDate.parse(date, formatter);\n        ^\n  symbol:   class\
    \ LocalDate\n  location: class Problem\n/tmp/tmpyk5ysicl.java:29: error: cannot\
    \ find symbol\n        LocalDate birthDate = LocalDate.parse(date, formatter);\n\
    \                              ^\n  symbol:   variable LocalDate\n  location:\
    \ class Problem\n/tmp/tmpyk5ysicl.java:33: error: cannot find symbol\n       \
    \ if (StringUtils.isBlank(date) || birthDay <= 0 || birthDay > 31 || birthMonth\
    \ <= 0 || birthMonth > 12 || birthYear < 1583 || birthYear > 2020) {\n       \
    \     ^\n  symbol:   variable StringUtils\n  location: class Problem\n/tmp/tmpyk5ysicl.java:36:\
    \ error: cannot find symbol\n        LocalDate today1 = today.with(LocalTime.MIN);\n\
    \        ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmpyk5ysicl.java:36:\
    \ error: cannot find symbol\n        LocalDate today1 = today.with(LocalTime.MIN);\n\
    \                                      ^\n  symbol:   variable LocalTime\n  location:\
    \ class Problem\n/tmp/tmpyk5ysicl.java:37: error: cannot find symbol\n       \
    \ LocalDate birthDate1 = birthDate.with(LocalTime.MIN);\n        ^\n  symbol:\
    \   class LocalDate\n  location: class Problem\n/tmp/tmpyk5ysicl.java:37: error:\
    \ cannot find symbol\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if(date != null && !date.isEmpty())\
    \ {\n            try {\n                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"\
    MM-dd-yyyy\");\n                LocalDate date = LocalDate.parse(date, formatter);\n\
    \                boolean isValid = true;\n                if(date.dayOfMonth().isBefore(1)\
    \ || date.dayOfMonth().isAfter(31)) {\n                    isValid = false;\n\
    \                }\n                if(date.monthOfYear().isBefore(1) || date.monthOfYear().isAfter(12))\
    \ {\n                    isValid = false;\n                }\n               \
    \ if(!date.monthOfYear().isBefore(1)) {\n                    isValid = false;\n\
    \                }\n                if(!date.monthOfYear().isAfter(12)) {\n  \
    \                  isValid = false;\n                }\n                if(!date.year().isBefore(1))\
    \ {\n                    isValid = false;\n                }\n               \
    \ if(!date.year().isAfter(Integer.MAX_VALUE)) {\n                    isValid =\
    \ false;\n                }\n                return isValid;\n            } catch(DateTimeParseException\
    \ e) {\n                return false;\n            }\n        } else {\n     \
    \       return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ile56r6.java:29: error: cannot find symbol\n                DateTimeFormatter\
    \ formatter = DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");\n                ^\n\
    \  symbol:   class DateTimeFormatter\n  location: class Problem\n/tmp/tmp3ile56r6.java:29:\
    \ error: cannot find symbol\n                DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"\
    MM-dd-yyyy\");\n                                              ^\n  symbol:   variable\
    \ DateTimeFormatter\n  location: class Problem\n/tmp/tmp3ile56r6.java:30: error:\
    \ cannot find symbol\n                LocalDate date = LocalDate.parse(date, formatter);\n\
    \                ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmp3ile56r6.java:30:\
    \ error: variable date is already defined in method validDate(String)\n      \
    \          LocalDate date = LocalDate.parse(date, formatter);\n              \
    \            ^\n/tmp/tmp3ile56r6.java:30: error: cannot find symbol\n        \
    \        LocalDate date = LocalDate.parse(date, formatter);\n                \
    \                 ^\n  symbol:   variable LocalDate\n  location: class Problem\n\
    /tmp/tmp3ile56r6.java:51: error: cannot find symbol\n            } catch(DateTimeParseException\
    \ e) {\n                    ^\n  symbol:   class DateTimeParseException\n  location:\
    \ class Problem\n6 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n        try {\n            Date date = format.parse(date);\n \
    \           return true;\n        } catch (ParseException e) {\n            return\
    \ false;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzv26tf8x.java:27: error: cannot find symbol\n        SimpleDateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpzv26tf8x.java:27: error:\
    \ cannot find symbol\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                      ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpzv26tf8x.java:29: error: variable date is\
    \ already defined in method validDate(String)\n            Date date = format.parse(date);\n\
    \                 ^\n/tmp/tmpzv26tf8x.java:31: error: cannot find symbol\n   \
    \     } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        try {\n            SimpleDateFormat\
    \ format = new SimpleDateFormat(\"dd-MM-yyyy\");\n            format.parse(date);\n\
    \        } catch (Exception e) {\n            return false;\n        }\n     \
    \   return true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa0ymmzfs.java:31: error: cannot find symbol\n            SimpleDateFormat\
    \ format = new SimpleDateFormat(\"dd-MM-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpa0ymmzfs.java:31: error:\
    \ cannot find symbol\n            SimpleDateFormat format = new SimpleDateFormat(\"\
    dd-MM-yyyy\");\n                                          ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        Date aDate = null;\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\n        try {\n            aDate\
    \ = sdf.parse(date);\n        }\n        catch (ParseException e){\n         \
    \   return false;\n        }\n        Boolean result = null;\n        Calendar\
    \ cal = Calendar.getInstance();\n        cal.set(aDate.getTime());\n        int\
    \ numDays = cal.getActualMaximum(Calendar.DAY_OF_MONTH);\n        // Months range\
    \ from 1-12\n        Calendar mCal = Calendar.getInstance();\n        mCal.set(aDate.getTime());\n\
    \        int month = mCal.get(Calendar.MONTH);\n        if (month > 12) {\n  \
    \          return false;\n        }\n        switch (month) {\n            case\
    \ 1:\n                if (numDays > 31) {\n                    return false;\n\
    \                }\n                break;\n            case 3:\n            \
    \    if (numDays > 30) {\n                    return false;\n                }\n\
    \                break;\n            case 5:\n                if (numDays > 29)\
    \ {\n                    return false;\n                }\n                break;\n\
    \            case 7:\n                if (numDays > 28) {\n                  \
    \  return false;\n                }\n                break;\n            case\
    \ 8:\n                if (numDays > 31) {\n                    return false;\n\
    \                }\n                break;\n            case 10:\n           \
    \     if (numDays > 30) {\n                    return false;\n               \
    \ }\n                break;\n            case 12:\n                if (numDays\
    \ > 31) {\n                    return false;\n                }\n            \
    \    break;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp48s12fuy.java:28: error: cannot find symbol\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmp48s12fuy.java:28: error: cannot find symbol\n\
    \        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\n      \
    \                             ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmp48s12fuy.java:32: error: cannot find symbol\n       \
    \ catch (ParseException e){\n               ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n/tmp/tmp48s12fuy.java:37: error: no suitable method\
    \ found for set(long)\n        cal.set(aDate.getTime());\n           ^\n    method\
    \ Calendar.set(int,int) is not applicable\n      (actual and formal argument lists\
    \ differ in length)\n    method Calendar.set(int,int,int) is not applicable\n\
    \      (actual and formal argument lists differ in length)\n    method Calendar.set(int,int,int,int,int)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method Calendar.set(int,int,int,int,int,int) is not applicable\n      (actual\
    \ and formal argument lists differ in length)\n/tmp/tmp48s12fuy.java:41: error:\
    \ no suitable method found for set(long)\n        mCal.set(aDate.getTime());\n\
    \            ^\n    method Calendar.set(int,int) is not applicable\n      (actual\
    \ and formal argument lists differ in length)\n    method Calendar.set(int,int,int)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method Calendar.set(int,int,int,int,int) is not applicable\n      (actual\
    \ and formal argument lists differ in length)\n    method Calendar.set(int,int,int,int,int,int)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    5 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        SimpleDateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n        Date parsedDate = format.parse(date);\n\
    \        if(date.length()==0){\n            return false;\n        }\n       \
    \ Calendar c = Calendar.getInstance();\n        c.setTime(parsedDate);\n     \
    \   int daysInMonths[] = { 0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n\
    \        if (c.get(Calendar.YEAR) == 1900 && !c.get(Calendar.MONTH)) {\n     \
    \       c.set(Calendar.YEAR, 1900);\n            c.set(Calendar.MONTH, 0);\n \
    \           c.set(Calendar.DAY_OF_MONTH, 1);\n        } else if (c.get(Calendar.YEAR)\
    \ == 1900 && c.get(Calendar.MONTH) == 0) {\n            c.set(Calendar.YEAR, 1900);\n\
    \            c.set(Calendar.MONTH, 1);\n            c.set(Calendar.DAY_OF_MONTH,\
    \ 1);\n        } else if (c.get(Calendar.YEAR) == 1900 && c.get(Calendar.MONTH)\
    \ == 1) {\n            c.set(Calendar.YEAR, 1900);\n            c.set(Calendar.MONTH,\
    \ 1);\n            c.set(Calendar.DAY_OF_MONTH, 1);\n        } else if (c.get(Calendar.YEAR)\
    \ == 1900 && c.get(Calendar.MONTH) == 2) {\n            c.set(Calendar.YEAR, 1900);\n\
    \            c.set(Calendar.MONTH, 2);\n            c.set(Calendar.DAY_OF_MONTH,\
    \ 1);\n        } else if (c.get(Calendar.YEAR) == 1900 && c.get(Calendar.MONTH)\
    \ == 3) {\n            c.set(Calendar.YEAR, 1900);\n            c.set(Calendar.MONTH,\
    \ 3);\n            c.set(Calendar.DAY_OF_MONTH, 1);\n        } else if (c.get(Calendar.YEAR)\
    \ == 1900 && c.get(Calendar.MONTH) == 4) {\n            c.set(Calendar.YEAR, 1900);\n\
    \            c.set(Calendar.MONTH, 4);\n            c.set(Calendar.DAY_OF_MONTH,\
    \ 1);\n        } else if (c.get(Calendar.YEAR) == 1900 && c.get(Calendar.MONTH)\
    \ == 5) {\n            c.set(Calendar.YEAR, 1900);\n            c.set(Calendar.MONTH,\
    \ 5);\n            c.set(Calendar.DAY_OF_MONTH, 1);\n        } else if (c.get(Calendar.YEAR)\
    \ == 1900 && c.get(Calendar.MONTH) == 6) {\n            c.set(Calendar.YEAR, 1900);\n\
    \            c.set(Calendar.MONTH, 6);\n            c.set(Calendar.DAY_OF_MONTH,\
    \ 1);\n        } else if (c.get(Calendar.YEAR) == 1900 && c.get(Calendar.MONTH)\
    \ == 7) {\n            c.set(Calendar.YEAR, 1900);\n            c.set(Calendar.MONTH,\
    \ 7);\n            c.set(Calendar\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34c6y26j.java:71: error: ')' expected\n            c.set(Calendar\n\
    \                          ^\n/tmp/tmp34c6y26j.java:73: error: illegal start of\
    \ expression\n    public static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        int [][]={{12,0,0},{31,0,0},{30,0,0},{29,0,0},{1,0,0},{0,30,0},{0,31,0},{0,28,0},{0,0,31},{0,0,30},{0,0,29},{0,0,0},{0,0,0},{0,0,0},{0,0,0}};\n\
    \        int day=date.length()-1;\n        for(int i=0; i<12; i++) {\n       \
    \     if(date.substring(day,day+1).equalsIgnoreCase(\"0\")) {\n              \
    \  day--;\n            }\n            if(date.substring(day+1,day+2).equalsIgnoreCase(\"\
    0\")) {\n                day++;\n            }\n        }\n        day=Integer.parseInt(date.substring(0,2));\n\
    \        if(day<1 || day>31) {\n            return false;\n        }\n       \
    \ if(date.substring(3,4).equalsIgnoreCase(\"12\")) {\n            return true;\n\
    \        }\n        for(int i=0; i<12; i++) {\n            if(date.substring(day,day+1).equalsIgnoreCase(\"\
    0\")) {\n                day--;\n            }\n            if(date.substring(day+1,day+2).equalsIgnoreCase(\"\
    0\")) {\n                day++;\n            }\n        }\n        if(day>29)\
    \ {\n            return false;\n        }\n        int month=Integer.parseInt(date.substring(5,7));\n\
    \        if(month<1 || month>12) {\n            return false;\n        }\n   \
    \     return true; // All conditions met, date is valid\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9c2reey5.java:27: error: not a statement\n        int [][]={{12,0,0},{31,0,0},{30,0,0},{29,0,0},{1,0,0},{0,30,0},{0,31,0},{0,28,0},{0,0,31},{0,0,30},{0,0,29},{0,0,0},{0,0,0},{0,0,0},{0,0,0}};\n\
    \            ^\n/tmp/tmp9c2reey5.java:27: error: ';' expected\n        int [][]={{12,0,0},{31,0,0},{30,0,0},{29,0,0},{1,0,0},{0,30,0},{0,31,0},{0,28,0},{0,0,31},{0,0,30},{0,0,29},{0,0,0},{0,0,0},{0,0,0},{0,0,0}};\n\
    \                ^\n/tmp/tmp9c2reey5.java:27: error: not a statement\n       \
    \ int [][]={{12,0,0},{31,0,0},{30,0,0},{29,0,0},{1,0,0},{0,30,0},{0,31,0},{0,28,0},{0,0,31},{0,0,30},{0,0,29},{0,0,0},{0,0,0},{0,0,0},{0,0,0}};\n\
    \                   ^\n/tmp/tmp9c2reey5.java:27: error: ';' expected\n       \
    \ int [][]={{12,0,0},{31,0,0},{30,0,0},{29,0,0},{1,0,0},{0,30,0},{0,31,0},{0,28,0},{0,0,31},{0,0,30},{0,0,29},{0,0,0},{0,0,0},{0,0,0},{0,0,0}};\n\
    \                     ^\n/tmp/tmp9c2reey5.java:27: error: illegal start of expression\n\
    \        int [][]={{12,0,0},{31,0,0},{30,0,0},{29,0,0},{1,0,0},{0,30,0},{0,31,0},{0,28,0},{0,0,31},{0,0,30},{0,0,29},{0,0,0},{0,0,0},{0,0,0},{0,0,0}};\n\
    \                          ^\n/tmp/tmp9c2reey5.java:27: error: not a statement\n\
    \        int [][]={{12,0,0},{31,0,0},{30,0,0},{29,0,0},{1,0,0},{0,30,0},{0,31,0},{0,28,0},{0,0,31},{0,0,30},{0,0,29},{0,0,0},{0,0,0},{0,0,0},{0,0,0}};\n\
    \                            ^\n/tmp/tmp9c2reey5.java:27: error: ';' expected\n\
    \        int [][]={{12,0,0},{31,0,0},{30,0,0},{29,0,0},{1,0,0},{0,30,0},{0,31,0},{0,28,0},{0,0,31},{0,0,30},{0,0,29},{0,0,0},{0,0,0},{0,0,0},{0,0,0}};\n\
    \                              ^\n/tmp/tmp9c2reey5.java:27: error: illegal start\
    \ of expression\n        int [][]={{12,0,0},{31,0,0},{30,0,0},{29,0,0},{1,0,0},{0,30,0},{0,31,0},{0,28,0},{0,0,31},{0,0,30},{0,0,29},{0,0,0},{0,0,0},{0,0,0},{0,0,0}};\n\
    \                                   ^\n/tmp/tmp9c2reey5.java:27: error: not a\
    \ statement\n        int [][]={{12,0,0},{31,0,0},{30,0,0},{29,0,0},{1,0,0},{0,30,0},{0,31,0},{0,28,0},{0,0,31},{0,0,30},{0,0,29},{0,0,0},{0,0,0},{0,0,0},{0,0,0}};\n\
    \                                     ^\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        LocalDate date = LocalDate.parse(date);\n\
    \        LocalDate today = LocalDate.now();\n        LocalDate minDate = today.minusMonths(1).minusDays(1);\n\
    \        LocalDate maxDate = today.minusMonths(2).minusDays(1);\n        if (date\
    \ == null || date.isEmpty()) {\n            return true;\n        } else if (date.getDayOfMonth()\
    \ < 1 || date.getDayOfMonth() > 31) {\n            return false;\n        } else\
    \ if (date.getMonthValue() < 1 || date.getMonthValue() > 12) {\n            return\
    \ false;\n        } else if (today.isBefore(date) || today.isAfter(date)) {\n\
    \            return false;\n        } else if (minDate.isBefore(date) || minDate.isAfter(date))\
    \ {\n            return false;\n        } else if (maxDate.isBefore(date) || maxDate.isAfter(date))\
    \ {\n            return false;\n        } else {\n            return true;\n \
    \       }\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj3mqpqwd.java:27: error: cannot find symbol\n        LocalDate\
    \ date = LocalDate.parse(date);\n        ^\n  symbol:   class LocalDate\n  location:\
    \ class Problem\n/tmp/tmpj3mqpqwd.java:27: error: variable date is already defined\
    \ in method validDate(String)\n        LocalDate date = LocalDate.parse(date);\n\
    \                  ^\n/tmp/tmpj3mqpqwd.java:27: error: cannot find symbol\n  \
    \      LocalDate date = LocalDate.parse(date);\n                         ^\n \
    \ symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmpj3mqpqwd.java:28:\
    \ error: cannot find symbol\n        LocalDate today = LocalDate.now();\n    \
    \    ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmpj3mqpqwd.java:28:\
    \ error: cannot find symbol\n        LocalDate today = LocalDate.now();\n    \
    \                      ^\n  symbol:   variable LocalDate\n  location: class Problem\n\
    /tmp/tmpj3mqpqwd.java:29: error: cannot find symbol\n        LocalDate minDate\
    \ = today.minusMonths(1).minusDays(1);\n        ^\n  symbol:   class LocalDate\n\
    \  location: class Problem\n/tmp/tmpj3mqpqwd.java:30: error: cannot find symbol\n\
    \        LocalDate maxDate = today.minusMonths(2).minusDays(1);\n        ^\n \
    \ symbol:   class LocalDate\n  location: class Problem\n7 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        //System.out.println(\"validDate:\"\
    \ + date);\n        if(date.length() == 0 || date.length() < 4 || date.length()\
    \ > 10) {\n            return false;\n        }\n        String dateSplit = date.substring(0,\
    \ 2);\n        String[] months = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\"};\n        String[] days = {\"01\", \"03\", \"05\", \"07\", \"08\", \"\
    10\", \"12\"};\n        String[] years = {\"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    };\n        if(months.contains(dateSplit)) {\n            if(!days.contains(dateSplit.substring(0,\
    \ dateSplit.indexOf(\"-\")))) {\n                return false;\n            }\n\
    \        } else if(days.contains(dateSplit)) {\n            if(!months.contains(dateSplit.substring(0,\
    \ 2))) {\n                return false;\n            }\n        } else {\n   \
    \         if(!years.contains(dateSplit)) {\n                return false;\n  \
    \          }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpag3z26pw.java:35: error: cannot find symbol\n        if(months.contains(dateSplit))\
    \ {\n                 ^\n  symbol:   method contains(String)\n  location: variable\
    \ months of type String[]\n/tmp/tmpag3z26pw.java:36: error: cannot find symbol\n\
    \            if(!days.contains(dateSplit.substring(0, dateSplit.indexOf(\"-\"\
    )))) {\n                    ^\n  symbol:   method contains(String)\n  location:\
    \ variable days of type String[]\n/tmp/tmpag3z26pw.java:39: error: cannot find\
    \ symbol\n        } else if(days.contains(dateSplit)) {\n                    \
    \  ^\n  symbol:   method contains(String)\n  location: variable days of type String[]\n\
    /tmp/tmpag3z26pw.java:40: error: cannot find symbol\n            if(!months.contains(dateSplit.substring(0,\
    \ 2))) {\n                      ^\n  symbol:   method contains(String)\n  location:\
    \ variable months of type String[]\n/tmp/tmpag3z26pw.java:44: error: cannot find\
    \ symbol\n            if(!years.contains(dateSplit)) {\n                     ^\n\
    \  symbol:   method contains(String)\n  location: variable years of type String[]\n\
    5 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date != null && !(date.trim().isEmpty()))\
    \ {\n            String[] date_splits = date.split(\"-\");\n            String\
    \ month = date_splits[0];\n            int day = Integer.parseInt(date_splits[1]);\n\
    \            int year = Integer.parseInt(date_splits[2]);\n\n            if (month\
    \ < 1 || month > 12) return false;\n            if (day < 1 || day > 31) return\
    \ false;\n            if (month == 2 && day > 30) return false;\n            if\
    \ (month == 2 && day > 29) return false;\n            if (month == 4 && day >\
    \ 30) return false;\n            if (month == 4 && day > 29) return false;\n \
    \           if (month == 6 && day > 30) return false;\n            if (month ==\
    \ 6 && day > 29) return false;\n            if (month == 9 && day > 31) return\
    \ false;\n            if (month == 9 && day > 30) return false;\n            if\
    \ (month == 11 && day > 30) return false;\n            if (month == 11 && day\
    \ > 29) return false;\n            return true;\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_epqfp4.java:33: error: bad operand types for binary operator\
    \ '<'\n            if (month < 1 || month > 12) return false;\n              \
    \        ^\n  first type:  String\n  second type: int\n/tmp/tmpp_epqfp4.java:33:\
    \ error: bad operand types for binary operator '>'\n            if (month < 1\
    \ || month > 12) return false;\n                                   ^\n  first\
    \ type:  String\n  second type: int\n/tmp/tmpp_epqfp4.java:35: error: bad operand\
    \ types for binary operator '=='\n            if (month == 2 && day > 30) return\
    \ false;\n                      ^\n  first type:  String\n  second type: int\n\
    /tmp/tmpp_epqfp4.java:36: error: bad operand types for binary operator '=='\n\
    \            if (month == 2 && day > 29) return false;\n                     \
    \ ^\n  first type:  String\n  second type: int\n/tmp/tmpp_epqfp4.java:37: error:\
    \ bad operand types for binary operator '=='\n            if (month == 4 && day\
    \ > 30) return false;\n                      ^\n  first type:  String\n  second\
    \ type: int\n/tmp/tmpp_epqfp4.java:38: error: bad operand types for binary operator\
    \ '=='\n            if (month == 4 && day > 29) return false;\n              \
    \        ^\n  first type:  String\n  second type: int\n/tmp/tmpp_epqfp4.java:39:\
    \ error: bad operand types for binary operator '=='\n            if (month ==\
    \ 6 && day > 30) return false;\n                      ^\n  first type:  String\n\
    \  second type: int\n/tmp/tmpp_epqfp4.java:40: error: bad operand types for binary\
    \ operator '=='\n            if (month == 6 && day > 29) return false;\n     \
    \                 ^\n  first type:  String\n  second type: int\n/tmp/tmpp_epqfp4.java:41:\
    \ error: bad operand types for binary operator '=='\n            if (month ==\
    \ 9 && day > 31) return false;\n                      ^\n  first type:  String\n\
    \  second type: int\n/tmp/tmpp_epqfp4.java:42: error: bad operand types for binary\
    \ operator '=='\n            if (month == 9 && day > 30) return false;\n     \
    \                 ^\n  first type:  String\n  second type: int\n/tmp/tmpp_epqfp4.java:43:\
    \ error: bad operand types for binary operator '=='\n         "
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        SimpleDateFormat formatter = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n        Date dateToValidate = null;\n        try {\n         \
    \   dateToValidate = formatter.parse(date);\n        } catch (ParseException e)\
    \ {\n            e.printStackTrace();\n            return false;\n        }\n\
    \        Calendar calendar = Calendar.getInstance();\n        int days = calendar.getActualMaximum(Calendar.DAY_OF_MONTH);\n\
    \        int month = calendar.get(Calendar.MONTH);\n        int year = calendar.get(Calendar.YEAR);\n\
    \        int year1 = year % 100;\n        int year2 = year1 - (year1 % 100);\n\
    \        int day1 = month > 1 ? 29 : month > 3 ? 28 : month > 5 ? 30 : 31;\n \
    \       int day2 = month > 4 ? 30 : month > 6 ? 31 : 31;\n        int year3 =\
    \ year2 > 0 ? year2 : year1;\n        int year4 = year3 > 0 ? year3 : year2;\n\
    \        if (day1 > days) {\n            return false;\n        }\n        if\
    \ (day2 > days) {\n            return false;\n        }\n        if (day1 > day)\
    \ {\n            return false;\n        }\n        if (month < 1 || month > 12)\
    \ {\n            return false;\n        }\n        if (year4 > year2) {\n    \
    \        return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_riziax.java:27: error: cannot find symbol\n        SimpleDateFormat\
    \ formatter = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpj_riziax.java:27: error:\
    \ cannot find symbol\n        SimpleDateFormat formatter = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                         ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpj_riziax.java:31: error:\
    \ cannot find symbol\n        } catch (ParseException e) {\n                 ^\n\
    \  symbol:   class ParseException\n  location: class Problem\n/tmp/tmpj_riziax.java:51:\
    \ error: cannot find symbol\n        if (day1 > day) {\n                   ^\n\
    \  symbol:   variable day\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.equals(\"\")) return false;\n\
    \        int daysInMonth[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \        int year[] = date.split(\"-\")[0].split(\"/\");\n        int month[]\
    \ = date.split(\"-\")[1].split(\"/\");\n        if (month[0] == 0 || month[0]\
    \ == 1 || (month[0] > 12)) {\n            if (month[0] < 1 || month[0] > 12) return\
    \ false;\n        }\n        if (month[1] == 0 || month[1] == 1 || (month[1] >\
    \ 12)) {\n            if (month[1] < 1 || month[1] > 12) return false;\n     \
    \   }\n        int day = 0;\n        for (Integer m : month) {\n            day\
    \ += m;\n        }\n        for (Integer y : year) {\n            if (daysInMonth[month\
    \ - 1] != day) return false;\n            day += y;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8aau4axq.java:29: error: incompatible types: String[] cannot be\
    \ converted to int[]\n        int year[] = date.split(\"-\")[0].split(\"/\");\n\
    \                                             ^\n/tmp/tmp8aau4axq.java:30: error:\
    \ incompatible types: String[] cannot be converted to int[]\n        int month[]\
    \ = date.split(\"-\")[1].split(\"/\");\n                                     \
    \         ^\n/tmp/tmp8aau4axq.java:42: error: bad operand types for binary operator\
    \ '-'\n            if (daysInMonth[month - 1] != day) return false;\n        \
    \                          ^\n  first type:  int[]\n  second type: int\n3 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        //TODO: Implement the code below by\
    \ using the functions provided in the java.time library.\n        DateTimeFormatter\
    \ formatter = DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");\n        try {\n  \
    \          return date.isEmpty()||isValidDate(LocalDate.parse(date,formatter));\n\
    \        } catch (DateTimeParseException e) {\n            return false;\n   \
    \     }\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplkhtlmie.java:28: error: cannot find symbol\n        DateTimeFormatter\
    \ formatter = DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");\n        ^\n  symbol:\
    \   class DateTimeFormatter\n  location: class Problem\n/tmp/tmplkhtlmie.java:28:\
    \ error: cannot find symbol\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"\
    MM-dd-yyyy\");\n                                      ^\n  symbol:   variable\
    \ DateTimeFormatter\n  location: class Problem\n/tmp/tmplkhtlmie.java:30: error:\
    \ cannot find symbol\n            return date.isEmpty()||isValidDate(LocalDate.parse(date,formatter));\n\
    \                                               ^\n  symbol:   variable LocalDate\n\
    \  location: class Problem\n/tmp/tmplkhtlmie.java:31: error: cannot find symbol\n\
    \        } catch (DateTimeParseException e) {\n                 ^\n  symbol: \
    \  class DateTimeParseException\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean isValid = false;\n       \
    \ if (date == null || date.equals(\"\")) {\n            isValid = false;\n   \
    \     } else {\n            try {\n                SimpleDateFormat format = new\
    \ SimpleDateFormat(\"mm-dd-yyyy\");\n                format.parse(date);\n   \
    \             isValid = true;\n            } catch (ParseException e) {\n    \
    \            isValid = false;\n            }\n        }\n        return isValid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb7b5lq6n.java:32: error: cannot find symbol\n                SimpleDateFormat\
    \ format = new SimpleDateFormat(\"mm-dd-yyyy\");\n                ^\n  symbol:\
    \   class SimpleDateFormat\n  location: class Problem\n/tmp/tmpb7b5lq6n.java:32:\
    \ error: cannot find symbol\n                SimpleDateFormat format = new SimpleDateFormat(\"\
    mm-dd-yyyy\");\n                                              ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpb7b5lq6n.java:35: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean isvalid = false;\n       \
    \ if (date == null || date.trim().equals(\"\")) {\n            isvalid = false;\n\
    \        }\n        try {\n            SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n            Date convertedDate = sdf.parse(date);\n          \
    \  Calendar calendar = Calendar.getInstance();\n            calendar.setTime(convertedDate);\n\
    \            int numberOfDays = calendar.get(Calendar.DAY_OF_MONTH);\n       \
    \     int numberOfMonths = calendar.get(Calendar.MONTH);\n            if (numberOfDays\
    \ < 1 || numberOfDays > 31) {\n                isvalid = false;\n            }\n\
    \            if (numberOfDays < 1 || numberOfDays > 30) {\n                isvalid\
    \ = false;\n            }\n            if (numberOfDays < 1 || numberOfDays >\
    \ 29) {\n                isvalid = false;\n            }\n            if ((numberOfMonths\
    \ < 1 || numberOfMonths > 12)) {\n                isvalid = false;\n         \
    \   }\n            isvalid = true;\n        } catch (ParseException exception)\
    \ {\n            isvalid = false;\n        }\n        return isvalid;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdlhuf86r.java:32: error: cannot find symbol\n            SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpdlhuf86r.java:32: error:\
    \ cannot find symbol\n            SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                       ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpdlhuf86r.java:51: error: cannot find symbol\n\
    \        } catch (ParseException exception) {\n                 ^\n  symbol: \
    \  class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        int\
    \ [] m={0,31,28,31,30,31,30,31,30,31};\n        int [] d={0,31,28,31,30,31,30,31,30,31};\n\
    \        if(date==null || date.trim().isEmpty()) return false;\n        int len=date.length();\n\
    \        if(date.length()!=8 && date.length()!=10) return false;\n        String\
    \ checkDate=date.substring(0,2);\n        int year=Integer.parseInt(date.substring(2,4));\n\
    \        int month=Integer.parseInt(checkDate.substring(0,2));\n        int day=Integer.parseInt(checkDate.substring(2,4));\n\
    \        if(!validMonth(month)) return false;\n        if(year<1000 || year>9999)\
    \ return false;\n        if(month<1 || month>12) return false;\n        if(day<1\
    \ || day>31) return false;\n        if(month==2 && day<29) return false;\n   \
    \     if(month==2 && day>29) return false;\n        if(month==3 && day<31) return\
    \ false;\n        if(month==3 && day>31) return false;\n        if(month==4 &&\
    \ day<30) return false;\n        if(month==4 && day>30) return false;\n      \
    \  if(month==5 && day<31) return false;\n        if(month==5 && day>31) return\
    \ false;\n        if(month==6 && day<31) return false;\n        if(month==6 &&\
    \ day>31) return false;\n        if(month==7 && day<31) return false;\n      \
    \  if(month==7 && day>31) return false;\n        if(month==8 && day<31) return\
    \ false;\n        if(month==8 && day>31) return false;\n        if(month==9 &&\
    \ day<30) return false;\n        if(month==9 && day>30) return false;\n      \
    \  if(month==10 && day<31) return false;\n        if(month==10 && day>31) return\
    \ false;\n        if(month==11 && day<30) return false;\n        if(month==11\
    \ && day>30) return false;\n        if(month==12 && day<31) return false;\n  \
    \      if(month==12 && day>31) return false;\n        if(month==1 && day<31) return\
    \ false;\n        if(month==1 && day>31) return false;\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpadymv63k.java:37: error: cannot find symbol\n        if(!validMonth(month))\
    \ return false;\n            ^\n  symbol:   method validMonth(int)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        DateTime\
    \ dateTime = DateTime.parse(date);\n        LocalDate date = dateTime.toLocalDate();\n\
    \        int month = date.getMonth();\n        int year = date.getYear();\n  \
    \      int day = (int) date.getDayOfMonth();\n        int daysInMonth = DateTimeFormatter.ofPattern(\"\
    MM-dd-yyyy\").parse(date.toString()).getDayOfMonth();\n        return !(month\
    \ < 1 || month > 12 || day < 1 || day > daysInMonth || year < 1\n            \
    \    || year > 9999 || day > daysInMonth);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5z4tx899.java:28: error: cannot find symbol\n        DateTime dateTime\
    \ = DateTime.parse(date);\n        ^\n  symbol:   class DateTime\n  location:\
    \ class Problem\n/tmp/tmp5z4tx899.java:28: error: cannot find symbol\n       \
    \ DateTime dateTime = DateTime.parse(date);\n                            ^\n \
    \ symbol:   variable DateTime\n  location: class Problem\n/tmp/tmp5z4tx899.java:29:\
    \ error: cannot find symbol\n        LocalDate date = dateTime.toLocalDate();\n\
    \        ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmp5z4tx899.java:29:\
    \ error: variable date is already defined in method validDate(String)\n      \
    \  LocalDate date = dateTime.toLocalDate();\n                  ^\n/tmp/tmp5z4tx899.java:33:\
    \ error: cannot find symbol\n        int daysInMonth = DateTimeFormatter.ofPattern(\"\
    MM-dd-yyyy\").parse(date.toString()).getDayOfMonth();\n                      \
    \    ^\n  symbol:   variable DateTimeFormatter\n  location: class Problem\n5 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        return\
    \ true\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmposct61lw.java:28: error: ';' expected\n        return true\n  \
    \                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        //validDate((\"03-11-2000\"))\n  \
    \      //validDate((\"15-01-2012\"))\n        //validDate((\"04-0-2040\"))\n \
    \       //validDate((\"06-04-2020\"))\n        //validDate((\"06/04/2020\"))\n\
    \        try {\n            // convert the string date to Date object\n      \
    \      Date dateObject = new SimpleDateFormat(\"MM-dd-yyyy\").parse(date);\n \
    \           return true;\n        } catch (ParseException e) {\n            e.printStackTrace();\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptkv0o82q.java:34: error: cannot find symbol\n            Date dateObject\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\").parse(date);\n                      \
    \            ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n\
    /tmp/tmptkv0o82q.java:36: error: cannot find symbol\n        } catch (ParseException\
    \ e) {\n                 ^\n  symbol:   class ParseException\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // TODO: Write your code here\n  \
    \      try{\n            SimpleDateFormat dateFormat = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n            Date d = dateFormat.parse(date);\n        }catch(Exception\
    \ e){\n            return false;\n        }\n        return true;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp20_hho8n.java:29: error: cannot find symbol\n            SimpleDateFormat\
    \ dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:\
    \   class SimpleDateFormat\n  location: class Problem\n/tmp/tmp20_hho8n.java:29:\
    \ error: cannot find symbol\n            SimpleDateFormat dateFormat = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                              ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) {\n          \
    \  return false;\n        }\n        int daysCount = 0, daysCount2 = 0;\n    \
    \    boolean isMonth1 = false, isMonth3 = false, isMonth5 = false, isMonth7 =\
    \ false, isMonth8 = false, isMonth10 = false, isMonth12 = false, isYear = true;\n\
    \        for (int i = 1; i < 13; i++) {\n            if (date.charAt(i - 1) ==\
    \ '-') {\n                isYear = false;\n            }\n        }\n        for\
    \ (int i = 4; i < 13; i++) {\n            if (date.charAt(i - 1) == '-') {\n \
    \               isMonth1 = false;\n            }\n        }\n        for (int\
    \ i = 6; i < 13; i++) {\n            if (date.charAt(i - 1) == '-') {\n      \
    \          isMonth3 = false;\n            }\n        }\n        for (int i = 9;\
    \ i < 13; i++) {\n            if (date.charAt(i - 1) == '-') {\n             \
    \   isMonth5 = false;\n            }\n        }\n        for (int i = 11; i <\
    \ 13; i++) {\n            if (date.charAt(i - 1) == '-') {\n                isMonth7\
    \ = false;\n            }\n        }\n        for (int i = 12; i < 13; i++) {\n\
    \            if (date.charAt(i - 1) == '-') {\n                isMonth8 = false;\n\
    \            }\n        }\n        for (int i = 1; i < 13; i++) {\n          \
    \  if (date.charAt(i) == '/') {\n                isMonth10 = false;\n        \
    \    }\n        }\n        for (int i = 4; i < 13; i++) {\n            if (date.charAt(i)\
    \ == '/') {\n                isMonth12 = false;\n            }\n        }\n  \
    \      for (int i = 0; i < 10; i++) {\n            String month = date.substring(0,\
    \ i + 1);\n            if (month.equals(\"1\") || month.equals(\"3\") || month.equals(\"\
    5\") || month.equals(\"7\") || month.equals(\"8\") || month.equals(\"10\") ||\
    \ month.equals(\"12\")) {\n                isMonth1 = true;\n            }\n \
    \       }\n        for (int i = 6; i < 10; i++) {\n            String month =\
    \ date.substring(0, i + 1);\n            if (month.equals(\"4\") || month.equals(\"\
    6\") || month.equals(\"9\") || month.equals(\"11\")) {\n                isMonth3\
    \ = true;\n            }\n        }\n        for (int i = 9; i < 10; i++) {\n\
    \            String month = date.substring(0, i + 1);\n            if (month.equals(\"\
    2\") || month.equals(\"2\") || month.equals(\"4\")) {\n                isMonth5\
    \ = true;\n            }\n        }\n        for (int i = 11; i < 10; i++) {\n\
    \            String month = date.substring(0, i + 1);\n            if (month.equals(\"\
    0\") || month.equals(\"0\") || month.equals(\"6\") || month.equals(\"9\") || month.equals(\"\
    11\")) {\n                isMonth7 = true;\n            }\n        }\n       \
    \ for (int i = 12; i < 10; i++) {\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9e1uyg5d.java:98: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] splittedDate = date.split(\"\
    -\");\n        SimpleDateFormat format = new SimpleDateFormat(\"MM-dd-yyyy\");\n\
    \        Date date1 = null;\n        try {\n            date1 = format.parse(splittedDate[0]\
    \ + \"-\" + splittedDate[1] + \"-\" + splittedDate[2]);\n        } catch (ParseException\
    \ e) {\n            // TODO Auto-generated catch block\n            e.printStackTrace();\n\
    \        }\n        Date date2 = new Date();\n        try {\n            date2\
    \ = format.parse(splittedDate[0] + \"-\" + splittedDate[1] + \"-\" + splittedDate[2]);\n\
    \        } catch (ParseException e) {\n            // TODO Auto-generated catch\
    \ block\n            e.printStackTrace();\n        }\n        if (date1.equals(date2))\
    \ {\n            return true;\n        }\n        if ((date1.after(date2))\n \
    \               && (date1.before(date2.add(new java.util.Date(date1.getTime()\
    \ + 366 * 365 )))))\n            return true;\n        if ((date2.after(date1))\n\
    \                && (date2.before(date1.add(new java.util.Date(date2.getTime()\
    \ + 366 * 365 )))))\n            return true;\n        if ((date1.after(date2))\n\
    \                && (date1.before(date2.add(new java.util.Date(date1.getTime()\
    \ + 365 * 366 )))))\n            return true;\n        if ((date2.after(date1))\n\
    \                && (date2.before(date1.add(new java.util.Date(date2.getTime()\
    \ + 365 * 366 )))))\n            return true;\n        return false;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc2c2wtna.java:28: error: cannot find symbol\n        SimpleDateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpc2c2wtna.java:28: error:\
    \ cannot find symbol\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                      ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpc2c2wtna.java:32: error: cannot find symbol\n\
    \        } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n/tmp/tmpc2c2wtna.java:39: error: cannot find symbol\n\
    \        } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n/tmp/tmpc2c2wtna.java:47: error: cannot find symbol\n\
    \                && (date1.before(date2.add(new java.util.Date(date1.getTime()\
    \ + 366 * 365 )))))\n                                      ^\n  symbol:   method\
    \ add(Date)\n  location: variable date2 of type Date\n/tmp/tmpc2c2wtna.java:50:\
    \ error: cannot find symbol\n                && (date2.before(date1.add(new java.util.Date(date2.getTime()\
    \ + 366 * 365 )))))\n                                      ^\n  symbol:   method\
    \ add(Date)\n  location: variable date1 of type Date\n/tmp/tmpc2c2wtna.java:53:\
    \ error: cannot find symbol\n                && (date1.before(date2.add(new java.util.Date(date1.getTime()\
    \ + 365 * 366 )))))\n                                      ^\n  symbol:   method\
    \ add(Date)\n  location: variable date2 of type Date\n/tmp/tmpc2c2wtna.java:56:\
    \ error: cannot find symbol\n                && (date2.before(date1.add(new java.util.Date(date2.getTime()\
    \ + 365 * 366 )))))\n                                      ^\n  symbol:   method\
    \ add(Date)\n  location: variable date1 of type Date\n8 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] date_split = date.split(\"\
    -\");\n        int months = Integer.parseInt(date_split[0]);\n        int days\
    \ = Integer.parseInt(date_split[1]);\n        int year = Integer.parseInt(date_split[2]);\n\
    \        if(!date.equals(\"\")) {\n            if(months < 1 || months > 12) return\
    \ false; // 1\n            if(days > 31 && months < 1 || months > 12) return false;\
    \ // 2\n            if(days > 30 && months < 4 || months > 12) return false; //\
    \ 3\n            if(months > 2 && days > 29) return false; // 4\n            return\
    \ true;\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnov66my1.java:43)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.equals(\"\")) {\n       \
    \     return false;\n        }\n        try {\n            SimpleDateFormat format\
    \ = new SimpleDateFormat(\"mm-dd-yyyy\");\n            Date d = format.parse(date);\n\
    \            GregorianCalendar gc = new GregorianCalendar();\n            gc.setTime(d);\n\
    \            int days = 0;\n            int months = 0;\n            int year\
    \ = 0;\n            if (gc.get(Calendar.YEAR) < 1) {\n                days = 30;\n\
    \                year += 1;\n            }\n            if (gc.get(Calendar.YEAR)\
    \ > 9999) {\n                days = 29;\n                months += 1;\n      \
    \          year -= 1;\n            }\n            if (gc.get(Calendar.DAY_OF_MONTH)\
    \ < 1) {\n                days = 30;\n            }\n            if (gc.get(Calendar.DAY_OF_MONTH)\
    \ > 31) {\n                days = 29;\n            }\n            if (gc.get(Calendar.MONTH)\
    \ < 1) {\n                days = 30;\n                months += 1;\n         \
    \   }\n            if (gc.get(Calendar.MONTH) > 12) {\n                days =\
    \ 29;\n                months += 1;\n                year -= 1;\n            }\n\
    \            return ((gc.get(Calendar.DAY_OF_MONTH) == days) && (gc.get(Calendar.MONTH)\
    \ == months) && (gc.get(Calendar.YEAR) == year));\n        } catch (Exception\
    \ e) {\n            return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0jjvu9cz.java:31: error: cannot find symbol\n            SimpleDateFormat\
    \ format = new SimpleDateFormat(\"mm-dd-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmp0jjvu9cz.java:31: error:\
    \ cannot find symbol\n            SimpleDateFormat format = new SimpleDateFormat(\"\
    mm-dd-yyyy\");\n                                          ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String\
    \ pattern = \"^(\\\\d{2})-(\\\\d{2})-(\\\\d{4})$\";\n        boolean validDate\
    \ = date.matches(pattern);\n\n        if (validDate == true) {\n            int\
    \ day1 = Integer.parseInt(date.substring(0, 2));\n            int day2 = Integer.parseInt(date.substring(3,\
    \ 5));\n            int day3 = Integer.parseInt(date.substring(6, 8));\n\n   \
    \         if (day1 < 1 || day1 > 31) {\n                return false;\n      \
    \      } else if (day2 < 1 || day2 > 31) {\n                return false;\n  \
    \          } else if (day3 < 1 || day3 > 30) {\n                return false;\n\
    \            }\n\n            if (month1To12(day1) == true && month1To12(day2)\
    \ == true && month1To12(day3) == true) {\n                return true;\n     \
    \       }\n            if (month4To11(day1) == true && month4To11(day2) == true\
    \ && month4To11(day3) == true) {\n                return true;\n            }\n\
    \            if (month2To4(day1) == true && month2To4(day2) == true && month2To4(day3)\
    \ == true) {\n                return true;\n            }\n        }\n\n     \
    \   return false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8trmrsu9.java:44: error: cannot find symbol\n            if (month1To12(day1)\
    \ == true && month1To12(day2) == true && month1To12(day3) == true) {\n       \
    \         ^\n  symbol:   method month1To12(int)\n  location: class Problem\n/tmp/tmp8trmrsu9.java:44:\
    \ error: cannot find symbol\n            if (month1To12(day1) == true && month1To12(day2)\
    \ == true && month1To12(day3) == true) {\n                                   \
    \         ^\n  symbol:   method month1To12(int)\n  location: class Problem\n/tmp/tmp8trmrsu9.java:44:\
    \ error: cannot find symbol\n            if (month1To12(day1) == true && month1To12(day2)\
    \ == true && month1To12(day3) == true) {\n                                   \
    \                                     ^\n  symbol:   method month1To12(int)\n\
    \  location: class Problem\n/tmp/tmp8trmrsu9.java:47: error: cannot find symbol\n\
    \            if (month4To11(day1) == true && month4To11(day2) == true && month4To11(day3)\
    \ == true) {\n                ^\n  symbol:   method month4To11(int)\n  location:\
    \ class Problem\n/tmp/tmp8trmrsu9.java:47: error: cannot find symbol\n       \
    \     if (month4To11(day1) == true && month4To11(day2) == true && month4To11(day3)\
    \ == true) {\n                                            ^\n  symbol:   method\
    \ month4To11(int)\n  location: class Problem\n/tmp/tmp8trmrsu9.java:47: error:\
    \ cannot find symbol\n            if (month4To11(day1) == true && month4To11(day2)\
    \ == true && month4To11(day3) == true) {\n                                   \
    \                                     ^\n  symbol:   method month4To11(int)\n\
    \  location: class Problem\n/tmp/tmp8trmrsu9.java:50: error: cannot find symbol\n\
    \            if (month2To4(day1) == true && month2To4(day2) == true && month2To4(day3)\
    \ == true) {\n                ^\n  symbol:   method month2To4(int)\n  location:\
    \ class Problem\n/tmp/tmp8trmrsu9.java:50: error: cannot find symbol\n       \
    \     if (month2To4(day1) == true && month2To4(day2) == true && month2To4(day3)\
    \ == true) {\n                                           ^\n  symbol:   method\
    \ month2To4(int)\n  location: class Problem\n/tmp/tmp8trmr"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String regex = \"((?!0{0,3}-(0[1-9]|1[0-2]))-(0[1-9]|[12][0-9]|3[01]))\"\
    ;\n        boolean isValid = false;\n        try {\n            if (date != null\
    \ && !date.isEmpty() && date.matches(regex))\n                isValid = true;\n\
    \        } catch (Exception e) {\n        }\n        return isValid;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpndqbx4ep.java:37)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        date = date.replaceAll(\"\\\\s+\"\
    ,\"\").trim();\n        LocalDate date = LocalDate.parse(date);\n        if (date.isBefore(LocalDate.now()))\
    \ {\n            return false;\n        }\n        switch (date.getMonthValue())\
    \ {\n            case 0:\n            case 4:\n                return date.dayOfMonth().getValue()\
    \ <= 29;\n            case 6:\n                return date.dayOfMonth().getValue()\
    \ <= 29;\n            case 9:\n                return date.dayOfMonth().getValue()\
    \ <= 29;\n            case 11:\n                return date.dayOfMonth().getValue()\
    \ <= 29;\n            default:\n                return date.dayOfMonth().getValue()\
    \ <= 31;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa1dtmaio.java:28: error: cannot find symbol\n        LocalDate\
    \ date = LocalDate.parse(date);\n        ^\n  symbol:   class LocalDate\n  location:\
    \ class Problem\n/tmp/tmpa1dtmaio.java:28: error: variable date is already defined\
    \ in method validDate(String)\n        LocalDate date = LocalDate.parse(date);\n\
    \                  ^\n/tmp/tmpa1dtmaio.java:28: error: cannot find symbol\n  \
    \      LocalDate date = LocalDate.parse(date);\n                         ^\n \
    \ symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmpa1dtmaio.java:29:\
    \ error: cannot find symbol\n        if (date.isBefore(LocalDate.now())) {\n \
    \                         ^\n  symbol:   variable LocalDate\n  location: class\
    \ Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        Date date;\n        SimpleDateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n        try{\n            date\
    \ = format.parse(date);\n        }\n        catch(ParseException e){\n       \
    \     return false;\n        }\n        return date.after(new Date()) && date.before(new\
    \ Date(date.getYear()+1,1,1)); // Not sure if this is correct\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr8xvfaa9.java:27: error: variable date is already defined in method\
    \ validDate(String)\n        Date date;\n             ^\n/tmp/tmpr8xvfaa9.java:28:\
    \ error: cannot find symbol\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n  location: class\
    \ Problem\n/tmp/tmpr8xvfaa9.java:28: error: cannot find symbol\n        SimpleDateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n                           \
    \           ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n\
    /tmp/tmpr8xvfaa9.java:32: error: cannot find symbol\n        catch(ParseException\
    \ e){\n              ^\n  symbol:   class ParseException\n  location: class Problem\n\
    Note: /tmp/tmpr8xvfaa9.java uses or overrides a deprecated API.\nNote: Recompile\
    \ with -Xlint:deprecation for details.\n4 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n        Date date1 = null;\n        try {\n            date1 =\
    \ format.parse(date);\n        } catch (ParseException e) {\n            System.out.println(\"\
    Date is not in correct format\");\n            e.printStackTrace();\n        }\n\
    \        boolean isValid = false;\n        try {\n            int day = Integer.parseInt(date.split(\"\
    -\")[0]);\n            int month = Integer.parseInt(date.split(\"-\")[1]);\n \
    \           int year = Integer.parseInt(date.split(\"-\")[2]);\n            if\
    \ (year > 0 &&\n                year < 100 &&\n                month >= 1 &&\n\
    \                month < 12 &&\n                day >= 1 &&\n                day\
    \ < 31) {\n                if (month == 2 && day >= 29) {\n                  \
    \  isValid = true;\n                } else {\n                    isValid = true;\n\
    \                }\n            }\n            if (year > 0 &&\n             \
    \   year < 100 &&\n                month >= 4 &&\n                month < 6 &&\n\
    \                day >= 1 &&\n                day < 30) {\n                isValid\
    \ = true;\n            }\n            if (month == 2 && day >= 29) {\n       \
    \         isValid = true;\n            }\n            if (month == 2 && day ==\
    \ 31) {\n                isValid = true;\n            }\n        } catch (Exception\
    \ ex) {\n            ex.printStackTrace();\n        }\n        return isValid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpef2x2dvy.java:27: error: cannot find symbol\n        SimpleDateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpef2x2dvy.java:27: error:\
    \ cannot find symbol\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                      ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpef2x2dvy.java:31: error: cannot find symbol\n\
    \        } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean isValid = true;\n        if\
    \ (date == null || date.length() == 0) {\n            isValid = false;\n     \
    \   } else {\n            try {\n                int day = Integer.parseInt(date.substring(0,\
    \ 2));\n                int month = Integer.parseInt(date.substring(2, 4));\n\
    \                int year = Integer.parseInt(date.substring(4, 6));\n        \
    \        if (year < 100 && year > 0\n                        || year < 2000 &&\
    \ year > 1997) {\n                    isValid = false;\n                }\n  \
    \              if (month < 1 || month > 12) {\n                    isValid = false;\n\
    \                }\n                if (day < 1 || day > 31\n                \
    \        || (month == 2 && day > 29)\n                        || (month == 4 &&\
    \ day > 30)\n                        || (month == 6 && day > 31)) {\n        \
    \            isValid = false;\n                }\n            } catch (Exception\
    \ ex) {\n                isValid = false;\n            }\n        }\n        return\
    \ isValid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm6hoxv5b.java:55)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.equals(\"\")) {\n       \
    \     System.out.println(\"Date is empty\");\n            return false;\n    \
    \    } else if (date.equals(\"31\")) {\n            System.out.println(\"Invalid\
    \ Date\");\n            return false;\n        } else if (date.equals(\"30\"))\
    \ {\n            System.out.println(\"Invalid Date\");\n            return false;\n\
    \        } else if (date.equals(\"29\")) {\n            System.out.println(\"\
    Invalid Date\");\n            return false;\n        } else if (date.equals(\"\
    0\")) {\n            System.out.println(\"Invalid Date\");\n            return\
    \ false;\n        } else if (date.equals(\"1\")) {\n            System.out.println(\"\
    Invalid Date\");\n            return false;\n        } else if (date.equals(\"\
    2\")) {\n            System.out.println(\"Invalid Date\");\n            return\
    \ false;\n        } else if (date.equals(\"4\")) {\n            System.out.println(\"\
    Invalid Date\");\n            return false;\n        } else if (date.equals(\"\
    5\")) {\n            System.out.println(\"Invalid Date\");\n            return\
    \ false;\n        } else if (date.equals(\"6\")) {\n            System.out.println(\"\
    Invalid Date\");\n            return false;\n        } else if (date.equals(\"\
    7\")) {\n            System.out.println(\"Invalid Date\");\n            return\
    \ false;\n        } else if (date.equals(\"8\")) {\n            System.out.println(\"\
    Invalid Date\");\n            return false;\n        } else if (date.equals(\"\
    9\")) {\n            System.out.println(\"Invalid Date\");\n            return\
    \ false;\n        } else if (date.equals(\"10\")) {\n            System.out.println(\"\
    Invalid Date\");\n            return false;\n        } else if (date.equals(\"\
    11\")) {\n            System.out.println(\"Invalid Date\");\n            return\
    \ false;\n        } else if (date.equals(\"12\")) {\n            System.out.println(\"\
    Invalid Date\");\n            return false;\n        } else {\n            try\
    \ {\n                SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\"\
    );\n                Date date1 = sdf.parse(date);\n                java.util.Date\
    \ utilDate1 = new java.util.Date(date1.getTime());\n                if (utilDate1.getYear()\
    \ < 1 || utilDate1.getYear() > 2020) {\n                    System.out.println(\"\
    Invalid Date\");\n                    return false;\n                }\n     \
    \           if ((utilDate1.getMonth() < 1 || utilDate1.getMonth() > 12) || (utilDate1.getDay()\
    \ < 1 || utilDate1.getDay() > 30)) {\n                    System.out.println(\"\
    Invalid Date\");\n                    return false;\n                }\n     \
    \           if ((utilDate1.getMonth() < 4 || utilDate1.getMonth() > 9) || (utilDate1.getDay()\
    \ < 1 || utilDate1.getDay() > 29)) {\n                    System.out.println(\"\
    Invalid Date\");\n                    return false;\n                }\n     \
    \           return true;\n            } catch (ParseException e) {\n         \
    \       e.printStackTrace();\n                return false;\n            }\n \
    \       }\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6pk0l0aq.java:77: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmp6pk0l0aq.java:77:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmp6pk0l0aq.java:93: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\nNote:\
    \ /tmp/tmp6pk0l0aq.java uses or overrides a deprecated API.\nNote: Recompile with\
    \ -Xlint:deprecation for details.\n3 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        //\
    \ Write your code here.\n        String[] dateArr = date.split(\"-\");\n     \
    \   Date checkDate = null;\n        Date today = new Date();\n\n        if (dateArr.length\
    \ != 3) {\n            return false;\n        }\n        int dateDays = Integer.parseInt(dateArr[2]);\n\
    \        int todayDays = Integer.parseInt(today.getMonth()+1) + \"-\" + Integer.parseInt(today.getDate())\
    \ + \"-\" + Integer.parseInt(today.getYear());\n\n        if (dateDays > 31 &&\
    \ dateDays <= 30) {\n            if (dateArr[0].startsWith(\"0\")) {\n       \
    \         if (dateArr[0].length() == 2) {\n                    checkDate = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\").parse(dateArr[0] + \".\" + dateArr[1]);\n \
    \               } else {\n                    checkDate = new SimpleDateFormat(\"\
    MM/dd/yyyy\").parse(dateArr[0] + \".\" + dateArr[1]);\n                }\n   \
    \         } else {\n                checkDate = new SimpleDateFormat(\"MM/dd/yyyy\"\
    ).parse(dateArr[0] + \".\" + dateArr[1]);\n            }\n        } else if (dateDays\
    \ > 30 && dateDays <= 29) {\n            checkDate = new SimpleDateFormat(\"MM-dd-yyyy\"\
    ).parse(dateArr[0] + \".\" + dateArr[1]);\n        } else {\n            checkDate\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\").parse(dateArr[0] + \".\" + dateArr[1]);\n\
    \        }\n        if (todayDays == checkDate.getMonth()+1+\"/\"+checkDate.getDate()+\"\
    /\"+checkDate.getYear()) {\n            valid = true;\n        }\n\n        return\
    \ valid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt_zlhkc0.java:37: error: incompatible types: int cannot be converted\
    \ to String\n        int todayDays = Integer.parseInt(today.getMonth()+1) + \"\
    -\" + Integer.parseInt(today.getDate()) + \"-\" + Integer.parseInt(today.getYear());\n\
    \                                                         ^\n/tmp/tmpt_zlhkc0.java:37:\
    \ error: incompatible types: int cannot be converted to String\n        int todayDays\
    \ = Integer.parseInt(today.getMonth()+1) + \"-\" + Integer.parseInt(today.getDate())\
    \ + \"-\" + Integer.parseInt(today.getYear());\n                             \
    \                                                                      ^\n/tmp/tmpt_zlhkc0.java:37:\
    \ error: incompatible types: int cannot be converted to String\n        int todayDays\
    \ = Integer.parseInt(today.getMonth()+1) + \"-\" + Integer.parseInt(today.getDate())\
    \ + \"-\" + Integer.parseInt(today.getYear());\n                             \
    \                                                                            \
    \                                    ^\n/tmp/tmpt_zlhkc0.java:42: error: cannot\
    \ find symbol\n                    checkDate = new SimpleDateFormat(\"MM-dd-yyyy\"\
    ).parse(dateArr[0] + \".\" + dateArr[1]);\n                                  \
    \  ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n/tmp/tmpt_zlhkc0.java:44:\
    \ error: cannot find symbol\n                    checkDate = new SimpleDateFormat(\"\
    MM/dd/yyyy\").parse(dateArr[0] + \".\" + dateArr[1]);\n                      \
    \              ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n\
    /tmp/tmpt_zlhkc0.java:47: error: cannot find symbol\n                checkDate\
    \ = new SimpleDateFormat(\"MM/dd/yyyy\").parse(dateArr[0] + \".\" + dateArr[1]);\n\
    \                                ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmpt_zlhkc0.java:50: error: cannot find symbol\n       \
    \     checkDate = new SimpleDateFormat(\"MM-dd-yyyy\").parse(dateArr[0] + \".\"\
    \ + dateArr[1]);\n                            ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpt_zlhkc0.java:52: error: cannot find s"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        int days[] = {0, 31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n        int months[] = { 0, 12, 4, 6, 9, 11};\n\
    \n        if (!date.matches(\"\"))\n            return true;\n\n        for (int\
    \ i = 0; i < days.length; i++)\n            if (date.indexOf(months[i] + \"\"\
    ) != -1)\n                date = date.substring(0, date.indexOf(months[i] + \"\
    \"));\n            if (date.indexOf(days[i] + \"\") != -1)\n                date\
    \ = date.substring(0, date.indexOf(days[i] + \"\"));\n            if (date.indexOf(\"\
    -\") != -1)\n                date = date.substring(0, date.indexOf(\"-\"));\n\n\
    \        String[] month = date.split(\"-\");\n\n        if (month[0].length()\
    \ < 2 || month[1].length() < 2 || month[2].length() < 2)\n            return false;\n\
    \        if (month[0].length() > 2 || month[1].length() > 2 || month[2].length()\
    \ > 2)\n            return false;\n\n        if (month[0].length() == 2 && month[1].length()\
    \ > 1 && month[1].length() < 3)\n            return false;\n        if (month[0].length()\
    \ > 2 && month[1].length() == 1 && month[1].length() > 3)\n            return\
    \ false;\n        if (month[0].length() > 2 && month[1].length() > 1 && month[1].length()\
    \ < 3)\n            return false;\n        if (month[0].length() > 2 && month[1].length()\
    \ > 3)\n            return false;\n        if (month[0].length() == 2 && month[1].length()\
    \ > 1 && month[1].length() < 3)\n            return false;\n\n        if (Integer.parseInt(month[0])\
    \ < 1 || Integer.parseInt(month[0]) > 12)\n            return false;\n       \
    \ if (Integer.parseInt(month[1]) < 1 || Integer.parseInt(month[1]) > 12)\n   \
    \         return false;\n        if (Integer.parseInt(month[2]) < 1 || Integer.parseInt(month[2])\
    \ > 31)\n            return false;\n\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgklm5ftm.java:36: error: cannot find symbol\n            if (date.indexOf(days[i]\
    \ + \"\") != -1)\n                                  ^\n  symbol:   variable i\n\
    \  location: class Problem\n/tmp/tmpgklm5ftm.java:37: error: cannot find symbol\n\
    \                date = date.substring(0, date.indexOf(days[i] + \"\"));\n   \
    \                                                        ^\n  symbol:   variable\
    \ i\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.trim().isEmpty())\
    \ {\n            return false;\n        }\n        String[] parts = date.split(\"\
    -\");\n        if (parts.length != 3) {\n            return false;\n        }\n\
    \        LocalDate d1;\n        try {\n            d1 = LocalDate.of(Integer.parseInt(parts[1]),\
    \ Integer.parseInt(parts[0]) - 1, Integer.parseInt(parts[2]));\n        } catch\
    \ (DateTimeException de) {\n            return false;\n        }\n        int\
    \ days = ChronoUnit.DAYS.between(d1, LocalDate.now());\n        return days >\
    \ 1 && days < 31 && days < 31 && days < 29;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp137valwq.java:34: error: cannot find symbol\n        LocalDate\
    \ d1;\n        ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmp137valwq.java:36:\
    \ error: cannot find symbol\n            d1 = LocalDate.of(Integer.parseInt(parts[1]),\
    \ Integer.parseInt(parts[0]) - 1, Integer.parseInt(parts[2]));\n             \
    \    ^\n  symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmp137valwq.java:37:\
    \ error: cannot find symbol\n        } catch (DateTimeException de) {\n      \
    \           ^\n  symbol:   class DateTimeException\n  location: class Problem\n\
    /tmp/tmp137valwq.java:40: error: package ChronoUnit does not exist\n        int\
    \ days = ChronoUnit.DAYS.between(d1, LocalDate.now());\n                     \
    \        ^\n/tmp/tmp137valwq.java:40: error: cannot find symbol\n        int days\
    \ = ChronoUnit.DAYS.between(d1, LocalDate.now());\n                          \
    \                     ^\n  symbol:   variable LocalDate\n  location: class Problem\n\
    5 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if(date == null || date.length() ==\
    \ 0) {\n            return false;\n        }\n        List<Integer> months = new\
    \ ArrayList<Integer>();\n        List<Integer> days = new ArrayList<Integer>();\n\
    \        List<Integer> years = new ArrayList<Integer>();\n        StringTokenizer\
    \ st = new StringTokenizer(date, \"-\");\n        int month = Integer.parseInt(st.nextToken());\n\
    \        if(month == 0 || month > 12) {\n            return false;\n        }\n\
    \        int day = Integer.parseInt(st.nextToken());\n        if(day < 1 || day\
    \ > 31) {\n            return false;\n        }\n        int year = Integer.parseInt(st.nextToken());\n\
    \        if(year < 1 || year > 2020) {\n            return false;\n        }\n\
    \        months.add(month);\n        days.add(day);\n        years.add(year);\n\
    \        if(months.size() > 1 && days.size() > 1 && years.size() > 1) {\n    \
    \        if(months.get(months.size() - 1) == 2) {\n                if((days.get(days.size()\
    \ - 1) == 29 && (months.get(months.size() - 1) == 2 || months.get(months.size()\
    \ - 1) == 3 || months.get(months.size() - 1) == 4 || months.get(months.size()\
    \ - 1) == 6 || months.get(months.size() - 1) == 9 || months.get(months.size()\
    \ - 1) == 11)) || (days.get(days.size() - 1) == 30 && (months.get(months.size()\
    \ - 1) == 2 || months.get(months.size() - 1) == 3 || months.get(months.size()\
    \ - 1) == 4 || months.get(months.size() - 1) == 6 || months.get(months.size()\
    \ - 1) == 9 || months.get(months.size() - 1) == 11))) {\n                    return\
    \ true;\n                }\n            }\n            else if(months.get(months.size()\
    \ - 1) == 1) {\n                if((days.get(days.size() - 1) == 29 && (months.get(months.size()\
    \ - 1) == 1 || months.get(months.size() - 1) == 3 || months.get(months.size()\
    \ - 1) == 5 || months.get(months.size() - 1) == 7 || months.get(months.size()\
    \ - 1) == 8 || months.get(months.size() - 1) == 10 || months.get(months.size()\
    \ - 1) == 12)) || (days.get(days.size() - 1) == 30 && (months.get(months.size()\
    \ - 1) == 1 || months.get(months.size() - 1) == 3 || months.get(months.size()\
    \ - 1) == 5 || months.get(months.size() - 1) == 7 || months.get(months.size()\
    \ - 1) == 8 || months.get(months.size() - 1) == 10 || months.get(months.size()\
    \ - 1) == 12))) {\n                    return true;\n                }\n     \
    \       }\n            else if(months.get(months.size() - 1) == 3) {\n       \
    \         if((days.get(days.size() - 1) == 29 && (months.get(months.size() - 1)\
    \ == 3 || months.get(months.size() - 1) == 5 || months.get(months.size() - 1)\
    \ == 7 || months.get(months.size() - 1) == 8 || months.get(months.size() - 1)\
    \ == 10 || months.get(months.size() - 1) == 12)) || (days.get(days.size\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpue2ua3b8.java:61: error: ')' expected\n                if((days.get(days.size()\
    \ - 1) == 29 && (months.get(months.size() - 1) == 3 || months.get(months.size()\
    \ - 1) == 5 || months.get(months.size() - 1) == 7 || months.get(months.size()\
    \ - 1) == 8 || months.get(months.size() - 1) == 10 || months.get(months.size()\
    \ - 1) == 12)) || (days.get(days.size\n                                      \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                         ^\n/tmp/tmpue2ua3b8.java:62: error:\
    \ illegal start of statement\n    }\n    ^\n/tmp/tmpue2ua3b8.java:63: error: illegal\
    \ start of expression\n    public static void main(String[] args) {\n    ^\n3\
    \ errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.equals(\"\
    \")) {\n            return false;\n        }\n        int days;\n        int month;\n\
    \        int year;\n        if (date.matches(\"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\"\
    )) {\n            String[] tokens = date.split(\"-\");\n            try {\n  \
    \              days = Integer.parseInt(tokens[1]);\n                month = Integer.parseInt(tokens[0]);\n\
    \                year = Integer.parseInt(tokens[2]);\n            } catch (Exception\
    \ e) {\n                return false;\n            }\n            if (month <\
    \ 1 || month > 12) {\n                return false;\n            }\n         \
    \   if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 ||\
    \ month == 10 || month == 12) {\n                if (days > 31) {\n          \
    \          return false;\n                }\n            }\n            if (month\
    \ == 4 || month == 6 || month == 9 || month == 11) {\n                if (days\
    \ > 30) {\n                    return false;\n                }\n            }\n\
    \            if (month == 2) {\n                if (days > 29) {\n           \
    \         return false;\n                }\n            }\n            return\
    \ true;\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String pattern = \"^((0?[1-9]|1[012])[-\
    \ /.](0?[1-9]|[12][0-9]|3[01]) [- /.]20([1-9][0-9]{2}))$\";\n        Pattern r\
    \ = Pattern.compile(pattern);\n        Matcher m = r.matcher(date);\n        if\
    \ (m.matches()) {\n            System.out.println(\"valid\");\n        } else\
    \ {\n            System.out.println(\"invalid\");\n        }\n        return m.matches();\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu2n6_lt2.java:28: error: cannot find symbol\n        Pattern r\
    \ = Pattern.compile(pattern);\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmpu2n6_lt2.java:28: error: cannot find symbol\n       \
    \ Pattern r = Pattern.compile(pattern);\n                    ^\n  symbol:   variable\
    \ Pattern\n  location: class Problem\n/tmp/tmpu2n6_lt2.java:29: error: cannot\
    \ find symbol\n        Matcher m = r.matcher(date);\n        ^\n  symbol:   class\
    \ Matcher\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null) {\n            return\
    \ false;\n        }\n        if (date.trim().equals(\"\")) {\n            return\
    \ false;\n        }\n\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"\
    mm-dd-yyyy\");\n        Date parsedDate = dateFormat.parse(date);\n        if\
    \ (parsedDate.equals(null)) {\n            return false;\n        }\n        if\
    \ (parsedDate.after(new Date(Long.MAX_VALUE))) {\n            return false;\n\
    \        }\n        if (parsedDate.before(new Date(Long.MIN_VALUE))) {\n     \
    \       return false;\n        }\n\n        Calendar calendar = Calendar.getInstance();\n\
    \        calendar.setTime(parsedDate);\n        int month = calendar.get(Calendar.MONTH)\
    \ + 1;\n\n        /*\n         * The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n         */\n\n        if\
    \ (month < 1 || month > 12) {\n            return false;\n        }\n        int\
    \ days = calendar.get(Calendar.DAY_OF_MONTH);\n        if (days < 1 || days >\
    \ 31 && days > 30) {\n            return false;\n        }\n\n        /*\n   \
    \      * The months should not be less than 1 or higher than 12.\n         */\n\
    \n        if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \n        return true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9x6myg_o.java:34: error: cannot find symbol\n        SimpleDateFormat\
    \ dateFormat = new SimpleDateFormat(\"mm-dd-yyyy\");\n        ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmp9x6myg_o.java:34: error:\
    \ cannot find symbol\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"\
    mm-dd-yyyy\");\n                                          ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        if(date==null\
    \ || date.equals(\"\")) {\n            return false;\n        }\n        String[]\
    \ months = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"02\",\"04\",\"\
    06\",\"09\",\"11\",\"00\",\"02\",\"04\",\"06\",\"09\",\"11\"};\n        String[]\
    \ days = {\"01\",\"02\",\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\"\
    ,\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\"\
    ,\"22\",\"23\",\"24\",\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\"};\n   \
    \     for(int i=0;i<days.length;i++) {\n            if(i==days.length-1) {\n \
    \               if(i==days.length-2) {\n                    if(months[i].equals(\"\
    00\")) {\n                        if(Integer.parseInt(date.split(\"-\")[1])<10)\
    \ {\n                            return false;\n                        }\n  \
    \                      if(Integer.parseInt(date.split(\"-\")[2])<10) {\n     \
    \                       return false;\n                        }\n           \
    \         }\n                    else {\n                        if(Integer.parseInt(date.split(\"\
    -\")[2])<10) {\n                            return false;\n                  \
    \      }\n                    }\n                }\n                else {\n \
    \                   if(Integer.parseInt(date.split(\"-\")[2])<10) {\n        \
    \                return false;\n                    }\n                }\n   \
    \         }\n            else {\n                if(Integer.parseInt(date.split(\"\
    -\")[2])<10) {\n                    return false;\n                }\n       \
    \     }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfma8xum5.java:66)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = true;\n\n        //\
    \ Checking for empty string\n        if (date.trim().equals(\"\")) {\n       \
    \     System.out.println(\"The given date string is empty.\");\n            valid\
    \ = false;\n        }\n\n        // Checking for invalid dates\n        else if\
    \ (!(date.matches(\"^(0[1-9]|1[012])[-/](0[1-9]|[12][0-9]|3[01])[-/](19|20)\\\\\
    d{2}$\"))) {\n            System.out.println(\"The given date string is invalid.\"\
    );\n            valid = false;\n        }\n\n        // Checking for invalid month\n\
    \        else if (!((date.matches(\"^(0[1-9]|1[012])[-/](0[1-9]|[12][0-9]|3[01])[-/](19|20)\\\
    \\d{2}$\") &&\n                    (date.matches(\"(0[1-9]|[12][0-9]|3[01])[-/](19|20)\\\
    \\d{2}$\") || date.matches(\"(0[1-9]|[12][0-9]|3[01])[-/](19|20)\\\\d{2}$\")))))\
    \ {\n            System.out.println(\"The given date string is invalid.\");\n\
    \            valid = false;\n        }\n\n        // Checking for invalid day\n\
    \        else if (!(date.matches(\"^(0[1-9]|1[012])[-/](0[1-9]|[12][0-9]|3[01])[-/](19|20)\\\
    \\d{2}$\"))) {\n            System.out.println(\"The given date string is invalid.\"\
    );\n            valid = false;\n        }\n\n        // Checking for invalid months\n\
    \        else if (!((date.matches(\"^(0[1-9]|1[012])[-/](0[1-9]|[12][0-9]|3[01])[-/](19|20)\\\
    \\d{2}$\") &&\n                    (date.matches(\"(0[1-9]|[12][0-9]|3[01])[-/](19|20)\\\
    \\d{2}$\") || date.matches(\"(0[1-9]|[12][0-9]|3[01])[-/](19|20)\\\\d{2}$\")))))\
    \ {\n            System.out.println(\"The given date string is invalid.\");\n\
    \            valid = false;\n        }\n\n        // Checking for invalid days\n\
    \        else if (!(date.matches(\"^(0[1-9]|1[012])[-/](0[1-9]|[12][0-9]|3[01])[-/](19|20)\\\
    \\d{2}$\"))) {\n            System.out.println(\"The given date string is invalid.\"\
    );\n            valid = false;\n        }\n\n        // Checking for valid dates\n\
    \        else {\n            System.out.println(\"The given date string is valid.\"\
    );\n            valid = true;\n        }\n\n        return valid;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpel9m3jqv.java:76)\n"
  stdout: 'The given date string is invalid.

    '
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n\n        // write code here\n    \
    \    if (date.indexOf('-') != -1) {\n            String[] dateParts = date.split(\"\
    -\");\n            if (dateParts.length != 3) {\n                return false;\n\
    \            }\n\n            int day = Integer.parseInt(dateParts[2]);\n    \
    \        if (day < 1 || day > 31) {\n                return false;\n         \
    \   }\n        }\n\n        if (date.indexOf('/') != -1) {\n            String[]\
    \ dateParts = date.split(\"/\");\n            if (dateParts.length != 3) {\n \
    \               return false;\n            }\n\n            int month = Integer.parseInt(dateParts[0]);\n\
    \            if (month < 1 || month > 12) {\n                return false;\n \
    \           }\n\n            int day = Integer.parseInt(dateParts[1]);\n     \
    \       if (day < 1 || day > 30) {\n                return false;\n          \
    \  }\n        }\n\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpus7lyska.java:64)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if(!date.equals(\"\")) {\n       \
    \     date = date.substring(0, date.length() - 1);\n            String[] months\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"02\"};\n      \
    \      for(int i = 0; i < months.length; i++) {\n                if(date.substring(i,\
    \ i + 1) + \"-\" + date.substring(0, i) + \"-\" + date.substring(i + 1).equals(months[i]))\n\
    \                    return true;\n            }\n            String[] days =\
    \ {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"\
    10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\
    \ \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    };\n            for(int i = 0; i < days.length; i++) {\n                if(date.substring(i,\
    \ i + 1) + \"-\" + date.substring(0, i) + \"-\" + date.substring(i + 1).equals(days[i]))\n\
    \                    return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsk7o96nv.java:31: error: incompatible types: String cannot be converted\
    \ to boolean\n                if(date.substring(i, i + 1) + \"-\" + date.substring(0,\
    \ i) + \"-\" + date.substring(i + 1).equals(months[i]))\n                    \
    \                                                           ^\n/tmp/tmpsk7o96nv.java:36:\
    \ error: incompatible types: String cannot be converted to boolean\n         \
    \       if(date.substring(i, i + 1) + \"-\" + date.substring(0, i) + \"-\" + date.substring(i\
    \ + 1).equals(days[i]))\n                                                    \
    \                           ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean validDate = false;\n     \
    \   if(date.length() > 0) {\n            String dateArr = date.split(\"-\");\n\
    \            try {\n                int month = Integer.parseInt(dateArr[0]);\n\
    \                int day   = Integer.parseInt(dateArr[1]);\n                int\
    \ year  = Integer.parseInt(dateArr[2]);\n                if(month > 12 || month\
    \ < 1 || day < 1 || day > 31\n                        || day > 30) {\n       \
    \             throw new NumberFormatException(\"Month or day is invalid.\");\n\
    \                }\n                validDate = true;\n            } catch (Exception\
    \ e) {\n                e.printStackTrace();\n            }\n        } else {\n\
    \            throw new NumberFormatException(\"Date string is not valid.\");\n\
    \        }\n        return validDate;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfduw8sfy.java:29: error: incompatible types: String[] cannot be\
    \ converted to String\n            String dateArr = date.split(\"-\");\n     \
    \                                  ^\n/tmp/tmpfduw8sfy.java:31: error: array required,\
    \ but String found\n                int month = Integer.parseInt(dateArr[0]);\n\
    \                                                    ^\n/tmp/tmpfduw8sfy.java:32:\
    \ error: array required, but String found\n                int day   = Integer.parseInt(dateArr[1]);\n\
    \                                                    ^\n/tmp/tmpfduw8sfy.java:33:\
    \ error: array required, but String found\n                int year  = Integer.parseInt(dateArr[2]);\n\
    \                                                    ^\n4 errors\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String months[] = { \"01\", \"03\"\
    , \"05\", \"07\", \"08\", \"10\", \"12\" };\n        String days[] = { \"01\"\
    , \"03\", \"05\", \"07\", \"08\", \"10\", \"12\" };\n        String format[] =\
    \ { \"02-dd-yyyy\" };\n        try {\n            SimpleDateFormat format2 = new\
    \ SimpleDateFormat(\"dd-mm-yyyy\");\n            Date d1 = format2.parse(date);\n\
    \            return true;\n        } catch (ParseException exception) {\n    \
    \        return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8jbhlutk.java:31: error: cannot find symbol\n            SimpleDateFormat\
    \ format2 = new SimpleDateFormat(\"dd-mm-yyyy\");\n            ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmp8jbhlutk.java:31:\
    \ error: cannot find symbol\n            SimpleDateFormat format2 = new SimpleDateFormat(\"\
    dd-mm-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmp8jbhlutk.java:34: error:\
    \ cannot find symbol\n        } catch (ParseException exception) {\n         \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        if\
    \ (date != null && !(date.equals(\"\"))) {\n            String[] dateArray = date.split(\"\
    -\");\n            if (dateArray.length != 3) {\n                return false;\n\
    \            }\n\n            int daysOfMonth[] = {31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31};\n            int daysOfYear[] = {365, 31, 32, 31, 30};\n\
    \            int month[] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n\n      \
    \      boolean valid = false;\n\n            for (int i = 0; i < dateArray.length;\
    \ i++) {\n                try {\n                    int day = Integer.parseInt(dateArray[i]);\n\
    \                    if (day < 1 || day > daysOfMonth[i]) {\n                \
    \        return false;\n                    }\n\n                    if (dateArray[i].length()\
    \ > 0) {\n                        int year = Integer.parseInt(dateArray[i].substring(0,\
    \ 2));\n                        if (year < 1 || year > 1960) {\n             \
    \               return false;\n                        }\n                   \
    \ }\n                } catch (NumberFormatException e) {\n                   \
    \ return false;\n                }\n\n                if (dateArray[i].length()\
    \ > 0) {\n                    int month = Integer.parseInt(dateArray[i].substring(0,\
    \ 2));\n                    if (month < 1 || month > month.length) {\n       \
    \                 return false;\n                    }\n                }\n  \
    \          }\n\n            return valid;\n        }\n\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9xfl9vnt.java:58: error: variable month is already defined in method\
    \ validDate(String)\n                    int month = Integer.parseInt(dateArray[i].substring(0,\
    \ 2));\n                        ^\n/tmp/tmp9xfl9vnt.java:59: error: int cannot\
    \ be dereferenced\n                    if (month < 1 || month > month.length)\
    \ {\n                                                  ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"\
    MM-dd-yyyy\");\n        try {\n            LocalDate date = LocalDate.parse(date,\
    \ dtf);\n            return true;\n        } catch (DateTimeParseException e)\
    \ {\n            return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8gxuq24e.java:27: error: cannot find symbol\n        DateTimeFormatter\
    \ dtf = DateTimeFormatter.ofPattern(\"MM-dd-yyyy\");\n        ^\n  symbol:   class\
    \ DateTimeFormatter\n  location: class Problem\n/tmp/tmp8gxuq24e.java:27: error:\
    \ cannot find symbol\n        DateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"\
    MM-dd-yyyy\");\n                                ^\n  symbol:   variable DateTimeFormatter\n\
    \  location: class Problem\n/tmp/tmp8gxuq24e.java:29: error: cannot find symbol\n\
    \            LocalDate date = LocalDate.parse(date, dtf);\n            ^\n  symbol:\
    \   class LocalDate\n  location: class Problem\n/tmp/tmp8gxuq24e.java:29: error:\
    \ variable date is already defined in method validDate(String)\n            LocalDate\
    \ date = LocalDate.parse(date, dtf);\n                      ^\n/tmp/tmp8gxuq24e.java:29:\
    \ error: cannot find symbol\n            LocalDate date = LocalDate.parse(date,\
    \ dtf);\n                             ^\n  symbol:   variable LocalDate\n  location:\
    \ class Problem\n/tmp/tmp8gxuq24e.java:31: error: cannot find symbol\n       \
    \ } catch (DateTimeParseException e) {\n                 ^\n  symbol:   class\
    \ DateTimeParseException\n  location: class Problem\n6 errors\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if(date==null||date.trim().isEmpty())\
    \ return false;\n        if(date.matches(\"^\\\\d{2}-\\\\d{2}-\\\\d{4}$\"))\n\
    \        {\n            SimpleDateFormat sdf=new SimpleDateFormat(\"MM-dd-yyyy\"\
    );\n            try{\n                Date d=sdf.parse(date);\n              \
    \  Calendar cal=Calendar.getInstance();\n                cal.setTime(d));\n  \
    \              GregorianCalendar gc=new GregorianCalendar();\n               \
    \ int year=cal.get(Calendar.YEAR);\n                int month=cal.get(Calendar.MONTH);\n\
    \                int day=cal.get(Calendar.DAY_OF_MONTH);\n                if((month==Calendar.JANUARY||month==Calendar.FEBRUARY||month==Calendar.MARCH||month==Calendar.APRIL||month==Calendar.MAY||month==Calendar.JUNE||month==Calendar.JULY||month==Calendar.AUGUST||month==Calendar.SEPTEMBER||month==Calendar.OCTOBER||month==Calendar.NOVEMBER||month==Calendar.DECEMBER)\
    \ && day>1 && day<32)\n                {\n                    gc.setTimeInMillis(d.getTime());\n\
    \                    gc.set(Calendar.YEAR, year);\n                    gc.set(Calendar.DAY_OF_MONTH,\
    \ day);\n                    return (gc.getTimeInMillis()-d.getTime())<0;\n  \
    \              }else if((month==Calendar.APRIL||month==Calendar.JULY||month==Calendar.OCTUBER||month==Calendar.NOVEMBER||month==Calendar.DECEMBER)\
    \ && day>1 && day<30)\n                {\n                    gc.setTimeInMillis(d.getTime());\n\
    \                    gc.set(Calendar.YEAR, year);\n                    gc.set(Calendar.DAY_OF_MONTH,\
    \ day);\n                    return (gc==null)?false:true;\n                }else\
    \ if(month==Calendar.SEPTEMBER)\n                {\n                    gc.setTimeInMillis(d.getTime());\n\
    \                    gc.set(Calendar.YEAR, year);\n                    gc.set(Calendar.DAY_OF_MONTH,\
    \ day);\n                    return (gc==null)?false:true;\n                }else\
    \ if(month==Calendar.OCTOBER)\n                {\n                    gc.setTimeInMillis(d.getTime());\n\
    \                    gc.set(Calendar.YEAR, year);\n                    gc.set(Calendar.DAY_OF_MONTH,\
    \ day);\n                    return (gc==null)?false\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ibjat7e.java:34: error: ';' expected\n                cal.setTime(d));\n\
    \                              ^\n/tmp/tmp8ibjat7e.java:62: error: : expected\n\
    \                    return (gc==null)?false\n                               \
    \            ^\n/tmp/tmp8ibjat7e.java:63: error: illegal start of expression\n\
    \    }\n    ^\n/tmp/tmp8ibjat7e.java:64: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n/tmp/tmp8ibjat7e.java:31:\
    \ error: 'try' without 'catch', 'finally' or resource declarations\n         \
    \   try{\n            ^\n5 errors\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateComponents = date.split(\"\
    -\");\n        if(dateComponents[0].isEmpty() || dateComponents[1].isEmpty() ||\
    \ dateComponents[2].isEmpty()) {\n            return false;\n        }\n     \
    \   int days1 = Integer.parseInt(dateComponents[0]);\n        int months1 = Integer.parseInt(dateComponents[1]);\n\
    \        int years1 = Integer.parseInt(dateComponents[2]);\n\n        int days2\
    \ = days1 - 1;\n        if(days1 < 1 || days1 > 31) return false;\n        if(months1\
    \ < 1 || months1 > 12) return false;\n        if(days2 < 1 || days2 > 30) return\
    \ false;\n        if(months2 < 1 || months2 > 12) return false;\n        if(years1\
    \ < 1 || years1 > 2040) return false;\n        if(years2 < 1 || years2 > 2020)\
    \ return false;\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp052uvcpd.java:39: error: cannot find symbol\n        if(months2\
    \ < 1 || months2 > 12) return false;\n           ^\n  symbol:   variable months2\n\
    \  location: class Problem\n/tmp/tmp052uvcpd.java:39: error: cannot find symbol\n\
    \        if(months2 < 1 || months2 > 12) return false;\n                     \
    \     ^\n  symbol:   variable months2\n  location: class Problem\n/tmp/tmp052uvcpd.java:41:\
    \ error: cannot find symbol\n        if(years2 < 1 || years2 > 2020) return false;\n\
    \           ^\n  symbol:   variable years2\n  location: class Problem\n/tmp/tmp052uvcpd.java:41:\
    \ error: cannot find symbol\n        if(years2 < 1 || years2 > 2020) return false;\n\
    \                         ^\n  symbol:   variable years2\n  location: class Problem\n\
    4 errors\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if(!StringUtils.isNotEmpty(date))\
    \ {\n            return false;\n        }\n        int daysInMonths[] = new int[]{31,30,29,31,30,31};\n\
    \        int months[] = new int[]{0,1,2,3,4,5,6,7,8,9,10,11,12};\n        String[]\
    \ dateParts = date.split(\"-\");\n        Integer monthInt = Integer.parseInt(dateParts[0]);\n\
    \        Integer dayInt = Integer.parseInt(dateParts[1]);\n        Integer yearInt\
    \ = Integer.parseInt(dateParts[2]);\n        return daysInMonths[monthInt-1] ==\
    \ dayInt && months[monthInt-1] == monthInt && yearInt == 2000; \n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetyio8ar.java:27: error: cannot find symbol\n        if(!StringUtils.isNotEmpty(date))\
    \ {\n            ^\n  symbol:   variable StringUtils\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean result;\n        if (date\
    \ == null || date.isEmpty()) return false;\n        int daysInMonth[] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        String[] dateParts = date.split(\"\
    -\");\n        int day = Integer.parseInt(dateParts[0]);\n        int month =\
    \ Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \n        if (month < 1 || month > 12) return false;\n        if (day < 1 || day\
    \ > daysInMonth[month - 1]) return false;\n        if (month == 2) {\n       \
    \     boolean leap = isLeapYear(year);\n            if (day > daysInMonth[leap\
    \ - 1]) return false;\n        }\n        result = true;\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfc1rerv_.java:38: error: cannot find symbol\n            boolean\
    \ leap = isLeapYear(year);\n                           ^\n  symbol:   method isLeapYear(int)\n\
    \  location: class Problem\n/tmp/tmpfc1rerv_.java:39: error: bad operand types\
    \ for binary operator '-'\n            if (day > daysInMonth[leap - 1]) return\
    \ false;\n                                       ^\n  first type:  boolean\n \
    \ second type: int\n2 errors\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            if (date == null\
    \ || date.isEmpty()) {\n                return false;\n            }\n       \
    \     String[] parts = date.split(\"-\");\n            if (parts.length != 3)\
    \ {\n                return false;\n            }\n            int month = 1;\n\
    \            int day = Integer.parseInt(parts[1]);\n            int year = Integer.parseInt(parts[2]);\n\
    \            if (month < 1 || month > 12) {\n                return false;\n \
    \           }\n            if (day < 1 || day > 31 || (month == 2 && day > 29))\
    \ {\n                return false;\n            }\n            if (month == 1\
    \ || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month\
    \ == 12) {\n                if (day > 30) {\n                    return false;\n\
    \                }\n            }\n            if (month == 4 || month == 6 ||\
    \ month == 9 || month == 11) {\n                if (day > 31) {\n            \
    \        return false;\n                }\n            }\n            return true;\n\
    \        } catch (Exception e) {\n            e.printStackTrace();\n        }\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps5dgjj77.java:62)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        //TODO: Complete the code here\n \
    \       System.out.println(date);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn66fmi4i.java:29: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        int daysOfMonth[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \        int months[] = { 0,1,2,3,4,5,6,7,8,9,10,11,12};\n        for(int i =\
    \ 0;i<date.length();i++) {\n            char character = date.charAt(i);\n   \
    \         if(character < '0' || character > '9') {\n                return false;\n\
    \            }\n        }\n        date = new StringBuilder(date).reverse().toString();\n\
    \        String[] dateParts = date.split(\"-\");\n        if(dateParts.length\
    \ != 3) {\n            return false;\n        }\n        try {\n            int\
    \ day1 = Integer.parseInt(dateParts[0]);\n            int month1 = Integer.parseInt(dateParts[1]);\n\
    \            int year1 = Integer.parseInt(dateParts[2]);\n            int day2\
    \ = daysOfMonth[month1 - 1];\n            int month2 = months[month1 - 1];\n \
    \           int year2 = year1;\n            while(month2 >= month1) {\n      \
    \          day2 += daysOfMonth[month2-1];\n                month2 -= months[month1\
    \ - 1];\n            }\n            if(day1 > day2) {\n                return\
    \ false;\n            }\n            while(year2 > year1) {\n                if(month2\
    \ > month1) {\n                    return false;\n                }\n        \
    \        day2 += daysOfMonth[month2-1];\n                month2 -= months[month1\
    \ - 1];\n                year2 -= years[year1 - 1];\n            }\n        }\
    \ catch (NumberFormatException nfe) {\n            return false;\n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp15gyxd4_.java:27: error: ']' expected\n        int daysOfMonth[12]\
    \ = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n                        ^\n/tmp/tmp15gyxd4_.java:27:\
    \ error: not a statement\n        int daysOfMonth[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \                               ^\n/tmp/tmp15gyxd4_.java:27: error: ';' expected\n\
    \        int daysOfMonth[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n    \
    \                            ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.matches(\"\")) {\n      \
    \      return false;\n        }\n        LocalDate date1 = LocalDate.parse(date);\n\
    \        int mth = date1.getMonthValue();\n        int day = date1.getDayOfMonth();\n\
    \        int y = date1.getYear();\n        if (day == 0) {\n            return\
    \ false;\n        }\n        if (day > 31 || day < 1) {\n            return false;\n\
    \        }\n        if (mth > 12 || mth < 1) {\n            return false;\n  \
    \      }\n        if (y == 0 || y > 2040) {\n            return false;\n     \
    \   }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw_19snvp.java:30: error: cannot find symbol\n        LocalDate\
    \ date1 = LocalDate.parse(date);\n        ^\n  symbol:   class LocalDate\n  location:\
    \ class Problem\n/tmp/tmpw_19snvp.java:30: error: cannot find symbol\n       \
    \ LocalDate date1 = LocalDate.parse(date);\n                          ^\n  symbol:\
    \   variable LocalDate\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean result = false;\n        java.time.LocalDate\
    \ localDate = LocalDate.parse(date);\n        if (date != null) {\n          \
    \  long year = localDate.getYear();\n            int month = localDate.getMonthValue();\n\
    \            int day = localDate.getDayOfMonth();\n            int day = localDate.getDayOfMonth();\n\
    \            switch (month) {\n                case 1:\n                    if\
    \ (day < 1 || day > 31) {\n                        result = false;\n         \
    \               break;\n                    }\n                case 3:\n     \
    \               if (day < 1 || day > 30) {\n                        result = false;\n\
    \                        break;\n                    }\n                case 5:\n\
    \                    if (day < 1 || day > 29) {\n                        result\
    \ = false;\n                        break;\n                    }\n          \
    \      case 7:\n                    if (day < 1 || day > 28) {\n             \
    \           result = false;\n                        break;\n                \
    \    }\n                case 8:\n                    if (day < 1 || day > 31)\
    \ {\n                        result = false;\n                        break;\n\
    \                    }\n                case 10:\n                    if (day\
    \ < 1 || day > 30) {\n                        result = false;\n              \
    \          break;\n                    }\n                case 12:\n         \
    \           if (day < 1 || day > 31) {\n                        result = false;\n\
    \                        break;\n                    }\n            }\n      \
    \      switch (month) {\n                case 4:\n                    if (day\
    \ < 1 || day > 31) {\n                        result = false;\n              \
    \          break;\n                    }\n                case 6:\n          \
    \          if (day < 1 || day > 30) {\n                        result = false;\n\
    \                        break;\n                    }\n                case 9:\n\
    \                    if (day < 1 || day > 29) {\n                        result\
    \ = false;\n                        break;\n                    }\n          \
    \      case 11:\n                    if (day < 1 || day > 28) {\n            \
    \            result = false;\n                        break;\n               \
    \     }\n            }\n            switch (month) {\n                case 2:\n\
    \                    if (day < 1 || day > 31) {\n                        result\
    \ = false;\n                        break;\n                    }\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt95y6363.java:28: error: cannot find symbol\n        java.time.LocalDate\
    \ localDate = LocalDate.parse(date);\n                                       \
    \ ^\n  symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmpt95y6363.java:33:\
    \ error: variable day is already defined in method validDate(String)\n       \
    \     int day = localDate.getDayOfMonth();\n                ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] validDate = {\"01\",\"02\"\
    ,\"03\",\"04\",\"05\",\"06\",\"07\",\"08\",\"09\",\"10\",\"11\",\"12\",\"13\"\
    ,\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\",\"24\"\
    ,\"25\",\"26\",\"27\",\"28\",\"29\",\"30\",\"31\",\"01\",\"03\",\"05\",\"07\"\
    ,\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"11\"};\n        String[] validMonths\
    \ = {\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"\
    11\",\"01\",\"03\",\"05\",\"07\",\"08\",\"10\",\"12\",\"04\",\"06\",\"09\",\"\
    11\"};\n        String month = date.substring(0, 2);\n        String day = date.substring(3,\
    \ 5);\n        String year = date.substring(6, 10);\n        int monthIndex =\
    \ validMonths.indexOf(month);\n        int dayIndex = validDate.indexOf(day);\n\
    \        int yearIndex = validDate.indexOf(year);\n        if (monthIndex == -1\
    \ || dayIndex == -1 || yearIndex == -1) {\n            return false;\n       \
    \ }\n        if (monthIndex == monthIndex && dayIndex == dayIndex && yearIndex\
    \ == yearIndex) {\n            return true;\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ybx7o3n.java:32: error: cannot find symbol\n        int monthIndex\
    \ = validMonths.indexOf(month);\n                                    ^\n  symbol:\
    \   method indexOf(String)\n  location: variable validMonths of type String[]\n\
    /tmp/tmp1ybx7o3n.java:33: error: cannot find symbol\n        int dayIndex = validDate.indexOf(day);\n\
    \                                ^\n  symbol:   method indexOf(String)\n  location:\
    \ variable validDate of type String[]\n/tmp/tmp1ybx7o3n.java:34: error: cannot\
    \ find symbol\n        int yearIndex = validDate.indexOf(year);\n            \
    \                     ^\n  symbol:   method indexOf(String)\n  location: variable\
    \ validDate of type String[]\n3 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Complete the code\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        Date dateOfBirth = null;\n\
    \        Date dateOfBirthTemp = null;\n        try {\n            dateOfBirthTemp\
    \ = sdf.parse(date);\n        } catch (Exception e) {\n            System.err.println(e);\n\
    \            return false;\n        }\n        Calendar dateOfBirthTempCal = Calendar.getInstance();\n\
    \        dateOfBirthTempCal.setTime(dateOfBirthTemp);\n        dateOfBirthTempCal.set(Calendar.DAY_OF_MONTH,\
    \ dateOfBirthTempCal.get(Calendar.DAY_OF_MONTH));\n        dateOfBirthTempCal.set(Calendar.MONTH,\
    \ dateOfBirthTempCal.get(Calendar.MONTH));\n        dateOfBirthTempCal.set(Calendar.YEAR,\
    \ dateOfBirthTempCal.get(Calendar.YEAR));\n        Calendar dateOfBirthCal = Calendar.getInstance();\n\
    \        dateOfBirthCal.setTime(dateOfBirthTempCal.getTime());\n        dateOfBirthCal.set(Calendar.DAY_OF_MONTH,\
    \ dateOfBirthCal.get(Calendar.DAY_OF_MONTH));\n        dateOfBirthCal.set(Calendar.MONTH,\
    \ dateOfBirthCal.get(Calendar.MONTH));\n        dateOfBirthCal.set(Calendar.YEAR,\
    \ dateOfBirthCal.get(Calendar.YEAR));\n        if (dateOfBirthCal.get(Calendar.DAY_OF_MONTH)\
    \ > 31 || (dateOfBirthCal.get(Calendar.MONTH) == 1 && dateOfBirthCal.get(Calendar.DAY_OF_MONTH)\
    \ > 31) || (dateOfBirthCal.get(Calendar.MONTH) == 2 && dateOfBirthCal.get(Calendar.DAY_OF_MONTH)\
    \ > 30)) {\n            return false;\n        } else {\n            return true;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxrrtx701.java:28: error: cannot find symbol\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpxrrtx701.java:28: error: cannot find symbol\n\
    \        SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n      \
    \                             ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        //TODO \n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5dqqnce2.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.isEmpty()) {\n          \
    \  return false;\n        }\n        int monthIndex = date.substring(0, 2) - 1;\
    \ // substracting the offset (month is 0-based)\n        int dayIndex = date.substring(3,\
    \ 5); // substracting the offset (day is 0-based)\n        int yearIndex = date.substring(6,\
    \ 10); // substracting the offset (year is 0-based)\n\n        if (monthIndex\
    \ < 1 || monthIndex > 12) {\n            return false;\n        }\n        if\
    \ (dayIndex < 1 || dayIndex > 31) {\n            return false;\n        }\n  \
    \      if (dayIndex < 1 || dayIndex > 30) {\n            return false;\n     \
    \   }\n        if (monthIndex < 1 || monthIndex > 12) {\n            return false;\n\
    \        }\n        if (monthIndex != 2 && (monthIndex != 4 || monthIndex != 6\
    \ || monthIndex != 9 || monthIndex != 11)) {\n            return false;\n    \
    \    }\n        if ((monthIndex == 0 || monthIndex == 1 || monthIndex == 3 ||\
    \ monthIndex == 5 || monthIndex == 7 || monthIndex == 8 || monthIndex == 10 ||\
    \ monthIndex == 12) && dayIndex != 1) {\n            return false;\n        }\n\
    \        if ((monthIndex == 4 || monthIndex == 6 || monthIndex == 9 || monthIndex\
    \ == 11) && dayIndex != 1) {\n            return false;\n        }\n        if\
    \ ((monthIndex == 2 && dayIndex > 29) || monthIndex != 2) {\n            return\
    \ false;\n        }\n\n        // If all rules passed, return true\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw474ux_3.java:30: error: bad operand types for binary operator\
    \ '-'\n        int monthIndex = date.substring(0, 2) - 1; // substracting the\
    \ offset (month is 0-based)\n                                              ^\n\
    \  first type:  String\n  second type: int\n/tmp/tmpw474ux_3.java:31: error: incompatible\
    \ types: String cannot be converted to int\n        int dayIndex = date.substring(3,\
    \ 5); // substracting the offset (day is 0-based)\n                          \
    \           ^\n/tmp/tmpw474ux_3.java:32: error: incompatible types: String cannot\
    \ be converted to int\n        int yearIndex = date.substring(6, 10); // substracting\
    \ the offset (year is 0-based)\n                                      ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        java.util.Date date1=java.util.Date.parse(date);\n\
    \        java.text.SimpleDateFormat formatter=new java.text.SimpleDateFormat(\"\
    MM-dd-yyyy\");\n        formatter.setLenient(false);\n        try {\n        \
    \    date1=formatter.parse(date);\n        } catch (ParseException e) {\n    \
    \        return false;\n        }\n        if (date1.after(new java.util.Date())\
    \ || date1.before(new java.util.Date())) {\n            return false;\n      \
    \  }\n        int day1=date1.getDate();\n        int month1=date1.getMonth()+1;\n\
    \        int year1=date1.getYear();\n        if (day1<1 || day1>31 || month1<1\
    \ || month1>12 || month1==2 && day1<1 || day1>30) {\n            return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplsyhw7bo.java:27: error: incompatible types: long cannot be converted\
    \ to Date\n        java.util.Date date1=java.util.Date.parse(date);\n        \
    \                                         ^\n/tmp/tmplsyhw7bo.java:32: error:\
    \ cannot find symbol\n        } catch (ParseException e) {\n                 ^\n\
    \  symbol:   class ParseException\n  location: class Problem\nNote: /tmp/tmplsyhw7bo.java\
    \ uses or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation\
    \ for details.\n2 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date == null || date.equals(\"\")) {\n            return valid;\n        }\n\
    \        String[] parts = date.split(\"-\");\n        if (parts.length != 3) {\n\
    \            return valid;\n        }\n        int month = Integer.parseInt(parts[0]);\n\
    \        int day = Integer.parseInt(parts[1]);\n        int year = Integer.parseInt(parts[2]);\n\
    \        // Validate the date\n        valid = checkDays(day, month, year);\n\
    \        if (valid) {\n            valid = checkMonth(month, year);\n        }\n\
    \        return valid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9qbw4j6q.java:39: error: cannot find symbol\n        valid = checkDays(day,\
    \ month, year);\n                ^\n  symbol:   method checkDays(int,int,int)\n\
    \  location: class Problem\n/tmp/tmp9qbw4j6q.java:41: error: cannot find symbol\n\
    \            valid = checkMonth(month, year);\n                    ^\n  symbol:\
    \   method checkMonth(int,int)\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        \n        if(date.equals(\"\"))\n\
    \        {\n            return false;\n        }\n        \n        String[] dateParts\
    \ = date.split(\"-\");\n        if(dateParts.length!=3)\n        {\n         \
    \   return false;\n        }\n        \n        int day = 0;\n        if(dateParts[1].equals(\"\
    01\"))\n        {\n            day = 1;\n        }\n        else if(dateParts[1].equals(\"\
    03\"))\n        {\n            day = 3;\n        }\n        else if(dateParts[1].equals(\"\
    05\"))\n        {\n            day = 5;\n        }\n        else if(dateParts[1].equals(\"\
    07\"))\n        {\n            day = 7;\n        }\n        else if(dateParts[1].equals(\"\
    08\"))\n        {\n            day = 8;\n        }\n        else if(dateParts[1].equals(\"\
    10\"))\n        {\n            day = 10;\n        }\n        else if(dateParts[1].equals(\"\
    12\"))\n        {\n            day = 12;\n        }\n        \n        Map<Integer,Integer>\
    \ months = new HashMap<>();\n        months.put(1,11);\n        months.put(3,3);\n\
    \        months.put(5,3);\n        months.put(7,3);\n        months.put(8,3);\n\
    \        months.put(10,3);\n        months.put(12,3);\n        \n        if(months.get(Integer.valueOf(dateParts[0]))\
    \ <= 0)\n        {\n            return false;\n        }\n        \n        if(months.get(Integer.valueOf(dateParts[0]))\
    \ > months.get(Integer.valueOf(dateParts[1])))\n        {\n            return\
    \ false;\n        }\n        \n        if(Integer.valueOf(dateParts[2]) < 1)\n\
    \        {\n            return false;\n        }\n        \n        if(Integer.valueOf(dateParts[2])\
    \ > Integer.valueOf(dateParts[1]))\n        {\n            return false;\n   \
    \     }\n        \n        if(Integer.valueOf(dateParts[2]) < 1)\n        {\n\
    \            return false;\n        }\n        \n        if(Integer.valueOf(dateParts[2])\
    \ > 31)\n        {\n            return false;\n        }\n        \n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.validDate(tmpfw_qc6bm.java:83)\n\tat Problem.main(tmpfw_qc6bm.java:111)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return isValidDate(date) && isValidDate(date)\
    \ == false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsuec6fg4.java:27: error: cannot find symbol\n        return isValidDate(date)\
    \ && isValidDate(date) == false;\n               ^\n  symbol:   method isValidDate(String)\n\
    \  location: class Problem\n/tmp/tmpsuec6fg4.java:27: error: cannot find symbol\n\
    \        return isValidDate(date) && isValidDate(date) == false;\n           \
    \                         ^\n  symbol:   method isValidDate(String)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    mm-dd-yyyy\");\n        try {\n            Date newDate = format.parse(date);\n\
    \            Calendar calendar = Calendar.getInstance();\n            calendar.setTime(newDate);\n\
    \            int day = calendar.get(Calendar.DAY_OF_MONTH);\n            int month\
    \ = calendar.get(Calendar.MONTH);\n            int year = calendar.get(Calendar.YEAR);\n\
    \n            // Check the day value\n            if (day < 1 || day > 31)\n \
    \               return false;\n\n            // Check the month value\n      \
    \      int monthValue = (int) month + 1;\n            if (monthValue < 1 || monthValue\
    \ > 12)\n                return false;\n\n            // Check the year value\n\
    \            int yearValue = year;\n            if (monthValue == 2 && (year %\
    \ 400 == 0 || (year % 100 != 0 && year % 4 == 0)))\n                yearValue++;\n\
    \            if (monthValue == 2 && (year % 100 == 0 || year % 4 == 0))\n    \
    \            yearValue++;\n            if (monthValue == 2 && year % 4 == 0)\n\
    \                yearValue++;\n            if (monthValue == 1)\n            \
    \    yearValue++;\n            if (monthValue == 4 || monthValue == 6 || monthValue\
    \ == 9 || monthValue == 11)\n                yearValue++;\n            if (monthValue\
    \ == 3 && day > 30)\n                return false;\n\n            // Check the\
    \ year\n            if (year < 100 || year > 2100)\n                return false;\n\
    \n            return true;\n        } catch (Exception exception) {\n        \
    \    return false;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9n_usdyh.java:27: error: cannot find symbol\n        SimpleDateFormat\
    \ format = new SimpleDateFormat(\"mm-dd-yyyy\");\n        ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmp9n_usdyh.java:27: error:\
    \ cannot find symbol\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    mm-dd-yyyy\");\n                                      ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null) {\n            return\
    \ false;\n        }\n        // Date format check\n        if (date.isEmpty())\
    \ {\n            return false;\n        }\n        // Check date format\n    \
    \    if (date.matches(\"\\\\d{2}-\\\\d{2}-\\\\d{4}\")) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp40cgxpba.java:42)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        //\
    \ The code should only contain one method\n        // The method should return\
    \ true if the date is valid otherwise it returns false\n        boolean validDate\
    \ = false;\n        if (date == null || date.equals(\"\")) {\n            return\
    \ validDate;\n        }\n        String[] dateArray = date.split(\"-\");\n   \
    \     // Validate date\n        if (dateArray.length > 2 && dateArray.length <\
    \ 5) {\n            return validDate;\n        }\n        if (dateArray.length\
    \ < 2) {\n            return validDate;\n        }\n        int daysInMonths[]\
    \ = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n        if (dateArray[1]\
    \ < 1 || dateArray[1] > 12) {\n            return validDate;\n        }\n    \
    \    int months[] = { 0, 3, 6, 9, 12 };\n        int month = dateArray[1] - 1;\n\
    \        if (month < 1 || month > 12) {\n            return validDate;\n     \
    \   }\n        int day = Integer.parseInt(dateArray[2]);\n        if (day < 1\
    \ || day > daysInMonths[month]) {\n            return validDate;\n        }\n\
    \        validDate = true;\n        return validDate;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyp7z3bng.java:43: error: bad operand types for binary operator\
    \ '<'\n        if (dateArray[1] < 1 || dateArray[1] > 12) {\n                \
    \         ^\n  first type:  String\n  second type: int\n/tmp/tmpyp7z3bng.java:43:\
    \ error: bad operand types for binary operator '>'\n        if (dateArray[1] <\
    \ 1 || dateArray[1] > 12) {\n                                             ^\n\
    \  first type:  String\n  second type: int\n/tmp/tmpyp7z3bng.java:47: error: bad\
    \ operand types for binary operator '-'\n        int month = dateArray[1] - 1;\n\
    \                                 ^\n  first type:  String\n  second type: int\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your logic here\n       \
    \ java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(\"MM-dd-yyyy\"\
    );\n        Date date = sdf.parse(date);\n        Calendar c = Calendar.getInstance();\n\
    \        c.setTime(date);\n        int day = c.get(Calendar.DAY_OF_MONTH);\n \
    \       int month = c.get(Calendar.MONTH);\n        int year = c.get(Calendar.YEAR);\n\
    \        Calendar cal = Calendar.getInstance();\n        cal.setTime(date);\n\
    \        int day_s = cal.get(Calendar.DAY_OF_MONTH);\n        int month_s = cal.get(Calendar.MONTH);\n\
    \        int year_s = cal.get(Calendar.YEAR);\n        if (day < 1 || day > 31\
    \ || ((month - 1) < 1 || month > 12) || ((day_s - 1) < 1 || day_s > 30) || ((month_s\
    \ - 1) < 1 || month_s > 12) || ((year_s - 1) < 1 || year_s > 30)) {\n        \
    \    return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqp54wm36.java:29: error: variable date is already defined in method\
    \ validDate(String)\n        Date date = sdf.parse(date);\n             ^\n/tmp/tmpqp54wm36.java:29:\
    \ error: incompatible types: Date cannot be converted to String\n        Date\
    \ date = sdf.parse(date);\n                              ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // write your logic here\n       \
    \ return date;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0tpns0lq.java:28: error: incompatible types: String cannot be converted\
    \ to boolean\n        return date;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        int month = 0;\n        int day =\
    \ 0;\n        int year = 0;\n        // Write the code to validate the given date\
    \ and return true if the date is valid\n        try {\n            SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n            Date date = sdf.parse(date);\n\
    \            month = date.getMonth();\n            day = date.getDate();\n   \
    \         year = date.getYear();\n        } catch (Exception e) {\n          \
    \  e.printStackTrace();\n        }\n        if (month < 1 || month > 12) {\n \
    \           return false;\n        }\n        if (day < 1 || day > 31) {\n   \
    \         return false;\n        }\n        if (month == 2 && ((year % 4 == 0\
    \ && year % 100 != 0) || (year % 400 == 0))\n                && (day > 29)) {\n\
    \            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm7vxc31u.java:32: error: cannot find symbol\n            SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpm7vxc31u.java:32: error:\
    \ cannot find symbol\n            SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                       ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpm7vxc31u.java:33: error: variable date is\
    \ already defined in method validDate(String)\n            Date date = sdf.parse(date);\n\
    \                 ^\nNote: /tmp/tmpm7vxc31u.java uses or overrides a deprecated\
    \ API.\nNote: Recompile with -Xlint:deprecation for details.\n3 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        int m1, m2, m3, m4;\n        boolean\
    \ isValid = true;\n\n        // 1. The date string is not empty.\n        if (date.isEmpty())\n\
    \            return false;\n\n        // 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n        m1 =\
    \ Integer.valueOf(date.substring(0, 2));\n        m2 = Integer.valueOf(date.substring(2,\
    \ 4));\n        m3 = Integer.valueOf(date.substring(4, 6));\n        m4 = Integer.valueOf(date.substring(6,\
    \ 8));\n        if (m1 < 1 || m1 > 31 || (m1 == 31 && m3 > 30) || (m1 == 30 &&\
    \ m4 > 29) || (m2 == 1 && m4 > 29))\n            isValid = false;\n\n        //\
    \ 3. The months should not be less than 1 or higher than 12.\n        if (m1 <\
    \ 1 || m1 > 12)\n            isValid = false;\n\n        // 4. The date should\
    \ be in the format: mm-dd-yyyy\n        if (!date.matches(\"(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])(\\\
    \\-|\\\\/)\" +\n                \"(0?[1-9]|1[012])(\\\\-|\\\\/)(\\\\d{4})\"))\n\
    \            isValid = false;\n\n        // Validate date string.\n        return\
    \ isValid;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"1-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.valueOf(Integer.java:999)\n\
    \tat Problem.validDate(tmpfo9hfvm9.java:37)\n\tat Problem.main(tmpfo9hfvm9.java:55)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6akjl3hb.java:31)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateString = date.split(\"\
    -\");\n\n        boolean isDayValid = (dateString.length == 3); // Check if length\
    \ 3 means day\n        boolean isMonthValid = (dateString.length == 2); // Check\
    \ if length 2 means month\n        boolean isYearValid = (dateString.length ==\
    \ 7); // Check if length 7 means year\n\n        boolean isMonth1Valid = (dateString[0].equals(\"\
    01\") || dateString[0].equals(\"03\") || dateString[0].equals(\"05\")\n      \
    \          || dateString[0].equals(\"07\") || dateString[0].equals(\"08\") ||\
    \ dateString[0].equals(\"10\")\n                || dateString[0].equals(\"12\"\
    )); // Check if first character is 1 or 3\n        boolean isMonth3Valid = (dateString[1].equals(\"\
    04\") || dateString[1].equals(\"06\") || dateString[1].equals(\"09\")\n      \
    \          || dateString[1].equals(\"11\")); // Check if first character is 4\
    \ or 6\n        boolean isMonth5Valid = (dateString[2].equals(\"01\") || dateString[2].equals(\"\
    03\") || dateString[2].equals(\"05\")\n                || dateString[2].equals(\"\
    07\") || dateString[2].equals(\"08\") || dateString[2].equals(\"10\")\n      \
    \          || dateString[2].equals(\"12\")); // Check if first character is 1\
    \ or 3\n\n        return isDayValid && (isMonthValid && (isYearValid || isMonth1Valid\
    \ || isMonth3Valid || isMonth5Valid))\n                && (!isMonthValid && !isMonth1Valid\
    \ && !isMonth3Valid && !isMonth5Valid);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9gkcskic.java:46)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\n            Date d = sdf.parse(date);\n\
    \            return d.after(new Date(2000, 1, 1)) && d.before(new Date(2100, 1,\
    \ 1));\n        } catch (Exception e) {\n            System.out.println(\"Exception\
    \ occured: \" + e.toString());\n            return false;\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbtg5co_o.java:28: error: cannot find symbol\n            SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpbtg5co_o.java:28: error:\
    \ cannot find symbol\n            SimpleDateFormat sdf = new SimpleDateFormat(\"\
    dd-MM-yyyy\");\n                                       ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\nNote: /tmp/tmpbtg5co_o.java uses or overrides a deprecated\
    \ API.\nNote: Recompile with -Xlint:deprecation for details.\n2 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            Date d = null;\n\
    \            SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n  \
    \          Date parse = sdf.parse(date);\n            d = parse;\n           \
    \ GregorianCalendar c = new GregorianCalendar();\n            c.setTime(d);\n\
    \            if (c.get(Calendar.DAY_OF_MONTH) < 1 || c.get(Calendar.DAY_OF_MONTH)\
    \ > 31)\n                return false;\n            if (c.get(Calendar.DAY_OF_WEEK)\
    \ > 6)\n                return false;\n            if (c.get(Calendar.MONTH) <\
    \ 1 || c.get(Calendar.MONTH) > 12)\n                return false;\n        } catch\
    \ (Exception e) {\n            e.printStackTrace();\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpboe4vzza.java:29: error: cannot find symbol\n            SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpboe4vzza.java:29: error:\
    \ cannot find symbol\n            SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                       ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] parts = date.split(\"-\"\
    );\n        int[] year = new int[]{Integer.parseInt(parts[0]), Integer.parseInt(parts[1])};\n\
    \        int[] month = new int[]{Integer.parseInt(parts[2]), Integer.parseInt(parts[3])};\n\
    \        int[] day = new int[]{Integer.parseInt(parts[4]), Integer.parseInt(parts[5])};\n\
    \        return validDate(year, month, day);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnz6a9azs.java:31: error: method validDate in class Problem cannot\
    \ be applied to given types;\n        return validDate(year, month, day);\n  \
    \             ^\n  required: String\n  found:    int[],int[],int[]\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return date.trim().length() > 0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaklk2slj.java:31)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here...\n        \n \
    \       // write your code here\n        \n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6g_gmumd.java:34)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        Scanner in = new Scanner(System.in);\n\
    \        System.out.println(\"Enter date in format mm-dd-yyyy\");\n        String\
    \ dateStr = in.nextLine();\n        try {\n            SimpleDateFormat format\
    \ = new SimpleDateFormat(\"mm-dd-yyyy\");\n            Date validDate = format.parse(dateStr);\n\
    \            in.close();\n            return true;\n        } catch (Exception\
    \ e) {\n            System.err.println(e);\n            return false;\n      \
    \  }\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp75gj5o7p.java:31: error: cannot find symbol\n            SimpleDateFormat\
    \ format = new SimpleDateFormat(\"mm-dd-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmp75gj5o7p.java:31: error:\
    \ cannot find symbol\n            SimpleDateFormat format = new SimpleDateFormat(\"\
    mm-dd-yyyy\");\n                                          ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write code here\n        List<Integer>\
    \ dayArray = Arrays.asList(1,2,3,4,5,6,7,8,9,10,11,12);\n        List<Integer>\
    \ monthArray = Arrays.asList(1,3,5,7,8,10,12);\n        List<Integer> monthArray2\
    \ = Arrays.asList(4,6,9,11);\n        String[] dateArray = date.split(\"-\");\n\
    \        int month = Integer.parseInt(dateArray[0]);\n        int day = Integer.parseInt(dateArray[1]);\n\
    \        int year = Integer.parseInt(dateArray[2]);\n        if(date.length()\
    \ > 0) {\n            if(month < 1 || month > 12) {\n                return false;\n\
    \            }\n            if(day < 1 || day > 31) {\n                return\
    \ false;\n            }\n            if(dayArray.contains(month) && dayArray.contains(day))\
    \ {\n                return false;\n            }\n            if(monthArray.contains(month)\
    \ && day > 30) {\n                return false;\n            }\n            if(monthArray2.contains(month)\
    \ && day > 29) {\n                return false;\n            }\n            Calendar\
    \ cal = Calendar.getInstance();\n            cal.set(year, month-1, day);\n  \
    \          int day = cal.get(Calendar.DAY_OF_MONTH);\n            int month =\
    \ cal.get(Calendar.MONTH);\n            int year = cal.get(Calendar.YEAR);\n \
    \           if(day > 30 && month == 2) {\n                return false;\n    \
    \        }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpspzzc0oc.java:53: error: variable day is already defined in method\
    \ validDate(String)\n            int day = cal.get(Calendar.DAY_OF_MONTH);\n \
    \               ^\n/tmp/tmpspzzc0oc.java:54: error: variable month is already\
    \ defined in method validDate(String)\n            int month = cal.get(Calendar.MONTH);\n\
    \                ^\n/tmp/tmpspzzc0oc.java:55: error: variable year is already\
    \ defined in method validDate(String)\n            int year = cal.get(Calendar.YEAR);\n\
    \                ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return ! (\"\".equals(date) || date.length()\
    \ < 10 || date.contains(\"-\") || date.contains(\"/\"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb7usctoy.java:30)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.equals(\"\
    \")) {\n            return false;\n        }\n        String[] dateParts = date.split(\"\
    -\");\n        boolean isLeap = isLeapYear(Integer.valueOf(dateParts[0]));\n \
    \       int month = Integer.valueOf(dateParts[1]);\n        int day = Integer.valueOf(dateParts[2]);\n\
    \        int year = Integer.valueOf(dateParts[3]);\n        if (month < 1 || month\
    \ > 12) {\n            return false;\n        }\n        if (day < 1 || day >\
    \ 31 || isLeap && (day > 29)) {\n            return false;\n        }\n      \
    \  if (month < 4 || month > 2) {\n            return false;\n        }\n     \
    \   if (month == 2 && day > 29) {\n            return false;\n        }\n    \
    \    int daysInMonth = 0;\n        if (isLeap) {\n            daysInMonth = 31;\n\
    \        } else {\n            daysInMonth = 28;\n        }\n        if (month\
    \ == 4 && day > daysInMonth) {\n            return false;\n        }\n       \
    \ if (month == 6 && day > daysInMonth) {\n            return false;\n        }\n\
    \        if (month == 9 && day > daysInMonth) {\n            return false;\n \
    \       }\n        if (month == 11 && day > daysInMonth) {\n            return\
    \ false;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxhfgl__9.java:31: error: cannot find symbol\n        boolean isLeap\
    \ = isLeapYear(Integer.valueOf(dateParts[0]));\n                         ^\n \
    \ symbol:   method isLeapYear(Integer)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        Scanner scanner = new Scanner(date);\n\
    \        scanner.useDelimiter(\"-\");\n        scanner.useDelimiter(\"-\");\n\
    \        scanner.useDelimiter(\"-\");\n        scanner.nextInt();\n        scanner.nextInt();\n\
    \        scanner.nextInt();\n        return scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt();\n \
    \   }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplcs0h0er.java:37)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        String\
    \ dateString = date;\n        if (dateString.isEmpty())\n            return false;\n\
    \        int day = Integer.parseInt(dateString.substring(3, 5));\n        int\
    \ month = Integer.parseInt(dateString.substring(0, 2));\n        int year = Integer.parseInt(dateString.substring(6,\
    \ 10));\n        if (day < 1 || day > 31)\n            return false;\n       \
    \ if (month < 1 || month > 12)\n            return false;\n        if (day < 1\
    \ || day > 30)\n            return false;\n        if (month < 1 || month > 12)\n\
    \            return false;\n        boolean ret = true;\n        return ret; //The\
    \ date should be in the format: mm-dd-yyyy\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"0-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmpzp6qlwmr.java:31)\n\tat Problem.main(tmpzp6qlwmr.java:48)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (StringUtil.isEmpty(date) || StringUtil.isEmpty(date.substring(0,\
    \ 2)) || StringUtil.isEmpty(date.substring(3, 5)) || StringUtil.isEmpty(date.substring(6,\
    \ 9)) || StringUtil.isEmpty(date.substring(9, 11)) || StringUtil.isEmpty(date.substring(11,\
    \ 12)) || StringUtil.isEmpty(date.substring(12, 13)) || StringUtil.isEmpty(date.substring(13,\
    \ 14))) {\n            return false;\n        }\n        int monthDays[] = {1,\
    \ 3, 5, 7, 8, 10, 12};\n        if (monthDays[Integer.parseInt(date.substring(0,\
    \ 2))-1] >= 1 || monthDays[Integer.parseInt(date.substring(0, 2))-1] <= 31) {\n\
    \            return false;\n        }\n        int daysInMonth[] = {29, 30, 31};\n\
    \        if (monthDays[Integer.parseInt(date.substring(3, 5))-1] >= 4 || monthDays[Integer.parseInt(date.substring(3,\
    \ 5))-1] <= 30) {\n            return false;\n        }\n        if (monthDays[Integer.parseInt(date.substring(6,\
    \ 9))-1] >= 6 || monthDays[Integer.parseInt(date.substring(6, 9))-1] <= 29) {\n\
    \            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphpz6ar3s.java:27: error: cannot find symbol\n        if (StringUtil.isEmpty(date)\
    \ || StringUtil.isEmpty(date.substring(0, 2)) || StringUtil.isEmpty(date.substring(3,\
    \ 5)) || StringUtil.isEmpty(date.substring(6, 9)) || StringUtil.isEmpty(date.substring(9,\
    \ 11)) || StringUtil.isEmpty(date.substring(11, 12)) || StringUtil.isEmpty(date.substring(12,\
    \ 13)) || StringUtil.isEmpty(date.substring(13, 14))) {\n            ^\n  symbol:\
    \   variable StringUtil\n  location: class Problem\n/tmp/tmphpz6ar3s.java:27:\
    \ error: cannot find symbol\n        if (StringUtil.isEmpty(date) || StringUtil.isEmpty(date.substring(0,\
    \ 2)) || StringUtil.isEmpty(date.substring(3, 5)) || StringUtil.isEmpty(date.substring(6,\
    \ 9)) || StringUtil.isEmpty(date.substring(9, 11)) || StringUtil.isEmpty(date.substring(11,\
    \ 12)) || StringUtil.isEmpty(date.substring(12, 13)) || StringUtil.isEmpty(date.substring(13,\
    \ 14))) {\n                                        ^\n  symbol:   variable StringUtil\n\
    \  location: class Problem\n/tmp/tmphpz6ar3s.java:27: error: cannot find symbol\n\
    \        if (StringUtil.isEmpty(date) || StringUtil.isEmpty(date.substring(0,\
    \ 2)) || StringUtil.isEmpty(date.substring(3, 5)) || StringUtil.isEmpty(date.substring(6,\
    \ 9)) || StringUtil.isEmpty(date.substring(9, 11)) || StringUtil.isEmpty(date.substring(11,\
    \ 12)) || StringUtil.isEmpty(date.substring(12, 13)) || StringUtil.isEmpty(date.substring(13,\
    \ 14))) {\n                                                                  \
    \                  ^\n  symbol:   variable StringUtil\n  location: class Problem\n\
    /tmp/tmphpz6ar3s.java:27: error: cannot find symbol\n        if (StringUtil.isEmpty(date)\
    \ || StringUtil.isEmpty(date.substring(0, 2)) || StringUtil.isEmpty(date.substring(3,\
    \ 5)) || StringUtil.isEmpty(date.substring(6, 9)) || StringUtil.isEmpty(date.substring(9,\
    \ 11)) || StringUtil.isEmpty(date.substring(11, 12)) || StringUtil.isEmpty(date.substring(12,\
    \ 13)) || StringUtil.isEmpty(date.substring(13, 14))) {\n                    \
    \                                                                            \
    \        "
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return validateDateFormat(date) &&\
    \ validateDaysInMonth(date) && validateMonth(date);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfztjescj.java:27: error: cannot find symbol\n        return validateDateFormat(date)\
    \ && validateDaysInMonth(date) && validateMonth(date);\n               ^\n  symbol:\
    \   method validateDateFormat(String)\n  location: class Problem\n/tmp/tmpfztjescj.java:27:\
    \ error: cannot find symbol\n        return validateDateFormat(date) && validateDaysInMonth(date)\
    \ && validateMonth(date);\n                                           ^\n  symbol:\
    \   method validateDaysInMonth(String)\n  location: class Problem\n/tmp/tmpfztjescj.java:27:\
    \ error: cannot find symbol\n        return validateDateFormat(date) && validateDaysInMonth(date)\
    \ && validateMonth(date);\n                                                  \
    \                      ^\n  symbol:   method validateMonth(String)\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date != null && !date.trim().equals(\"\
    \")) {\n            try {\n                LocalDate localDate = LocalDate.parse(date);\n\
    \                LocalDate oneMonthBefore = localDate.minusMonths(1);\n      \
    \          LocalDate oneMonthFromNowToday = localDate.minusMonths(2);\n      \
    \          LocalDate oneDayBefore = localDate.minusDays(1);\n                LocalDate\
    \ oneDayFromNowToday = localDate.minusDays(2);\n\n                if (localDate.getDayOfMonth()\
    \ < 1 || localDate.getDayOfMonth() > 31) {\n                    return false;\n\
    \                }\n                if (localDate.getMonth() < 1 || localDate.getMonth()\
    \ > 12) {\n                    return false;\n                }\n            \
    \    if ((localDate.getDayOfMonth() > 31 || localDate.getDayOfMonth() < 1)\n \
    \                       || (localDate.getMonth() > 12 || (localDate.getMonth()\
    \ < 1 && localDate.getDayOfMonth() > 30))) {\n                    return false;\n\
    \                }\n                if (oneMonthBefore.isBefore(localDate) ||\
    \ oneMonthFromNowToday.isAfter(localDate)) {\n                    return false;\n\
    \                }\n                if (oneDayBefore.isBefore(localDate) || oneDayFromNowToday.isAfter(localDate))\
    \ {\n                    return false;\n                }\n            } catch\
    \ (DateTimeParseException e) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqz2qxbat.java:29: error: cannot find symbol\n                LocalDate\
    \ localDate = LocalDate.parse(date);\n                ^\n  symbol:   class LocalDate\n\
    \  location: class Problem\n/tmp/tmpqz2qxbat.java:29: error: cannot find symbol\n\
    \                LocalDate localDate = LocalDate.parse(date);\n              \
    \                        ^\n  symbol:   variable LocalDate\n  location: class\
    \ Problem\n/tmp/tmpqz2qxbat.java:30: error: cannot find symbol\n             \
    \   LocalDate oneMonthBefore = localDate.minusMonths(1);\n                ^\n\
    \  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmpqz2qxbat.java:31:\
    \ error: cannot find symbol\n                LocalDate oneMonthFromNowToday =\
    \ localDate.minusMonths(2);\n                ^\n  symbol:   class LocalDate\n\
    \  location: class Problem\n/tmp/tmpqz2qxbat.java:32: error: cannot find symbol\n\
    \                LocalDate oneDayBefore = localDate.minusDays(1);\n          \
    \      ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmpqz2qxbat.java:33:\
    \ error: cannot find symbol\n                LocalDate oneDayFromNowToday = localDate.minusDays(2);\n\
    \                ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmpqz2qxbat.java:51:\
    \ error: cannot find symbol\n            } catch (DateTimeParseException e) {\n\
    \                     ^\n  symbol:   class DateTimeParseException\n  location:\
    \ class Problem\n7 errors\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ splitDate = date.split(\"-\");\n        int days = 0;\n        int months =\
    \ 0;\n        int year = 0;\n        for (int i = 0; i < splitDate.length; i++)\
    \ {\n            String splitChar = splitDate[i].toString();\n            if (splitChar.length()\
    \ == 2) {\n                days += (splitChar.charAt(0) - '0') * 3;\n        \
    \        months += (splitChar.charAt(1) - '0') * 3;\n            } else {\n  \
    \              days += (splitChar.charAt(0) - '0') * 30;\n                months\
    \ += (splitChar.charAt(1) - '0') * 30;\n            }\n        }\n        if (splitDate.length\
    \ == 3) {\n            months += (splitDate[2].charAt(0) - '0') * 12;\n      \
    \  }\n        if (days > 31 || days < 1 || months > 12 || months < 1 || year <\
    \ 1900 || year > 2020) {\n            return false;\n        }\n        if (months\
    \ == 2 && days > 29) {\n            return false;\n        }\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\n        try {\n            Date\
    \ newDate = sdf.parse(date);\n            Calendar c = Calendar.getInstance();\n\
    \            c.setTime(newDate);\n            if (c.get(Calendar.YEAR) < 1900\
    \ || (c.get(Calendar.YEAR) > 2020 && months == 2) || (c.get(Calendar.YEAR) ==\
    \ 2020 && months == 1)) {\n                return false;\n            }\n    \
    \        c.add(Calendar.DATE, days);\n            Date newDate1 = c.getTime();\n\
    \            sdf.format(newDate1);\n            return true;\n        } catch\
    \ (ParseException e) {\n            e.printStackTrace();\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpftgv_o9i.java:51: error: cannot find symbol\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpftgv_o9i.java:51: error: cannot find symbol\n\
    \        SimpleDateFormat sdf = new SimpleDateFormat(\"dd-MM-yyyy\");\n      \
    \                             ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmpftgv_o9i.java:63: error: cannot find symbol\n       \
    \ } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.trim().equals(\"\
    \")) {\n            return false;\n        }\n        LocalDate date = LocalDate.parse(date);\n\
    \        boolean validDate = checkDateValidity(date);\n        return validDate;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpns3934eh.java:30: error: cannot find symbol\n        LocalDate\
    \ date = LocalDate.parse(date);\n        ^\n  symbol:   class LocalDate\n  location:\
    \ class Problem\n/tmp/tmpns3934eh.java:30: error: variable date is already defined\
    \ in method validDate(String)\n        LocalDate date = LocalDate.parse(date);\n\
    \                  ^\n/tmp/tmpns3934eh.java:30: error: cannot find symbol\n  \
    \      LocalDate date = LocalDate.parse(date);\n                         ^\n \
    \ symbol:   variable LocalDate\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Add your code here\n        return\
    \ Boolean.valueOf(date);\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwwt4uni9.java:31)\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Complete the code here\n      \
    \  SimpleDateFormat format = new SimpleDateFormat(\"MM-dd-yyyy\");\n        Date\
    \ dateObject = null;\n        try {\n            dateObject = format.parse(date);\n\
    \        } catch (ParseException e) {\n            return false;\n        }\n\
    \        Calendar c = Calendar.getInstance();\n        c.setTime(dateObject);\n\
    \        int month = c.get(Calendar.MONTH);\n        int day = c.get(Calendar.DAY_OF_MONTH);\n\
    \        int year = c.get(Calendar.YEAR);\n        if (month > 11 || month < 1\
    \ || day < 1 || day > 31 || day > 30) {\n            return false;\n        }\n\
    \        if (month == 2 && (day > 29 || day < 1)) {\n            return false;\n\
    \        }\n        if (month == 1 && (day > 31 || day < 1)) {\n            return\
    \ false;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk0375pyl.java:28: error: cannot find symbol\n        SimpleDateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpk0375pyl.java:28: error:\
    \ cannot find symbol\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                      ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpk0375pyl.java:32: error: cannot find symbol\n\
    \        } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try{\n            LocalDate localDate\
    \ = LocalDate.parse(date);\n            \n            DateTimeFormatter dateFormat\
    \ = DateTimeFormatter.ofPattern(\"MM/dd/yyyy\");\n            \n            LocalDate\
    \ startDate = LocalDate.parse(dateFormat.parse(date).format(localDate));\n   \
    \         LocalDate endDate = startDate.plusMonths(12);\n            \n      \
    \      LocalDate startDate1 = LocalDate.parse(dateFormat.parse(date).format(startDate));\n\
    \            LocalDate endDate1 = startDate1.plusMonths(12);\n            \n \
    \           LocalDate startDate2 = LocalDate.parse(dateFormat.parse(date).format(endDate));\n\
    \            LocalDate endDate2 = startDate2.plusMonths(12);\n            \n \
    \           LocalDate startDate3 = LocalDate.parse(dateFormat.parse(date).format(endDate1));\n\
    \            LocalDate endDate3 = startDate3.plusMonths(12);\n            \n \
    \           LocalDate startDate4 = LocalDate.parse(dateFormat.parse(date).format(endDate2));\n\
    \            LocalDate endDate4 = startDate4.plusMonths(12);\n            \n \
    \           LocalDate startDate5 = LocalDate.parse(dateFormat.parse(date).format(endDate3));\n\
    \            LocalDate endDate5 = startDate5.plusMonths(12);\n            \n \
    \           LocalDate startDate6 = LocalDate.parse(dateFormat.parse(date).format(endDate4));\n\
    \            LocalDate endDate6 = startDate6.plusMonths(12);\n            \n \
    \           LocalDate startDate7 = LocalDate.parse(dateFormat.parse(date).format(endDate5));\n\
    \            LocalDate endDate7 = startDate7.plusMonths(12);\n            \n \
    \           LocalDate startDate8 = LocalDate.parse(dateFormat.parse(date).format(endDate6));\n\
    \            LocalDate endDate8 = startDate8.plusMonths(12);\n            \n \
    \           LocalDate startDate9 = LocalDate.parse(dateFormat.parse(date).format(endDate7));\n\
    \            LocalDate endDate9 = startDate9.plusMonths(12);\n            \n \
    \           LocalDate startDate10 = LocalDate.parse(dateFormat.parse(date).format(endDate8));\n\
    \            LocalDate endDate10 = startDate10.plusMonths(12);\n            \n\
    \            LocalDate startDate11 = LocalDate.parse(dateFormat.parse(date).format(endDate9));\n\
    \            LocalDate endDate11 = startDate11.plusMonths(12);\n            \n\
    \            LocalDate startDate12 = LocalDate.parse(dateFormat.parse(date).format(endDate10));\n\
    \            LocalDate endDate12 = startDate12.plusMonths(12);\n            \n\
    \            LocalDate startDate13 = LocalDate.parse(dateFormat.parse(date).format(endDate11));\n\
    \            LocalDate endDate13 = startDate13.plusMonths(12);\n            \n\
    \            LocalDate startDate14\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps2yybig0.java:74: error: ';' expected\n            LocalDate startDate14\n\
    \                                 ^\n/tmp/tmps2yybig0.java:27: error: 'try' without\
    \ 'catch', 'finally' or resource declarations\n        try{\n        ^\n/tmp/tmps2yybig0.java:76:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.equals(\"\")) return false;\n\
    \        int [] dateInt = date.split(\"-\");\n        int numDays = dateInt[2]\
    \ + 1900;\n        if (numDays < 1 || numDays > 31) return false;\n        if\
    \ (numDays < 1 || numDays > 30) return false;\n        int month = dateInt[1];\n\
    \        if (month < 1 || month > 12) return false;\n        int year = dateInt[0];\n\
    \        int d = Integer.parseInt(date);\n        if (d > 31) return false;\n\
    \        if (d < 1) return false;\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbugyj5nk.java:28: error: incompatible types: String[] cannot be\
    \ converted to int[]\n        int [] dateInt = date.split(\"-\");\n          \
    \                         ^\n1 error\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Complete the code here\n      \
    \  boolean valid = false;\n        try {\n            DateTimeFormatter formatter\
    \ = new DateTimeFormatterBuilder()\n            .appendPattern(\"dd-MM-yyyy\"\
    )\n            .toFormatter(Locale.ENGLISH);\n            LocalDate date = LocalDate.parse(date,\
    \ formatter);\n            valid = true;\n        }\n        catch(DateTimeParseException\
    \ exception) {\n            valid = false;\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi6o2l0d6.java:30: error: cannot find symbol\n            DateTimeFormatter\
    \ formatter = new DateTimeFormatterBuilder()\n            ^\n  symbol:   class\
    \ DateTimeFormatter\n  location: class Problem\n/tmp/tmpi6o2l0d6.java:30: error:\
    \ cannot find symbol\n            DateTimeFormatter formatter = new DateTimeFormatterBuilder()\n\
    \                                              ^\n  symbol:   class DateTimeFormatterBuilder\n\
    \  location: class Problem\n/tmp/tmpi6o2l0d6.java:33: error: cannot find symbol\n\
    \            LocalDate date = LocalDate.parse(date, formatter);\n            ^\n\
    \  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmpi6o2l0d6.java:33:\
    \ error: variable date is already defined in method validDate(String)\n      \
    \      LocalDate date = LocalDate.parse(date, formatter);\n                  \
    \    ^\n/tmp/tmpi6o2l0d6.java:33: error: cannot find symbol\n            LocalDate\
    \ date = LocalDate.parse(date, formatter);\n                             ^\n \
    \ symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmpi6o2l0d6.java:36:\
    \ error: cannot find symbol\n        catch(DateTimeParseException exception) {\n\
    \              ^\n  symbol:   class DateTimeParseException\n  location: class\
    \ Problem\n6 errors\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean isValid = false;\n\n     \
    \   String datePattern = \"^(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$\"\
    ;\n        SimpleDateFormat df = new SimpleDateFormat(datePattern);\n\n      \
    \  try {\n            Date myDate = df.parse(date);\n            isValid = true;\n\
    \        } catch (Exception e) {\n            isValid = false;\n        }\n\n\
    \        return isValid;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0sy_kx33.java:30: error: cannot find symbol\n        SimpleDateFormat\
    \ df = new SimpleDateFormat(datePattern);\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmp0sy_kx33.java:30: error: cannot find symbol\n\
    \        SimpleDateFormat df = new SimpleDateFormat(datePattern);\n          \
    \                        ^\n  symbol:   class SimpleDateFormat\n  location: class\
    \ Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if(!date.equals(\"\")){\n        \
    \    DateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n            try{\n\
    \                Date d = sdf.parse(date);\n                Calendar cal = Calendar.getInstance();\n\
    \                cal.setTime(d);\n                int month = cal.get(Calendar.MONTH);\n\
    \                int days = cal.get(Calendar.DAY_OF_MONTH);\n                int\
    \ year = cal.get(Calendar.YEAR);\n                if((month < 1 || month > 12)\
    \ || (days < 1 || days > 31) || (days > 29)){\n                    return false;\n\
    \                }\n                return (year > 0 && month > 0 && days > 0);\n\
    \            }catch (ParseException e){\n                return false;\n     \
    \       }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfhtcw4na.java:28: error: cannot find symbol\n            DateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:   class\
    \ DateFormat\n  location: class Problem\n/tmp/tmpfhtcw4na.java:28: error: cannot\
    \ find symbol\n            DateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\"\
    );\n                                 ^\n  symbol:   class SimpleDateFormat\n \
    \ location: class Problem\n/tmp/tmpfhtcw4na.java:40: error: cannot find symbol\n\
    \            }catch (ParseException e){\n                    ^\n  symbol:   class\
    \ ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        try {\n            DateFormat formatter\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\");\n            Date date1 = formatter.parse(date);\n\
    \        } catch (ParseException e) {\n            e.printStackTrace();\n    \
    \        return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp60miq177.java:28: error: cannot find symbol\n            DateFormat\
    \ formatter = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:\
    \   class DateFormat\n  location: class Problem\n/tmp/tmp60miq177.java:28: error:\
    \ cannot find symbol\n            DateFormat formatter = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                       ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmp60miq177.java:30: error: cannot find symbol\n\
    \        } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        boolean\
    \ valid = false;\n        String []dateParts = date.split(\"-\");\n        valid\
    \ = dateParts[0] != null && !dateParts[0].isEmpty() &&\n        dateParts[1].matches(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$\") &&\n        dateParts[2].matches(\"\
    ^(0[1-9]|[12]\\d|3[01])/(0[1-9]|1[0-2])-\\d{4}$\") &&\n        dateParts.length\
    \ == 3 &&\n        dateParts[0].length == 2 &&\n        dateParts[1].length ==\
    \ 2 &&\n        dateParts[2].length == 4 ;\n\n        return valid;\n\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph503iuqn.java:31: error: illegal escape character\n        dateParts[1].matches(\"\
    ^(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01])$\") &&\n                             \
    \                               ^\n/tmp/tmph503iuqn.java:32: error: illegal escape\
    \ character\n        dateParts[2].matches(\"^(0[1-9]|[12]\\d|3[01])/(0[1-9]|1[0-2])-\\\
    d{4}$\") &&\n                                            ^\n/tmp/tmph503iuqn.java:32:\
    \ error: illegal escape character\n        dateParts[2].matches(\"^(0[1-9]|[12]\\\
    d|3[01])/(0[1-9]|1[0-2])-\\d{4}$\") &&\n                                     \
    \                                 ^\n/tmp/tmph503iuqn.java:35: error: not a statement\n\
    \        dateParts[1].length == 2 &&\n                                 ^\n4 errors\n"
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean isValid = false;\n       \
    \ String dateString = date;\n        int days = 0;\n        int months = 0;\n\
    \        int year = 0;\n        String[] monthStrings = {\"01\", \"03\", \"05\"\
    , \"07\", \"08\", \"10\", \"12\"};\n        String[] dayStrings = {\"01\", \"\
    03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"15\", \"18\", \"21\", \"23\",\
    \ \"25\", \"29\", \"31\", \"32\", \"33\", \"35\", \"36\", \"37\", \"38\", \"39\"\
    , \"40\", \"41\", \"42\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\"\
    , \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\"\
    , \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\"\
    , \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\"\
    , \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\"\
    , \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\"\
    , \"101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\"\
    , \"119\", \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\"\
    , \"128\", \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\"\
    , \"137\", \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\"\
    , \"146\", \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\"\
    , \"155\", \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\"\
    , \"164\", \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\"\
    , \"173\", \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\"\
    , \"182\", \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\"\
    , \"191\", \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\"\
    , \"200\", \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\"\
    , \"209\", \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\"\
    , \"218\", \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\"\
    , \"227\", \"228\", \"229\", \"230\", \"231\", \"232\", \"233\", \"234\", \"235\"\
    , \"236\", \"237\", \"238\", \"239\", \"240\", \"241\", \"242\", \"243\", \"244\"\
    , \"245\", \"246\", \"247\", \"248\", \"249\", \"250\", \"251\", \"252\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo8ywf1qh.java:33: error: unclosed string literal\n        String[]\
    \ dayStrings = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"15\"\
    , \"18\", \"21\", \"23\", \"25\", \"29\", \"31\", \"32\", \"33\", \"35\", \"36\"\
    , \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"44\", \"45\", \"46\", \"47\"\
    , \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\", \"56\", \"57\"\
    , \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\", \"66\", \"67\"\
    , \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\", \"76\", \"77\"\
    , \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\", \"86\", \"87\"\
    , \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\", \"96\", \"97\"\
    , \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\", \"105\", \"106\"\
    , \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\", \"114\", \"115\"\
    , \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\", \"123\", \"124\"\
    , \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\", \"132\", \"133\"\
    , \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\", \"141\", \"142\"\
    , \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\", \"150\", \"151\"\
    , \"152\", \"153\", \"154\", \"155\", \"156\", \"157\", \"158\", \"159\", \"160\"\
    , \"161\", \"162\", \"163\", \"164\", \"165\", \"166\", \"167\", \"168\", \"169\"\
    , \"170\", \"171\", \"172\", \"173\", \"174\", \"175\", \"176\", \"177\", \"178\"\
    , \"179\", \"180\", \"181\", \"182\", \"183\", \"184\", \"185\", \"186\", \"187\"\
    , \"188\", \"189\", \"190\", \"191\", \"192\", \"193\", \"194\", \"195\", \"196\"\
    , \"197\", \"198\", \"199\", \"200\", \"201\", \"202\", \"203\", \"204\", \"205\"\
    , \"206\", \"207\", \"208\", \"209\", \"210\", \"211\", \"212\", \"213\", \"214\"\
    , \"215\", \"216\", \"217\", \"218\", \"219\", \"220\", \"221\", \"222\", \"223\"\
    , \"224\", \"225\", \"226\", \"227\", \"228\", \"229\", \"230\", \"231\", \"232\"\
    , \"233\", \"234\", \"235\", \"236\", \"237\", \"238\", \"239\", \"240\", \"241\"\
    , \"242\", \"243\", \"244\", \"245\", \"246\", \"247\", \"248\", \"249\", \"250\"\
    , \"251\", \"252\n                                                           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                "
  stdout: ''
  timestamp: 1660011778
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6akjl3hb.java:31)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n       // Your code here!\n       String pattern\
    \ = \"MM-dd-yyyy\";\n       SimpleDateFormat df = new SimpleDateFormat(pattern);\n\
    \       Date dateToCheck = df.parse(date);\n       Calendar c = Calendar.getInstance();\n\
    \       c.setTime(dateToCheck);\n       int month1 = c.get(Calendar.MONTH);\n\
    \       if (month1 == 0){\n           return (c.get(Calendar.YEAR) < 2000);\n\
    \       }\n       int year1 = c.get(Calendar.YEAR);\n       int month2 = month1\
    \ + 1;\n       int day1 = c.get(Calendar.DAY_OF_MONTH);\n       if (month2 ==\
    \ 13){\n           month2 = 1;\n           year1++;\n       }\n       int day2\
    \ = c.get(Calendar.DAY_OF_MONTH);\n       if (day1 == 0){\n           day1 = 1;\n\
    \       }\n       if (month2 == 12){\n           month1 = 1;\n           year1--;\n\
    \       }\n       int year2 = year1;\n       if (month2 == 1){\n           month2\
    \ = 2;\n           year2--;\n       }\n       if (month2 > 12){\n           month2\
    \ = month2 - 12;\n           year2--;\n       }\n       if (year1 < 2000){\n \
    \          return (c.get(Calendar.YEAR) < 2000);\n       }\n       int daysInMonth\
    \ = day2 - day1;\n       if (day1 > daysInMonth){\n           return (day1 > daysInMonth);\n\
    \       }\n       return (day1 < daysInMonth);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjld9fhzv.java:29: error: cannot find symbol\n       SimpleDateFormat\
    \ df = new SimpleDateFormat(pattern);\n       ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpjld9fhzv.java:29: error: cannot find symbol\n\
    \       SimpleDateFormat df = new SimpleDateFormat(pattern);\n               \
    \                  ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return ((date != null) && (date.length()\
    \ > 0)) &&\n                (((date.split(\"-\")[1].length() > 1) && (date.split(\"\
    -\")[1].length() < 3)) &&\n                 ((date.split(\"-\")[2].length() >\
    \ 2) && (date.split(\"-\")[2].length() < 5)) &&\n                 ((date.split(\"\
    -\")[0].length() > 1) && (date.split(\"-\")[0].length() < 7)) &&\n           \
    \      ((date.split(\"-\")[0].split(\"-\")[0].length() > 2) && (date.split(\"\
    -\")[0].split(\"-\")[0].length() < 12)) &&\n                 ((date.split(\"-\"\
    )[0].split(\"-\")[0].split(\"-\")[0].length() > 1) && (date.split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].length() < 32)) &&\n                 ((date.split(\"-\"\
    )[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].length() > 2) && (date.split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].length() < 52)) &&\n \
    \                ((date.split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].length() > 3) && (date.split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].length() < 63))) &&\n                \
    \ ((date.split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].length() > 2) && (date.split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].length() < 52)) &&\n                 ((date.split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].length() > 3) && (date.split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].length() < 63))) &&\n                 ((date.split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].length() > 3) && (date.split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].length() < 63))) &&\n                \
    \ ((date.split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].length() > 3) && (date.split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].length() < 63)));\n  \
    \  }\n    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprnvzz5bh.java:36: error: ';' expected\n                 ((date.split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].length() > 3) && (date.split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].length() < 63))) &&\n                                \
    \                                                                            \
    \                                                                            \
    \                                ^\n/tmp/tmprnvzz5bh.java:37: error: not a statement\n\
    \                 ((date.split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].length() > 3) && (date.split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].length()\
    \ < 63))) &&\n                                                               \
    \                                                                    ^\n/tmp/tmprnvzz5bh.java:37:\
    \ error: ';' expected\n                 ((date.split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].length()\
    \ > 3) && (date.split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].length() < 63))) &&\n                                                \
    \                                                                            \
    \          ^\n/tmp/tmprnvzz5bh.java:37: error: not a statement\n             \
    \    ((date.split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].length() > 3) && (date.split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].length() < 63))) &&\n\
    \                                                                            \
    \                                                                            \
    \                                                                        ^\n/tmp/tmprnvzz5bh.java:37:\
    \ error: ';' expected\n                 ((date.split(\"-\")[0].split(\"-\")[0].split(\"\
    -\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].split(\"-\")[0].length()\
    \ > 3) && (date.split(\"-\")[0].split(\"-\")[0]."
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        date = date.trim();\n        return\
    \ !(date.isEmpty() || date.matches(\"^\\\\s*$\") || (date.matches(\"^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$\"\
    ) && date.matches(\"^((0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|[12][0-9]|30)$\"\
    ) && date.matches(\"^((0?[13578]|1[02])-(0?[1-9]|[12][0-9]|30)-(0?[1-9]|[12][0-9]|3[01])(T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(:([0-5][0-9]))?(Z|([-+]([01][0-9]|2[0-3]):([0-5][0-9]))?)?)?$\"\
    )) ? false : true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4fqx18t6.java:28: error: ')' expected\n        return !(date.isEmpty()\
    \ || date.matches(\"^\\\\s*$\") || (date.matches(\"^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$\"\
    ) && date.matches(\"^((0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-(0?[1-9]|[12][0-9]|30)$\"\
    ) && date.matches(\"^((0?[13578]|1[02])-(0?[1-9]|[12][0-9]|30)-(0?[1-9]|[12][0-9]|3[01])(T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9])(:([0-5][0-9]))?(Z|([-+]([01][0-9]|2[0-3]):([0-5][0-9]))?)?)?$\"\
    )) ? false : true;\n                                                         \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n        try{\n            Date d = sdf.parse(date);\n        \
    \    return true;\n        } catch (ParseException e){\n            return false;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9j7sn6k_.java:27: error: cannot find symbol\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmp9j7sn6k_.java:27: error: cannot find symbol\n\
    \        SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n      \
    \                             ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmp9j7sn6k_.java:31: error: cannot find symbol\n       \
    \ } catch (ParseException e){\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.trim().isEmpty())\n\
    \            return false;\n\n        String[] days = { \"0\",\"1\",\"2\",\"3\"\
    ,\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\" };\n        int[] months\
    \ = {1,2,3,4,5,6,7,8,9,10,11,12};\n        String[] tempDateArray = date.split(\"\
    -\");\n        int month = Integer.parseInt(tempDateArray[0]);\n        int day\
    \ = Integer.parseInt(tempDateArray[1]);\n        int year = Integer.parseInt(tempDateArray[2]);\n\
    \        if (day < 1 || day > 31) {\n            return false;\n        }\n  \
    \      if (month < 1 || month > 12) {\n            return false;\n        }\n\
    \        for (int i=0; i<months.length; i++) {\n            if (months[i] > month)\
    \ {\n                return false;\n            }\n        }\n\n        if (month\
    \ == 2) {\n            if (day < 1 || day > 30) {\n                return false;\n\
    \            }\n        }\n        else {\n            if (day < 1 || day > 29)\
    \ {\n                return false;\n            }\n        }\n\n        if (year\
    \ < 1000 || year > 3000) {\n            return false;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt77uubw_.java:65)\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        \n        return isNotEmpty(date)\
    \ && validateMonth(date) && validateDate(date);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpikwlw4kc.java:28: error: cannot find symbol\n        return isNotEmpty(date)\
    \ && validateMonth(date) && validateDate(date);\n               ^\n  symbol: \
    \  method isNotEmpty(String)\n  location: class Problem\n/tmp/tmpikwlw4kc.java:28:\
    \ error: cannot find symbol\n        return isNotEmpty(date) && validateMonth(date)\
    \ && validateDate(date);\n                                   ^\n  symbol:   method\
    \ validateMonth(String)\n  location: class Problem\n/tmp/tmpikwlw4kc.java:28:\
    \ error: cannot find symbol\n        return isNotEmpty(date) && validateMonth(date)\
    \ && validateDate(date);\n                                                   \
    \       ^\n  symbol:   method validateDate(String)\n  location: class Problem\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2wfrwka6.java:32)\n"
  stdout: ''
  timestamp: 1660011572
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() == 0) {\n      \
    \      return false;\n        }\n        String[] dateParts = date.split(\"-\"\
    );\n        if (dateParts.length != 3) {\n            return false;\n        }\n\
    \        Calendar cal = Calendar.getInstance();\n        cal.setTime(new SimpleDateFormat(\"\
    MM-dd-yyyy\").parse(date));\n        if (cal.get(Calendar.YEAR) < 1 || cal.get(Calendar.YEAR)\
    \ > 2020) {\n            return false;\n        }\n        boolean isLeapYear\
    \ = cal.get(Calendar.DAY_OF_YEAR) < 366 || cal.get(Calendar.DAY_OF_YEAR) > 365;\n\
    \        switch (dateParts[1]) {\n            case \"1\":\n                switch\
    \ (dateParts[2]) {\n                    case \"1\":\n                        return\
    \ !isLeapYear;\n                    case \"3\":\n                        return\
    \ !isLeapYear;\n                    case \"5\":\n                        return\
    \ !isLeapYear;\n                    case \"7\":\n                        return\
    \ !isLeapYear;\n                    case \"8\":\n                        return\
    \ !isLeapYear;\n                    case \"10\":\n                        return\
    \ !isLeapYear;\n                    case \"12\":\n                        return\
    \ !isLeapYear;\n                }\n                break;\n            case \"\
    2\":\n                switch (dateParts[2]) {\n                    case \"4\"\
    :\n                        return !isLeapYear;\n                    case \"6\"\
    :\n                        return !isLeapYear;\n                    case \"9\"\
    :\n                        return !isLeapYear;\n                    case \"11\"\
    :\n                        return !isLeapYear;\n                }\n          \
    \      break;\n            case \"3\":\n                switch (dateParts[2])\
    \ {\n                    case \"1\":\n                        return !isLeapYear;\n\
    \                    case \"3\":\n                        return !isLeapYear;\n\
    \                    case \"5\":\n                        return !isLeapYear;\n\
    \                    case \"7\":\n                        return !isLeapYear;\n\
    \                    case \"8\":\n                        return !isLeapYear;\n\
    \                    case \"10\":\n                        return !isLeapYear;\n\
    \                    case \"12\":\n                        return !isLeapYear;\n\
    \                }\n                break;\n            case \"4\":\n        \
    \        switch (dateParts[2]) {\n                    case \"0\":\n          \
    \              return !isLeapYear;\n                    case \"1\":\n        \
    \                return !isLeapYear;\n                    case \"2\":\n      \
    \                  return !isLeapYear;\n                    case \"4\":\n    \
    \                    return !isLeapYear;\n                    case \"6\":\n  \
    \                      return !isLeapYear;\n                    case \"8\":\n\
    \                        return !isLeapYear;\n                    case \"10\"\
    :\n                        return !isLeapYear;\n                    case \"12\"\
    :\n                        return !isLeapYear;\n                }\n          \
    \      break;\n            case \"5\":\n                switch (dateParts[2])\
    \ {\n                    case \"0\":\n                        return !isLeapYear;\n\
    \                    case \"1\":\n                        return !isLeapYear;\n\
    \                    case \"2\":\n                        return !\n    }\n  \
    \  public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl6oz0t0k.java:117: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmpl6oz0t0k.java:118: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n/tmp/tmpl6oz0t0k.java:118: error:\
    \ case, default, or '}' expected\n    public static void main(String[] args) {\n\
    \           ^\n/tmp/tmpl6oz0t0k.java:118: error: case, default, or '}' expected\n\
    \    public static void main(String[] args) {\n                  ^\n/tmp/tmpl6oz0t0k.java:118:\
    \ error: case, default, or '}' expected\n    public static void main(String[]\
    \ args) {\n                       ^\n/tmp/tmpl6oz0t0k.java:118: error: case, default,\
    \ or '}' expected\n    public static void main(String[] args) {\n            \
    \               ^\n/tmp/tmpl6oz0t0k.java:118: error: case, default, or '}' expected\n\
    \    public static void main(String[] args) {\n                            ^\n\
    /tmp/tmpl6oz0t0k.java:118: error: case, default, or '}' expected\n    public static\
    \ void main(String[] args) {\n                                  ^\n/tmp/tmpl6oz0t0k.java:118:\
    \ error: case, default, or '}' expected\n    public static void main(String[]\
    \ args) {\n                                   ^\n/tmp/tmpl6oz0t0k.java:118: error:\
    \ case, default, or '}' expected\n    public static void main(String[] args) {\n\
    \                                     ^\n/tmp/tmpl6oz0t0k.java:118: error: case,\
    \ default, or '}' expected\n    public static void main(String[] args) {\n   \
    \                                      ^\n/tmp/tmpl6oz0t0k.java:118: error: case,\
    \ default, or '}' expected\n    public static void main(String[] args) {\n   \
    \                                        ^\n/tmp/tmpl6oz0t0k.java:119: error:\
    \ case, default, or '}' expected\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    ^\n/tmp/tmpl6oz0t0k.java:119: error: case, default, or '}' expected\n   \
    \ assert(validDate((\"03-11-2000\")) == (true));\n          ^\n/tmp/tmpl6oz0t0k.java:119:\
    \ error: case, default, or '}' expected\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n           ^\n/tmp/tmpl6oz0t0k.java:119: error: case, default,\
    \ or '}' expected\n    as"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n        Date date1 = sdf.parse(date);\n        return !(date ==\
    \ null || date1.equals(null));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp274ej7yv.java:27: error: cannot find symbol\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmp274ej7yv.java:27: error: cannot find symbol\n\
    \        SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n      \
    \                             ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        Calendar\
    \ calendar = Calendar.getInstance();\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n        try {\n            Date parsedDate = format.parse(date);\n\
    \            calendar.setTime(parsedDate);\n            calendar.getTime();\n\
    \            valid = true;\n        } catch (ParseException e) {\n           \
    \ e.printStackTrace();\n        }\n        return valid;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwx6t9zv8.java:29: error: cannot find symbol\n        SimpleDateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpwx6t9zv8.java:29: error:\
    \ cannot find symbol\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                      ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpwx6t9zv8.java:35: error: cannot find symbol\n\
    \        } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean validDate = false;\n     \
    \   if (date != null && !(date.length() == 0)) {\n            String[] dateArray\
    \ = date.split(\"-\");\n            if (dateArray.length != 3) {\n           \
    \     throw new IllegalArgumentException(\"Invalid date format\");\n         \
    \   }\n            if (dateArray[2].length() < 1 || dateArray[2].length() > 10)\
    \ {\n                throw new IllegalArgumentException(\"Invalid date format\"\
    );\n            }\n            if (dateArray[0].length() < 1 || dateArray[0].length()\
    \ > 2) {\n                throw new IllegalArgumentException(\"Invalid date format\"\
    );\n            }\n            int daysInMonths[] = {31, 28, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31};\n            int daysInYear;\n            int month;\n\
    \            int year;\n            try {\n                year = Integer.parseInt(dateArray[0]);\n\
    \                month = Integer.parseInt(dateArray[1]);\n                daysInYear\
    \ = daysInMonths[month - 1];\n            } catch (NumberFormatException e) {\n\
    \                return false;\n            }\n            if (month == 2) {\n\
    \                if (year % 400 == 0 || (year % 4 == 0 && year % 100 != 0)) {\n\
    \                    daysInYear++;\n                }\n            } else if (month\
    \ < 1 || month > 12) {\n                return false;\n            }\n       \
    \     if (month == 1) {\n                daysInMonths[month - 1] = daysInMonths[month\
    \ - 1] + 31;\n            }\n            int days = daysInYear + Integer.parseInt(dateArray[2]);\n\
    \            if (days < 1 || days > 31) {\n                return false;\n   \
    \         }\n            try {\n                SimpleDateFormat simpleDateFormat\
    \ = new SimpleDateFormat(\"MM/dd/yyyy\");\n                Date date = simpleDateFormat.parse(dateArray[0]\
    \ + \" \" + dateArray[1]);\n                validDate = (date.after(new Date())\
    \ && (daysInMonths[month - 1] == days));\n            } catch (ParseException\
    \ e) {\n                return false;\n            }\n        }\n        return\
    \ validDate;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp57n1c5_5.java:65: error: cannot find symbol\n                SimpleDateFormat\
    \ simpleDateFormat = new SimpleDateFormat(\"MM/dd/yyyy\");\n                ^\n\
    \  symbol:   class SimpleDateFormat\n  location: class Problem\n/tmp/tmp57n1c5_5.java:65:\
    \ error: cannot find symbol\n                SimpleDateFormat simpleDateFormat\
    \ = new SimpleDateFormat(\"MM/dd/yyyy\");\n                                  \
    \                      ^\n  symbol:   class SimpleDateFormat\n  location: class\
    \ Problem\n/tmp/tmp57n1c5_5.java:66: error: variable date is already defined in\
    \ method validDate(String)\n                Date date = simpleDateFormat.parse(dateArray[0]\
    \ + \" \" + dateArray[1]);\n                     ^\n/tmp/tmp57n1c5_5.java:68:\
    \ error: cannot find symbol\n            } catch (ParseException e) {\n      \
    \               ^\n  symbol:   class ParseException\n  location: class Problem\n\
    4 errors\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        SimpleDateFormat dateFormat = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\");\n        try {\n            Date d = dateFormat.parse(date);\n\
    \            int month = d.getMonth();\n            int day = d.getDate();\n \
    \           int year = d.getYear();\n            int numberOfDays = monthDays(year,\
    \ month) + day;\n            if (numberOfDays <= 0 || numberOfDays > 31) {\n \
    \               return false;\n            }\n            if (numberOfDays <=\
    \ 0 || numberOfDays > 30) {\n                return false;\n            }\n  \
    \          if (numberOfDays <= 0 || numberOfDays > 29) {\n                return\
    \ false;\n            }\n            if (month < 1 || month > 12) {\n        \
    \        return false;\n            }\n            return true;\n        } catch\
    \ (Exception e) {\n            System.out.println(\"Invalid Date\");\n       \
    \     return false;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2r0h0lj1.java:27: error: cannot find symbol\n        SimpleDateFormat\
    \ dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmp2r0h0lj1.java:27: error:\
    \ cannot find symbol\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                          ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmp2r0h0lj1.java:33: error:\
    \ cannot find symbol\n            int numberOfDays = monthDays(year, month) +\
    \ day;\n                               ^\n  symbol:   method monthDays(int,int)\n\
    \  location: class Problem\nNote: /tmp/tmp2r0h0lj1.java uses or overrides a deprecated\
    \ API.\nNote: Recompile with -Xlint:deprecation for details.\n3 errors\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // TODO: Write your validation logic\
    \ here.\n        return !\"\".equals(date) && !\"0\".equals(date) && !\"1\".equals(date)\
    \ &&\n            \"1\".equals(date) && !\"2\".equals(date) && !\"3\".equals(date)\
    \ &&\n            \"3\".equals(date) && !\"4\".equals(date) && !\"5\".equals(date)\
    \ &&\n            \"5\".equals(date) && !\"6\".equals(date) && !\"7\".equals(date)\
    \ &&\n            \"7\".equals(date) && !\"8\".equals(date) && !\"9\".equals(date)\
    \ &&\n            \"9\".equals(date) && !\"10\".equals(date) && !\"11\".equals(date)\
    \ &&\n            \"11\".equals(date) && !\"12\".equals(date) &&\n           \
    \ \"12\".equals(date) && date.matches(\"(\\\\d{2})-(\\\\d{2})-(\\\\d{4})\");\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp04suo745.java:38)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Solution code goes here.\n    \
    \    boolean validate = true;\n        SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n        try {\n            Date d = sdf.parse(date);\n       \
    \     \n            int days = d.getDate();\n            int month = d.getMonth();\n\
    \            int year = d.getYear();\n            int monthLength = Calendar.getInstance().get(Calendar.MONTH);\n\
    \            int dayLength = Calendar.getInstance().get(Calendar.DAY_OF_MONTH);\n\
    \            int yearLength = Calendar.getInstance().get(Calendar.YEAR);\n   \
    \         \n            \n            if (days > 31 || (month==monthLength &&\
    \ days >30) || (month==2 && days >29) || yearLength != year) {\n             \
    \   validate = false;\n            }\n            \n            if(validate) {\n\
    \                System.out.println(\"Date is valid\");\n            }\n     \
    \       \n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n\
    \        }\n        return validate;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnqdg30yd.java:29: error: cannot find symbol\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpnqdg30yd.java:29: error: cannot find symbol\n\
    \        SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n      \
    \                             ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\nNote: /tmp/tmpnqdg30yd.java uses or overrides a deprecated API.\n\
    Note: Recompile with -Xlint:deprecation for details.\n2 errors\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Solution code goes here\n     \
    \   return null;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3l4u9o87.java:28: error: incompatible types: <null> cannot be converted\
    \ to boolean\n        return null;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        LocalDate date = LocalDate.parse(date);\n\
    \        if(date.isAfter(LocalDate.MIN) && date.isBefore(LocalDate.MAX)){\n  \
    \          return true;\n        }else{\n            return false;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1tfix8r8.java:27: error: cannot find symbol\n        LocalDate\
    \ date = LocalDate.parse(date);\n        ^\n  symbol:   class LocalDate\n  location:\
    \ class Problem\n/tmp/tmp1tfix8r8.java:27: error: variable date is already defined\
    \ in method validDate(String)\n        LocalDate date = LocalDate.parse(date);\n\
    \                  ^\n/tmp/tmp1tfix8r8.java:27: error: cannot find symbol\n  \
    \      LocalDate date = LocalDate.parse(date);\n                         ^\n \
    \ symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmp1tfix8r8.java:28:\
    \ error: cannot find symbol\n        if(date.isAfter(LocalDate.MIN) && date.isBefore(LocalDate.MAX)){\n\
    \                        ^\n  symbol:   variable LocalDate\n  location: class\
    \ Problem\n/tmp/tmp1tfix8r8.java:28: error: cannot find symbol\n        if(date.isAfter(LocalDate.MIN)\
    \ && date.isBefore(LocalDate.MAX)){\n                                        \
    \                ^\n  symbol:   variable LocalDate\n  location: class Problem\n\
    5 errors\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Implement this function yourself\n\
    \        if (date.isEmpty()) {\n            return false;\n        } else {\n\
    \            if (date.split(\"-\")[2].length() < 1 || date.split(\"-\")[2].length()\
    \ > 12) {\n                return false;\n            }\n            if (date.split(\"\
    -\")[1].length() < 1 || date.split(\"-\")[1].length() > 3) {\n               \
    \ return false;\n            }\n            if (date.split(\"-\")[0].split(\"\
    -\")[1] < 1 || date.split(\"-\")[0].split(\"-\")[1] > 12) {\n                return\
    \ false;\n            }\n            return true;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc94spxrz.java:37: error: bad operand types for binary operator\
    \ '<'\n            if (date.split(\"-\")[0].split(\"-\")[1] < 1 || date.split(\"\
    -\")[0].split(\"-\")[1] > 12) {\n                                            \
    \     ^\n  first type:  String\n  second type: int\n/tmp/tmpc94spxrz.java:37:\
    \ error: bad operand types for binary operator '>'\n            if (date.split(\"\
    -\")[0].split(\"-\")[1] < 1 || date.split(\"-\")[0].split(\"-\")[1] > 12) {\n\
    \                                                                            \
    \             ^\n  first type:  String\n  second type: int\n2 errors\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        Date validDate = new Date(date);\n\
    \        if (date != null && !date.isEmpty() && validDate.after(new Date(System.currentTimeMillis())))\
    \ {\n            // date format mm/dd/yyyy\n            SimpleDateFormat formatter\
    \ = new SimpleDateFormat(\"MM/dd/yyyy\");\n            try {\n               \
    \ Date convertedDate = formatter.parse(date);\n                if (convertedDate.after(validDate))\
    \ {\n                    return true;\n                }\n            } catch\
    \ (Exception e) {\n                // e.printStackTrace();\n            }\n  \
    \      }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpntlubeyu.java:30: error: cannot find symbol\n            SimpleDateFormat\
    \ formatter = new SimpleDateFormat(\"MM/dd/yyyy\");\n            ^\n  symbol:\
    \   class SimpleDateFormat\n  location: class Problem\n/tmp/tmpntlubeyu.java:30:\
    \ error: cannot find symbol\n            SimpleDateFormat formatter = new SimpleDateFormat(\"\
    MM/dd/yyyy\");\n                                             ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\nNote: /tmp/tmpntlubeyu.java uses\
    \ or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for\
    \ details.\n2 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        //Write the code here\n        try{\n\
    \            if(date.length() == 0 || date.indexOf(\"-\") == -1){\n          \
    \      return false;\n            }\n            String[] dates = date.split(\"\
    -\");\n            if(dates.length == 2){\n                String date1[] = dates[0].split(\"\
    /\");\n                String date2[] = dates[1].split(\"/\");\n             \
    \   String months[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"\
    };\n                int day = Integer.valueOf(date1[0]);\n                int\
    \ month = Integer.valueOf(date1[1]) - 1;\n                int year = Integer.valueOf(date2[0]);\n\
    \                if(day<1 || day>31){\n                    return false;\n   \
    \             }else if(month<1 || month>12){\n                    return false;\n\
    \                }else if(year<2000 || year>2040) {\n                    return\
    \ false;\n                }\n                for(int i=0; i<12; i++){\n      \
    \              int month1 = months[i];\n                    int day1 = Integer.parseInt(date1[i]);\n\
    \                    int year1 = Integer.parseInt(date2[i]);\n               \
    \     int day2 = day+((i%4 == 0)?30:29);\n                    int month2 = month1+((i%2==0)?0:1);\n\
    \                    if(month1<1 || month1>12){\n                        return\
    \ false;\n                    }else if(day1<1 || day1>31){\n                 \
    \       return false;\n                    }else if(month2<1 || month2>12){\n\
    \                        return false;\n                    }else if(day2<1 ||\
    \ day2>31){\n                        return false;\n                    }else\
    \ if(month1 == month2 && day1 == day2){\n                        return true;\n\
    \                    }\n                }\n            }else{\n              \
    \  return false;\n            }\n        }catch(Exception e){\n            e.printStackTrace();\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjbox0_6b.java:48: error: incompatible types: String cannot be converted\
    \ to int\n                    int month1 = months[i];\n                      \
    \                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        int day;\n        int month;\n   \
    \     int year;\n        String[] tokens;\n        int daysInMonth[] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int daysInMonthLeap[] = {31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        DateFormat df = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n        df.setLenient(false);\n        try {\n            Date\
    \ d = df.parse(date);\n            Calendar c = Calendar.getInstance();\n    \
    \        c.setTime(d);\n            day = c.get(Calendar.DAY_OF_MONTH);\n    \
    \        month = c.get(Calendar.MONTH);\n            year = c.get(Calendar.YEAR);\n\
    \        } catch (ParseException e) {\n            System.out.println(\"The date\
    \ string is not valid !\");\n            e.printStackTrace();\n            return\
    \ false;\n        }\n        if (tokens.length != 3) {\n            System.out.println(\"\
    The date string is not valid !\");\n            return false;\n        }\n   \
    \     if (month <= 0 || month > 12) {\n            System.out.println(\"The date\
    \ string is not valid !\");\n            return false;\n        }\n        if\
    \ (day <= 0 || day > daysInMonth[month]) {\n            System.out.println(\"\
    The date string is not valid !\");\n            return false;\n        }\n   \
    \     if (month == 2 && year % 400 == 0 || (month == 2 && (year % 4 == 0 && year\
    \ % 100 != 0)) || (month == 4 && year % 4 == 0)) {\n            if (day > daysInMonthLeap[month])\
    \ {\n                System.out.println(\"The date string is not valid !\");\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdtd6mipq.java:33: error: cannot find symbol\n        DateFormat\
    \ df = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class DateFormat\n\
    \  location: class Problem\n/tmp/tmpdtd6mipq.java:33: error: cannot find symbol\n\
    \        DateFormat df = new SimpleDateFormat(\"MM-dd-yyyy\");\n             \
    \               ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n\
    /tmp/tmpdtd6mipq.java:42: error: cannot find symbol\n        } catch (ParseException\
    \ e) {\n                 ^\n  symbol:   class ParseException\n  location: class\
    \ Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n\n        // Convert date String to\
    \ a Date object\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"\
    mm-dd-yyyy\");\n        Date dateObj = dateFormat.parse(date);\n\n        // Convert\
    \ Date object to an int\n        int dateInt = dateObj.getDate();\n\n        //\
    \ Check validity of the date string\n        int yearInt = dateObj.getYear();\n\
    \        int monthInt = dateObj.getMonth();\n        int dayInt = dateObj.getDay();\n\
    \n        // If all the checks are passed then the date string is valid\n    \
    \    if ((dateInt > 0) || (dayInt > 31) || (monthInt > 12) || (yearInt < 1 ||\
    \ yearInt > 2040) || (monthInt < 1 || monthInt > 12)) {\n            return false;\n\
    \        }\n\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp82n0mfiz.java:32: error: cannot find symbol\n        SimpleDateFormat\
    \ dateFormat = new SimpleDateFormat(\"mm-dd-yyyy\");\n        ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmp82n0mfiz.java:32: error:\
    \ cannot find symbol\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"\
    mm-dd-yyyy\");\n                                          ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\nNote: /tmp/tmp82n0mfiz.java uses\
    \ or overrides a deprecated API.\nNote: Recompile with -Xlint:deprecation for\
    \ details.\n2 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Implement your logic here.\n  \
    \      int mm, dd;\n        mm = Integer.parseInt(date.substring(0, 2));\n   \
    \     dd = Integer.parseInt(date.substring(3, 5));\n        int y = Integer.parseInt(date.substring(6,\
    \ 10));\n\n        if (mm > 12) {\n            return false;\n        }\n\n  \
    \      int year = 1900 + y;\n        if (mm == 2) {\n            if (dd < 1 ||\
    \ dd > 29) {\n                return false;\n            }\n        } else if\
    \ (mm == 0) {\n            if (dd < 1 || dd > 28) {\n                return false;\n\
    \            }\n        } else if (mm == 1) {\n            if (dd < 1 || dd >\
    \ 31) {\n                return false;\n            }\n        } else if (mm ==\
    \ 3) {\n            if (dd < 1 || dd > 30) {\n                return false;\n\
    \            }\n        }\n        if (year < 1582 && year > 1930) {\n       \
    \     if (mm == 1 && dd > 31) {\n                return false;\n            }\n\
    \        }\n\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"0-\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.validDate(tmp9iurcl1k.java:30)\n\tat Problem.main(tmp9iurcl1k.java:66)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.trim().isEmpty())\
    \ {\n            return false;\n        }\n\n        SimpleDateFormat sdf = new\
    \ SimpleDateFormat(\"MM-dd-yyyy\");\n\n        Calendar c = Calendar.getInstance();\n\
    \n        try {\n            c.setTime(sdf.parse(date));\n        } catch (ParseException\
    \ e) {\n            return false;\n        }\n\n        return isValid(c.getTimeInMillis());\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpembhfqu_.java:31: error: cannot find symbol\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpembhfqu_.java:31: error: cannot find symbol\n\
    \        SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n      \
    \                             ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmpembhfqu_.java:37: error: cannot find symbol\n       \
    \ } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n/tmp/tmpembhfqu_.java:41: error: cannot find symbol\n\
    \        return isValid(c.getTimeInMillis());\n               ^\n  symbol:   method\
    \ isValid(long)\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean validDate = false;\n     \
    \   String[] dArray = date.split(\"-\");\n        String month = String.valueOf(dArray[1]).substring(0,\
    \ 2);\n        String day = String.valueOf(dArray[0]).substring(0, 2);\n     \
    \   String year = String.valueOf(dArray[2]);\n        int monthArray[] = new int[]{0,\
    \ 3, 6, 9, 11};\n        int dayArray[] = new int[]{1, 3, 5, 7, 8, 10, 12};\n\
    \        int yearArray[] = new int[]{2000, 2004, 2006, 2010, 2012, 2016};\n  \
    \      if (dArray.length > 0) {\n            validDate = true;\n        }\n  \
    \      else {\n            return false;\n        }\n        if (monthArray.contains(Integer.valueOf(month)))\
    \ {\n            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (dayArray.contains(Integer.valueOf(day))) {\n\
    \            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (yearArray.contains(Integer.valueOf(year))) {\n\
    \            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (monthArray.contains(Integer.valueOf(month)))\
    \ {\n            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (dayArray.contains(Integer.valueOf(day))) {\n\
    \            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (monthArray.contains(Integer.valueOf(month)))\
    \ {\n            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (dayArray.contains(Integer.valueOf(day))) {\n\
    \            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (monthArray.contains(Integer.valueOf(month)))\
    \ {\n            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (dayArray.contains(Integer.valueOf(day))) {\n\
    \            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (monthArray.contains(Integer.valueOf(month)))\
    \ {\n            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (dayArray.contains(Integer.valueOf(day))) {\n\
    \            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (monthArray.contains(Integer.valueOf(month)))\
    \ {\n            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (dayArray.contains(Integer.valueOf(day))) {\n\
    \            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (monthArray.contains(Integer.valueOf(month)))\
    \ {\n            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (dayArray.contains(Integer.valueOf(day))) {\n\
    \            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (monthArray.contains(Integer.valueOf(month)))\
    \ {\n            validDate = true;\n        }\n        else {\n            return\
    \ false;\n        }\n        if (dayArray.contains(Integer.valueOf(day))) {\n\
    \            \n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptrllsdvc.java:140: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011779
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6akjl3hb.java:31)\n"
  stdout: ''
  timestamp: 1660011571
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        int dateArr = date.split(\"-\").length;\n\
    \        if (dateArr < 3 || dateArr > 10) {\n            return false;\n     \
    \   }\n        int monthArr = date.split(\"-\")[1].split(\"-\").length;\n    \
    \    if (monthArr < 1 || monthArr > 12) {\n            return false;\n       \
    \ }\n        if (date.split(\"-\")[0].split(\"-\").length > 2 || date.split(\"\
    -\")[0].split(\"-\").length < 1) {\n            return false;\n        }\n   \
    \     if (date.split(\"-\")[0].split(\"-\")[2].length() != 4) {\n            return\
    \ false;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 2 out of bounds for length 1\n\tat Problem.validDate(tmpg2pu8jyc.java:38)\n\
    \tat Problem.main(tmpg2pu8jyc.java:44)\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if(date.length() == 0) {\n       \
    \     throw new IllegalArgumentException(\"The date string is empty.\");\n   \
    \     }\n        String[] dateParts = date.split(\"-\");\n        if(dateParts.length\
    \ != 3) {\n            return false;\n        }\n        ArrayList<Integer> monthDays\
    \ = Arrays.asList(1,2,3,4,5,6,7,8,9,10,11,12);\n        ArrayList<Integer> months\
    \ = Arrays.asList(4,6,9,11);\n        ArrayList<Integer> daysInMonth = new ArrayList<>(monthDays);\n\
    \        for(int month : months) {\n            daysInMonth.remove(month);\n \
    \       }\n        for(String part : dateParts) {\n            if(part.contains(\"\
    /\")) {\n                if(!isValidDate(part)) {\n                    return\
    \ false;\n                }\n            } else {\n                int day = Integer.parseInt(part);\n\
    \                if(day < 1 || day > daysInMonth.get(month)) {\n             \
    \       return false;\n                }\n            }\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1wvml97v.java:34: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<Integer>\n  \
    \      ArrayList<Integer> monthDays = Arrays.asList(1,2,3,4,5,6,7,8,9,10,11,12);\n\
    \                                                    ^\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>asList(T...)\n/tmp/tmp1wvml97v.java:35:\
    \ error: incompatible types: no instance(s) of type variable(s) T exist so that\
    \ List<T> conforms to ArrayList<Integer>\n        ArrayList<Integer> months =\
    \ Arrays.asList(4,6,9,11);\n                                                 ^\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>asList(T...)\n\
    /tmp/tmp1wvml97v.java:42: error: cannot find symbol\n                if(!isValidDate(part))\
    \ {\n                    ^\n  symbol:   method isValidDate(String)\n  location:\
    \ class Problem\n/tmp/tmp1wvml97v.java:47: error: cannot find symbol\n       \
    \         if(day < 1 || day > daysInMonth.get(month)) {\n                    \
    \                                ^\n  symbol:   variable month\n  location: class\
    \ Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Complete the code here!\n     \
    \   System.out.println(\"ValidDate: \" + date);\n        System.out.println(\"\
    ValidDate: \" + date.length());\n        String[] dates = date.split(\"-\");\n\
    \        System.out.println(\"ValidDate: \" + dates[1]);\n        boolean monthValid\
    \ = false;\n        int month = Integer.parseInt(dates[1]);\n        int day =\
    \ Integer.parseInt(dates[0]);\n        int year = Integer.parseInt(dates[2]);\n\
    \        boolean dayValid = false;\n        boolean monthValid = true;\n     \
    \   boolean yearValid = true;\n\n        int yearLength = 30;\n        int monthLength\
    \ = 1;\n        int dayLength = 1;\n\n        if (month >= 1 && month <= 12) {\n\
    \            monthLength = 31;\n            yearLength = 30;\n        } else if\
    \ (month >= 4 && month <= 11) {\n            monthLength = 30;\n            yearLength\
    \ = 30;\n        } else if (month == 2) {\n            monthLength = 31;\n   \
    \         yearLength = 30;\n        }\n\n        if (day < 1 || day > 31) {\n\
    \            dayValid = false;\n        } else if (day < 1 || day > 30) {\n  \
    \          dayValid = false;\n        } else if (day < 1 || day > 29) {\n    \
    \        dayValid = false;\n        }\n\n        yearValid = day <= yearLength;\n\
    \        System.out.println(\"Year Valid: \" + yearValid);\n        boolean monthValid\
    \ = monthLength == 1;\n\n        boolean dayValid = day <= dayLength;\n      \
    \  System.out.println(\"Month Valid: \" + monthValid);\n        System.out.println(\"\
    Day Valid: \" + dayValid);\n        boolean dateValid = true;\n\n        if (dateValid\
    \ && monthValid && dayValid && yearValid) {\n            System.out.println(\"\
    Date Valid\");\n        } else {\n            dateValid = false;\n        }\n\
    \        return dateValid;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1wh4pjke.java:37: error: variable monthValid is already defined\
    \ in method validDate(String)\n        boolean monthValid = true;\n          \
    \      ^\n/tmp/tmp1wh4pjke.java:65: error: variable monthValid is already defined\
    \ in method validDate(String)\n        boolean monthValid = monthLength == 1;\n\
    \                ^\n/tmp/tmp1wh4pjke.java:67: error: variable dayValid is already\
    \ defined in method validDate(String)\n        boolean dayValid = day <= dayLength;\n\
    \                ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        //\
    \ Write your code here\n        if(!Strings.isEmpty(date) && date.matches(\"(0?[1-9]|1[012])[-](0?[1-9]|[12][0-9]|3[01])[-]([0-9]{4}|[0-9]{2})\"\
    )) {\n            String[] month = date.split(\"-\");\n            String mm =\
    \ month[0];\n            String dd = month[1];\n            String yy = month[2];\n\
    \            boolean isvalid = false;\n            int days = 0;\n           \
    \ int mm1 = 0, dd1 = 0, yy1 = 0, mm2 = 0, dd2 = 0, yy2 = 0;\n            try {\n\
    \                if(Integer.parseInt(mm) >= 1 && Integer.parseInt(mm) <= 12){\n\
    \                    mm1 = Integer.parseInt(mm);\n                }\n        \
    \        else if(Integer.parseInt(mm) >= 4 && Integer.parseInt(mm) <= 11){\n \
    \                   mm1 = Integer.parseInt(mm) - 3;\n                }\n     \
    \           else{\n                    mm1 = 0;\n                }\n         \
    \       if(Integer.parseInt(dd) >= 1 && Integer.parseInt(dd) <= 31){\n       \
    \             dd1 = Integer.parseInt(dd);\n                }\n               \
    \ else if(Integer.parseInt(dd) >= 4 && Integer.parseInt(dd) <= 30){\n        \
    \            dd1 = Integer.parseInt(dd) - 6;\n                }\n            \
    \    else{\n                    dd1 = 0;\n                }\n                if(Integer.parseInt(yy)\
    \ >= 1 && Integer.parseInt(yy) <= 99){\n                    yy1 = Integer.parseInt(yy);\n\
    \                }\n                else if(Integer.parseInt(yy) >= 10 && Integer.parseInt(yy)\
    \ <= 15){\n                    yy1 = Integer.parseInt(yy) - 3;\n             \
    \   }\n                else{\n                    yy1 = 0;\n                }\n\
    \                mm2 = mm1 + 3;\n                dd2 = dd1 + 6;\n            \
    \    yy2 = yy1 + 9;\n                if(Integer.parseInt(mm2) >= 1 && Integer.parseInt(mm2)\
    \ <= 12){\n                    mm2 = Integer.parseInt(mm2);\n                }\n\
    \                else if(Integer.parseInt(mm2) >= 4 && Integer.parseInt(mm2) <=\
    \ 11){\n                    mm2 = Integer.parseInt(mm2) - 3;\n               \
    \ }\n                else{\n                    mm2 = 0;\n                }\n\
    \                if(Integer.parseInt(dd2) >= 1 && Integer.parseInt(dd2) <= 30){\n\
    \                    dd2 = Integer.parseInt(dd2);\n                }\n       \
    \         else if(Integer.parseInt(dd2) >= 4 && Integer.parseInt(dd2) <= 29){\n\
    \                    dd2 = Integer.parseInt(dd2) - 6;\n                }\n   \
    \             else{\n                    dd2 = 0;\n                }\n       \
    \         if(Integer.parseInt(yy2) >= 1 && Integer.parseInt(yy2) <= 99){\n   \
    \                 yy2 = Integer.parseInt(yy2);\n                }\n          \
    \      else if(Integer.parseInt(yy2) >= 10 && Integer.parseInt(yy2) <= 15){\n\
    \                    yy2 = Integer.parseInt(yy2) - 3;\n                }\n   \
    \             else{\n                    yy2 = 0;\n                }\n       \
    \         days = ((mm1 * 31) + (dd1 * 30) + yy1);\n                if(Integer.parseInt(\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltja090e.java:97: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpltja090e.java:37: error: 'try' without 'catch', 'finally' or resource\
    \ declarations\n            try {\n            ^\n/tmp/tmpltja090e.java:98: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        try\
    \ {\n            SimpleDateFormat formatter = new SimpleDateFormat(\"MM-dd-yyyy\"\
    );\n            Date d = formatter.parse(date);\n            Calendar c = Calendar.getInstance();\n\
    \            c.setTime(d);\n            int days = c.getActualMaximum(Calendar.DAY_OF_MONTH);\n\
    \            int month = c.getActualMaximum(Calendar.MONTH) + 1;\n           \
    \ return days < 1 || days > 31 || (month > 12 && month < 1) || month < 4;\n  \
    \      } catch (Exception e) {\n            e.printStackTrace();\n        }\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj1a3xem4.java:29: error: cannot find symbol\n            SimpleDateFormat\
    \ formatter = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:\
    \   class SimpleDateFormat\n  location: class Problem\n/tmp/tmpj1a3xem4.java:29:\
    \ error: cannot find symbol\n            SimpleDateFormat formatter = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                             ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() <= 0) {\n      \
    \      return false;\n        }\n        String[] tokens = date.split(\"-\");\n\
    \        if (tokens.length != 3) {\n            return false;\n        }\n   \
    \     LocalDate startDate = LocalDate.of(Integer.parseInt(tokens[0]), Integer.parseInt(tokens[1]),\
    \ Integer.parseInt(tokens[2]));\n        LocalDate endDate = startDate.plusDays(1);\n\
    \        if (startDate.isAfter(endDate)) {\n            return false;\n      \
    \  }\n        int month1 = startDate.getMonthValue();\n        int month2 = endDate.getMonthValue();\n\
    \        if (month1 <= 0) {\n            return false;\n        }\n        if\
    \ (month2 <= 0) {\n            return false;\n        }\n        int year1 = startDate.getYear();\n\
    \        int year2 = endDate.getYear();\n        if (year1 < 1 || year2 <= 1 ||\
    \ year1 > year2) {\n            return false;\n        }\n        switch (month1)\
    \ {\n            case 2:\n                switch (month2) {\n                \
    \    case 6:\n                    case 9:\n                    case 11:\n    \
    \                    return true;\n                    case 4:\n             \
    \       case 6:\n                    case 9:\n                    case 11:\n \
    \                       return true;\n                    default:\n         \
    \               return false;\n                }\n            case 4:\n      \
    \          switch (month2) {\n                    case 6:\n                  \
    \  case 9:\n                    case 11:\n                        return true;\n\
    \                    case 4:\n                    case 6:\n                  \
    \  case 9:\n                    case 11:\n                        return true;\n\
    \                    default:\n                        return false;\n       \
    \         }\n            case 6:\n                switch (month2) {\n        \
    \            case 6:\n                    case 9:\n                    case 11:\n\
    \                        return true;\n                    case 4:\n         \
    \           case 6:\n                    case 9:\n                    case 11:\n\
    \                        return true;\n                    default:\n        \
    \                return false;\n                }\n            case 9:\n     \
    \           switch (month2) {\n                    case 6:\n                 \
    \   case 9:\n                    case 11:\n                        return true;\n\
    \                    case 4:\n                    case 6:\n                  \
    \  case 9:\n                    case 11:\n                        return true;\n\
    \                    default:\n                        return false;\n       \
    \         }\n            case 11:\n                switch (month2) {\n       \
    \             case 6:\n                    case 9:\n                    case 11:\n\
    \                        return true;\n                    case 4:\n         \
    \           case 6:\n                    case 9:\n                    case 11:\n\
    \                        return true;\n                    default:\n        \
    \                return false;\n                }\n            default:\n    \
    \            return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppeoisah_.java:34: error: cannot find symbol\n        LocalDate\
    \ startDate = LocalDate.of(Integer.parseInt(tokens[0]), Integer.parseInt(tokens[1]),\
    \ Integer.parseInt(tokens[2]));\n        ^\n  symbol:   class LocalDate\n  location:\
    \ class Problem\n/tmp/tmppeoisah_.java:34: error: cannot find symbol\n       \
    \ LocalDate startDate = LocalDate.of(Integer.parseInt(tokens[0]), Integer.parseInt(tokens[1]),\
    \ Integer.parseInt(tokens[2]));\n                              ^\n  symbol:  \
    \ variable LocalDate\n  location: class Problem\n/tmp/tmppeoisah_.java:35: error:\
    \ cannot find symbol\n        LocalDate endDate = startDate.plusDays(1);\n   \
    \     ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmppeoisah_.java:60:\
    \ error: duplicate case label\n                    case 6:\n                 \
    \   ^\n/tmp/tmppeoisah_.java:61: error: duplicate case label\n               \
    \     case 9:\n                    ^\n/tmp/tmppeoisah_.java:62: error: duplicate\
    \ case label\n                    case 11:\n                    ^\n/tmp/tmppeoisah_.java:74:\
    \ error: duplicate case label\n                    case 6:\n                 \
    \   ^\n/tmp/tmppeoisah_.java:75: error: duplicate case label\n               \
    \     case 9:\n                    ^\n/tmp/tmppeoisah_.java:76: error: duplicate\
    \ case label\n                    case 11:\n                    ^\n/tmp/tmppeoisah_.java:88:\
    \ error: duplicate case label\n                    case 6:\n                 \
    \   ^\n/tmp/tmppeoisah_.java:89: error: duplicate case label\n               \
    \     case 9:\n                    ^\n/tmp/tmppeoisah_.java:90: error: duplicate\
    \ case label\n                    case 11:\n                    ^\n/tmp/tmppeoisah_.java:102:\
    \ error: duplicate case label\n                    case 6:\n                 \
    \   ^\n/tmp/tmppeoisah_.java:103: error: duplicate case label\n              \
    \      case 9:\n                    ^\n/tmp/tmppeoisah_.java:104: error: duplicate\
    \ case label\n                    case 11:\n                    ^\n/tmp/tmppeoisah_.java:116:\
    \ error: duplicate case label\n                    case 6:\n                 \
    \   ^\n/t"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code goes here\n        if\
    \ (date != null && !date.trim().isEmpty()) {\n            int dateCheck = 0;\n\
    \            dateCheck = dateCheck + date.substring(4).charAt(0);\n          \
    \  dateCheck = dateCheck + date.substring(4, 6).charAt(0);\n            dateCheck\
    \ = dateCheck + date.substring(6, 8).charAt(0);\n            dateCheck = dateCheck\
    \ + date.substring(8, 10).charAt(0);\n            dateCheck = dateCheck + date.substring(10,\
    \ 12).charAt(0);\n            dateCheck = dateCheck + date.substring(12, 14).charAt(0);\n\
    \            int dayCheck;\n            dayCheck = date.substring(6, 8).charAt(0);\n\
    \            dayCheck = dayCheck + date.substring(8, 10).charAt(0);\n        \
    \    dayCheck = dayCheck + date.substring(10, 12).charAt(0);\n            dayCheck\
    \ = dayCheck + date.substring(12, 14).charAt(0);\n            int monthCheck;\n\
    \            monthCheck = date.substring(4, 6).charAt(0);\n            monthCheck\
    \ = monthCheck + date.substring(6, 9).charAt(0);\n            monthCheck = monthCheck\
    \ + date.substring(9, 11).charAt(0);\n            monthCheck = monthCheck + date.substring(11,\
    \ 12).charAt(0);\n            if (monthCheck > 12) {\n                monthCheck\
    \ = 12;\n            }\n            if (monthCheck < 1) {\n                monthCheck\
    \ = 1;\n            }\n            if (dayCheck < 1) {\n                dayCheck\
    \ = 1;\n            }\n            if (dayCheck > 31) {\n                dayCheck\
    \ = 31;\n            }\n            if (dayCheck > 30) {\n                dayCheck\
    \ = 30;\n            }\n            if (dayCheck > 29) {\n                dayCheck\
    \ = 29;\n            }\n            if (dayCheck < 1) {\n                dayCheck\
    \ = 1;\n            }\n            try {\n                SimpleDateFormat sdf\
    \ = new SimpleDateFormat(\"MM-dd-yyyy\");\n                sdf.parse(date);\n\
    \                if (dateCheck == dayCheck && dateCheck == monthCheck) {\n   \
    \                 return true;\n                }\n            } catch (ParseException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   return false;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3x5fo4v.java:68: error: cannot find symbol\n                SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n                ^\n  symbol:  \
    \ class SimpleDateFormat\n  location: class Problem\n/tmp/tmpb3x5fo4v.java:68:\
    \ error: cannot find symbol\n                SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                           ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpb3x5fo4v.java:73: error:\
    \ cannot find symbol\n            } catch (ParseException e) {\n             \
    \        ^\n  symbol:   class ParseException\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        \n        LocalDate date = LocalDate.parse(date);\n\
    \        int year = date.getYear();\n        int month = date.getMonthValue();\n\
    \        int days = date.getDayOfMonth();\n        boolean isvalid;\n        \n\
    \        \n        \n        if(String.isEmpty(date))\n        {\n           \
    \ System.out.println(\"Date is empty\");\n            isvalid = false;\n     \
    \   }\n        else if(days < 1 || days > 31)\n        {\n            System.out.println(\"\
    Number of days is not valid\");\n            isvalid = false;\n        }\n   \
    \     else if((month < 1 || month > 12))\n        {\n            System.out.println(\"\
    Month is not valid\");\n            isvalid = false;\n        }\n        else\n\
    \        {\n            System.out.println(\"Date is valid\");\n            isvalid\
    \ = true;\n        }\n        return isvalid;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3e0is85h.java:28: error: cannot find symbol\n        LocalDate\
    \ date = LocalDate.parse(date);\n        ^\n  symbol:   class LocalDate\n  location:\
    \ class Problem\n/tmp/tmp3e0is85h.java:28: error: variable date is already defined\
    \ in method validDate(String)\n        LocalDate date = LocalDate.parse(date);\n\
    \                  ^\n/tmp/tmp3e0is85h.java:28: error: cannot find symbol\n  \
    \      LocalDate date = LocalDate.parse(date);\n                         ^\n \
    \ symbol:   variable LocalDate\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String pattern = \"(^[01]?[\\\\-/][0-9]{2}[\\\
    \\-/][0-9]{4})$\";\n        return date.matches(pattern);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf5lge_rc.java:31)\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // The date string is not empty.\n\
    \        if (date == null || date.trim().isEmpty()) {\n            return false;\n\
    \        }\n\n        // The number of days is not less than 1 or higher than\
    \ 31 days for months 1,3,5,7,8,10,12. And, the \n        // number of days is\
    \ not less than 1 or higher than 30 days for months 4,6,9,11. And, \n        //\
    \ the number of days is not less than 1 or higher than 29 for the month 2.\n \
    \       if (date.contains(\"-\")) {\n            String[] parts = date.split(\"\
    -\");\n            if (parts.length > 3) {\n                String[] months =\
    \ {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\"};\n                int days = Integer.parseInt(parts[2]) - Integer.parseInt(parts[0])\
    \ - Integer.parseInt(months[Integer.parseInt(parts[1]) - 1]);\n              \
    \  if (days < 1 || days > 31) {\n                    return false;\n         \
    \       }\n            } else if (parts.length > 2) {\n                String[]\
    \ months = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"\
    06\", \"09\", \"11\", \"20\", \"30\", \"31\", \"02\"};\n                int days\
    \ = Integer.parseInt(parts[2]) - Integer.parseInt(months[Integer.parseInt(parts[1])\
    \ - 1]) - Integer.parseInt(parts[0]);\n                if (days < 1 || days >\
    \ 30) {\n                    return false;\n                }\n            } else\
    \ if (parts.length > 1) {\n                String[] months = {\"01\", \"03\",\
    \ \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"20\"\
    , \"30\", \"31\"};\n                int days = Integer.parseInt(parts[1]) - Integer.parseInt(months[Integer.parseInt(parts[0])\
    \ - 1]) - Integer.parseInt(parts[0]);\n                if (days < 1 || days >\
    \ 29) {\n                    return false;\n                }\n            }\n\
    \        } else {\n            String[] months = {\"01\", \"03\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"20\", \"30\", \"31\"\
    };\n            int days = Integer.parseInt(date) - Integer.parseInt(months[Integer.parseInt(date.substring(0,\
    \ 2)) - 1]) - Integer.parseInt(date.substring(0, 2));\n            if (days <\
    \ 1 || days > 31) {\n                return false;\n            }\n        }\n\
    \n        // The months should not be less than 1 or higher than 12.\n       \
    \ if (date.contains(\"-\")) {\n            String[] parts = date.split(\"-\");\n\
    \            int months = Integer.parseInt(parts[0]) - Integer.parseInt(date.substring(0,\
    \ 2));\n            if (months < 1 || months > 12) {\n                return false;\n\
    \            }\n        } else {\n            int months = Integer.parseInt(date.substring(0,\
    \ 2)) - Integer.parseInt(months[Integer.parseInt(date.substring(0, 2)) - 1]);\n\
    \            if (months < 1 || months > 12) {\n                return false;\n\
    \            }\n        }\n\n        // The date should be in the format: mm-dd-yyyy\n\
    \        if (date.contains(\"-\")) {\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpslgw1ti0.java:81: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateParts = date.split(\"\
    -\");\n\n        String month = dateParts[0];\n        String day = dateParts[1];\n\
    \        String year = dateParts[2];\n\n        if (date.isEmpty()) {\n      \
    \      return false;\n        }\n\n        if (month.length() < 1 || month.length()\
    \ > 12) {\n            return false;\n        }\n\n        if (day.length() <\
    \ 1 || day.length() > 31) {\n            return false;\n        }\n\n        if\
    \ (month.equals(\"01\") || month.equals(\"03\") || month.equals(\"05\") || month.equals(\"\
    07\") || month.equals(\"08\") || month.equals(\"10\") || month.equals(\"12\")\
    \ && (day.equals(\"01\") || day.equals(\"03\") || day.equals(\"05\") || day.equals(\"\
    07\") || day.equals(\"08\") || day.equals(\"10\") || day.equals(\"12\")))\n  \
    \          return false;\n        if (month.equals(\"04\") || month.equals(\"\
    06\") || month.equals(\"09\") || month.equals(\"11\") && day.equals(\"01\") ||\
    \ day.equals(\"04\") || day.equals(\"06\") || day.equals(\"09\") || day.equals(\"\
    11\"))\n            return false;\n        if (month.equals(\"02\") && (day.equals(\"\
    01\") || day.equals(\"03\") || day.equals(\"05\") || day.equals(\"07\") || day.equals(\"\
    08\") || day.equals(\"10\") || day.equals(\"12\")))\n            return false;\n\
    \n        return true;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdl2orey8.java:55)\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // If the date is empty return false\n\
    \        if (date.equals(\"\")) {\n            return false;\n        }\n    \
    \    String[] dateArray = date.split(\"-\");\n        // Get the number of days\
    \ in each month\n        int[] daysInMonths = new int[12];\n        int daysInMonth\
    \ = 0;\n        int[] months = new int[12];\n        months[1] = 0;\n        months[3]\
    \ = 1;\n        months[5] = 3;\n        months[7] = 5;\n        months[8] = 7;\n\
    \        months[10] = 8;\n        months[12] = 10;\n        for (int i = 0; i\
    \ < dateArray.length; i++) {\n            if (i == 0) {\n                daysInMonth\
    \ = Integer.parseInt(dateArray[i]) - 1;\n            } else {\n              \
    \  daysInMonth += Integer.parseInt(dateArray[i]);\n            }\n        }\n\
    \        // Compare month\n        if (daysInMonth < 1 || daysInMonth > 31) {\n\
    \            return false;\n        }\n        for (int i = 1; i < months.length;\
    \ i++) {\n            if (daysInMonth < 1 || daysInMonth > months[i]) {\n    \
    \            return false;\n            }\n        }\n        // Compare date\n\
    \        int dayInYear = daysInMonth;\n        int dayInYear2 = 0;\n        int\
    \ year = 0;\n        for (int i = 1; i < dateArray.length; i++) {\n          \
    \  year += Integer.parseInt(dateArray[i]) * 10;\n        }\n        dayInYear2\
    \ = year / 100;\n        year -= dayInYear2 * 100;\n        dayInYear -= year;\n\
    \        if (dayInYear != dayInYear2) {\n            return false;\n        }\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\"\
    )) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 12 out of bounds for length 12\n\tat Problem.validDate(tmpdvyapg_z.java:42)\n\
    \tat Problem.main(tmpdvyapg_z.java:75)\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n        try {\n            format.parse(date);\n        } catch\
    \ (ParseException e) {\n            return false;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf_hjeesc.java:27: error: cannot find symbol\n        SimpleDateFormat\
    \ format = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmpf_hjeesc.java:27: error:\
    \ cannot find symbol\n        SimpleDateFormat format = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                      ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpf_hjeesc.java:30: error: cannot find symbol\n\
    \        } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.isEmpty())\
    \ {\n            return false;\n        }\n        if (date.split(\"-\").length\
    \ != 3) {\n            return false;\n        }\n        if (date.split(\"-\"\
    )[2].length < 1 || date.split(\"-\")[2].length > 2) {\n            return false;\n\
    \        }\n        boolean daysInMonth = false;\n        boolean monthsValid\
    \ = false;\n        switch (date.split(\"-\")[0].charAt(0)) {\n            case\
    \ \"2\":\n            case \"4\":\n            case \"6\":\n            case \"\
    8\":\n            case \"10\":\n            case \"12\":\n                switch\
    \ (date.split(\"-\")[0].charAt(1)) {\n                    case \"0\":\n      \
    \              case \"1\":\n                    case \"3\":\n                \
    \    case \"5\":\n                    case \"7\":\n                    case \"\
    9\":\n                    case \"11\":\n                        dayssInMonth =\
    \ 31;\n                        monthsValid = true;\n                        break;\n\
    \                    case \"4\":\n                        dayssInMonth = 30;\n\
    \                        monthsValid = true;\n                        break;\n\
    \                    default:\n                        dayssInMonth = 29;\n  \
    \                      monthsValid = true;\n                        break;\n \
    \               }\n                break;\n            case \"1\":\n         \
    \   case \"3\":\n            case \"5\":\n            case \"7\":\n          \
    \  case \"9\":\n            case \"11\":\n                dayssInMonth = 31;\n\
    \                monthsValid = true;\n                break;\n            case\
    \ \"4\":\n                dayssInMonth = 30;\n                monthsValid = true;\n\
    \                break;\n            default:\n                dayssInMonth =\
    \ 29;\n                monthsValid = true;\n                break;\n        }\n\
    \        int month = Integer.parseInt(date.split(\"-\")[0]);\n        int day\
    \ = Integer.parseInt(date.split(\"-\")[1]);\n        int year = Integer.parseInt(date.split(\"\
    -\")[2]);\n        int dayCount = 0;\n        int currentYear = year;\n      \
    \  int currentDay = day;\n        int currentMonth = month;\n        boolean isValid\
    \ = false;\n        if (daysInMonth < day) {\n            isValid = true;\n  \
    \      }\n        if (monthsValid && month != currentMonth) {\n            isValid\
    \ = true;\n        }\n        if (currentDay > daysInMonth) {\n            isValid\
    \ = true;\n        }\n        if (isValid) {\n            return true;\n     \
    \   }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq_vhvzak.java:33: error: cannot find symbol\n        if (date.split(\"\
    -\")[2].length < 1 || date.split(\"-\")[2].length > 2) {\n                   \
    \           ^\n  symbol:   variable length\n  location: class String\n/tmp/tmpq_vhvzak.java:33:\
    \ error: cannot find symbol\n        if (date.split(\"-\")[2].length < 1 || date.split(\"\
    -\")[2].length > 2) {\n                                                      \
    \         ^\n  symbol:   variable length\n  location: class String\n/tmp/tmpq_vhvzak.java:39:\
    \ error: incompatible types: String cannot be converted to char\n            case\
    \ \"2\":\n                 ^\n/tmp/tmpq_vhvzak.java:40: error: incompatible types:\
    \ String cannot be converted to char\n            case \"4\":\n              \
    \   ^\n/tmp/tmpq_vhvzak.java:41: error: incompatible types: String cannot be converted\
    \ to char\n            case \"6\":\n                 ^\n/tmp/tmpq_vhvzak.java:42:\
    \ error: incompatible types: String cannot be converted to char\n            case\
    \ \"8\":\n                 ^\n/tmp/tmpq_vhvzak.java:43: error: incompatible types:\
    \ String cannot be converted to char\n            case \"10\":\n             \
    \    ^\n/tmp/tmpq_vhvzak.java:44: error: incompatible types: String cannot be\
    \ converted to char\n            case \"12\":\n                 ^\n/tmp/tmpq_vhvzak.java:46:\
    \ error: incompatible types: String cannot be converted to char\n            \
    \        case \"0\":\n                         ^\n/tmp/tmpq_vhvzak.java:47: error:\
    \ incompatible types: String cannot be converted to char\n                   \
    \ case \"1\":\n                         ^\n/tmp/tmpq_vhvzak.java:48: error: incompatible\
    \ types: String cannot be converted to char\n                    case \"3\":\n\
    \                         ^\n/tmp/tmpq_vhvzak.java:49: error: incompatible types:\
    \ String cannot be converted to char\n                    case \"5\":\n      \
    \                   ^\n/tmp/tmpq_vhvzak.java:50: error: incompatible types: String\
    \ cannot be converted to char\n                    case \"7\":\n             \
    \            ^\n/tmp/tmpq_vhvzak.java:51: error: incompatible types: String cannot\
    \ be converted to c"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.length() == 0) {\n      \
    \      return false;\n        } else if (date.length() < 7 || date.length() >\
    \ 10) {\n            return false;\n        } else if (date.charAt(0) == '0' &&\
    \ date.charAt(2) == '0') {\n            return false;\n        } else if (date.charAt(0)\
    \ == '0' && date.charAt(2) == '0') {\n            return false;\n        } else\
    \ if (date.charAt(0) == '0' && date.charAt(2) == '0') {\n            return false;\n\
    \        }\n        String[] dateParts = date.split(\"-\");\n        int month\
    \ = Integer.parseInt(dateParts[0]);\n        int day = Integer.parseInt(dateParts[1]);\n\
    \        int year = Integer.parseInt(dateParts[2]);\n        int numberOfDaysInMonth[]\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int numberOfDaysInMonth2\
    \ = {28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int numberOfDaysInMonth3[]\
    \ = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n        int numberOfDaysInMonth4[]\
    \ = {31, 30, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\n        if (month < 1\
    \ || month > 12 || day < 1 || day > numberOfDaysInMonth[month - 1]) {\n      \
    \      return false;\n        } else if (month == 2 && (day > numberOfDaysInMonth2[month\
    \ - 1] || day < 1)) {\n            return false;\n        } else if (month ==\
    \ 3 && (day > numberOfDaysInMonth3[month - 1] || day < 1)) {\n            return\
    \ false;\n        } else if (month == 4 && (day > numberOfDaysInMonth4[month -\
    \ 1] || day < 1)) {\n            return false;\n        } else {\n           \
    \ return true;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpie2d3zih.java:43: error: illegal initializer for int\n        int\
    \ numberOfDaysInMonth2 = {28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n     \
    \                              ^\n/tmp/tmpie2d3zih.java:49: error: array required,\
    \ but int found\n        } else if (month == 2 && (day > numberOfDaysInMonth2[month\
    \ - 1] || day < 1)) {\n                                                      \
    \      ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        Scanner scanner = new Scanner(date);\n\
    \        scanner.useDelimiter(\"-\");\n        if (scanner.hasNext() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt() && scanner.hasNextInt()\
    \ && scanner.hasNextInt() && \n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw3plh_m.java:30: error: illegal start of expression\n    }\n \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here\n        if(!Strings.isEmpty(date)\
    \ && date.length()>1 && date.matches(\"(0?[1-9]|1[012])[-/](0?[1-9]|[12][0-9]|3[01])[-/](19|20)\\\
    \\d\\\\d\")\n            && ((date.length()>1 && date.length()<31) && ((date.length()>1\
    \ && date.length()<30) && ((date.length()>1 && date.length()<29))))\n        \
    \    && ((date.length()<12 && (date.length()>1 && date.length()<31) && ((date.length()>1\
    \ && date.length()<30) && ((date.length()>1 && date.length()<29))))\n        \
    \    && ((date.length()<12 && (date.length()>1 && date.length()<31) && ((date.length()>1\
    \ && date.length()<30)))\n            && ((date.length()<12 && (date.length()>1\
    \ && date.length()<31))\n                && ((date.length()>1 && date.length()<31))\n\
    \                && ((date.length()>1 && date.length()<29))\n                &&\
    \ ((date.length()>1 && date.length()<30))\n                && ((date.length()>1\
    \ && date.length()<31))\n                && ((date.length()>1 && date.length()<30))\n\
    \                && ((date.length()>1 && date.length()<31))\n                &&\
    \ ((date.length()>1 && date.length()<30))\n                && ((date.length()>1\
    \ && date.length()<31))\n                && ((date.length()>1 && date.length()<30))\n\
    \                && ((date.length()>1 && date.length()<31))\n                &&\
    \ ((date.length()>1 && date.length()<30))\n                && ((date.length()>1\
    \ && date.length()<31))\n                && ((date.length()>1 && date.length()<30))\n\
    \                && ((date.length()>1 && date.length()<31))\n                &&\
    \ ((date.length()>1 && date.length()<30))\n                && ((date.length()>1\
    \ && date.length()<31))\n                && ((date.length()>1 && date.length()<30))\n\
    \                && ((date.length()>1 && date.length()<31))\n                &&\
    \ ((date.length()>1 && date.length()<30))\n                && ((date.length()>1\
    \ && date.length()<31))\n                && ((date.length()>1 && date.length()<30))\n\
    \                && ((date.length()>1 && date.length()<31))\n                \n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8t3_k8h6.java:54: error: ')' expected\n                && ((date.length()>1\
    \ && date.length()<31))\n                                                    \
    \      ^\n/tmp/tmp8t3_k8h6.java:56: error: illegal start of statement\n    }\n\
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011780
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (StringUtils.isNotEmpty(date))\
    \ {\n            if (isCorrectMonth(date.substring(0, date.indexOf(MONTH_DELIMITER))))\
    \ {\n                if (isCorrectDay(date.substring(date.indexOf(MONTH_DELIMITER)\
    \ + 1, date.indexOf(YEAR_DELIMITER))) && !isWrongMonth(date.substring(0, date.indexOf(MONTH_DELIMITER))))\
    \ {\n                    if (isCorrectYear(date.substring(date.indexOf(YEAR_DELIMITER)\
    \ + 1, date.length()))) {\n                        if (isCorrectFormat(date))\n\
    \                            return true;\n                    }\n           \
    \     }\n            }\n        }\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmporpdjjwq.java:27: error: cannot find symbol\n        if (StringUtils.isNotEmpty(date))\
    \ {\n            ^\n  symbol:   variable StringUtils\n  location: class Problem\n\
    /tmp/tmporpdjjwq.java:28: error: cannot find symbol\n            if (isCorrectMonth(date.substring(0,\
    \ date.indexOf(MONTH_DELIMITER)))) {\n                                       \
    \                       ^\n  symbol:   variable MONTH_DELIMITER\n  location: class\
    \ Problem\n/tmp/tmporpdjjwq.java:29: error: cannot find symbol\n             \
    \   if (isCorrectDay(date.substring(date.indexOf(MONTH_DELIMITER) + 1, date.indexOf(YEAR_DELIMITER)))\
    \ && !isWrongMonth(date.substring(0, date.indexOf(MONTH_DELIMITER)))) {\n    \
    \                                                         ^\n  symbol:   variable\
    \ MONTH_DELIMITER\n  location: class Problem\n/tmp/tmporpdjjwq.java:29: error:\
    \ cannot find symbol\n                if (isCorrectDay(date.substring(date.indexOf(MONTH_DELIMITER)\
    \ + 1, date.indexOf(YEAR_DELIMITER))) && !isWrongMonth(date.substring(0, date.indexOf(MONTH_DELIMITER))))\
    \ {\n                                                                        \
    \                        ^\n  symbol:   variable YEAR_DELIMITER\n  location: class\
    \ Problem\n/tmp/tmporpdjjwq.java:29: error: cannot find symbol\n             \
    \   if (isCorrectDay(date.substring(date.indexOf(MONTH_DELIMITER) + 1, date.indexOf(YEAR_DELIMITER)))\
    \ && !isWrongMonth(date.substring(0, date.indexOf(MONTH_DELIMITER)))) {\n    \
    \                                                                            \
    \                                                                            \
    \      ^\n  symbol:   variable MONTH_DELIMITER\n  location: class Problem\n/tmp/tmporpdjjwq.java:30:\
    \ error: cannot find symbol\n                    if (isCorrectYear(date.substring(date.indexOf(YEAR_DELIMITER)\
    \ + 1, date.length()))) {\n                                                  \
    \                ^\n  symbol:   variable YEAR_DELIMITER\n  location: class Problem\n\
    /tmp/tmporpdjjwq.java:31: error: cannot find symbol\n                        if\
    \ (isCorrectFormat(date))\n    "
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        //Your solution here\n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnjeyyd5g.java:28: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String [] dateParts = date.split(\"\
    -\");\n        int numberOfDays = Integer.parseInt(dateParts[dateParts.length-1]);\n\
    \        int monthIndex = Integer.parseInt(dateParts[0]);\n        int yearIndex\
    \ = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n\
    \        int month;\n        switch (monthIndex) {\n            case 1: month\
    \ = 2; break;\n            case 3: month = 12; break;\n            case 4: month\
    \ = 0; break;\n            case 6: month = 11; break;\n            case 9: month\
    \ = 6; break;\n            case 11: month = 4; break;\n            default:\n\
    \                month = 1;\n        }\n        if (date.length()>0)\n       \
    \     return true;\n        else return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n\
    \    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk8w95wp9.java:49)\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        String[] dateParts = date.split(\"\
    -\");\n        LocalDate validDate = LocalDate.parse(dateParts[0], DateTimeFormatter.ofPattern(\"\
    MM-dd\"));\n        LocalDate currentDate = LocalDate.now();\n        LocalDate\
    \ nextDate = validDate.plusDays(1);\n        LocalDate nextNextDate = nextDate.plusDays(1);\n\
    \        LocalDate nextNextNextDate = nextNextDate.plusDays(1);\n        LocalDate\
    \ nextNextNextNextDate = nextNextNextDate.plusDays(1);\n        LocalDate nextNextNextNextNextDate\
    \ = nextNextNextNextDate.plusDays(1);\n        LocalDate nextNextNextNextNextNextDate\
    \ = nextNextNextNextDate.plusDays(1);\n        LocalDate nextNextNextNextNextNextDate\
    \ = nextNextNextNextNextDate.plusDays(1);\n\n        if (validDate.isBefore(currentDate))\
    \ {\n            return true;\n        }\n\n        boolean isFirstDay;\n    \
    \    boolean isSecondDay;\n        boolean isThirdDay;\n        boolean isFourthDay;\n\
    \        boolean isFifthDay;\n        boolean isSixthDay;\n        boolean isSeventhDay;\n\
    \        boolean isEighthDay;\n        boolean isNinthDay;\n        boolean isTenthDay;\n\
    \        boolean isEleventhDay;\n        boolean isTwelvethDay;\n        boolean\
    \ isFirstMonth;\n        boolean isSecondMonth;\n        boolean isThirdMonth;\n\
    \        boolean isFourthMonth;\n        boolean isFifthMonth;\n        boolean\
    \ isSixthMonth;\n        boolean isSeventhMonth;\n        boolean isEighthMonth;\n\
    \        boolean isNinthMonth;\n        boolean isTenthMonth;\n        boolean\
    \ isEleventhMonth;\n        boolean isTwelvethMonth;\n\n        isFirstDay = currentDate.isBefore(validDate.minusDays(1));\n\
    \        isSecondDay = currentDate.isBefore(nextDate.minusDays(1));\n        isThirdDay\
    \ = currentDate.isBefore(nextNextDate.minusDays(1));\n        isFourthDay = currentDate.isBefore(nextNextNextDate.minusDays(1));\n\
    \        isFifthDay = currentDate.isBefore(nextNextNextNextDate.minusDays(1));\n\
    \        isSixthDay = currentDate.isBefore(nextNextNextNextNextDate.minusDays(1));\n\
    \        isSeventhDay = currentDate.isBefore(nextNextNextNextNextNextDate.minusDays(1));\n\
    \        isEighthDay = currentDate.isBefore(nextNextNextNextNextNextNextDate.minusDays(1));\n\
    \n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo9jek3qo.java:28: error: cannot find symbol\n        LocalDate\
    \ validDate = LocalDate.parse(dateParts[0], DateTimeFormatter.ofPattern(\"MM-dd\"\
    ));\n        ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmpo9jek3qo.java:28:\
    \ error: cannot find symbol\n        LocalDate validDate = LocalDate.parse(dateParts[0],\
    \ DateTimeFormatter.ofPattern(\"MM-dd\"));\n                              ^\n\
    \  symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmpo9jek3qo.java:28:\
    \ error: cannot find symbol\n        LocalDate validDate = LocalDate.parse(dateParts[0],\
    \ DateTimeFormatter.ofPattern(\"MM-dd\"));\n                                 \
    \                           ^\n  symbol:   variable DateTimeFormatter\n  location:\
    \ class Problem\n/tmp/tmpo9jek3qo.java:29: error: cannot find symbol\n       \
    \ LocalDate currentDate = LocalDate.now();\n        ^\n  symbol:   class LocalDate\n\
    \  location: class Problem\n/tmp/tmpo9jek3qo.java:29: error: cannot find symbol\n\
    \        LocalDate currentDate = LocalDate.now();\n                          \
    \      ^\n  symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmpo9jek3qo.java:30:\
    \ error: cannot find symbol\n        LocalDate nextDate = validDate.plusDays(1);\n\
    \        ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmpo9jek3qo.java:31:\
    \ error: cannot find symbol\n        LocalDate nextNextDate = nextDate.plusDays(1);\n\
    \        ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmpo9jek3qo.java:32:\
    \ error: cannot find symbol\n        LocalDate nextNextNextDate = nextNextDate.plusDays(1);\n\
    \        ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmpo9jek3qo.java:33:\
    \ error: cannot find symbol\n        LocalDate nextNextNextNextDate = nextNextNextDate.plusDays(1);\n\
    \        ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmpo9jek3qo.java:34:\
    \ error: cannot find symbol\n        LocalDate nextNextNextNextNextDate = nextNextNextNextDate.plusDays(1);\n\
    \        ^\n  symbol:   class LocalDate\n  location: class Problem\n/tmp/tmpo9jek3qo.java:35:\
    \ error: cannot find symbol\n      "
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        LocalDate date = LocalDate.parse(date);\n\
    \        List<Integer> months = List.of(1, 3, 5, 7, 8, 10, 12);\n        List<Integer>\
    \ days = List.of(1, 30, 29, 29, 29, 29, 29);\n        return date.isNotEmpty()\
    \ &&\n                date.get(ChronoField.DAY_OF_MONTH).isNotLessThan(1).orElse(true)\
    \ &&\n                date.get(ChronoField.DAY_OF_MONTH).isNotLessThan(31).orElse(true)\
    \ &&\n                date.get(ChronoField.MONTH_OF_YEAR).isNotLessThan(12).orElse(true)\
    \ &&\n                months.contains(date.get(ChronoField.MONTH_OF_YEAR)) &&\n\
    \                days.contains(date.get(ChronoField.DAY_OF_MONTH));\n    }\n \
    \   public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq0rovb0a.java:27: error: cannot find symbol\n        LocalDate\
    \ date = LocalDate.parse(date);\n        ^\n  symbol:   class LocalDate\n  location:\
    \ class Problem\n/tmp/tmpq0rovb0a.java:27: error: variable date is already defined\
    \ in method validDate(String)\n        LocalDate date = LocalDate.parse(date);\n\
    \                  ^\n/tmp/tmpq0rovb0a.java:27: error: cannot find symbol\n  \
    \      LocalDate date = LocalDate.parse(date);\n                         ^\n \
    \ symbol:   variable LocalDate\n  location: class Problem\n/tmp/tmpq0rovb0a.java:31:\
    \ error: cannot find symbol\n                date.get(ChronoField.DAY_OF_MONTH).isNotLessThan(1).orElse(true)\
    \ &&\n                         ^\n  symbol:   variable ChronoField\n  location:\
    \ class Problem\n/tmp/tmpq0rovb0a.java:32: error: cannot find symbol\n       \
    \         date.get(ChronoField.DAY_OF_MONTH).isNotLessThan(31).orElse(true) &&\n\
    \                         ^\n  symbol:   variable ChronoField\n  location: class\
    \ Problem\n/tmp/tmpq0rovb0a.java:33: error: cannot find symbol\n             \
    \   date.get(ChronoField.MONTH_OF_YEAR).isNotLessThan(12).orElse(true) &&\n  \
    \                       ^\n  symbol:   variable ChronoField\n  location: class\
    \ Problem\n/tmp/tmpq0rovb0a.java:34: error: cannot find symbol\n             \
    \   months.contains(date.get(ChronoField.MONTH_OF_YEAR)) &&\n                \
    \                         ^\n  symbol:   variable ChronoField\n  location: class\
    \ Problem\n/tmp/tmpq0rovb0a.java:35: error: cannot find symbol\n             \
    \   days.contains(date.get(ChronoField.DAY_OF_MONTH));\n                     \
    \                  ^\n  symbol:   variable ChronoField\n  location: class Problem\n\
    8 errors\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        return\
    \ date.isEmpty() || date.trim().length() > 0\n                && date.split(\"\
    -\").length == 3 && date.split(\"-\")[0].length() > 1 && date.split(\"-\")[1].length()\
    \ > 1 && date.split(\"-\")[2].length() > 1 && date.split(\"-\")[0].isDigit() &&\
    \ date.split(\"-\")[1].isDigit() && date.split(\"-\")[2].isDigit() && date.split(\"\
    -\")[0] > 0 && date.split(\"-\")[1] > 0 && date.split(\"-\")[2] > 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpat8xs_b4.java:29: error: cannot find symbol\n                &&\
    \ date.split(\"-\").length == 3 && date.split(\"-\")[0].length() > 1 && date.split(\"\
    -\")[1].length() > 1 && date.split(\"-\")[2].length() > 1 && date.split(\"-\"\
    )[0].isDigit() && date.split(\"-\")[1].isDigit() && date.split(\"-\")[2].isDigit()\
    \ && date.split(\"-\")[0] > 0 && date.split(\"-\")[1] > 0 && date.split(\"-\"\
    )[2] > 0;\n                                                                  \
    \                                                                            \
    \                               ^\n  symbol:   method isDigit()\n  location: class\
    \ String\n/tmp/tmpat8xs_b4.java:29: error: cannot find symbol\n              \
    \  && date.split(\"-\").length == 3 && date.split(\"-\")[0].length() > 1 && date.split(\"\
    -\")[1].length() > 1 && date.split(\"-\")[2].length() > 1 && date.split(\"-\"\
    )[0].isDigit() && date.split(\"-\")[1].isDigit() && date.split(\"-\")[2].isDigit()\
    \ && date.split(\"-\")[0] > 0 && date.split(\"-\")[1] > 0 && date.split(\"-\"\
    )[2] > 0;\n                                                                  \
    \                                                                            \
    \                                                               ^\n  symbol: \
    \  method isDigit()\n  location: class String\n/tmp/tmpat8xs_b4.java:29: error:\
    \ cannot find symbol\n                && date.split(\"-\").length == 3 && date.split(\"\
    -\")[0].length() > 1 && date.split(\"-\")[1].length() > 1 && date.split(\"-\"\
    )[2].length() > 1 && date.split(\"-\")[0].isDigit() && date.split(\"-\")[1].isDigit()\
    \ && date.split(\"-\")[2].isDigit() && date.split(\"-\")[0] > 0 && date.split(\"\
    -\")[1] > 0 && date.split(\"-\")[2] > 0;\n                                   \
    \                                                                            \
    \                                                                            \
    \                                                  ^\n  symbol:   method isDigit()\n\
    \  location: class String\n/tmp/tmpat8xs_b4.java:29: error: bad operand types\
    \ for binary operator '>'\n                && date.split(\"-\").length == 3 &&\
    \ dat"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Complete the code here\n      \
    \  SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        Date\
    \ dateToCheck = null;\n        try {\n            dateToCheck = sdf.parse(date);\n\
    \            \n            SimpleDateFormat sdf2 = new SimpleDateFormat(\"dd-MM-yyyy\"\
    );\n            Date dateToCheck2 = null;\n            try {\n               \
    \ dateToCheck2 = sdf2.parse(date);\n            } catch (ParseException e) {\n\
    \                return false;\n            }\n        } catch (ParseException\
    \ e) {\n            return false;\n        }\n        if (dateToCheck == null\
    \ || dateToCheck2 == null) {\n            return false;\n        }\n        if\
    \ (dateToCheck.before(new Date(System.currentTimeMillis() - 86400000)) || dateToCheck.after(new\
    \ Date(System.currentTimeMillis() + 86400000))\n                || dateToCheck2.before(new\
    \ Date(System.currentTimeMillis() - 86400000 + 86400)) || dateToCheck2.after(new\
    \ Date(System.currentTimeMillis() + 86400000 + 86400))) {\n            return\
    \ false;\n        }\n        return dateToCheck.equals(dateToCheck2);\n    }\n\
    \    public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbvk3yys4.java:28: error: cannot find symbol\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpbvk3yys4.java:28: error: cannot find symbol\n\
    \        SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n      \
    \                             ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmpbvk3yys4.java:33: error: cannot find symbol\n       \
    \     SimpleDateFormat sdf2 = new SimpleDateFormat(\"dd-MM-yyyy\");\n        \
    \    ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n/tmp/tmpbvk3yys4.java:33:\
    \ error: cannot find symbol\n            SimpleDateFormat sdf2 = new SimpleDateFormat(\"\
    dd-MM-yyyy\");\n                                        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpbvk3yys4.java:37: error: cannot find symbol\n\
    \            } catch (ParseException e) {\n                     ^\n  symbol: \
    \  class ParseException\n  location: class Problem\n/tmp/tmpbvk3yys4.java:40:\
    \ error: cannot find symbol\n        } catch (ParseException e) {\n          \
    \       ^\n  symbol:   class ParseException\n  location: class Problem\n/tmp/tmpbvk3yys4.java:43:\
    \ error: cannot find symbol\n        if (dateToCheck == null || dateToCheck2 ==\
    \ null) {\n                                   ^\n  symbol:   variable dateToCheck2\n\
    \  location: class Problem\n/tmp/tmpbvk3yys4.java:47: error: cannot find symbol\n\
    \                || dateToCheck2.before(new Date(System.currentTimeMillis() -\
    \ 86400000 + 86400)) || dateToCheck2.after(new Date(System.currentTimeMillis()\
    \ + 86400000 + 86400))) {\n                   ^\n  symbol:   variable dateToCheck2\n\
    \  location: class Problem\n/tmp/tmpbvk3yys4.java:47: error: cannot find symbol\n\
    \                || dateToCheck2.before(new Date(System.currentTimeMillis() -\
    \ 86400000 + 86400)) || dateToCheck2.after(new Date(System.currentTimeMillis()\
    \ + 86400000 + 86400))) {\n                                                  \
    \                                                 ^\n  symbol:   variable da"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean valid = false;\n        if\
    \ (date.length() > 0) {\n            String pattern = \"^(0?[1-9]|[12][0-9]|3[01])/(1[012]|0?[1-9])-(20[01]|19|[1-2][0-9]|[12][0-9])$\"\
    ;\n            try {\n                Date dateTime = new SimpleDateFormat(pattern).parse(date);\n\
    \                valid = true;\n            } catch (ParseException e) {\n   \
    \             valid = false;\n            }\n        }\n        return valid;\n\
    \    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4tw172dz.java:31: error: cannot find symbol\n                Date\
    \ dateTime = new SimpleDateFormat(pattern).parse(date);\n                    \
    \                ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n\
    /tmp/tmp4tw172dz.java:33: error: cannot find symbol\n            } catch (ParseException\
    \ e) {\n                     ^\n  symbol:   class ParseException\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        java.util.Date date1=new SimpleDateFormat(\"\
    MM-dd-yyyy\").parse(date);\n        Calendar cal=Calendar.getInstance();\n   \
    \     int day=cal.get(Calendar.DAY_OF_MONTH);\n        int month=cal.get(Calendar.MONTH);\n\
    \        int year=cal.get(Calendar.YEAR);\n        int days=day-month+((month==2)?1:0);\n\
    \        days=days>31?31:days;\n        days=days>30?30:days;\n        days=days>29?29:days;\n\
    \        days=days<1?1:days;\n        if(date1==null)\n            return false;\n\
    \        if(date1.before(new Date()))\n            return false;\n        if(date1.after(new\
    \ Date(year,month+((month==2)?1:0),day)))\n            return false;\n       \
    \ return true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1iu2umdk.java:27: error: cannot find symbol\n        java.util.Date\
    \ date1=new SimpleDateFormat(\"MM-dd-yyyy\").parse(date);\n                  \
    \               ^\n  symbol:   class SimpleDateFormat\n  location: class Problem\n\
    Note: /tmp/tmp1iu2umdk.java uses or overrides a deprecated API.\nNote: Recompile\
    \ with -Xlint:deprecation for details.\n1 error\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // code goes here\n        return\
    \ date.matches(\"^(?:(?![\\\\-+*\\\\/])[\\\\-+*\\\\/][0-1][0-9][1-9][0-1][0-9][1-9][0-9]*)$\"\
    );\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptf0r6549.java:31)\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // (1) Check if date is empty.\n \
    \       if (date.equals(\"\")) {\n            return false;\n        }\n     \
    \   // (2) Check if days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n        if (date.contains(\"-\")) {\n            String[]\
    \ dateArray = date.split(\"-\");\n            int days = Integer.valueOf(dateArray[0]);\n\
    \            int month = Integer.valueOf(dateArray[1]);\n            int year\
    \ = Integer.valueOf(dateArray[2]);\n            int totalDays = daysInMonth(month,\
    \ year);\n            if (totalDays > days) {\n                return false;\n\
    \            }\n        }\n        // (3) Check if months should not be less than\
    \ 1 or higher than 12.\n        if (date.contains(\"/\")) {\n            String[]\
    \ dateArray = date.split(\"/\");\n            int year = Integer.valueOf(dateArray[0]);\n\
    \            int month = Integer.valueOf(dateArray[1]);\n            if (month\
    \ < 1 || month > 12) {\n                return false;\n            }\n       \
    \ }\n        // (4) Check if date should be in the format: mm-dd-yyyy\n      \
    \  if (date.contains(\"-\")) {\n            String[] dateArray = date.split(\"\
    -\");\n            int month = Integer.valueOf(dateArray[0]);\n            int\
    \ year = Integer.valueOf(dateArray[1]);\n            String monthStr;\n      \
    \      if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8\
    \ || month == 10 || month == 12) {\n                monthStr = \"0\" + month;\n\
    \            } else {\n                monthStr = month + \"\";\n            }\n\
    \            String dayStr;\n            if (month == 1 || month == 3 || month\
    \ == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n        \
    \        dayStr = \"0\" + Integer.valueOf(dateArray[2]);\n            } else {\n\
    \                dayStr = Integer.valueOf(dateArray[2]);\n            }\n    \
    \        return monthStr.equals(month) && dayStr.equals(dayStr);\n        }\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpklcfoe4t.java:37: error: cannot find symbol\n            int totalDays\
    \ = daysInMonth(month, year);\n                            ^\n  symbol:   method\
    \ daysInMonth(int,int)\n  location: class Problem\n/tmp/tmpklcfoe4t.java:66: error:\
    \ incompatible types: Integer cannot be converted to String\n                dayStr\
    \ = Integer.valueOf(dateArray[2]);\n                                        ^\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (!(date.equals(\"\"))) {\n    \
    \        try{\n            SimpleDateFormat format = new SimpleDateFormat(\"dd-MM-yyyy\"\
    );\n            Date date1 = format.parse(date);\n            Calendar c = Calendar.getInstance();\n\
    \            c.setTime(date1);\n            if (c.get(Calendar.DAY_OF_MONTH) <\
    \ 1 || c.get(Calendar.DAY_OF_MONTH) > 31\n                    || c.get(Calendar.MONTH)\
    \ < 1 || c.get(Calendar.MONTH) > 12\n                    || c.get(Calendar.YEAR)\
    \ < 1) {\n                return false;\n            }\n            else if (c.get(Calendar.DAY_OF_MONTH)\
    \ < 1 || c.get(Calendar.DAY_OF_MONTH) > 30\n                    || c.get(Calendar.MONTH)\
    \ < 1 || c.get(Calendar.MONTH) > 2\n                    || c.get(Calendar.YEAR)\
    \ < 1) {\n                return false;\n            }\n            else if (c.get(Calendar.DAY_OF_MONTH)\
    \ < 1 || c.get(Calendar.DAY_OF_MONTH) > 29\n                    || c.get(Calendar.MONTH)\
    \ < 2 || c.get(Calendar.MONTH) > 12\n                    || c.get(Calendar.YEAR)\
    \ < 1) {\n                return false;\n            }\n            else{\n  \
    \              return true;\n            }\n            }\n            catch(Exception\
    \ e) {\n                return false;\n            }\n        }\n        else\
    \ {\n            return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5_51zjzs.java:29: error: cannot find symbol\n            SimpleDateFormat\
    \ format = new SimpleDateFormat(\"dd-MM-yyyy\");\n            ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmp5_51zjzs.java:29: error:\
    \ cannot find symbol\n            SimpleDateFormat format = new SimpleDateFormat(\"\
    dd-MM-yyyy\");\n                                          ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Write your code here\n        String[]\
    \ dateArray = date.split(\"-\");\n        \n        String month = dateArray[0];\n\
    \        String day = dateArray[1];\n        \n        if (month.length() > 2\
    \ || month.length() < 1 || day.length() > 3 || day.length() < 1 || day.length()\
    \ < 10) {\n            return false;\n        }\n        if (month.length() >\
    \ 1 || month.length() < 4) {\n            return false;\n        }\n        if\
    \ (day.length() > 2 || day.length() < 1) {\n            return false;\n      \
    \  }\n        \n        if(day.length() < 10) {\n            String firstdigit\
    \ = day.substring(0,1);\n            String seconddigit = day.substring(1,2);\n\
    \            String thirddigit = day.substring(2,3);\n            \n         \
    \   if(firstdigit.length() > 1) {\n                return false;\n           \
    \ }\n            if(firstdigit.length() < 1) {\n                return false;\n\
    \            }\n            if(seconddigit.length() > 1) {\n                return\
    \ false;\n            }\n            if(seconddigit.length() < 1) {\n        \
    \        return false;\n            }\n            if(thirddigit.length() > 2)\
    \ {\n                return false;\n            }\n            if(thirddigit.length()\
    \ < 1) {\n                return false;\n            }\n        }\n        \n\
    \        \n        if(month.equals(\"04\")) {\n            if(day.length() < 10)\
    \ {\n                return false;\n            }\n            if(day.length()\
    \ > 2) {\n                return false;\n            }\n        }\n        if\
    \ (month.equals(\"06\")) {\n            if(day.length() < 10) {\n            \
    \    return false;\n            }\n            if(day.length() > 2) {\n      \
    \          return false;\n            }\n        }\n        if (month.equals(\"\
    09\")) {\n            if(day.length() < 10) {\n                return false;\n\
    \            }\n            if(day.length() > 2) {\n                return false;\n\
    \            }\n        }\n        if (month.equals(\"11\")) {\n            if(day.length()\
    \ < 10) {\n                return false;\n            }\n            if(day.length()\
    \ > 2) {\n                return false;\n            }\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(validDate((\"\
    03-11-2000\")) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n\
    \    assert(validDate((\"04-0-2040\")) == (false));\n    assert(validDate((\"\
    06-04-2020\")) == (true));\n    assert(validDate((\"01-01-2007\")) == (true));\n\
    \    assert(validDate((\"03-32-2011\")) == (false));\n    assert(validDate((\"\
    \")) == (false));\n    assert(validDate((\"04-31-3000\")) == (false));\n    assert(validDate((\"\
    06-06-2005\")) == (true));\n    assert(validDate((\"21-31-2000\")) == (false));\n\
    \    assert(validDate((\"04-12-2003\")) == (true));\n    assert(validDate((\"\
    04122003\")) == (false));\n    assert(validDate((\"20030412\")) == (false));\n\
    \    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"2003-04-12\"\
    )) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptk7hi_e4.java:104)\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date.matches(\"\")) {\n      \
    \      return false;\n        }\n        int month[] = date.split(\"-\")[2].split(\"\
    -\");\n        int day[] = date.split(\"-\")[1].split(\"-\");\n        int year\
    \ = date.split(\"-\")[0];\n        int monthCount[] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \        int dayCount[] = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n        int\
    \ yearCount[] = {0,30,29,30,30,30,30,30,30,30,30,30,30,30};\n        if (month\
    \ < 1 || month > 12) {\n            return false;\n        }\n        if (day\
    \ < 1 || day > 31) {\n            return false;\n        }\n        if (monthCount[month-1]\
    \ < 1 || monthCount[month-1] > 31) {\n            return false;\n        }\n \
    \       if (dayCount[day-1] < 1 || dayCount[day-1] > 30) {\n            return\
    \ false;\n        }\n        if (yearCount[year-1] < 1 || yearCount[year-1] >\
    \ 30) {\n            return false;\n        }\n        return true;\n    }\n \
    \   public static void main(String[] args) {\n    assert(validDate((\"03-11-2000\"\
    )) == (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb75eo422.java:30: error: incompatible types: String[] cannot be\
    \ converted to int[]\n        int month[] = date.split(\"-\")[2].split(\"-\");\n\
    \                                              ^\n/tmp/tmpb75eo422.java:31: error:\
    \ incompatible types: String[] cannot be converted to int[]\n        int day[]\
    \ = date.split(\"-\")[1].split(\"-\");\n                                     \
    \       ^\n/tmp/tmpb75eo422.java:32: error: incompatible types: String cannot\
    \ be converted to int\n        int year = date.split(\"-\")[0];\n            \
    \                      ^\n/tmp/tmpb75eo422.java:36: error: bad operand types for\
    \ binary operator '<'\n        if (month < 1 || month > 12) {\n              \
    \    ^\n  first type:  int[]\n  second type: int\n/tmp/tmpb75eo422.java:36: error:\
    \ bad operand types for binary operator '>'\n        if (month < 1 || month >\
    \ 12) {\n                               ^\n  first type:  int[]\n  second type:\
    \ int\n/tmp/tmpb75eo422.java:39: error: bad operand types for binary operator\
    \ '<'\n        if (day < 1 || day > 31) {\n                ^\n  first type:  int[]\n\
    \  second type: int\n/tmp/tmpb75eo422.java:39: error: bad operand types for binary\
    \ operator '>'\n        if (day < 1 || day > 31) {\n                         \
    \  ^\n  first type:  int[]\n  second type: int\n/tmp/tmpb75eo422.java:42: error:\
    \ bad operand types for binary operator '-'\n        if (monthCount[month-1] <\
    \ 1 || monthCount[month-1] > 31) {\n                            ^\n  first type:\
    \  int[]\n  second type: int\n/tmp/tmpb75eo422.java:42: error: bad operand types\
    \ for binary operator '-'\n        if (monthCount[month-1] < 1 || monthCount[month-1]\
    \ > 31) {\n                                                       ^\n  first type:\
    \  int[]\n  second type: int\n/tmp/tmpb75eo422.java:45: error: bad operand types\
    \ for binary operator '-'\n        if (dayCount[day-1] < 1 || dayCount[day-1]\
    \ > 30) {\n                        ^\n  first type:  int[]\n  second type: int\n\
    /tmp/tmpb75eo422.java:45: error: bad operand types for binary operator '-'\n \
    \       if (dayCount[day-1] < 1 || dayCount[day-1] > 30) {\n             "
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        SimpleDateFormat sdf = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n        Date date1 = null;\n        try {\n            date1 =\
    \ sdf.parse(date);\n        } catch (ParseException e) {\n            e.printStackTrace();\n\
    \            return false;\n        }\n        Calendar cal = Calendar.getInstance();\n\
    \        cal.setTime(date1);\n        int month1 = cal.get(Calendar.MONTH);\n\
    \        int day1 = cal.get(Calendar.DAY_OF_MONTH);\n        int year1 = cal.get(Calendar.YEAR);\n\
    \        if(day1 < 1 || day1 > 31){\n            return false;\n        }\n  \
    \      if(month1 < 1 || month1 > 12){\n            return false;\n        }\n\
    \        cal.setTime(date1);\n        int month2 = cal.get(Calendar.MONTH);\n\
    \        int day2 = cal.get(Calendar.DAY_OF_MONTH);\n        int year2 = cal.get(Calendar.YEAR);\n\
    \        if(month2 < 1 || month2 > 12){\n            return false;\n        }\n\
    \        if(month1 == month2 && day1 < 1 || day1 > 30){\n            return false;\n\
    \        }\n        if(year1 < 1 || year1 > year2){\n            return false;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg3a6e6nf.java:27: error: cannot find symbol\n        SimpleDateFormat\
    \ sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n        ^\n  symbol:   class SimpleDateFormat\n\
    \  location: class Problem\n/tmp/tmpg3a6e6nf.java:27: error: cannot find symbol\n\
    \        SimpleDateFormat sdf = new SimpleDateFormat(\"MM-dd-yyyy\");\n      \
    \                             ^\n  symbol:   class SimpleDateFormat\n  location:\
    \ class Problem\n/tmp/tmpg3a6e6nf.java:31: error: cannot find symbol\n       \
    \ } catch (ParseException e) {\n                 ^\n  symbol:   class ParseException\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        boolean res = false;\n        if(date\
    \ != null) {\n            if(date.length() >= 4) {\n                try {\n  \
    \                  SimpleDateFormat df = new SimpleDateFormat(\"MM-dd-yyyy\");\n\
    \                    df.setLenient(false);\n                    Date d = df.parse(date);\n\
    \                    Calendar c = Calendar.getInstance();\n                  \
    \  c.setTime(d);\n                    int days = c.getActualMaximum(Calendar.DAY_OF_MONTH);\n\
    \                    if((days > 0) && (days < 31)){\n                        if(c.getActualMinimum(Calendar.MONTH)\
    \ == Calendar.JANUARY) {\n                            days = 31;\n           \
    \             }\n                        if((c.getActualMinimum(Calendar.MONTH)\
    \ == Calendar.APRIL) && (c.getActualMaximum(Calendar.MONTH) == Calendar.SEPTEMBER))\
    \ {\n                            days = 30;\n                        }\n     \
    \                   if((c.getActualMinimum(Calendar.MONTH) == Calendar.OCTOBER)\
    \ && (c.getActualMaximum(Calendar.MONTH) == Calendar.NOVEMBER)) {\n          \
    \                  days = 29;\n                        }\n                   \
    \ }\n                    if((days > 0) && (days < 30)){\n                    \
    \    if(c.getActualMinimum(Calendar.MONTH) == Calendar.FEBRUARY) {\n         \
    \                   days = 29;\n                        }\n                  \
    \      if((c.getActualMinimum(Calendar.MONTH) == Calendar.DECEMBER) && (c.getActualMaximum(Calendar.MONTH)\
    \ == Calendar.JULY)) {\n                            days = 28;\n             \
    \           }\n                    }\n                    if((days > 0) && (days\
    \ < 29)){\n                        if((c.getActualMinimum(Calendar.MONTH) == Calendar.DECEMBER)\
    \ && (c.getActualMaximum(Calendar.MONTH) == Calendar.JULY)) {\n              \
    \              days = 28;\n                        }\n                    }\n\
    \                    if((days > 0) && (days < 28)) {\n                       \
    \ if(c.getActualMinimum(Calendar.MONTH) == Calendar.JULY) {\n                \
    \            days = 27;\n                        }\n                    }\n  \
    \                  if((days > 0) && (days < 27)) {\n                        if(c.getActualMinimum(Calendar.MONTH)\
    \ == Calendar.JULY) {\n                            days = 26;\n              \
    \          }\n                    }\n                    if((days > 0) && (days\
    \ < 26)) {\n                        if(c.getActualMinimum(Calendar.MONTH) == Calendar.JULY)\
    \ {\n                            days = 25;\n                        }\n     \
    \               }\n                    if((days > 0) && (days < 25)) {\n     \
    \                   if(c.getActualMinimum(Calendar.MONTH) == Calendar.JULY) {\n\
    \                            days = 24;\n                        }\n         \
    \           }\n                    if((days > 0) && (days < \n    }\n    public\
    \ static void main(String[] args) {\n    assert(validDate((\"03-11-2000\")) ==\
    \ (true));\n    assert(validDate((\"15-01-2012\")) == (false));\n    assert(validDate((\"\
    04-0-2040\")) == (false));\n    assert(validDate((\"06-04-2020\")) == (true));\n\
    \    assert(validDate((\"01-01-2007\")) == (true));\n    assert(validDate((\"\
    03-32-2011\")) == (false));\n    assert(validDate((\"\")) == (false));\n    assert(validDate((\"\
    04-31-3000\")) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n\
    \    assert(validDate((\"21-31-2000\")) == (false));\n    assert(validDate((\"\
    04-12-2003\")) == (true));\n    assert(validDate((\"04122003\")) == (false));\n\
    \    assert(validDate((\"20030412\")) == (false));\n    assert(validDate((\"2003-04\"\
    )) == (false));\n    assert(validDate((\"2003-04-12\")) == (false));\n    assert(validDate((\"\
    04-2003\")) == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7jsa66nk.java:82: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmp7jsa66nk.java:30: error: 'try' without 'catch', 'finally' or resource\
    \ declarations\n                try {\n                ^\n/tmp/tmp7jsa66nk.java:83:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        return !date.isEmpty() && dayCount(date)\
    \ == 31 &&\n            monthCount(date) == 12 && yearCount(date) == 4 &&\n  \
    \          isValidDate(date);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1huxdle_.java:27: error: cannot find symbol\n        return !date.isEmpty()\
    \ && dayCount(date) == 31 &&\n                                  ^\n  symbol: \
    \  method dayCount(String)\n  location: class Problem\n/tmp/tmp1huxdle_.java:28:\
    \ error: cannot find symbol\n            monthCount(date) == 12 && yearCount(date)\
    \ == 4 &&\n            ^\n  symbol:   method monthCount(String)\n  location: class\
    \ Problem\n/tmp/tmp1huxdle_.java:28: error: cannot find symbol\n            monthCount(date)\
    \ == 12 && yearCount(date) == 4 &&\n                                      ^\n\
    \  symbol:   method yearCount(String)\n  location: class Problem\n/tmp/tmp1huxdle_.java:29:\
    \ error: cannot find symbol\n            isValidDate(date);\n            ^\n \
    \ symbol:   method isValidDate(String)\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        // Your code here...\n        // You\
    \ will have to convert the string date to an array of integers that\n        //\
    \ represent the month and day in the order of the months in your calendar.\n \
    \       // Then you will have to convert the given date string to an array of\
    \ integers that\n        // represents the month and day in the order of the months\
    \ in your calendar.\n        // Then you will have to find the difference between\
    \ the given date string and your\n        // array of days for the given month\
    \ and then you will have to find whether\n        // or not there is a leap year\
    \ in which case you will have to add 360 days and\n        // subtract the number\
    \ of days from your array of days for the given month and then\n        // you\
    \ will have to find the difference between the number of days and the\n      \
    \  // number of days in your array of leap years for the given month.\n      \
    \  // Then you will have to check if the given date string is greater than the\
    \ given\n        // date in your array of days for the given month.\n        //\
    \ If everything is fine you should return true.\n        // If everything is not\
    \ fine you should return false.\n    }\n    public static void main(String[] args)\
    \ {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkgr7zdzq.java:42: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011781
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You have to write a function which validates a given date\
    \ string and\n    // returns true if the date is valid otherwise false.\n    //\
    \ The date is valid if all of the following rules are satisfied:\n    // 1. The\
    \ date string is not empty.\n    // 2. The number of days is not less than 1 or\
    \ higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not\
    \ less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days\
    \ is not less than 1 or higher than 29 for the month 2.\n    // 3. The months\
    \ should not be less than 1 or higher than 12.\n    // 4. The date should be in\
    \ the format: mm-dd-yyyy\n    // >>> validDate((\"03-11-2000\"))\n    // (true)\n\
    \    // >>> validDate((\"15-01-2012\"))\n    // (false)\n    // >>> validDate((\"\
    04-0-2040\"))\n    // (false)\n    // >>> validDate((\"06-04-2020\"))\n    //\
    \ (true)\n    // >>> validDate((\"06/04/2020\"))\n    // (false)\n    public static\
    \ boolean validDate(String date) {\n        if (date == null || date.trim().isEmpty())\
    \ {\n            return false;\n        }\n        int year = 0;\n        int\
    \ month = 0;\n        int day = 0;\n        try {\n            SimpleDateFormat\
    \ dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\");\n            date = dateFormat.parse(date);\n\
    \            year = date.getYear();\n            month = date.getMonth() + 1;\n\
    \            day = date.getDate();\n            if (month < 1 || month > 12) {\n\
    \                return false;\n            }\n            if (day < 1 || day\
    \ > 31) {\n                return false;\n            }\n            if (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) {\n                if (day < 1 || day > 30) {\n            \
    \        return false;\n                }\n            }\n            else if\
    \ (month == 4 || month == 6 || month == 9 || month == 11) {\n                if\
    \ (day < 1 || day > 29) {\n                    return false;\n               \
    \ }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(validDate((\"03-11-2000\")) == (true));\n    assert(validDate((\"\
    15-01-2012\")) == (false));\n    assert(validDate((\"04-0-2040\")) == (false));\n\
    \    assert(validDate((\"06-04-2020\")) == (true));\n    assert(validDate((\"\
    01-01-2007\")) == (true));\n    assert(validDate((\"03-32-2011\")) == (false));\n\
    \    assert(validDate((\"\")) == (false));\n    assert(validDate((\"04-31-3000\"\
    )) == (false));\n    assert(validDate((\"06-06-2005\")) == (true));\n    assert(validDate((\"\
    21-31-2000\")) == (false));\n    assert(validDate((\"04-12-2003\")) == (true));\n\
    \    assert(validDate((\"04122003\")) == (false));\n    assert(validDate((\"20030412\"\
    )) == (false));\n    assert(validDate((\"2003-04\")) == (false));\n    assert(validDate((\"\
    2003-04-12\")) == (false));\n    assert(validDate((\"04-2003\")) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5t7dub80.java:34: error: cannot find symbol\n            SimpleDateFormat\
    \ dateFormat = new SimpleDateFormat(\"MM-dd-yyyy\");\n            ^\n  symbol:\
    \   class SimpleDateFormat\n  location: class Problem\n/tmp/tmp5t7dub80.java:34:\
    \ error: cannot find symbol\n            SimpleDateFormat dateFormat = new SimpleDateFormat(\"\
    MM-dd-yyyy\");\n                                              ^\n  symbol:   class\
    \ SimpleDateFormat\n  location: class Problem\n/tmp/tmp5t7dub80.java:36: error:\
    \ cannot find symbol\n            year = date.getYear();\n                   \
    \    ^\n  symbol:   method getYear()\n  location: variable date of type String\n\
    /tmp/tmp5t7dub80.java:37: error: cannot find symbol\n            month = date.getMonth()\
    \ + 1;\n                        ^\n  symbol:   method getMonth()\n  location:\
    \ variable date of type String\n/tmp/tmp5t7dub80.java:38: error: cannot find symbol\n\
    \            day = date.getDate();\n                      ^\n  symbol:   method\
    \ getDate()\n  location: variable date of type String\n5 errors\n"
  stdout: ''
  timestamp: 1660011781
