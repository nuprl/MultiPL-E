name: HumanEval_111_histogram
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a string representing a space separated lowercase\
  \ letters, return a hash map\n    // of the letter with the most repetition and\
  \ containing the corresponding count.\n    // If several letters have the same occurrence,\
  \ return all of them.\n    // Example:\n    // >>> histogram((\"a b c\"))\n    //\
  \ (new HashMap<String,Long>(Map.of(\"a\", 1l, \"b\", 1l, \"c\", 1l)))\n    // >>>\
  \ histogram((\"a b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"a\", 2l, \"\
  b\", 2l)))\n    // >>> histogram((\"a b c a b\"))\n    // (new HashMap<String,Long>(Map.of(\"\
  a\", 2l, \"b\", 2l)))\n    // >>> histogram((\"b b b b a\"))\n    // (new HashMap<String,Long>(Map.of(\"\
  b\", 4l)))\n    // >>> histogram((\"\"))\n    // (new HashMap<String,Long>())\n\
  \    public static HashMap<String,Long> histogram(String test) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(histogram((\"\
  a b b a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 2l, \"b\", 2l)))));\n\
  \    assert(histogram((\"a b c a b\")).equals((new HashMap<String,Long>(Map.of(\"\
  a\", 2l, \"b\", 2l)))));\n    assert(histogram((\"a b c d g\")).equals((new HashMap<String,Long>(Map.of(\"\
  a\", 1l, \"b\", 1l, \"c\", 1l, \"d\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\
  r t g\")).equals((new HashMap<String,Long>(Map.of(\"r\", 1l, \"t\", 1l, \"g\", 1l)))));\n\
  \    assert(histogram((\"b b b b a\")).equals((new HashMap<String,Long>(Map.of(\"\
  b\", 4l)))));\n    assert(histogram((\"r t g\")).equals((new HashMap<String,Long>(Map.of(\"\
  r\", 1l, \"t\", 1l, \"g\", 1l)))));\n    assert(histogram((\"\")).equals((new HashMap<String,Long>())));\n\
  \    assert(histogram((\"a\")).equals((new HashMap<String,Long>(Map.of(\"a\", 1l)))));\n\
  \    }\n\n}\n"
completions: ["        if(test.isEmpty()){\n            return new HashMap<String,Long>();\n\
    \        }\n\n        HashMap<String,Long> histogram = new HashMap<String,Long>();\n\
    \n        StringTokenizer tokenizer = new StringTokenizer(test, \" \");\n    \
    \    while(tokenizer.hasMoreTokens()){\n            String token = tokenizer.nextToken();\n\
    \            Long count = histogram.get(token);\n            if(count == null){\n\
    \                histogram.put(token, 1l);\n            } else {\n           \
    \     histogram.put(token, count + 1l);\n            }\n        }\n        return\
    \ histogram;", "        HashMap<String,Long> result = new HashMap<String,Long>();\n\
    \        test.split(\" \")\n            .stream()\n            .map(String::trim)\n\
    \            .forEach(word -> {\n            long value = result.getOrDefault(word,\
    \ 0L);\n            result.put(word, value + 1);\n        });\n        return\
    \ result;", "        HashMap<String,Long> result = new HashMap<>();\n        if\
    \ (test.length() == 0) {\n            return result;\n        }\n        String[]\
    \ words = test.split(\" \");\n        for (String word : words) {\n          \
    \  String key = word.toLowerCase();\n            if (result.containsKey(key))\
    \ {\n                long value = result.get(key);\n                result.replace(key,\
    \ value + 1, value + 1);\n            } else {\n                result.put(key,\
    \ 1);\n            }\n        }\n        return result;", "        return test.chars()\n\
    \            .mapToObj(c -> String.valueOf(String.format(\"%c\", c))).flatMap(s\
    \ -> Arrays.stream(s.split(\" \")).map(c -> String.format(\"%c %lu\", c, s.split(\"\
    \ \").length - 1)).collect(Collectors.groupingBy(s -> s, Collectors.counting()))).entrySet().stream()\n\
    \            .max(Comparator.comparing(e -> e.getValue())).map(Map.Entry::getKey).collect(Collectors.toMap(k\
    \ -> k, k -> 1l));", "        HashMap<String,Long> countMap = new HashMap<String,Long>();\n\
    \        String[] words = test.split(\" \");\n        HashMap<String,Long> mostCountLetter\
    \ = new HashMap<String,Long>();\n\n        for (String word : words) {\n     \
    \       Long count = countMap.get(word);\n            if (count == null) {\n \
    \               count = 1;\n            }\n            countMap.put(word, ++count);\n\
    \        }\n\n        for (String word : countMap.keySet()) {\n            Long\
    \ count = countMap.get(word);\n            if (count == null) {\n            \
    \    count = 1;\n            }\n            if (count > mostCountLetter.getOrDefault(word,\
    \ 0)) {\n                mostCountLetter.put(word, count);\n            }\n  \
    \      }\n\n        return mostCountLetter;", "        HashMap<String,Long> histo\
    \ = new HashMap<>();\n        HashMap<String,Long> histo2 = new HashMap<>();\n\
    \        for (String s : test.split(\" \")) {\n            long count = histo.computeIfAbsent(s,\
    \ i -> 0L);\n            histo.put(s, count + 1);\n            histo2.put(s, count);\n\
    \        }\n        return histo.entrySet().stream().filter(e -> e.getValue()\
    \ == histo2.get(e.getKey()))\n                .collect(Collectors.toMap(e -> e.getKey(),\
    \ e -> e.getValue()));", "        HashMap<String,Long> map = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            if (map.containsKey(word)) {\n                Long count = map.get(word);\n\
    \                map.put(word, new Long(count.longValue() + 1));\n           \
    \ } else {\n                map.put(word, new Long(1));\n            }\n     \
    \   }\n        return map;", "        if (test.isEmpty()){\n            return\
    \ new HashMap<String,Long>();\n        }\n        HashMap<String,Long> map = new\
    \ HashMap<String,Long>();\n        list.split(\" \").forEach(e -> {\n        \
    \    Long count = map.get(e);\n            if (count == null) {\n            \
    \    map.put(e, 1l);\n            } else {\n                map.put(e, count +\
    \ 1);\n            }\n        });\n        return map;", "        // Split test\
    \ into an array of strings\n        String[] arrayOfStrings = test.split(\" \"\
    );\n\n        // Create a HashMap\n        HashMap<String, Long> counts = new\
    \ HashMap<>();\n\n        // Iterate through all elements of the array of strings\n\
    \        for (String string : arrayOfStrings) {\n\n            // Check whether\
    \ this current string already has a counter in our counts map\n            if\
    \ (counts.containsKey(string)) {\n                // If it does, add the new occurrence\
    \ to the existing counter\n                counts.put(string, (counts.get(string)\
    \ + 1));\n            } else {\n                // If it doesn't, create a new\
    \ counter\n                counts.put(string, (1L));\n            }\n        }\n\
    \n        // Return the map with maximal occurrence\n        return counts;",
  "        HashMap<String,Long> result = new HashMap<String,Long>();\n        // use\
    \ streams to count occurrences of letters\n        test = test.replaceAll(\"\\\
    \\s\",\"\").toLowerCase();\n        test.chars().forEach(l -> {\n            if\
    \ (result.containsKey(l)) {\n                result.put(l, result.get(l) + 1);\n\
    \            } else {\n                result.put(l, 1l);\n            }\n   \
    \     });\n        return result;", "        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \n        // Convert input string to an array of lowercase letters\n        String[]\
    \ letters = test.split(\" \");\n\n        // For each letter, increment the count\
    \ for it in the map\n        for (String letter : letters) {\n            if (map.containsKey(letter))\
    \ {\n                map.put(letter, map.get(letter) + 1);\n            } else\
    \ {\n                map.put(letter, 1l);\n            }\n        }\n\n      \
    \  return map;", "        HashMap<String,Long> result = new HashMap<>();\n   \
    \     String[] strArr = test.split(\" \");\n        long max = 1;\n        for\
    \ (String s : strArr) {\n            if (result.containsKey(s)) {\n          \
    \      result.put(s, result.get(s) + 1);\n            } else {\n             \
    \   result.put(s, 1);\n            }\n            if (max < result.get(s)) {\n\
    \                max = result.get(s);\n            }\n        }\n        return\
    \ result;", "        // Your code here\n        HashMap<String, Long> histogram\
    \ = new HashMap<String, Long>();\n        String[] letters = test.split(\" \"\
    );\n        long max = 0;\n        String key;\n        for (String letter : letters)\
    \ {\n            long count = histogram.get(letter);\n            if (count ==\
    \ null) {\n                histogram.put(letter, 1l);\n            } else {\n\
    \                histogram.put(letter, count + 1);\n                if (count\
    \ > max) {\n                    max = count;\n                    key = letter;\n\
    \                }\n            }\n        }\n        return histogram.entrySet().stream().filter(e\
    \ -> e.getValue().equals(max)).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));",
  "        HashMap<String,Long> count = new HashMap<>();\n        for(String s: test.split(\"\
    \ \"))\n            count.put(s, count.get(s) + 1);\n        return count;", " \
    \       HashMap<String,Long> hm = new HashMap<String,Long>();\n        String[]\
    \ words = test.split(\" \");\n        for(String word : words) {\n           \
    \ String letter = word.toLowerCase().replaceAll(\"\\\\W\", \"\");\n          \
    \  Long count = hm.get(letter);\n            hm.put(letter, count == null ? 1L\
    \ : count + 1);\n        }\n        return hm;", "        return test.chars().distinct().boxed()\n\
    \            .collect(HashMap::new, (m, c) -> m.merge(c, 1, Math::max), HashMap::putAll);",
  "        return test.length() == 0 ? new HashMap<String,Long>()\n              \
    \  : test.chars().mapToObj(e -> (char)e).sorted()\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));", "        HashMap<String,Long> histogram = new HashMap<String,Long>();\n\
    \        String letters = test.split(\" \");\n        for (String letter : letters)\
    \ {\n            if (histogram.containsKey(letter)) {\n                histogram.put(letter,\
    \ histogram.get(letter) + 1);\n            } else {\n                histogram.put(letter,\
    \ 1l);\n            }\n        }\n        return histogram;", "        HashMap<String,Long>\
    \ result = new HashMap<String,Long>(Collections.emptyMap());\n        String[]\
    \ words = test.split(\" \");\n        for (String word : words) {\n          \
    \  String lowerCaseWord = word.toLowerCase();\n            Long count = result.get(lowerCaseWord);\n\
    \            if (count == null) {\n                result.put(lowerCaseWord, 1L);\n\
    \            } else {\n                result.put(lowerCaseWord, count + 1L);\n\
    \            }\n        }\n        return result;", "        HashMap<String,Long>\
    \ histo = new HashMap<>();\n        String[] arr = test.split(\" \");\n      \
    \  for (String s : arr) {\n            long count = histo.getOrDefault(s, 0L);\n\
    \            histo.put(s, count + 1L);\n        }\n        return histo;", '        return
    histogram(test, false);', "        HashMap<String,Long> result = new HashMap<>();\n\
    \        if (test.isEmpty())\n            return result;\n        test.trim().replaceAll(\"\
    \\\\s+\", \" \").replaceAll(\"\\\\s+\", \" \").replaceAll(\"^\\\\s\", \"\").replaceAll(\"\
    $\", \"\").split(\"\\\\s+\").forEach(x -> {\n            Long count = result.get(x);\n\
    \            if (count != null)\n                result.put(x, result.size() >\
    \ count ? count : result.size());\n            else\n                result.put(x,\
    \ 1);\n        });\n        return result;", "        HashMap<String,Long> result\
    \ = new HashMap<>();\n        Arrays.stream(test.split(\" \")).forEach(letter\
    \ -> {\n            long count = Collections.frequency(Arrays.asList(letter),\
    \ letter);\n            if (count > 0) {\n                result.put(letter, new\
    \ Long(count));\n            }\n        });\n        return result;", "      \
    \  HashMap<String,Long> map = new HashMap<>();\n        String[] list = test.split(\"\
    \ \");\n        for (String l : list) {\n            map.put(l, map.getOrDefault(l,\
    \ 0L) + 1);\n        }\n        return map;", "        HashMap<String,Long> result\
    \ = new HashMap<>();\n        for (String str : test.split(\" \"))\n         \
    \   str = str.toLowerCase();\n            for (String letter : str)\n        \
    \        if (!result.containsKey(letter)) result.put(letter, 1L);\n          \
    \      else\n                    result.put(letter, result.get(letter) + 1);\n\
    \            return result;", "        return Arrays.stream(test.split(\" \"))\n\
    \                .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()))\n\
    \                .entrySet().stream()\n                .collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (l,r) -> l, LinkedHashMap::new));", "        if (test.isEmpty())\
    \ {\n            return new HashMap<String,Long>();\n        }\n        HashMap<String,Long>\
    \ ret = new HashMap<String,Long>();\n        String[] array = test.split(\" \"\
    );\n        Arrays.stream(array).forEach(i -> {\n            int count = 1;\n\
    \            for (int j = 0; j < i.length(); ++j) {\n                if (ret.containsKey(i.substring(j,\
    \ j + 1))) {\n                    count = ret.get(i.substring(j, j + 1)).intValue()\
    \ + 1;\n                }\n                ret.put(i.substring(j, j + 1), count);\n\
    \            }\n        });\n        return ret;", "        HashMap<String,Long>\
    \ result = new HashMap<>();\n        test.split(\" \").stream().forEach(t -> {\n\
    \            try {\n                result.merge(t,1l,(old,new) -> old+new);\n\
    \            } catch (IllegalArgumentException ex) {\n                result.put(t,\
    \ 1l);\n            }\n        });\n        return result;", "        HashMap<String,Long>\
    \ hashMap = new HashMap<String,Long>();\n        Set<String> set = Arrays.stream(test.split(\"\
    \ \")).collect(Collectors.toSet());\n        Long count = set.stream().distinct().count();\n\
    \        set.stream().forEach(s -> hashMap.put(s, hashMap.getOrDefault(s, 0L)\
    \ + count));\n        return hashMap;", "        if (test==null || test.isEmpty())\
    \ {\n            return new HashMap<String,Long>();\n        }\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] splitted = test.split(\"\
    \ \");\n        for(String s : splitted) {\n            result.put(s, new Long(splitted.length));\n\
    \        }\n        return result;", "        HashMap<String,Long> map = new HashMap<>();\n\
    \        for (char ch : test.toCharArray()) {\n            map.put(String.valueOf(ch),map.getOrDefault(String.valueOf(ch),0L)+1);\n\
    \        }\n        return map;", "        String s = test.trim().toLowerCase();\n\
    \        HashMap<String,Long> result = new HashMap<String,Long>();\n        for(char\
    \ c:s.toCharArray()) {\n            long occurrence = Collections.frequency(s.toCharArray(),c);\n\
    \            if(result.containsKey(c)) {\n                result.put(c,result.get(c)+occurrence);\n\
    \            } else {\n                result.put(c,occurrence);\n           \
    \ }\n        }\n        return result;", "        HashMap<String,Long> result\
    \ = new HashMap<String,Long>(26);\n        Arrays.stream(test.split(\" \")).forEach(x\
    \ -> {\n            int index = x.charAt(0) - 'a';\n            long count = result.containsKey(x)\
    \ ? result.get(x) + 1 : 1l;\n            result.put(String.valueOf(index), count);\n\
    \        });\n        return result;", "        HashMap<String,Long> result =\
    \ new HashMap<String,Long>(Map.of());\n        for (char c : test.toCharArray())\
    \ {\n            String key = String.valueOf(c);\n            Long current = result.get(key);\n\
    \            result.put(key, current == null ? 1l : current + 1);\n        }\n\
    \        return result;", "        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        for (String word : test.split(\" \")) {\n            long count = map.getOrDefault(word,0L);\n\
    \            map.put(word,++count);\n        }\n        return map;", "      \
    \  HashMap<String,Long> map = new HashMap<>();\n        String[] words = test.split(\"\
    \ \");\n        for (int i = 0; i < words.length; i++) {\n            if (words[i].length()\
    \ > 1) map.put(words[i], Long.valueOf(words[i].length()));\n        }\n      \
    \  return map;", "        HashMap<String,Long> result = new HashMap<String,Long>();\n\
    \        if(test.isEmpty()) {\n            return result;\n        }\n       \
    \ String[] tokens = test.split(\" \");\n        for(String token : tokens) {\n\
    \            Long count = result.get(token);\n            if(count == null) {\n\
    \                result.put(token, 1L);\n            } else {\n              \
    \  result.put(token, count.longValue() + 1L);\n            }\n        }\n    \
    \    return result;", "        HashMap<String,Long> result = new HashMap<>();\n\
    \        if (test == null || test.isEmpty()) {\n            return result;\n \
    \       }\n\n        // Splitting string into separate letters\n        ArrayList\
    \ <String> letters = Arrays.asList(test.split(\" \"));\n\n        Collections.frequency(letters,letters.get(0));\n\
    \        HashSet<String> repeated = new HashSet<>(letters);\n\n        for(String\
    \ item : letters) {\n            Collections.frequency(repeated, item);\n    \
    \    }\n        return result;", "        Map<String,Long> result = new HashMap<>();\n\
    \        String[] arr = test.split(\" \");\n        for (int i = 0; i < arr.length;\
    \ i++) {\n            String s = arr[i];\n            Long count = result.get(s);\n\
    \            result.put(s, count + (count != null ? 1 : 0));\n        }\n    \
    \    return result;", "        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        for(String s : test.split(\" \")) {\n            map.put(s, new Long(map.get(s)==null\
    \ ? 0 : map.get(s)+1));\n        }\n        return map;", "        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] tests = test.split(\" \");\n   \
    \     for (String t : tests) {\n            Long count = result.containsKey(t)\
    \ ? result.get(t) : 0L;\n            result.put(t,count+1);\n        }\n     \
    \   return result;", "        HashMap<String,Long> counts = new HashMap<String,Long>();\n\
    \        Arrays.stream(test.trim().split(\" \")).map(l -> {\n            String\
    \ key = l;\n            if (counts.get(key) == null) {\n                counts.put(key,\
    \ 1l);\n            } else {\n                counts.put(key, counts.get(key)\
    \ + 1);\n            }\n            return key;\n        }).forEach(key -> counts.put(key,\
    \ counts.get(key)));\n        HashMap<String,Long> sorted = new HashMap<String,Long>(counts);\n\
    \        sorted.entrySet().stream().sorted(Map.Entry.comparingByValue()).forEach(e\
    \ -> {\n            if (e.getValue() > 1) {\n                sorted.put(e.getKey(),\
    \ e.getValue());\n            }\n        });\n        return sorted;", "     \
    \   Map<String,Long> map = new HashMap<>();\n        Arrays.stream(test.split(\"\
    \ \")).forEach(t -> map.merge(t, 1l, Long::sum));\n        return map;", "   \
    \     HashMap<String,Long> counts = new HashMap<String,Long>();\n        if (test.length()\
    \ == 0) {\n            return new HashMap<String,Long>();\n        }\n       \
    \ String[] words = new String[test.length()];\n        Arrays.stream(test.split(\"\
    \ \")).forEach(s -> {\n            words[s.charAt(0) - 'a'] = words[s.charAt(0)\
    \ - 'a'] + 1;\n        });\n        return Arrays.stream(words).boxed().collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));", "        return HashMap.ofAll(\n            Arrays.stream(test.split(\"\
    \ \"))\n                .map(e -> new SimpleEntry<String,Long>(e.toLowerCase(),\
    \ 1L))\n                .collect(\n                    Collectors.groupingBy(\n\
    \                        Entry::getKey, Collectors.counting())))\n           \
    \ .get();", "        Map<String, Long> map = new HashMap<String,Long>();\n   \
    \     for (String word : test.split(\" \"))\n            map.merge(word, 1, (oldValue,\
    \ newValue) -> oldValue + newValue);\n        return map.entrySet().stream().max(Map.Entry.comparingByValue()).map(Map.Entry::getKey).collect(Collectors.toMap(\n\
    \                k -> k,\n                k -> 1L));", "        HashMap<String,Long>\
    \ result = new HashMap<>();\n        Set<String> uniqueLetters = new HashSet<>();\n\
    \        String[] tokens = test.split(\" \");\n        for (String letter : tokens)\
    \ {\n            if (!uniqueLetters.contains(letter)) {\n                uniqueLetters.add(letter);\n\
    \                result.put(letter, 1L);\n            }\n            else {\n\
    \                Long count = result.get(letter);\n                result.put(letter,\
    \ ++count);\n            }\n        }\n        return result;", "        List<String>\
    \ list = Arrays.asList(test.split(\" \"));\n        HashMap<String,Long> map =\
    \ new HashMap<>();\n\n        for (String word : list) {\n            Long count\
    \ = map.get(word);\n            Long oldCount = count == null ? 0L : count;\n\
    \            map.put(word, oldCount + 1L);\n        }\n\n        return map;",
  "        String words = test;\n        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        if (words == null || words.isEmpty()) {\n            map.putAll(Collections.emptyMap());\n\
    \        } else {\n            StringTokenizer st = new StringTokenizer(words);\n\
    \            while (st.hasMoreTokens()) {\n                String token = st.nextToken();\n\
    \                if (map.containsKey(token)) {\n                    map.put(token,\
    \ map.get(token) + 1);\n                } else {\n                    map.put(token,\
    \ 1l);\n                }\n            }\n        }\n        return map;", " \
    \       // Your code goes here\n        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        String[] splited = test.split(\" \");\n        for(String str: splited){\n\
    \            map.put(str,map.getOrDefault(str,0)+1);\n        }\n        \n  \
    \      \n        \n        return map;", "        HashMap<String,Long> histogram\
    \ = new HashMap<String,Long>();\n        String[] words = test.split(\" \");\n\
    \        \n        for( int i=0; i<words.length; i++ ) {\n            String word\
    \ = words[i];\n            histogram.put(word, histogram.getOrDefault(word, 0l)\
    \ + 1);\n        }\n        return histogram;", "        // TODO Implement\n \
    \       HashMap<String,Long> map = new HashMap<String,Long>();\n        String[]\
    \ arr = test.split(\" \");\n        \n        for(int i = 0; i < arr.length; i++){\n\
    \            if(map.containsKey(arr[i])){\n                map.put(arr[i], map.get(arr[i])\
    \ + 1);\n            } else {\n                map.put(arr[i], 1l);\n        \
    \    }\n        }\n        \n        return map;", "        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] tokens = test.split(\" \");\n     \
    \   for(String token : tokens) {\n            if(map.containsKey(token)) {\n \
    \               map.put(token, map.get(token) + 1);\n            }else {\n   \
    \             map.put(token, 1L);\n            }\n        }\n        return map;",
  "        HashMap<String,Long> result = new HashMap<>();\n        if (test.isEmpty())\
    \ return result;\n        Stream<String> stream = test.trim().split(\"\\\\s+\"\
    );\n        stream.forEach(str -> {\n            Long count = result.get(str);\n\
    \            if (count == null) result.put(str,count = 1l);\n            else\
    \ count.incrementAndGet();\n        });\n        return result;", "        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] array = test.split(\"\
    \ \");\n        Arrays.sort(array);\n        for (String s : array) {\n      \
    \      Long val = result.get(s);\n            if (val == null) {\n           \
    \     result.put(s, 1l);\n            } else {\n                result.put(s,\
    \ val + 1);\n            }\n        }\n        return result;", "        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        for (String s : test.split(\"\
    \ \")) {\n            if (!s.isEmpty() && s.matches(\"\\\\p{IsLower}\")) {\n \
    \               long c = result.getOrDefault(s, 0L);\n                result.replace(s,\
    \ String.valueOf(c+1), 1);\n            }\n        }\n        return result;",
  "        Map<String,Long> counts = new HashMap<>();\n        Set<String> letters\
    \ = test.split(\" \");\n        for (String letter : letters) {\n            counts.merge(letter,\
    \ 1, (count1, count2) -> count1+count2);\n        }\n        \n        return\
    \ counts;", "        HashMap<String,Long> result = new HashMap<String,Long>();\n\
    \        String[] words = test.trim().split(\" \");\n        Arrays.stream(words).map(String::toLowerCase).forEachOrdered(word\
    \ -> {\n            Long count = result.get(word);\n            if (count != null)\
    \ {\n                result.put(word, new Long(count.longValue() + 1));\n    \
    \        } else {\n                result.put(word, 1l);\n            }\n    \
    \    });\n        return result;", "        return Arrays.stream(test.split(\"\
    \ \"))\n            .map(x -> new StringDoublePair(x))\n            .collect(Collectors.groupingBy(x\
    \ -> x.getFirst(), Collectors.counting()));", "        // Your code here\n   \
    \     return null;", "        return Pattern.compile(\"[a-z]+\").matcher(test).results()\n\
    \            .map(r -> new StringBuilder(r.group().replace(\"^\", \"\"))).collect(groupingBy(Function.identity(),\
    \ counting()));", "        HashMap<String,Long> map = new HashMap<>();\n     \
    \   for (String letter : test.trim().toLowerCase().split(\" \"))\n           \
    \ map.merge(letter, 1, Integer::sum);\n        return map;", "        HashMap<String,Long>\
    \ hashMap = new HashMap<>();\n\n        test.chars().map(ch -> {\n           \
    \ hashMap.put((char)ch,hashMap.getOrDefault((char)ch, 0l) + 1);\n            return\
    \ ch;\n        }).forEach(ch -> hashMap.put((char)ch,1l));\n\n        return hashMap;",
  "        // This could have been solved using a regular expression, but this is\n\
    \        // more readable and easier to understand.\n        // We first split\
    \ the string by spaces into a list of strings containing\n        // each separate\
    \ word. Then we find all the unique letters in that list,\n        // and count\
    \ how many of each there are.\n        HashMap<String,Long> results = new HashMap<>();\n\
    \        List<String> words = Arrays.asList(test.split(\" \"));\n        for (String\
    \ word : words) {\n            Set<String> letters = HashSet<>(word.length());\n\
    \            for (int i = 0; i < word.length(); i++) {\n                letters.add(word.charAt(i));\n\
    \            }\n            String mostCommonLetter = Collections.max(letters,\
    \ Comparator.comparingLong(String::length));\n            Long count = letters.stream().filter(letter\
    \ -> letter.toString().equals(mostCommonLetter)).count();\n            results.put(mostCommonLetter,\
    \ count); // Map will store both entries with the same key\n        }\n      \
    \  return results;", "        HashMap<String,Long> result = new HashMap<String,Long>();\n\
    \        Arrays.stream(test.trim().split(\" \"))\n          .map(String::trim)\n\
    \          .map(s -> s.length() == 0 ? \"\" : s)\n          .map(s -> s.charAt(0).toUpperCase()\
    \ + s.substring(1))\n          .filter(s -> s.length() > 0)\n          .distinct()\n\
    \          .forEach(s -> result.put(s, result.containsKey(s) ? result.get(s) +\
    \ 1 : 1l));\n        return result;", "        HashMap<String,Long> res = new\
    \ HashMap<>();\n        \n        for(String s : test.split(\" \")){\n       \
    \     String lower = s.toLowerCase();\n            if(res.containsKey(lower)){\n\
    \                res.put(lower, res.get(lower) + 1);\n            } else {\n \
    \               res.put(lower, 1L);\n            }\n        }\n\n        return\
    \ res;", "        return test.chars().mapToObj(c -> {\n            String key\
    \ = Character.toString((char) c);\n            long count = 1l;\n            if\
    \ (test.toLowerCase().contains(key)) {\n                count = test.toLowerCase().replaceFirst(key\
    \ + \",\", \"\").split(\",\").length();\n            }\n            return new\
    \ HashMap<String,Long>(Map.of(key, count));\n        }).collect(Collectors.groupingBy(HashMap::key,\
    \ Collectors.counting()));", "        // create hash map to hold letter with highest\
    \ occurrence.\n        HashMap<String,Long> lettersWithMaxOccurence = new HashMap<>();\n\
    \        // parse string into array containing each letter and its count\n   \
    \     String[] letterCounts = test.split(\" \");\n        \n        // iterate\
    \ over array and add each letter to hash map if its count is higher than the current\
    \ one\n        for (String letterCount: letterCounts) {\n            lettersWithMaxOccurence.merge(letterCount,\
    \ 1, Long::sum);\n        }\n        \n        return lettersWithMaxOccurence;",
  "        HashMap<String,Long> letterMap = new HashMap<String,Long>();\n        if\
    \ (test.isEmpty()) {\n            return letterMap;\n        }\n        String[]\
    \ array = test.split(\" \");\n        for (int i = 0; i < array.length; ++i) {\n\
    \            String letter = array[i];\n            Long count = null;\n     \
    \       letterMap.merge(letter, (count = letterMap.getOrDefault(letter, 0l) +\
    \ 1),\n                    (count1, count2) -> {\n                        return\
    \ count1 + count2;\n                    });\n        }\n        return letterMap;",
  "        HashMap<String,Long> result = new HashMap<String,Long>();\n        // Split\
    \ the string into a list of single characters. Remove duplicates\n        List<Character>\
    \ chars = Arrays.asList(test.toCharArray()).stream().distinct().collect(Collectors.toList());\n\
    \        // Create a map of characters to their count\n        for (char c : chars)\
    \ {\n            result.put(c, result.getOrDefault(c, 0L) + 1);\n        }\n \
    \       return result;", "        return Arrays.stream(test.split(\" \"))\n  \
    \              .collect(Collectors.groupingBy(s -> s))\n                .entrySet().stream()\n\
    \                .collect(Collectors.toMap(Map.Entry::getKey, e -> e.getValue().count(),\
    \ HashMap::new));", "        HashMap<String,Long> result = new HashMap<>();\n\
    \        for(String letter : test.split(\" \")){\n            result.put(letter,\
    \ result.getOrDefault(letter, 0l) + 1);\n        }\n        return result;", " \
    \       HashMap<String,Long> histogram = new HashMap<>();\n\n        String[]\
    \ array = test.split(\" \");\n        \n        Arrays.stream(array).forEach(e\
    \ -> {\n            String key = e;\n            Long value = histogram.get(key);\n\
    \            if(value == null){\n                histogram.put(key, 1L);\n   \
    \         }\n            else{\n                histogram.put(key, histogram.get(key).longValue()\
    \ + 1L);\n            }\n        });\n        \n        return histogram;", " \
    \       if (test.length() == 0) return new HashMap<String,Long>();\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        test.chars().mapToObj(i -> Character.toString((char)\
    \ i)).collect(Collectors.groupingBy(i -> i, Collectors.counting()));\n       \
    \ if (map.isEmpty()) return new HashMap<String,Long>();\n        map.entrySet().stream().filter(e\
    \ -> e.getValue().equals(map.get(e.getKey())).intValue()).forEach(e -> map.put(e.getKey(),\
    \ e.getValue()));\n        return map;", "        HashMap<String,Long> hm = new\
    \ HashMap<>();\n        test.split(\" \").stream()\n            .map(s -> s.toLowerCase())\n\
    \            .forEachOrdered(s -> {\n                if (hm.containsKey(s)) {\n\
    \                    hm.put(s, hm.get(s)+1);\n                } else {\n     \
    \               hm.put(s, 1l);\n                }\n            });\n        return\
    \ hm;", "        if (test==null || test.isEmpty())\n            return new HashMap<String,Long>();\n\
    \        HashMap<String,Long> map = new HashMap<String,Long>();\n        String[]\
    \ s = test.split(\" \");\n        for (int i = 0; i < s.length; i++)\n       \
    \     map.merge(s[i], 1l, Long::sum);\n        return map;", "        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for(int i=0; i < words.length; i++) {\n            String word = words[i];\n\
    \            Long count = map.getOrDefault(word, 0L);\n            map.put(word,\
    \ count + 1L);\n        }\n        return map;", "        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] splitted = test.split(\" \");\n   \
    \     for(String s : splitted) {\n            map.computeIfAbsent(s, x -> 0L).incrementAndGet();\n\
    \        }\n        return map;", "        HashMap<String,Long> result = new HashMap<>();\n\
    \        for(String key : test.split(\" \"))\n            result.put(key, 1l);\n\
    \        return result;", "        // TODO: write your implementation here\n \
    \       return null;", "        HashMap<String,Long> letterCounter = new HashMap<String,Long>();\n\
    \        if(test==null || test.isEmpty()){\n            return letterCounter;\n\
    \        }\n        String[] letters = test.split(\" \");\n        for( int i=0;i<letters.length;i++\
    \ ) {\n            if( !letterCounter.containsKey(letters[i]) ) {\n          \
    \      letterCounter.put(letters[i],1l);\n            } else {\n             \
    \   letterCounter.put(letters[i],letterCounter.get(letters[i])+1);\n         \
    \   }\n        }\n        return letterCounter;", "        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for (String word : words) {\n            Long currentVal = map.get(word);\n\
    \            if (currentVal == null) {\n                currentVal = 1l;\n   \
    \             map.put(word, currentVal);\n            } else {\n             \
    \   map.put(word, currentVal + 1);\n            }\n        }\n        return map;",
  "        return Arrays.stream(test.trim().split(\" \"))\n                    .collect(HashMap::new,\n\
    \                             (m,x) -> m.merge(x,1l,Long::sum),\n            \
    \                 HashMap::putAll);", "        HashMap<String,Long> map = new\
    \ HashMap<>();\n        // Iterate over every character\n        for(char c: test.toCharArray())\
    \ {\n            long count = map.get(c) != null ? map.get(c) : 0l;\n        \
    \    // If character doesn't exist, increment count by 1\n            map.put(c,\
    \ count + 1l);\n        }\n        // Return to HashMap\n        return map;",
  "        HashMap<String,Long> result = new HashMap<String,Long>();\n        String[]\
    \ words = test.split(\" \");\n        for (String word : words) {\n          \
    \  word = word.trim();\n            if (word.length() > 0) {\n               \
    \ result.merge(word, 1l, Long::sum);\n            }\n        }\n        return\
    \ result;", "        HashMap<String,Long> result = new HashMap<>();\n        //\
    \ Split input string on spaces.\n        String[] input = test.split(\" \");\n\
    \        Arrays.sort(input);\n        // Loop over every letter and count it\n\
    \        for (String letter : input) {\n            if (!result.containsKey(letter))\
    \ {\n                result.put(letter, 1l);\n            } else {\n         \
    \       result.put(letter, result.get(letter) + 1);\n            }\n        }\n\
    \        // Return the result\n        return result;", "        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        if(test.isEmpty()) {\n       \
    \     return result;\n        }\n        String[] letters = test.split(\" \");\n\
    \        Arrays.stream(letters).forEach(letter ->{\n            Long count = result.getOrDefault(letter,\
    \ 0L);\n            result.put(letter, count + 1);\n        });\n        return\
    \ result;", "        return test.chars().boxed()\n                .flatMapToObj(c\
    \ -> new String[]{String.valueOf(c), String.format(\"%03d\", c)})\n          \
    \      .collect(groupingBy(\n                        t -> t, \n              \
    \          counting()))\n                .entrySet().stream()\n              \
    \  .sorted((o1, o2) -> o2.getValue().compareTo(o1.getValue()))\n             \
    \   .collect(toMap(Map.Entry::getKey, Map.Entry::getValue));", "        HashMap<String,Long>\
    \ histogram = new HashMap<>();\n        String[] words = test.split(\" \");\n\
    \        for (String word : words) {\n            long occurrences = histogram.getOrDefault(word,\
    \ 0L);\n            histogram.put(word, occurrences+1);\n        }\n        return\
    \ histogram;", "        if(test.isEmpty())\n            return new HashMap<String,Long>();\n\
    \        HashMap<String,Long> result = new HashMap<String,Long>();\n        String[]\
    \ chars = test.split(\" \");\n        long maxCount = 1;\n        for (String\
    \ char: chars) {\n            long count = 1;\n            String currentChar\
    \ = char;\n            String lastChar = chars[chars.length-1];\n            while(currentChar.equals(lastChar))\
    \ {\n                count++;\n                currentChar = chars[chars.length-count-1];\n\
    \            }\n            result.put(currentChar, count); \n            maxCount\
    \ = Math.max(maxCount, count);\n        }\n        return result;", "        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] splitted = test.split(\" \");\n\
    \        for (String s : splitted) {\n            String key = s.toLowerCase();\n\
    \            result.put(key, result.getOrDefault(key, 0L));\n            result.get(key)\
    \ ++;\n        }\n        return result;", "        if (test.isEmpty()) {\n  \
    \          return new HashMap<String,Long>();\n        }\n\n        HashMap<String,Long>\
    \ counts = new HashMap<String,Long>();\n        StringTokenizer tokenizer = new\
    \ StringTokenizer(test, \" \");\n\n        while (tokenizer.hasMoreTokens()) {\n\
    \            String token = tokenizer.nextToken();\n            Long count = counts.getOrDefault(token,\
    \ 0l);\n            counts.put(token, ++count);\n        }\n\n        String[]\
    \ letters = counts.keySet().toArray(new String[counts.keySet().size()]);\n   \
    \     Arrays.sort(letters);\n        Arrays.sort(counts.values());\n\n       \
    \ StringBuilder sb = new StringBuilder();\n        boolean first = true;\n   \
    \     for (String letter : letters) {\n            Long count = counts.getOrDefault(letter,\
    \ 0l);\n            if (first) {\n                first = false;\n           \
    \ } else {\n                sb.append(' ');\n            }\n            sb.append(letter);\n\
    \            sb.append(':');\n            sb.append(count);\n        }\n\n   \
    \     System.out.println(sb.toString());\n        return counts;", "        HashMap<String,Long>\
    \ res = new HashMap<>();\n        String[] split = test.split(\" \");\n      \
    \  for (String t : split) {\n            String[] arr = t.split(\" \");\n    \
    \        for (String s : arr) {\n                if (res.containsKey(s)) {\n \
    \                   res.put(s, res.get(s)+1);\n                } else {\n    \
    \                res.put(s, 1l);\n                }\n            }\n        }\n\
    \        return res;", "        if (test.isEmpty()) {\n            return new\
    \ HashMap<String,Long>();\n        }\n        HashMap<String,Long> hm = new HashMap<String,Long>();\n\
    \        String[] arr = test.split(\" \");\n        List<String> list = Arrays.stream(arr).distinct().sorted().collect(Collectors.toList());\n\
    \        for (String s : str.split(\" \")) {\n            if (list.contains(s))\
    \ {\n                Long val = hm.get(s);\n                hm.put(s, val + 1);\n\
    \            }\n        }\n        return hm;", "        if (test.isEmpty()) {\n\
    \            return new HashMap<String,Long>();\n        }\n        // Convert\
    \ string to char array for performance\n        char[] charArray = test.toCharArray();\n\
    \        // Map of letter to count\n        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        // Iterate over chars in string, ignoring leading whitespace\n      \
    \  char[] remainingCharArray = Arrays.copyOfRange(test.toCharArray(), 1, test.length());\n\
    \        while (remainingCharArray.length > 0) {\n            // For each char,\
    \ check if present in map, update count otherwise\n            String charString\
    \ = String.valueOf(remainingCharArray);\n            Long count = map.get(charString);\n\
    \            if (count != null) {\n                map.put(charString, count +\
    \ 1);\n            } else {\n                map.put(charString, 1L);\n      \
    \      }\n            // Remove char and increment remaining count\n         \
    \   remainingCharArray = Arrays.copyOfRange(remainingCharArray, 1, remainingCharArray.length);\n\
    \        }\n        return map;", "        HashMap<String,Long> hashmap = new\
    \ HashMap<String,Long>();\n        HashSet<String> hashset = new HashSet<String>();\n\
    \n        for (int i = 0; i < test.length(); i++) {\n            String letter\
    \ = test.substring(i, i + 1);\n            if (hashmap.containsKey(letter)) {\n\
    \                hashmap.put(letter, hashmap.get(letter) + 1);\n            }\
    \ else {\n                hashmap.put(letter, 1l);\n            }\n          \
    \  hashset.addAll(Arrays.asList(letter.split(\" \")));\n        }\n\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        HashMap<String,Long> currentMax\
    \ = hashmap;\n        Set<String> keySet = hashmap.keySet();\n\n        for (String\
    \ key : keySet) {\n            Long count = hashmap.get(key);\n            Long\
    \ countMax = currentMax.get(key);\n            if (count > countMax) {\n     \
    \           result.put(key, count);\n                currentMax.put(key, count);\n\
    \            }\n        }\n\n        return result;", "        HashMap<String,Long>\
    \ result = new HashMap<>();\n        for(int i = 0; i< test.length(); i++) {\n\
    \            String word = test.substring(i, i + 1);\n            Long count =\
    \ result.get(word);\n            if (count == null) {\n                result.put(word,\
    \ 1);\n            } else {\n                result.put(word, count.longValue()\
    \ + 1);\n            }\n        }\n        return result;", "        // Your code\
    \ here\n        HashMap<String,Long> map = new HashMap<String,Long>();\n     \
    \   ArrayList<String> splitWords = new ArrayList<String>();\n        String[]\
    \ letters = test.split(\" \");\n        for(String s:letters)\n            splitWords.add(s);\n\
    \        Collections.sort(splitWords);\n        for(String s:splitWords){\n  \
    \          String word = s;\n            long count = 0;\n            for(int\
    \ i = 0; i < splitWords.size(); i++){\n                if(word.equals(splitWords.get(i)))\n\
    \                    count++;\n            }\n            map.put(word,count);\n\
    \        }\n        return map;", "        if (test.equals(\"\")) {\n        \
    \    return new HashMap<String,Long>();\n        }\n\n        HashMap<String,Long>\
    \ result = new HashMap<>();\n        String[] chars = test.split(\" \");\n   \
    \     for (String char: str) {\n            if (result.containsKey(char)) {\n\
    \                result.put(char, result.get(char) + 1);\n            } else {\n\
    \                result.put(char, 1l);\n            }\n        }\n\n        return\
    \ result;", "        HashMap<String,Long> result = new HashMap<>();\n        String[]\
    \ words = test.split(\" \");\n        for (String word : words) {\n          \
    \  result.merge(word, 1l, (curr, prev) -> {\n                return curr.longValue()\
    \ + (prev.longValue() == 0L ? 1L : prev.longValue());\n            });\n     \
    \   }\n        return result;", "        HashMap<String,Long> result = new HashMap<>();\n\
    \n        // split string into array of strings and convert to array list of string\n\
    \        ArrayList<String> words = Arrays.asList(test.split(\" \"));\n\n     \
    \   // iterate over all words in the list to count occurences\n        for (String\
    \ word : words) {\n            Long count = result.getOrDefault(word, 0L);\n\n\
    \            // update count of word if newer occurrence is found\n          \
    \  if (count > 0L) {\n                result.put(word, count + 1L);\n        \
    \    }\n            // update count of word if same occurrence is found\n    \
    \        else {\n                result.put(word, 1L);\n            }\n      \
    \  }\n\n        // return result if any\n        return result.isEmpty() ? new\
    \ HashMap<String,Long>() : result;", "        ArrayList result = new ArrayList();\n\
    \        String[] tokens = test.split(\" \");\n        HashMap<String,Long> h\
    \ = new HashMap<>();\n        for (int i = 0; i < tokens.length; i++) {\n    \
    \        String s = tokens[i].toLowerCase();\n            if (!h.containsKey(s))\
    \ {\n                h.put(s, 0l);\n            }\n            h.put(s, h.get(s)\
    \ + 1);\n        }\n        for (Map.Entry<String, Long> entry : h.entrySet())\
    \ {\n            result.add(new SimpleEntry<>(entry.getKey(), entry.getValue()));\n\
    \        }\n        return new HashMap<String,Long>(result);", "        if (test.isEmpty())\
    \ {\n            return new HashMap<String,Long>();\n        }\n\n        HashMap<String,Long>\
    \ results = new HashMap<String,Long>();\n\n        String[] strings = test.split(\"\
    \ \");\n        for (String string : strings) {\n            if (results.containsKey(string))\
    \ {\n                results.put(string,results.get(string) + 1);\n          \
    \  } else {\n                results.put(string, 1l);\n            }\n       \
    \ }\n\n        return results;", "        HashMap<String,Long> letterCountMap\
    \ = new HashMap<>();\n\n        String[] words = test.split(\" \");\n        for\
    \ (String word : words) {\n            word = word.trim();\n            if (!letterCountMap.containsKey(word))\
    \ {\n                letterCountMap.put(word, 1L);\n            } else {\n   \
    \             Long count = letterCountMap.get(word);\n                letterCountMap.put(word,\
    \ count + 1L);\n            }\n        }\n        return letterCountMap;", " \
    \       if (test.isEmpty()) return new HashMap<String,Long>();\n        HashMap<String,Long>\
    \ frequencies = new HashMap<String,Long>();\n        for (char c : test.toCharArray())\
    \ {\n            frequencies.merge(c,1l,Long::sum);\n        }\n        return\
    \ frequencies;", "        return Arrays.stream(test.split(\" \")).map(letter ->\
    \ new SimpleEntry<>(letter,\n                test.split(\" \").count(letter))).collect(Collectors.groupingBy(SimpleEntry::getKey,\n\
    \                Collectors.counting()));", "        HashMap<String,Long> result\
    \ = new HashMap<String,Long>();\n        String[] strings = test.split(\" \");\n\
    \        for (String str : strings) {\n            str = str.trim();\n       \
    \     if (str.length() == 0) continue;\n            if (result.containsKey(str))\
    \ {\n                result.put(str, result.get(str) + 1);\n            } else\
    \ {\n                result.put(str, 1l);\n            }\n        }\n        return\
    \ result;", "        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            if (map.containsKey(word)) {\n                Long count = map.get(word);\n\
    \                map.put(word, count + 1l);\n            } else {\n          \
    \      map.put(word, 1l);\n            }\n        }\n        return map;", " \
    \       String[] array = test.split(\" \");\n        HashMap<String,Long> result\
    \ = new HashMap<>();\n        for (int i = 0; i < array.length; ++i) {\n     \
    \       String letter = array[i];\n            Long count = result.getOrDefault(letter,\
    \ 0L);\n            result.put(letter, count + 1);\n        }\n        return\
    \ result;", "        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        if (test.isEmpty()) return map;\n        String[] splitted = test.split(\"\
    \ \");\n        for (String s : splitted) {\n            Long count = map.getOrDefault(s,0L);\n\
    \            map.put(s,count+1L);\n        }\n        return map;", "        HashMap<String,Long>\
    \ result = new HashMap<>();\n        char[] characters = test.toCharArray();\n\
    \        Arrays.sort(characters);\n        int currentIndex = 0;\n        for(int\
    \ i=0;i<characters.length;i++) {\n            char currentCharacter = characters[i];\n\
    \            if(result.containsKey(currentCharacter)) {\n                result.put(currentCharacter,\
    \ result.get(currentCharacter) + 1);\n            } else {\n                result.put(currentCharacter,\
    \ 1l);\n            }\n        }\n        return result;", "        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        String[] words = test.split(\" \"\
    );\n        for (String word : words) {\n            String key = word.toLowerCase();\n\
    \            if (map.containsKey(key)) {\n                map.put(key, map.get(key)\
    \ + 1);\n            }\n            else {\n                map.put(key, 1l);\n\
    \            }\n        }\n        return map;", "        if (test.isEmpty())\
    \ {\n            return new HashMap<>();\n        }\n        // Split the string\
    \ into an array\n        String[] strings = test.split(\" \");\n        HashMap<String,Long>\
    \ hs = new HashMap<>();\n        // Go through each string and count it\n    \
    \    for (String s : strings) {\n            if (!s.equals(\"\")) {\n        \
    \        String letter = s.substring(0, 1);\n                if (!hs.containsKey(letter))\
    \ {\n                    hs.put(letter, 1l);\n                } else {\n     \
    \               Long count = hs.get(letter);\n                    hs.put(letter,\
    \ count + 1l);\n                }\n            }\n        }\n        return hs;",
  "        String[] letters = test.split(\" \");\n        return Arrays.stream(letters).map(letter\
    \ -> letter + \": \" + Collections.frequency(Arrays.asList(letters), letter)).collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));", "        if(test.isEmpty()) {\n            return\
    \ new HashMap<String,Long>();\n        }\n        String[] split = test.split(\"\
    \ \");\n        HashMap<String,Long> hm = new HashMap<>();\n        Arrays.stream(split).forEach(s->{\n\
    \            hm.put(s,hm.getOrDefault(s,0L)+1L);\n        });\n        return\
    \ hm;", "        HashMap<String,Long> results = new HashMap<String,Long>();\n\
    \        String[] words = test.split(\" \");\n        for (int i = 0; i < words.length;\
    \ i++) {\n            String word = words[i];\n            if (results.containsKey(word))\
    \ {\n                Long count = results.get(word);\n                results.put(word,\
    \ count + 1);\n            } else {\n                results.put(word, 1L);\n\
    \            }\n        }\n        return results;", "        // split and map\
    \ all characters to their count\n        // get each character with the count\
    \ and sort it alphabetically\n        // add them to a new map with all the characters\
    \ as keys and their counts as values\n        // return that new map at the end\
    \ of the function\n        HashMap<String,Long> result = new HashMap<String,Long>();\n\
    \        for (String str : test.split(\" \")) {\n            long count = Collections.frequency(Arrays.asList(test.split(\"\
    \ \")), str);\n            String key = str.substring(0, 1).toUpperCase() + str.substring(1);\n\
    \            result.put(key, count);\n        }\n        return result;", "  \
    \      // Declare an empty HashMap\n        HashMap<String,Long> hm = new HashMap<>();\n\
    \n        // Split the string into an array and iterate over the array adding\
    \ values to the HashMap\n        String[] parts = test.split(\" \");\n       \
    \ for (String part : parts) {\n            int count = hm.containsKey(part) ?\
    \ hm.get(part) : 0;\n            hm.put(part, count + 1);\n        }\n\n     \
    \   // Sort the HashMap by its value\n        List<Map.Entry<String,Long>> list\
    \ = new ArrayList<>(hm.entrySet());\n        Collections.sort(list, Map.Entry.comparingByValue());\n\
    \n        // Return the HashMap\n        return list.isEmpty() ? new HashMap<String,Long>()\
    \ : list.get(list.size() - 1);", "        HashMap<String,Long> result = new HashMap<>();\n\
    \        String[] testSplit = test.split(\"\\\\s+\");\n        for (String letter\
    \ : testSplit) {\n            result.merge(letter, 1, Math::addExact);\n     \
    \   }\n        return result;", "        HashMap<String,Long> map = new HashMap<>();\n\
    \        test.toLowerCase().chars().filter(c -> c != '\\0').forEach(c -> {\n \
    \           Long current = map.getOrDefault(c, 0L);\n            map.put(c, current\
    \ + 1);\n        });\n        return map;", "        String[] testArray = test.split(\"\
    \ \");\n        HashMap<String,Long> histogram = new HashMap<>();\n        Arrays.stream(testArray).forEach(s\
    \ -> {\n            histogram.put(s, histogram.get(s) + 1);\n        });\n   \
    \     return histogram;", "        String[] array = test.split(\" \");\n     \
    \   HashMap<String,Long> map = new HashMap<String,Long>(array.length);\n     \
    \   for (String letter : array) {\n            map.put(letter, map.containsKey(letter)\
    \ ? map.get(letter) + 1 : 1);\n        }\n        return map;", "        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n\n        String[] values = test.split(\"\
    \ \");\n\n        Arrays.asList(values).stream()\n                .filter(v ->\
    \ map.containsKey(v))\n                .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()))\n                .forEach((k, v) -> map.put(k, new Long(map.get(k).intValue()\
    \ + 1)));\n\n        return map;", "        return test\n                .toLowerCase()\n\
    \                .chars()\n                .mapToObj(x -> (char) x)\n        \
    \        .collect(HashMap::new, (m, c) -> m.merge(String.valueOf(c), 1l, Math::addExact),\
    \ HashMap::putAll);", "        HashMap<String,Long> res = new HashMap<>();\n \
    \       Arrays.stream(test.split(\" \"))\n            .map(a -> a.toLowerCase())\n\
    \            .forEach(a -> {\n            Long old = res.get(a);\n           \
    \ Long newVal = 1L;\n            if (old == null) {\n                newVal =\
    \ 1L;\n            }\n            res.put(a, Long.valueOf(newVal));\n        });\n\
    \        return res;", "        return test\n            .chars()\n          \
    \  .mapToObj(test::toLowerCase)\n            .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()));", "        HashMap<String,Long> histo = new HashMap<String,Long>();\n\
    \        test.chars().mapToObj(x -> String.valueOf(x - 'a')).forEach(x -> {\n\
    \            if(histo.containsKey(x)){\n                histo.get(x).add(1);\n\
    \            } else {\n                histo.put(x,new Long(1));\n           \
    \ }\n        });\n        return histo;", "        if (test.isEmpty()) {\n   \
    \         return new HashMap<String,Long>();\n        }\n        // Get the letters\
    \ one by one from left to right, store them in an ArrayList,\n        // and keep\
    \ track of the occurrence counts for each letter by using a HashMap.\n       \
    \ ArrayList<String> charsList = new ArrayList<String>();\n        // Initialize\
    \ the map with 0 occurrences of every letter.\n        HashMap<String,Long> charMap\
    \ = new HashMap<String,Long>();\n        for (char c : test.toCharArray()) {\n\
    \            if (charMap.containsKey(c)) {\n                charMap.put(c, (charMap.get(c)\
    \ + 1));\n            } else {\n                charMap.put(c, (1l));\n      \
    \      }\n        }\n\n        Set<Entry<String, Long>> entrySet = charMap.entrySet();\n\
    \        List<Entry<String, Long>> entryList = new ArrayList<>(entrySet);\n  \
    \      Collections.sort(entryList, (e1, e2) -> Integer.compare(e2.getValue(),\
    \ e1.getValue()));\n\n        // Loop over the map and build the map you require.\n\
    \        for (Entry<String, Long> entry : entryList) {\n            for (int i\
    \ = 0; i < entry.getValue(); i++) {\n                charsList.add(entry.getKey());\n\
    \            }\n        }\n\n        HashMap<String,Long> histogram = new HashMap<String,Long>();\n\
    \        for (String c : charsList) {\n            histogram.put(c, (histogram.getOrDefault(c,\
    \ 0L) + 1));\n        }\n\n        return histogram;", "        HashMap<String,Long>\
    \ histogram = new HashMap<>();\n        String[] tokens = test.split(\" \");\n\
    \        for (String token : tokens) {\n            histogram.put(token, histogram.getOrDefault(token,\
    \ 0l) + 1);\n        }\n        return histogram;", "        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] words = test.split(\" \");\n      \
    \  for (String word : words) {\n            if (map.containsKey(word))\n     \
    \           map.put(word, map.get(word) + 1);\n            else\n            \
    \    map.put(word, 1l);\n        }\n        return map;", "        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        for(String letter : test.toLowerCase().split(\"\
    \ \")){\n            if(result.containsKey(letter)){\n                Long count\
    \ = result.get(letter);\n                result.put(letter, count + 1);\n    \
    \        }else{\n                result.put(letter, 1l);\n            }\n    \
    \    }\n        return result;", "        if (test.isEmpty()) {\n            return\
    \ new HashMap<String,Long>();\n        }\n        HashMap<String,Long> letterCountMap\
    \ = new HashMap<String,Long>();\n        List<String> splitList = Arrays.asList(test.split(\"\
    \ \"));\n        for (String item : splitList) {\n            String letter =\
    \ item.substring(0, 1);\n            if (letterCountMap.containsKey(letter)) {\n\
    \                Long count = letterCountMap.get(letter) + Long.valueOf(1);\n\
    \                letterCountMap.put(letter, count);\n            } else {\n  \
    \              letterCountMap.put(letter, Long.valueOf(1))\n            }\n  \
    \      }\n        return letterCountMap;", "        HashMap<String,Long> result\
    \ = new HashMap<String,Long>();\n        String[] words = test.split(\" \");\n\
    \        for (String word : words) {\n            word = word.toLowerCase();\n\
    \            Long count = result.get(word);\n            if (count == null) count\
    \ = 0;\n            count++;\n            result.put(word, count);\n        }\n\
    \        return result;", "        HashMap<String,Long> result = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        Arrays.stream(words).forEach(word\
    \ -> {\n            if (word == null || word.length() == 0) {\n              \
    \  return;\n            }\n            String key = getKey(word);\n          \
    \  Long val = result.getOrDefault(key, 0L);\n            result.put(key, val +\
    \ 1L);\n        });\n        return result;", "        HashMap<String,Long> map\
    \ = new HashMap<>();\n        String[] words = test.split(\" \");\n        HashMap<String,Long>\
    \ mostRepetitions = new HashMap<>();\n        for(String word : words) {\n   \
    \         Long count = map.get(word);\n            if( count == null ) {\n   \
    \             map.put(word, 1L);\n                count = map.get(word);\n   \
    \         }\n            else {\n                count = count + 1;\n        \
    \    }\n            mostRepetitions.put(word, count);\n        }\n        return\
    \ mostRepetitions;", "        HashMap<String,Long> histogram = new HashMap<>();\n\
    \        // Convert each space separated word into a string array and count the\
    \ occurrences of each letter\n        String[] words = test.split(\" \");\n  \
    \      for (String word : words) {\n            String[] letters = word.split(\"\
    \");\n            String currentLetter = \"\";\n            long currentCount\
    \ = 0;\n            for (String letter : letters) {\n                currentLetter\
    \ = letter;\n                currentCount = histogram.containsKey(currentLetter)\
    \ ? histogram.get(currentLetter) : 0;\n                histogram.put(currentLetter,\
    \ ++currentCount);\n            }\n        }\n        return histogram;", "  \
    \      HashMap<String,Long> map = new HashMap<>();\n        for (String s : test.split(\"\
    \ \")){\n            map.put(s,map.getOrDefault(s,0L)+1);\n        }\n       \
    \ return map;", "        HashMap<String,Long> result = new HashMap<>();\n    \
    \    String[] words = test.split(\" \");\n        for (String word : words) {\n\
    \            if (result.containsKey(word)) {\n                result.put(word,\
    \ result.get(word) + 1);\n            }\n            else {\n                result.put(word,\
    \ 1l);\n            }\n        }\n        return result;", "        HashMap<String,Long>\
    \ results = new HashMap<>();\n        // Find the occurrences for each character\n\
    \        Arrays.stream(test.split(\" \")).forEach(element -> results.merge(element,\
    \ 1l, (x, y) -> x + y));\n        // Find the maximum\n        results.entrySet().stream().max(Map.Entry.comparingByValue()).getValue();\n\
    \        return results;", "        HashMap<String,Long> result = new HashMap<>();\n\
    \        Set<String> uniqueLetters = new HashSet<>();\n        \n        // Split\
    \ string into single letters\n        for (String s: test.split(\" \"))\n    \
    \        uniqueLetters.add(s);\n        \n        // Count letter repetition\n\
    \        long occurrence = 0;\n        for (String letter: uniqueLetters) {\n\
    \            occurrence+=test.toLowerCase().split(letter).length;\n          \
    \  result.put(letter, occurrence);\n        }\n        return result;", "    \
    \    HashMap<String,Long> result = new HashMap<>();\n        if (test == null\
    \ || test.isEmpty()) return result;\n        test.trim().chars().mapToObj(i ->\
    \ (char) i).distinct().forEach(i -> {\n            if (result.containsKey(i))\
    \ {\n                result.put(i, result.get(i) + 1);\n            } else {\n\
    \                result.put(i, 1l);\n            }\n        });\n        return\
    \ result;", "        // Use hashmap to count the number of times each character\
    \ appears.\n        // For each character, update its counter.\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        test.chars().boxed().forEach(c\
    \ -> {\n            if (result.containsKey(c)) {\n                result.put(c,result.get(c)\
    \ + 1);\n            } else {\n                result.put(c,1l);\n           \
    \ }\n        });\n\n        // Sort the Hashmap using its values, in descending\
    \ order.\n        Collections.sort(result.entrySet(), Map.Entry.comparingByValue().reversed());\n\
    \n        // Get the first element in the Hashmap.\n        // The key is the\
    \ most frequent character, the value is the frequency.\n        Map.Entry<String,Long>\
    \ maxEntry = result.entrySet().stream()\n                .max(Map.Entry.comparingByValue());\n\
    \n        // If there are more than one element with the same frequency, return\
    \ all of them.\n        if (maxEntry.getValue() > 1) {\n            return result;\n\
    \        }\n\n        // Return the key and the value (the most frequent character\
    \ and the frequency)\n        return new HashMapEntry(maxEntry.getKey(), maxEntry.getValue());",
  "        HashMap<String,Long> result = new HashMap<>();\n        String[] words\
    \ = test.split(\" \");\n        List<String> sortedWords = Arrays.asList(words);\n\
    \        sortedWords.sort(String.CASE_INSENSITIVE_ORDER);\n        IntSummaryStatistics\
    \ stats = sortedWords.stream().map(word -> {\n            Long count = result.get(word);\n\
    \            if (count != null) {\n                return new IntSummaryStatistics(count);\n\
    \            }\n            return new IntSummaryStatistics(1l);\n        }).collect(Collectors.toList()).stream().map((s)\
    \ -> s.sum()).collect(Collectors.toList());\n        for (String s : words) {\n\
    \            long count = result.get(s);\n            if (count == null) {\n \
    \               count = 1;\n            }\n            result.put(s, count + stats.get(s));\n\
    \        }\n        return result;", "        if (test.isEmpty()) {\n        \
    \    return new HashMap<String,Long>();\n        }\n        \n        // split\
    \ string into individual letters, count occurrences of each letter\n        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String[] letters = test.split(\" \");\n    \
    \    for (String letter : letters) {\n            Long count = map.computeIfAbsent(letter,\
    \ key -> new Long(0));\n            count.incrementAndGet();\n        }\n\n  \
    \      // return letters with highest count\n        return map.entrySet().stream().sorted(Map.Entry.comparingByValue()).limit(2).collect(toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (e1, e2) -> e1, LinkedHashMap::new));", "        return\
    \ Arrays.stream(test.split(\" \"))\n                .map(e -> new AbstractMap.SimpleEntry<>(e,\
    \ 1l))\n                .collect(Collectors.groupingBy(e -> e.getKey(), Collectors.counting()));",
  "        Set<String> uniqueLetters = new HashSet<>();\n        HashMap<String,Long>\
    \ histogram = new HashMap<>();\n\n        for (String letter : test.split(\" \"\
    )) {\n            uniqueLetters.add(letter);\n        }\n        // Count each\
    \ letter\n        for (String letter : uniqueLetters) {\n            histogram.merge(letter,\
    \ 1, (count, oldValue) -> count + oldValue);\n        }\n        return histogram;",
  '        return histogram.histogram(test.split(" ").stream().map(String::toLowerCase).collect(Collectors.toList()));',
  "        HashMap<String,Long> map = new HashMap<String,Long>();\n        \n    \
    \    // Split string into a list of words\n        String[] words = test.trim().split(\"\
    \\\\s+\");\n        // Iterate over words\n        for(String word : words) {\n\
    \            // Get letter and count of letter\n            String letter = word.toLowerCase().substring(0,\
    \ 1).toLowerCase();\n            Long count = map.get(letter);\n            if\
    \ (count == null) {\n                map.put(letter, 1L);\n            } else\
    \ {\n                map.put(letter, count + 1L);\n            }\n        }\n\
    \        \n        // Return map\n        return map;", "        HashMap<String,Long>\
    \ count = new HashMap<String,Long>();\n        StringTokenizer st = new StringTokenizer(test);\n\
    \        while (st.hasMoreTokens()) {\n            String letter = st.nextToken();\n\
    \            Long val = count.get(letter);\n            if (val == null)\n   \
    \             count.put(letter, 1l);\n            else\n                count.put(letter,\
    \ val + 1);\n        }\n        return count;", '        return Arrays.stream(test.split("
    ")).map(w -> new AbstractMap.SimpleImmutableEntry<>(w, 1l)).collect(HashMap::new,
    HashMap::putAll, HashMap::putAll);', "        HashMap<String,Long> map = new HashMap<String,Long>();\n\
    \        Arrays.stream(test.split(\" \")).map(String::toLowerCase).filter(x ->\
    \ x.length() > 0).forEach(x -> map.merge(\n            x, 1l, Long::sum\n    \
    \    ));\n        return map;", "        if (test.isEmpty())\n            return\
    \ new HashMap<String,Long>();\n        HashMap<String,Long> histogram = new HashMap<String,Long>();\n\
    \        final String[] splitted = test.split(\" \");\n        for (String item\
    \ : splitted) {\n            histogram.merge(item, 1l, Long::sum);\n        }\n\
    \        return histogram;", "        if (test.isEmpty()) return new HashMap<String,Long>();\n\
    \        String[] splits = test.split(\" \");\n        return Arrays.stream(splits).collect(HashMap::new,\
    \ (map, e) -> map.computeIfAbsent(e, x -> 0L),\n                (map1, map2) ->\
    \ map1.merge(map2, Long::sum));", "        // Split the string into an array of\
    \ characters\n        // Split each character of that array into a string\n  \
    \      String[] splits = test.split(\" \");\n        HashMap<String,Long> map\
    \ = new HashMap<>();\n        for (String s: splits) {\n            long count\
    \ = map.containsKey(s) ? map.get(s) : 0L;\n            map.put(s, count + 1L);\n\
    \        }\n        return map;", "        if(test==null || test.isEmpty()){\n\
    \            return new HashMap<String,Long>();\n        }\n        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.trim().split(\"\
    \ \");\n        for (String word : words) {\n            Long count = result.getOrDefault(word,\
    \ 0l);\n            result.put(word, count+1);\n        }\n        return result;",
  "        HashMap<String,Long> histograms;\n        String[] elements = test.split(\"\
    \ \");\n        histograms = new HashMap<String,Long>();\n        for (String\
    \ s : elements) {\n            String letter = s.charAt(0);\n            if (histograms.containsKey(letter))\
    \ {\n                histograms.put(letter, histograms.get(letter) + 1);\n   \
    \         } else {\n                histograms.put(letter, 1l);\n            }\n\
    \        }\n        return histograms;", "        Map<String,Long> map = new HashMap<>();\n\
    \        String[] words = test.trim().split(\" \");\n        for(String word :\
    \ words) {\n            int count = map.get(word) != null ? map.get(word) : 0;\n\
    \            map.put(word, count + 1);\n        }\n        return map;", "   \
    \     return HashMap<String,Long> result = new HashMap<String,Long>();\n     \
    \   if(test.trim().isEmpty()){\n            return result;\n        }\n      \
    \  test = test.trim();\n        test.split(\" \");\n        for( int i = 0; i\
    \ < test.length() ; i ++ ){\n            if( result.containsKey(test.substring(i,\
    \ i+1))){\n                result.put(test.substring(i, i+1), result.get(test.substring(i,\
    \ i+1)) + 1);\n            } else {\n                result.put(test.substring(i,\
    \ i+1), 1l);\n            }\n        }\n        return result;", "        HashMap<String,Long>\
    \ result = new HashMap<String,Long>();\n        String[] words = test.split(\"\
    \ \");\n        Map<String, Long> map = new HashMap<String, Long>();\n       \
    \ for (String word : words) {\n            map.merge(word, 1, (oldVal, newVal)\
    \ -> oldVal+newVal);\n        }\n        result = Collections.max(map.entrySet(),\
    \ Map.Entry.comparingByValue()).getValue();\n        return result;", "      \
    \  HashMap<String,Long> result = new HashMap<>();\n        String letter = \"\"\
    ;\n        int count = 0;\n        String[] strings = test.split(\" \");\n   \
    \     for (String string : strings) {\n            letter = string;\n        \
    \    count = string.length();\n            if (result.containsKey(letter)) {\n\
    \                Long countValue = (Long) result.get(letter);\n              \
    \  result.put(letter, countValue + count);\n            } else {\n           \
    \     result.put(letter, count);\n            }\n        }\n        return result;",
  "        HashMap<String,Long> result = new HashMap<>();\n        String[] words\
    \ = test.split(\" \");\n        for (String word : words) {\n            word\
    \ = word.trim();\n            if (word.isEmpty()) continue;\n            Long\
    \ count = result.get(word);\n            if (count == null) {\n              \
    \  result.put(word, 1L);\n            } else {\n                result.put(word,\
    \ count + 1L);\n            }\n        }\n        return result;", "        HashMap<String,Long>\
    \ result = new HashMap<>();\n        test.split(\" \").stream().map(s -> s.toLowerCase()).forEach(s\
    \ -> {\n            Long count = result.getOrDefault(s, 0l);\n            count.incrementAndGet();\n\
    \            result.put(s, count);\n        });\n        return result;", "  \
    \      HashMap<String,Long> letterCounts = new HashMap<>();\n        String[]\
    \ strings = test.split(\" \");\n        for (String string : strings) {\n    \
    \        String letter = string.substring(0, 1);\n            if (!letterCounts.containsKey(letter))\
    \ {\n                letterCounts.put(letter, 1l);\n            } else {\n   \
    \             Long count = letterCounts.get(letter);\n                letterCounts.put(letter,\
    \ count + 1);\n            }\n        }\n        return letterCounts;", "    \
    \    HashMap<String,Long> map = new HashMap<>();\n        String[] split = test.split(\"\
    \ \");\n        Arrays.stream(split).forEach(e -> map.put(e, 1L));\n        return\
    \ map;", "        return Arrays.stream(test.split(\" \"))\n                .flatMap(s\
    \ -> Arrays.stream(s.split(\"\\\\s\")))\n                .collect(groupingBy(s\
    \ -> s, counting()));", "        // Your code goes here\n        HashMap<String,Long>\
    \ hash = new HashMap<>();\n        String[] arr = test.split(\" \");\n       \
    \ for (String s: arr){\n            hash.merge(s, 1l, Long::sum);\n        }\n\
    \        return hash;", '        return histogram.histogram(test.toLowerCase().split("
    ").toArray());', "        HashMap<String,Long> result = new HashMap<String,Long>();\n\
    \        String[] split = test.split(\" \");\n        for (String word : split)\
    \ {\n            Long count = (Long) result.get(word);\n            if (count\
    \ == null) {\n                result.put(word, 1l);\n            } else {\n  \
    \              result.put(word, count + 1l);\n            }\n        }\n     \
    \   return result;", "        HashMap<String,Long> hm = new HashMap<>();\n   \
    \     for(String st : test.split(\" \")){\n            hm.merge(st,1l,(a,b) ->\
    \ a+b);\n        }\n        return hm;", "        // Transform the string into\
    \ a list of chars\n        List<String> chars = Arrays.asList(test.toCharArray());\n\
    \        List<String> map = new ArrayList<String>();\n        HashMap<String,Long>\
    \ histogram = new HashMap<>();\n        for (String c : chars) {\n           \
    \ // Compute the histogram for each letter\n            if (map.getOrDefault(c,0L)\
    \ == 0) {\n                map.put(c,1L);\n            } else {\n            \
    \    Long old = map.get(c);\n                map.put(c,old + 1);\n           \
    \ }\n        }\n        // Create the histogram from the list\n        for (Map.Entry<String,\
    \ Long> entry : map.entrySet()) {\n            histogram.put(entry.getKey(), entry.getValue());\n\
    \        }\n        return histogram;", "        HashMap<String,Long> histogram\
    \ = new HashMap<>();\n        String[] words = test.trim().split(\" \");\n   \
    \     for (String word : words) {\n            if (histogram.containsKey(word))\
    \ {\n                histogram.put(word, histogram.get(word) + 1);\n         \
    \   } else {\n                histogram.put(word, 1l);\n            }\n      \
    \  }\n        return histogram;", "        return test.split(\" \")\n        \
    \        .stream()\n                .map(s -> s.toUpperCase())\n             \
    \   .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));",
  "        HashMap<String,Long> map = new HashMap<>();\n        // TODO Write your\
    \ solution here\n        System.out.println(test);\n        String[] words = test.split(\"\
    \ \");\n        for (String word : words) {\n            long count = 0;\n   \
    \         if(map.containsKey(word)) {\n                count = map.get(word);\n\
    \            }\n            else {\n                count = 0;\n            }\n\
    \            map.put(word, count + 1);\n        }\n        return map;", "   \
    \     HashMap<String,Long> histogram = new HashMap<String,Long>();\n        String[]\
    \ tokens = test.split(\" \");\n        for(String token : tokens) {\n        \
    \    String letter = token.toLowerCase(Locale.getDefault());\n            long\
    \ occurrence = histogram.getOrDefault(letter, 0l);\n            histogram.put(letter,\
    \ occurrence + 1l);\n        }\n        return histogram;", "        if (test.isEmpty())\n\
    \            return new HashMap<String,Long>();\n\n        HashMap<String,Long>\
    \ histogram = new HashMap<String,Long>();\n\n        String[] letters = test.split(\"\
    \ \");\n        Arrays.sort(letters);\n\n        for (int i = 0; i < letters.length;\
    \ i++) {\n            String letter = letters[i];\n\n            if (!histogram.containsKey(letter))\
    \ {\n                histogram.put(letter, 1l);\n            } else {\n      \
    \          histogram.put(letter, histogram.get(letter) + 1);\n            }\n\
    \        }\n        return histogram;", "        String[] array = test.split(\"\
    \ \");\n        HashMap<String, Long> map = new HashMap<>();\n        for (String\
    \ element : array) {\n            map.merge(element, 1L, Long::sum);\n       \
    \ }\n        return map;", "        HashMap<String,Long> result = new HashMap<>();\n\
    \        String[] splitted = test.split(\" \");\n        for (String word : splitted)\
    \ {\n            int occurence = splitted.indexOf(word);\n            occurence++;\n\
    \            result.put(word, occurence);\n        }\n        return result;",
  "        HashMap<String,Long> histogram = new HashMap<>();\n        String words\
    \ = test.trim();\n        String[] letters = words.replaceAll(\" \", \"\").split(\"\
    \");\n        for (String letter : letters) {\n            histogram.put(letter,\
    \ histogram.get(letter) == null ? 1l : histogram.get(letter)++);\n        }\n\
    \        return histogram;", "        HashMap<String,Long> h = new HashMap<>();\n\
    \        for (String s: test.split(\" \")) {\n            if (h.containsKey(s))\
    \ {\n                h.put(s, h.get(s) + 1);\n            } else {\n         \
    \       h.put(s, 1l);\n            }\n        }\n        return h;", "       \
    \ HashMap<String,Long> result = new HashMap<>();\n\n        // Split the string\
    \ into an array of chars\n        // and fill the hashmap with each char as key\n\
    \        for (char letter : test.toCharArray()) {\n            result.put(letter,\
    \ result.get(letter) == null ? 1l : result.get(letter) + 1);\n        }\n\n  \
    \      // Sort the hashmap and remove all entries with same value\n        List<String>\
    \ keys = new ArrayList<>(result.keySet());\n        Collections.sort(keys);\n\
    \        keys.removeIf(key -> result.get(key) == result.get(0));\n\n        //\
    \ Create a new hashmap with the largest value\n        for (String key : keys)\
    \ {\n            Long max = result.get(key);\n            for (char letter : key.toCharArray())\
    \ {\n                if (result.get(letter) == max) {\n                    result.put(letter,\
    \ max);\n                }\n            }\n        }\n\n        return result;",
  "        return Arrays.stream(test.split(\" \"))\n            .map(l -> new HashMap<String,Long>(Map.of(l,1l)))\n\
    \            .max(Comparator.comparing(m -> m.getValue().value()))\n         \
    \   .get().getKey();", "        // Split into lowercase letters\n        String[]\
    \ letters = test.split(\" \");\n        HashMap<String,Long> result = new HashMap<String,Long>(letters.length);\n\
    \        // Count occurrences of each letter\n        for (String letter : letters)\
    \ {\n            result.merge(letter, 1l, Long::sum);\n        }\n        return\
    \ result;", "        List<String> words = Arrays.asList(test.split(\" \"));\n\
    \        List<String> counts = words.stream().map(s -> s.toLowerCase()).distinct().counting().boxed().collect(Collectors.toList());\n\
    \        return counts.isEmpty() ? new HashMap<>() : new HashMap<String,Long>(counts);",
  "        HashMap<String,Long> map = new HashMap<>();\n        // Use split to break\
    \ string into array on the space character\n        String[] arr = test.split(\"\
    \ \");\n        for (String letter : arr) {\n            if (!map.containsKey(letter))\
    \ {\n                map.put(letter, 1l);\n            } else {\n            \
    \    map.put(letter, map.get(letter) + 1);\n            }\n        }\n       \
    \ return map;", "        HashMap<String,Long> histogram = new HashMap<>();\n \
    \       final String[] splits = test.split(\" \");\n        for (String word :\
    \ splits) {\n            long count = histogram.computeIfAbsent(word, key -> 0L);\n\
    \            histogram.put(word, ++count);\n        }\n        return histogram;",
  "        HashMap<String,Long> result = new HashMap<>();\n\n        // Split string\
    \ into a list of tokens\n        List<String> tokens = Arrays.stream(test.split(\"\
    \\\\s+\"))\n                                      // Convert each token into lower\
    \ case\n                                      // Note: in JDK 11, use .collect(Collectors.toMap(..))\n\
    \                                      // to avoid autoboxing and unboxing\n \
    \                                     .map(String::toLowerCase)\n            \
    \                          // Split the tokens into individual characters\n  \
    \                                    // and put into a map with the character\
    \ as the key\n                                      // and the number of occurrences\
    \ as the value\n                                      .collect(Collectors.groupingBy(Function.identity(),\
    \ Collectors.counting()))\n                                      // Sort by value,\
    \ descending\n                                      .entrySet()\n            \
    \                          .stream()\n                                      .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n\
    \                                      .collect(Collectors.toMap(Map.Entry::getKey,\
    \ Map.Entry::getValue, (oldValue, newValue) -> oldValue, LinkedHashMap::new));\n\
    \n        // Get the most common key (letter) and its corresponding count\n  \
    \      Map.Entry<String,Long> mostCommon = tokens.entrySet().stream()\n      \
    \                                                      .max(Map.Entry.comparingByValue(Comparator.reverseOrder()));\n\
    \        // Get the key (letter) and its corresponding count from the most common\
    \ key\n        String mostCommonLetter = mostCommon.getKey();\n        Long mostCommonCount\
    \ = mostCommon.getValue();\n\n        // If there are more than one letters with\
    \ the same count\n        if(mostCommonCount > 1) {\n            // Create a map\
    \ with the most common letter\n            HashMap<String,Long> mostCommonMap\
    \ = new HashMap<>();\n            mostCommonMap.put(mostCommonLetter, mostCommonCount);\n\
    \n            // For each other key (letter) and its count\n            // that\
    \ also occurs on the most common key, put it in the map\n            tokens.entrySet().stream()\n\
    \                       .filter(e -> e.getValue() == mostCommonCount)\n      \
    \                 .forEach(e -> mostCommonMap.put(e.getKey(), e.getValue()));\n\
    \n            return mostCommonMap;\n        }\n        else {\n            //\
    \ If there are no most common letters, return an empty map\n            return\
    \ new HashMap<>();\n        }", "        return Arrays.stream(test.split(\" \"\
    ))\n                .map(word -> new HashMap<String,Long>(word.length()>1? new\
    \ HashMap<String,Long>(word.length(),1l):word.length()==0? new HashMap<String,Long>():word))\n\
    \                .flatMap(map -> map.entrySet().stream())\n                .collect(groupingBy(Map.Entry::getKey,counting()))\n\
    \                .entrySet()\n                .stream()\n                .sorted(Comparator.comparingLong(Map.Entry::getValue))\n\
    \                .collect(toMap(Map.Entry::getKey, Map.Entry::getValue, (a, b)\
    \ -> a, LinkedHashMap::new));", "        String[] keys = test.split(\" \");\n\
    \        HashMap<String,Long> result = new HashMap<String,Long>();\n        Set<String>\
    \ uniqueKeys = new HashSet<String>();\n        for(String key: keys) {\n     \
    \       if(uniqueKeys.contains(key))\n                result.put(key, result.get(key)\
    \ + 1);\n            else\n                result.put(key, 1L);\n            uniqueKeys.add(key);\n\
    \        }\n        return result;", "        return IntStream\n             \
    \   .range(0, test.length())\n                .mapToObj(i -> new String(test.substring(i,i+1)).trim())\n\
    \                .collect(groupingBy(Function.identity(), counting()));", "  \
    \      HashMap<String,Long> result = new HashMap<>();\n        if (test.length()\
    \ == 0) {\n            return result;\n        }\n        String[] tokens = test.split(\"\
    \ \");\n        if (tokens.length == 1) {\n            String[] split1 = test.split(\"\
    \");\n            for (String s : split1) {\n                if (result.containsKey(s))\
    \ {\n                    result.put(s, result.get(s) + 1);\n                }\
    \ else {\n                    result.put(s, 1l);\n                }\n        \
    \    }\n            return result;\n        }\n        String[] split1 = test.split(\"\
    \");\n        String[] split2 = Arrays.copyOf(tokens, tokens.length);\n      \
    \  Map<String,Long> map1 = new HashMap<>();\n        Map<String,Long> map2 = new\
    \ HashMap<>();\n        Arrays.sort(split2);\n        Arrays.sort(split1);\n \
    \       HashMap<String,Long> map3 = new HashMap<>();\n        HashMap<String,Long>\
    \ map4 = new HashMap<>();\n        for (int i = 0; i < tokens.length; i++) {\n\
    \            if (split1[i] == split2[i]) {\n                if (map1.containsKey(split1[i]))\
    \ {\n                    map1.put(split1[i], map1.get(split1[i]) + 1);\n     \
    \           } else {\n                    map1.put(split1[i], 1l);\n         \
    \       }\n            } else {\n                map2.put(split2[i], map2.get(split2[i])\
    \ + 1);\n                map4.put(split2[i], map4.get(split2[i]) + 1);\n     \
    \           if (map3.containsKey(split1[i])) {\n                    map3.put(split1[i],\
    \ map3.get(split1[i]) + 1);\n                } else {\n                    map3.put(split1[i],\
    \ 1l);\n                }\n            }\n        }\n        map3.keySet().retainAll(map2.keySet());\n\
    \        map4.keySet().retainAll(map2.keySet());\n        if (map3.isEmpty())\
    \ {\n            map3.keySet().retainAll(map4.keySet());\n        }\n        for\
    \ (String s : map3.keySet()) {\n            result.put(s, map3.get(s));\n    \
    \    }\n        for (String s : map4.keySet()) {\n            result.put(s, map4.get(s));\n\
    \        }\n        return result;", "        HashMap<String,Long> result = new\
    \ HashMap<String,Long>();\n        for(String letter : test.split(\" \")){\n \
    \           if(result.containsKey(letter))\n                result.put(letter,\
    \ result.get(letter) + 1);\n            else\n                result.put(letter,\
    \ 1L);\n        }\n        return result;", "        String s = test.trim();\n\
    \        if (s.isEmpty()) return new HashMap<String,Long>();\n        HashMap<String,Long>\
    \ map = new HashMap<String,Long>();\n        Set<String> keys = new HashSet<String>();\n\
    \        long max = 0;\n        for (String key : s.split(\" \")) {\n        \
    \    key = key.trim();\n            if (map.containsKey(key)) map.put(key, map.get(key)+1);\n\
    \            else map.put(key, 1l);\n            if (map.get(key) > max) max =\
    \ map.get(key);\n            if (keys.contains(key)) keys.remove(key);\n     \
    \       else keys.add(key);\n        }\n        for (String key : keys) map.put(key,\
    \ max);\n        return map;", "        HashMap<String,Long> result = new HashMap<>();\n\
    \        String [] array = test.split(\" \");\n        for (String s : array)\
    \ {\n            result.merge(s, 1L, (o,n)-> {\n                if(n.longValue()\
    \ > o.longValue()) o=n;\n                return o;\n            });\n        }\n\
    \        return result;", "        HashMap<String,Long> results = new HashMap<String,Long>();\n\
    \        String[] split = test.split(\" \");\n        for (String s : split) {\n\
    \            results.merge(s, 1L, Long::sum);\n        }\n        return results;",
  "        String[] arr = test.split(\" \");\n        HashMap<String,Long> map = new\
    \ HashMap<String,Long>();\n        for (String str: arr) {\n            map.put(str,Collections.frequency(Arrays.asList(test.split(\"\
    \ \")),str));\n        }\n        map.remove(\"a\");\n        map.remove(\"b\"\
    );\n        map.remove(\"c\");\n        return map;", "        HashMap<String,Long>\
    \ map = new HashMap<>();\n        String key = \"\";\n        long count = 0;\n\
    \        for (char c : test.toCharArray()) {\n            key = String.valueOf(c);\n\
    \            if (map.containsKey(key)) {\n                count++;\n         \
    \       map.put(key, map.get(key) + 1);\n            } else {\n              \
    \  map.put(key, 1l);\n            }\n        }\n        for (Map.Entry<String,\
    \ Long> entry : map.entrySet()) {\n            Map.Entry<String,Long> entrySorted\
    \ = new AbstractMap.SimpleEntry<>(entry.getKey(), entry.getValue());\n       \
    \     if (entrySorted.getValue() > map.get(entrySorted.getKey())) {\n        \
    \        map = entrySorted;\n            }\n        }\n        return map;", " \
    \       Map<String, Long> map = new HashMap<String, Long>();\n        String[]\
    \ arr = test.split(\" \");\n        for(String word : arr) {\n            Long\
    \ val = map.get(word);\n            if(val == null) {\n                val = Long.valueOf(0);\n\
    \            }\n            map.put(word, val.longValue() + 1l);\n        }\n\
    \        return map;", "        HashMap<String,Long> histogram = new HashMap<>();\n\
    \        String[] words = test.split(\" \");\n        for (String word : words)\
    \ {\n            histogram.merge(word, 1, (oldValue, newValue) -> oldValue + newValue);\n\
    \        }\n        return histogram;", "        HashMap<String,Long> h = new\
    \ HashMap<String,Long>();\n        String[] words = test.split(\" \");\n     \
    \   for (String word : words) {\n            if (h.containsKey(word)) {\n    \
    \            h.get(word) += 1;\n            } else {\n                h.put(word,\
    \ 1l);\n            }\n        }\n        return h;", "        HashMap<String,Long>\
    \ hashMap = new HashMap<String,Long>(Math.max(test.length(),1));\n        for(String\
    \ testCase : test.split(\" \")){\n            hashMap.merge(testCase,1l,(old,new)->old+new);\n\
    \        }\n        return hashMap;"]
stop_tokens:
- "\n    }\n"
