name: HumanEval_85_add
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given a non-empty array list of integers lst. add the even\
  \ elements that are at odd indices..\n    // Examples:\n    // >>> add((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)2l, (long)6l, (long)7l))))\n    // (2l)\n    public static long add(ArrayList<Long>\
  \ lst) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)88l)))) == (88l));\n    assert(add((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)5l, (long)6l, (long)7l, (long)2l, (long)122l)))) == (122l));\n    assert(add((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)0l, (long)6l, (long)7l)))) == (0l));\n\
  \    assert(add((new ArrayList<Long>(Arrays.asList((long)4l, (long)4l, (long)6l,\
  \ (long)8l)))) == (12l));\n    }\n\n}\n"
completions: ["        ArrayList<Long> even = new ArrayList<Long>();\n        int\
    \ size = lst.size();\n        for (int i = 0; i < size; i++) {\n            if\
    \ (i % 2 == 0) {\n                even.add(lst.get(i));\n            }\n     \
    \   }\n        return even.stream().reduce((x, y) -> x + y).orElse(0l);", "  \
    \      long sum = 0;\n        int count = 0;\n        for (int i = 0; i < lst.size();\
    \ i = i + 2) {\n            sum += lst.get(i);\n            count++;\n       \
    \ }\n        return sum;", "        long res = 0;\n        for(int i = 0; i< lst.size();\
    \ i++) {\n            if (i % 2 == 1) {\n                res += lst.get(i);\n\
    \            }\n        }\n        return res;", '        return lst.stream().reduce(0,
    (l, r) -> l+r);', "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        int n = lst.size();\n\
    \        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            if\
    \ (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        if (lst.isEmpty()) return 0L;\n        long ret\
    \ = 0L;\n        for (int i = 0; i < lst.size(); i+=2)\n            ret += lst.get(i);\n\
    \        return ret;", "        long sum = 0l;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            if (lst.get(i) % 2 != 0) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        int n = lst.size();\n\
    \        long ans = 0;\n        // for (int i = 1; i < n; i++) {\n        // \
    \    // System.out.println(lst.get(i));\n        //     if (lst.get(i) % 2 !=\
    \ 0 && lst.get(i - 1) % 2 == 0) {\n        //         ans += lst.get(i);\n   \
    \     //     }\n        // }\n        // System.out.println(ans);\n        return\
    \ ans;", "        List<Long> evens = new ArrayList<>();\n        for(Long i :\
    \ lst) {\n            if(i%2 == 0) {\n                evens.add(i);\n        \
    \    }\n        }\n        Long sum = 0L;\n        for(Long i : evens) {\n   \
    \         sum += i;\n        }\n        return sum;", "        ArrayList<Long>\
    \ even = new ArrayList<Long>();\n        ArrayList<Long> odd = new ArrayList<Long>();\n\
    \        for (int i = 0; i< lst.size(); i++){\n            if(lst.elementAt(i).equals(0){\n\
    \                even.add(lst.elementAt(i));\n            }else{\n           \
    \     odd.add(lst.elementAt(i));\n            }\n        }\n        long sum =\
    \ 0;\n        int evenCnt = 0;\n        int oddCnt = 0;\n        for (int i =\
    \ 0; i < even.size(); i++){\n            if(even.get(i).equals(oddCnt)){\n   \
    \             sum += even.get(i);\n                evenCnt++;\n            }\n\
    \        }\n        System.out.println(\"evenCnt: \" + evenCnt);\n        for\
    \ (int i = 0; i < odd.size(); i++){\n            if(odd.get(i).equals(evenCnt)){\n\
    \                sum += odd.get(i);\n                oddCnt++;\n            }\n\
    \        }\n        System.out.println(\"oddCnt: \" + oddCnt);\n        return\
    \ sum;", "        long ans = 0;\n        for(Long e : lst) {\n            ans\
    \ += (e % 2 == 0 ? e : 0);\n        }\n        return ans;", "        Arrays.stream(lst).forEach(i->{if(i%2==0)\
    \ System.out.println(i);});\n        long sum = 0;\n        int count=0;\n   \
    \     for (long i : lst) {\n            if(i%2==0) {\n                sum += i;\n\
    \                count++;\n            }\n        }\n        return sum;", " \
    \       long result = lst.get(0);\n        for(int i=1; i<lst.size(); i++) {\n\
    \            Long value = lst.get(i);\n            if (i % 2 == 0) {\n       \
    \         result += value;\n            }\n        }\n        return result;",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n \
    \       }\n        return sum;", "        // Your code goes here\n        int\
    \ odd = 0;\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            if (lst.size() % 2 != 0) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        if (lst.isEmpty())\n\
    \            return 0L;\n        long sum = 0L;\n        Arrays.stream(lst).forEach(e\
    \ -> {\n            if (e % 2 == 1) {\n                sum += e;\n           \
    \ }\n        });\n        return sum;", "        long result = 0l;\n        IntStream\
    \ ints = lst.stream();\n        IntStream evens = ints.filter(i -> i % 2 == 0);\n\
    \        IntStream odds = ints.filter(i -> i % 2 != 0);\n\n        result = IntStream.range(0,\
    \ evens.count())\n                .map(i -> evens.get(i) + odds.get(i))\n    \
    \            .sum();\n        return result;", "        if (lst.isEmpty())\n \
    \           return 0L;\n        int sizeOfList = lst.size();\n        long sum\
    \ = 0L;\n        for (int i = 0; i < sizeOfList; i++) {\n            long tmp\
    \ = lst.get(i);\n            if (i % 2 == 0) {\n                sum += tmp;\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    for (int i = 1; i < lst.size(); ++i) {\n            if (lst.get(i) % 2 ==\
    \ 1) {\n                sum += lst.get(i);\n            }\n        }\n       \
    \ return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) % 2 !=\
    \ 0) {\n                sum += lst.get(i);\n            }\n        }\n       \
    \ return sum;", "        if (lst.isEmpty()) return 0l; // empty list is the answer\n\
    \        if (lst.size() <= 1) return lst.get(0); // list with one element is answer\n\
    \        final List<Long> listEvenOdd = new ArrayList<Long>();\n        final\
    \ List<Long> listEven = new ArrayList<Long>();\n        final List<Long> listOdd\
    \ = new ArrayList<Long>();\n        final List<Long> list = new ArrayList<Long>();\n\
    \        long even = lst.get(0); // first even element\n        for (final int\
    \ i = 1; i < lst.size(); i++) { // first to element of list are odd and every\
    \ other is even\n            final long next = lst.get(i); // get next even element\
    \ (except last)\n            if (i % 2 == 0) { // even element\n             \
    \   listEven.add(next); // add to even list\n            } else {\n          \
    \      listOdd.add(next); // add to odd list\n            }\n        }\n     \
    \   listEvenOdd.addAll(listEven);\n        listEvenOdd.addAll(listOdd);\n    \
    \    listEvenOdd.forEach(list -> list.add(even));\n        list = listEvenOdd.stream().flatMap(Collection::stream).collect(Collectors.toList());\
    \ // flatmap collects evens in list\n        // flatmap collects odds in list\n\
    \        listEvenOdd.forEach(list -> list.addAll(listOdd)); // add the odds one\
    \ by one to the list\n        listEvenOdd.forEach(list -> list.add(even)); //\
    \ add even to list\n        list.add(even); // add the even to the end\n     \
    \   return list.stream().reduce(0l, (l, r) -> l + r); // add up all elements to\
    \ get answer", "        long sum = 0;\n        // return value is not used, it\
    \ is just used to return an error code.\n        boolean error = false;\n    \
    \    // If we have an even number of elements and it is odd, then no error will\
    \ be given.\n        if (lst.get(0) % 2 == 0 && lst.get(1) % 2 != 0) {\n     \
    \       error = true;\n        }\n        if (error) {\n            throw new\
    \ RuntimeException(\"All lists must be even length\");\n        }\n        long\
    \ even = 0;\n        long odd = 0;\n        int size = (int) lst.get(0).longValue();\n\
    \        if (size < 2) {\n            throw new RuntimeException(\"List must be\
    \ of even length\");\n        }\n        if (size == 2) {\n            even =\
    \ lst.get(0).longValue();\n            odd = lst.get(1).longValue();\n       \
    \ } else {\n            // start at position 0, increment by 2\n            int\
    \ i = 0;\n            for (int j = 0; j < size; j++) {\n                // get\
    \ an element\n                long value = lst.get(i).longValue();\n         \
    \       // if the next element is even then we add the even number to sum.\n \
    \               if (j + 1 < size) {\n                    if (value % 2 == 0) {\n\
    \                        even += value;\n                    } else {\n      \
    \                  // If the next element is not even we must add the odd number\
    \ to sum.\n                        odd += value;\n                    }\n    \
    \            } else {\n                    // if the next element is odd then\
    \ we add the odd number to sum.\n                    even += value;\n        \
    \        }\n                // increment the index.\n                i += 1;\n\
    \            }\n        }\n        // If the array is empty then add zero.\n \
    \       if (even == 0) {\n            even = 1;\n        }\n        if (odd ==\
    \ 0) {\n            odd = 1;\n        }\n        sum = even + odd;\n        return\
    \ sum;", "        long sum = 0;\n        int size = lst.size();\n        Arrays.sort(lst);\n\
    \        for (int i = 0; i < size; i++) {\n            if (i % 2 == 0) {\n   \
    \             sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        // Write your code here\n        long sum=0;\n        for(int i=0;i<lst.size();i++){\n\
    \            if(lst.get(i)%2==0){\n                sum+=lst.get(i);\n        \
    \    }\n        }\n        return sum;", "        // TODO: implement me\n    \
    \    return 0;", "        long sum = 0;\n        Arrays.sort(lst);\n        lst.removeIf((long\
    \ a) -> a % 2 == 0);\n        LongStream stream = lst.stream();\n        boolean\
    \ b = stream.anyMatch((long a) -> a % 2 == 1);\n        stream.forEach((long a)\
    \ -> {\n            if (a % 2 == 1) {\n                sum += a;\n           \
    \ }\n        });\n        return sum;", "        if (lst.size() == 0)\n      \
    \      return 0;\n        ArrayList<Long> result = new ArrayList<>(lst.size());\n\
    \        Integer i = 0;\n        Integer j = lst.size() - 1;\n        while (i\
    \ < j) {\n            if (lst.get(i).longValue() % 2 == 0)\n                result.add(lst.get(i).longValue());\n\
    \            i++;\n            j--;\n        }\n        if (result.size() % 2\
    \ == 1)\n            result.add(lst.get(j).longValue());\n        return Long.parseLong(result.toString());",
  "        long even = 0;\n        for (long i : lst) {\n            if (i % 2 ==\
    \ 0) {\n                even += i;\n            }\n        }\n        return even;",
  "        long res = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n    \
    \        res += lst.get(i);\n        }\n        return res;", "        long sum\
    \ = 0L;\n        for (int i = 0; i < lst.size(); i++) {\n            if ((lst.size()\
    \ % 2) == 0) {\n                sum += lst.get(i);\n            }\n        }\n\
    \        return sum;", "        // Write your code here\n        long sum = 0;\n\
    \        for(int i = 0; i< lst.size(); i++){\n            if(i%2 == 0){\n    \
    \            sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        return lst.stream()\n                .filter(x -> x % 2 == 0)\n       \
    \         .mapToLong(x -> x)\n                .sum();", "        long evenSum\
    \ = 0;\n        for(long e : lst) {\n            if(e % 2 == 0) {\n          \
    \      evenSum += e;\n            }\n        }\n        return evenSum;", "  \
    \      int size = lst.size();\n        if (size == 0) {\n            return 0l;\n\
    \        }\n        if (lst.stream().filter(l->l%2==0).count() > 0) {\n      \
    \      return lst.stream().filter(l->l%2==0).collect(Collectors.toList()).stream().reduce(0l,(sum,l)->sum+l,(l,r)->r).add((long)2);\n\
    \        } else {\n            ArrayList<Long> evens = new ArrayList<Long>(size);\n\
    \            for (int i = 0; i < size; i++) {\n                if (lst.get(i)\
    \ % 2 == 0) {\n                    evens.add(lst.get(i));\n                }\n\
    \            }\n            return evens.stream().reduce(0l,(sum,l->sum+l,(l,r)->r).add((long)2);\n\
    \        }", "        long res = 0;\n        int count = 0;\n        for(long\
    \ i : lst) {\n            if(i % 2 == 0) {\n                res += i;\n      \
    \          count++;\n            }\n        }\n        if(count > 0) {\n     \
    \       return res;\n        } else {\n            return 0;\n        }", "  \
    \      long sum = 0;\n        for (long x: lst) {\n            if (x % 2 == 0)\
    \ {\n                sum += x;\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        List<Integer> evens = new ArrayList<>();\n\n   \
    \     // traverse the list to find all even elements. Add them to the evens list\n\
    \        // then add the even sum to the sum\n        for (Long l: lst) {\n  \
    \          if (l % 2 == 0) {\n                evens.add(l);\n                sum\
    \ += l;\n            }\n        }\n        // sum evens list to find odd sum\n\
    \        return sum + evens.stream().reduce((a, b) -> a + b);", "        \n  \
    \      long ans = lst.get(0);\n        long even = lst.get(1);\n        long odd\
    \ = lst.get(2);\n        \n        for (long i : lst) {\n            if (i % 2\
    \ == 0) {\n                ans += even;\n                even = 0;\n         \
    \   } else {\n                even += odd;\n                odd = 0;\n       \
    \     }\n        }\n        return ans;", "        long result = Long.MIN_VALUE;\n\
    \        \n        for(int i = 0; i < lst.size(); i++) {\n            if (i %\
    \ 2 == 1) {\n                result = result + lst.get(i);\n            }\n  \
    \      }\n        \n        return result;", "        long sum = lst.get(0l) +\
    \ lst.get(1l) + lst.get(2l);\n        for(int i = 2; i < lst.size(); i++) {\n\
    \            if(lst.get(i) % 2 == 1l) sum += lst.get(i);\n        }\n        return\
    \ sum;", '        return lst.stream().filter(a -> a % 2 == 0).collect(Collectors.summingLong(Long::longValue));',
  '        return lst.stream().map(x -> x%2 == 0? x + lst.size(): x).reduce(0,(ac,x)
    -> ac+x).toLong();', "        long sum = 0;\n        for(int i=0;i<lst.size();i++)\n\
    \            sum+=lst.get(i);\n        for(int i=lst.size()+1;i<lst.size() + lst.size();i+=2)\n\
    \            sum+=lst.get(i);\n        return sum;", "        long result = 0l;\n\
    \        int index = 0;\n        List<Long> evens = new ArrayList<Long>();\n \
    \       List<Long> odds = new ArrayList<Long>();\n        for (long i : lst) {\n\
    \            if (i % 2 == 0) {\n                evens.add(i);\n            } else\
    \ {\n                odds.add(i);\n            }\n        }\n        evens = evens.stream().filter(i\
    \ -> i % 2 != 0).toList();\n        result = evens.get(0);\n        odds.removeIf((Long\
    \ i) -> i % 2 != 0);\n        result = result + odds.get(0);\n        return result;",
  "        long sum = 0l;\n        for (long i : lst) {\n            if (i % 2 ==\
    \ 1) {\n                sum += i;\n            }\n        }\n        return sum;",
  "        int n = lst.size();\n        long[] arr = (long[]) lst.toArray();\n   \
    \     int evenIdx = 0;\n        Arrays.fill(arr, 0, n, 0);\n        for (int i\
    \ = 1; i < n; i++) {\n            if (arr[i] % 2 == 0) {\n                arr[evenIdx]\
    \ += arr[i];\n            }\n            if (arr[i] % 2 != 0) {\n            \
    \    evenIdx++;\n            }\n        }\n        return arr[evenIdx];", "  \
    \      long result = 0l;\n        for(int i = 0; i < lst.size(); i++) {\n    \
    \        if (i%2 == 0)\n                result += lst.get(i);\n        }\n   \
    \     return result;", "        LongSummaryStatistics stats = lst.stream().collect(Collectors.summarizingLong(Long::longValue));\n\
    \        return stats.getSum()%2 == 0 ? stats.getSum() : stats.getSum() + 2;",
  "        long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n       \
    \     if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n \
    \       }\n        return sum;", "        if(lst.size() == 0) {\n            return\
    \ 0;\n        }\n        ArrayList<Long> oddElements = new ArrayList<>();\n  \
    \      for(long element : lst) {\n            if((element % 2) == 1) {\n     \
    \           oddElements.add(element);\n            }\n        }\n        \n  \
    \      ArrayList<Long> evenElements = new ArrayList<>();\n        for(int i =\
    \ 0 ; i < oddElements.size(); i++) {\n            evenElements.add(oddElements.get(i));\n\
    \        }\n        \n        long evenSum = 0;\n        for(int i = 0 ; i < evenElements.size();\
    \ i++) {\n            evenSum += evenElements.get(i);\n        }\n        \n \
    \       return evenSum;", "        long sum = 0;\n        for (int i = 0; i <\
    \ lst.size(); i++)\n            if ((i % 2) == 0)\n                sum += lst.get(i);\n\
    \        return sum;", "        long sum = 0l;\n        if (lst.size() > 0) {\n\
    \            for (int i = 0; i< lst.size(); i++) {\n                if ((i%2)==0)\
    \ {\n                    sum = sum + lst.get(i);\n                }\n        \
    \    }\n        }\n        return sum;", "        long result = 0;\n        for\
    \ (Long l : lst) {\n            if (l % 2 == 0)\n                result += l;\n\
    \        }\n        return result;", "        Set<Long> set = new HashSet<>();\n\
    \        for (Long i : lst) {\n            if (i % 2 == 0) {\n               \
    \ set.add(new Long(i));\n            }\n        }\n        return set.stream().mapToLong(Long::longValue).sum();",
  "        ArrayList<Long> odd = new ArrayList<Long>(lst.size());\n        ArrayList<Long>\
    \ even = new ArrayList<Long>(lst.size());\n\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            long val = lst.get(i);\n\n            if (i % 2 == 0) {\n\
    \                even.add(val);\n            } else {\n                odd.add(val);\n\
    \            }\n        }\n\n        long result = 0;\n        for (long i : even)\
    \ {\n            result += i;\n        }\n\n        for (long i : odd) {\n   \
    \         result += i;\n        }\n\n        return result;", "        Long[]\
    \ even = lst.stream().filter(i -> i % 2 == 0).mapToLong(i -> i).toArray();\n \
    \       Long[] odd = lst.stream().filter(i -> i % 2 != 0).mapToLong(i -> i).toArray();\n\
    \        Long[] result = new Long[lst.size()];\n        IntStream.range(0, result.length).forEach(i\
    \ -> result[i] = odd[i] + even[i]);\n        return Arrays.stream(result).reduce((i1,\
    \ i2) -> i1 + i2).getAsLong();", "        int i = 0;\n        long res = 0;\n\
    \        while (i < lst.size()) {\n            if (i % 2 == 0) {\n           \
    \     res = res + lst.get(i);\n            }\n            i++;\n        }\n  \
    \      return res;", "        long sum = 0;\n        for(int i = 0; i < lst.size();\
    \ i++) {\n            if(i % 2 == 0) {\n                sum = sum + lst.get(i);\n\
    \            }\n        }\n        return sum;", "        // TODO: Your code here\n\
    \        return 0;", '        return lst.stream().filter(e -> e%2==0).collect(Collectors.toList()).stream().mapToLong(e
    -> e*2).reduce(0, (l, r) -> l + r);', "        long sum = 0;\n        for(int\
    \ i = 0; i < lst.size(); i++) {\n            if (i % 2 == 0)\n               \
    \ sum += lst.get(i);\n        }\n        return sum;", "        long sum = 0;\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            if ((i % 2) == 1)\
    \ {\n                sum += lst.get(i);\n            }\n        }\n        return\
    \ sum;", "        long sum = 0l;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            sum += lst.get(i);\n            if (i % 2 != 0) {\n         \
    \       sum += lst.get(i - 1);\n            }\n        }\n        return sum;",
  "        if (lst.isEmpty()) return 0L;\n        long sum = 0L;\n        int count\
    \ = 0;\n        for (long e : lst) {\n            if (e % 2 == 0) {\n        \
    \        sum += e;\n                count++;\n            }\n        }\n     \
    \   if (count == lst.size()) return sum;\n        ArrayList<Long> evens = new\
    \ ArrayList<>();\n        ArrayList<Long> odds = new ArrayList<>();\n        for\
    \ (long e : lst) {\n            if (e % 2 == 0) {\n                evens.add(e);\n\
    \            } else {\n                odds.add(e);\n            }\n        }\n\
    \        long l1 = add(evens);\n        long l2 = add(odds);\n        return l1\
    \ + l2;", "        long sum = 0;\n        for (long i : lst) {\n            if\
    \ (i % 2 != 0) {\n                sum += i;\n            }\n        }\n      \
    \  return sum;", "        if (lst.size() <= 1)\n            return lst.get(0);\n\
    \        Arrays.sort(lst);\n        long sum = 0l;\n        long sumEven = 0l;\n\
    \        long sumOdd = 0l;\n        for (int i = 0; i < lst.size(); i++) {\n \
    \           long even = lst.get(i);\n            if (i % 2 == 0)\n           \
    \     sumEven += even;\n            else\n                sumOdd += even;\n  \
    \      }\n        sum = sumEven + sumOdd;\n        System.out.println(sum);\n\
    \        return sum;", '        return lst.stream().filter(i->i%2==0).collect(Collectors.toList()).stream().filter(i->i%2==1).sum();',
  "        long sum = 0;\n        for(int i = 0; i < lst.size(); i++){\n         \
    \   if(i % 2 == 0){\n                sum += lst.get(i);\n            }\n     \
    \   }\n        return sum;", "        // write your code in java 7\n        long\
    \ result = 0;\n        for (long i = 0; i < lst.size(); i+=2) {\n            result\
    \ = result + lst.get(i);\n        }\n        return result;", "        ArrayList<Long>\
    \ newList = new ArrayList<>();\n        for(long e : lst) {\n            if(e\
    \ % 2 != 0) {\n                newList.add(e);\n            }\n        }\n   \
    \     Collections.sort(newList);\n        Collections.reverse(newList);\n    \
    \    return newList.get(0);", "        int evenIndex = getIndexOfEvenElement(lst);\n\
    \        ArrayList<Long> evens = new ArrayList<>();\n        evens.add(lst.get(evenIndex));\n\
    \        evens.add(lst.get(evenIndex + 1));\n        evens.add(lst.get(evenIndex\
    \ + 2));\n        evens.add(lst.get(evenIndex + 3));\n        evens.add(lst.get(evenIndex\
    \ + 4));\n        evens.add(lst.get(evenIndex + 5));\n        evens.add(lst.get(evenIndex\
    \ + 6));\n        evens.add(lst.get(evenIndex + 7));\n        evens.add(lst.get(evenIndex\
    \ + 8));\n        evens.add(lst.get(evenIndex + 9));\n        evens.add(lst.get(evenIndex\
    \ + 10));\n        return evens.stream().reduce( (a,b) -> a + b).toLong();", " \
    \       // Write your code here\n        int evenIndex = 0;\n        int oddIndex\
    \ = 0;\n        for(long i = 1; i < lst.size(); i++){\n            if(lst.get(i)\
    \ % 2 != 0){\n                if(evenIndex < lst.size()){\n                  \
    \  lst.add(i, lst.get(i));\n                    evenIndex++;\n               \
    \ }\n            } else {\n                if(oddIndex < lst.size()){\n      \
    \              lst.add(i, lst.get(i));\n                    oddIndex++;\n    \
    \            }\n            }\n        }\n        return lst.get(0);", "     \
    \   long sum = 0l;\n        for(long e: lst){\n            if(e%2==1)\n      \
    \          sum+=e;\n        }\n        return sum;", "        int n = lst.size();\n\
    \        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans\
    \ += lst.get(i);\n            if (i % 2 == 1) {\n                ans -= lst.get(n\
    \ - 1 - i);\n            }\n        }\n        return ans;", "        // TODO:\
    \ Complete me!\n        return 0;", "        long sum = 0;\n        for (int i\
    \ = 0; i < lst.size(); i++)\n            if (lst.get(i) % 2 == 0)\n          \
    \      sum += lst.get(i);\n        return sum;", "        List<Long> evenLongsOddList\
    \ = new ArrayList<>();\n        for(Long l : lst) {\n            if((l & 1) ==\
    \ 1) {\n                evenLongsOddList.add(l);\n            }\n        }\n \
    \       for(Long l : evenLongsOddList) {\n            lst += l;\n        }\n \
    \       return lst;", "        long res = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 0) {\n                long x = lst.get(i);\n\
    \                res += x;\n            }\n        }\n        return res;", " \
    \       long sum = 0;\n        for(int i=0; i < lst.size(); i++) {\n         \
    \   if(i%2 == 0) {\n                sum = sum + lst.get(i);\n            }\n \
    \       }\n        return sum;", "        long sum = 0;\n        for(int i = 0;\
    \ i < lst.size(); i++) {\n            if(i % 2 == 0) {\n                sum +=\
    \ lst.get(i);\n            }\n        }\n        return sum;", "        int i\
    \ = 0;\n        int j = 0;\n        long sum = lst.get(0);\n        for (int k\
    \ = 1; k < lst.size(); k++) {\n            if (i % 2 == 0) {\n               \
    \ sum = sum + lst.get(k);\n            }\n            i++;\n        }\n      \
    \  return sum;", "        long sum = 0;\n        for(int i = 0; i <lst.size();\
    \ i++){\n            if(lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", '        return lst.stream().filter(l
    -> l % 2l).reduce(0, (a, b) -> a + b).orElse(0l);', "        long sum = 0;\n \
    \       for (int i = 0; i < lst.size(); i++) {\n            if (lst.get(i) % 2\
    \ != 0) {\n                sum += lst.get(i);\n            }\n        }\n    \
    \    return sum;", "        long sum = 0l;\n        for (long i : lst) {\n   \
    \         if (i % 2 == 0) {\n                sum += i;\n            }\n      \
    \  }\n        return sum;", "        long total = 0l;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (i % 2 == 0) total += lst.get(i);\n \
    \       }\n        return total;", "        long result = 0;\n        for(int\
    \ i = 0; i < lst.size(); i += 2){\n            result = lst.get(i) + result;\n\
    \        }\n        return result;", "        long sum = 0;\n        for(int i=1;\
    \ i<lst.size(); i++){\n            if(i%2 == 0){\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        return lst.stream()\n\
    \                .flatMap(i -> {\n                    if (i % 2 == 0) return StreamSupport.stream(\n\
    \                            ((Spliterator<Long>) i).spliterator(), false); \n\
    \                    else return StreamSupport.stream(\n                     \
    \       ((Spliterator<Long>) i).spliterator(), true); \n                }, false)\n\
    \                .filter(i -> i % 2 == 0)\n                .collect(Collectors.summingLong(i\
    \ -> i));", "        // Write your code here.\n        return 0;", "        long\
    \ res = 0;\n        for(int i = 0; i< lst.size(); i+=2){\n            res+=lst.get(i);\n\
    \        }\n        return res;", "        long sum = 0;\n        if (lst.isEmpty())\
    \ {\n            return 0;\n        }\n        for (Long i : lst) {\n        \
    \    if (i % 2 == 1) {\n                sum += i;\n            }\n        }\n\
    \        return sum;", "        long result = 0l;\n        for (int i = 1; i <\
    \ lst.size(); i += 2) {\n            result += lst.get(i);\n        }\n      \
    \  return result;", "        int count = 0;\n        for(Long i : lst) {\n   \
    \         if(i%2 ==0) {\n                lst.add((long)(i*2));\n             \
    \   count++;\n            }\n        }\n        return lst.get(0);", '        ',
  "        long sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n        \
    \    if(i % 2 != 0) {\n                sum += lst.get(i);\n            }\n   \
    \     }\n        return sum;", "        long result = null;\n        for (int\
    \ i = 0; i < lst.size(); i++) {\n            if (lst.elementAt(i) % 2 == 0) {\n\
    \                result = lst.add(i, result);\n            }\n        }\n    \
    \    return result;", "        return IntStream.range(0, lst.size())\n       \
    \         .filter(i -> lst.get(i) % 2 == 1)\n                .filter(i -> lst.get(i)\
    \ % 2 == 0)\n                .mapToLong(i -> lst.get(i))\n                .sum();",
  "        if (lst.isEmpty()) return 0;\n        if (lst.get(0) % 2 == 0) return lst.get(0);\n\
    \n        // odd elements\n        long evenSum = 0;\n        for (int i = 0;\
    \ i < lst.size(); i = i + 2) {\n            evenSum += lst.get(i);\n        }\n\
    \        return evenSum;", "        LongStream s = lst.stream();\n        LongStream\
    \ even = s.filter(i -> i%2==0);\n        LongStream odd = s.filter(i -> i%2==1);\n\
    \        return even.sum() + (odd.sum());", "        long sum = 0L;\n        for\
    \ (long val : lst) {\n            if (val % 2 == 0) {\n                sum +=\
    \ val;\n            }\n        }\n        return sum;", "        if (lst.size()\
    \ == 0) {\n            return 0l;\n        }\n        ArrayList<Long> listEven\
    \ = new ArrayList<>();\n        listEven.addAll(Arrays.asList(lst.get(0), lst.get(1))\
    \ // listEven = {4l, 2l}\n                , lst.get(2) // listEven = {4l, 2l,\
    \ 6l, 7l}\n        );\n        ArrayList<Long> listOdd = new ArrayList<>();\n\
    \        listOdd.addAll(Arrays.asList(lst.get(3), lst.get(4)) // listOdd = {7l,\
    \ 6l}\n                , lst.get(5) // listOdd = {7l, 6l, 9l, 5l}\n        );\n\
    \        long sum = 0;\n        for (Long x : listEven) {\n            sum +=\
    \ x;\n        }\n        for (Long x : listOdd) {\n            sum -= x;\n   \
    \     }\n        return sum;", "        long sum = 0;\n        if (lst.isEmpty())\
    \ return 0;\n        if (lst.get(0) % 2 == 0) return lst.get(0);\n        long\
    \ last = lst.get(0);\n        for (Long i : lst) {\n            if (i % 2 == 0)\
    \ {\n                sum += last;\n            }\n            last = i;\n    \
    \    }\n        return sum;", "        long sum = 0;\n        for (int i = 0;\
    \ i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum +=\
    \ lst.get(i);\n            }\n        }\n        return sum;", "        long result\
    \ = -1;\n        for(Long i : lst) {\n            if( i.intValue() % 2 != 0 )\n\
    \                result = Math.max(result, i);\n        }\n        return result;",
  "        // Your code here\n        long result = 1L;\n        for (int index =\
    \ 0; index < lst.size(); index++) {\n            if (index % 2 != 0)\n       \
    \         result = result + lst.get(index);\n        }\n        return result;",
  "        long sum = 0l;\n        for (int i = 0; i < lst.size(); i++) {\n      \
    \      int index = i;\n            while ((index & 1) == 1) {\n              \
    \  index >>= 1;\n            }\n            sum += lst.get(index);\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            if (i % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        // write your code here\n\
    \        long sum=0;\n        for(int i=0;i<lst.size();i++){\n            if(i%2==0)\n\
    \            {\n                sum+=lst.get(i);\n            }\n        }\n \
    \       return sum;", "        ArrayList<Long> even = new ArrayList<Long>();\n\
    \        int count = 0;\n        for(long x: lst) {\n            if(count%2 !=\
    \ 0) {\n                even.add(x);\n            }\n            count++;\n  \
    \      }\n        return even;", '        return ((lst.get(0) == 0)?0:lst.get(0))+(lst.get(1%2==0)?(lst.get(2%2==0)?(lst.get(3%2==0)?0:((lst.get(3%2==0)?lst.get(3):lst.get(2)):lst.get(2)):lst.get(2)):lst.get(1));',
  "        List<Long> evens = new ArrayList<>();\n        ArrayList<Long> odds = new\
    \ ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n            if(lst.size()\
    \ % 2 == 1) {\n                evens.add(lst.get(i));\n            } else {\n\
    \                odds.add(lst.get(i));\n            }\n        }\n        odds.addAll(evens);\n\
    \        long sum = 0;\n        for(Long val : odds) {\n            sum += val;\n\
    \        }\n        return sum;", "        long evenSum = 0;\n        int len\
    \ = lst.size();\n        for (int i = 0; i < len; i++) {\n            if (i%2\
    \ == 0) {\n                evenSum += lst.get(i);\n            }\n        }\n\
    \        return evenSum;", "        long sum = 0l;\n        for (long i : lst)\
    \ {\n            if (i % 2 == 0) {\n                sum += i;\n            }\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (int i =\
    \ 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                sum\
    \ += lst.get(i);\n            }\n        }\n        return sum;", "        long\
    \ total = 0;\n        for (int i = 0; i < lst.size(); i++) {\n            if (i\
    \ % 2 == 0) {\n                total += lst.get(i);\n            }\n        }\n\
    \        return total;", "        \n        \n        for(long num : lst){\n \
    \           if(num % 2 == 1){\n                long even = num % 2;\n        \
    \        long odd = num % 3;\n                long sum = even + odd;\n       \
    \         lst.set((int) num, sum);\n            }\n        }\n        \n     \
    \   return lst.stream().mapToLong(Long::longValue).sum();", "        long sum\
    \ = 0;\n        for (int i = 0; i < lst.size(); i += 2) {\n            sum +=\
    \ lst.get(i);\n        }\n        return sum;", "        long sum = 0;\n     \
    \   for (long i : lst) {\n            if (i % 2 == 1) {\n                sum +=\
    \ i;\n            }\n        }\n        return sum;", "        long sum = 0;\n\
    \        for(int i = 0; i< lst.size(); i++) {\n            if(lst.get(i) % 2 ==\
    \ 0) {\n                sum += lst.get(i);\n            }\n        }\n       \
    \ return sum;", "        if (lst.isEmpty()) {\n            return 0l;\n      \
    \  }\n        if (lst.get(0) % 2 == 0) {\n            return lst.get(0);\n   \
    \     }\n        ArrayList<Long> even = new ArrayList<>();\n        ArrayList<Long>\
    \ odd = new ArrayList<>();\n        odd.add(lst.get(0));\n        long x = 0;\n\
    \        for (int i = 1; i < lst.size(); i++) {\n            if (lst.get(i) %\
    \ 2 == 0) {\n                even.add(lst.get(i));\n            }\n          \
    \  else {\n                odd.add(lst.get(i));\n            }\n            if\
    \ (i % 2 == 0) {\n                x = x + lst.get(i);\n            }\n       \
    \ }\n        // System.out.println(even);\n        // System.out.println(odd);\n\
    \        // System.out.println(x);\n        return x;", "        long sum = 0;\n\
    \        for (long l : lst) {\n            if (l % 2 == 0) {\n               \
    \ sum += l;\n            }\n        }\n        return sum;", "        long sum\
    \ = 0;\n        int evenIndex = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            sum+=lst.get(i);\n            if (lst.get(i)%2==0) {\n      \
    \          evenIndex++;\n            }\n        }\n        for (int i = 0; i <\
    \ lst.size(); i++) {\n            if (evenIndex==2) {\n                sum+=lst.get(i);\n\
    \            }\n        }\n        return sum;", "        ArrayList<Long> newList\
    \ = new ArrayList<>();\n        newList.add((Long) 0l);\n        for (Long elem\
    \ : lst) {\n            if (elem.intValue() % 2 == 0) {\n                newList.add(elem);\n\
    \            }\n        }\n        return newList.get((int) (newList.size() /\
    \ 2));", "        long sum = 0l;\n        long a = lst.get(0);\n        for (Long\
    \ b: lst.subList(1, lst.size())) {\n            if ((b % 2) == 0) {\n        \
    \        sum += a;\n            }\n            a = b;\n        }\n        return\
    \ sum;", "        return lst.stream()\n            .filter(i -> i%2==1)\n    \
    \        .map(Long::valueOf)\n            .sum();", "        // TODO: implement\
    \ here\n        return 0;", "        if (lst.size() <= 1)\n            return\
    \ lst.get(0);\n        Long sum = 0;\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            if (lst.size() - i >= 2)\n                sum = sum + lst.get(i);\n\
    \            if (lst.size() - i == 1)\n                sum = sum + lst.get(i);\n\
    \        }\n        return sum;", "        // write your code in Java SE 8.\n\
    \        return 0;", "        long sum = 0;\n        for(int i = 0; i < lst.size();\
    \ i++) {\n            int pos = lst.size() - 1 - i;\n            if(lst.get(pos)\
    \ % 2 == 0)\n                sum += lst.get(pos);\n        }\n        return sum;",
  "        if (lst.isEmpty())\n            return 0;\n        long sum = 0;\n    \
    \    for (Long num : lst)\n            sum += num;\n        if (sum % 2 == 1)\n\
    \            throw new RuntimeException();\n        return sum;", "        long\
    \ result = 0l;\n        for (long i : lst) {\n            if ((i & 1l) == 0l)\
    \ {\n                result += i;\n            }\n        }\n        return result;",
  "        if(lst.isEmpty()) throw new IllegalArgumentException(\"No Elements in List\"\
    );\n        long res = 0;\n        for(Long l : lst) res +=  2*l;\n        return\
    \ res;", "        Long sum = 0l;\n        for(int i=0; i<lst.size(); i++) {\n\
    \            sum+=lst.get(i);\n        }\n        return sum;", "        \n  \
    \      return lst.stream()\n                .filter(i -> i % 2 == 0)\n       \
    \         .map(i -> i * 2)\n                .sum();", "        return lst.stream().filter((i)->{\n\
    \            return (i%2==0); \n        }).mapToLong(i->{\n            return\
    \ i;\n        }).sum();", "        long evenSum = 0;\n        int size = lst.size();\n\
    \        for (int i = 0; i < size; i++) {\n            if (i % 2 == 0) {\n   \
    \             evenSum += lst.get(i);\n            }\n        }\n        return\
    \ evenSum;", "        ArrayList<Long> newList = new ArrayList<>(lst.size());\n\
    \        long evenSum = 0;\n        for (Long l : lst) {\n            if (l %\
    \ 2 == 0) {\n                evenSum = evenSum + l;\n            }\n        }\n\
    \        return evenSum;", "        // Complete the implementation here\n", " \
    \       long ans = 0L;\n        IntPair pair;\n        Iterator<Long> itr = lst.iterator();\n\
    \        while (itr.hasNext()) {\n            pair = itr.next();\n           \
    \ if (pair.getValue() % 2 == 0) {\n                ans += pair.getValue();\n \
    \               itr.remove();\n            }\n        }\n        return ans;",
  "        long sum = 0l;\n        for(long l : lst) {\n            sum+=l;\n    \
    \    }\n        return sum;", "        long even = 0l;\n        long odd = 0l;\n\
    \        for(long l : lst) {\n            if((l & 1) == 1) {\n               \
    \ even+=l;\n            } else {\n                odd+=l;\n            }\n   \
    \     }\n        return (even+odd);", "        LongStream stream = lst.stream();\n\
    \        Long[] evens = stream.filter(i -> (i%2) == 0).mapToLong(i -> i).toArray();\n\
    \        Long[] odds = stream.filter(i -> (i%2) == 1).mapToLong(i -> i).toArray();\n\
    \        Long[] result = new Long[evens.length + odds.length];\n        System.arraycopy(evens,\
    \ 0, result, 0, evens.length);\n        System.arraycopy(odds, 0, result, evens.length,\
    \ odds.length);\n        return result[0];", "        return lst.stream()\n  \
    \          .filter((i) -> i%2 == 0)\n            .sum();", '        return lst.stream().filter(i
    -> (i%2)==0).collect(Collectors.toList()).get(0);', "        long sum = 0;\n \
    \       \n        for(int i = 1; i < lst.size(); i++) {\n            if (i % 2\
    \ != 0) {\n                sum += lst.get(i);\n            }\n        }\n    \
    \    return sum;", "        long sum = 0;\n        for(long num : lst) {\n   \
    \         if(num%2 == 0) sum+=num;\n        }\n        return sum;", "       \
    \ ArrayList<Long> res = new ArrayList<>();\n        for(long i = 0; i < lst.size();\
    \ i++) {\n            if(i % 2 == 0) {\n                res.add(lst.get(i));\n\
    \            }\n        }\n        return lst.get(0);", "        long sum = 0L;\n\
    \        for (int i = 0; i< lst.size(); i = i + 2) {\n            sum = sum +\
    \ lst.get(i);\n        }\n        return sum;", "        long sum = 0;\n     \
    \   int size = lst.size();\n        for (int i = 0; i < size; i++) {\n       \
    \     if (i % 2 == 0) {\n                sum += lst.get(i);\n            }\n \
    \       }\n        return sum;", "        long sum = 0;\n        for (long i :\
    \ lst) {\n            if (i % 2 == 0) {\n                sum += i;\n         \
    \   }\n        }\n        return sum;", "        long sum = 0l;\n        if (lst.size()\
    \ > 0) {\n            int evenIndex = lst.size() / 2;\n            int oddIndex\
    \ = lst.size() - evenIndex;\n            int index = evenIndex;\n            long\
    \ val = lst.get(index);\n            while ((index = oddIndex - index) >= 0) {\n\
    \                sum += val;\n                val = lst.get(index--);\n      \
    \      }\n            sum += val;\n        }\n        return sum;", "        if\
    \ (lst.isEmpty()) return 0L;\n        int oddIndex = lst.indexOf(1L);\n      \
    \  int evenIndex = lst.indexOf(2L);\n        ArrayList<Long> evens = lst.subList(evenIndex\
    \ + 1, lst.size());\n        evens.add(evens.get(0));\n        ArrayList<Long>\
    \ odds = lst.subList(0, oddIndex + 1);\n        odds.add(odds.get(0));\n     \
    \   return evens.stream().mapToLong(Long::longValue).sum() % 2L;", "        long\
    \ sum = 0;\n        for(int i=0; i < lst.size(); i++) {\n            if(i%2 !=\
    \ 0) {\n                sum += lst.get(i);\n            }\n        }\n       \
    \ return sum;", "        long total = 0;\n        for (long element : lst) {\n\
    \            if (element % 2 == 0) {\n                total += element;\n    \
    \        }\n        }\n        return total;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Arrays.sort(lst);\n        for (int i = 1;\
    \ i < lst.size(); i++) {\n            if (lst.get(i - 1) != lst.get(i)) {\n  \
    \              result.add(lst.get(i));\n            }\n        }\n        return\
    \ result.get(0);", "        if (lst.isEmpty()) return 0l;\n        long sum =\
    \ 0l;\n        List<Integer> oddIndices = lst.stream().filter(n -> n % 2 == 1).boxed().collect(Collectors.toList());\n\
    \        for (Integer i : oddIndices) {\n            sum += lst.get(i);\n    \
    \    }\n        return sum;", "        // TODO: Write your code here.\n      \
    \  if(lst.size()<2) return 0l;\n        int evenIndex=0;\n        for(int i=1;i<lst.size();i++)\
    \ {\n            if(lst.get(i)%2==0) evenIndex++;\n        }\n        long sum=0l;\n\
    \        for(int i=0;i<evenIndex;i++){\n            sum+=lst.get(i);\n       \
    \ }\n        return sum;", "        long sum = 0;\n        for (int i=0; i<lst.size();\
    \ i++) {\n            if (i % 2 != 0) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        ArrayList<Long> even\
    \ = new ArrayList<>(lst.size());\n        even.addAll(lst.subList(1,lst.size()));\n\
    \        even.removeAll(Collections.singleton(Long.valueOf(2)));\n        long\
    \ sum = 0;\n        for(long e : even) {\n            sum += e;\n        }\n \
    \       return sum;", "        long sum = 0;\n        for (int i = 0; i < lst.size();\
    \ i+=2) {\n            sum += lst.get(i);\n        }\n        return sum;", '        //
    TODO Auto-generated method stub', "        if (lst.size() < 2) return 0;\n   \
    \     long sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n        \
    \    sum += lst.get(i);\n        }\n        long evenSum = sum;\n        for (int\
    \ i = 2; i < lst.size(); i++) {\n            sum += lst.get(i);\n        }\n \
    \       return evenSum;", "        long sum = 0;\n        int size = lst.size();\n\
    \        for(int i = 0; i < size; i++) {\n            if(i % 2 == 0) {\n     \
    \           sum += lst.get(i);\n            }\n        }\n        return sum;",
  "        List<Long> evenElements = lst.stream().filter(i -> i % 2 == 0).collect(Collectors.toList());\n\
    \        List<Long> oddElements = lst.stream().filter(i -> i % 2 != 0).collect(Collectors.toList());\n\
    \        List<Long> result = new ArrayList<>();\n        result.addAll(evenElements);\n\
    \        result.addAll(oddElements);\n        return result.stream().sum();",
  "        int len = lst.size();\n        long evenSum = 0;\n        for (int i =\
    \ 1; i <= len / 2; i++) {\n            if (i % 2 == 0) {\n                evenSum\
    \ += lst.get(i);\n            }\n        }\n        return evenSum;", "      \
    \  long total = 0;\n        List<Long> odds = lst.stream().filter(x -> x % 2 !=\
    \ 0).collect(Collectors.toList());\n        odds.addAll(lst.stream().filter(x\
    \ -> x % 2 == 0).collect(Collectors.toList()));\n        odds.forEach(x -> total\
    \ += x);\n        return total;", "        long sum = 0l;\n        lst.removeIf((e)\
    \ -> e % 2 == 0); // Remove even elements\n        for (int i=0; i<lst.size();\
    \ i++) {\n            if (i%2==1) {\n                sum += lst.get(i);\n    \
    \        }\n        }\n        return sum;", "        ArrayList<Long> evens =\
    \ new ArrayList<Long>();\n        for (int i = 0; i < lst.size(); i++) {\n   \
    \         if (i % 2 == 0) {\n                evens.add(lst.get(i));\n        \
    \    }\n        }\n        long ans = evens.stream().reduce(0, Long::sum);\n \
    \       return ans;", "        long sum = 0;\n        // for (int i = 0; i < lst.size();\
    \ i++) {\n        //     if (lst.get(i) % 2 == 1) {\n        //         sum +=\
    \ lst.get(i);\n        //     }\n        // }\n        for (int i = 1; i < lst.size();\
    \ i++) {\n            if (lst.get(i) % 2 == 1) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        // your code here\n\
    \        ArrayList<Integer> a = new ArrayList<Integer>();\n        for(Integer\
    \ i : lst){\n            if(i%2 == 0){\n                a.add(i);\n          \
    \  }\n        }\n        if(a.size()%2==0){\n            return a.stream().reduce(Math::addExact).orElse(0l);\n\
    \        }\n        else{\n            return a.stream().reduce((c1,c2) -> c1+c2).orElse(0l);\n\
    \        }", "        long sum = 0;\n        for(int i = 0; i < lst.size(); i++)\
    \ {\n            if((int)lst.get(i) % 2 == 0) {\n                sum += lst.get(i);\n\
    \            }\n        }\n        return sum;", "        if (lst.isEmpty()) return\
    \ 0l;\n        long evenSum = 0l;\n        for(Long i : lst) {\n            if(i%2==0)\
    \ evenSum+=i;\n        }\n        return evenSum;", "        // Complete this\
    \ method\n        long sum = 0;\n        for(int i = 0; i < lst.size(); i++) {\n\
    \            if(i % 2 == 0) {\n                sum += lst.get(i);\n          \
    \  }\n        }\n        return sum;", "        if (lst.size() == 0) return 0;\n\
    \        ArrayList<Long> copy = new ArrayList<>((lst));\n        for (long i =\
    \ copy.size(); i-- > 0;) {\n            if (copy.get(i) % 2 != 0) copy.remove(i);\n\
    \        }\n        return copy.get(0);", "        boolean even = true;\n    \
    \    long sum = 0;\n        for (int i = 0; i < lst.size(); i += 1) {\n      \
    \      long value = lst.get(i);\n            if (even && value % 2 == 0) {\n \
    \               sum += value;\n            }\n            even = !even;\n    \
    \    }\n        return sum;", "        long result = 0;\n        for(int i : lst)\
    \ {\n            if(i%2 != 0) {\n                result += i;\n            }\n\
    \        }\n        return result;", "        long evenSum = 0;\n        int count\
    \ = 0;\n        for(int i=0; i < lst.size(); i++) {\n            if(lst.get(i)\
    \ % 2 == 0) {\n                evenSum += lst.get(i);\n                count++;\n\
    \            }\n        }\n        return evenSum / count;", "        long sum\
    \ = 0;\n        for (long i : lst) {\n            if (i % 2 == 0) {\n        \
    \        sum += i;\n            }\n        }\n        return sum;", "        long\
    \ result = 0;\n        for(long l : lst) {\n            if(l%2==0)\n         \
    \       result+=l;\n        }\n        return result;", "        long sum = 0;\n\
    \        for(int i=1; i<lst.size(); i++)\n            sum += lst.get(i) %2 ==\
    \ 0? lst.get(i): 0l ;\n        return sum;", "        long result = 0;\n     \
    \   for(long i : lst) {\n            result += (i % 2 == 0) ? i : result - i;\n\
    \        }\n        return result;", "        long sum = 0l;\n        for (long\
    \ l : lst) {\n            if (l % 2 == 0) {\n                sum += l;\n     \
    \       }\n        }\n        return sum;", "        if (lst.isEmpty())\n    \
    \        return 0l;\n        Long[] even = new Long[(int)lst.size()];\n      \
    \  even[0] = lst.get(0l);\n        even[1] = lst.get(1l);\n        even[2] = lst.get(2l);\n\
    \        even[3] = lst.get(3l);\n        int count = 0;\n        for (int i =\
    \ 0; i < even.length; i++) {\n            if (even[i] % 2 == 0l)\n           \
    \     count++;\n        }\n        long[] res = new long[count];\n        int\
    \ j = 0;\n        for (int i = 0; i < even.length; i++) {\n            if (even[i]\
    \ % 2 == 0l) {\n                res[j++] = even[i];\n            }\n        }\n\
    \        return Arrays.stream(res).sum();", "        long sum = 0;\n        for\
    \ (Long x : lst) {\n            if ((x % 2) == 0) {\n                sum += x;\n\
    \            }\n        }\n        return sum;", "        // write your code here\n\
    \        return 0;", "        long sum = 0;\n        if (lst.isEmpty())\n    \
    \        return 0;\n        long current = lst.get(0);\n        for (int i = 1;\
    \ i < lst.size(); i++) {\n            long a = lst.get(i);\n            sum +=\
    \ current;\n            current = a;\n        }\n        return sum;", "     \
    \   // TODO Auto-generated method stub\n        long sum=0;\n        for(long\
    \ i=0;i<lst.size();i++){\n            if(i&1==1){\n                sum+=lst.get(i);\n\
    \            }\n        }\n        return sum;", "        long res = 0;\n    \
    \    for (long n : lst)\n            if (n % 2 == 0)\n                res += n;\n\
    \        return res;", "        long sum = 0;\n        for (Long i : lst) {\n\
    \            if ((i & 1) == 0) {\n                sum += i;\n            }\n \
    \       }\n        return sum;", "        if (lst.isEmpty())\n            return\
    \ null;\n        long sum = 0;\n        final int evenIndex = lst.get(0)%2 ==\
    \ 0; // return true if even, false if odd\n        for (int i : lst) {\n     \
    \       if (evenIndex && i%2 == 0) {\n                sum += i;\n            }\n\
    \            else if (!evenIndex && i%2 == 1) {\n                sum += i;\n \
    \           }\n        }\n        return sum;", "        ArrayList<Long> even\
    \ = new ArrayList<>();\n        for (int i = 0; i < lst.size(); i += 2) {\n  \
    \          even.add(lst.get(i));\n        }\n        Long result = Long.parseLong(String.valueOf(even));\n\
    \        return result;", '        return IntStream.range(0, lst.size()).filter(i
    -> i % 2 == 0).collect(Collectors.sumLong(i -> lst.get(i)));', "        long sum\
    \ = 0;\n        for (int i = lst.size() - 1; i >= 0; i--) if (lst.get (i) %2 ==\
    \ 0) sum += lst.get (i);\n        return sum;", "        long sum = 0;\n     \
    \   for (long x : lst) {\n            if (x % 2 != 0) {\n                sum +=\
    \ x;\n            }\n        }\n        return sum;", "        long sum = 0;\n\
    \        for (int i = 0; i < lst.size(); i++) {\n            if (i % 2 == 1) {\n\
    \                sum += lst.get(i);\n            }\n        }\n        return\
    \ sum;", "        long even = 0;\n        long odd = 0;\n        for (int i =\
    \ 0; i < lst.size(); i++) {\n            if (i % 2 == 0) {\n                even\
    \ += lst.get(i);\n            } else {\n                odd += lst.get(i);\n \
    \           }\n        }\n        return even;", "        long sum = 0l;\n   \
    \     if (lst.size() > 0) {\n            if (lst.get(0) % 2 == 1) {\n        \
    \        sum += lst.get(0);\n            }\n            for (int i = 1; i < lst.size();\
    \ i++) {\n                if (lst.get(i) % 2 != 1) {\n                    sum\
    \ += lst.get(i);\n                }\n            }\n        }\n        return\
    \ sum;"]
stop_tokens:
- "\n    }\n"
