name: HumanEval_44_change_base
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Change numerical base of input number x to base.\n    //\
  \ return string representation after the conversion.\n    // base numbers are less\
  \ than 10.\n    // >>> changeBase((8l), (3l))\n    // (\"22\")\n    // >>> changeBase((8l),\
  \ (2l))\n    // (\"1000\")\n    // >>> changeBase((7l), (2l))\n    // (\"111\")\n\
  \    public static String changeBase(long x, long base) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(changeBase((8l),\
  \ (3l)).equals((\"22\")));\n    assert(changeBase((9l), (3l)).equals((\"100\")));\n\
  \    assert(changeBase((234l), (2l)).equals((\"11101010\")));\n    assert(changeBase((16l),\
  \ (2l)).equals((\"10000\")));\n    assert(changeBase((8l), (2l)).equals((\"1000\"\
  )));\n    assert(changeBase((7l), (2l)).equals((\"111\")));\n    assert(changeBase((2l),\
  \ (3l)).equals((\"2\")));\n    assert(changeBase((3l), (4l)).equals((\"3\")));\n\
  \    assert(changeBase((4l), (5l)).equals((\"4\")));\n    assert(changeBase((5l),\
  \ (6l)).equals((\"5\")));\n    assert(changeBase((6l), (7l)).equals((\"6\")));\n\
  \    assert(changeBase((7l), (8l)).equals((\"7\")));\n    }\n\n}\n"
completions: ["        int remainder = x%base;\n        long remainderLong = remainder\
    \ + (base * Math.floor(x / base));\n        long quotient = x / base;\n      \
    \  StringBuilder result = new StringBuilder();\n        while (remainder > 0)\
    \ {\n            result.append(remainderLong % base);\n            remainderLong\
    \ /= base;\n        }\n        result.append(quotient);\n        return result.toString();",
  "        // convert input number to string\n        Long tempX = x;\n        String\
    \ tempString = tempX.toString();\n        int tempLength = (int) Math.ceil(tempString.length()/Math.log10(base));\n\
    \        if (tempLength < 0)\n            tempLength = 0;\n        if (tempString.length()%(Math.log10(base))\
    \ == 0)\n            tempLength++;\n        tempString = new String(tempString.substring((tempString.length()-tempLength),\
    \ tempString.length()));\n        StringBuffer output = new StringBuffer();\n\
    \        for (int tempIndex = 0; tempIndex < tempLength; tempIndex++) {\n    \
    \        output.append(tempString.charAt(tempIndex*Math.pow(base, tempIndex)));\n\
    \        }\n        return output.toString();", "        long num = x;\n     \
    \   while (num > 0) {\n            long rem = num % base;\n            num = num\
    \ / base;\n            x = num;\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        while (x > 0) {\n            long rem = x % 10;\n            x = x /\
    \ 10;\n            sb = (char) ('0' + rem) + sb;\n        }\n        return sb.toString();",
  "        String str = Long.toString(x, base);\n        StringBuilder sb = new StringBuilder();\n\
    \        long lastDigit = 0;\n        long sum = 0;\n        long digit;\n   \
    \     int count = 0;\n        for (int i = 0; i < str.length(); i++) {\n     \
    \       digit = Long.parseLong(str.substring(i, i + 1), base);\n            sum\
    \ += digit;\n            if (digit != lastDigit) {\n                lastDigit\
    \ = digit;\n                sb.append((char) (sum % base));\n                sum\
    \ = 0;\n                count++;\n            }\n        }\n        if (lastDigit\
    \ > 0) {\n            sb.append((char) (sum % base));\n        }\n        return\
    \ sb.toString();", '        return Long.toString(x, base);', "        long n =\
    \ 0;\n        while (n <= x) {\n            n = n * base;\n        }\n       \
    \ if (n < 10)\n            return (\"\" + n);\n        else\n            return\
    \ changeBase(n, base) + \"\";", "        if (base < 2) {\n            return String.valueOf(x);\n\
    \        }\n        StringBuilder stringBuilder = new StringBuilder();\n     \
    \   StringBuilder xAsString = new StringBuilder(Long.toString(x));\n        StringBuilder\
    \ baseAsString = new StringBuilder(Long.toString(base));\n        while (xAsString.length()\
    \ > baseAsString.length()) {\n            xAsString.deleteCharAt(xAsString.length()\
    \ - 1);\n            xAsString.insert(0, \"0\");\n        }\n        while (xAsString.length()\
    \ < baseAsString.length()) {\n            xAsString.insert(0, \"0\");\n      \
    \  }\n        String last = xAsString.toString();\n        xAsString.deleteCharAt(xAsString.length()\
    \ - 1);\n        String lastXAsString = xAsString.toString();\n        xAsString\
    \ = new StringBuilder(xAsString.substring(0, xAsString.length() - 1));\n     \
    \   StringBuilder yAsString = new StringBuilder(Long.toString(x));\n        StringBuilder\
    \ baseAsString1 = new StringBuilder(Long.toString(base));\n        while (yAsString.length()\
    \ > baseAsString1.length()) {\n            yAsString.deleteCharAt(yAsString.length()\
    \ - 1);\n            yAsString.insert(0, \"0\");\n        }\n        while (yAsString.length()\
    \ < baseAsString1.length()) {\n            yAsString.insert(0, \"0\");\n     \
    \   }\n        String lastY = yAsString.toString();\n        yAsString.deleteCharAt(yAsString.length()\
    \ - 1);\n        String lastYAsString = yAsString.toString();\n        yAsString\
    \ = new StringBuilder(yAsString.substring(0, yAsString.length() - 1));\n     \
    \   while (xAsString.length() > baseAsString.length()) {\n            xAsString.deleteCharAt(xAsString.length()\
    \ - 1);\n            xAsString.insert(0, \"0\");\n        }\n        while (xAsString.length()\
    \ < baseAsString.length()) {\n            xAsString.insert(0, \"0\");\n      \
    \  }\n        String lastXAsString1 = xAsString.toString();\n        xAsString.deleteCharAt(xAsString.length()\
    \ - 1);\n        String lastXAsString2 = xAsString.toString();\n        xAsString\
    \ = new StringBuilder(xAsString.substring(0, xAsString.length() - 1));\n     \
    \   while (yAsString.length() > baseAsString1.length()) {\n            yAsString.deleteCharAt(yAsString.length()\
    \ - 1);\n            yAsString.insert(0, \"0\");\n        }\n        while (yAsString.length()\
    \ < baseAsString1.length()) {\n            yAsString.insert(0, \"0\");\n     \
    \   }\n        String lastYAsString1 = yAsString.toString();\n        yAsString.deleteCharAt(yAsString.length()\
    \ - 1);\n        String lastYAsString2 = yAsString.toString();\n        yAsString\
    \ = new StringBuilder(yAsString.substring(0, yAsString.length() - 1));\n", " \
    \       BigInteger bi = new BigInteger(String.valueOf(x));\n        BigInteger\
    \ newBig = new BigInteger(String.valueOf(base));\n        BigInteger oldBig =\
    \ new BigInteger(String.valueOf(bi));\n        BigInteger diff = oldBig.subtract(newBig);\n\
    \        return diff.mod(new BigInteger(\"\" + newBig)).add(newBig).toString()\
    \ + \"1\";", "        String str = Long.toString(x);\n        str = str.replaceAll(\"\
    [+-]\", \"\");\n        str = str.replaceAll(\"0*$\", \"\");\n        str = str.replaceAll(\"\
    L+\", \"\");\n        str = str.replaceAll(\"L+$\", \"\");\n        return str.replaceAll(\"\
    L\", Long.toString(base));", "        String[] array = new String[3];\n      \
    \  array[0] = Long.toString(x);\n        array[1] = Long.toString(base);\n   \
    \     array[2] = Long.toString(x * base);\n        String ans = array[2];\n  \
    \      return ans;", "        if(x <= base)\n            return Long.toString(base);\n\
    \        return Long.toString(x, base);", "        long temp = x;\n        int\
    \ i = 1;\n        while (temp != 0) {\n            temp = temp / base;\n     \
    \       i++;\n        }\n        char[] chars = new char[i];\n        temp = Math.abs(x);\n\
    \        i--;\n        while (temp != 0) {\n            temp = temp / base;\n\
    \            chars[--i] = temp % 10 + '0';\n        }\n        return new String(chars);",
  "        if (x % base == 0) {\n            return \"\" + x;\n        }\n       \
    \ StringBuilder sb = new StringBuilder();\n        while (x / base > 0) {\n  \
    \          sb.insert(0, (char) ((x / base) + 48));\n            x %= base;\n \
    \       }\n        sb.insert(0, (char) (x + ((x / base) + 48)));\n        return\
    \ sb.toString();", "        long temp = x;\n        int remainder = temp % base;\n\
    \        temp -= remainder;\n        String result = Long.toString(temp);\n  \
    \      if (result < 10) {\n            result = \"0\" + result;\n        }\n \
    \       char last = result.charAt(result.length() - 1);\n        if (last == '1')\
    \ {\n            result = result.substring(0, result.length() - 1);\n        }\n\
    \        result = result + \"\";\n        if (result.length() > base) {\n    \
    \        String temp2 = result.substring(0, result.length() - 1);\n          \
    \  result = temp2 + result.substring(result.length() - base);\n        }\n   \
    \     return result;", "        // Convert x to string in base.\n        // If\
    \ base is 2, we convert to string \"00\" rather than \"0\".\n        // >>> Integer.toString(8l,\
    \ 2)\n        // (\"00\")\n        StringBuilder sb = new StringBuilder();\n \
    \       while (x > 0) {\n            int remainder = x % base;\n            if\
    \ (remainder > 0)\n                sb.insert(0, (char)(remainder + '0'));\n  \
    \          x /= base;\n        }\n        return sb.toString();", "        if\
    \ (base < 10) {\n            throw new IllegalArgumentException(\"base is less\
    \ than 10\");\n        }\n\n        BigInteger b = new BigInteger(String.valueOf(x));\n\
    \        BigInteger bc = new BigInteger(String.valueOf(base));\n        BigInteger\
    \ result = b.divide(bc, 10, RoundingMode.DOWN);\n\n        // If the above computation\
    \ produces zero then we return the result as a string.\n        // This happens\
    \ for example when trying to change bases such as\n        // 435 to 3\n     \
    \   if (result.compareTo(BigInteger.ZERO) < 0) {\n            return result.toString();\n\
    \        }\n\n        // Otherwise, we return the result as an integer.\n    \
    \    return result.intValue();", "        BigInteger baseAsBigInteger = BigInteger.valueOf(base);\n\
    \        BigInteger numberAsBigInteger = BigInteger.valueOf(x);\n        if (x.equals(0))\n\
    \            return \"0\";\n        else if (numberAsBigInteger.compareTo(baseAsBigInteger)\
    \ < 0) {\n            BigInteger result = numberAsBigInteger.divide(baseAsBigInteger);\n\
    \            return result.toString() + \"0\";\n        }\n        else {\n  \
    \          BigInteger result = numberAsBigInteger.divide(baseAsBigInteger)\n \
    \                   .multiply(BigInteger.valueOf(baseAsBigInteger.toString().charAt(baseAsBigInteger.toString().length()\
    \ - 1)));\n            return result.toString() + numberAsBigInteger.toString()\
    \ + baseAsBigInteger.toString();\n        }", "        String s = Long.toString(x,\
    \ base);\n        int last = s.length() - 1;\n        s = s.substring(0, last);\n\
    \        return s;", "        StringBuilder sb = new StringBuilder(String.valueOf(x));\n\
    \        if (sb.length() > 1)\n            sb.setCharAt(sb.length() - 1, (char)\
    \ (Character.digit(sb.charAt(sb.length() - 1), base) + 1));\n        return sb.toString();",
  "        long result = 0;\n        int digits = 0;\n        while (x > 0) {\n  \
    \          long t = x;\n            x /= base;\n            if (t == 1) {\n  \
    \              digits++;\n            } else {\n                digits = 2;\n\
    \                result = (result * base) + t;\n            }\n        }\n   \
    \     if (digits == 0)\n            return \"0\";\n        return Long.toString(result);",
  "        String str = Long.toString(x);\n        str = str.replace(\"L\", \"i\"\
    );\n        long n = Long.parseLong(str);\n        n *= base;\n        n = n -\
    \ ((long)Math.pow(base, str.indexOf('i')));\n        return Long.toString(n);",
  "        BigInteger d = BigInteger.valueOf(x);\n        BigInteger result = d.divide(BigInteger.valueOf(base));\n\
    \        return result.mod(BigInteger.valueOf(base)).add(BigInteger.ONE).toString();",
  "        int divisor = base;\n        while (x > divisor) {\n            x /= divisor;\n\
    \        }\n        StringBuilder builder = new StringBuilder();\n        while\
    \ (x > 0) {\n            builder.insert(0, (char) (x % base));\n            x\
    \ /= base;\n        }\n        return builder.toString();", "        long reminder;\n\
    \        long temp = x;\n        int tens = (int) (temp / 10);\n        long remainder\
    \ = temp % 10;\n        int num = (int) (x / base);\n        long remNum = x %\
    \ base;\n\n        if (num > 0) {\n            reminder = remNum;\n        }\n\
    \        long reminderVal = 0;\n\n        while (reminder >= base) {\n       \
    \     reminderVal += (reminder * base);\n            reminder = reminder / base;\n\
    \        }\n\n        return String.format(\"%1$t10d\", reminderVal + (remNum\
    \ * (base * tens)));", "        long n = x;\n        StringBuffer sb = new StringBuffer();\n\
    \        while (n>0) {\n            int r = n/base;\n            if (r != 0) sb.append((char)\
    \ ('0'+r));\n            n = n % base;\n        }\n        return sb.toString();",
  "        if (x > 1) {\n            long quot = x;\n            String s = \"\";\n\
    \            while (quot > 0) {\n                long a = quot % base;\n     \
    \           quot = quot / base;\n                s = \"\" + a + s;\n         \
    \   }\n            return s;\n        } else {\n            String s = \"\";\n\
    \            while (x > 0) {\n                s = \"\" + x + s;\n            \
    \    x = x / base;\n            }\n            return s;\n        }", "      \
    \  String result = \"\";\n        for (int i = Integer.parseInt(String.valueOf(x));\
    \ i >= 0; i = i / base)\n            result += String.valueOf((long) (i * base));\n\
    \        return result;", "        String str = \"\";\n        while (x > 0) {\n\
    \            str = String.valueOf(x % base) + str;\n            x /= base;\n \
    \       }\n        return str;", "        // Check base is valid and > 0\n   \
    \     if (base > 10 || base < 2 || base == 0) {\n            return \"Invalid\
    \ base value.\";\n        }\n        // Convert input to string\n        String\
    \ input = Long.toString(x);\n        // Change string to array of long\n     \
    \   long[] converted = new long[input.length()];\n        // Scan each char into\
    \ long\n        for(int i=0; i < input.length(); i++) {\n            converted[i]\
    \ = Character.digit(input.charAt(i), 10);\n        }\n        // Change each long\
    \ into base 10\n        Arrays.sort(converted);\n        // Convert result to\
    \ string\n        String result = \"\";\n        for(int i=0; i < converted.length;\
    \ i++) {\n            result += Integer.toString(converted[i] % base);\n     \
    \   }\n        // Return result\n        return result;", "        String rep\
    \ = Long.toString(x);\n        // change base of x\n        long temp = Long.parseLong(rep);\n\
    \        temp = base * temp;\n        rep = Long.toString(temp);\n        // return\
    \ rep without \"l\"\n        return rep;", "        long result = 0;\n       \
    \ while (x != 0) {\n            long remainder = (long) (x % base);\n        \
    \    long temp = x;\n            x = x / base;\n            result += remainder;\n\
    \        }\n        return Long.toString(result);", "        String str = Long.toString(x);\n\
    \        if (base < 10) {\n            return str.replace(\"l\", Long.toString(base));\n\
    \        }\n        return str; // Base is greater than 10.", "        long xPow;\n\
    \        long xSqr, temp;\n        long basePow;\n        long baseSqr, temp2;\n\
    \        long result = 0;\n        xPow = Long.valueOf(x);\n        basePow =\
    \ Long.valueOf(base);\n        xSqr = (long) (xPow * xPow);\n        baseSqr =\
    \ (long) (basePow * basePow);\n        while (xSqr <= baseSqr) {\n           \
    \ xSqr = xSqr * xPow;\n        }\n        xPow = xPow / xSqr;\n        while (xPow\
    \ > 0) {\n            temp = xPow;\n            temp = temp * basePow;\n     \
    \       result = result + temp;\n            xPow = xPow / basePow;\n        }\n\
    \        while (xPow * basePow >= 1) {\n            temp2 = xPow * basePow;\n\
    \            temp2 = temp2 / basePow;\n            result = result + temp2;\n\
    \            xPow = (long)((double)xPow * 0.5);\n            basePow = (long)((double)basePow\
    \ * 0.5);\n        }\n        temp = result;\n        temp = temp / basePow;\n\
    \        result = Long.toString(temp);\n        return result;", "        // Check\
    \ base is between 1 and 10.\n        if ((base < 1) || (base > 10)) {\n      \
    \      throw new IllegalArgumentException(\n                \"Invalid input: Base\
    \ must be between 1 and 10\");\n        }\n        // Convert the number x to\
    \ string.\n        String x_str = Long.toString(x);\n        // The converted\
    \ string is of length (base-10)\n        // and starts from 0.\n        int num_len\
    \ = x_str.length();\n        StringBuilder converted_x_str = new StringBuilder(num_len);\n\
    \        // String of length (base-10) starts from 0\n        int num = 0, base_index\
    \ = 0;\n        // Iterate over x_str and check base_index\n        // and add\
    \ digits of the base to num.\n        // If base_index == num_len then num is\
    \ appended to\n        // converted_x_str else add 1 to num.\n        while (x_str.length()\
    \ > 0) {\n            // If base_index == num_len then num is appended to\n  \
    \          // converted_x_str else add 1 to num.\n            if (base_index ==\
    \ num_len) {\n                converted_x_str.append(num);\n                break;\n\
    \            } else {\n                // Add 1 to num.\n                num++;\n\
    \                base_index++;\n            }\n            // Remove last digit\
    \ from x_str\n            // and move to the next digit.\n            x_str =\
    \ x_str.substring(0, x_str.length() - 1);\n        }\n        // Convert the converted\
    \ string to int and return string as output.\n        return Integer.toString(Integer.parseInt(converted_x_str.toString()));",
  "        if (base == 1) {\n            if (x<10)\n                return String.valueOf(x);\n\
    \            else\n                return \"0\" + x;\n        } else if (base\
    \ == 10) {\n            if (x<10)\n                return \"0\" + x;\n       \
    \     else\n                return \"10\" + x;\n        } else {\n           \
    \ int temp = x;\n            String result = \"\";\n            while (temp>0)\
    \ {\n                temp = temp / base;\n                result += String.valueOf(temp);\n\
    \            }\n            return result;\n        }", '        return Long.toString(x,
    base);', "        String result = \"\";\n        // Convert base to binary string\
    \ using String.format() method.\n        // To convert a number to base 10 use\
    \ String.format() method too.\n        String binaryString = String.format(\"\
    %1$d\", x).replace(\"0\", \"\");\n\n        // Iterate through each digits of\
    \ binary string.\n        // Convert each number to base using Long.parseLong()\
    \ and String.format()\n        // method. Then concatenate digits of binary string\
    \ and convert it to base\n        // using Integer.parseInt() method.\n      \
    \  for (String digit : binaryString.split(\"\")) {\n            result += String.valueOf(Long.parseLong(digit,\
    \ base));\n        }\n        return Integer.parseInt(result, base).toString();",
  "        BigInteger bigx = new BigInteger(String.valueOf(x), 10);\n        BigInteger\
    \ bigbase = new BigInteger(String.valueOf(base), 10);\n        BigInteger result\
    \ = bigx.divide(bigbase);\n        return String.valueOf(result.intValue());",
  "        BigInteger newX = new BigInteger(String.valueOf(base), x).mod(base).add(BigInteger.ONE);\n\
    \        return String.valueOf(newX);", "        if (base < 10) {\n          \
    \  throw new IllegalArgumentException(\"Base must be less than 10\");\n      \
    \  }\n        String s = String.format(\"%li\", x);\n        if (s.length() ==\
    \ 1) {\n            s = \"0\" + s;\n        }\n        long product = 1;\n   \
    \     for (int i = 0; i < s.length(); i++) {\n            product *= (base ==\
    \ 10 ? 10 : base);\n            product /= s.charAt(i);\n        }\n        return\
    \ String.valueOf(product);", "        long p = 1;\n        long q = 1;\n     \
    \   long r = x;\n\n        do {\n            p = p * base;\n            q = q\
    \ * base;\n            r = r / base;\n        } while (r != 0);\n\n        long\
    \ m = p;\n        long n = 0;\n\n        do {\n            if (m > r)\n      \
    \          n = n % base;\n            m = m / base;\n        } while (m != 0);\n\
    \n        return String.valueOf(n);", "        String s = Long.toString(x);\n\
    \        if (Integer.parseInt(s) > base) {\n            int digit = Integer.parseInt(s)\
    \ - base;\n            while (digit > 0) {\n                s = String.valueOf(digit)\
    \ + s;\n                digit--;\n            }\n        }\n        return s;",
  '        return Long.toString(x / base);', "        long n = x;\n        while (n\
    \ != 0) {\n            n /= base;\n        }\n        return Integer.toString((int)n);",
  "        // Convert base to string.\n        String baseStr = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n        String baseStrDigit = baseStr.substring(0, base);\n        String digits\
    \ = Integer.toString(x, base);\n        if (baseStr.length() > base) {\n     \
    \       digits = digits.substring(digits.length() - base);\n        }\n      \
    \  if (baseStrDigit.length() < digits.length()) {\n            digits = baseStrDigit\
    \ + digits;\n        }\n        return digits;", "        String ret = Integer.toString(x,\
    \ base);\n        if (ret.length() > base) return changeBase(ret, base);\n   \
    \     return ret;", "        if (base > 9) {\n            throw new IllegalArgumentException(\"\
    base must be less than 10.\");\n        }\n        if (x % base == 0) {\n    \
    \        return String.valueOf(x);\n        }\n        int res = x % base;\n \
    \       String result = \"\";\n        while (x > 0) {\n            result = String.valueOf(res)\
    \ + result;\n            x /= base;\n        }\n        return result;", "   \
    \     // convert int to long using long literals\n        long result = x; //\
    \ same value as x\n        \n        // use / to divide result\n        long div\
    \ = result / base;\n        \n        // calculate remainder after division\n\
    \        long mod = result % base;\n        \n        // Convert remainder back\
    \ to int\n        int rem = (int)mod;\n        \n        // Add decimal point\n\
    \        String point = \"\";\n        if (rem == 0) {\n            point = \"\
    .0\";\n        } else if (rem < 0) {\n            point = \"-\";\n        }\n\
    \        \n        // Convert remainder to string\n        String remStr = String.valueOf(rem);\n\
    \        \n        // Create new string\n        String newString = remStr + point;\n\
    \        \n        // Return converted string\n        return newString;", " \
    \       long xn = x;\n        long xd = 1;\n        while (base > xd) {\n    \
    \        xn = (xn*x) + (xd/base);\n            xd *= base;\n        }\n      \
    \  long xs = xn;\n        xn = xd+xn;\n        return xs.toString();", "     \
    \   if (x > base)\n            throw new IllegalArgumentException(\"Cannot change\
    \ base of number bigger than base\");\n        long result = 0;\n        while\
    \ (x != 0) {\n            result = result * base + (x % base);\n            x\
    \ /= base;\n        }\n        return String.valueOf(result);", "        long\
    \ temp = x;\n        while(temp > 0) {\n            int d = (int) ((temp % base));\n\
    \            temp /= base;\n            String s = String.valueOf(d + (int) Math.pow(2,\
    \ (s.length() - 1)));\n            temp = temp - (int) Math.pow(2, (s.length()\
    \ - 1));\n            if (s == \"0\") return \"0\";\n            else if (s ==\
    \ \"\") return \"0\";\n            else return s;\n        }\n        return \"\
    0\";", "        String result = Long.toString(x, base);\n        return result;",
  "        long r = x;\n        long t = x;\n        while (t != 0) {\n          \
    \  r = r / base;\n            t = t % base;\n        }\n        return Long.toString(r);",
  "        long[] convertedBase = longValueToBase(x, base);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (long convertedValue : convertedBase)\
    \ {\n            sb.append(convertedValue);\n        }\n        return sb.toString();",
  "        BigInteger b = new BigInteger(String.valueOf(x));\n        BigInteger b2\
    \ = b.divide(BigInteger.valueOf(base)).mod(BigInteger.valueOf(base));\n      \
    \  return b2.toString(base);", '        return Long.toString(x, base);', "   \
    \     // if base is 0 then result will be same as the input.\n        if (base\
    \ == 0) {\n            // if input is 0 then result should be 0 \n           \
    \ // because 0*0=0\n            return String.valueOf(x);\n        } else {\n\
    \            // if base is 1 then result will be 1*x=x because 1=1\n         \
    \   if (base == 1) {\n                return String.valueOf(x);\n            }\n\
    \            // if base is other than 1 then result will be base*x=base*x.\n \
    \           // e.g base=10 and x=8 then result=base*8=8*10=800\n            String\
    \ result = \"\";\n            // keep on adding digits of x until result is less\
    \ than base.\n            while (x > 0) {\n                result = String.valueOf(x\
    \ / base) + result;\n                x = x % base;\n            }\n          \
    \  // if result is less than base then last digit will be 0.\n            if (result.length()\
    \ < base) {\n                result = String.valueOf(x - result * base);\n   \
    \         }\n            return result;\n        }", "        if (x >= 10 && x\
    \ < base) {\n            return Integer.toString(x - base) + \"\";\n        }\
    \ else if (x >= base && x < 10) {\n            return Integer.toString(x) + \"\
    \";\n        }\n        return \"Error \" + x + \" is not in base \" + base;",
  "        if (x < base)\n            throw new IllegalArgumentException(\"Base numbers\
    \ are less than 10.\");\n        String str = Long.toString(x);\n        char[]\
    \ cArr = str.toCharArray();\n        int n = str.length();\n        int i;\n \
    \       for (i = 0; i < n; i++) {\n            if (cArr[i] > '9')\n          \
    \      cArr[i] = cArr[i] - '0';\n        }\n        for (i = 0; i < n; i++)\n\
    \            cArr[i] += '0';\n        cArr = cArr.clone();\n        if (str.length()\
    \ % base != 0)\n            throw new IllegalArgumentException(\"Base numbers\
    \ are less than 10.\");\n        StringBuilder sb = new StringBuilder(new StringBuilder().append(cArr.clone()).toString());\n\
    \        long rem = x;\n        long j = 0;\n        while (j < sb.length()) {\n\
    \            rem /= base;\n            if (rem > 1) {\n                sb.setCharAt(j,\
    \ cArr[j]);\n                j++;\n            } else {\n                rem =\
    \ rem % base;\n            }\n        }\n        return sb.toString();", "   \
    \     BigInteger bx = new BigInteger(String.valueOf(x));\n        BigInteger b\
    \ = new BigInteger(String.valueOf(base));\n        String r = bx.divide(b).toString(2);\n\
    \        return r;", "        long temp = x;\n        double quotient = Math.floor(temp\
    \ / base);\n        String s = \"\";\n        if (base < 10)\n            s +=\
    \ \"0\";\n        while (quotient != 0) {\n            s = (char) ('0' + ((quotient\
    \ % base) + 10));\n            quotient = (long) (quotient / base);\n        }\n\
    \        return s + temp;", "        String s = Long.toString(x);\n        while\
    \ (s.length() < base) {\n            s = \"0\" + s;\n        }\n        return\
    \ s.substring(s.length() - base, s.length());", '        return String.valueOf(Long.valueOf(x).mod(Long.valueOf(base)));',
  "        String result = \"\";\n        if (x < base)\n            throw new IllegalArgumentException(\"\
    x is less than base\");\n        else if (x >= base)\n            throw new IllegalArgumentException(\"\
    x is greater than base\");\n        int digits = 0;\n        while (x > 0) {\n\
    \            long r = x / base;\n            result += (char) ('0' + r % base);\n\
    \            digits += 1;\n            x -= r * base;\n        }\n        if (digits\
    \ == 0)\n            digits = 1;\n        switch (digits) {\n            case\
    \ 1:\n                result += (char) ('0' + x);\n                break;\n  \
    \          case 2:\n                result += (char) ('0' + x / base);\n     \
    \           x %= base;\n                break;\n            case 3:\n        \
    \        result += (char) ('0' + x / base);\n                x %= base;\n    \
    \            result += (char) ('0' + x);\n                break;\n           \
    \ case 4:\n                result += (char) ('0' + x / base);\n              \
    \  x %= base;\n                result += (char) ('0' + x / base);\n          \
    \      x %= base;\n                result += (char) ('0' + x);\n             \
    \   break;\n            case 5:\n                result += (char) ('0' + x / base);\n\
    \                x %= base;\n                result += (char) ('0' + x / base);\n\
    \                x %= base;\n                result += (char) ('0' + x / base);\n\
    \                x %= base;\n                result += (char) ('0' + x);\n   \
    \             break;\n            case 6:\n                result += (char) ('0'\
    \ + x / base);\n                x %= base;\n                result += (char) ('0'\
    \ + x / base);\n                x %= base;\n                result += (char) ('0'\
    \ + x / base);\n                x %= base;\n                result += (char) ('0'\
    \ + x / base);\n                x %= base;\n                result += (char) ('0'\
    \ + x);\n                break;\n            case 7:\n                result +=\
    \ (char) ('0' + x / base);\n                x %= base;\n                result\
    \ += (char) ('0' + x / base);\n                x %= base;\n                result\
    \ += (char) ('0' + x / base);\n                x %= base;\n                result\
    \ += (char) ('0' + x / base);\n                x %= base;\n                result\
    \ += (char) ('0' + x / base);\n                x %= base;\n                result\
    \ += (char) ('0' + x);\n                break;\n            case 8:\n        \
    \        result += (char) ('0' + x / base);\n                x %= base;\n    \
    \            result += (char) ('0' + x / base);\n                x %= base;\n\
    \                result += (char) ('0' + x / base);\n                x %= base;\n\
    \                result += (char) ", '        return Long.toString(x, base);',
  '        return Long.toString(x, base);', "        BigInteger result = BigInteger.valueOf(1);\n\
    \        for (long i = x; i >= 1; i--) {\n            result = result.multiply(BigInteger.valueOf(base));\n\
    \            result = result.add(BigInteger.valueOf(i));\n        }\n        return\
    \ result.longValue() + \"\";", "        String s = \"\" + x;\n        while (s.length()\
    \ > base) {\n            s = s.substring(0, base);\n        }\n        if (s.length()\
    \ < base) {\n            return s + \"0\";\n        }\n        return s;", " \
    \       long temp = x;\n        String result = \"\";\n        boolean negative\
    \ = false;\n\n        if (x < 0) {\n            negative = true;\n           \
    \ temp = -x;\n        }\n\n        do {\n            String temp = Long.toString(temp\
    \ % base);\n            result += temp;\n            temp /= base;\n        }\
    \ while (temp != 0);\n\n        if (negative)\n            result = \"-\" + result;\n\
    \n        return result;", "        String baseNum = Long.toString(x);\n     \
    \   StringBuilder sb = new StringBuilder();\n        for (int i = baseNum.length();\
    \ i >= 0; i--) {\n            char c = baseNum.charAt(i);\n            int digit\
    \ = Character.getNumericValue(c);\n            sb.append((int)((digit / base)\
    \ * base));\n            sb.append(digit);\n        }\n        return sb.toString();",
  "        \n        if(base < 10){\n            \n            String s = Long.toString(x,\
    \ base);\n            \n            if(s.length() > base){\n                \n\
    \                String s1 = Long.toString(x, base);\n                \n     \
    \           String s2 = s1.substring(0, s1.length()-s.length());\n           \
    \     \n                return s2;\n            }\n            else{\n       \
    \         return s;\n            }\n            \n        }\n        else{\n \
    \           \n            String s = Long.toString(x, base);\n            \n \
    \           if(s.length() > base){\n                \n                String s1\
    \ = Long.toString(x, base);\n                \n                String s2 = s1.substring(0,\
    \ s1.length()-s.length());\n                \n                String s3 = s2.substring(0,\
    \ s2.length()-(s.length()-(s.length()%base)));\n                \n           \
    \     return s3;\n            }\n            else{\n                return s;\n\
    \            }\n        }", "        long y = x;\n        if (y > base) {\n  \
    \          y /= base;\n            while (y > base) {\n                y /= base;\n\
    \            }\n        } else if (y < base) {\n            y = y * base;\n  \
    \          while (y < base) {\n                y *= base;\n            }\n   \
    \     }\n        return String.valueOf(Long.valueOf(String.valueOf(y)));", '        return
    Long.toString(x, base);', "        if (base > 1) {\n            return Long.toString(x\
    \ * base);\n        } else {\n            return Long.toString(x);\n        }",
  '        return x.toString().substring(1) + "" + base;', "        // Get digit strings\
    \ of input number.\n        List<String> digitStrings = new ArrayList<String>();\n\
    \        while (x != 0) {\n            digitStrings.add(Integer.toString((int)\
    \ x % base));\n            x = x / base;\n        }\n        // Convert digit\
    \ strings to integer.\n        int[] digits = new int[digitStrings.size()];\n\
    \        for (int i = 0; i < digitStrings.size(); i++) {\n            digits[i]\
    \ = Integer.parseInt(digitStrings.get(i));\n        }\n        // Build output\
    \ number.\n        StringBuilder sb = new StringBuilder();\n        for (int i\
    \ = 0; i < digits.length; i++) {\n            sb.append(digits[i]);\n        }\n\
    \        return sb.toString();", "        BigInteger n = new BigInteger(String.valueOf(x));\n\
    \        String s = \"\";\n        long xBigInt = x.longValue();\n        while\
    \ (n.compareTo(base) >= 0) {\n            long n = n.divide(base).longValue();\n\
    \            s = String.valueOf(n);\n        }\n        return s;", "        StringBuilder\
    \ sb = new StringBuilder();\n        int i = 1;\n        while (x >= base) {\n\
    \            x = x / base;\n            i++;\n        }\n        sb.append(i).append(base);\n\
    \        return sb.toString();", "        BigInteger bi = new BigInteger(Long.toString(x));\n\
    \        BigInteger bi2 = bi;\n        bi = bi.pow(base);\n        return Long.toString(bi);",
  "        BigInteger number = new BigInteger(String.valueOf(x));\n        String\
    \ baseString = new String(\"\" + base);\n        BigInteger baseNumber = new BigInteger(baseString);\n\
    \        BigInteger result = number.divide(baseNumber);\n        return String.valueOf(result);",
  "        StringBuilder str = new StringBuilder();\n        long temp;\n        int\
    \ rem;\n        while (x != 0) {\n            rem = x % base;\n            str.append(rem.toString());\n\
    \            temp = x / base;\n            x = temp;\n        }\n        // We\
    \ need stringbuilder to be able to return string.\n        str.append(x);\n  \
    \      return str.toString();", "        long num = x;\n        int iLen = Long.SIZE;\n\
    \        String str;\n        if (num < 0) {\n            str = String.valueOf(abs(-num)).repeat(iLen);\n\
    \        } else if (num == 0) {\n            str = String.valueOf(num);\n    \
    \    } else {\n            str = String.valueOf(num / base);\n            str\
    \ += String.valueOf(num % base).repeat(iLen);\n        }\n        return str;",
  "        long n = x;\n        int digits[] = new int[(int)Math.ceil(Math.log10(n)\
    \ + 1)];\n        for (int i = 0; i <= digits.length; i++)\n            digits[i]\
    \ = (int) Math.pow(10, i - digits.length);\n        long rem = 0;\n        while\
    \ (n) {\n            rem = (rem * base) % n;\n            n = (n * base) % n;\n\
    \        }\n        long out = 0;\n        for (int i = 0; i < digits.length;\
    \ i++) {\n            long rem = rem / digits[i];\n            if (rem > 0)\n\
    \                out += \"1\";\n            else\n                out += \"0\"\
    ;\n        }\n        return out;", "        String s = Long.toString(x, base);\n\
    \        char firstChar = s.charAt(0);\n        char lastChar = s.charAt(s.length()\
    \ - 1);\n        if (lastChar == '0') {\n            while (lastChar != '1' &&\
    \ firstChar != '0') {\n                s = s.substring(0, s.length() - 1) + firstChar;\n\
    \                firstChar = s.charAt(0);\n                lastChar = s.charAt(s.length()\
    \ - 1);\n            }\n        }\n        return s;", "        int base2 = (int)\
    \ (base * base);\n        if (x > (long) Math.pow(base2, (long) (x / base2)) *\
    \ base)\n            return Long.toString(x);\n        return Long.toString((long)\
    \ Math.pow(base2, (long) (x / base2)) * base);", "        // Base number is less\
    \ than 10.\n        if (base < 10) {\n            throw new IllegalArgumentException(\"\
    Base number must be less than 10: \" + base);\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        do {\n            String s = Long.toString(x,\
    \ base);\n            sb.append(s);\n            x /= base;\n        } while (x>0);\n\
    \        return sb.toString();", "        long longValue = Long.longValueExact(x);\n\
    \        BigInteger bigInt = new BigInteger(String.valueOf(longValue));\n    \
    \    BigInteger bigBase = new BigInteger(String.valueOf(base));\n        bigInt\
    \ = bigInt.divide(bigBase);\n        bigInt = new BigInteger(bigInt.toString()\
    \ + String.valueOf(base));\n        return bigInt.toString() + \"\";", "     \
    \   StringBuffer sb = new StringBuffer();\n        while (x != 0) {\n        \
    \    sb.insert(0, (x % base) + \"\"); //append to sb\n            x /= base;\n\
    \        }\n        return sb.toString();", '        return Long.toString(x, base);',
  "        final BigInteger d = BigInteger.valueOf(base);\n        BigInteger ans\
    \ = x.mod(d);\n        final BigInteger baseTen = d.pow(BigInteger.valueOf(10));\n\
    \        while (ans.compareTo(baseTen) > 0) {\n            ans = ans.divide(baseTen);\n\
    \        }\n        return ans.toString();", "        long r = x / base;\n   \
    \     long rest = x % base;\n        String result = Long.toString(r);\n     \
    \   if (rest != 0) {\n            result = String.format(\"%s%s\", result, rest);\n\
    \        }\n        return result;", "        long mod = x;\n        long quot\
    \ = x % base;\n        long res = 0;\n        while (quit != 0) {\n          \
    \  if (quit < base)\n                quot += base;\n            res = quot + res;\n\
    \            quot = x % base;\n        }\n        return \"\" + res;", "     \
    \   int digit = 0;\n        String ret = \"\";\n        if (base == 1l) {\n  \
    \          digit = x;\n            return Long.toString(digit);\n        }\n \
    \       int numDigits = (int) (Math.log10(Math.abs(x))) + 1;\n        if (numDigits\
    \ > base) {\n            throw new IllegalArgumentException(\"Base must be smaller\
    \ than the digits of the number.\");\n        }\n        while (numDigits > base)\
    \ {\n            digit += 1;\n            numDigits -= base;\n        }\n    \
    \    digit = x % base;\n        if (numDigits > 0) {\n            while (numDigits\
    \ > 0) {\n                digit *= base;\n                numDigits -= 1;\n  \
    \          }\n        }\n        ret += Long.toString(digit);\n        return\
    \ ret;", "        long a = x / base;\n        long d = x - base * a;\n       \
    \ StringBuilder str = new StringBuilder();\n        while (!d.equals(0)) {\n \
    \           str.append(d.intValue());\n            d = d - base * a;\n       \
    \     a++;\n        }\n        str.append(a);\n        return str.toString();",
  "        int rem = x % base;\n        int newBase = base - rem;\n        StringBuffer\
    \ str = new StringBuffer();\n        while (rem != 0) {\n            str.append(rem);\n\
    \            rem = x / base;\n        }\n        str.append((int) newBase);\n\
    \        return str.toString();", "        String result = Long.toString(x);\n\
    \        String afterDecimal = result.substring(result.indexOf('.'));\n      \
    \  afterDecimal = afterDecimal.replace(\".\", \"\");\n        int length = afterDecimal.length();\n\
    \        String afterPoint = afterDecimal.substring(0, length);\n        String\
    \ beforePoint = afterDecimal.substring(length + 1);\n        long n = Long.parseLong(beforePoint);\n\
    \        long d = Long.parseLong(afterPoint);\n        long m = Long.parseLong(base.toString());\n\
    \        long a = n;\n        long b = d;\n        long c = m;\n        while\
    \ (a >= b) {\n            long rem = a % b;\n            a = b;\n            b\
    \ = rem;\n        }\n        while (a < c) {\n            long rem = a % c;\n\
    \            a = c;\n            c = rem;\n        }\n        String answer =\
    \ Long.toString(a);\n        return answer;", "        // 1. Convert long to string\
    \ using String.format().\n        // 2. Use replace and regex to get the result\
    \ you want.\n        String s = String.format(\"%0\" + base + \"d\", x);\n   \
    \     s = s.replace(\".0\", \"\"); // remove \".0\"\n        s = s.replaceAll(\"\
    0*$\", \"\"); // remove trailing zeros\n        return s;", "        StringBuilder\
    \ res = new StringBuilder();\n        BigInteger bix = new BigInteger(String.valueOf(x));\n\
    \        BigInteger bibase = new BigInteger(String.valueOf(base));\n        while\
    \ (bix.compareTo(bibase) > 0) {\n            bix = bix.divide(bibase);\n     \
    \       res.append(bix.mod(bibase));\n        }\n        res.append(bix.mod(bibase));\n\
    \        return res.toString();", "        int digits = (int) Math.log10(Math.abs(x))\
    \ + 1;\n        int b = 0;\n        if (digits < base) {\n            b = digits\
    \ - base;\n            if (b > 0) x = x / Math.pow(base, b);\n            else\
    \ if (b < 0) x = x * Math.pow(base, -b);\n            digits = (int) Math.log10(Math.abs(x))\
    \ + 1;\n        }\n        StringBuilder s = new StringBuilder(\"\");\n      \
    \  while (b > 0) {\n            s.append(x);\n            x = (x / Math.pow(base,\
    \ b));\n            b--;\n        }\n        int i = 0;\n        while (i < digits)\
    \ {\n            s.append(0);\n            i++;\n        }\n        return s.toString();",
  "        long res = 1l;\n        while (x <= base) {\n            res = res * base;\n\
    \            x /= base;\n        }\n        String s = Long.toString(res);\n \
    \       return s.substring(0, s.length() - 1);", "        long result = x;\n \
    \       String result = Long.toString(result);\n        while (result.length()\
    \ > base) {\n            result = result.substring(0, result.length() - 1);\n\
    \        }\n        result = result + Integer.toString(base);\n        return\
    \ result;", "        long result = x;\n        do {\n            long remainder;\n\
    \            if (result == 0) {\n                break;\n            }\n     \
    \       long tmp = (result % base);\n            if (tmp == 0) {\n           \
    \     result /= base;\n            } else {\n                remainder = base;\n\
    \                while (tmp > 0) {\n                    remainder *= base;\n \
    \                   tmp /= base;\n                }\n                result %=\
    \ remainder;\n                result /= remainder;\n            }\n        } while\
    \ (result != 0l);\n        return Long.toString(result);", '        return String.valueOf((long)
    (x / base)) * base;', "        BigInteger bigX = new BigInteger(Long.toString(x));\n\
    \        bigX = bigX.pow(base);\n        String s = bigX.toString();\n       \
    \ return s;", "        BigInteger bigx = new BigInteger(String.valueOf(x));\n\
    \        BigInteger bigbase = new BigInteger(String.valueOf(base));\n        bigx\
    \ = bigx.pow(bigbase);\n        return new String(bigx.toPlainString());", " \
    \       if (x <= 0 || base <= 0 || x == base || x == 0)\n            throw new\
    \ IllegalArgumentException();\n        if (x > base)\n            throw new IllegalArgumentException();\n\
    \        long temp = x;\n        while (temp > 0 && temp % base == 0)\n      \
    \      temp = temp / base;\n        long result = (long) (x / base);\n       \
    \ if (temp > 0)\n            result = temp + result;\n        if (result > x)\n\
    \            result = x;\n        if (result < 0)\n            result = 0;\n \
    \       return result+\"\";", "        BigInteger number = new BigInteger(String.valueOf(x));\n\
    \        BigInteger baseToConvert = new BigInteger(String.valueOf(base));\n  \
    \      BigInteger number = baseToConvert.pow(number).mod(baseToConvert);\n   \
    \     return number.toString()", "        if (base == 10) return Long.toString(x);\n\
    \        if (base == 11) {\n            if (x % 10 == 0) return \"0\";\n     \
    \       if (x % 10 == 1) return \"1\";\n            return \"1\";\n        }\n\
    \        if (base > 11 || base < 10) {\n            return \"Invalid base\";\n\
    \        }\n        StringBuilder sb = new StringBuilder(\"\");\n        while\
    \ ((x % base) != 0) {\n            sb.insert(0, (char) ((x % base) + '0'));\n\
    \            x /= base;\n        }\n        return sb.toString();", "        int\
    \ digits = Integer.toString(base).length();\n        String result = \"\";\n \
    \       if (x < 0) {\n            throw new IllegalArgumentException(\"Negative\
    \ numbers are not supported.\");\n        }\n        long mask = (1l << (digits\
    \ - 1));\n        while ((x & mask) != 0) {\n            result += (x & mask %\
    \ base) + \"\";\n            mask /= base;\n        }\n        return result;",
  '        return Long.toString(x, base);', "        StringBuilder builder = new StringBuilder();\n\
    \        do {\n            long temp;\n            temp = x;\n            x =\
    \ (x % base);\n            builder.append(temp);\n        } while (x != 0);\n\
    \        return builder.reverse().toString();", "        long result = x;\n  \
    \      for (int i = 2; i < base; i++) {\n            result = result * i;\n  \
    \      }\n        return String.valueOf(result);", "        if (x < base) {\n\
    \            return String.valueOf(x);\n        }\n        long long_val = x;\n\
    \        String str_val = String.valueOf(x);\n        while (long_val != 0) {\n\
    \            long digit = long_val % base;\n            str_val = String.valueOf(digit)\
    \ + str_val;\n            long_val = long_val / base;\n        }\n        return\
    \ str_val;", "        long remainder = x % base;\n        long quotient = x /\
    \ base;\n        if (remainder == 0) {\n            return String.valueOf(quotient);\n\
    \        } else {\n            return String.valueOf(quotient) + changeBase(remainder,\
    \ base);\n        }", "        String s = x.toString(); \n        int len = s.length();\n\
    \        String r = \"\" + Long.parseLong(s, base);\n        long n = Long.parseLong(r,\
    \ base);\n        String result = Long.toString(n, base);\n        return result\
    \ + s.substring(len);", "        // base is power of ten\n        if (base < 10)\
    \ {\n            throw new IllegalArgumentException(\"base must be less than 10\"\
    );\n        }\n        // base is power of ten\n        if ((x == 0L) && ((base\
    \ * 9) <= 1L)) {\n            return \"\" + base;\n        }\n        // base\
    \ is power of five\n        if ((base * 5) <= base * 9) {\n            long t\
    \ = 0;\n            while (x > 0) {\n                long d = x % base;\n    \
    \            if (d == base) {\n                    t += d;\n                }\n\
    \                if (d == 5) {\n                    t += 5;\n                }\n\
    \                x /= base;\n            }\n            return t;\n        }\n\
    \        // base is power of three\n        if ((base * 3) <= base * 9) {\n  \
    \          long t = 0;\n            while (x > 0) {\n                long d =\
    \ x % base;\n                if (d == base) {\n                    t += d;\n \
    \               }\n                if (d == 3) {\n                    t += 3;\n\
    \                }\n                x /= base;\n            }\n            return\
    \ t;\n        }\n        // base is power of two\n        if ((base * 2) <= base\
    \ * 9) {\n            long t = 0;\n            while (x > 0) {\n             \
    \   long d = x % base;\n                if (d == base) {\n                   \
    \ t += d;\n                }\n                if (d == 2) {\n                \
    \    t += 2;\n                }\n                x /= base;\n            }\n \
    \           return t;\n        }\n        // base is power of one\n        if\
    \ (x <= base * 9) {\n            long t = 0;\n            while (x > 0) {\n  \
    \              long d = x % base;\n                if (d == base) {\n        \
    \            t += d;\n                }\n                if (d == 1) {\n     \
    \               t += 1;\n                }\n                x /= base;\n     \
    \       }\n            return t;\n        }\n        throw new IllegalArgumentException(\"\
    base must be less than 10\");", "        BigInteger bigx = new BigInteger(String.valueOf(x));\n\
    \        BigInteger bigbase = new BigInteger(String.valueOf(base));\n        BigInteger\
    \ result = bigx.multiply(bigbase);\n        return String.valueOf(result.mod(bigbase));",
  "        long digits = 0;\n        long x = x;\n        String s = \"\";\n     \
    \   while (x > 0) {\n            digits += x % base;\n            x = x / base;\n\
    \        }\n        s = String.valueOf(digits);\n        return s;", "       \
    \ double temp = x / base;\n        double res = (long) temp;\n        String res\
    \ = String.valueOf(res);\n        if(temp > 10000000000){\n            temp =\
    \ temp / 10000000000;\n            res = String.valueOf(temp);\n        }\n  \
    \      if(temp > 1000000){\n            temp = temp / 1000000;\n            res\
    \ = String.valueOf(temp);\n        }\n        if(temp > 100000000){\n        \
    \    temp = temp / 10000;\n            res = String.valueOf(temp);\n        }\n\
    \        if(temp > 100000){\n            temp = temp / 1000;\n            res\
    \ = String.valueOf(temp);\n        }\n        if(temp > 10000){\n            temp\
    \ = temp / 100;\n            res = String.valueOf(temp);\n        }\n        if(temp\
    \ > 1000){\n            temp = temp / 10;\n            res = String.valueOf(temp);\n\
    \        }\n        if(temp > 100){\n            temp = temp / 1;\n          \
    \  res = String.valueOf(temp);\n        }\n        return res;", "        if (base\
    \ > 10) {\n            System.out.println(\"Base is larger than 10!\");\n    \
    \        return \"error\";\n        }\n        // convert base number to string\
    \ and then reverse the string.\n        String str = Long.toString(x, base);\n\
    \        str = str.substring(1);\n        str = str.substring(0, str.length()\
    \ - 1);\n\n        // reverse the string.\n        str = str + str.substring(0,\
    \ str.length() / 2);\n\n        // convert string to long.\n        x = Long.parseLong(str);\n\
    \        if (str.length() < 1) {\n            x = x;\n        }\n        // return\
    \ string.\n        return Long.toString(x);", "        long ten = Long.parseLong(String.valueOf(Math.pow(10,\
    \ base)));\n        long temp = x % base;\n        long rem = x % ten;\n     \
    \   long result = temp + rem;\n        return String.valueOf(result);", "    \
    \    BigInteger number = BigInteger.valueOf(x);\n        int exponent = number.bitLength()\
    \ - 1;\n        int newBase = base.intValue();\n        BigInteger result = number.divideAndRemainder(BigInteger.valueOf(base)).add(BigInteger.valueOf(newBase))\n\
    \                .divideAndRemainder(BigInteger.valueOf(base)).add(BigInteger.valueOf(newBase)).\n\
    \                divideAndRemainder(BigInteger.valueOf(base));\n        String\
    \ result = result.toString();\n        String result = result.substring(result.length()\
    \ - exponent);\n        if (result.length() > exponent) {\n            result\
    \ += \"0\";\n        }\n        return result;", "        StringBuilder sb = new\
    \ StringBuilder(x);\n        for (int i = sb.length() - 1; i >= 0; --i) {\n  \
    \          if (Integer.valueOf(sb.charAt(i)) == base)\n                sb.setCharAt(i,\
    \ sb.charAt(i) + 1);\n            else if (Integer.valueOf(sb.charAt(i)) > base)\n\
    \                break;\n        }\n        return sb.toString();", "        if\
    \ (base > 10) {\n            throw new IllegalArgumentException(\"base must be\
    \ less than 10.\");\n        }\n        if (base == 10) {\n            return\
    \ Long.toString(x);\n        }\n        long quotient = Math.abs(x) / base;\n\
    \        long remainder = Math.abs(x) % base;\n        long quotientModBase =\
    \ quotient % base;\n        long remainderModBase = remainder % base;\n      \
    \  if (quotient < base) {\n            quotientModBase = base;\n        }\n  \
    \      if (remainder < base) {\n            remainderModBase = base;\n       \
    \ }\n        if (quotientModBase > quotient) {\n            quotientModBase =\
    \ quotient;\n        }\n        if (remainderModBase > remainder) {\n        \
    \    remainderModBase = remainder;\n        }\n        return String.valueOf(quotientModBase)\
    \ + String.valueOf(remainderModBase);", "        // Convert x to string.\n   \
    \     String s = Long.toString(x);\n        // Remove leading 0s.\n        s =\
    \ s.replaceFirst(\"^0+\", \"\");\n        // Convert base to string.\n       \
    \ String b = Integer.toString(base);\n        // If base is more than 2, return\
    \ string representation of x after removing 0s.\n        if (b.length() > 2) {\n\
    \            String answer = s.replaceFirst(\"^0+\", \"\");\n            return\
    \ answer;\n        }\n        // If base is less than 10, return a string representation\
    \ of x after removing 0s.\n        if (b.length() < 10) {\n            String\
    \ answer = s.replaceFirst(\"^0+\", \"\");\n            return answer;\n      \
    \  }\n        // If base is greater than 10, return a string representation of\
    \ x after removing 0s.\n        String answer = s.replaceFirst(\"^0+\", \"\");\n\
    \        if (b.length() == 10) {\n            String answer = s.replaceFirst(\"\
    ^0+\", \"\");\n            return answer;\n        }\n        return s;", "  \
    \      String res = \"\";\n        long temp = x;\n        while (temp > 0) {\n\
    \            res = Integer.toString(temp % base) + res;\n            temp /= base;\n\
    \        }\n        res = \"0\" + res;\n        return res;", "        String\
    \ s = Long.toString(x);\n        int count = 0;\n        int place = -1;\n   \
    \     long result = 0;\n        while (s.charAt(count) == '0') {\n           \
    \ count++;\n        }\n        while (count < s.length()) {\n            if (Integer.valueOf(s.charAt(count)).intValue()\
    \ >= base - 1) {\n                if (count != s.length() - 1) {\n           \
    \         result = Long.parseLong(s.substring(0, count));\n                  \
    \  break;\n                }\n                result = Long.parseLong(s.substring(0,\
    \ count));\n                break;\n            }\n            place++;\n    \
    \        count++;\n        }\n        while (place > 1) {\n            result\
    \ /= base;\n            place--;\n        }\n        while (place != -1) {\n \
    \           result *= base;\n            place--;\n        }\n        return Long.toString(result);",
  "        if (base < 10) return Long.toString(x);\n        if (base > 10) return\
    \ Long.toString(x, base);\n        return null;", "        char[] buff = Long.toString(x).chars().mapToObj(c\
    \ -> (char) c).collect(Collectors.toList()).toArray();\n        char last = buff[buff.length\
    \ - 1];\n        buff[buff.length - 1] = Character.forDigit(Character.getNumericValue(last)\
    \ - 1, base);\n        return new String(buff);", "        // TODO Auto-generated\
    \ method stub\n        String result;\n        if(x < 10 || base < 10 || base\
    \ > 36)\n            result = \"\" + x;\n        else\n            result = String.valueOf(base\
    \ * x);\n\n        return result;", "        BigInteger r = BigInteger.valueOf(x);\n\
    \        if (r.compareTo(base) <= 0) {\n            throw new IllegalArgumentException();\n\
    \        }\n        BigInteger div = BigInteger.valueOf(base);\n        BigInteger\
    \ diff = r.remainder(div);\n        return r.add(diff).mod(div).toString();",
  "        long[] y = new long[256];\n        long[] r = new long[256];\n        //\
    \ Convert base to binary and add to result\n        int bits = (int) Math.log(base);\n\
    \        int rem = bits % 64;\n        long remBase = base - (long) rem;\n   \
    \     for (long a = 0; a < base; a++) {\n            // Get remainder for binary\
    \ conversion\n            long rem1 = remBase / (long) Math.pow(2, bits);\n  \
    \          long rem2 = rem1 % (long) Math.pow(2, bits);\n            long rem3\
    \ = rem2 % (long) Math.pow(2, bits);\n            // Convert input number to binary\n\
    \            long rem4 = rem3 % Math.pow(2, bits);\n            long rem5 = rem4\
    \ % Math.pow(2, bits);\n            // Add binary number to result\n         \
    \   y[a] = (rem5 >> rem) * Math.pow(2, bits);\n            // Divide number by\
    \ base to get remainder\n            remBase = rem1 - ((long) rem4 << Math.pow(2,\
    \ bits));\n            long rem6 = remBase % Math.pow(2, bits);\n            long\
    \ rem7 = rem6 % Math.pow(2, bits);\n            // Add remainder to result\n \
    \           r[a] = rem7 >> rem;\n        }\n        // Convert result to base-10\n\
    \        StringBuilder sb = new StringBuilder();\n        boolean negative = false;\n\
    \        for (int i = 0; i < 256; i++) {\n            long temp = y[i] / Math.pow(2,\
    \ bits);\n            long tempr = r[i] / Math.pow(2, bits);\n            if (tempr\
    \ > 0) {\n                sb.append(String.valueOf(temp));\n                sb.append(String.valueOf(tempr));\n\
    \            } else {\n                sb.append(String.valueOf(temp));\n    \
    \            sb.append(String.valueOf(0));\n                negative = true;\n\
    \            }\n        }\n        // Negative number if negative, add leading\
    \ '-' before result\n        if (negative) {\n            sb.insert(0, '-');\n\
    \        }\n        return sb.toString();", "        // check negative number\
    \ or base < 2\n        if (x < 0 || base < 2) {\n            return \"\";\n  \
    \      }\n\n        // convert decimal to string and return it\n        return\
    \ String.valueOf(changeBase(x, base, Integer.toString(x)));", "        double\
    \ y = x / base;\n        long z = Math.round(y);\n        String r = Long.toString(z);\n\
    \        while (isNumeric(r)) {\n            r = Long.toString((long) Math.pow(base,\
    \ Double.valueOf(r)));\n        }\n        return r;", "        if (base < 10\
    \ || base > 16) {\n            return String.valueOf(x);\n        }\n\n      \
    \  long product = 1;\n        for (int i = 0; i < base; i++) {\n            product\
    \ *= base;\n        }\n\n        String result = String.valueOf(x / product);\n\
    \        for (int i = 0; i < base; i++) {\n            result += (x % product\
    \ < 10) ? String.valueOf(x % product) : \"0\";\n            x /= base;\n     \
    \   }\n        return result;", "        BigInteger number = new BigInteger(x);\n\
    \        BigInteger baseNumber = new BigInteger(base);\n        BigInteger converted\
    \ = number.divide(baseNumber);\n        String s = converted.toString();\n   \
    \     s = s.substring(s.indexOf(\".\")+1);\n        s = s.substring(0, s.length()-1);\n\
    \        s = s.replaceAll(\"0\", \"\");\n        return s;", "        // Change\
    \ base of x (long).\n        // Change base of x (long).\n        // Return (string)\
    \ result of conversion.\n        double result = (double) x / base;\n        String\
    \ result = \"\" + result;\n        return result;", "        return Long.toString(base\
    \ == 10 ? x :\n                (int) (x / base) * base) + changeBase(x, base);",
  "        int n = (int)Math.log(base)/Math.log(10f) + 1;\n        // String result\
    \ = \"\";\n        StringBuilder result = new StringBuilder();\n        while(x\
    \ > 0) {\n            // result = result + (char)(((int)(x%base)+48));\n     \
    \       result.append(x % base);\n            x /= base;\n        }\n        if(n\
    \ > 0) {\n            result.append(n).append('0');\n        }\n        return\
    \ result.toString();", "        if (base < 10) {\n            throw new IllegalArgumentException(\"\
    base must be less than 10\");\n        }\n        if (x < 0) {\n            throw\
    \ new IllegalArgumentException(\"negative number\");\n        }\n        long\
    \ num = (long) Math.pow(base, Math.abs(x));\n        if (num < 0) {\n        \
    \    throw new IllegalArgumentException(\"negative number\");\n        }\n   \
    \     if (num == 0) {\n            return \"0\";\n        }\n        String s\
    \ = Long.toString(num);\n        return s.substring(0, s.length() - 1);", "  \
    \      int result = 0;\n        do {\n            result *= base;\n          \
    \  result += x % base;\n            x /= base;\n        } while (x > 0);\n   \
    \     return Long.toString(result);", "        if (base < 10) {\n            throw\
    \ new NumberFormatException(\"Base must be less than 10.\");\n        }\n    \
    \    String s = Long.toString(x, base);\n        return s.substring(0, s.length()\
    \ - 1);", "        StringBuilder sb = new StringBuilder();\n        while (x >\
    \ 0) {\n            long temp = Math.abs(x) % base;\n            sb.insert(0,\
    \ (char) ('0' + temp));\n            x = x / base;\n        }\n        return\
    \ sb.toString();", "        BigInteger bi = new BigInteger(String.valueOf(x),\
    \ base);\n        return bi.toString();", "        long tmp = Long.parseLong(new\
    \ StringBuilder(String.valueOf(x)).reverse().toString());\n        long ans =\
    \ tmp / base;\n        ans = ans * base;\n        return String.valueOf(ans);",
  "        int digit;\n        String s;\n        long rem;\n        if (x < 0) {\n\
    \            throw new IllegalArgumentException(\"x cannot be negative\");\n \
    \       }\n        if (base < 2) {\n            throw new IllegalArgumentException(\"\
    base cannot be less than 2\");\n        }\n        if (base == 2) {\n        \
    \    s = Long.toString(x);\n        } else if (base == 10) {\n            s =\
    \ Long.toString(x);\n        } else {\n            digit = x % base;\n       \
    \     while (digit > 0) {\n                rem = (x / base) - digit;\n       \
    \         s = Long.toString(rem);\n                digit = x / base;\n       \
    \     }\n        }\n        return s;", "        int intPart = (int) x / base;\n\
    \        int res = intPart * base;\n        if (intPart > 0) {\n            String\
    \ ret = (int) x / base;\n            if (intPart % 2 == 1) {\n               \
    \ ret = \"0\" + ret;\n            }\n            return ret;\n        } else {\n\
    \            return Integer.toString(res);\n        }", "        if (x < 0)\n\
    \            throw new ArithmeticException(\"Cannot change negative numbers to\
    \ base\");\n        String num = \"\";\n        if (base < 10)\n            num\
    \ = String.valueOf(x);\n        else\n            while (x >= base)\n        \
    \        num +=  (x % base);\n                x /= base;\n            num = String.valueOf(x);\n\
    \        return num;", "        long y = x;\n        int count = 0;\n        String\
    \ s = \"\";\n        while (y != 0) {\n            s = (count%base) + \"\" + s;\n\
    \            y = (y / base);\n            count++;\n        }\n        return\
    \ s;", "        long val = x;\n        val /= base;\n        val = val % base;\n\
    \        return Long.toString(val);", "        String s = Long.toString(x);\n\
    \        String r = \"\";\n        while(s.length() > base) {\n            r =\
    \ r.substring(1) + s.substring(s.length()-base,s.length());\n            s = s.substring(0,s.length()-base);\n\
    \        }\n        r = r.substring(1) + s.substring(s.length()-base);\n     \
    \   return r;", "        String s = \"\";\n        int num = Math.abs(x);\n  \
    \      if (num > 0) {\n            if (num > Integer.MAX_VALUE) {\n          \
    \      while (num / base > Integer.MAX_VALUE) {\n                    int rem =\
    \ (int) (num % base);\n                    num = num / base;\n               \
    \     s += rem.toString();\n                }\n                while (num % base\
    \ > 0) {\n                    int rem = (int) (num % base);\n                \
    \    num = num / base;\n                    s += rem.toString();\n           \
    \     }\n                s += num.toString();\n            } else {\n        \
    \        int rem = 0;\n                while (num % base > 0) {\n            \
    \        rem = (int) (num % base);\n                    num = num / base;\n  \
    \                  s += rem.toString();\n                }\n                s\
    \ += num.toString();\n            }\n        } else {\n            while (num\
    \ != 0) {\n                int rem = (int) (num % base);\n                num\
    \ = num / base;\n                s += rem.toString();\n            }\n       \
    \     s += \"0\";\n        }\n        return s;", "        StringBuilder sb =\
    \ new StringBuilder();\n        int remainder;\n        while ((remainder = x\
    \ % base) != 0) {\n            sb.insert(0, (char) (remainder + 'A'));\n     \
    \       x /= base;\n        }\n        sb.insert(0, (x < 10) ? \"\" : \"0\");\n\
    \        return sb.toString();", "        long val = x;\n        while (val >=\
    \ base) {\n            val = val / base;\n        }\n        StringBuilder sb\
    \ = new StringBuilder();\n        while (val > 0) {\n            sb.append(val);\n\
    \            val = val / base;\n        }\n        return sb.toString();", " \
    \       double xd = Math.pow(base, x);\n        String ans = String.valueOf(xd);\n\
    \        // Remove any trailing zeroes\n        while (ans.contains(\"0\")) {\n\
    \            ans = ans.substring(0, ans.length() - 1);\n        }\n        return\
    \ ans;", "        int r = x / base;\n        x -= r * base;\n        String res\
    \ = Long.toString(x);\n        while (r > 0)\n            res = String.valueOf(r)\
    \ + res;\n        \n        return res;", "        List<String> result = new ArrayList<>();\n\
    \        BigInteger integer = new BigInteger(Long.toString(x));\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (integer.compareTo(BigInteger.valueOf(base))\
    \ > 0) {\n            result.add(Integer.toString(integer.mod(BigInteger.valueOf(base)).intValue()));\n\
    \            integer = integer.divide(BigInteger.valueOf(base));\n        }\n\
    \        if (integer.compareTo(BigInteger.valueOf(base)) != 0) {\n           \
    \ result.add(Integer.toString(integer.intValue()));\n        }\n        return\
    \ String.join(\",\", result);", "        if (x <= 10l) return \"\" + x;\n    \
    \    String s = Long.toString(x, base);\n        while (s.length() >= 2l) {\n\
    \            s = s.substring(0, s.length() - 1) + \"0\"; // append 0 if needed\n\
    \        }\n        return s;", "        if (x >= base)\n            throw new\
    \ IllegalArgumentException(\"x value cannot be greater than base \" + base);\n\
    \        if (x < base)\n            throw new IllegalArgumentException(\"x value\
    \ cannot be less than base \" + base);\n        String str = String.valueOf(x);\n\
    \        while (base * 2 <= Long.parseLong(str))\n            str = String.valueOf(x\
    \ / base);\n        return str;", "        if(x < 0) {\n            return \"\
    ERR\";\n        }\n        String num = String.valueOf(Math.abs(x));\n       \
    \ StringBuilder sb = new StringBuilder();\n        if(num.length() <= 3) {\n \
    \           while(num.length() > 0) {\n                sb.append(num.charAt(num.length()\
    \ - 1));\n                num.deleteCharAt(num.length() - 1);\n            }\n\
    \            for(int i = num.length(); i > 3; i--) {\n                sb.insert(0,\
    \ num.charAt(i - 1));\n            }\n            String r = sb.toString();\n\
    \            if(base < 10) {\n                sb.deleteCharAt(0);\n          \
    \      sb.insert(0, String.valueOf(base));\n                r = sb.toString();\n\
    \            }\n            return r;\n        }\n        else {\n           \
    \ while(num.length() > 3) {\n                sb.append(num.charAt(num.length()\
    \ - 2));\n                num.deleteCharAt(num.length() - 2);\n            }\n\
    \            for(int i = num.length(); i > 0; i--) {\n                sb.insert(0,\
    \ num.charAt(i - 1));\n            }\n            String r = sb.toString();\n\
    \            if(base < 10) {\n                sb.deleteCharAt(0);\n          \
    \      sb.insert(0, String.valueOf(base));\n                r = sb.toString();\n\
    \            }\n            return r;\n        }", "        long rem = x;\n  \
    \      long r = 1;\n        long base10 = 10;\n        while(base > base10) {\n\
    \            rem /= base10;\n            base /= base10;\n            r *= base10;\n\
    \        }\n        long quotient = rem;\n        rem = x % base;\n        while(x\
    \ != 0) {\n            if(rem >= base) {\n                rem -= base;\n     \
    \           r *= base;\n            }\n            quotient = quotient * base\
    \ + rem;\n            rem = x % base;\n            x /= base;\n        }\n   \
    \     StringBuilder result = new StringBuilder(String.valueOf(r));\n        while(rem\
    \ != 0) {\n            result.append(String.valueOf(rem % base));\n          \
    \  rem /= base;\n        }\n        return result.toString();", "        String\
    \ s = Long.toString(x);\n        while (x/base >= 1) {\n            long temp\
    \ = base * x / base;\n            s = Long.toString(temp);\n            x = x\
    \ / base;\n        }\n        if (x >= base) {\n            long temp = x * base\
    \ / x;\n            s = Long.toString(temp);\n            x = x / base;\n    \
    \    }\n        s = Long.toString(base * x);\n        String[] temp = s.split(\"\
    \");\n        Arrays.asList(temp).removeIf((t) -> t.equals(\"0\"));\n        Arrays.asList(temp).removeIf((t)\
    \ -> t.equals(\"1\"));\n        Collections.reverse(Arrays.asList(temp));\n  \
    \      StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < temp.length;\
    \ i++) {\n            if (temp[i] != \"0\" && temp[i] != \"1\") {\n          \
    \      sb.append(temp[i]);\n            }\n        }\n        return sb.toString();",
  "        String numberString = \"\";\n        long digit = x;\n        while (digit\
    \ > 0) {\n            digit = digit % base;\n            numberString = String.valueOf(digit)\
    \ + numberString;\n        }\n        return numberString;", "        long longVal\
    \ = x;\n        String strVal = \"\";\n\n        int strLen = Integer.toString(longVal).length();\n\
    \        int numDigit = strLen / base;\n        long remainder;\n\n        if\
    \ (strLen % base > 0) {\n            numDigit++;\n        }\n\n        for (int\
    \ i = 0; i < numDigit; i++) {\n            String currVal = Integer.toString(longVal,\
    \ base, i);\n            remainder = (longVal % base);\n            strVal = strVal\
    \ + Integer.toString(remainder);\n            longVal /= base;\n        }\n\n\
    \        return strVal;", "        if (base == 10l) x *= 10000000000l; // 10**15\n\
    \        if (base == 16l) x *= 1000000000l; // 10**9\n        if (base == 2l)\
    \ x *= 100000l; // 10**6\n        if (base == 8l) x *= 1000000000l; // 10**3\n\
    \        if (base == 4l) x *= 100000l; // 10**2\n        if (base == 16l) x *=\
    \ 10000000000l; // 10**15\n        return x.toString();", "        String numberString\
    \ = Long.toString(x);\n        int numberLength = numberString.length();\n   \
    \     long temp = 0;\n        if (numberLength < base) {\n            String tempString\
    \ = Long.toString(temp);\n            return tempString.substring(0, tempString.length()\
    \ - 1);\n        }\n        int remainder = numberLength % base;\n        int\
    \ quotient = numberLength / base;\n        for (int i = 0; i <= remainder; i++)\
    \ {\n            temp = temp * base + numberString.charAt(numberLength - 1);\n\
    \        }\n        temp = temp / quotient;\n        temp = Long.toString(temp);\n\
    \        if (numberLength < base) {\n            String tempString = Long.toString(temp);\n\
    \            return tempString.substring(0, tempString.length() - 1);\n      \
    \  }\n        for (int i = quotient + 1; i < numberLength; i++) {\n          \
    \  temp *= base;\n            temp = Long.toString(temp);\n        }\n       \
    \ return temp;", "        double ans = (x / base);\n        ans = Math.floor(ans);\n\
    \        ans = ans * base;\n        String anStr = ans.toString();\n        return\
    \ anStr;", "        String xs = String.valueOf(x);\n        int baseInt = Integer.parseInt(xs.substring(0,\
    \ 1));\n        long xInt = Long.parseLong(xs.substring(1, xs.length()));\n  \
    \      String xsInt = String.valueOf(xInt);\n        String xsInt = xsInt.substring(baseInt);\n\
    \        String newBase = String.valueOf(base);\n        if (xsInt.equals(newBase))\
    \ {\n            return xs;\n        }\n        long temp = 0;\n        while\
    \ (xsInt.length() > 1) {\n            temp = Long.parseLong(xsInt.substring(0,\
    \ xsInt.length() - 1));\n            xsInt = xsInt.substring(xsInt.length() -\
    \ 1);\n            xsInt += newBase;\n            temp = temp * base;\n      \
    \  }\n        xsInt += newBase;\n        return String.valueOf(xInt);", "    \
    \    int num = x;\n        int den = base;\n        int intPart = (int) Math.floor(num\
    \ / den);\n        int remaining = (int) (num % den);\n        return String.valueOf((intPart)\
    \ * den + remaining);", "        long factor = 1;\n        int digit = 0;\n  \
    \      double res = 0;\n        do {\n            digit = (int) (x / factor);\n\
    \            res = res * base + digit;\n            x -= digit * factor;\n   \
    \         factor = factor * base;\n        } while (x != 0);\n        return \"\
    \" + res;", "        BigInteger x = BigInteger.valueOf(x);\n        BigInteger\
    \ base = BigInteger.valueOf(base);\n        BigInteger result = x.divide(base);\n\
    \        // Convert back to a String\n        return result.mod(base).toString(2);",
  "        char[] digits = new char[(int) Math.ceil(Math.log(x) / Math.log(base))];\n\
    \        long tmp = 0;\n        while (x >= base) {\n            tmp = x % base;\n\
    \            digits[(int) Math.floor(Math.log(x) / Math.log(base))] = (char) (x\
    \ - (tmp * base));\n            x /= base;\n        }\n        if (tmp > 0) digits[(int)\
    \ Math.floor(Math.log(x) / Math.log(base))] = (char) (tmp + 48);\n        StringBuilder\
    \ result = new StringBuilder();\n        for (int i = 0; i < digits.length; i++)\
    \ result.append(digits[i]);\n        return result.toString();", "        long\
    \ n[] = new long[1];\n        BigInteger bigInt = BigInteger.valueOf(x);\n   \
    \     bigInt = bigInt.divide(BigInteger.valueOf(base));\n        n[0] = bigInt.longValue();\n\
    \        String result=\"\";\n        for(int i=0;i<n.length;i++) {\n        \
    \    if(i!=0)\n                result += \" \";\n            result += Integer.toString(Math.abs(n[i]));\n\
    \        }\n        return result;", "        int digit = 0;\n        String s\
    \ = \"\";\n        while (x >= base)\n        {\n            digit = x % base;\n\
    \            s += (char)((int)digit + 32);\n            x = x / base;\n      \
    \  }\n        digit = x % base;\n        s += (char)((int)digit + 32);\n     \
    \   return s;", "        double result = x / base;\n        return String.valueOf(result);",
  "        String str = Long.toString(x);\n        str = str.substring(0,1) + \"\"\
    \ + str.substring(1);\n        String result = \"\";\n        for(int i = 1; i\
    \ <= str.length(); i++) {\n            long temp = Long.parseLong(str, i) - 1;\n\
    \            temp = temp * base;\n            if (temp < 10) {\n             \
    \   result = result + temp;\n            } else {\n                result = result\
    \ + (temp - 10);\n            }\n        }\n        return result;", "       \
    \ String sx = String.valueOf(x);\n        BigInteger bx = new BigInteger(sx);\n\
    \        bx = bx.divide(BigInteger.valueOf(base));\n        BigInteger bx_str\
    \ = bx.toString();\n        return sx_str.substring(0, sx_str.length() - 1);",
  "        String str = (long) x;\n        String res = \"\";\n\n        for (int\
    \ i = str.length() - 1; i >= 0; i--) {\n            if (Character.digit(s.charAt(i),\
    \ base) == 1) {\n                res += \"1\";\n            } else {\n       \
    \         res += \"0\";\n            }\n        }\n\n        return res;", " \
    \       if (x < 10) {\n            if (base > 9) throw new IllegalArgumentException(\"\
    Base must be less than 10\");\n            String s = Long.toString(x, base);\n\
    \            if (s.length() > base) return s;\n            return s + \"0\";\n\
    \        }\n        if (base < 10)\n            throw new IllegalArgumentException(\"\
    Base must be less than 10\");\n        String s = Long.toString(x, 10 - base);\n\
    \        return s;", "        // change base from decimal to binary and back to\
    \ decimal again \n        // so it is readable to humans.\n        if (x >= 10\
    \ && x < 10000000000000l) {\n            return String.format(\"%lld\", x / base);\n\
    \        }\n        else if (x >= 10000000000000l && x < 1000000000000000l) {\n\
    \            return String.format(\"%lld\", x / base % 10);\n        }\n     \
    \   else if (x >= 1000000000000000l && x < 10000000000000000l) {\n           \
    \ return String.format(\"%lld\", x / base % 100 / 10 + \"0\");\n        }\n  \
    \      else if (x >= 10000000000000000l && x < 100000000000000000l) {\n      \
    \      return String.format(\"%lld\", x / base % 1000 / 100 + \"00\");\n     \
    \   }\n        else if (x >= 100000000000000000l && x < 1000000000000000000l)\
    \ {\n            return String.format(\"%lld\", x / base % 10000 / 1000 +\"000\"\
    );\n        }\n        else if (x >= 1000000000000000000l && x < 10000000000000000000l)\
    \ {\n            return String.format(\"%lld\", x / base % 1000000 / 10000 + \"\
    0000\");\n        }\n        else if (x >= 10000000000000000000l && x < 100000000000000000000l)\
    \ {\n            return String.format(\"%lld\", x / base % 100000000 / 1000000\
    \ + \"00000\");\n        }\n        else if (x >= 100000000000000000000l && x\
    \ < 1000000000000000000000l) {\n            return String.format(\"%lld\", x /\
    \ base % 10000000000 / 100000000 + \"00000000\");\n        }\n        else if\
    \ (x >= 1000000000000000000000l && x < 10000000000000000000000l) {\n         \
    \   return String.format(\"%lld\", x / base % 100000000000/ 1000000000 + \"000000000\"\
    );\n        }\n        else if (x >= 10000000000000000000000l && x < 100000000000000000000000l)\
    \ {\n            return String.format(\"%lld\", x / base % 1000000000000/ 100000000000\
    \ + \"0000000000\");\n        }\n        else if (x >= 100000000000000000000000l\
    \ && x < 1000000000000000000000000l) {\n            return String.format(\"%lld\"\
    , x / base % 10000000000000/ 1000000000000 + \"00000000000\");\n        }\n  \
    \      else if (x >= 1000000000000000000000000l && x < 10000000000000000000000000l)\
    \ {\n            return String.format(\"%lld\", x / base % 100000000000000/ 10000000000000\
    \ + \"000000000000\");\n        }\n        else if (x >= 10000000000000000000000000l\
    \ && x < 100000000000000000000000000l) {\n            return String.format(\"\
    %lld\", x / base % 1000000000000000/ 100000000000000 + \"0000000000000\");\n \
    \       }\n        else if (x >= 100000000000000000000000000l && x < 1000000000000000000000000000l)\
    \ {\n            return String.format(\"%lld\", x / base % 10000000000000000/\
    \ 1000000000000000 + \"00000000000000\");\n        }\n        else if (x >= 1000000000000000000000000000l\
    \ && x < 10000000000000000000000000000l) {\n            return String.format(\"\
    %lld\", x / base % 100000000000000000/ 10000000000000000 + \"000000000000000\"\
    );\n        }\n        else if (x >= 100", "        if (base < 10) {\n       \
    \     if (base == 1) {\n                return String.valueOf(x);\n          \
    \  }\n            else {\n                String result = \"\";\n            \
    \    while (x != 0) {\n                    String result = String.valueOf(x %\
    \ base) + result;\n                    x = x / base;\n                }\n    \
    \            return result;\n            }\n        }\n        else {\n      \
    \      String result = \"\";\n            while (x != 0) {\n                String\
    \ result = String.valueOf(x%base) + result;\n                x = x / base;\n \
    \           }\n            return result;\n        }", "        final int radix\
    \ = 10;\n        String result = Long.toString(x, radix).toUpperCase();\n    \
    \    int idx = result.length() - 1;\n        while (idx >= 0) {\n            if\
    \ (result.get(idx) == '0') {\n                result = (result.substring(0, idx)\
    \ + result.substring(idx + 1).toUpperCase()).substring(1);\n            } else\
    \ {\n                break;\n            }\n            idx -= 1;\n        }\n\
    \        // System.out.println(\"result: \" + result);\n        result = result.substring(1)\
    \ + \"\";\n        if (result.length() % radix == 0) {\n            // System.out.println(\"\
    result length = \" + result.length() + \", radix = \" + radix);\n            result\
    \ = result.substring(0, result.length() - 1);\n        }\n        result = result\
    \ + \"\";\n        // System.out.println(\"result: \" + result);\n        return\
    \ result;", '        return Long.toString(x, base);', "        long n1 = Long.parseLong(String.valueOf(x));\n\
    \        long n2 = Long.parseLong(String.valueOf(base));\n        long n3 = n1\
    \ / n2;\n        String output = Long.toString(n3);\n        return output;",
  "        long[] xArr = new long[1];\n        xArr[0]=x;\n        long res = 0;\n\
    \        for (int i = 0; i < (int) Math.ceil(Math.log(xArr[0]) / Math.log(base));\
    \ i++) {\n            res += xArr[0] / (double) Math.pow(base, i);\n        }\n\
    \        return Long.toString(res, base);", "        double num = (double) x;\n\
    \        double rem = 0;\n        int count = 0;\n        while (count < base)\
    \ {\n            rem = (num % base);\n            num = num / base;\n        \
    \    count++;\n        }\n        return \"\" + rem;", "        long rem = x %\
    \ base;\n        long quotient = x / base;\n        long remainder;\n        if\
    \ (rem > base) {\n            remainder = rem - base;\n        } else {\n    \
    \        remainder = 0;\n        }\n        return String.valueOf(quotient) +\
    \ changeBase(remainder, base);", "        final long result = x;\n        final\
    \ String resultStr = Long.toString(result);\n        final int resultLen = resultStr.length();\n\
    \        final String mod = Long.toString(x % base);\n        final int modLen\
    \ = mod.length();\n        while (modLen < resultLen + 1) {\n            mod =\
    \ \"0\" + mod;\n            modLen++;\n        }\n        while (mod.length()\
    \ < resultLen + 1) {\n            mod = \"0\" + mod;\n            modLen++;\n\
    \        }\n        if (resultLen > modLen) {\n            String str = resultStr.substring(0,\
    \ modLen);\n            return str + mod;\n        } else {\n            return\
    \ resultStr + mod;\n        }", "        int nDigits = 0;\n        long tmp =\
    \ x;\n        while (true) {\n            tmp = tmp / base;\n            ++nDigits;\n\
    \            if (tmp == 0)\n                break;\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 1; i <= nDigits; ++i)\n    \
    \        sb.insert(0, (char) ((tmp % base) + 65));\n        return sb.toString();",
  "        if (x < 0) {\n            return \"Error: input must be positive.\";\n\
    \        }\n\n        long temp = (long) x / base;\n        long remainder = x\
    \ * (long) Math.pow(base, 1);\n        while (temp > 0) {\n            temp =\
    \ temp / base;\n            remainder = remainder * (long) Math.pow(base, 1);\n\
    \        }\n        String reminderStr = Long.toString(remainder);\n\n       \
    \ // If the remainder is greater than 1,\n        // we need to add an extra zero\
    \ to the output.\n        if (reminderStr.length() > 3) {\n            reminderStr\
    \ = \"0\" + reminderStr;\n        }\n\n        // If remainder is less than 10,\
    \ we can just return the output.\n        if (reminderStr.length() < 3) {\n  \
    \          return Long.toString(x);\n        }\n\n        return reminderStr;",
  "        if (x < 0)\n            return \"invalid input\";\n        long result\
    \ = 1;\n        BigInteger bigX = new BigInteger(Long.toString(x));\n        BigInteger\
    \ bigBase = new BigInteger(Long.toString(base));\n        while (bigX.compareTo(bigBase)\
    \ > 0) {\n            result = result * base;\n        }\n        return Long.toString(result);",
  "        long q = x;\n        long r = x;\n        int digit = 0;\n        long\
    \ quotient = 1;\n        while (quotient != 0) {\n            digit++;\n     \
    \       quotient = q % base;\n            q = q / base;\n        }\n        long\
    \ ans = x;\n        int digit2 = 0;\n        while (ans != 0) {\n            digit2++;\n\
    \            ans = ans / base;\n        }\n        String ans2 = \"0\";\n    \
    \    if (digit2 == digit) {\n            ans2 = Long.toString(x);\n        } else\
    \ {\n            while (digit2 != digit) {\n                ans2 += \"0\";\n \
    \               digit2++;\n            }\n        }\n        return ans2;", " \
    \       final long BASE = base;\n        StringBuilder result = new StringBuilder();\n\
    \        while (x >= BASE) {\n            long digit = x % BASE;\n           \
    \ result.append(digit);\n            x /= BASE;\n        }\n        return result.toString();",
  "        if (x > base) {\n            throw new IllegalArgumentException(\"Overflow\"\
    );\n        }\n        long r = x;\n        do {\n            r = r / base;\n\
    \        } while (x != r);\n        return Long.toString(r);", "        if (x\
    \ < 10) {\n            String s = String.format(\"%\" + base + \"d\", x);\n  \
    \          if (s.charAt(0) == '0') return s;\n            String r = \"\";\n \
    \           for (int i = 0; i < s.length(); ++i) {\n                r += s.charAt(i);\n\
    \            }\n            return r;\n        }\n        String s = String.format(\"\
    %\" + base + \"ld\", x);\n        int d = s.length() - 1;\n        while (d >=\
    \ 0 && s.charAt(d) == '0') {\n            d--;\n        }\n        if (d < 0)\
    \ {\n            String r = \"\";\n            for (int i = 0; i < s.length();\
    \ ++i) {\n                r += s.charAt(i);\n            }\n            return\
    \ r;\n        }\n        return s.substring(0, d);", "        BigInteger bx =\
    \ new BigInteger(String.valueOf(x), base);\n        BigInteger bx2 = bx.multiply(new\
    \ BigInteger(\"2\"));\n        BigInteger bx3 = bx2.multiply(new BigInteger(\"\
    3\"));\n        return bx3.toString().toUpperCase();", "        long result =\
    \ 1;\n        int exponent = 1;\n        double result = 1;\n        // Exponent\
    \ is always less than base\n        while (exponent < base) {\n            result\
    \ *= base;\n            exponent++;\n        }\n        while (exponent >= base)\
    \ {\n            result /= base;\n            exponent--;\n        }\n       \
    \ return Long.toString(result, base);", '        return String.format("%" + Long.toString(base)
    + "d", x);', "        double number = (double)x * (double)base;\n        int intPart\
    \ = (int)number;\n        int fracPart = (int)(number%1);\n        return String.valueOf(intPart)\
    \ + \".\" + (fracPart*1);", "        int sign = x > 0 ? 1 : -1;\n        long\
    \ temp = sign * x;\n        long result = 0;\n\n        while (temp != 0) {\n\
    \            if (temp % base == 0) {\n                temp = temp / base;\n  \
    \              result = result + temp;\n            } else {\n               \
    \ temp = temp / base;\n            }\n        }\n        return (sign * result)\
    \ + \"\";"]
stop_tokens:
- "\n    }\n"
