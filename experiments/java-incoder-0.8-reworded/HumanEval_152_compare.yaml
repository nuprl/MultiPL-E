name: HumanEval_152_compare
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // I think we all remember that feeling when the result of\
  \ some long-awaited\n    // event is finally known. The feelings and thoughts you\
  \ have at that moment are\n    // definitely worth noting down and comparing.\n\
  \    // Your task is to determine if a person correctly guessed the results of a\
  \ number of matches.\n    // You are given two array array lists of scores and guesses\
  \ of equal length, where each index shows a match. \n    // Return an array array\
  \ list of the same length denoting how far off each guess was. If they have guessed\
  \ correctly,\n    // the value is 0, and if not, the value is the absolute difference\
  \ between the guess and the score.\n    // example:\n    // >>> compare((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)5l, (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)4l, (long)2l, (long)-2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))\n    // >>> compare((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)5l, (long)0l, (long)0l, (long)0l, (long)4l))), (new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l, (long)1l, (long)0l, (long)0l, (long)-2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)4l, (long)1l, (long)0l, (long)0l, (long)6l)))\n    public static ArrayList<Long>\
  \ compare(ArrayList<Long> game, ArrayList<Long> guess) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(compare((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
  \ (long)1l))), (new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l,\
  \ (long)4l, (long)2l, (long)-2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)0l, (long)0l, (long)0l, (long)3l, (long)3l)))));\n    assert(compare((new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l, (long)0l, (long)0l,\
  \ (long)0l))), (new ArrayList<Long>(Arrays.asList((long)0l, (long)0l, (long)0l,\
  \ (long)0l, (long)0l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)0l, (long)0l, (long)0l, (long)0l, (long)0l)))));\n    assert(compare((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))), (new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-2l, (long)-3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)4l,\
  \ (long)6l)))));\n    assert(compare((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)5l))), (new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)2l, (long)3l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)0l, (long)0l, (long)1l)))));\n    }\n\n}\n"
completions: ["        long difference = 0;\n        ArrayList<Long> results = new\
    \ ArrayList<>();\n        for(int i = 0; i < guess.size(); i++) {\n          \
    \  difference = Math.abs(game.get(i) - guess.get(i));\n            if(difference\
    \ == 0) {\n                results.add((long) 0);\n            } else {\n    \
    \            results.add(difference);\n            }\n        }\n        return\
    \ results;", "        // The difference between the guess and the score is negative,\
    \ so we make that positive\n        ArrayList<Long> difference = Arrays.asList((long)Math.abs(guess.get(0)\
    \ - (long)game.get(0)), (long)Math.abs(guess.get(1) - (long)game.get(1)), (long)Math.abs(guess.get(2)\
    \ - (long)game.get(2)), (long)Math.abs(guess.get(3) - (long)game.get(3)));\n \
    \       ArrayList<Long> differenceArray = difference.stream().mapToLong(x -> (long)\
    \ x).collect(Collectors.toList());\n        // The maximum difference is also\
    \ the difference between the guess and score\n        differenceArray.add(differenceArray.get(differenceArray.size()\
    \ - 1) - differenceArray.get(0));\n        return differenceArray;", "       \
    \ ArrayList<Long> result = new ArrayList<>(game.size());\n        if (game.size()\
    \ != guess.size()) {\n            return result;\n        }\n        IntStream.range(0,\
    \ game.size()).forEach(i -> result.add(calculateDistance(i, game, guess)));\n\
    \        return result;", "        if (game.size() != guess.size()) {\n      \
    \      throw new IllegalArgumentException(\"Guess list is not same length as game\
    \ list.\");\n        }\n        ArrayList<Long> diff = new ArrayList<Long>(game);\n\
    \        for (int i = 0; i < game.size(); i++) {\n            if (game.get(i)\
    \ == guess.get(i)) {\n                diff.set(i, 0);\n            } else {\n\
    \                diff.set(i, Math.abs(game.get(i) - guess.get(i)));\n        \
    \    }\n        }\n        return diff;", "        // If we have an exact match,\
    \ we should return an empty list. Otherwise the\n        // difference between\
    \ the guess and the score should be returned.\n        if(game.size() == guess.size())\
    \ {\n            return new ArrayList<Long>();\n        }\n        \n        //\
    \ To calculate the difference between the guess and the score, we can use \n \
    \       // Streams.\n\n        // To calculate the difference between the guess\
    \ and the score, we can use \n        // Streams.\n        List<Long> diff = game.stream().map(a\
    \ -> guess.get(a) - a).collect(Collectors.toList());\n        // Then we can get\
    \ the absolute value of the difference between the guess and\n        // the score\
    \ and compare that to the list of guesses.\n        List<Long> abs = diff.stream().map(d\
    \ -> Math.abs(d)).collect(Collectors.toList());\n        // Finally, we can find\
    \ the matches by iterating through the list of guesses\n        // and checking\
    \ if any value is the same as the absolute value of the difference between the\
    \ guess and\n        // the score.\n        List<Long> matches = new ArrayList<>();\n\
    \        for(Long aGuess: guess) {\n            if(!abs.contains(aGuess - diff))\
    \ {\n                matches.add(aGuess - diff);\n            }\n        }\n \
    \       return matches;", "        ArrayList<Long> diff = new ArrayList<>();\n\
    \        long score = 0;\n        for (int i=0; i<game.size(); i++) {\n      \
    \      long diff = game.get(i) - guess.get(i);\n            score += diff;\n \
    \           diff.clear();\n        }\n        if (game.size() != guess.size())\
    \ {\n            int i = 0; // guessed correctly\n            int j = 0;\n   \
    \         while (i < game.size() && j < guess.size()) {\n                long\
    \ diff = game.get(i) - guess.get(j);\n                if (diff > 0) {\n      \
    \              score += diff;\n                    i++;\n                } else\
    \ if (diff < 0) {\n                    score += abs(diff);\n                 \
    \   j++;\n                } else {\n                    i++;\n               \
    \     j++;\n                }\n            }\n        }\n        return diff;",
  "        if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"\
    Input lists must have same size\");\n        }\n        ArrayList<Long> totalDiff\
    \ = new ArrayList<Long>();\n        for (int i = 0; i < game.size(); i++) {\n\
    \            totalDiff.add((long) Math.abs(game.get(i) - guess.get(i)));\n   \
    \     }\n        return totalDiff;", "        \n        // Step 1: sort the game\n\
    \        ArrayList<Long> sortedGame = new ArrayList<Long>(game);\n        Collections.sort(sortedGame);\n\
    \        \n        // Step 2: sort the guess\n        ArrayList<Long> sortedGuess\
    \ = new ArrayList<Long>(guess);\n        Collections.sort(sortedGuess);\n    \
    \    \n        // Step 3: compare the two lists\n        ArrayList<Long> diff\
    \ = sortedGuess.stream().mapToLong(i -> Math.abs(game.get(i) - guess.get(i))).collect(Collectors.toList());\n\
    \        \n        // Step 4: return the list of differences\n        return diff;",
  "        // Your code goes here!\n        ArrayList<Long> correct = new ArrayList<>();\n\
    \        for (int i = 0; i < game.size(); i++) {\n            if (guess.contains(game.get(i)))\
    \ {\n                correct.add(0l);\n            } else {\n                correct.add(Math.abs(game.get(i)\
    \ - guess.get(i)));\n            }\n        }\n        return correct;", "   \
    \     ArrayList<Long> result = new ArrayList<>();\n        int correct = 0;\n\
    \        long temp, diff;\n        for (int i = 0; i < game.size(); i++) {\n \
    \           if (guess.get(i) == game.get(i)) {\n                correct++;\n \
    \               temp = 0;\n            } else {\n                temp = Math.abs(guess.get(i)\
    \ - game.get(i));\n            }\n            result.add(temp);\n        }\n \
    \       if (correct == guess.size()) result.add(0);\n        return result;",
  "        return Arrays.stream(Guesses.zip(game, guess).filter(e -> e.getGuess()\
    \ != e.getScore()))\n            .map(e -> e.getScore().equals(e.getGuess()) ?\
    \ 0 : (e.getScore() - e.getGuess()))\n            .collect(toList());", "    \
    \    if (game.size() != guess.size()) {\n            throw new IllegalArgumentException();\n\
    \        }\n        long score = new ArrayList();\n        long[] array = new\
    \ long[game.size()];\n        int i = 0;\n        for (Long i : game) {\n    \
    \        array[i++] = i;\n        }\n        for (int j = 0; j < guess.size();\
    \ j++) {\n            score[j] = Math.abs(array[j] - guess.get(j));\n        }\n\
    \        return score;", "        // Sort the guesses so they are in order\n \
    \       Arrays.sort(guess);\n        ArrayList<Long> scores = new ArrayList<Long>();\n\
    \        long diff = 0;\n        for (Long g : guess) {\n            diff = Math.abs(g\
    \ - game.get(0));\n            scores.add(diff);\n        }\n        return scores;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long total = 0l;\n\
    \        long totalGuess = 0l;\n        for (long aGuess: guess) {\n         \
    \   total += aGuess;\n            totalGuess += aGuess;\n        }\n        for\
    \ (long aGame: game) {\n            long diff = total - aGame;\n            long\
    \ diffGuess = totalGuess - aGame;\n            long resultDiff = Long.compare(diff,\
    \ diffGuess);\n            if (resultDiff != 0) {\n                result.add(resultDiff);\n\
    \            }\n        }\n        return result;", "        // Create a stream\
    \ of the scores array\n        Stream<Long> scoreStream = game.stream().map(a\
    \ -> Math.abs(a));\n\n        // Create a stream of the guess array\n        Stream<Long>\
    \ guessStream = guess.stream().map(a -> Math.abs(a));\n\n        // The comparison\
    \ will take place between these two streams\n        Stream<Long> comparisonStream\
    \ = scoreStream.zip(guessStream);\n\n        // Create another stream of the comparison\
    \ result\n        Stream<Long> resultStream = comparisonStream.filter(a -> a.getLeft()\
    \ < a.getRight());\n\n        // The result stream is mapped to a new list of\
    \ longs (i.e. a collection of values)\n        Stream<Long> resultStreamOfLongs\
    \ = resultStream.map(a -> a.getRight() - a.getLeft());\n\n        // Collect all\
    \ the results into a list\n        ArrayList<Long> result = resultStreamOfLongs.collect(Collectors.toCollection(ArrayList::new));\n\
    \n        // Return the result array\n        return result;", "        return\
    \ Arrays.asList(game.size(), game.stream()\n            .map(g -> (long) (Math.abs(g\
    \ - guess.stream().filter(g1 -> g1 == g).count())))\n            .collect(Collectors.toList()));",
  "        ArrayList<Long> res = new ArrayList<Long>(guess);\n        int count =\
    \ 0;\n        for (long score : game) {\n            if (guess.contains(score))\
    \ {\n                count++;\n                res.add(0l);\n            } else\
    \ {\n                long diff = Long.signum(score - guess.get(count));\n    \
    \            res.add(diff);\n            }\n        }\n        return res;", " \
    \       if (game.size() != guess.size()) {\n            throw new AssertionError(\"\
    Incompatible lists\");\n        }\n        // We create a list to hold our final\
    \ results\n        ArrayList<Long> differences = new ArrayList<Long>();\n\n  \
    \      // Iterate over the guess\n        for (Long guess : guess) {\n       \
    \     // Iterate over the game\n            for (Long score : game) {\n      \
    \          // If the guessed value is equal to the score value, add it to the\
    \ results\n                if (guess == score) {\n                    differences.add(0);\n\
    \                } else {\n                    differences.add(Math.abs(guess\
    \ - score));\n                }\n            }\n        }\n        return differences;",
  "        // TODO: Implement me!\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        return result;", "        if (game.size() != guess.size()) throw new\
    \ IllegalArgumentException(\"The lists must have the same size\");\n\n       \
    \ ArrayList<Long> difference = new ArrayList<>(game.size());\n        long total\
    \ = 0;\n        for (int i = 0; i < game.size(); i++) {\n            long difference\
    \ = Math.abs(guess.get(i) - game.get(i));\n            if (difference != 0) totally\
    \ += difference;\n            difference.add(difference);\n        }\n       \
    \ difference.add(total);\n\n        return difference;", "        // Your code\
    \ here\n\n        Long difference = 0;\n        for(int i = 0; i < game.size();\
    \ i++){\n            if(i == guess.size() - 1){\n                if((game.get(i)\
    \ == guess.get(i))){\n                    difference = 0;\n                }else{\n\
    \                    difference = game.get(i) - guess.get(i);\n              \
    \  }\n            }else{\n                if((game.get(i) == guess.get(i))){\n\
    \                    difference = game.get(i) - guess.get(i);\n              \
    \  }\n            }\n        }\n        ArrayList<Long> diff = new ArrayList<Long>();\n\
    \        for(Long d : difference){\n            diff.add(Math.abs(d));\n     \
    \   }\n        return diff;", "        // your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>(game.size());\n        for(int i=0; i<game.size();\
    \ i++){\n            if(guess.get(i) != game.get(i)) {\n                result.add((Math.abs(guess.get(i)\
    \ - game.get(i))));\n            }\n        }\n        return result;", "    \
    \    // Your code goes here...\n        \n        // I honestly don't know how\
    \ this is going to look.\n        \n        // I did a lot of testing and was\
    \ unable to get anything close to 100% correct, \n        // I believe this is\
    \ because a lot of math is involved and I am unable to \n        // figure out\
    \ a way to get it 100% correct (maybe someone else has better ideas).\n      \
    \  // The below is what I think I should be doing, but I can't find anywhere how\
    \ to get\n        // the exact right result.\n        \n        ArrayList<Long>\
    \ results = new ArrayList<>(game.size());\n        \n        for(int i = 0; i\
    \ < game.size(); i++) {\n            if(i + 1 < game.size() && game.get(i) ==\
    \ guess.get(i + 1)) {\n                results.set(i, game.get(i) - guess.get(i\
    \ + 1));\n            } else if(i + 1 < game.size()) {\n                results.set(i,\
    \ game.get(i) - guess.get(i));\n            } else {\n                results.set(i,\
    \ game.get(i) - guess.get(i));\n            }\n        }\n        \n        return\
    \ results;", "        int guessLen = guess.size();\n        if(guessLen != game.size())\
    \ {\n            throw new RuntimeException(\"Guess length \" + guessLen + \"\
    \ does not match game length \" + game.size());\n        }\n        // O(n) time,\
    \ O(n) space\n        long gameSum = 0;\n        long guessSum = 0;\n        int\
    \ gameIndex = 0;\n        int guessIndex = 0;\n        ArrayList<Long> results\
    \ = new ArrayList<Long>();\n        for(int i = 0; i < game.size(); i++) {\n \
    \           gameSum += game.get(i);\n            guessSum += guess.get(guessIndex);\n\
    \            while(guessIndex < guessLen && gameIndex < game.size() && game.get(gameIndex)\
    \ == guess.get(guessIndex)) {\n                ++gameIndex;\n                ++guessIndex;\n\
    \            }\n            if(guessIndex >= guessLen) {\n                while(gameIndex\
    \ < game.size() && game.get(gameIndex) == guess.get(guessIndex)) {\n         \
    \           ++gameIndex;\n                }\n                if(gameIndex >= game.size())\
    \ {\n                    results.add(0l);\n                }\n               \
    \ else {\n                    results.add(Math.abs(guess.get(guessIndex) - game.get(gameIndex)));\n\
    \                }\n            }\n            else {\n                results.add(0l);\n\
    \            }\n        }\n        return results;", "        List<Long> differences\
    \ = new ArrayList<Long>();\n        game.removeAll(guess);\n        guess.addAll(game);\n\
    \        game.removeAll(guess);\n        guess.addAll(game);\n        long totalDifference\
    \ = 0;\n        for (long guess : guess) {\n            totalDifference += Math.abs(guess\
    \ - game.stream().filter(s -> s == guess).count());\n        }\n        if (totalDifference\
    \ == 0) {\n            return differences;\n        }\n        for (long difference\
    \ : differences) {\n            totalDifference += difference;\n        }\n  \
    \      totalDifference = Math.abs(totalDifference);\n        ArrayList<Long> differences2\
    \ = new ArrayList<Long>();\n        for (long difference : differences) {\n  \
    \          differences2.add(difference);\n            totalDifference -= difference;\n\
    \            if (totalDifference < 0) {\n                differences2.add(difference);\n\
    \                totalDifference = 0;\n            }\n        }\n        return\
    \ differences2;", "        ArrayList<Long> errors = new ArrayList<>(guess.size());\n\
    \        int index = 0;\n        boolean same = true;\n        while (index <\
    \ guess.size() && same) {\n            if (game.get(index) != guess.get(index))\
    \ {\n                same = false;\n                if (game.get(index) != 0)\n\
    \                    errors.add(Math.abs(game.get(index) - guess.get(index)));\n\
    \            } else {\n                same = true;\n                ++index;\n\
    \            }\n        }\n        while (index < game.size()) {\n           \
    \ errors.add(Math.abs(game.get(index) - 0));\n            ++index;\n        }\n\
    \        return errors;", "        ArrayList<Long> diff = new ArrayList<>(game);\n\
    \        \n        // for each guess, calculate absolute difference against the\
    \ score\n        // if difference is positive (correct guess) then set difference\
    \ to 0\n        // else set it to absolute difference.\n        game.stream().forEach(x\
    \ -> {\n            guess.stream().forEach(y -> {\n                long diff =\
    \ abs(x-y);\n                diff.equals(Math.abs(x-y)) ? diff = 0 : diff = diff;\n\
    \                diff.add(diff);\n            });\n        });\n        return\
    \ diff;", "        ArrayList<Long> diffs = new ArrayList<Long>();\n        long\
    \ diff = 0;\n        int index = 0;\n        for(index = 0; index < game.size();\
    \ index++) {\n            diff = game.get(index) - guess.get(index);\n       \
    \     if(diff != 0) {\n                diffs.add(diff);\n            }\n     \
    \   }\n        return diffs;", "        if (game.size() != guess.size()) {\n \
    \           throw new IllegalArgumentException(\"Arrays must be of same size\"\
    );\n        }\n        ArrayList<Long> differences = new ArrayList<Long>(guess.size());\n\
    \        for (long i : guess) {\n            differences.add(i);\n        }\n\
    \        differences.remove(game.size());\n        return differences;", "   \
    \     ArrayList<Long> result = new ArrayList<Long>(game);\n        for (int i\
    \ = 0; i < guess.size(); i++) {\n            result.add(-game.get(i) - guess.get(i));\n\
    \        }\n        return result;", "        if (game.size() != guess.size())\
    \ {\n            throw new IllegalArgumentException();\n        }\n        ArrayList<Long>\
    \ result = new ArrayList<Long>(game.size());\n        long score = 0;\n      \
    \  // The game is guaranteed to have at least as many entries to the guesses\n\
    \        // as there are entries to the game.\n        // Let's iterate through\
    \ the game and compare the guesses one by one.\n        // At the end of the game\
    \ we will have the score and result array\n        // filled up with the correct\
    \ entries.\n        // If the guess was correct we add 0 to the result array.\
    \ If it was wrong\n        // we add the difference between it and the score.\n\
    \        // To determine if the guess was correct we check that the index of the\n\
    \        // guess in the game array is the same as the index of the guess in the\
    \ guess\n        // array AND the value at the corresponding position is the same.\n\
    \        for (long i = 0; i < game.size(); i++) {\n            if (game.get(i)\
    \ == guess.get(i)) {\n                score = 0;\n            } else {\n     \
    \           score = Math.abs(game.get(i) - guess.get(i));\n            }\n   \
    \         result.add(score);\n        }\n        return result;", "        if\
    \ (game.size() != guess.size()) {\n            return new ArrayList<Long>();\n\
    \        }\n        ArrayList<Long> difference = new ArrayList<>();\n        for\
    \ (int i = 0; i != guess.size(); i++) {\n            difference.add((game.get(i)\
    \ - guess.get(i)));\n        }\n        return difference;", "        // Write\
    \ your code here\n        ArrayList<Long> out = new ArrayList<>(game);\n     \
    \   for (Long s : game) {\n            out.stream().filter(x -> x.longValue()\
    \ == s).findFirst().get().ifPresent(x -> out.stream().filter(x -> x.longValue()\
    \ == s).findFirst().get().ifPresent(x -> {\n                x.set(Math.abs(x.longValue()\
    \ - guess.get(game.indexOf(s)).longValue()));\n            }));\n        }\n \
    \       return out;", "        ArrayList<Long> result = new ArrayList<Long>(game);\n\
    \        ArrayList<Long> delta = Arrays.asList(0l);\n        for (int i = 0; i\
    \ < game.size(); i++) {\n            if (guess.contains(game.get(i))) { //the\
    \ person guessed correctly\n                result.add((long) 0l);\n         \
    \   } else {\n                delta.add((long) Math.abs(guess.get(i) - game.get(i)));\n\
    \            }\n        }\n        return result; //the result array", "     \
    \   ArrayList<Long> diff = new ArrayList<>();\n        game.stream().forEach(i\
    \ -> {\n            boolean correct = false;\n            guessed.stream().forEach(j\
    \ -> {\n                if (i == j)\n                    correct = true;\n   \
    \         });\n            diff.add(correct ? 0l : Math.abs(i - guess));\n   \
    \     });\n        return diff;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for(int i = 0; i < guess.size(); i++) {\n            Long score;\n  \
    \          Long guess;\n            score = game.get(i);\n            guess =\
    \ guess.get(i);\n            Long dif = guess - score;\n            result.add(dif);\n\
    \        }\n        return result;", "        // First we convert the input arrays\
    \ into JavaTuple arrays of longs so that we can\n        // easily compute the\
    \ difference between scores and guesses.\n        JavaPairRDD<Long, Long> gameScores\
    \ = game.zipWithIndex().mapToPair(\n                new PairFunction<Long, Long,\
    \ Long>() {\n                    @Override\n                    public Tuple2<Long,\
    \ Long> call(Long score, int index)\n                    {\n                 \
    \       return new Tuple2<>(score, index);\n                    }\n          \
    \      }\n        );\n        JavaPairRDD<Long, Long> guessesScores = guess.zipWithIndex().mapToPair(\n\
    \                new PairFunction<Long, Long, Long>() {\n                    @Override\n\
    \                    public Tuple2<Long, Long> call(Long guess, int index)\n \
    \                   {\n                        return new Tuple2<>(guess, index);\n\
    \                    }\n                }\n        );\n\n        // Now we compute\
    \ the absolute differences between the score and guess for each pair\n       \
    \ // We use RDD subtraction to compute the differences between scores and guesses\n\
    \        JavaPairRDD<Long, Long> differences = gameScores.subtractByKey(guessesScores);\n\
    \n        // The result from subtraction contains tuples such as (score, guess)\n\
    \        // and we want to extract the original score, which we do by mapping\
    \ the\n        // tuples into a lambda that extracts the score\n        JavaPairRDD<Long,\
    \ Long> differencesWithScore = differences.mapToPair(\n                new PairFunction<Tuple2<Long,\
    \ Long>, Long, Long>() {\n                    @Override\n                    public\
    \ Tuple2<Long, Long> call(Tuple2<Long, Long> tuple)\n                    {\n \
    \                       return new Tuple2<>(tuple._1(), tuple._2());\n       \
    \             }\n                }\n        );\n\n        // Now we simply map\
    \ the results of this computation to ArrayList of longs\n        return differencesWithScore.map(\n\
    \                new PairFunction<Tuple2<Long, Long>, Long, ArrayList<Long>>()\
    \ {\n                    @Override\n                    public Tuple2<Long, ArrayList<Long>>\
    \ call(Tuple2<Long, Long> tuple)\n                    {\n                    \
    \    return new Tuple2<>(tuple._2(), new ArrayList<Long>());\n               \
    \     }\n                }\n        ).flatMap(\n                new FlatMapFunction<Tuple2<Long,\
    \ ArrayList<Long>>, ArrayList<Long>>() {\n                    @Override\n    \
    \                public Iterable<ArrayList<Long>> call(Tuple2<Long, ArrayList<Long>>\
    \ tuple)\n                    {\n                        return tuple._2;\n  \
    \                  }\n                }\n        ).mapToObj(\n               \
    \ new PairFunction<ArrayList<Long>, ", "        long diff = 0, sum = 0, maxDiff\
    \ = 0;\n        boolean found = false;\n        for (int i = 0; i < game.size();\
    \ ++i) {\n            long gs = guess.get(i), s = game.get(i);\n            if\
    \ (gs != s) {\n                sum += Math.abs(gs - s);\n                maxDiff\
    \ = Math.max(maxDiff, Math.abs(gs - s));\n            }\n            found = false;\n\
    \            for (int j = i + 1; j < game.size(); ++j) {\n                if (gs\
    \ == game.get(j)) {\n                    sum -= Math.abs(gs - s);\n          \
    \          found = true;\n                    break;\n                }\n    \
    \        }\n            if (!found) {\n                sum += Math.abs(gs - s);\n\
    \                maxDiff = Math.max(maxDiff, Math.abs(gs - s));\n            }\n\
    \        }\n        ArrayList<Long> results = new ArrayList<>();\n        for\
    \ (int i = 0; i < game.size(); ++i) {\n            long gs = guess.get(i);\n \
    \           if (gs != s != game.get(i)) {\n                results.add(sum);\n\
    \                sum = 0;\n                maxDiff = 0;\n            }\n     \
    \   }\n        Collections.sort(results);\n        Collections.reverse(results);\
    \ // since we started from biggest to smallest\n        for (int i = 0; i < results.size();\
    \ ++i) {\n            if (results.get(i) != 0) {\n                results.set(i\
    \ + diff, results.get(i) - results.get(diff));\n            }\n        }\n   \
    \     diff = maxDiff;\n        results.add(diff);\n        return results;", " \
    \       ArrayList<Long> result = new ArrayList<Long>();\n        for(long score\
    \ : game) {\n            for(long guess : guess) {\n                result.add(Math.abs(score-guess));\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> result\
    \ = new ArrayList<Long>(guess);\n        for (long i = 1; i < game.size(); i++)\
    \ {\n            long diff = game.get (i) - game.get (i - 1);\n            if\
    \ (game.get(i) == guess.get(i)) {\n                result.set (i-1, 0l);\n   \
    \         } else {\n                result.set (i-1, Math.abs(diff));\n      \
    \      }\n        }\n        return result;", "        ArrayList<Long> difference\
    \ = new ArrayList<Long>();\n        int n = game.size();\n        int m = guess.size();\n\
    \        for (int i = 0; i < m; i++) {\n            Long score;\n            Long\
    \ guess;\n            score = game.get(i);\n            guess = guess.get(i);\n\
    \            long diff = Math.abs(guess - score);\n            if (guess == score)\n\
    \                difference.add(diff);\n            else\n                difference.add(Math.abs(diff));\n\
    \        }\n        return difference;", "        // write your code here\n  \
    \      int i = 0;\n        int j = 0;\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        while(i<game.size() && j<guess.size()) {\n            long score = game.get(i);\n\
    \            long guess = guess.get(j);\n            result.add(Math.abs(guess\
    \ - score));\n            i++;\n            j++;\n        }\n        return result;",
  "        int gameSize=game.size();\n        int guessSize=guess.size();\n      \
    \  ArrayList<Long> result=new ArrayList<Long>(gameSize);\n        for(int i=0;i<gameSize;i++)\
    \ {\n            long guessValue=guess.get(i);\n            long scoreValue=game.get(i);\n\
    \            long difference=Math.abs(guessValue-scoreValue);\n            if(guessValue==scoreValue)\
    \ {\n                result.add(0l);\n            }\n            else {\n    \
    \            result.add(difference);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<>();\n        int\
    \ size = game.size();\n        int guessSize = guess.size();\n\n        if (guessSize\
    \ != size) {\n            throw new IllegalArgumentException(\"Guess list does\
    \ not match game list\");\n        }\n\n        ArrayList<Long> scoresCopy = new\
    \ ArrayList<>(size);\n        int j = 0;\n        for (int i = 0; i < size; i++)\
    \ {\n            if (guessSize == size) {\n                result.add((long) i);\n\
    \                continue;\n            }\n            scoresCopy.add((long) i);\n\
    \            for (int k = 0; k < guessSize; k++) {\n                int difference\
    \ = Math.abs(guessCopy.get(k) - scoresCopy.get(i));\n                if (difference\
    \ > 0) {\n                    result.add(difference);\n                    break;\n\
    \                }\n            }\n        }\n\n        return result;", "   \
    \     ArrayList<Long> difference = new ArrayList<>();\n        // We go through\
    \ each element of the guess array list one at a time, comparing\n        // it\
    \ to the corresponding element in the game list one at a time.\n        for (int\
    \ i = 0; i < guess.size(); i++) {\n            // We start by finding the difference,\
    \ between the guess and the\n            // corresponding element in the game\
    \ list at a given index.\n            long difference = guess\n              \
    \      .get(i)\n                    - game\n                    .get(i);\n   \
    \         // If the guess is correct, we will end up with a negative value,\n\
    \            // so we take the absolute value of the difference and add it to\
    \ our list\n            // of differences.\n            if (difference < 0) {\n\
    \                difference.add(Math.abs(difference));\n            }\n      \
    \  }\n        return difference;", "        // First, get the \"distance\"\n \
    \       ArrayList<Long> distance = new ArrayList<Long>(game);\n        distance.removeAll(guess);\n\
    \        distance.removeAll(game.stream().filter(x -> x == 0l).collect(Collectors.toList()));\n\
    \        distance.removeAll(game.stream().filter(x -> x == -1l).collect(Collectors.toList()));\n\
    \        distance.removeAll(game.stream().filter(x -> x == -2l).collect(Collectors.toList()));\n\
    \        // Then, we can compare each entry to each other.\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        game.stream().filter(x -> x != 0l || x\
    \ != -1l || x != -2l).forEach(x -> {\n            guess.stream().filter(y -> y\
    \ != 0l && y != -1l && y != -2l).forEach(y -> {\n                if (x == y) {\n\
    \                    result.add(0l);\n                } else {\n             \
    \       long diff = Math.abs(x - y);\n                    result.add(diff);\n\
    \                }\n            });\n        });\n        return result;", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        for (long i = 0;\
    \ i < game.size(); i++) {\n            // The absolute difference between the\
    \ guess and the score.\n            Long absoluteDifference = Math.abs(guess.get(i)\
    \ - game.get(i));\n            // If the difference is 0, they guessed correctly.\
    \ Otherwise, return that.\n            if (absoluteDifference == 0) {\n      \
    \          result.add(0, absoluteDifference);\n            } else {\n        \
    \        result.add(absoluteDifference);\n            }\n        }\n        return\
    \ result;", "        // Your code goes here!\n        long correct = 0;\n    \
    \    int i1 = 0;\n        int i2 = 0;\n        int min = 0;\n        int max =\
    \ 0;\n        while (i1 < game.size() && i2 < guess.size()) {\n            long\
    \ score = game.get(i1);\n            long guess = guess.get(i2);\n           \
    \ long diff = guess - score;\n            if (diff > max) {\n                max\
    \ = diff;\n            }\n            if (diff < min) {\n                min =\
    \ diff;\n            }\n            if (guess == score) {\n                correct++;\n\
    \            }\n            i1++;\n            i2++;\n        }\n        ArrayList<Long>\
    \ a = new ArrayList<>();\n        for (int i = 0; i < guess.size(); i++) {\n \
    \           if (guess.get(i) == correct) {\n                a.add((long) 0);\n\
    \            } else {\n                a.add((long) Math.abs((correct - guess.get(i))));\n\
    \            }\n        }\n        return a;", "        ArrayList<Long> res =\
    \ new ArrayList<Long>();\n        for(long score:game){\n            for(long\
    \ guess:guess){\n                if(game.get(game.size()-1) == guess.get(guess.size()-1)){\n\
    \                    res.add(0l);\n                }else{\n                  \
    \  res.add(Math.abs(game.get(game.size()-1) - guess.get(guess.size()-1)));\n \
    \               }\n            }\n        }\n        return res;", "        boolean\
    \ checkGuess = game.stream().allMatch(x -> {\n            return guess.stream().anyMatch(y\
    \ -> x == y);\n        });\n        boolean checkScore = game.stream().allMatch(x\
    \ -> x == game.get(0));\n        if (checkGuess != checkScore) {\n           \
    \ long scoreDiff = game.stream().filter(x -> x == game.get(0)).count();\n    \
    \        scoreDiff = scoreDiff != game.get(0) - guess.stream().filter(x -> x ==\
    \ guess.get(0))\n                    .count();\n            scoreDiff = scoreDiff\
    \ == 0 ? 0 : scoreDiff;\n            return new ArrayList<Long>(Arrays.asList(scoreDiff));\n\
    \        }\n        return new ArrayList<Long>(Arrays.asList(0));", "        List<Long>\
    \ results = game.stream().map(v -> (v - guess).get()).collect(Collectors.toList());\n\
    \        return new ArrayList<>(results);", "        ArrayList<Long> result =\
    \ new ArrayList<Long>();\n        int gameSize = game.size();\n        int guessSize\
    \ = guess.size();\n        if(guessSize < gameSize){\n            gameSize--;\n\
    \        }\n        if(guessSize > gameSize){\n            guessSize--;\n    \
    \    }\n        for(int i = 0; i < guessSize; i++){\n            int min = (i\
    \ == guessSize) ? gameSize : i;\n            int max = (i == guessSize) ? gameSize\
    \ : i+1;\n            int index = Math.max(Math.min(gameSize-1, max), min);\n\
    \            int score = game.get(index) - guess.get(i);\n            result.add(score);\n\
    \        }\n        return result;", "        ArrayList<Long> results = new ArrayList<>(game);\n\
    \        int maxScore = game.stream().mapToLong(Long::longValue).max().getAsInt();\n\
    \        for(int i = 0; i<guess.size(); i++) {\n            long score = game.get(i);\n\
    \            long guess = guess.get(i);\n            long diff = guess - score;\n\
    \            if (diff < 0) {\n                diff = -diff;\n            }\n \
    \           results.add(i, diff);\n        }\n        return results.stream().map(e\
    \ -> Math.abs(e)).toList();", "        // Your code here\n        ArrayList<Long>\
    \ differences = new ArrayList<>();\n        for(int i=0; i<game.size(); i++){\n\
    \            differences.add((game.get(i)-guess.get(i)));\n        }\n       \
    \ return differences;", "        ArrayList<Long> out = new ArrayList<>();\n  \
    \      for(int i = 0; i<game.size(); i++){\n            if(!game.contains(guess.get(i))){\n\
    \                out.add(-Math.abs(guess.get(i) - game.get(i)));\n           \
    \ } else {\n                out.add(0l);\n            }\n        }\n        return\
    \ out;", "        ArrayList<Long> result = new ArrayList<Long>(game);\n      \
    \  for (int i = 0; i < game.size(); i++) {\n            long score = -game.get(i);\n\
    \            long guess = guess.get(i);\n            boolean correct = guess ==\
    \ score;\n            if (correct) {\n                result.set(i, 0);\n    \
    \        } else {\n                result.set(i, Math.abs(score - guess));\n \
    \           }\n        }\n        return result;", "        ArrayList returnList\
    \ = new ArrayList<>();\n        for(int i = 0; i < game.size(); i++) {\n     \
    \       long guess = guess.get(i);\n            long score = game.get(i);\n  \
    \          if(i == guess.size() - 1) {\n                returnList.add(0);\n \
    \           }\n            else {\n                long diff = Math.abs(guess\
    \ - score);\n                returnList.add(diff);\n            }\n        }\n\
    \        return returnList;", "        ArrayList<Long> result = new ArrayList<Long>(game.size());\n\
    \        int counter = 0;\n        for (int i = 0; i < game.size(); i++) {\n \
    \           if (guess.contains(game.get(i))) {\n                result.add(0l);\n\
    \                counter++;\n            } else {\n                result.add(Math.abs(game.get(i)\
    \ - guess.get(counter)));\n                counter++;\n            }\n       \
    \ }\n        return result;", "        ArrayList<Long> result = new ArrayList<Long>(game);\n\
    \        boolean correct = true;\n        long guessValue = guess.get(0) - game.get(0);\n\
    \        for (int i = 1; i < game.size(); i++) {\n            long score = game.get(i)\
    \ - game.get(i - 1);\n            long score = game.get(i) - game.get(i - 1);\n\
    \            guessValue = guessValue + score;\n            if (guessValue != guess)\
    \ {\n                correct = false;\n            }\n        }\n        if (correct)\
    \ {\n            result.add(0, 0);\n        }\n        else {\n            long\
    \ absoluteDifference = Long.MIN_VALUE;\n            int indexOfMin = 0;\n    \
    \        for (int i = 1; i < guess.size(); i++) {\n                long guess\
    \ = guess.get(i) - guess.get(i - 1);\n                long score = game.get(i)\
    \ - game.get(i - 1);\n                absoluteDifference = Math.abs(guess - score);\n\
    \                if (absoluteDifference < absoluteDifference) {\n            \
    \        indexOfMin = i;\n                }\n            }\n            result.add(indexOfMin,\
    \ absoluteDifference);\n        }\n        return result;", "        ArrayList<Long>\
    \ guesses = new ArrayList<Long>(guess);\n        ArrayList<Long> scores = new\
    \ ArrayList<Long>(game);\n        ArrayList<Long> difference = new ArrayList<Long>(guess);\n\
    \        int i = 0;\n        int j = 0;\n        while( i < game.size() && j <\
    \ guess.size() ) {\n            long difference = game.elementAt(i) - guesses.elementAt(j);\n\
    \            if(difference < 0) {\n                difference.add(difference);\n\
    \            } else {\n                difference.add(-difference);\n        \
    \    }\n            difference.add(guesses.elementAt(j));\n            difference.add(scores.elementAt(i));\n\
    \            i++;\n            j++;\n        }\n        return difference;", " \
    \       ArrayList<Long> diff = new ArrayList<>();\n\n        // TODO: your solution\n\
    \n        return diff;", "        int guesses = game.size();\n        int correctGuesses\
    \ = 0;\n        int correctGuessesTot = correctGuesses;\n        int guessesUsed\
    \ = 0;\n        ArrayList<Long> results = new ArrayList<>();\n        for (int\
    \ i = 0; i < guesses; i++) {\n            int guess = guess.get(i);\n        \
    \    if (guess == game.get(i)) {\n                correctGuesses++;\n        \
    \        guessesUsed++;\n            } else {\n                if (Math.abs(guess\
    \ - game.get(i)) > Math.abs(correctGuesses - correctGuessesTot)) {\n         \
    \           correctGuessesTot = correctGuesses;\n                    guessesUsed\
    \ = 0;\n                    correctGuesses = 0;\n                }\n         \
    \       results.add(guess - game.get(i));\n                guessesUsed++;\n  \
    \          }\n        }\n        ArrayList<Long> differences = new ArrayList<>();\n\
    \        if (correctGuesses == guessesUsed) {\n            for (int i = 0; i <\
    \ guesses; i++) {\n                if (Math.abs(correctGuesses - correctGuessesTot)\
    \ == guessesUsed) {\n                    differences.add(0l);\n              \
    \  } else {\n                    differences.add(Math.abs(correctGuesses - correctGuessesTot));\n\
    \                }\n            }\n        } else {\n            differences.add(Math.abs(correctGuesses\
    \ - correctGuessesTot));\n        }\n        return results;", "        ArrayList<Long>\
    \ differences = new ArrayList<>();\n        int matches = 0;\n        int size\
    \ = game.size();\n        int guessesSize = guess.size();\n        for (int i\
    \ = 0; i < guessesSize; i++) {\n            Long score = game.get(i);\n      \
    \      Long guess = guess.get(i);\n            differences.add(Math.abs(guess\
    \ - score));\n            if (guess == score) {\n                matches++;\n\
    \            }\n        }\n        for (int i = 0; i < size; i++) {\n        \
    \    if (differences.get(i) != 0) {\n                differences.remove(i);\n\
    \            }\n        }\n        return differences;", "        ArrayList<Long>\
    \ results = new ArrayList<Long>();\n        int leng = game.size();\n        int\
    \ lengh = guess.size();\n        if(leng!=lengh) {\n            System.out.println(\"\
    leng != lengh\");\n        }\n        for(int i = 0; i < leng; i++)\n        {\n\
    \            int j = i;\n            int sum = 0;\n            int a = 0;\n  \
    \          for(int j = 0; j <= i; j++)\n            {\n                sum = sum\
    \ + game.get(i) - guess.get(j);\n                a = a + 1;\n            }\n \
    \           if(a == 1)\n            {\n                results.add(0, Math.abs(sum));\n\
    \            }\n            else if(a == 0)\n            {\n                results.add(sum);\n\
    \            }\n        }\n        return results;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        // for each item in the guess\n       \
    \ for (Long guess : guess) {\n            // subtract the guess from the game\
    \ score\n            long diff = Math.abs(game.stream().filter(x -> x == guess).count()\
    \ - 1);\n            result.add(diff);\n        }\n        return result;", " \
    \       //sort for easy comparison\n        Arrays.sort(game);\n        Arrays.sort(guess);\n\
    \        long result = 0;\n        for(int i = 0; i < game.size(); ++i) {\n  \
    \          long diff = game.get(i) - guess.get(i);\n            if((i == 0) ||\
    \ (diff > 0)) {\n                result += (diff > 0) ? 1 : -1;\n            }\n\
    \            else {\n                result += diff;\n            }\n        }\n\
    \        //add an extra result if they guess right after one another\n       \
    \ long lastIndex = game.size() - 1;\n        if(game.size() > 1 && guess.get(lastIndex)\
    \ == guess.get(0)) {\n            result += 1;\n        }\n        //remove any\
    \ extra guess if they guess right\n        if(game.size() > guessIndex && guess.get(guessIndex)\
    \ == guess.get(lastIndex)) {\n            game.remove(guessIndex);\n         \
    \   guess.remove(guessIndex);\n        }\n        //convert back to an array\n\
    \        ArrayList<Long> answer = new ArrayList<>(game.size());\n        for(int\
    \ i = 0; i < game.size(); ++i) {\n            answer.add(result == 0 ? guess.get(i)\
    \ : result);\n        }\n        return answer;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        for(int i = 0; i < game.size(); i++)\n       \
    \     result.add(game.get(i) - guess.get(i));\n        return result;", "    \
    \    ArrayList<Long> gameResult = new ArrayList<>();\n        gameResult.retainAll(guess);\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        for(long l : game)\
    \ {\n            long gameValue = 0;\n            for(long g : guess) {\n    \
    \            if(g == l) {\n                    gameValue++;\n                }\n\
    \            }\n            result.add(gameValue);\n        }\n        ArrayList<Long>\
    \ diff = new ArrayList<>();\n        for(long l : game) {\n            long diffValue\
    \ = 0;\n            for(long g : guess) {\n                if(g != l) {\n    \
    \                diffValue = Math.abs(g - l);\n                }\n           \
    \ }\n            diff.add(diffValue);\n        }\n        return diff;", "   \
    \     // Your task is to return the array of correct guesses.\n        // The\
    \ elements of the array should correspond to the guesses given,\n        // and\
    \ be 0 if they have not guessed correctly.\n        // The returned array should\
    \ be in the same order as guesses.\n        // The length of both lists should\
    \ be the same.\n        // You don't need to consider cases where guesses and\
    \ scores are the same length.\n        // You must use the helper function below\
    \ (which you also need to complete yourself!)\n        // to solve this problem.",
  "        ArrayList<Long> difference = new ArrayList<>();\n        for (long gameScore:\
    \ game) {\n            long guessedScore = guess.stream().filter(c -> c == gameScore).count();\n\
    \            if (guessedScore == 0) {\n                difference.add(0l);\n \
    \           } else {\n                difference.add(Math.abs(gameScore - guessedScore));\n\
    \            }\n        }\n        return difference;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>(game);\n        Long gameSum = game.reduce((a,\
    \ b) -> a + b); //sum of scores\n        Long guessSum = guess.reduce((a, b) ->\
    \ a + b); //sum of guesses\n        int matchCount = game.size() - guess.size();\n\
    \        long diff;\n        int idx;\n        long absDiff;\n        for (idx\
    \ = 0; idx < matchCount; idx++) {\n            diff = game.get(idx) - guess.get(idx);\n\
    \            absDiff = Math.abs(diff);\n            result.add(absDiff);\n   \
    \     }\n        //System.out.println(result);\n        return result;", "   \
    \     long score = 0;\n        boolean guessed = false;\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        int count = 0;\n        if (game.size()\
    \ != guess.size()) {\n            System.out.println(\"You didn't guess the correct\
    \ number of games\");\n        } else {\n            int j = 0;\n            int\
    \ k = 0;\n            for (int i = 0; i < game.size(); i++) {\n              \
    \  for (j = 0; j < guess.size(); j++) {\n                    if (game.get(i) ==\
    \ guess.get(j)) {\n                        score++;\n                    }\n \
    \                   k++;\n                }\n                guessed = true;\n\
    \                result.add(score);\n                score = 0;\n            \
    \    count = 0;\n                if (k == guess.size()) {\n                  \
    \  break;\n                }\n            }\n        }\n        return result;",
  "        ArrayList<Long> diff = new ArrayList<>();\n        long diffTotal = 0;\n\
    \        for(int i=0; i<game.size(); i++) {\n            long scoreDiff = game.get(i)\
    \ - guess.get(i);\n            if (scoreDiff < 0) {\n                scoreDiff\
    \ = -scoreDiff;\n            }\n            diff.add(scoreDiff);\n           \
    \ diffTotal += scoreDiff;\n        }\n        ArrayList<Long> results = new ArrayList<>();\n\
    \        for(int i=0; i<guess.size(); i++) {\n            if (diff.get(i) != 0)\
    \ {\n                results.add(diff.get(i));\n            } else {\n       \
    \         results.add(0);\n            }\n        }\n        return results;",
  "        ArrayList<Long> differences = new ArrayList<>();\n        // Iterate over\
    \ each entry in the guess array\n        for (long guess : guess) {\n        \
    \    // Iterate over each entry in the game array\n            for (long game\
    \ : game) {\n                // If there's a mismatch\n                if (game\
    \ != guess) {\n                    // Add the difference between guess and game\
    \ to differences\n                    differences.add(Math.abs(guess - game));\n\
    \                    // If there's a mismatch, but one more game is remaining\n\
    \                    if (game.longValue() != 0l) {\n                        //\
    \ Reset the difference list since another game has yet to be played\n        \
    \                differences.clear();\n                        // Stop the loop\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n        return differences;", "        // Your code here\n\
    \        boolean correctGuess = game.stream().allMatch(guess -> guess.equals(game));\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0;\
    \ i < game.size(); ++i) {\n            long diff = correctGuess ? game.get(i).longValue()\
    \ - guess.get(i).longValue() : (Math.abs(game.get(i).longValue() - guess.get(i).longValue()));\n\
    \            result.add(diff);\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        game.removeAll(guess);\n        guess.removeAll(game);\n\
    \        if (game.size() > guess.size()) {\n            result.addAll(0, game);\n\
    \        } else {\n            result.addAll(0, guess);\n        }\n        return\
    \ result;", "        int i = 0;\n        int j = 0;\n        ArrayList<Long> result\
    \ = new ArrayList<>(game.size());\n        while (i < game.size() && j < guess.size())\
    \ {\n            long temp = game.get(i);\n            long guessTemp = guess.get(j);\n\
    \            if (guessTemp == temp) {\n                result.add((long)0);\n\
    \                i += 1;\n                j += 1;\n            } else if (guessTemp\
    \ < temp) {\n                result.add((long)guessTemp - temp);\n           \
    \     i += 1;\n            } else {\n                result.add((long)temp - guessTemp);\n\
    \                j += 1;\n            }\n        }\n        return result;", " \
    \       if (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"\
    The arrays must have equal length\");\n        }\n        // this solution uses\
    \ java 8 streams, however it is easy to implement using old java 7 stream syntax\n\
    \        ArrayList<Long> diff = new ArrayList<>();\n        game.stream().forEach(game\
    \ -> {\n            guess.stream().forEach(guess -> {\n                diff.add(Math.abs(game\
    \ - guess));\n            });\n        });\n        return diff;", "        ArrayList<Long>\
    \ answer = new ArrayList<>(game);\n        Arrays.sort(guess);\n        int counter\
    \ = 0;\n        int counter2 = 0;\n        for (Long guesses : guess) {\n    \
    \        while (guess == answer) {\n                answer.remove(game.get(counter));\n\
    \                counter++;\n            }\n            while (guess == answer2)\
    \ {\n                answer.remove(game2.get(counter2));\n                counter2++;\n\
    \            }\n            answer.add(guess - game);\n            answer.add(guess\
    \ - game2);\n        }\n        return answer;", "        // Complete this function\n\
    \        ArrayList<Long> result = new ArrayList<Long>(guess.size());\n       \
    \ for (long i : guess) {\n            boolean wrong = false;\n            for\
    \ (long j : game) {\n                if (j == i) {\n                    result.set(i,\
    \ 0);\n                    wrong = false;\n                    break;\n      \
    \          }\n            }\n            if (!wrong) {\n                result.set(i,\
    \ Math.abs(game.get(game.indexOf(i)) - i));\n            }\n        }\n      \
    \  return result;", "        ArrayList<Long> correct = new ArrayList<>();\n  \
    \      ArrayList<Long> differences = new ArrayList<>();\n        for (Long guess\
    \ : guess) {\n            int score = 0;\n            for (Long game : game) {\n\
    \                if (game.longValue() == guess) {\n                    score++;\n\
    \                }\n            }\n            differences.add(Math.abs(guess\
    \ - score));\n            if (guess == game) {\n                correct.add(0);\n\
    \            } else {\n                correct.add(Math.abs(guess - score));\n\
    \            }\n        }\n        return correct;", "        List<Long> gameList\
    \ = game;\n        List<Long> guessList = guess;\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        for (int i = 0; i < gameList.size(); i++) {\n\
    \            int index = guessList.indexOf(gameList.get(i));\n            if (index\
    \ != -1) {\n                result.add(i);\n                guessList.remove(index);\n\
    \            }\n        }\n        return result;", "        long score = 0;\n\
    \        for (int i = 0; i < game.size(); i++) {\n            score += Math.abs(guess.get(i)\
    \ - game.get(i));\n        }\n        ArrayList<Long> results = new ArrayList<>(game.size());\n\
    \        for (int i = 0; i < game.size(); i++) {\n            int diff = Math.abs(guess.get(i)\
    \ - game.get(i));\n            if (diff > 0) results.add(new Long(diff));\n  \
    \          else results.add(new Long(Math.abs(diff)));\n        }\n        return\
    \ results;", "        ArrayList<Long> result = new ArrayList<Long>(game.size());\n\
    \        for (long gameScore : game) {\n            boolean isGuessed = game.contains(guess);\n\
    \            long diff = guess - gameScore;\n            long diffAbs = Math.abs(diff);\n\
    \            int index = isGuessed ? 0 : game.indexOf(gameScore);\n          \
    \  while (!isGuessed && index > 0) {\n                result.set(--index, diffAbs);\n\
    \                index = 0;\n            }\n        }\n        return result;",
  "        if (game.size() != guess.size())\n            return new ArrayList<Long>();\n\
    \        int match = 0;\n        // Loop through all the elements in game\n  \
    \      for (long i = 0; i < game.size(); i++) {\n            int difference =\
    \ game.size() - guess.size();\n            int minDiff = Integer.MAX_VALUE;\n\
    \            // Loop through all the elements in guess\n            for (int j\
    \ = 0; j < guess.size(); j++) {\n                long delta = game.get(i) - guess.get(j);\n\
    \                if (delta < 0 && difference <= minDiff) {\n                 \
    \   difference = delta;\n                    minDiff = difference;\n         \
    \       }\n                else if (delta > 0 && difference < minDiff) {\n   \
    \                 difference = delta;\n                    minDiff = difference;\n\
    \                }\n            }\n            // Add all the differences found\
    \ above into a total\n            if (minDiff < 0) {\n                match +=\
    \ minDiff;\n            }\n            else if (minDiff > 0) {\n             \
    \   match += -minDiff;\n            }\n        }\n        return new ArrayList<>(Arrays.asList(match));",
  "        // return null if either array is null\n        if (game == null || guess\
    \ == null) {\n            return null;\n        }\n\n        // return null if\
    \ the game guesses are longer than the game score.\n        if (guess.size() >\
    \ game.size()) {\n            return null;\n        }\n\n        // Return an\
    \ empty array if both the game and guess arrays are empty\n        if (game.size()\
    \ == 0 && guess.size() == 0) {\n            return new ArrayList<Long>();\n  \
    \      }\n\n        // Initialize an array list for the result\n        ArrayList<Long>\
    \ result = new ArrayList<Long>(game.size());\n\n        // Add guesses with 0\
    \ difference.\n        result.add(0l);\n\n        // Go through each index\n \
    \       for (int i = 0; i < game.size(); i++) {\n            // Set the current\
    \ guess as the current difference\n            long diff = guess.get(i) - game.get(i);\n\
    \n            // Add this difference to the result list \n            result.add(diff);\n\
    \n            // Check if the guess was correct\n            if (diff == 0) {\n\
    \                // if so, add 0 to the result list too\n                result.add(0l);\n\
    \            }\n        }\n\n        return result;", "        // write your code\
    \ here\n        int n = game.size();\n        int m = guess.size();\n        ArrayList<Long>\
    \ result = new ArrayList<>(n);\n        long maxDiff = Long.MAX_VALUE;\n     \
    \   for (int i = 0; i < n; ++i) {\n            long score = game.get(i);\n   \
    \         if (guess != null && guess.contains(i)) {\n                long guess\
    \ = guess.get(i);\n                long diff = Math.abs(guess - score);\n    \
    \            if (diff > maxDiff) {\n                    maxDiff = diff;\n    \
    \            }\n                else {\n                    result.add(diff);\n\
    \                }\n            }\n            else {\n                result.add(maxDiff);\n\
    \            }\n        }\n        return result;", "        \n        // Your\
    \ code here\n        \n        ArrayList<Long> result = new ArrayList<>();\n \
    \       \n        for(int i=0; i<guess.size(); i++) {\n            result.add(0);\n\
    \            \n            if(i == game.size() - 1) {\n                \n    \
    \            if(!guess.contains(game.get(i)))\n                    result.set(i,\
    \ game.get(i).longValue() - guess.get(i).longValue());\n            }\n      \
    \      else {\n                if(!guess.contains(game.get(i + 1))) {\n      \
    \              result.set(i, game.get(i + 1).longValue() - guess.get(i).longValue());\n\
    \                }\n                else {\n                    if(guess.get(i).longValue()\
    \ > game.get(i + 1).longValue()) {\n                        result.set(i, game.get(i\
    \ + 1).longValue() - guess.get(i).longValue());\n                    }\n     \
    \               else {\n                        result.set(i, game.get(i).longValue()\
    \ - guess.get(i).longValue());\n                    }\n                }\n   \
    \         }\n        }\n        \n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n\n        game.stream().forEach(s -> guess.stream().filter(g\
    \ -> g != s).forEach(result::add));\n\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>(guess.size());\n        long totalScore = game.stream()\n\
    \            .mapToLong(i -> i)\n            .sum();\n\n        long maxScore\
    \ = game.stream()\n            .mapToLong(i -> i)\n            .max(Comparator.naturalOrder())\n\
    \            .getAsLong();\n\n        // we must go backwards from guess to score\n\
    \        Collections.reverse(guess);\n        long prevScore = 0;\n        long\
    \ maxGuesses = 0;\n        for (long guess : guess) {\n            maxGuesses++;\n\
    \            long score = game.stream()\n                .filter(i -> i == guess)\n\
    \                .count();\n\n            // is score 0?\n            if (prevScore\
    \ == 0) {\n                result.add((long) 0);\n            } else {\n     \
    \           result.add((long) Math.abs(score - prevScore));\n            }\n\n\
    \            prevScore = score;\n        }\n\n        // is it max score 0?\n\
    \        if (maxScore == 0) {\n            result.add((long) 0);\n        } else\
    \ {\n            result.add((long) Math.abs(maxScore - totalScore));\n       \
    \ }\n\n        // is it max guesses 0?\n        if (maxGuesses == 0) {\n     \
    \       result.add((long) 0);\n        } else {\n            result.add((long)\
    \ Math.abs(maxGuesses - maxScore));\n        }\n\n        return result;", " \
    \       ArrayList<Long> results = new ArrayList<Long>();\n        int gameSize\
    \ = game.size();\n        int guessSize = guess.size();\n        Arrays.fill(results,\
    \ 0l);\n        for (int i = 0; i < gameSize; i++) {\n            for (int j =\
    \ 0; j < guessSize; j++) {\n                if (game.get(i) == guess.get(j)) {\n\
    \                    results.set(i, 0l);\n                } else {\n         \
    \           results.set(i, Math.abs(game.get(i) - guess.get(j)));\n          \
    \      }\n            }\n        }\n        return results;", "        // YOUR\
    \ CODE HERE!\n        int matchCount = 0, matchIndex = 0;\n        for (int i\
    \ = 0; i < game.size(); i++) {\n            if (game.get(i) == guess.get(matchIndex))\
    \ {\n                matchCount++;\n            }\n            matchIndex++;\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        if\
    \ (matchCount == game.size()) {\n            for(int i = 0; i< game.size(); i++){\n\
    \                result.add((game.get(i)-guess.get(i)));\n            }\n    \
    \    }\n        else {\n            for(int i = 0; i< game.size(); i++){\n   \
    \             result.add((Math.abs(game.get(i)-guess.get(i))));\n            }\n\
    \        }\n        return result;", '        return compare.compare(game, guess,
    new ArrayList<Long>());', "        ArrayList<Long> total = new ArrayList<>(game.size());\n\
    \        for (long guess: guess) {\n            int diff = Math.abs(guess - game.get((int)(Math.random()\
    \ * game.size())));\n            total.add(diff);\n        }\n        return total;",
  "        // TODO: your code here\n        ArrayList result = new ArrayList();\n\
    \        ArrayList temp = new ArrayList();\n        int numGuesses = guess.size();\n\
    \        ArrayList temp2 = new ArrayList();\n        for(int i = 0; i <numGuesses;\
    \ i++) {\n            temp.add((long) i);\n            temp2.add(guess.get(i));\n\
    \        }\n        Collections.sort(temp2);\n        int bestGuessIndex = 0;\n\
    \        int bestScore = -1;\n        for(int i = 0; i < game.size(); i++) {\n\
    \            if(i == bestGuessIndex) {\n                result.add((long) 0);\n\
    \            } else {\n                long score = Math.abs((game.get(i) - guess.get(i)));\n\
    \                result.add((long) score);\n            }\n        }\n       \
    \ return result;", "        Arrays.sort((List)game.stream().parallel().map(Math::abs).sorted(Comparator.comparing(Math::abs)).collect(Collectors.toList()));\n\
    \        Arrays.sort((List)guess.stream().parallel().map(Math::abs).sorted(Comparator.comparing(Math::abs)).collect(Collectors.toList()));\n\
    \        return game.stream().parallel().map(gameItem -> {\n            Long myScore\
    \ = game.stream().filter(gameItem -> gameItem.longValue() == gameItem.longValue()).findAny().orElse(null);\n\
    \            Long myGuess = guess.stream().filter(gameItem -> gameItem.longValue()\
    \ == gameItem.longValue()).findAny().orElse(null);\n            Long diff = Math.abs(myGuess\
    \ - myScore);\n            return diff != 0 ? diff : (myScore == 0 ? 0 : Math.abs(myScore\
    \ - myGuess));\n        }).collect(Collectors.toList());", "        // TODO: write\
    \ your solution here\n        ArrayList result = new ArrayList();\n        int\
    \ gameSize = (int) game.size();\n        int guessSize = (int) guess.size();\n\
    \        for (int i = 0; i < guessSize; i++) {\n            long guessed = guess.get(i);\n\
    \            long score = game.get(i);\n            long diff = abs(guessed -\
    \ score);\n            result.add(diff);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>();\n        long totalDiff = 0;\n\
    \        // If the scores are equal, we know the difference is zero\n        if(game.size()\
    \ == guess.size()) {\n            for(long g : guess) {\n                long\
    \ diff = Math.abs(g-game.get(0));\n                totalDiff += diff;\n      \
    \      }\n            result.add(0l);\n        }\n        else {\n           \
    \ for(long g : guess) {\n                long diff = Math.abs(g-game.get(0));\n\
    \                totalDiff += diff;\n                result.add(diff);\n     \
    \       }\n        }\n        if(totalDiff > 0) {\n            result.add(totalDiff);\n\
    \        }\n        return result;", "        ArrayList<Long> scores = new ArrayList<Long>(game);\n\
    \        for (Long guess : guess) {\n            int index = score.indexOf(guess);\n\
    \            if (index < 0) {\n                scores.add(guess);\n          \
    \  } else {\n                scores.add(score - guess);\n            }\n     \
    \   }\n        return scores;", "        if (game.size() != guess.size()) {\n\
    \            throw new RuntimeException(\"Game and Guess have different lengths:\
    \ \" + game.size() + \" != \" + guess.size());\n        }\n        ArrayList<Long>\
    \ result = new ArrayList<Long>(game.size());\n        long currentGame, currentGuess;\n\
    \        for (long i = 0; i != game.size(); i++) {\n            currentGame =\
    \ game.get(i);\n            currentGuess = guess.get(i);\n            long diff\
    \ = Math.abs(currentGuess - currentGame);\n            result.add(diff);\n   \
    \     }\n        return result;", "        int totalMismatched = 0;\n        ArrayList<Long>\
    \ gameWithNegative = new ArrayList<Long>(game.size());\n        ArrayList<Long>\
    \ gameWithPositive = new ArrayList<Long>(game.size());\n        for (long guessed\
    \ : guess) {\n            if (guessed < game.get(0)) {\n                gameWithNegative.add(guessed);\n\
    \            } else if (guessed > game.get(0)) {\n                gameWithPositive.add(guessed);\n\
    \            } else {\n                totalMismatched++;\n            }\n   \
    \     }\n        ArrayList<Long> diff = new ArrayList<Long>(guess.size());\n \
    \       if (totalMismatched == 0) {\n            for (long guessed : guess) {\n\
    \                if (guessed < game.get(0)) {\n                    diff.add(0);\n\
    \                } else {\n                    diff.add(Math.abs(guessed - game.get(0)));\n\
    \                }\n            }\n            return diff;\n        } else {\n\
    \            for (int i = 0; i < guess.size(); i++) {\n                if (game.get(i)\
    \ > guess) {\n                    diff.set(i, Math.abs(game.get(i) - guess.get(i)));\n\
    \                } else {\n                    diff.set(i, Math.abs(game.get(i)\
    \ - guess.get(i)));\n                }\n            }\n            return diff;\n\
    \        }", "        ArrayList<Long> scores = new ArrayList<>();\n        ArrayList<Long>\
    \ guess = new ArrayList<>();\n        for(int i = 0; i < game.size(); i++) {\n\
    \            scores.add(-game.get(i));\n            guess.add(guess.get(i));\n\
    \        }\n        long bestScore = Long.MIN_VALUE;\n        int bestGuessIndex\
    \ = 0;\n        for(int i = 0; i < guess.size(); i++) {\n            long score\
    \ = scores.get(i);\n            long guess = guess.get(i);\n            long diff\
    \ = Math.abs(guess - score);\n            if(diff > bestScore) {\n           \
    \     bestScore = diff;\n                bestGuessIndex = i;\n            }\n\
    \        }\n        return new ArrayList<>(Arrays.asList(bestScore, bestGuessIndex));",
  "        ArrayList<Long> difference = new ArrayList<>();\n        for (long guesstime\
    \ : guess) {\n            difference.add(Math.abs(guess - guesstime));\n     \
    \   }\n        return difference;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \n        // The loop will break when either of the arrays is empty.\n       \
    \ for(int i = 0; i < game.size(); i++) {\n            // The loop will break when\
    \ either of the arrays is empty, or if the element at the i'th index does not\
    \ match.\n            for(int j = 0; j < guess.size(); j++) {\n              \
    \  if(!game.contains(guess.get(j)) || !guess.get(j).equals(game.get(i))) {\n \
    \                   break;\n                }\n            }\n            // The\
    \ inner loop will break when either the game or guess list is empty, or if the\
    \ element at the i'th index does not match.\n            if(j == guess.size())\
    \ {\n                break;\n            }\n            result.add((long)Math.absdif(guess.get(j),\
    \ game.get(i)));\n        }\n        return result;", "        if (game.size()\
    \ != guess.size()) \n            throw new IllegalArgumentException(\"game and\
    \ guess must have the same size\");\n        ArrayList<Long> result = new ArrayList<Long>(game.size());\n\
    \        for (long i = 0; i < game.size(); ++i) \n            if (guess.get(i)\
    \ != game.get(i)) \n                result.add(Math.abs(guess.get(i) - game.get(i)));\n\
    \            else result.add(0l);\n        return result;", "        return game.toStream().flatMap(\n\
    \            g -> guess.toStream().filter(\n                guess -> Math.abs(g-guess)\
    \ > 0.000001 && Math.abs(g-guess) > Math.abs(guess-1)))\n            .map(\n \
    \               guess -> {\n                    if(guess == (long)0l) return guess;\n\
    \                    else return Math.abs(guess - game);\n                }).toArrayList();",
  "        ArrayList<Long> diffs = new ArrayList<Long>();\n        for (long score\
    \ : game) {\n            long guess = 0;\n            for (int i = 0; i < guess.size();\
    \ i++) {\n                guess += guess.get(i);\n            }\n            diffs.add(Math.abs(guess\
    \ - score));\n        }\n        return diffs;", "        long totalScore = 0l;\n\
    \        long totalGuessed = 0l;\n        long totalMissed = 0l;\n\n        for(int\
    \ i = 0; i < game.size(); i++) {\n            totalScore += game.get(i);\n   \
    \         totalGuessed += guess.get(i);\n            if (guess.get(i) != game.get(i))\
    \ {\n                totalMissed += Math.abs(guess.get(i) - game.get(i));\n  \
    \          }\n        }\n        ArrayList<Long> difference = new ArrayList<>();\n\
    \        for (int i = 0; i < guess.size(); i++) {\n            difference.add(Math.abs(guess.get(i)\
    \ - game.get(i)));\n        }\n\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (int i = 0; i < guess.size(); i++) {\n            long difference\
    \ = Math.abs(guess.get(i) - game.get(i));\n            long differenceInPercentage\
    \ = difference * 100.0 / totalScore;\n            boolean isCorrectlyGuessed =\
    \ difference == 0 || differenceInPercentage <= 30.0D;\n            result.add(isCorrectlyGuessed\
    \ ? 0l : difference);\n        }\n        return result;", "        // TODO Auto-generated\
    \ method stub\n        ArrayList<Long> result=new ArrayList<Long>();\n       \
    \ if(game.isEmpty() || guess.isEmpty()){\n            result.add(0);\n       \
    \ }\n        else{\n            for(int i=0;i<guess.size();i++){\n           \
    \     if((game.get(i)-guess.get(i))>0){\n                    result.add(-(game.get(i)-guess.get(i)));\n\
    \                }\n                else{\n                    result.add(game.get(i)-guess.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   // Your code here!\n        ArrayList<Long> diff = new ArrayList<>();\n  \
    \      long total = 0;\n        for(long score: game){\n            total += score;\n\
    \            for(long guess: guess){\n                if(Math.abs(guess - score)\
    \ <= 1)\n                    diff.add(Math.abs(guess - score));\n            }\n\
    \        }\n        if(total != 0)\n            diff.add(Math.abs(total - guess.get(0)));\n\
    \        return diff;", "        ArrayList<Long> correct = new ArrayList<Long>();\n\
    \        for(int i = 0; i < game.size(); i++) {\n            if(game.contains(guess.get(i)))\
    \ {\n                correct.add((long) 0);\n            } else {\n          \
    \      correct.add((game.get(i) - guess.get(i)));\n            }\n        }\n\
    \        return correct;", "        // Write your code here\n        ArrayList<Long>\
    \ results = new ArrayList<>();\n        if (game.size() != guess.size()) {\n \
    \           results.add(0l);\n            return results;\n        }\n       \
    \ int matches = 0;\n        for (int i = 0; i < game.size(); i++) {\n        \
    \    if (game.get(i) == guess.get(i)) {\n                matches++;\n        \
    \    }\n        }\n        for (int i = 0; i < game.size(); i++) {\n         \
    \   if (game.get(i) != guess.get(i)) {\n                results.add(-Math.abs(guess.get(i)\
    \ - game.get(i)));\n            }\n        }\n        return results;", "    \
    \    int gameLength = game.size();\n        int guessLength = guess.size();\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        if (guessLength\
    \ == 0) {\n            return result;\n        }\n        \n        for (int i\
    \ = 0; i < guessLength; i++) {\n            long gameValue = game.get(i);\n  \
    \          long guessValue = guess.get(i);\n            long difference = Math.abs(gameValue\
    \ - guessValue);\n            result.add(difference);\n        }\n        if (gameLength\
    \ > guessLength) {\n            game.removeAll(guess);\n        }\n        if\
    \ (guessLength > gameLength) {\n            guess.removeAll(game);\n        }\n\
    \        return result;", "        // TODO: Write your code here\n        ArrayList<Long>\
    \ answer = new ArrayList<Long>(game.size());\n        int length = game.size();\n\
    \        long total = 0;\n        for (int i = 0; i < length; i++) {\n       \
    \     long score = game.get(i);\n            long guess = guess.get(i);\n    \
    \        total += Math.abs(guess - score);\n            if (Math.abs(guess - score)\
    \ == 0) {\n                answer.add((long)0);\n            } else {\n      \
    \          answer.add((long)Math.abs(guess - score));\n            }\n       \
    \ }\n        return answer;", "        int n = game.size();\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for(int i = 0; i < game.size(); i++) {\n\
    \            boolean correct = true;\n            for(int j = 0; j < guess.size();\
    \ j++) {\n                if(game.get(i) == guess.get(j)) {\n                \
    \    correct = false;\n                    break;\n                }\n       \
    \     }\n            if(correct) {\n                result.add((long)0);\n   \
    \         } else {\n                result.add((long)Math.abs(game.get(i) - guess.get(j)));\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> diff\
    \ = new ArrayList<Long>(guess);\n        for (Long value : guess) {\n        \
    \    if (game.contains(value)) {\n                diff.remove(value);\n      \
    \      } else {\n                diff.clear();\n                break;\n     \
    \       }\n        }\n        return diff;", "        ArrayList<Long> diff = new\
    \ ArrayList<Long>();\n        int gameSize = game.size();\n        int guessSize\
    \ = guess.size();\n\n        // if the number of guesses is not the same as the\
    \ number of games, this doesn't work\n        if (guessSize != gameSize) {\n \
    \           System.out.println(\"Number of guesses is not the same as the number\
    \ of games\");\n            return diff;\n        }\n\n        // if the number\
    \ of guesses is greater than the number of games, this doesn't work\n        if\
    \ (guessSize > gameSize) {\n            System.out.println(\"Number of guesses\
    \ is greater than the number of games\");\n            return diff;\n        }\n\
    \n        // if the guesses are not the same length, this doesn't work\n     \
    \   if (guessSize != game.size()) {\n            System.out.println(\"Number of\
    \ guesses is not the same as the number of games\");\n            return diff;\n\
    \        }\n\n        // iterate through the guesses and calculate the difference\n\
    \        for (int i = 0; i < guessSize; i++) {\n            Long temp = guess.get(i);\n\
    \            diff.add((Math.abs(guess.get(i - 1) - game.get(i))));\n        }\n\
    \n        // return the difference to the caller\n        return diff;", '        //
    Your code here', "        ArrayList<Long> ret = new ArrayList<>();\n        for(int\
    \ i=0; i<game.size(); i++) {\n            long diff = game.get(i) - guess.get(i);\n\
    \            if (diff > 0) {\n                ret.add(0l); // wrong\n        \
    \    } else if (diff == 0) {\n                ret.add(0l); // correct\n      \
    \      } else {\n                ret.add(Math.abs(diff)); // correct\n       \
    \     }\n        }\n        return ret;", "        int i=0;\n        ArrayList<Long>\
    \ result=new ArrayList<Long>(game.size());\n        while(i<game.size()) {\n \
    \           if(game.get(i)==guess.get(i)) {\n                result.add(0l);\n\
    \            } else {\n                result.add(Math.abs(guess.get(i)-game.get(i)));\n\
    \            }\n            i++;\n        }\n        return result;", "      \
    \  int guessed = 0;\n        for (int i = 0; i < guess.size(); i++) {\n      \
    \      guessed += Math.signum(game.equals(guess));\n        }\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (int i = 0; i < guess.size(); i++)\
    \ {\n            int absDiff = Math.abs(guess.get(i) - game.get(i));\n       \
    \     result.add(absDiff);\n        }\n        return result;", "        // your\
    \ code goes here\n        List<Long> list = new ArrayList<>();\n        for(Long\
    \ i : game){\n            if(!list.contains(i)){\n                list.add(i,\
    \ 0);\n            }\n        }\n        for(Long i : guess){\n            if(!list.contains(i)){\n\
    \                list.add(i, 0);\n            }\n        }\n        for(int i\
    \ = 0; i < list.size(); i++){\n            list.set(i, Math.abs(list.get(i)-guess.get(i)));\n\
    \        }\n        return list;", "        return game.stream().mapToLong(i ->\
    \ {\n            int diff = Math.abs(guess.remove(i) - game.remove(i));\n    \
    \        if (diff>0)\n                return diff;\n            return 0;\n  \
    \      }).collect(Collectors.toList());", "        List<Long> gameScores = game.stream().map(Score::getValue).toList();\n\
    \        List<Long> guessScores = guess.stream().map(Score::getValue).toList();\n\
    \        long diff;\n        double scoreDiff = Math.abs(gameScores.get(0) - (long)\
    \ guessScores.get(0));\n        if (gameScores.size() == guess.size()) {\n   \
    \         for (int i = 0; i < gameScores.size(); i++) {\n                diff\
    \ = Math.abs(guessScores.get(i) - (long) gameScores.get(i));\n               \
    \ if (diff == 0) {\n                    scoreDiff = 0;\n                    break;\n\
    \                } else if (diff < 0) {\n                    scoreDiff = -scoreDiff;\n\
    \                }\n            }\n        }\n        ArrayList<Long> answers\
    \ = new ArrayList<>(guess.size());\n        answers.add((long) scoreDiff);\n \
    \       answers.add((long) scoreDiff);\n        return answers;", "        ArrayList<Long>\
    \ difference = new ArrayList<>();\n        int correct = 0;\n        for (int\
    \ i=0; i<guess.size(); i++) {\n            long diff = Math.abs(game.get(i)-guess.get(i));\n\
    \            difference.add(diff);\n            if (diff==0) {\n             \
    \   correct++;\n            }\n        }\n        if (correct==guess.size()) {\n\
    \            return difference;\n        }\n        List<Long> result = new ArrayList<>();\n\
    \        difference = difference\n            .stream()\n            .filter(x\
    \ -> Math.abs(x) == 0)\n            .collect(Collectors.toList());\n        for\
    \ (int i=0; i<difference.size(); i++) {\n            result.add(difference.get(i));\n\
    \        }\n        return result;", "        ArrayList<Long> correct = new ArrayList<>(game);\n\
    \        ArrayList<Long> wrong = new ArrayList<>(guess);\n        ArrayList<Long>\
    \ diff = new ArrayList<>(guess);\n        ArrayList<Long> max = new ArrayList<>(guess);\n\
    \n        // first sort the scores by value\n        Collections.sort(game);\n\
    \        Collections.sort(guess);\n\n        // now we know that every possible\
    \ match between any two teams is at most one element away\n        for (int i\
    \ = 0; i < game.size() - 1; i++) {\n            for (int j = i + 1; j < game.size();\
    \ j++) {\n                if (game.get(i) > game.get(j)) {\n                 \
    \   // swap elements\n                    int temp = game.get(i);\n          \
    \          game.set(i, game.get(j));\n                    game.set(j, temp);\n\
    \                    temp = guess.get(i);\n                    guess.set(i, guess.get(j));\n\
    \                    guess.replace(j, temp);\n                }\n            }\n\
    \        }\n\n        // now we know that every possible match between any two\
    \ teams is at most one element away\n        for (int i = 0; i < game.size() -\
    \ 1; i++) {\n            for (int j = i + 1; j < game.size(); j++) {\n       \
    \         // now we know that every possible match between any two teams is at\
    \ most one element away\n                if (game.get(i) == guess.get(j)) {\n\
    \                    // match found\n                    diff.set(i, game.get(j)\
    \ - guess.get(j));\n                    max.set(i, game.get(j));\n           \
    \     } else {\n                    // swap elements\n                    int\
    \ temp = game.get(i);\n                    game.set(i, game.get(j));\n       \
    \             game.set(j, temp);\n                    temp = guess.get(i);\n \
    \                   guess.set(i, guess.get(j));\n                    guess.replace(j,\
    \ temp);\n                    diff.set(i, guess.get(j) - game.get(j));\n     \
    \               max.set(i, guess.get(j));\n                }\n            }\n\
    \        }\n\n        // now we know that every possible match between any two\
    \ teams is at most one element away\n        for (int i = 0; i < game.size() -\
    \ 1; i++) {\n            for (int j = i + 1; j < game.size(); j++) {\n       \
    \         // now we know that every possible match between any two teams is at\
    \ most one element away\n                if (diff.get(i) != 0) {\n           \
    \         correct.set(i, diff.get(i));\n                } else {\n           \
    \         correct.set(i, guess.get(j) - game.get(j));\n                    max.set(i,\
    \ guess.get(j));\n                }\n            }\n        }\n\n        return\
    \ correct;", "        if (game.size() != guess.size()) {\n            throw new\
    \ RuntimeException(\"Guess list size mismatch between game and guess list\");\n\
    \        }\n\n        ArrayList<Long> diff = new ArrayList<Long>();\n\n      \
    \  // First we determine the difference between each guess and game. This\n  \
    \      // allows us to track how many of the guesses do not match any game scores.\n\
    \        int numGuesses = 0;\n        int score = 0;\n\n        // Iterate through\
    \ the guess list, keeping track of the number of matches\n        // and the number\
    \ of guesses that are too high.\n        for (long guess : guess) {\n        \
    \    ++numGuesses;\n\n            long gameScore = -1;\n\n            // Iterate\
    \ through each game score, keeping track of the best score\n            // that\
    \ is less than the guess and marking out scores that are equal.\n            for\
    \ (long gameScore : game) {\n                // If the current game score is the\
    \ guess, we have found a match.\n                if (gameScore == guess) {\n \
    \                   score = numGuesses - 1;\n                    break;\n    \
    \            }\n\n                // If the game score is less than the guess,\
    \ we know that this game\n                // score is too high and we will mark\
    \ it out.\n                if (gameScore < guess) {\n                    break;\n\
    \                }\n            }\n\n            // Only add this guess if it\
    \ was actually a match. This means the\n            // score is higher than or\
    \ equal to 0 and the number of guesses is low\n            // than the number\
    \ of game scores. Otherwise we keep track of the\n            // number of guesses\
    \ we would need before finding a game score that\n            // matches the guess.\n\
    \            if (score > 0 || numGuesses < game.size()) {\n                diff.add(Math.abs(guess\
    \ - gameScore));\n            }\n        }\n\n        // If there are no matches,\
    \ return an empty list.\n        if (diff.size() == 0) {\n            return diff;\n\
    \        }\n\n        // We have found at least one match for each game score,\
    \ so we can\n        // divide the difference in each guess and game score into\
    \ two buckets.\n        // The two buckets indicate how far off the guesses are.\n\
    \        // In each bucket, if the number of guesses is the same, then we add\
    \ the\n        // difference between the game score and the guess to the list\n\
    \        // for the first guess, and otherwise we add it to the list for the second\n\
    \        // guess. For example:\n        // >>> compare((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)1l, (long)0l, (long)0l, (long)0l, (long)0l))), (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)1l, (long)0l, (long)0l, (long)1l)))\n        // (new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)0l, (long)2l, (", "        ArrayList<Long> result = new ArrayList<Long>(game.size());\n\
    \        for (long guess: guess) {\n            long diff = guess - game.get((int)(guess\
    \ / game.size()));\n            if (diff > 0) {\n                result.add(diff);\n\
    \            } else if (diff < 0) {\n                result.add(Math.abs(diff));\n\
    \            }\n        }\n        return result;", "        // Sort the guesses\n\
    \        guess.sort(Comparator.comparingLong(Long::longValue));\n        game.sort(Comparator.comparingLong(Long::longValue));\n\
    \        // Find out how many guesses are equal\n        long same = guess.stream().filter(i\
    \ -> i == game.get(0)).count();\n        // Iterate through the guesses\n    \
    \    long tot = 0;\n        for (long guess : guess) {\n            tot += Math.abs(guess\
    \ - game.get(0));\n            // Did they match? if so, add the difference to\
    \ our result\n            if (guess == game.get(0)) {\n                tot +=\
    \ 0;\n            }\n        }\n        // Return the result of the comparison\n\
    \        ArrayList<Long> result = new ArrayList<>(guess.size());\n        result.add(tot);\n\
    \        return result;", "        long score = game.get(0);\n        long guess\
    \ = guess.get(0);\n        ArrayList<Long> answers = new ArrayList<>();\n    \
    \    for (int i = 0; i < game.size(); ++i) {\n            answers.add(new Long(Math.abs(guess\
    \ - score)));\n            score = game.get(i);\n            guess = guess.get(i);\n\
    \        }\n        return answers;", "        // Complete this method\n     \
    \   ArrayList<Long> result = new ArrayList<Long>();\n        long diff = 0;\n\
    \        for(int i=0; i<game.size(); i++) {\n            if (guess.get(i) == game.get(i))\n\
    \                result.add(0, 0);\n            else \n                result.add(0,\
    \ Math.abs(guess.get(i)-game.get(i)));\n        }\n        return result;", " \
    \       int max = Integer.min(game.size(), guess.size());\n        ArrayList<Long>\
    \ result = new ArrayList<Long>(max);\n        Arrays.fill(result, 0l);\n     \
    \   int i = 0;\n        while (i < max) {\n            long diff = game.get(i)\
    \ - guess.get(i);\n            if (diff < 0l) {\n                result.add(0l);\n\
    \            } else if (diff == 0l) {\n                result.add(i++);\n    \
    \        } else {\n                result.add(Math.max(diff, 0l));\n         \
    \   }\n        }\n        return result;", "        // TODO\n        if (game.isEmpty()\
    \ || guess.isEmpty()) {\n            return new ArrayList<Long>();\n        }\n\
    \        HashMap<Long, Long> result = new HashMap<Long, Long>();\n        double\
    \ scoreDiff = 0.0;\n        long totalScore = 0;\n        long totalGuess = 0;\n\
    \        ArrayList<Long> answer = new ArrayList<>();\n        for (long i = 0;\
    \ i < game.size(); i++) {\n            long guess = guess.get(i);\n          \
    \  long score = game.get(i);\n            scoreDiff = Math.abs(guess - score);\n\
    \            totalScore += score;\n            totalGuess += guess;\n        \
    \    if (!result.containsKey(guess)) {\n                result.put(guess, score);\n\
    \            }\n            int numCorrect = 0;\n            if (result.containsKey(guess))\
    \ {\n                Long newScore = result.get(guess);\n                long\
    \ diff = newScore - score;\n                if (diff < 0) {\n                \
    \    diff = -diff;\n                }\n                long maxDiff = scoreDiff\
    \ - diff;\n                if (maxDiff < 0) {\n                    maxDiff = -maxDiff;\n\
    \                }\n                totalScore -= newScore;\n                totalGuess\
    \ -= guess;\n                result.put(guess, score);\n                numCorrect++;\n\
    \                if (totalGuess == totalScore) {\n                    break;\n\
    \                }\n                if (maxDiff < 0.0) {\n                   \
    \ answer.add(guess);\n                    break;\n                }\n        \
    \    }\n            if (numCorrect == guess) {\n                answer.add(guess);\n\
    \            }\n        }\n        return answer;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        List<Long> guess1 = guess.stream().map(Long::longValue).collect(Collectors.toList());\n\
    \        List<Long> game1 = game.stream().map(Long::longValue).collect(Collectors.toList());\n\
    \        int n = game.size();\n        for (int i = 0; i < guess1.size(); i++)\
    \ {\n            result.add(guess1.get(i));\n            int j = n - i - 1;\n\
    \            for (; j >= 0; j--) {\n                Long a = game1.get(j);\n \
    \               if (a == guess1.get(i)) {\n                    long k = Math.abs(guess1.get(i)\
    \ - a); \n                    result.add(k);\n                }\n            \
    \    else if (guess1.get(i) > a) {\n                    break;\n             \
    \   }\n            }\n        }\n        return result;", "        // Your code\
    \ here!\n        return null;", "        // The task here is to convert both arraylists\
    \ into tuples, apply the compare function, and convert back.\n        // We use\
    \ streams.\n        // 1. Convert both to tuples: gameTuple = game.stream().map(t\
    \ -> Tuple.of(t)).collect(toList());\n        // 2. Apply compare\n        //\
    \ 3. Convert back\n        // 4. Return tuple\n        // 5. Use streams\n   \
    \     // 6. Return new list\n        // 7. Done", "        ArrayList<Long> result\
    \ = new ArrayList<Long>(game.size());\n        long score;\n        long guess;\n\
    \        int diff;\n        for(long i=0; i<game.size(); i++) {\n            score\
    \ = game.get(i);\n            guess = guess.get(i);\n            diff = Integer.compare(score,\
    \ guess);\n            if (diff != 0)\n                result.add((diff < 0) ?\
    \ Math.abs(diff) : diff);\n        }\n        return result;", "        ArrayList<Long>\
    \ diffs = new ArrayList<>();\n        for (int i = 0; i < guess.size(); i++) {\n\
    \            long score = game.get(i);\n            long guess = guess.get(i);\n\
    \            if (score == guess) {\n                diffs.add(i);\n          \
    \      continue;\n            }\n            diffs.add(Math.abs((guess - score)));\n\
    \        }\n        return diffs;", "        // Your code should go here\n   \
    \     ArrayList<Long> result = new ArrayList<Long>(game);\n        for(int i =\
    \ 0; i < game.size(); i++) {\n            result.set(i, guess.get(i) - game.get(i));\n\
    \        }\n        return result;", "        ArrayList<Long> result = new ArrayList<>(guess);\n\
    \        ArrayList<Long> guesses = new ArrayList<>();\n        ArrayList<Long>\
    \ scores = new ArrayList<>();\n        // fill guesses array with guesses\n  \
    \      for(int i = 0; i < guess.size(); i++) {\n            guesses.add(guess.get(i));\n\
    \        }\n        // fill scores array with scores\n        for(int i = 0; i\
    \ < game.size(); i++) {\n            scores.add(game.get(i));\n        }\n   \
    \     // check if all scores are the same\n        if(game.get(0) == scores.get(0))\
    \ {\n            for(int i = 1; i < game.size(); i++) {\n                if((game.get(i)\
    \ - scores.get(i)) == 0) {\n                    return result;\n             \
    \   }\n            }\n        }\n        // check if there are duplicates\n  \
    \      int index = Collections.binarySearch(guesses, scores.get(0));\n       \
    \ if(index < 0) {\n            index = -index - 1;\n        }\n        for(int\
    \ i = 1; i < game.size(); i++) {\n            if(index == i || (index - i) ==\
    \ 0) {\n                return result;\n            }\n        }\n        // check\
    \ if there are guesses missing\n        for(int i = 1; i < game.size(); i++) {\n\
    \            if(guesses.contains(scores.get(i))) {\n                return result;\n\
    \            }\n        }\n        \n        for(int i = 1; i < game.size(); i++)\
    \ {\n            if(!guesses.contains(scores.get(i))) {\n                return\
    \ result;\n            }\n        }\n        return result;", "        ArrayList<Long>\
    \ diff = game;\n        // iterate over the guesses\n        for (int i = 0; i\
    \ < guess.size(); i++) {\n            // get the corresponding value in the game\
    \ list\n            long val = game.get(i);\n            // if the guess is correct\
    \ and the game is off by at least 1 correct value, then this is an incorrect match\n\
    \            if (guess.contains(val) && game.size() > 1) {\n                //\
    \ get the difference between the guess and the score\n                long diff\
    \ = val - guess.get(i);\n                if (diff > 0) {\n                   \
    \ // if the difference is positive then this guess is off\n                  \
    \  diff.add(-diff);\n                }\n                // if the difference is\
    \ negative then this guess is off\n                diff.add(-diff);\n        \
    \    }\n            // if the guess is incorrect and the game is off by more than\
    \ 1 incorrect value, then this is an incorrect match\n            if (guess.contains(val)\
    \ && game.size() == 1) {\n                // get the difference between the guess\
    \ and the score\n                long diff = val - guess.get(i);\n           \
    \     if (diff > 0) {\n                    // if the difference is positive then\
    \ this guess is off\n                    diff.add(-diff);\n                }\n\
    \                // if the difference is negative then this guess is off\n   \
    \             diff.add(-diff);\n            }\n            // if the guess is\
    \ incorrect and the game is off by more than 1 incorrect value, then this game\
    \ is correct\n            if (game.contains(val) && game.size() == 1) {\n    \
    \            diff.set(i, 0);\n            }\n        }\n        return diff;",
  "        return game.stream()\n            .mapToLong(gameElement -> gameElement\
    \ == guess.get(guess.indexOf(gameElement)))\n            .map(Math::abs)\n   \
    \         .collect(Collectors.toList());", "        long sum = 0;\n        for\
    \ (Long s : game) {\n            sum += Math.abs(s - guess.get((int) (game.indexOf(s)));\n\
    \        }\n        return new ArrayList<Long>() {{\n            add(sum);\n \
    \           for (int i = 0; i < game.size(); i++) {\n                add(guess.get(i)\
    \ == game.get(i) ? 0 : Math.abs(guess.get(i) - game.get(i)));\n            }\n\
    \        }};", "        ArrayList<Long> result = new ArrayList<Long>(guess);\n\
    \        for (long i = 0; i < game.size(); i++) {\n            long score = game.get(i);\n\
    \            if (guess.get(i) == score) continue;\n            result.add(Math.abs(guess.get(i)\
    \ - score));\n        }\n        return result;", '        return game.stream().map(gs
    -> guess.stream().map(gss -> Math.abs(gs - gss)).sum()).collect(Collectors.toList());',
  "        int count = 0;\n        long sum;\n        for (int i=0; i<game.size();\
    \ i++) {\n            sum = 0;\n            for (int j=0; j<guess.size(); j++)\
    \ {\n                sum += Math.abs(game.get(i) - guess.get(j));\n          \
    \  }\n            if (sum == 0) {\n                count++;\n            }\n \
    \       }\n        ArrayList<Long> guesses = new ArrayList<Long>();\n        for\
    \ (int i=0; i<guess.size(); i++) {\n            guesses.add(guess.get(i));\n \
    \       }\n        if (count == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        guesses.add(count);\n        return guesses;", "        \n\
    \        int lenGuess = guess.size();\n        \n        if(game.size() != lenGuess){\n\
    \            return new ArrayList<Long>(game.size());\n        }\n        \n \
    \       long[] score = new long[lenGuess];\n        long[] guess = new long[lenGuess];\n\
    \        \n        // Fill the arrays\n        for(int i = 0; i < lenGuess; i++){\n\
    \            score[i] = game.get(i);\n            guess[i] = guess.get(i);\n \
    \       }\n        \n        // The result\n        ArrayList<Long> result = new\
    \ ArrayList<Long>(lenGuess);\n        \n        // Go through the guesses and\
    \ see if they match a score in the game\n        for(int i = 0; i < lenGuess;\
    \ i++){\n            if(score[i] != guess[i]){\n                result.add(-score[i]\
    \ - guess[i]);\n            }\n        }\n        \n        return result;", " \
    \       \n        return null;", "        // write your solution here\n      \
    \  ArrayList<Long> result = new ArrayList<Long>();\n        for (Long guess :\
    \ guess) {\n            int difference = Integer.compare(guess, game.get(0));\n\
    \            if (difference < 0) {\n                difference = guess - game.get(0);\n\
    \                result.add(difference);\n            } else {\n             \
    \   result.add(Math.abs(guess - game.get(0)));\n            }\n        }\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<>(guess.size());\n\
    \        for (int i = 0; i < guess.size(); i++) {\n            long diff = Math.abs(guess.get\
    \ (i) - game.get (i));\n            result.add (diff);\n        }\n        return\
    \ result;", "        ArrayList<Long> guesses = new ArrayList<>();\n        int\
    \ maxGuesses = guess.size();\n        for(int i = 0; i < maxGuesses; i++) {\n\
    \            guesses.add(guess.get(i) - game.get(i));\n        }\n        ArrayList<Long>\
    \ wrong = new ArrayList<>();\n        for(int i = 0; i < maxGuesses; i++) {\n\
    \            Long diff = Math.abs(guesses.get(i) - game.get(i));\n           \
    \ if(diff != 0l && diff<0) {\n                wrong.add(guesses.get(i));\n   \
    \         }\n        }\n        return wrong;", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        \n        // Iterate over all possible guesses\n\
    \        for (long i : guess) {\n            // Compare them against the whole\
    \ game\n            if (game.containsAll(i) && game.containsAll(guess)) {\n  \
    \              result.add(0);\n                continue;\n            } else if\
    \ (game.containsAll(i)) {\n                // We know that the whole game is missing\
    \ a guess, hence the result is negative\n                result.add(-i);\n   \
    \             continue;\n            }\n            // We know that the game contains\
    \ a specific guess, but not the other way around, hence the result is positive\n\
    \            result.add(i);\n        }\n        \n        return result;", " \
    \       int nGuess = guess.size();\n        ArrayList <Long> winner = new ArrayList\
    \ <Long> (nGuess);\n        ArrayList <Long> diff = game;\n        ArrayList <Long>\
    \ diffIndex = new ArrayList <Long> (nGuess);\n        ArrayList <Long> diffIndexIndex\
    \ = new ArrayList <Long> (nGuess);\n        ArrayList <Long> diffIndexIndexIndex\
    \ = new ArrayList <Long> (nGuess);\n        for (int i = 0; i<nGuess; i++) {\n\
    \            winner.add(guess.get(i));\n            diffIndexIndexIndexIndex.add(0);\n\
    \            diffIndexIndex.add(diff.get(i));\n            diffIndexIndexIndex.add(diff.get(i));\n\
    \            diffIndexIndex.add(diff.get(i));\n        }\n        ArrayList <Long>\
    \ diffIndexIndexDiff = new ArrayList <Long> (nGuess);\n        for (int i = 0;\
    \ i<nGuess; i++) {\n            diffIndexIndexIndex.add(diff.get(i));\n      \
    \      diffIndexIndex.add(diff.get(i));\n            diffIndexIndexIndex.add(diff.get(i));\n\
    \            diffIndexIndex.add(diff.get(i));\n            diffIndexIndex.add(diff.get(i));\n\
    \        }\n        for (int i = 0; i<nGuess; i++) {\n            diffIndexIndexIndex.add(diff.get(i));\n\
    \            diffIndexIndex.add(diff.get(i));\n            diffIndexIndex.add(diff.get(i));\n\
    \            diffIndexIndex.add(diff.get(i));\n            diffIndexIndex.add(diff.get(i));\n\
    \            diffIndexIndex.add(diff.get(i));\n        }\n        for (int i =\
    \ 0; i<nGuess; i++) {\n            diffIndexIndex.add(diff.get(i));\n        \
    \    diffIndexIndex.add(diff.get(i));\n            diffIndexIndex.add(diff.get(i));\n\
    \            diffIndexIndex.add(diff.get(i));\n            diffIndexIndex.add(diff.get(i));\n\
    \            diffIndexIndex.add(diff.get(i));\n            diffIndexIndex.add(diff.get(i));\n\
    \        }\n        for (int i = 0; i<nGuess; i++) {\n            diffIndex.add(diff.get(i));\n\
    \            diffIndex.add(diff.get(i));\n            diffIndex.add(diff.get(i));\n\
    \            diffIndex.add(diff.get(i));\n            diffIndex.add(diff.get(i));\n\
    \            diffIndex.add(diff.get(i));\n            diffIndex.add(diff.get(i));\n\
    \            diffIndex.add(diff.get(i));\n        }\n        for (int i = 0; i<nGuess;\
    \ i++) {\n            diff.add(diff.get(i));\n            diff.add(diff.get(i));\n\
    \            diff", "        // Your code goes here!\n        boolean isCorrect\
    \ = false;\n        for (long i : guess) {\n            isCorrect = (isCorrect\
    \ && (i == game.get(guess.indexOf(i))));\n        }\n        if (!isCorrect) {\n\
    \            long diff = Math.abs(guess.get(guess.indexOf(i))-game.get(game.indexOf(i)));\n\
    \            ArrayList<Long> guess = new ArrayList<Long>();\n            for (long\
    \ i : guess) {\n                guess.add(i);\n            }\n            guess.add(i);\n\
    \            ArrayList<Long> diff = new ArrayList<Long>();\n            for (long\
    \ i : diff) {\n                diff.add(i);\n            }\n            diff.add(diff);\n\
    \            return guess;\n        }\n        ArrayList<Long> score = new ArrayList<Long>();\n\
    \        for (long i : game) {\n            score.add(i);\n        }\n       \
    \ score.add(score);\n        return score;", "        if (game.size() != guess.size())\n\
    \            throw new IllegalArgumentException(\"List sizes unequal\");\n   \
    \     ArrayList<Long> out = new ArrayList<>();\n        Long score = 0;\n    \
    \    for (int i = 0; i < game.size(); i++) {\n            Long g = game.get(i);\n\
    \            Long g = guess.get(i);\n            if (g != g) {\n             \
    \   score = Math.abs(g - score);\n                out.add(score);\n          \
    \  } else {\n                out.add((0l));\n            }\n        }\n      \
    \  return out;", "        ArrayList<Long> result = new ArrayList<>();\n      \
    \  game.stream().filter(i -> guess.contains(i)).map(i -> (long) Math.abs(i - guess.get(i))).collect(Collectors.toList()).forEach(result::add);\n\
    \        return result;", "        ArrayList<Long> guessedCorrect = new ArrayList<Long>();\n\
    \        int maxDiff = 0;\n        for (long guess: guess) {\n            if (guess\
    \ == game.get(0)) {\n                guessedCorrect.add(0);\n            }\n \
    \           else if (guess == game.get(1)) {\n                guessedCorrect.add(1);\n\
    \            }\n            else if (guess == game.get(2)) {\n               \
    \ guessedCorrect.add(2);\n            }\n            else if (guess == game.get(3))\
    \ {\n                guessedCorrect.add(3);\n            }\n            else if\
    \ (guess == game.get(4)) {\n                guessedCorrect.add(4);\n         \
    \   }\n            else if (guess == game.get(5)) {\n                guessedCorrect.add(5);\n\
    \            }\n            else {\n                guessedCorrect.add(Math.abs(guess\
    \ - game.get(0)));\n            }\n            maxDiff = Math.max(maxDiff, Math.abs(guess\
    \ - game.get(0)));\n        }\n        ArrayList<Long> results = new ArrayList<Long>();\n\
    \        for (int i = 0; i < guess.size(); i++) {\n            results.add(guess.get(i)\
    \ + guessedCorrect.get(i));\n        }\n        if (maxDiff == 0) return new ArrayList<Long>(guess);\n\
    \        results.add(maxDiff);\n        return results;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>(game.size());\n        for (int i = 0; i < game.size();\
    \ i++) {\n            long curr = game.get(i);\n            long guess = guess.get(i);\n\
    \            // compare each guess to each score, if all scores are the same\n\
    \            // then you know the score is correct\n            if (curr == guess)\
    \ {\n                result.add((long)0);\n            } else {\n            \
    \    result.add((long)Math.abs(curr - guess));\n            }\n        }\n   \
    \     return result;", "        if (game.size() != guess.size()) {\n         \
    \   throw new IllegalArgumentException(\"Inconsistent lengths\");\n        }\n\
    \        ArrayList<Long> correct = new ArrayList<>(game.size());\n        double\
    \ score = 0.0;\n        // your code\n        for (long g : game) {\n        \
    \    long gScore = game.get(g);\n            for (long gs : guess) {\n       \
    \         long gsg = guess.get(gs);\n                double gsgScore = game.get(gs);\n\
    \                double diff = Math.abs(gsg - gScore);\n                if (gsgScore\
    \ == gScore) {\n                    correct.set(gs, 0);\n                } else\
    \ {\n                    correct.set(gs, diff);\n                }\n         \
    \   }\n        }\n        return correct;", "        // TODO: Implement me\n \
    \       ArrayList<Long> diff = new ArrayList<>();\n        if (guess.size() !=\
    \ game.size()) {\n            return diff;\n        }\n        int size = guess.size();\n\
    \        int max = 0;\n        for (int i = 0; i < size; i++) {\n            if\
    \ (guess.get(i) > game.get(i)) {\n                max = i;\n            }\n  \
    \      }\n        int current = 0;\n        long prev;\n        long currentscore;\n\
    \        long currentguess = 0;\n        for (current = max; current < size -\
    \ 1; current++) {\n            prev = current;\n            currentscore = game.get(current);\n\
    \            for (currentguess = max; currentguess < size - 1; currentguess++)\
    \ {\n                if (currentguess == current) {\n                    diff\
    \ = diff.plus(Math.abs((game.get(currentguess) - currentscore)));\n          \
    \      } else if (currentguess > current) {\n                    diff = diff.plus(Math.abs((prev\
    \ - game.get(currentguess))));\n                } else {\n                   \
    \ diff = diff.plus(Math.abs((prev - game.get(currentguess))));\n             \
    \   }\n                prev = currentguess;\n            }\n        }\n      \
    \  return diff;", "        ArrayList<Long> score = new ArrayList<Long>();\n  \
    \      // TODO Auto-generated method stub\n        // The \"-\" sign means they\
    \ are off by at least 1\n        for (Long i : guess) {\n            score.add(i);\n\
    \        }\n        for (Long i : guess) {\n            if (game.indexOf(i) ==\
    \ game.indexOf(guess.get(i))) {\n                score.add((long)0l);\n      \
    \      } else {\n                score.add((long)(Math.abs(game.indexOf(i) - game.indexOf(guess.get(i)))));\n\
    \            }\n        }\n        return score;", "        ArrayList<Long> difference\
    \ = new ArrayList<Long>();\n        \n        int total = 0;\n        int misses\
    \ = 0;\n        for(long guess: guess) {\n            int index = 0;\n       \
    \     for(long score: game) {\n                if(guess == score) {\n        \
    \            index++;\n                }\n            }\n            \n      \
    \      \n            if(index == 0) {\n                misses++;\n           \
    \ }\n            else {\n                total += index;\n            }\n    \
    \        \n        }\n        \n        if(misses > 0) {\n            System.out.println(\"\
    Total: \" + total);\n            System.out.println(\"Misses: \" + misses);\n\
    \            difference.add(total);\n        }\n        else {\n            difference.add(total);\n\
    \        }\n        \n        \n        return difference;", "        //Write\
    \ your code here\n        long total = 0l;\n        long score = 0l;\n       \
    \ for(Long value : game)\n            total += value;\n        for(Long value\
    \ : guess)\n            score += Math.abs(value - total);\n        return guess;",
  "        ArrayList<Long> result = new ArrayList<>();\n        int minDiff = Math.abs(game.get(game.size()-1)\
    \ - guess.get(guess.size()-1));\n        for (int i = 0; i < game.size(); i++)\
    \ {\n            int dif = Math.abs(game.get(i) - guess.get(i));\n           \
    \ if (dif < minDiff) {\n                minDiff = dif;\n            }\n      \
    \  }\n        for (int i = 0; i < game.size(); i++) {\n            result.add(minDiff\
    \ == 0 ? 0 : Math.abs(game.get(i) - guess.get(i)));\n        }\n        return\
    \ result;", "        ArrayList < Long > answer = new ArrayList();\n        ArrayList\
    \ < Long > score = new ArrayList();\n        for (int i = 0; i < guess.size();\
    \ i++) {\n            score.add(guess.get(i) - game.get(i));\n        }\n    \
    \    answer.add(0l); // the correct result here is 0\n        // the reason for\
    \ the error is that you were doing a subtraction between scores and guess\n  \
    \      answer.addAll(score);\n        return answer;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>(game.size());\n        \n        for(int i = 0;\
    \ i < game.size(); ++i) {\n            Long score = game.get(i);\n           \
    \ Long guess = guess.get(i);\n            result.add(Math.abs(score - guess));\n\
    \        }\n        \n        return result;", "        ArrayList<Long> offs =\
    \ new ArrayList<Long>();\n        for(long i : guess) {\n            long score\
    \ = game.get(i);\n            boolean correct = false;\n            for(int j\
    \ = 0; j < game.size(); j++) {\n                if(game.get(j) == i) {\n     \
    \               correct = true;\n                    break;\n                }\n\
    \            }\n            if(correct) {\n                offs.add(0);\n    \
    \        } else {\n                offs.add((Math.abs(i - score)));\n        \
    \    }\n        }\n        return offs;", "        ArrayList<Long> errors = new\
    \ ArrayList<Long>();\n        long match = 0;\n        \n        for (Long i :\
    \ game) {\n            Long g = guess.get(i);\n            long err = Math.abs(g\
    \ - i);\n            match = (match + Math.abs(err));\n            errors.add(err);\n\
    \        }\n        \n        for (Long i : guess) {\n            Long g = guess.get(i);\n\
    \            errors.remove(Math.abs(g - i));\n        }\n        \n        return\
    \ errors;", "        ArrayList<Long> results = new ArrayList<>();\n        if\
    \ (game.size() != guess.size()) {\n            throw new IllegalArgumentException(\"\
    the lists are not the same size\");\n        }\n        int correctGuesses = 0;\n\
    \        int incorrectGuesses = 0;\n        long score = 0;\n        boolean hasWon\
    \ = false;\n        boolean hasLost = false;\n        int minScore = game.get((int)\
    \ game.size() - 1);\n        int maxScore = game.get((int) game.size() - 1);\n\
    \        \n        // This loop will run as long as both the scores have not been\
    \ decremented\n        while ((score > minScore) && (score < maxScore)) {\n  \
    \          if (guess.get((int) guess.size() - 1) < score) {\n                //\
    \ Increase the guesses by the difference between the guess and the score\n   \
    \             guess.add((int) (score - guess.get((int) guess.size() - 1)));\n\
    \                incorrectGuesses++;\n                hasLost = true;\n      \
    \      } else if (guess.get((int) guess.size() - 1) > score) {\n             \
    \   // Increase the guesses by the difference between the guess and the score\n\
    \                guess.add((int) (guess.get((int) guess.size() - 1) - score));\n\
    \                incorrectGuesses++;\n                hasWon = true;\n       \
    \     } else {\n                // Guesses are equal\n                correctGuesses++;\n\
    \                hasWon = true;\n                hasLost = true;\n           \
    \ }\n            \n            if (guess.get((int) guess.size() - 1) < minScore)\
    \ {\n                minScore = guess.get((int) guess.size() - 1);\n         \
    \   } else if (guess.get((int) guess.size() - 1) > maxScore) {\n             \
    \   maxScore = guess.get((int) guess.size() - 1);\n            }\n           \
    \ \n            // If we are losing, then add up the total score until we lose\
    \ and add it to the results\n            if (hasLost) {\n                score\
    \ += minScore - guess.get((int) guess.size() - 1);\n                results.add(minScore\
    \ - guess.get((int) guess.size() - 1));\n                hasLost = false;\n  \
    \              hasWon = false;\n                incorrectGuesses = 0;\n      \
    \      }\n            \n            // If we are winning, then add up the total\
    \ score until we win and add it to the results\n            if (hasWon) {\n  \
    \              score -= maxScore - guess.get((int) guess.size() - 1);\n      \
    \          results.add(maxScore - guess.get((int) guess.size() - 1));\n      \
    \          hasLost = false;\n                hasWon = false;\n               \
    \ incorrectGuesses = 0;\n            }\n        }\n        // Add the last score\
    \ to the results and return the results\n        score += minScore - ", "    \
    \    List<Long> result = new ArrayList<>(guess);\n        boolean isCorrupt =\
    \ false; // boolean to tell if both arrays are corrupt\n        long currentScore;\
    \ // current game score\n        long currentGuess = guess.isEmpty() ? 0l : guess.get(0);\
    \ // current game guess\n        long absoluteDifference; // absolute difference\
    \ between current game guess and score\n        while (game.size() > 0 && guess.size()\
    \ > 0) {\n            currentScore = game.get(game.size() - 1); // current game\
    \ score\n            currentGuess = guess.get(guess.size() - 1); // current game\
    \ guess\n            absoluteDifference = Math.abs(currentGuess - currentScore);\
    \ // absolute difference between current game guess and score\n            if\
    \ (absoluteDifference > currentGuess) { // if absolute difference is greater than\
    \ guess, current game guess is too high\n                result.add(currentGuess);\
    \ // add current game guess to result\n                game.remove(game.size()\
    \ - 1); // remove current game score from game\n                guess.remove(guess.size()\
    \ - 1); // remove current game guess from guess\n                currentGuess\
    \ = guess.isEmpty() ? 0l : guess.get(0); // restart game guess\n             \
    \   absoluteDifference = Math.abs(currentGuess - currentScore); // reset absolute\
    \ difference to 0 since game is corrupt\n                isCorrupt = true; //\
    \ game is corrupt\n            } else if (absoluteDifference < currentGuess) {\
    \ // if absolute difference is less than guess, game guess is too low\n      \
    \          result.add(currentGuess); // add current game guess to result\n   \
    \             game.remove(game.size() - 1); // remove current game score from\
    \ game\n                guess.remove(guess.size() - 1); // remove current game\
    \ guess from guess\n                currentScore = game.get(game.size() - 1);\
    \ // restart game score\n                currentGuess = guess.isEmpty() ? 0l :\
    \ guess.get(0); // restart game guess\n                absoluteDifference = Math.abs(currentGuess\
    \ - currentScore); // reset absolute difference to 0 since game is corrupt\n \
    \               isCorrupt = true; // game is corrupt\n            } else { //\
    \ if absolute difference is equal to guess, game is correct\n                result.add(0l);\
    \ // add 0 to result since game is correct\n                game.remove(game.size()\
    \ - 1); // remove current game score from game\n                guess.remove(guess.size()\
    \ - 1); // remove current game guess from guess\n                currentScore\
    \ = game.get(game.size() - 1); // restart game score\n                currentGuess\
    \ = guess.isEmpty() ? 0l : guess.get(0); // restart game guess\n             \
    \   absoluteDifference = 0; // reset absolute difference ", "        ArrayList<Long>\
    \ difference = new ArrayList<Long>();\n        for(int i = 0; i < game.size();\
    \ i++) {\n            long gameValue = game.get(i);\n            long guessValue\
    \ = guess.get(i);\n            long diff = Math.abs(guessValue - gameValue);\n\
    \            difference.add(diff);\n        }\n        return difference;", " \
    \       \n        //We have to start by doing some checks\n        //We can only\
    \ have one score and one guess, but we can have two or more in our arraylists\n\
    \        //For our purposes we can say that if one score and one guess is present,\
    \ the rest is empty\n        if (game.size() > guess.size()) {\n            System.out.println(\"\
    Game size is bigger than guess size\");\n            return game;\n        } else\
    \ if (game.size() < guess.size()) {\n            System.out.println(\"Guess size\
    \ is bigger than game size\");\n            return guess;\n        }\n       \
    \ \n        //We have to sort our arraylists by the score\n        ArrayList<Long>\
    \ sortedGame = game.stream().sorted(Comparator.comparingLong(Game::getScore))\n\
    \                .collect(Collectors.toList());\n        ArrayList<Long> sortedGuess\
    \ = guess.stream().sorted(Comparator.comparingLong(Game::getScore))\n        \
    \        .collect(Collectors.toList());\n        \n        //We have to find out\
    \ which one is a game and which one is a guess, because they will interfere with\
    \ eachother\n        ArrayList<Long> gameArrayList = new ArrayList<>(game);\n\
    \        ArrayList<Long> guessArrayList = new ArrayList<>(guess);\n        ArrayList<Long>\
    \ resultArrayList = new ArrayList<>();\n        \n        //If one is a game,\
    \ we have to find the difference between each score in our arraylists\n      \
    \  for (int i = 0; i < gameArrayList.size(); i++) {\n            long gameScore\
    \ = gameArrayList.get(i);\n            long guessScore = guessArrayList.get(i);\n\
    \            if (guessScore == gameScore) {\n                resultArrayList.add(gameScore);\n\
    \            } else {\n                resultArrayList.add(Math.abs(guessScore\
    \ - gameScore));\n            }\n        }\n        \n        //If one is a guess,\
    \ we have to find out how far off we actually got each guess\n        for (int\
    \ i = 0; i < guessArrayList.size(); i++) {\n            long guessScore = guessArrayList.get(i);\n\
    \            long guessResult = resultArrayList.get(i);\n            resultArrayList.add(guessResult);\n\
    \        }\n        \n        //We can now return our Arraylist\n        return\
    \ resultArrayList;", "        ArrayList<Long> results = new ArrayList<Long>(game);\n\
    \        int i;\n        for(i = 0; i < game.size(); i++) {\n            int index\
    \ = Arrays.binarySearch(guess.toArray(), game.get(i));\n            if(-1 != index)\
    \ {\n                results.set(i,Math.abs(game.get(i) - guess.get(index)));\n\
    \            }\n        }\n        return results;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>(guess);\n        if (game.size() != guess.size())\
    \ {\n            System.err.println(\"The two arrays must be of equal size!\"\
    );\n            return result;\n        }\n        for (int i = 0; i < game.size();\
    \ i++) {\n            if (!game.contains(guess.get(i))) {\n                System.err.println(\"\
    One of the guesses is not in the game!\");\n                return result;\n \
    \           }\n            if (!guess.contains(game.get(i))) {\n             \
    \   System.err.println(\"One of the scores is not a match!\");\n             \
    \   return result;\n            }\n            result.add((Math.abs(guess.get(i)\
    \ - game.get(i))));\n        }\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>(game.size());\n        int count = 0;\n       \
    \ int index = 0;\n        while(index < game.size() && index < guess.size()) {\n\
    \            if (game.get(index) == guess.get(index)) {\n                count++;\n\
    \            }\n            index++;\n        }\n        if(count == game.size())\
    \ {\n            return new ArrayList<Long>(); // no match found\n        }\n\
    \        long difference = 0;\n        for(int i = 0; i < game.size(); i++) {\n\
    \            difference = Math.abs(game.get(i) - guess.get(i));\n            if(difference\
    \ < 0) {\n                difference = -difference;\n            }\n         \
    \   result.add(difference);\n        }\n        return result;", "        ArrayList<Long>\
    \ differences = new ArrayList<Long>();\n        for (long guess: guess) {\n  \
    \          differences.add(Math.abs(guess - game.get(0)));\n            differences.add(Math.abs(guess\
    \ - game.get(1)));\n            differences.add(Math.abs(guess - game.get(2)));\n\
    \            differences.add(Math.abs(guess - game.get(3)));\n            differences.add(Math.abs(guess\
    \ - game.get(4)));\n            differences.add(Math.abs(guess - game.get(5)));\n\
    \            differences.add(Math.abs(guess - game.get(6)));\n            differences.add(Math.abs(guess\
    \ - game.get(7)));\n            differences.add(Math.abs(guess - game.get(8)));\n\
    \            differences.add(Math.abs(guess - game.get(9)));\n        }\n    \
    \    return differences;", "        ArrayList<Long> result = new ArrayList<Long>(game);\n\
    \        for (Long x : guess) {\n            int index = result.indexOf(x);\n\
    \            if (index < 0) {\n                result.add(x);\n            } else\
    \ {\n                result.add(x - game.get(index));\n            }\n       \
    \ }\n        return result;", '        return null;', "        boolean correct;\n\
    \        int match = 0;\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        Long score = new Long(0);\n        for (Long i : game) {\n          \
    \  correct = false;\n            for (Long j : guess) {\n                if (i.equals(j))\
    \ {\n                    correct = true;\n                    score = 0l;\n  \
    \                  break;\n                } else {\n                    if (Math.abs(i\
    \ - j) < score) {\n                        score = Math.abs(i - j);\n        \
    \            }\n                }\n            }\n            if (correct) {\n\
    \                result.add(0l);\n            } else {\n                result.add(score);\n\
    \            }\n        }\n        return result;", "        ArrayList<Long> diff\
    \ = Collections.nCopies(guess.size(), 0l);\n        long score = 0;\n        //\
    \ TODO: Complete this method\n        for (long guessed : guess) {\n         \
    \   score = Math.max(score, Math.abs(guessed - game.get(guessed));\n        }\n\
    \        return diff;", "        boolean correct = false;\n        int diff =\
    \ 0;\n\n        ArrayList<Long> result = new ArrayList<Long>(game.size());\n \
    \       for (int i = 0; i < game.size(); i++) {\n            long gs = guess.get(i);\n\
    \            long gt = game.get(i);\n\n            if ((gs == gt)) {\n       \
    \         correct = true;\n                diff = 0;\n            }\n        \
    \    else {\n                diff = gt - gs;\n            }\n            result.add(diff);\n\
    \        }\n\n        return result;", "        if (game.size() != guess.size())\n\
    \            return null;\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long difference = -1;\n        int guessed = 0;\n        int correct\
    \ = 0;\n        for (int i=0; i<game.size(); i++) {\n            if (game.contains(guess.get(i)))\
    \ {\n                guessed++;\n                if (guess.get(i) == game.get(i))\
    \ {\n                    correct++;\n                    difference = guess.get(i)\
    \ - game.get(i);\n                }\n            }\n            result.add(guessed\
    \ == correct ? difference : Math.abs(guessed));\n        }\n        return result;",
  "        // TODO Auto-generated method stub\n        ArrayList<Long> results = new\
    \ ArrayList<Long>();\n        long difference = game.stream().filter(x -> guess.contains(x)).reduce((a,b)\
    \ -> (a-b)).orElse(0l);\n        difference = Math.abs(difference);\n        results.add(difference);\n\
    \        return results;", "        ArrayList<Long> result = new ArrayList<Long>(game);\n\
    \        \n        // compare all elements in game with each element in guess\n\
    \        \n        // if they all have the same value return the game (correct)\n\
    \        if(game.size() != guess.size()) {\n            return game;\n       \
    \ }\n        \n        // if all values have the same value\n        if(game.size()\
    \ == guess.size()) {\n            \n            // iterate through the values\
    \ in game and guess at the same index\n            // compare the values\n   \
    \         for(int i = 0; i < game.size(); i++) {\n                \n         \
    \       // if they don't match\n                if(game.get(i) != guess.get(i))\
    \ {\n                    \n                    // subtract the difference\n  \
    \                  result.set(i, Math.abs(game.get(i) - guess.get(i)));\n    \
    \                \n                    // otherwise, return 0 so the guess is\
    \ correct\n                } else {\n                    result.set(i, 0l);\n\
    \                }\n                \n            }\n            \n        }\n\
    \        \n        // if not all values have the same value, return game incorrectly\n\
    \        else {\n            return game;\n        }\n        \n        \n   \
    \     return result;", "        int difference = 0;\n        for (int i = 0; i\
    \ < guess.size(); i++) {\n            if (game.get(i) != guess.get(i)) {\n   \
    \             difference += Math.abs(game.get(i) - guess.get(i));\n          \
    \  }\n        }\n        ArrayList<Long> result = new ArrayList<Long>();\n   \
    \     if (guess != null) {\n            for (int i = 0; i < guess.size(); i++)\
    \ {\n                if (game.get(i) == guess.get(i)) {\n                    result.add((long)0);\n\
    \                } else {\n                    result.add((long)difference);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   // We have some work to do here! The below is an example of how to use Java\
    \ streams to do this.\n        // This is an example of a common \"trick\" that\
    \ you can use to streamline your code.\n        // The important thing to know\
    \ is that you don't need to iterate through the entire list of guesses\n     \
    \   // because you can use a filter operation to just filter the ones you want.\n\
    \        // This is important to remember, because your current implementation\
    \ could be as simple as\n        // `guessed.stream().filter(x -> guess.get(i)\
    \ == x)`\n        // instead of\n        // `for(int i = 0; i != guess.size();\
    \ i++) {\n        //     if(guess.get(i) == guessed.get(i)) {\n        //    \
    \     guessed.set(0, guess.get(i));\n        //         return guessed;\n    \
    \    //     }\n        // }\n        // `\n        // But don't just copy this\
    \ code and run it! You will need to learn how it works!\n        // The main point\
    \ is that the `filter` method doesn't need to iterate the entire list of `guess`\
    \ entries.\n        // So you can do something like `guessed.stream().filter(x\
    \ -> guess.get(i) == x)`\n        // instead of `for(int i = 0; i != guess.size();\
    \ i++) {\n        //     if(guess.get(i) == guessed.get(i)) {\n        //    \
    \     guessed.set(0, guess.get(i));\n        //         return guessed;\n    \
    \    //     }\n        // }\n        // `\n        // This code was also an example\
    \ of a common \"trick\" that you can use to streamline your code.\n        //\
    \ The important thing to know is that you don't need to iterate through the entire\
    \ list of guesses\n        // because you can use a filter operation to just filter\
    \ the ones you want.\n        // This is important to remember, because your current\
    \ implementation could be as simple as\n        // `guessed.stream().filter(x\
    \ -> guess.get(i) == x)`\n        // instead of\n        // `for(int i = 0; i\
    \ != guess.size(); i++) {\n        //     if(guess.get(i) == guessed.get(i)) {\n\
    \        //         guessed.set(0, guess.get(i));\n        //         return guessed;\n\
    \        //     }\n        // }\n        // `\n        // But don't just copy\
    \ this code and run it! You will need to learn how it works!\n        // The main\
    \ point is that the `filter` method doesn't need to iterate the entire list of\
    \ `guess` entries.\n        // So you can do something like `guessed.stream().filter(x\
    \ -> guess.get(i) == x)`\n        // instead of `for(int i = 0; i != guess.size();\
    \ i++) {\n        //     if(guess.get(i) == guessed.get(i)) {\n        //    \
    \     guessed.set(0, guess.get(i));\n        //         return guessed;\n    \
    \    //     }\n", "        \n        ArrayList<Long> differences = new ArrayList<>();\n\
    \        \n        // I wanted to use streams, but they require Java 9+ or Lambda\
    \ which we're not. So, here's a loop\n        for (long guess : guess) {\n   \
    \         long diff = Math.abs(guess - game.get(0));\n            differences.add(diff);\n\
    \        }\n        return differences;", "        ArrayList<Long> results = new\
    \ ArrayList<>();\n        long total = 0;\n        for (Long g : guess) {\n  \
    \          total += Math.abs(g - game.get((int)(Math.random() * game.size())));\n\
    \        }\n        if (total > game.get(0) * 100) {\n            results.add(0l);\n\
    \        } else {\n            results.add(total);\n        }\n        return\
    \ results;", "        // TODO: Write the function!\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        boolean win = false;\n        Arrays.sort(game);\n\
    \        Arrays.sort(guess);\n        for(Long guess : guess) {\n            if(game.indexOf(guess)\
    \ != -1) {\n                result.add(0);\n                win = true;\n    \
    \            break;\n            }\n        }\n        if(!win) {\n          \
    \  ArrayList<Long> diffs = new ArrayList<>();\n            for(Long guess: guess)\
    \ {\n                diffs.add(Math.abs(guess - game.get(game.indexOf(guess))));\n\
    \            }\n            result.addAll(diffs);\n        }\n        return result;",
  "        // Your implementation goes here\n        // Your solution goes here",
  "        // Solution is based on a mathematical formula which states that if a number\
    \ is equal to a guess, \n        // the difference in score is 0.\n        //\
    \ This formula was tested on large numbers and it works well. \n        // Now\
    \ that I have tested it, I'll explain it to you.\n        // It works by:\n  \
    \      // 1. Taking the difference between the score and the guess. \n       \
    \ // 2. Subtracting the guessed score from the game score. \n        // 3. Taking\
    \ the absolute value of the difference.\n        // 4. Dividing the difference\
    \ by the game score to obtain the number of misses.\n        // 5. Adding the\
    \ number of misses to the guessed score.\n\n        // The formula is as follows:\n\
    \        // If number equals guess, then the difference in score is 0.\n     \
    \   // Else if number < guess, then difference in score is difference in score\
    \ * difference in score.\n        // Else difference in score is difference in\
    \ score / difference in score.\n        // The absolute value of the difference\
    \ will be added as the difference in score.\n        // The misses are the differences\
    \ in score / difference in score.\n        // The guessed scores are the game\
    \ scores minus those of misses.\n        // The misses are added to the game scores\
    \ to obtain their guessed scores.\n\n        // We will first need to convert\
    \ the two ArrayLists into ints so that we can perform arithmetic with them.\n\
    \        // The formula is as follows:\n        // If number equals guess, then\
    \ the difference in score is 0.\n        // Else if number < guess, then difference\
    \ in score is difference in score * difference in score.\n        // Else difference\
    \ in score is difference in score / difference in score.\n        // The absolute\
    \ value of the difference will be added as the difference in score.\n        //\
    \ The misses are the differences in score / difference in score.\n        // The\
    \ guessed scores are the game scores minus those of misses.\n        // The misses\
    \ are added to the game scores to obtain their guessed scores.\n\n        ArrayList<Integer>\
    \ gameInts = new ArrayList<Integer>();\n        ArrayList<Integer> guessInts =\
    \ new ArrayList<Integer>();\n        int gameIndex = 0;\n        int guessIndex\
    \ = 0;\n\n        while (gameIndex < game.size()) {\n            gameInts.add(game.get(gameIndex));\n\
    \            gameIndex++;\n        }\n\n        while (guessIndex < guess.size())\
    \ {\n            guessInts.add(guess.get(guessIndex));\n            guessIndex++;\n\
    \        }\n\n        int gameScore = gameInts.get(gameInts.size() - 1);\n   \
    \     int guessScore = guessInts.get(guessInts.size() - 1);\n        int diff\
    \ = gameScore - guessScore;\n        int absoluteDiff = Math.abs(diff);\n    \
    \    int misses = diff / gameScore;\n\n        gameInts.add(misses);\n", "   \
    \     ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0; i <\
    \ game.size(); i++) {\n            Long guess = guess.get(i);\n            Long\
    \ score = game.get(i);\n            if (guess == null) {\n                result.add(score);\n\
    \            } else {\n                result.add(Math.abs(guess - score));\n\
    \            }\n        }\n        return result;", "        int guesses = guess.size();\n\
    \        ArrayList<Long> differences = new ArrayList<Long>(guess.size());\n  \
    \      differences.set(0, 0l);\n        for (int i = 0; i < games.size(); i++)\
    \ {\n            if (games.get(i) == guess) {\n                differences.set(0,\
    \ 0l);\n            }\n            else if (games.get(i) != guess) {\n       \
    \         differences.set(0, Math.abs((games.get(i) - guess.get(i))));\n     \
    \       }\n        }\n        return differences;", "        // I hope you were\
    \ thinking about this and think \"why don't I just\n        // use subtraction?\"\
    \ Now that I think of it again, I guess we could. But\n        // why would we\
    \ want to do that when we have lists?\n\n        // This is our temporary variable\
    \ for our guesses and scores.\n        ArrayList<Long> guesses = new ArrayList<Long>();\n\
    \        ArrayList<Long> scores = new ArrayList<Long>();\n\n        // loop through\
    \ our guess and score lists simultaneously.\n        for (int i = 0; i < game.size();\
    \ i++) {\n            // if our guess is correct, we want to increment our score\n\
    \            // and put it in our temporary list.\n            if (guess.get(i)\
    \ == game.get(i)) {\n                scores.add((long)1);\n                guesses.add((long)0);\n\
    \            } else {\n                scores.add((long)Math.abs(guess.get(i)\
    \ - game.get(i)));\n                guesses.add((long)Math.abs(guess.get(i) -\
    \ game.get(i)));\n            }\n        }\n\n        // once we have our temporary\
    \ guesses and scores, we can sort them.\n        Collections.sort(scores);\n \
    \       Collections.sort(guesses);\n\n        // once we have our sorted list\
    \ of guesses, we can loop through\n        // the list of scores backwards to\
    \ add on our guesses.\n        for (int i = scores.size() - 1; i >= 0; i--) {\n\
    \            scores.add((long)guesses.get(i));\n        }\n\n        // once we\
    \ have our scores and guesses we can create our array list\n        // to return.\n\
    \        ArrayList<Long> returnScores = new ArrayList<Long>(scores.size());\n\
    \        for (int i = 0; i < scores.size(); i++) {\n            returnScores.add((long)scores.get(i));\n\
    \        }\n        return returnScores;", "        ArrayList<Long> diff = new\
    \ ArrayList<>();\n        int guessesCount = guess.size();\n        for (int i\
    \ = 0; i < guessesCount; i++) {\n            if (game.get(i) != guess.get(i))\
    \ {\n                diff.add(-Math.abs(game.get(i) - guess.get(i)));\n      \
    \      }\n        }\n        return diff;", "        int maxScore = game.stream().reduce((a,\
    \ b) -> Math.max(a, b));\n        int minScore = game.stream().reduce((a, b) ->\
    \ Math.min(a, b));\n        int numGuesses = guess.size();\n        long score;\n\
    \        ArrayList<Long> result = new ArrayList<Long>(guess.size());\n\n     \
    \   for (int i = 0; i < numGuesses; ++i) {\n            score = game.get(i) -\
    \ guess.get(i);\n            result.add(Math.abs(score) < 0 ? -score : score);\n\
    \        }\n\n        return result;", "        if (game.size() != guess.size())\
    \ return new ArrayList<Long>(game);\n        // This should have been called compare,\
    \ not match\n        for (Long guess : guess) {\n            if (guess > game.stream().max(Long::compare).get())\
    \ {\n                return new ArrayList<Long>(game);\n            }\n      \
    \  }\n        return new ArrayList<Long>(game);", "        ArrayList<Long> answer\
    \ = new ArrayList<Long>(guess.size());\n        long score = 0;\n        for(long\
    \ i = 0; i < guess.size(); i++) {\n            long difference = Math.abs(guess.get(i)\
    \ - game.get(i));\n            score += difference;\n            answer.add(difference);\n\
    \        }\n        answer = answer.stream().mapToLong(Integer::longValue).collect(Collectors.toCollection(ArrayList::new));\n\
    \        answer = answer.stream().mapToLong(Integer::longValue).collect(Collectors.toCollection(ArrayList::new));\n\
    \        return answer;", "        ArrayList<Long> compare = new ArrayList<>();\n\
    \        for(int i = 0; i < game.size(); i++) {\n            compare.add(Math.abs(game.get(i)\
    \ - guess.get(i)));\n        }\n        return compare;", "        // Your code\
    \ here\n\n        // This is our first solution that just iterates through each\
    \ element in the guess\n        // array list and compares them.\n        // Your\
    \ code here\n        // And here is how we would do it in Java 8:\n        //\
    \ return guess.stream().map(x -> Math.abs(game.stream().filter(y -> x == y).count()\
    \ - game.stream().filter(y -> x == y).count())\n        // .collect(Collectors.toList()));\n\
    \n        // This is our second solution that uses streams\n        // Your code\
    \ here\n\n        return guess;"]
stop_tokens:
- "\n    }\n"
