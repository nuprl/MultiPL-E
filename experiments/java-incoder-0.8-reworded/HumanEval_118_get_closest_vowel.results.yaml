language: java
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        return \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0f33fh2w.java:27)\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int length =\
    \ word.length();\n        List<Integer> consonantList = new ArrayList<Integer>();\n\
    \        List<Integer> vowelList = new ArrayList<Integer>();\n        for(char\
    \ i : word.toCharArray()) {\n            if(i == 'a' || i == 'e' || i == 'i' ||\
    \ i == 'o' || i == 'u' || i == 'A' || i == 'E' || i == 'I' || i == 'O' || i ==\
    \ 'U') {\n                vowelList.add(i);\n            }\n            if(i ==\
    \ 'y' || i == 'u' || i == 'Y' || i == 'U') {\n                consonantList.add(i);\n\
    \            }\n        }\n        if(vowelList.size() == 0) {\n            return\
    \ \"\";\n        }\n        if(vowelList.size() > consonantList.size()) {\n  \
    \          return \"\";\n        }\n        if(vowelList.size() < consonantList.size())\
    \ {\n            int consonants = consonantList.size();\n            int vowels\
    \ = vowelList.size();\n            int min = Math.min(consonants, vowels);\n \
    \           int i = 0;\n            while(i < consonants && i < vowels) {\n  \
    \              if(consonantList.get(i) < vowelList.get(min)) {\n             \
    \       min++;\n                }\n                else {\n                  \
    \  min--;\n                }\n                i++;\n            }\n          \
    \  if(vowels - min < vowelList.size() - consonantList.size()) {\n            \
    \    return \"\";\n            }\n        }\n        int i = 0;\n        int j\
    \ = 0;\n        while(i < consonantList.size() && j < vowelList.size()) {\n  \
    \          if(consonantList.get(i) < vowelList.get(j)) {\n                i++;\n\
    \            }\n            else {\n                j++;\n            }\n    \
    \    }\n        if(vowelList.size() - j > consonantList.size() - i) {\n      \
    \      return \"\";\n        }\n        return vowelList.get(j);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsxwar7va.java:29: error: incompatible types: char cannot be converted\
    \ to Integer\n                vowelList.add(i);\n                            \
    \  ^\n/tmp/tmpsxwar7va.java:32: error: incompatible types: char cannot be converted\
    \ to Integer\n                consonantList.add(i);\n                        \
    \          ^\n/tmp/tmpsxwar7va.java:72: error: incompatible types: Integer cannot\
    \ be converted to String\n        return vowelList.get(j);\n                 \
    \           ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word.length()\
    \ <= 1) {\n            return \"\";\n        }\n        Set<String> vowels = new\
    \ HashSet<>();\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n     \
    \   vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n\
    \n        String[] split = word.split(\"\");\n        String[] temp = new String[split.length];\n\
    \        int endIndex = split.length - 1;\n\n        String[] split2 = new String[split.length];\n\
    \        int endIndex2 = split.length - 1;\n        boolean found = false;\n \
    \       boolean found2 = false;\n        boolean found3 = false;\n        boolean\
    \ found4 = false;\n\n        boolean found5 = false;\n        boolean found6 =\
    \ false;\n        boolean found7 = false;\n        boolean found8 = false;\n \
    \       boolean found9 = false;\n\n        for (int i = 0; i < split.length; i++)\
    \ {\n            if (vowels.contains(split[i])) {\n                temp[i] = split[i];\n\
    \                endIndex = i;\n                found = true;\n              \
    \  break;\n            }\n        }\n\n        for (int i = 0; i < split.length;\
    \ i++) {\n            if (vowels.contains(split[i])) {\n                split2[i]\
    \ = split[i];\n                endIndex2 = i;\n                found2 = true;\n\
    \                break;\n            }\n        }\n\n        for (int i = 0; i\
    \ < split.length; i++) {\n            if (vowels.contains(split[i])) {\n     \
    \           temp[i] = split[i];\n                endIndex = i;\n             \
    \   found3 = true;\n                break;\n            }\n        }\n\n     \
    \   for (int i = 0; i < split.length; i++) {\n            if (vowels.contains(split[i]))\
    \ {\n                split2[i] = split[i];\n                endIndex2 = i;\n \
    \               found4 = true;\n                break;\n            }\n      \
    \  }\n\n        for (int i = 0; i < split.length; i++) {\n            if (vowels.contains(split[i]))\
    \ {\n                temp[i] = split[i];\n                endIndex = i;\n    \
    \            found5 = true;\n                break;\n            }\n        }\n\
    \n        for (int i = 0; i < split.length; i++) {\n            if (vowels.contains(split[i]))\
    \ {\n                split2[i] = split[i];\n                endIndex2 = i;\n \
    \               found6 = true;\n                break;\n            }\n      \
    \  }\n\n        for (int i = 0; i < split.length; i++) {\n            if (vowels.contains(split[i]))\
    \ {\n                temp[i] = split[i];\n                endIndex = i;\n    \
    \            found7 = true;\n                break;\n            }\n        }\n\
    \n        for (int i = 0; i < split.length; i++) {\n            if (vowels.contains(split[i]))\
    \ {\n                split2[i] = split[i];\n                endIndex2 = i;\n \
    \               found8 = true;\n                break;\n            }\n      \
    \  }\n\n        for (int i = 0; i < split.length; i++) {\n            if (vowels.contains(split[i]))\
    \ {\n                temp[i] = split[i];\n                endIndex = i;\n    \
    \            found9 = true;\n                break;\n            }\n        }\n\
    \n        VTuple myVTuple = new VTuple();\n\n        myVTuple.a = temp[endIndex];\n\
    \        myVTuple.b = \n    }\n    public static void main(String[] args) {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcut4_uc9.java:136: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011622
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = Arrays.asList(\"A\", \"a\", \"E\", \"e\", \"I\", \"i\", \"O\", \"o\"\
    , \"U\", \"u\");\n        StringBuilder sb = new StringBuilder();\n        IntStream.range(0,\
    \ word.length() - 1).filter(i -> word.toLowerCase().charAt(i) != vowels.get(i)).forEach(i\
    \ -> {\n            String vowel = word.toLowerCase().substring(i, i + 1);\n \
    \           while (vowels.contains(vowel)) {\n                vowels.remove(vowel);\n\
    \                vowel = vowel.substring(1);\n            }\n            sb.append(vowel);\n\
    \        });\n        return sb.length() == 0 ? \"\" :sb.toString();\n    }\n\
    \    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpci80uoqp.java:26: error: bad operand types for binary operator\
    \ '!='\n        IntStream.range(0, word.length() - 1).filter(i -> word.toLowerCase().charAt(i)\
    \ != vowels.get(i)).forEach(i -> {\n                                         \
    \                                              ^\n  first type:  char\n  second\
    \ type: String\n1 error\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String[] vowels\
    \ = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"};\n        if (word.isEmpty())\n\
    \            return \"\";\n        Set<String> vowelSet = new HashSet<String>(Arrays.asList(vowels));\n\
    \        word = word.toLowerCase();\n        char[] chars = word.toCharArray();\n\
    \        int length = word.length();\n        for (int i = length - 1; i >= 0;\
    \ i--) {\n            if (vowelSet.contains(chars[i])) {\n                if (vowelSet.contains(chars[i\
    \ - 1]) && vowelSet.contains(chars[i + 1])) {\n                    return String.valueOf(chars[i]);\n\
    \                }\n                if (vowelSet.contains(chars[i - 1]) && vowelSet.contains(chars[i\
    \ - 2]) && vowelSet.contains(chars[i + 1])) {\n                    return String.valueOf(chars[i]);\n\
    \                }\n            }\n        }\n        return \"\";\n    }\n  \
    \  public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj9iltc21.java:44)\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int[] vowels\
    \ = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\n        String vowel = \"\";\n        for(int\
    \ i = word.length()-1;i>=0;i--) {\n            char c = word.charAt(i);\n    \
    \        if(vowels.contains(c)) {\n                vowel = c;\n              \
    \  break;\n            }\n        }\n        return vowel;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7wa_ye20.java:28: error: cannot find symbol\n            if(vowels.contains(c))\
    \ {\n                     ^\n  symbol:   method contains(char)\n  location: variable\
    \ vowels of type int[]\n/tmp/tmp7wa_ye20.java:29: error: incompatible types: char\
    \ cannot be converted to String\n                vowel = c;\n                \
    \        ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        word = word.toLowerCase();\n\
    \        Set<String> vowels = new HashSet<>();\n        vowels.add(\"a\");\n \
    \       vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n\n        String\
    \ s = \"\";\n        char[] arr = word.toCharArray();\n        int l = arr.length;\n\
    \        int l2 = l - 1;\n        int m = l2 >> 1;\n        for (int i = 0; i\
    \ < m; i++) {\n            char[] c1 = Arrays.copyOfRange(arr, 0, i);\n      \
    \      char[] c2 = Arrays.copyOfRange(arr, i, l2);\n            if (c1.length\
    \ == 2 && c2.length == 2) {\n                boolean flag = false;\n         \
    \       for (int j = 0; j < c1.length; j++) {\n                    if (vowels.contains(String.valueOf(c1[j])))\
    \ {\n                        flag = true;\n                        break;\n  \
    \                  }\n                }\n                for (int j = 0; j < c2.length;\
    \ j++) {\n                    if (vowels.contains(String.valueOf(c2[j]))) {\n\
    \                        flag = true;\n                        break;\n      \
    \              }\n                }\n                if (flag) {\n           \
    \         for (int j = 0; j < c1.length; j++) {\n                        for (int\
    \ k = 0; k < c2.length; k++) {\n                            if (c1[j] == c2[k])\
    \ {\n                                s = c1.length == c2.length ? \"\" : String.valueOf(c1[j]);\n\
    \                                break;\n                            }\n     \
    \                   }\n                    }\n                    break;\n   \
    \             }\n            }\n        }\n        return s;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpokzyxu6t.java:83)\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if(word.isEmpty())\
    \ {\n            return \"\";\n        }\n        \n        HashSet<Character>\
    \ set = new HashSet<>();\n        \n        for(int i = word.length() - 1; i >=\
    \ 0; i--) {\n            if(Character.isLetterOrDigit(word.charAt(i))) {\n   \
    \             set.add(word.charAt(i));\n            }\n        }\n        \n \
    \       while(!set.isEmpty()) {\n            char c = set.iterator().next();\n\
    \            if(!set.remove(c)) {\n                set.add(Character.toLowerCase(c));\n\
    \            }\n        }\n        \n        Character vowel = set.iterator().next();\n\
    \        return vowel.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException\n\tat java.base/java.util.HashMap$HashIterator.nextNode(HashMap.java:1599)\n\
    \tat java.base/java.util.HashMap$KeyIterator.next(HashMap.java:1620)\n\tat Problem.getClosestVowel(tmpadqpyoro.java:43)\n\
    \tat Problem.main(tmpadqpyoro.java:47)\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int v = 0;\n\
    \        int r1 = 0;\n        int r2 = 0;\n        int c = 0;\n        int e =\
    \ 0;\n        boolean notFound = false;\n        // iterate from right\n     \
    \   for (r1 = word.length()-1; r1 >= 0; r1--){\n            // iterate from right\
    \ again\n            for (r2 = r1; r2 >= 0; r2--){\n                c = word.charAt(r2);\n\
    \                e = word.charAt(r1);\n                if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                    v++;\n         \
    \       }\n                if (e == 'a' || e == 'e' || e == 'i' || e == 'o' ||\
    \ e == 'u') {\n                    v++;\n                }\n            }\n  \
    \      }\n        if (v > 0 && v < 2) {\n            notFound = true;\n      \
    \  }\n        if (!notFound) {\n            return \"\";\n        }\n        String\
    \ result = \"\";\n        for (r2 = r1; r2 >= 0; r2--){\n            String vowel\
    \ = word.charAt(r2);\n            if (vowel == 'a' || vowel == 'e' || vowel ==\
    \ 'i' || vowel == 'o' || vowel == 'u') {\n                result= result + vowel;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplcf_tjp0.java:52: error: incompatible types: char cannot be converted\
    \ to String\n            String vowel = word.charAt(r2);\n                   \
    \                   ^\n/tmp/tmplcf_tjp0.java:53: error: bad operand types for\
    \ binary operator '=='\n            if (vowel == 'a' || vowel == 'e' || vowel\
    \ == 'i' || vowel == 'o' || vowel == 'u') {\n                      ^\n  first\
    \ type:  String\n  second type: char\n/tmp/tmplcf_tjp0.java:53: error: bad operand\
    \ types for binary operator '=='\n            if (vowel == 'a' || vowel == 'e'\
    \ || vowel == 'i' || vowel == 'o' || vowel == 'u') {\n                       \
    \               ^\n  first type:  String\n  second type: char\n/tmp/tmplcf_tjp0.java:53:\
    \ error: bad operand types for binary operator '=='\n            if (vowel ==\
    \ 'a' || vowel == 'e' || vowel == 'i' || vowel == 'o' || vowel == 'u') {\n   \
    \                                                   ^\n  first type:  String\n\
    \  second type: char\n/tmp/tmplcf_tjp0.java:53: error: bad operand types for binary\
    \ operator '=='\n            if (vowel == 'a' || vowel == 'e' || vowel == 'i'\
    \ || vowel == 'o' || vowel == 'u') {\n                                       \
    \                               ^\n  first type:  String\n  second type: char\n\
    /tmp/tmplcf_tjp0.java:53: error: bad operand types for binary operator '=='\n\
    \            if (vowel == 'a' || vowel == 'e' || vowel == 'i' || vowel == 'o'\
    \ || vowel == 'u') {\n                                                       \
    \                               ^\n  first type:  String\n  second type: char\n\
    6 errors\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String vowels\
    \ = \"aeiouAEIOU\";\n        int i = word.length();\n        int j = word.length();\n\
    \        int vowelCount = 0;\n        ArrayList<String> vowelsList = new ArrayList<String>();\n\
    \        for (Character c: word.substring(i)) {\n            vowelsList.add(String.valueOf(vowels.indexOf(c)));\n\
    \        }\n        vowelsList.remove(vowelsList.size() - 1);\n        vowelsList.remove(vowelsList.size()\
    \ - 1);\n        System.out.println(\"vowelsList: \");\n        System.out.println(vowelsList);\n\
    \        vowelsList.remove(vowelsList.size() - 1);\n        vowelsList.remove(vowelsList.size()\
    \ - 1);\n        System.out.println(\"vowelsList: \");\n        System.out.println(vowelsList);\n\
    \        vowelsList.remove(vowelsList.size() - 1);\n        vowelsList.remove(vowelsList.size()\
    \ - 1);\n        System.out.println(\"vowelsList: \");\n        System.out.println(vowelsList);\n\
    \        vowelsList.remove(vowelsList.size() - 1);\n        vowelsList.remove(vowelsList.size()\
    \ - 1);\n        System.out.println(\"vowelsList: \");\n        System.out.println(vowelsList);\n\
    \        int vowelCount2 = vowelsList.size();\n        System.out.println(\"vowelCount2:\
    \ \");\n        System.out.println(vowelCount2);\n        int vowelCount3 = vowelList.size();\n\
    \        System.out.println(\"vowelCount3: \");\n        System.out.println(vowelCount3);\n\
    \        int vowelCount4 = vowelsList.size();\n        System.out.println(\"vowelCount4:\
    \ \");\n        System.out.println(vowelCount4);\n        ArrayList<Integer> vowelsList1\
    \ = new ArrayList<Integer>();\n        int vowelCount5 = vowelsList.size();\n\
    \        System.out.println(\"vowelCount5: \");\n        System.out.println(vowelCount5);\n\
    \        int vowelCount6 = vowelsList.size();\n        System.out.println(\"vowelCount6:\
    \ \");\n        System.out.println(vowelCount6);\n        int vowelCount7 = vowelsList.size();\n\
    \        System.out.println(\"vowelCount7: \");\n        System.out.println(vowelCount7);\n\
    \        int vowelCount8 = vowelsList.size();\n        System.out.println(\"vowelCount8:\
    \ \");\n        System.out.println(vowelCount8);\n        int vowelCount9 = vowelsList.size();\n\
    \        System.out.println(\"vowelCount9: \");\n        System.out.println(vowelCount9);\n\
    \        int vowelCount10 = vowelsList.size();\n        System.out.println(\"\
    vowelCount10: \");\n        System.out.println(vowelCount10);\n        int vowelCount11\
    \ = vowelsList.size();\n        System.out.println(\"vowelCount11: \");\n    \
    \    System.out.println(vowelCount11);\n        int vowelCount12 = vowelsList.size();\n\
    \        System.out.println(\"vowelCount12: \");\n        System.out.println(vowelCount12);\n\
    \        int vowelCount13 = vowelsList.size();\n        System.out.println(\"\
    vowelCount13: \");\n        System.out.println(vowelCount13);\n        int vowelCount14\
    \ = vowelsList.size();\n\n    }\n    public static void main(String[] args) {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_jwf4pbk.java:29: error: for-each not applicable to expression\
    \ type\n        for (Character c: word.substring(i)) {\n                     \
    \                   ^\n  required: array or java.lang.Iterable\n  found:    String\n\
    /tmp/tmp_jwf4pbk.java:51: error: cannot find symbol\n        int vowelCount3 =\
    \ vowelList.size();\n                          ^\n  symbol:   variable vowelList\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = new ArrayList<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"A\");\n        vowels.add(\"E\");\n        vowels.add(\"\
    I\");\n        vowels.add(\"O\");\n        vowels.add(\"U\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        Map<String, Integer> counts = new HashMap<>();\n        for (String\
    \ vowel : vowels) {\n            counts.put(vowel, 0);\n        }\n        int\
    \ i = 0;\n        for (char c : word.toCharArray()) {\n            if (Character.isLetter(c))\
    \ {\n                counts.put(String.valueOf(c), 1);\n            }\n      \
    \  }\n        for (int x = word.length() - 1; x >= 0; x--) {\n            char\
    \ c = word.charAt(x);\n            String vowel = String.valueOf(c);\n       \
    \     Integer count = counts.get(vowel);\n            if (count != 0) {\n    \
    \            if (vowel.equals(\"a\")) {\n                    counts.put(\"a\"\
    , count + 1);\n                } else if (vowel.equals(\"e\")) {\n           \
    \         counts.put(\"e\", count + 1);\n                } else if (vowel.equals(\"\
    i\")) {\n                    counts.put(\"i\", count + 1);\n                }\
    \ else if (vowel.equals(\"o\")) {\n                    counts.put(\"o\", count\
    \ + 1);\n                } else if (vowel.equals(\"u\")) {\n                 \
    \   counts.put(\"u\", count + 1);\n                } else if (vowel.equals(\"\
    A\")) {\n                    counts.put(\"A\", count + 1);\n                }\
    \ else if (vowel.equals(\"E\")) {\n                    counts.put(\"E\", count\
    \ + 1);\n                } else if (vowel.equals(\"I\")) {\n                 \
    \   counts.put(\"I\", count + 1);\n                } else if (vowel.equals(\"\
    O\")) {\n                    counts.put(\"O\", count + 1);\n                }\
    \ else if (vowel.equals(\"U\")) {\n                    counts.put(\"U\", count\
    \ + 1);\n                }\n            }\n        }\n        String min = \"\"\
    ;\n        Integer minCount = -1;\n        for (String vowel : counts.keySet())\
    \ {\n            Integer count = counts.get(vowel);\n            if (minCount\
    \ == -1 || count < minCount) {\n                min = vowel;\n               \
    \ minCount = count;\n            }\n        }\n        return min;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptq8wpxze.java:95)\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        \n        //\
    \ O(N^2) time\n        char[] charArray = word.toCharArray();\n        int[] indexes\
    \ = new int[charArray.length];\n        Arrays.fill(indexes, -1);\n        \n\
    \        for (int i = 0; i < charArray.length; i++) {\n            if (Character.isLetter(charArray[i]))\
    \ {\n                for (int j = i; j < charArray.length; j++) {\n          \
    \          if (Character.isLetter(charArray[j])) {\n                        indexes[j]\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \       \n        for (int i = 0; i < charArray.length; i++) {\n            if\
    \ (indexes[i] != -1 && indexes[i] < charArray.length - 1) {\n                \n\
    \                // O(N) time\n                int firstConsonantIndex = 0;\n\
    \                for (int j = i; j < charArray.length; j++) {\n              \
    \      if (Character.isLetter(charArray[j])) {\n                        if (Character.isLowerCase(charArray[firstConsonantIndex]))\
    \ {\n                            break;\n                        }\n         \
    \               firstConsonantIndex++;\n                    }\n              \
    \  }\n                \n                String firstConsonant = word.substring(i,\
    \ firstConsonantIndex);\n                \n                // O(N) time\n    \
    \            int lastConsonantIndex = firstConsonantIndex + firstConsonant.length()\
    \ - 1;\n                for (int j = firstConsonantIndex; j < charArray.length;\
    \ j++) {\n                    if (Character.isLetter(charArray[j]) && Character.isLowerCase(charArray[lastConsonantIndex]))\
    \ {\n                        lastConsonantIndex--;\n                    }\n  \
    \              }\n                String lastConsonant = word.substring(firstConsonantIndex,\
    \ lastConsonantIndex);\n                \n                String vowel = \"\"\
    ;\n                \n                if (firstConsonant.equalsIgnoreCase(\"a\"\
    ) && lastConsonant.equalsIgnoreCase(\"i\")) {\n                    vowel = \"\
    A\";\n                } else if (firstConsonant.equalsIgnoreCase(\"e\") && lastConsonant.equalsIgnoreCase(\"\
    i\")) {\n                    vowel = \"E\";\n                } else if (firstConsonant.equalsIgnoreCase(\"\
    o\") && lastConsonant.equalsIgnoreCase(\"i\")) {\n                    vowel =\
    \ \"O\";\n                } else if (firstConsonant.equalsIgnoreCase(\"u\") &&\
    \ lastConsonant.equalsIgnoreCase(\"a\")) {\n                    vowel = \"U\"\
    ;\n                }\n                \n                if (vowel.length() > 0)\
    \ {\n                    return vowel;\n                }\n            }\n   \
    \     }\n        return \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -1 out of bounds for length 6\n\tat Problem.getClosestVowel(tmpmnpbewnz.java:59)\n\
    \tat Problem.main(tmpmnpbewnz.java:85)\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if(word.isEmpty())\
    \ {\n            return \"\";\n        }\n        StringBuilder result = new StringBuilder();\n\
    \        char c;\n        for(int i = word.length() - 1; i >= 0; i--) {\n    \
    \        c = word.charAt(i);\n            if(Character.isLetter(c)) {\n      \
    \          if(Character.isUpperCase(c)) {\n                    if(!result.isEmpty()\
    \ && result.charAt(result.length() - 1) != c) {\n                        result.setCharAt(result.length()\
    \ - 1, c); // appending at last index\n                    }\n               \
    \     result.append(c);\n                } else if(Character.isLowerCase(c)) {\n\
    \                    if(!result.isEmpty() && result.charAt(result.length() - 1)\
    \ != c) {\n                        result.setCharAt(result.length() - 1, c); //\
    \ appending at last index\n                    }\n                    result.append(c);\n\
    \                } else {\n                    if(Character.isUpperCase(c) &&\
    \ result.length() > 0) {\n                        if(!result.isEmpty() && result.charAt(result.length()\
    \ - 1) != c) {\n                            result.setCharAt(result.length() -\
    \ 1, c); // appending at last index\n                        }\n             \
    \           result.append(c);\n                    }\n                }\n    \
    \        }\n        }\n        if(!result.isEmpty() && result.charAt(result.length()\
    \ - 1) != 'u') {\n            result.setCharAt(result.length() - 1, 'u');\n  \
    \      }\n        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7s_drxcu.java:58)\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // code here\n\
    \        if(word == null || word.trim().length() == 0 || word.charAt(0) != 'a'\
    \ || word.charAt(word.length()-1) != 'a')\n            return \"\";\n        for(int\
    \ i = word.length()-2; i>0; i--){\n            if(word.charAt(i) == 'a' || word.charAt(i)\
    \ == 'e' || word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) ==\
    \ 'u')\n                return word.substring(i+1, i+2);\n        }\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp47ybit07.java:34)\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        word = word.toLowerCase();\n\
    \        Map<Character, Integer> map = new HashMap<Character, Integer>();\n  \
    \      for (int i = word.length() - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n\
    \            if (map.containsKey(c)) {\n                map.put(c, map.get(c)\
    \ + 1);\n            } else {\n                map.put(c, 1);\n            }\n\
    \        }\n        Set<Map.Entry<Character, Integer>> entrySet = map.entrySet();\n\
    \        Map.Entry<Character, Integer> minEntry = null;\n        for (Map.Entry<Character,\
    \ Integer> entry : entrySet) {\n            if (minEntry == null || entry.getValue()\
    \ < minEntry.getValue()) {\n                minEntry = entry;\n            }\n\
    \        }\n        Set<Character> keySet = map.keySet();\n        Character key\
    \ = minEntry.getKey();\n        int numOfVowel = map.get(key);\n        if (numOfVowel\
    \ > 0) {\n            while (numOfVowel > 1) {\n                key = (char) ('A'\
    \ + (key.charValue() - 1));\n                numOfVowel--;\n            }\n  \
    \          key = keySet.stream().skip(numOfVowel).findFirst().orElse(Character.MIN_VALUE);\n\
    \        }\n        return minEntry.getKey() == Character.MIN_VALUE ? \"\" : key;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq4eyy41h.java:51: error: incompatible types: bad type in conditional\
    \ expression\n        return minEntry.getKey() == Character.MIN_VALUE ? \"\" :\
    \ key;\n                                                               ^\n   \
    \ Character cannot be converted to String\n1 error\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int length =\
    \ word.length();\n        int consonantCount = 0, vowelCount = 0, i = 0;\n\n \
    \       boolean isVowel = false;\n        boolean isConsonant = false;\n     \
    \   boolean isInConsonant = false;\n        boolean isCloseVowel = false;\n\n\
    \        if (word.length() <= 2) {\n            return \"\";\n        }\n\n  \
    \      while (i < length) {\n            char c = word.charAt(i);\n          \
    \  if (isVowel) {\n                if (isInConsonant && isCloseVowel) {\n    \
    \                return \"\";\n                }\n                if (!isInConsonant\
    \ && !isCloseVowel) {\n                    isCloseVowel = Character.toUpperCase(c)\
    \ == c;\n                }\n                if (!isInConsonant && isCloseVowel)\
    \ {\n                    isCloseVowel = false;\n                }\n          \
    \  }\n\n            if (isConsonant) {\n                isInConsonant = Character.toUpperCase(c)\
    \ == c;\n            }\n\n            if (isInConsonant) {\n                consonantCount++;\n\
    \                isConsonant = false;\n            }\n            else if (isConsonant\
    \ && consonantCount > 2) {\n                isInConsonant = false;\n         \
    \   }\n\n            if (!isConsonant && (Character.toUpperCase(c) == 'A' || Character.toUpperCase(c)\
    \ == 'E' ||\n                Character.toUpperCase(c) == 'I' || Character.toUpperCase(c)\
    \ == 'O' ||\n                Character.toUpperCase(c) == 'U')) {\n           \
    \     vowelCount++;\n                isVowel = true;\n            }\n        \
    \    else if (isConsonant && vowelCount > 2) {\n                isVowel = false;\n\
    \            }\n\n            i++;\n        }\n\n        if (isVowel && isCloseVowel)\
    \ {\n            return \"\";\n        }\n        else if (isVowel) {\n      \
    \      return \"U\";\n        }\n        else if (isCloseVowel) {\n          \
    \  return \"U\";\n        }\n        else if (consonantCount == 1) {\n       \
    \     return \"U\";\n        }\n        else if (consonantCount == 2) {\n    \
    \        return \"U\";\n        }\n        else if (consonantCount >= 3) {\n \
    \           return \"U\";\n        }\n        else if (vowelCount == 1) {\n  \
    \          return \"U\";\n        }\n        else if (vowelCount == 2) {\n   \
    \         return \"U\";\n        }\n        else if (vowelCount >= 3) {\n    \
    \        return \"U\";\n        }\n        else {\n            return \"\";\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq9y89f3c.java:107)\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<Character>\
    \ vowels= Arrays.asList('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n \
    \       List<String> vowelList = new ArrayList<>();\n        for(Character vowel:\
    \ vowels) {\n            vowelList.add(vowel.toString());\n        }\n       \
    \ String vowelLeft = \"\";\n        String vowelRight = \"\";\n        int index\
    \ = 0;\n        for (int i = 0; i < word.length(); i++) {\n            if (vowels.contains(word.charAt(i)))\
    \ {\n                if (vowelLeft.length() == 0) {\n                    vowelLeft\
    \ = vowelList.get(index);\n                } else {\n                    vowelRight\
    \ = vowelList.get(index);\n                }\n                index++;\n     \
    \       } else {\n                vowelRight = \"\";\n            }\n        }\n\
    \        if (vowelLeft.length() != 0) {\n            return vowelLeft;\n     \
    \   } else {\n            return vowelRight;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1b8eewdw.java:51)\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        \n        char[]\
    \ chars = word.toCharArray();\n        ArrayList<Character> vowels = new ArrayList<Character>();\n\
    \        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('a', 'u');\n\
    \        vowels.add('e', 'o', 'u');\n        vowels.add('o', 'u');\n        vowels.add('u');\n\
    \        vowels.add('y');\n        vowels.add('a', 'e', 'i', 'o', 'u');\n    \
    \    vowels.add('a', 'o', 'u');\n        vowels.add('e', 'i', 'o', 'u');\n   \
    \     vowels.add('e');\n        vowels.add('o', 'u');\n        vowels.add('u');\n\
    \        vowels.add('a', 'e', 'i', 'o', 'u', 'y');\n        \n        int vowelIndex\
    \ = 0;\n        int rightVowelIndex = -1;\n        int rightVowel = -1;\n    \
    \    \n        \n        for(int i = 0; i < chars.length; i++) {\n           \
    \ Character character = chars[i];\n            for(int j = 0; j < vowels.size();\
    \ j++) {\n                if(vowels.get(j) == character) {\n                 \
    \   vowelIndex = j;\n                    break;\n                }\n         \
    \   }\n            \n            if(vowelIndex >= 0) {\n                if(vowelIndex\
    \ < rightVowelIndex) {\n                    rightVowelIndex = vowelIndex;\n  \
    \                  rightVowel = vowels.get(vowelIndex);\n                }\n \
    \               \n                break;\n            }\n        }\n        \n\
    \        if(rightVowelIndex >= 0) {\n            for(int j = rightVowelIndex +\
    \ 1; j < chars.length; j++) {\n                Character character = chars[j];\n\
    \                for(int k = 0; k < vowels.size(); k++) {\n                  \
    \  if(vowels.get(k) == character) {\n                        vowelIndex = k;\n\
    \                        break;\n                    }\n                }\n  \
    \              \n                if(vowelIndex >= 0) {\n                    if(vowelIndex\
    \ < rightVowelIndex) {\n                        rightVowelIndex = vowelIndex;\n\
    \                        rightVowel = vowels.get(vowelIndex);\n              \
    \      }\n                    break;\n                }\n            }\n     \
    \   }\n        \n        if(rightVowelIndex >= 0) {\n            String result\
    \ = \"\";\n            \n            for(int j = 0; j < rightVowelIndex; j++)\
    \ {\n                char character = chars[rightVowelIndex + j];\n          \
    \      result += character;\n            }\n            \n            return result;\n\
    \        }\n        \n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ds0e_xe.java:27: error: no suitable method found for add(char,char,char,char,char)\n\
    \        vowels.add('a', 'e', 'i', 'o', 'u');\n              ^\n    method ArrayList.add(Character,Object[],int)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method ArrayList.add(Character) is not applicable\n      (actual and formal\
    \ argument lists differ in length)\n    method ArrayList.add(int,Character) is\
    \ not applicable\n      (actual and formal argument lists differ in length)\n\
    /tmp/tmp8ds0e_xe.java:29: error: incompatible types: char cannot be converted\
    \ to Object[]\n        vowels.add('e', 'o', 'u');\n                        ^\n\
    /tmp/tmp8ds0e_xe.java:33: error: no suitable method found for add(char,char,char,char,char)\n\
    \        vowels.add('a', 'e', 'i', 'o', 'u');\n              ^\n    method ArrayList.add(Character,Object[],int)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method ArrayList.add(Character) is not applicable\n      (actual and formal\
    \ argument lists differ in length)\n    method ArrayList.add(int,Character) is\
    \ not applicable\n      (actual and formal argument lists differ in length)\n\
    /tmp/tmp8ds0e_xe.java:34: error: incompatible types: char cannot be converted\
    \ to Object[]\n        vowels.add('a', 'o', 'u');\n                        ^\n\
    /tmp/tmp8ds0e_xe.java:35: error: no suitable method found for add(char,char,char,char)\n\
    \        vowels.add('e', 'i', 'o', 'u');\n              ^\n    method ArrayList.add(Character,Object[],int)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method ArrayList.add(Character) is not applicable\n      (actual and formal\
    \ argument lists differ in length)\n    method ArrayList.add(int,Character) is\
    \ not applicable\n      (actual and formal argument lists differ in length)\n\
    /tmp/tmp8ds0e_xe.java:39: error: no suitable method found for add(char,char,char,char,char,char)\n\
    \        vowels.add('a', 'e', 'i', 'o', 'u', 'y');\n              ^\n    method\
    \ ArrayList.add(Character,Object[],int) is not applicable\n      (a"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word ==\
    \ null || word.length() < 2) {\n            return \"\";\n        }\n        char[]\
    \ arr = word.toCharArray();\n        Arrays.sort(arr);\n        \n        Map<Character,\
    \ Integer> map = new HashMap<Character, Integer>();\n        for (char c : arr)\
    \ {\n            if (!map.containsKey(c)) {\n                map.put(c, 0);\n\
    \            }\n            map.put(c, map.get(c) + 1);\n        }\n\n       \
    \ Comparator<Map.Entry<Character, Integer>> comp = (e1, e2) -> {\n           \
    \ return Integer.compare(e2.getValue(), e1.getValue());\n        };\n\n      \
    \  List<Map.Entry<Character, Integer>> list = map.entrySet().stream().sorted(comp).collect(Collectors.toList());\n\
    \n        return list.stream().map(Map.Entry::getKey).filter(x -> x == 'a' ||\
    \ x == 'e' || x == 'i' || x == 'o' || x == 'u').findFirst().get().getKey();\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp66gfghey.java:44: error: cannot find symbol\n        return list.stream().map(Map.Entry::getKey).filter(x\
    \ -> x == 'a' || x == 'e' || x == 'i' || x == 'o' || x == 'u').findFirst().get().getKey();\n\
    \                                                                            \
    \                                                               ^\n  symbol: \
    \  method getKey()\n  location: class Character\n1 error\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if(word.isEmpty())\n\
    \            return \"\";\n        int i = 0;\n        int n = word.length();\n\
    \        Set<String> vowels = new HashSet<String>(Arrays.asList(\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"));\n        StringBuilder sb = new StringBuilder();\n  \
    \      while(i < n) {\n            String word = word.substring(i, n);\n     \
    \       if(vowels.contains(word.substring(word.length()-1, word.length())))\n\
    \                sb.append(word.substring(word.length()-1, word.length()));\n\
    \            i += 1;\n        }\n        return sb.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp86q8kokv.java:31: error: variable word is already defined in method\
    \ getClosestVowel(String)\n            String word = word.substring(i, n);\n \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n        int\
    \ max = 0;\n        boolean flag = false;\n        for(int i = word.length() -\
    \ 1; i >= 0; i--) {\n            for(int j = 0; j < vowels.size(); j++) {\n  \
    \              flag = false;\n                if(word.length() >= 3 && !word.isEmpty()\
    \ && Character.isLetter(word.charAt(0))) {\n                    String firstChar\
    \ = word.substring(0, 1);\n                    if(!firstChar.equals(vowels.get(j)))\
    \ {\n                        continue;\n                    }\n              \
    \      String lastChar = word.substring(word.length() - 1);\n                \
    \    if(!lastChar.equals(vowels.get(j))) {\n                        continue;\n\
    \                    }\n                    if(firstChar.equals(lastChar)) {\n\
    \                        continue;\n                    }\n                  \
    \  if(Character.isUpperCase(word.charAt(0)) && Character.isUpperCase(word.charAt(word.length()\
    \ - 1))) {\n                        flag = true;\n                    }\n    \
    \                if(Character.isLowerCase(word.charAt(0)) && Character.isLowerCase(word.charAt(word.length()\
    \ - 1))) {\n                        flag = true;\n                    }\n    \
    \            }\n                if(flag) {\n                    max = Math.max(max,\
    \ j);\n                }\n            }\n        }\n        return max > 0 ? vowels.get(max)\
    \ : \"\";\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2p3_0wrl.java:57)\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        \n        int\
    \ left = 0;\n        int right = word.length() - 1;\n        \n        int vowelCount\
    \ = 0;\n        \n        while (left <= right) {\n            String mid = word.substring(left,\
    \ right + 1);\n            if (isVowel(mid)) {\n                vowelCount++;\n\
    \            }\n            left++;\n            right--;\n        }\n       \
    \ \n        double closest = Double.MAX_VALUE;\n        String vowel = null;\n\
    \        \n        if (vowelCount > 0) {\n            \n            String mid\
    \ = word.substring(left, right + 1);\n            \n            if (isVowel(mid))\
    \ {\n                vowel = mid;\n            }\n        }\n        \n      \
    \  for (int i = left; i <= right; i++) {\n            \n            String mid\
    \ = word.substring(i, i + 1);\n            \n            if (!vowel.equals(mid))\
    \ {\n                \n                double tempDistance = getLevenshteinDistance(vowel,\
    \ mid);\n                if (closest < tempDistance) {\n                    vowel\
    \ = mid;\n                    closest = tempDistance;\n                }\n   \
    \         }\n            \n        }\n        \n        return vowel;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnquizy_b.java:32: error: cannot find symbol\n            if (isVowel(mid))\
    \ {\n                ^\n  symbol:   method isVowel(String)\n  location: class\
    \ Problem\n/tmp/tmpnquizy_b.java:46: error: cannot find symbol\n            if\
    \ (isVowel(mid)) {\n                ^\n  symbol:   method isVowel(String)\n  location:\
    \ class Problem\n/tmp/tmpnquizy_b.java:57: error: cannot find symbol\n       \
    \         double tempDistance = getLevenshteinDistance(vowel, mid);\n        \
    \                              ^\n  symbol:   method getLevenshteinDistance(String,String)\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int startIndex\
    \ = findVowel(word).right();\n        int endIndex = findVowel(word).left() +\
    \ 1;\n        if (startIndex == endIndex) {\n            return \"\";\n      \
    \  }\n        int middle = startIndex + (endIndex - startIndex) / 2;\n       \
    \ int leftVowelIndex = findVowel(word.substring(0, middle)).left();\n        int\
    \ rightVowelIndex = findVowel(word.substring(middle + 1)).right();\n        int\
    \ leftVowel = leftVowelIndex > 0 ? word.length() - leftVowelIndex + 1 : leftVowelIndex;\n\
    \        int rightVowel = rightVowelIndex > word.length() - 1 ? word.length()\
    \ - rightVowelIndex : rightVowelIndex + 1;\n        if (leftVowel < rightVowel)\
    \ {\n            return word.substring(leftVowel + 1, rightVowel);\n        }\
    \ else if (leftVowel > rightVowel) {\n            return word.substring(0, rightVowel);\n\
    \        }\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2nfgwde8.java:24: error: cannot find symbol\n        int startIndex\
    \ = findVowel(word).right();\n                         ^\n  symbol:   method findVowel(String)\n\
    \  location: class Problem\n/tmp/tmp2nfgwde8.java:25: error: cannot find symbol\n\
    \        int endIndex = findVowel(word).left() + 1;\n                       ^\n\
    \  symbol:   method findVowel(String)\n  location: class Problem\n/tmp/tmp2nfgwde8.java:30:\
    \ error: cannot find symbol\n        int leftVowelIndex = findVowel(word.substring(0,\
    \ middle)).left();\n                             ^\n  symbol:   method findVowel(String)\n\
    \  location: class Problem\n/tmp/tmp2nfgwde8.java:31: error: cannot find symbol\n\
    \        int rightVowelIndex = findVowel(word.substring(middle + 1)).right();\n\
    \                              ^\n  symbol:   method findVowel(String)\n  location:\
    \ class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011623
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<Character>\
    \ vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        ArrayList chars =\
    \ new ArrayList();\n        for (char c : word.toCharArray()) {\n            chars.add(c);\n\
    \        }\n        Collections.sort(chars);\n        Collections.reverse(chars);\n\
    \        chars.remove(vowels.get(0));\n        chars.remove(vowels.get(vowels.size()\
    \ - 1));\n        String vowel = (String) chars.remove(vowels.get(0)) + (String)\
    \ chars.remove(vowels.get(vowels.size() - 1));\n        return vowel.isEmpty()\
    \ ? \"\" : vowel;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgttoi3_u.java:33: error: incompatible types: boolean cannot be\
    \ converted to String\n        String vowel = (String) chars.remove(vowels.get(0))\
    \ + (String) chars.remove(vowels.get(vowels.size() - 1));\n                  \
    \                          ^\n/tmp/tmpgttoi3_u.java:33: error: incompatible types:\
    \ boolean cannot be converted to String\n        String vowel = (String) chars.remove(vowels.get(0))\
    \ + (String) chars.remove(vowels.get(vowels.size() - 1));\n                  \
    \                                                                 ^\nNote: /tmp/tmpgttoi3_u.java\
    \ uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked\
    \ for details.\n2 errors\n"
  stdout: ''
  timestamp: 1660011624
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String[] vowels\
    \ = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"};\n\
    \        int start = -1;\n        int end = -1;\n        for (int i = 0, l = word.length();\
    \ i < l; i++) {\n            char c = word.charAt(i);\n            if (vowels.indexOf(c)\
    \ >= 0) {\n                if (start == -1) start = i;\n                end =\
    \ i;\n            }\n        }\n        if (start == -1) return \"\";\n      \
    \  int startConsonant = word.indexOf(\"B\", start);\n        int endConsonant\
    \ = word.indexOf(\"S\", end);\n        if (startConsonant == -1 || endConsonant\
    \ == -1) return \"\";\n        String vowel = word.substring(start + 1, end);\n\
    \        for (int i = 1, l = vowels.length; i < l; i++) {\n            if (vowel.equals(vowels[i]))\
    \ {\n                startConsonant = word.indexOf(\"B\", start);\n          \
    \      endConsonant = word.indexOf(\"S\", end);\n                break;\n    \
    \        }\n        }\n        if (startConsonant == -1 || endConsonant == -1)\
    \ return \"\";\n        return word.substring(startConsonant + 1, endConsonant);\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpngjadwej.java:29: error: cannot find symbol\n            if (vowels.indexOf(c)\
    \ >= 0) {\n                      ^\n  symbol:   method indexOf(char)\n  location:\
    \ variable vowels of type String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<Character>\
    \ vowels = Arrays.asList('a','e','i','o','u');\n        Map<Character, Integer>\
    \ letterCount = new HashMap<>();\n        for(char ch : word.toCharArray()) {\n\
    \            int count = letterCount.containsKey(ch) ? letterCount.get(ch) : 0;\n\
    \            letterCount.put(ch, count + 1);\n        }\n        Optional<Map.Entry<Character,\
    \ Integer>> minVowel = \n                vowels.stream().filter(e -> letterCount.get(e)\
    \ > 0).min((a, b) -> \n                    (int) Math.abs(b.getValue() - a.getValue()));\n\
    \        return minVowel.isPresent() ? minVowel.get().getKey() : \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpex2j4ehj.java:32: error: cannot find symbol\n                 \
    \   (int) Math.abs(b.getValue() - a.getValue()));\n                          \
    \          ^\n  symbol:   method getValue()\n  location: variable b of type Character\n\
    /tmp/tmpex2j4ehj.java:32: error: cannot find symbol\n                    (int)\
    \ Math.abs(b.getValue() - a.getValue()));\n                                  \
    \                 ^\n  symbol:   method getValue()\n  location: variable a of\
    \ type Character\n/tmp/tmpex2j4ehj.java:31: error: incompatible types: Optional<Character>\
    \ cannot be converted to Optional<Entry<Character,Integer>>\n                vowels.stream().filter(e\
    \ -> letterCount.get(e) > 0).min((a, b) -> \n                                \
    \                                       ^\n/tmp/tmpex2j4ehj.java:33: error: incompatible\
    \ types: bad type in conditional expression\n        return minVowel.isPresent()\
    \ ? minVowel.get().getKey() : \"\";\n                                        \
    \                   ^\n    Character cannot be converted to String\n4 errors\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int n = word.length();\n\
    \        int start = 0;\n        int end = n - 1;\n        int v = 0;\n      \
    \  while (end >= 0) {\n            v = word.charAt(end);\n            if (Character.isLowerCase(v))\
    \ {\n                start++;\n                end--;\n            } else if (Character.isUpperCase(v))\
    \ {\n                start--;\n                end++;\n            }\n       \
    \     if (end < start) {\n                return \"\";\n            }\n      \
    \  }\n        int c = 0;\n        while (start >= 0) {\n            if (Character.isLowerCase(word.charAt(start)))\
    \ {\n                c++;\n                start--;\n            } else if (Character.isUpperCase(word.charAt(start)))\
    \ {\n                c--;\n                start++;\n            }\n         \
    \   if (c <= 0) {\n                return \"\";\n            }\n        }\n  \
    \      String vowel = \"\";\n        while (c > 0) {\n            vowel = vowel\
    \ + word.charAt(c--);\n        }\n        return vowel;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpspyvxbos.java:61)\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String wordWithoutFirstConsonant\
    \ = word.substring(0,1);\n        String wordWithoutLastConsonant = word.substring(word.length()-1);\n\
    \        ArrayList<String> vowelList = new ArrayList<>();\n        vowelList.add(\"\
    a\");\n        vowelList.add(\"e\");\n        vowelList.add(\"i\");\n        vowelList.add(\"\
    o\");\n        vowelList.add(\"u\");\n        \n        String vowelToBeReturned\
    \ = \"\";\n        if (wordWithoutFirstConsonant.equals(wordWithoutLastConsonant))\
    \ {\n            return \"\";\n        } else {\n            int start = 0;\n\
    \            int end = word.length();\n            while (start < end) {\n   \
    \             if (vowelList.contains(word.substring(start, start + 1))) {\n  \
    \                  start = start + 1;\n                } else {\n            \
    \        if (end == word.length()) {\n                        vowelToBeReturned\
    \ = word.substring(start);\n                        return vowelToBeReturned;\n\
    \                    } else {\n                        end = end - 1;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1dr5j07x.java:55)\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        char[] a = word.toCharArray();\n\
    \        for(int i=0;i<a.length-1;i++) {\n            char c = a[i];\n       \
    \     char d = a[i+1];\n            if(c=='a' || c=='e' || c=='i' || c=='o' ||\
    \ c=='u' || c=='y'){\n                continue;\n            }\n            else\
    \ if(d=='a' || d=='e' || d=='i' || d=='o' || d=='u' || d=='y') {\n           \
    \     continue;\n            }\n            else if(Character.isUpperCase(c)){\n\
    \                continue;\n            }\n            else if(Character.isUpperCase(d)){\n\
    \                continue;\n            }\n            else if(c==d && d>='a'\
    \ && d<='z') {\n                continue;\n            }\n            else {\n\
    \                return \"\"+c;\n            }\n        }\n        return \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzp8_k2y3.java:50)\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        StringBuilder\
    \ vowel = new StringBuilder();\n        List<String> vowelList = new ArrayList<String>();\n\
    \        vowelList.add(\"a\");\n        vowelList.add(\"e\");\n        vowelList.add(\"\
    i\");\n        vowelList.add(\"o\");\n        vowelList.add(\"u\");\n\n      \
    \  for (String vowelL : vowelList) {\n            if (word.charAt(word.length()\
    \ - vowelL.length() - 1) != vowelL) {\n                continue;\n           \
    \ }\n            boolean flag = false;\n            for (int i = vowelL.length();\
    \ i < word.length(); i++) {\n                if (word.charAt(i) != vowelL) {\n\
    \                    continue;\n                }\n                flag = true;\n\
    \                vowel.append(vowelL);\n                break;\n            }\n\
    \            if (flag) {\n                return vowel.toString();\n         \
    \   }\n        }\n        return vowel.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0xuud99c.java:33: error: bad operand types for binary operator\
    \ '!='\n            if (word.charAt(word.length() - vowelL.length() - 1) != vowelL)\
    \ {\n                                                                 ^\n  first\
    \ type:  char\n  second type: String\n/tmp/tmp0xuud99c.java:38: error: bad operand\
    \ types for binary operator '!='\n                if (word.charAt(i) != vowelL)\
    \ {\n                                   ^\n  first type:  char\n  second type:\
    \ String\n2 errors\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<Character>\
    \ vowels = new HashSet<Character>();\n        for (char ch : word.toCharArray())\
    \ {\n            if (ch >= 'a' && ch <= 'z') vowels.add(ch);\n            if (ch\
    \ >= 'A' && ch <= 'Z') vowels.add(ch);\n        }\n        char start = 'a';\n\
    \        char end = 'z';\n        boolean found = false;\n        do {\n     \
    \       found = false;\n            int mid = (start + end) / 2;\n           \
    \ boolean isBetween = false;\n            for (char ch : word.toCharArray()) {\n\
    \                if (ch >= 'a' && ch <= 'z') {\n                    if (ch ==\
    \ start) isBetween = true;\n                    if (ch == end) isBetween = true;\n\
    \                } else if (ch >= 'A' && ch <= 'Z') {\n                    if\
    \ (ch == start) isBetween = true;\n                    if (ch == end) isBetween\
    \ = true;\n                }\n            }\n            if (isBetween && vowels.contains(mid))\
    \ {\n                found = true;\n                start = mid;\n           \
    \ } else if (vowels.contains(mid)) {\n                end = mid;\n           \
    \ } else {\n                start = mid;\n            }\n        } while (!found);\n\
    \        char vowel = end + 1;\n        if (vowel == 'z') vowel = 'a';\n     \
    \   return word.charAt(word.length() - vowel - 1);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ilo9wo7.java:47: error: incompatible types: possible lossy conversion\
    \ from int to char\n                start = mid;\n                        ^\n\
    /tmp/tmp0ilo9wo7.java:49: error: incompatible types: possible lossy conversion\
    \ from int to char\n                end = mid;\n                      ^\n/tmp/tmp0ilo9wo7.java:51:\
    \ error: incompatible types: possible lossy conversion from int to char\n    \
    \            start = mid;\n                        ^\n/tmp/tmp0ilo9wo7.java:54:\
    \ error: incompatible types: possible lossy conversion from int to char\n    \
    \    char vowel = end + 1;\n                         ^\n/tmp/tmp0ilo9wo7.java:56:\
    \ error: incompatible types: char cannot be converted to String\n        return\
    \ word.charAt(word.length() - vowel - 1);\n                          ^\n5 errors\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        HashSet<Character>\
    \ vowels = new HashSet<Character>();\n        vowels.add('a');\n        vowels.add('e');\n\
    \        vowels.add('i');\n        vowels.add('o');\n        vowels.add('u');\n\
    \        String vowel=\"\";\n        Set<Character> consonants = new HashSet<Character>();\n\
    \        consonants.add('a');\n        consonants.add('b');\n        consonants.add('c');\n\
    \        consonants.add('d');\n        consonants.add('e');\n        consonants.add('f');\n\
    \        consonants.add('g');\n        consonants.add('h');\n        consonants.add('i');\n\
    \        consonants.add('j');\n        consonants.add('k');\n        consonants.add('l');\n\
    \        consonants.add('m');\n        consonants.add('n');\n        consonants.add('o');\n\
    \        consonants.add('p');\n        consonants.add('q');\n        consonants.add('r');\n\
    \        consonants.add('s');\n        consonants.add('t');\n        consonants.add('u');\n\
    \        consonants.add('v');\n        consonants.add('w');\n        consonants.add('x');\n\
    \        consonants.add('y');\n        consonants.add('z');\n        for(int i=0;i<word.length()-1;i++){\n\
    \            if(consonants.contains(word.charAt(i))){\n                vowel=vowel+word.charAt(i);\n\
    \                if(i<word.length()-2){\n                    char lastVowel=word.charAt(word.length()-1);\n\
    \                    if(vowels.contains(lastVowel))\n                        break;\n\
    \                }\n            }\n        }\n        return vowel;\n    }\n \
    \   public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4aote6u.java:71)\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String result\
    \ = \"\";\n        if (word == null || word.isEmpty()) {\n            return result;\n\
    \        }\n\n        // find left most consonant from right\n        int left\
    \ = 0;\n        while (left.length() < word.length() && ((left == 0) || (Character.toLowerCase(word.charAt(left\
    \ - 1)) == 'a'))) {\n            left++;\n        }\n        int right = word.length()\
    \ - 1;\n        while (right>0 && Character.toLowerCase(word.charAt(right)) ==\
    \ 'a') {\n            right--;\n        }\n\n        // find vowel between left\
    \ and right\n        int vowel_start = 0;\n        while (vowel_start < right\
    \ && Character.toLowerCase(word.charAt(vowel_start++)) == 'a') {\n        }\n\
    \        int vowel_end = word.length() - 1;\n        while (vowel_end>0 && Character.toLowerCase(word.charAt(vowel_end--))\
    \ == 'a') {\n        }\n        // check left and right position\n        if (left\
    \ > 0 && Character.toLowerCase(word.charAt(left - 1)) == 'a') {\n            //\
    \ left position is vowel, right\n            int left_right = left + 1;\n    \
    \        while (left_right <= right && Character.toLowerCase(word.charAt(left_right++))\
    \ == 'a') {\n            }\n            int left_right_2 = left + 2;\n       \
    \     while (left_right_2 <= right && Character.toLowerCase(word.charAt(left_right_2++))\
    \ == 'a') {\n            }\n            if (left_right < right && Character.toLowerCase(word.charAt(left_right))\
    \ == 'a') {\n                vowel_start = left_right + 1;\n            }\n  \
    \      }\n        if (right > 0 && Character.toLowerCase(word.charAt(right - 1))\
    \ == 'a') {\n            int right_left = right - 1;\n            while (right_left\
    \ >= left && Character.toLowerCase(word.charAt(right_left--)) == 'a') {\n    \
    \        }\n            int right_left_2 = right - 2;\n            while (right_left_2\
    \ >= left && Character.toLowerCase(word.charAt(right_left_2--)) == 'a') {\n  \
    \          }\n            if (right_left >= left && Character.toLowerCase(word.charAt(right_left))\
    \ == 'a') {\n                vowel_end = right_left + 1;\n            }\n    \
    \    }\n        if (vowel_start < right && vowel_end > 0 && Character.toLowerCase(word.charAt(vowel_start))\
    \ == 'a' && Character.toLowerCase(word.charAt(vowel_end)) == 'a') {\n        \
    \    result = word.substring(vowel_start, vowel_end + 1);\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj8t4di2c.java:31: error: int cannot be dereferenced\n        while\
    \ (left.length() < word.length() && ((left == 0) || (Character.toLowerCase(word.charAt(left\
    \ - 1)) == 'a'))) {\n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word ==\
    \ null || word.isEmpty()) {\n            return \"\";\n        }\n        if (word.charAt(0)\
    \ != word.charAt(word.length() - 1)) {\n            return \"\";\n        }\n\
    \        if (word.charAt(0) != 'a' && word.charAt(0) != 'e' && word.charAt(0)\
    \ != 'i' && word.charAt(0) != 'o' && word.charAt(0) != 'u') {\n            return\
    \ \"\";\n        }\n        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"\
    u\"};\n        String[] consonants = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"z\"};\n        String[] split = word.split(\"\");\n        char[]\
    \ vowelsArr = new char[vowels.length];\n        char[] consonantsArr = new char[consonants.length];\n\
    \        int j = 0;\n        for (int i = 0; i < vowels.length; ++i) {\n     \
    \       vowelsArr[i] = vowels[i].charAt(0);\n        }\n        for (int i = 0;\
    \ i < consonants.length; ++i) {\n            consonantsArr[i] = consonants[i].charAt(0);\n\
    \        }\n        Arrays.sort(vowelsArr);\n        Arrays.sort(consonantsArr);\n\
    \        Arrays.sort(split);\n        int minDistance = Integer.MAX_VALUE;\n \
    \       int minVowelIndex = 0;\n        int startIndex = split.length + word.length();\n\
    \        int endIndex = word.length() + split.length;\n        for (int i = 0;\
    \ i < split.length; ++i) {\n            for (int j = startIndex; j < endIndex;\
    \ ++j) {\n                if (vowelsArr[i] == split[j] && consonantsArr[i - j]\
    \ == split[i]) {\n                    ++j;\n                    int difference\
    \ = i - j;\n                    if (difference < minDistance) {\n            \
    \            minDistance = difference;\n                        minVowelIndex\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \       return String.valueOf(vowels[minVowelIndex]);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9e5e4c46.java:53: error: variable j is already defined in method\
    \ getClosestVowel(String)\n            for (int j = startIndex; j < endIndex;\
    \ ++j) {\n                     ^\n/tmp/tmp9e5e4c46.java:54: error: bad operand\
    \ types for binary operator '=='\n                if (vowelsArr[i] == split[j]\
    \ && consonantsArr[i - j] == split[i]) {\n                                 ^\n\
    \  first type:  char\n  second type: String\n/tmp/tmp9e5e4c46.java:54: error:\
    \ bad operand types for binary operator '=='\n                if (vowelsArr[i]\
    \ == split[j] && consonantsArr[i - j] == split[i]) {\n                       \
    \                                              ^\n  first type:  char\n  second\
    \ type: String\n3 errors\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int vowelIndex\
    \ = word.indexOf(\"a\");\n        boolean flag = false;\n        boolean flag2\
    \ = false;\n        while (flag != true && flag2 != true) {\n            if (word.charAt(vowelIndex)\
    \ == vowelIndex + 1) {\n                flag = true;\n            }\n        \
    \    if (word.charAt(vowelIndex) == vowelIndex - 1) {\n                flag2 =\
    \ true;\n            }\n            vowelIndex--;\n        }\n        if (flag\
    \ != true) {\n            return \"\";\n        }\n        return word.substring(vowelIndex\
    \ + 1, word.length());\n    }\n    public static void main(String[] args) {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: -1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.getClosestVowel(tmpbamuu1at.java:28)\n\
    \tat Problem.main(tmpbamuu1at.java:42)\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int[] vowels\
    \ = { \n            48, 49, 50, 51, 52, 53, 54, 55, 56, 57, \n            65,\
    \ 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84,\
    \ 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103,\
    \ 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\
    \ 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135,\
    \ 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151,\
    \ 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167,\
    \ 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183,\
    \ 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199,\
    \ 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215,\
    \ 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231,\
    \ 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\
    \ 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259 };\n        char[]\
    \ arr = word.toCharArray();\n        Arrays.sort(arr, Comparator.comparing(c ->\
    \ vowels.indexOf(c)));\n        int right = arr[0] >= 65 && arr[0] < 90 ? 1 :\
    \ 0;\n        int left = arr[arr.length - 1] >= 65 && arr[arr.length - 1] < 90\
    \ ? arr.length - 1 : 0;\n        boolean foundVowel = false;\n        for(int\
    \ i = left; i <= right; i++) {\n            char c = arr[i];\n            if(Character.isUpperCase(c))\
    \ {\n                foundVowel = true;\n                break;\n            }\n\
    \        }\n        return foundVowel ? \"\" : \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzyx3n2w9.java:28: error: no suitable method found for sort(char[],Comparator<Object>)\n\
    \        Arrays.sort(arr, Comparator.comparing(c -> vowels.indexOf(c)));\n   \
    \           ^\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is not\
    \ applicable\n      (inference variable T#1 has incompatible bounds\n        equality\
    \ constraints: char\n        lower bounds: Object)\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpzyx3n2w9.java:28: error: cannot find symbol\n        Arrays.sort(arr,\
    \ Comparator.comparing(c -> vowels.indexOf(c)));\n                           \
    \                              ^\n  symbol:   method indexOf(Object)\n  location:\
    \ variable vowels of type int[]\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int max = 1;\n\
    \        for (int i = word.length() - 1; i >= 0; i--) {\n            if (word.charAt(i)\
    \ == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i'\n                 \
    \   || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n                return\
    \ word.substring(i, i + 1);\n            }\n            if (word.charAt(i) ==\
    \ 'y') {\n                max = Math.max(max, word.length() - 1);\n          \
    \  }\n            if (word.charAt(i) == 'w') {\n                max = Math.max(max,\
    \ word.length() - 2);\n            }\n            if (word.charAt(i) == 'r') {\n\
    \                max = Math.max(max, word.length() - 3);\n            }\n    \
    \        if (word.charAt(i) == 's') {\n                max = Math.max(max, word.length()\
    \ - 4);\n            }\n            if (word.charAt(i) == 'p') {\n           \
    \     max = Math.max(max, word.length() - 5);\n            }\n            if (word.charAt(i)\
    \ == 'b') {\n                max = Math.max(max, word.length() - 6);\n       \
    \     }\n            if (word.charAt(i) == 'f') {\n                max = Math.max(max,\
    \ word.length() - 7);\n            }\n            if (word.charAt(i) == 'v') {\n\
    \                max = Math.max(max, word.length() - 8);\n            }\n    \
    \        if (word.charAt(i) == 'z') {\n                max = Math.max(max, word.length()\
    \ - 9);\n            }\n        }\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsgxhjg3u.java:63)\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word ==\
    \ null || word.length() == 0) {\n            return \"\";\n        }\n       \
    \ ArrayList<Character> vowels = new ArrayList<>();\n        for (char c : word.toCharArray())\
    \ {\n            vowels.add(c);\n        }\n        vowels.sort(Comparator.comparing(c\
    \ -> {\n            if (c == 'a') return 1;\n            if (c == 'e') return\
    \ 1;\n            if (c == 'i') return 1;\n            if (c == 'o') return 1;\n\
    \            if (c == 'u') return 1;\n            return 2;\n        }));\n  \
    \      int right = word.length() - 1;\n        int left = 0;\n        while (left\
    \ <= right) {\n            int mid = (left + right) / 2;\n            char letter\
    \ = word.charAt(mid);\n            if (isVowel(letter)) {\n                return\
    \ word.substring(mid + 1);\n            }\n            if (letter == 'a' && isVowel(word.charAt(mid\
    \ + 1))) {\n                right = mid - 1;\n                continue;\n    \
    \        }\n            if (letter == 'e' && isVowel(word.charAt(mid + 1))) {\n\
    \                left = mid + 1;\n                continue;\n            }\n \
    \           if (letter == 'i' && isVowel(word.charAt(mid + 1))) {\n          \
    \      left = mid + 1;\n                continue;\n            }\n           \
    \ if (letter == 'o' && isVowel(word.charAt(mid + 1))) {\n                left\
    \ = mid + 1;\n                continue;\n            }\n            if (letter\
    \ == 'u' && isVowel(word.charAt(mid + 1))) {\n                return word.substring(mid\
    \ + 1);\n            }\n            if (letter == 'A' && isVowel(word.charAt(mid\
    \ + 1))) {\n                right = mid - 1;\n                continue;\n    \
    \        }\n            if (letter == 'E' && isVowel(word.charAt(mid + 1))) {\n\
    \                left = mid + 1;\n                continue;\n            }\n \
    \           if (letter == 'I' && isVowel(word.charAt(mid + 1))) {\n          \
    \      left = mid + 1;\n                continue;\n            }\n           \
    \ if (letter == 'O' && isVowel(word.charAt(mid + 1))) {\n                left\
    \ = mid + 1;\n                continue;\n            }\n            if (letter\
    \ == 'U' && isVowel(word.charAt(mid + 1))) {\n                return word.substring(mid\
    \ + 1);\n            }\n            if (letter == 'a' && isVowel(word.charAt(mid\
    \ + 1))) {\n                right = mid - 1;\n                continue;\n    \
    \        }\n            if (letter == 'e' && isVowel(word.charAt(mid + 1))) {\n\
    \                left = mid + 1;\n                continue;\n            }\n \
    \           if (letter == 'i' && isVowel(word.charAt(mid + 1))) {\n          \
    \      left = mid + 1;\n                continue;\n            }\n\n    }\n  \
    \  public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl94scu39.java:99: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<Character>\
    \ vowels = new HashSet<Character>();\n        vowels.add('a', 'e', 'i', 'o', 'u');\n\
    \        char[] arr = word.toCharArray();\n        boolean hasVowel = false;\n\
    \        for (int i = arr.length - 1; i >= 0; i--) {\n            if (vowels.contains(arr[i]))\
    \ {\n                hasVowel = true;\n                break;\n            }\n\
    \        }\n        if (hasVowel) {\n            for (int i = arr.length - 2;\
    \ i >= 0; i--) {\n                if (vowels.contains(arr[i])) {\n           \
    \         return arr[i];\n                }\n            }\n        } else {\n\
    \            for (int i = arr.length - 1; i >= 0; i--) {\n                if (vowels.contains(arr[i]))\
    \ {\n                    System.out.println(arr[i]);\n                    return\
    \ arr[i];\n                }\n            }\n        }\n        return \"\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfagoqtda.java:25: error: method add in interface Set<E> cannot\
    \ be applied to given types;\n        vowels.add('a', 'e', 'i', 'o', 'u');\n \
    \             ^\n  required: Character\n  found:    char,char,char,char,char\n\
    \  reason: actual and formal argument lists differ in length\n  where E is a type-variable:\n\
    \    E extends Object declared in interface Set\n/tmp/tmpfagoqtda.java:37: error:\
    \ incompatible types: char cannot be converted to String\n                   \
    \ return arr[i];\n                              ^\n/tmp/tmpfagoqtda.java:44: error:\
    \ incompatible types: char cannot be converted to String\n                   \
    \ return arr[i];\n                              ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        ArrayList<String>\
    \ vowels = new ArrayList<String>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        String vowelsString = vowels.toString();\n        if(vowelsString.isEmpty()){\n\
    \            return \"\";\n        }\n\n        int vowelsCount = 0;\n       \
    \ for(int i = word.length()-1; i>=0; i--){\n            if(vowels.contains(word.substring(i,i+1))){\n\
    \                vowelsCount++;\n            }\n        }\n        if(vowelsCount\
    \ == 0){\n            return \"\";\n        }\n        \n        String vowelsSubString\
    \ = \"\";\n        for(int i = word.length()-1; i>=0; i--){\n            if(vowels.contains(word.substring(i,i+1))){\n\
    \                vowelsSubString += word.substring(i,i+1);\n            }\n  \
    \      }\n\n        int vowelsSubStringLength = vowelsSubString.length();\n  \
    \      if(vowelsSubStringLength == 0){\n            return \"\";\n        }\n\
    \        \n        int vowelsSubStringIndex = 0;\n        int vowelsSubStringIndex2\
    \ = 0;\n        for(int i = vowelsSubString.length()-1; i>=0; i--){\n        \
    \    if(vowelsSubString.charAt(i) != ''){\n                vowelsSubStringIndex++;\n\
    \            }\n            if(vowelsSubString.charAt(i) != ''){\n           \
    \     vowelsSubStringIndex2++;\n            }\n        }\n        int vowelsSubStringLength\
    \ = vowelsSubString.length();\n        if(vowelsSubStringLength < vowelsSubStringIndex){\n\
    \            return \"\";\n        }\n        \n        int vowelsSubStringLength2\
    \ = vowelsSubString.length();\n        if(vowelsSubStringLength2 > vowelsSubStringIndex){\n\
    \            return \"\";\n        }\n        \n        boolean foundVowel = false;\n\
    \        for(int i = vowelsSubString.length()-1; i>=0; i--){\n            if(vowelsSubString.charAt(i)\
    \ != ''){\n                vowelsSubStringIndex--;\n                foundVowel\
    \ = true;\n            }\n        }\n        if(!foundVowel){\n            return\
    \ \"\";\n        }\n        \n        for(int i = vowelsSubString.length()-1;\
    \ i>=0; i--){\n            if(vowelsSubString.charAt(i) != ''){\n            \
    \    vowelsSubStringIndex--;\n                foundVowel = true;\n           \
    \ }\n        }\n        if(!foundVowel){\n            return \"\";\n        }\n\
    \        \n        if(vowelsSubString.charAt(vowelsSubStringIndex) == vowelsSubString.charAt(vowelsSubStringIndex2)){\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbxitjsn9.java:60: error: empty character literal\n            if(vowelsSubString.charAt(i)\
    \ != ''){\n                                            ^\n/tmp/tmpbxitjsn9.java:63:\
    \ error: empty character literal\n            if(vowelsSubString.charAt(i) !=\
    \ ''){\n                                            ^\n/tmp/tmpbxitjsn9.java:79:\
    \ error: empty character literal\n            if(vowelsSubString.charAt(i) !=\
    \ ''){\n                                            ^\n/tmp/tmpbxitjsn9.java:89:\
    \ error: empty character literal\n            if(vowelsSubString.charAt(i) !=\
    \ ''){\n                                            ^\n/tmp/tmpbxitjsn9.java:101:\
    \ error: illegal start of expression\n    public static void main(String[] args)\
    \ {\n    ^\n5 errors\n"
  stdout: ''
  timestamp: 1660011625
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<String>\
    \ vowels = new HashSet<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n\n        String res = \"\";\n        if(vowels.contains(word.substring(1,\
    \ word.length() - 1))){\n            res = word.substring(1, word.length() - 1);\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcttc8voi.java:38)\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = new ArrayList<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        \n        // use 'word.length()' to\
    \ get the length of the input string\n        int startPos = word.lastIndexOf(\"\
    a\");\n        int endPos = word.lastIndexOf(\"a\");\n        \n        if (startPos\
    \ == -1 || endPos == -1) {\n            return \"\";\n        }\n        \n  \
    \      for (int i = startPos; i < endPos; i++) {\n            if (vowels.contains(word.charAt(i)))\
    \ {\n                return word.substring(startPos, i); \n            }\n   \
    \     }\n        \n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfazu7g89.java:52)\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        return word.replaceAll(\"\
    (?i)^(.?)(?=.*?\\\\1)\", \"$1\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp1tf74x_.java:27)\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String s = word;\n\
    \        char a = s.charAt(s.length() - 1);\n        char e = s.charAt(s.length()\
    \ - 2);\n\n        Set<Character> set = new HashSet<>();\n        set.add(e);\n\
    \        set.add(Character.toLowerCase(e));\n\n        if (set.contains(a)) {\n\
    \            s = s.substring(0, s.length() - 1);\n        }\n        if (set.contains(Character.toUpperCase(a)))\
    \ {\n            s = s.substring(0, s.length() - 1);\n        }\n        System.out.println(s);\n\
    \        return s;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6e4bi3gm.java:42)\n"
  stdout: 'yogurt

    '
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        char[] vowels\
    \ = new char[] {'A','a','E','e','I','i','O','o','U','u'};\n        String vowel\
    \ = String.valueOf(vowels);\n        String str = word.toLowerCase();\n      \
    \  char charArray[] = str.toCharArray();\n        int con = 0;\n        List<String>\
    \ list = new ArrayList<String>();\n        boolean flag = true;\n        for (int\
    \ i = charArray.length - 1; i >= 0; i--) {\n            char temp = charArray[i];\n\
    \            if (flag) {\n                con++;\n                list.add(temp);\n\
    \            }\n            else {\n                con--;\n                list.add(temp);\n\
    \            }\n            if (con == 1) {\n                flag = !flag;\n \
    \           }\n        }\n\n        Collections.sort(list);\n        for (int\
    \ i = 0; i < list.size(); i++) {\n            String str = list.get(i);\n    \
    \        if (vowel.equals(str)) {\n                return str;\n            }\n\
    \        }\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaxs5o4af.java:35: error: incompatible types: char cannot be converted\
    \ to String\n                list.add(temp);\n                         ^\n/tmp/tmpaxs5o4af.java:39:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    list.add(temp);\n                         ^\n/tmp/tmpaxs5o4af.java:48: error:\
    \ variable str is already defined in method getClosestVowel(String)\n        \
    \    String str = list.get(i);\n                   ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // We first\
    \ create an array for all the vowels in the word.\n        String[] vowels = getVowels(word);\n\
    \n        // Now we search the array from the right side \n        for (int i\
    \ = vowels.length - 2; i >= 0; i -= 1) {\n            // If the vowel exists in\
    \ that position in the array,\n            // then we search the closest vowel\
    \ to it \n            if (vowels[i].equals(word)) {\n                // This is\
    \ what we return \n                return word.replaceAll(\"[^AEIOUaeiou]+\",\
    \ \"\");\n            }\n        }\n\n        // If we didn't find any vowels\
    \ \n        // then we return empty string \n        return \"\";\n    }\n   \
    \ public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp979jqk7s.java:25: error: cannot find symbol\n        String[] vowels\
    \ = getVowels(word);\n                          ^\n  symbol:   method getVowels(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if(word == null\
    \ || word.trim().isEmpty())\n            return \"\";\n        String vowelsThatShouldNotCount\
    \ = \"aeiouAEIOU\";\n        int counter = 0;\n        for (int i = 0; i < word.length()\
    \ - 1; i++) {\n            if(vowelsThatShouldNotCount.indexOf(word.charAt(i))\
    \ > -1 && vowelsThatShouldNotCount.indexOf(word.charAt(i+1)) > -1) {\n       \
    \         counter++;\n            }\n        }\n        char[] chars = word.toCharArray();\n\
    \        for(int i = chars.length - 1; i >= 0; i--) {\n            String ch =\
    \ String.valueOf(chars[i]);\n            if(vowelsThatShouldNotCount.indexOf(ch)\
    \ > -1 && vowelsThatShouldNotCount.indexOf(ch[i+1]) > -1)\n                counter--;\n\
    \        }\n        if(counter < 0)\n            return \"\";\n        return\
    \ word.charAt(chars.length - 1);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1rap09x5.java:36: error: array required, but String found\n   \
    \         if(vowelsThatShouldNotCount.indexOf(ch) > -1 && vowelsThatShouldNotCount.indexOf(ch[i+1])\
    \ > -1)\n                                                                    \
    \                           ^\n/tmp/tmp1rap09x5.java:41: error: incompatible types:\
    \ char cannot be converted to String\n        return word.charAt(chars.length\
    \ - 1);\n                          ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011626
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // your code\
    \ goes here\n        if (word.length() > 5)\n            return \"\";\n      \
    \  char[] vowels = new char[]{'a','e','i','o','u'};\n        for (int i = word.length();\
    \ i > 0; i--) {\n            if (word.charAt(i - 1) == word.charAt(i - 2)) {\n\
    \                if (word.charAt(i - 1) >= 'a' && word.charAt(i - 1) <= 'e'\n\
    \                        && word.charAt(i - 2) >= 'a' && word.charAt(i - 2) <=\
    \ 'e'\n                        && word.charAt(i - 3) >= 'a' && word.charAt(i -\
    \ 3) <= 'e'\n                        && word.charAt(i - 4) >= 'a' && word.charAt(i\
    \ - 4) <= 'e'\n                        && word.charAt(i - 5) >= 'a' && word.charAt(i\
    \ - 5) <= 'e')\n                    return word.charAt(i - 1);\n            }\n\
    \        }\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqxt4_zam.java:35: error: incompatible types: char cannot be converted\
    \ to String\n                    return word.charAt(i - 1);\n                \
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1660011627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowel = new ArrayList<>();\n        for (char c : word.toCharArray()) {\n  \
    \          if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n \
    \               vowel.add(c);\n            }\n        }\n        if (vowel.size()\
    \ == 0) {\n            return \"\";\n        }\n        String vowelStr = \"\"\
    ;\n        long startIndex = word.length() - vowel.size();\n        for (int i\
    \ = startIndex; i >= 0; i--) {\n            char cur = word.charAt(i);\n     \
    \       if (vowel.contains(cur)) {\n                vowelStr += cur;\n       \
    \     }\n        }\n        return vowelStr;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpugzzs349.java:27: error: incompatible types: char cannot be converted\
    \ to String\n                vowel.add(c);\n                          ^\n/tmp/tmpugzzs349.java:35:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    for (int i = startIndex; i >= 0; i--) {\n                     ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // Use try-with-resource\
    \ in Java 7 or try {} finally {} block in Java 8\n        try(BufferedReader br\
    \ = new BufferedReader(new InputStreamReader(System.in))) {\n            // Read\
    \ word from keyboard\n            System.out.print(\"Word: \");\n            word\
    \ = br.readLine();\n            if (word == null) {\n                System.out.println(\"\
    You input nothing or pressed enter. Program will terminate now.\");\n        \
    \        return \"\";\n            }\n            // Create a list of vowels\n\
    \            List<String> vowelList = Arrays.asList(\"a\", \"e\", \"i\", \"o\"\
    , \"u\");\n            // Sort the vowel list\n            Collections.sort(vowelList);\n\
    \            // Sort the characters of the word\n            Collections.sort(word.chars(),\
    \ (c1, c2) -> ((Char) c1).compareTo(c2));\n            System.out.println(\"Sorted\
    \ vowels: \" + vowelList);\n            // Loop through the vowels\n         \
    \   boolean found = false;\n            int bestVowelEndIndex = 0;\n         \
    \   for (int i = 0; i < vowelList.size(); i++) {\n                // Use if statement\
    \ to check whether current vowel ends with other vowel\n                if (vowelList.get(i).endsWith(vowelList.get(i\
    \ + 1))) {\n                    // Update best vowel end index\n             \
    \       bestVowelEndIndex = i;\n                    // Set found flag to true\
    \ to find the vowel with two consonants in the right side\n                  \
    \  found = true;\n                    // Break the loop since we can always find\
    \ the best vowel\n                    break;\n                }\n            }\n\
    \            // If no vowel found with two consonants, return an empty string\n\
    \            if (!found) {\n                return \"\";\n            }\n    \
    \        // Find the vowel with two consonants in the right side\n           \
    \ int bestVowelBeginIndex = bestVowelEndIndex - 1;\n            String bestVowel\
    \ = vowelList.get(bestVowelBeginIndex).toString();\n            System.out.println(\"\
    The best vowel is \" + bestVowel);\n            // Calculate the distance between\
    \ the best vowel end index and the word's length minus one characters\n      \
    \      // and return the closest vowel\n            int distance = word.lastIndexOf(bestVowel)\
    \ - 1;\n            System.out.println(\"The distance between \" + bestVowel +\
    \ \" and the word is \" + distance + \" characters\");\n            char closestVowel\
    \ = word.charAt(distance);\n            return closestVowel;\n        }\n    \
    \    catch(Exception e) {\n            System.err.println(\"Program terminated\
    \ by exception \" + e.getMessage());\n        }\n        return \"\";\n    }\n\
    \    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsi_x014v.java:38: error: no suitable method found for sort(IntStream,(c1,c2)->([...]o(c2))\n\
    \            Collections.sort(word.chars(), (c1, c2) -> ((Char) c1).compareTo(c2));\n\
    \                       ^\n    method Collections.<T#1>sort(List<T#1>) is not\
    \ applicable\n      (cannot infer type-variable(s) T#1\n        (actual and formal\
    \ argument lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; IntStream cannot be converted to List<T#2>))\n  where\
    \ T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1> declared\
    \ in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmpsi_x014v.java:38: error: cannot find symbol\n         \
    \   Collections.sort(word.chars(), (c1, c2) -> ((Char) c1).compareTo(c2));\n \
    \                                                        ^\n  symbol:   class\
    \ Char\n  location: class Problem\n/tmp/tmpsi_x014v.java:67: error: incompatible\
    \ types: char cannot be converted to String\n            return closestVowel;\n\
    \                   ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<String>\
    \ vowels = new HashSet<>();\n        for (int i = word.length() - 1; i >= 0; i--)\
    \ {\n            char ch = word.charAt(i);\n            if (Character.isLetter(ch))\
    \ {\n                if (Character.isLowerCase(ch)) {\n                    vowels.add(\"\
    a\");\n                    vowels.add(\"e\");\n                    vowels.add(\"\
    i\");\n                    vowels.add(\"o\");\n                    vowels.add(\"\
    u\");\n                } else {\n                    vowels.add(\"A\");\n    \
    \                vowels.add(\"E\");\n                    vowels.add(\"I\");\n\
    \                    vowels.add(\"O\");\n                    vowels.add(\"U\"\
    );\n                }\n            } else {\n                break;\n        \
    \    }\n        }\n        Optional<String> vowelFound = vowels.stream()\n   \
    \             .filter(x->x.equals(word.charAt(word.length() - 1)))\n         \
    \       .findAny();\n        if (vowelFound.isPresent()) {\n            return\
    \ vowelFound.get();\n        } else {\n            return \"\";\n        }\n \
    \   }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3569anc6.java:55)\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String[] leftConsonants\
    \ = word.substring(0, word.length() - 2).split(\"\");\n        String[] rightConsonants\
    \ = word.substring(word.length() - 1, word.length()).split(\"\");\n        List<String>\
    \ vowels = new ArrayList<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        for (int i = 0; i < leftConsonants.length;\
    \ i++) {\n            if (vowels.contains(leftConsonants[i]) && vowels.contains(rightConsonants[i]))\
    \ {\n                return leftConsonants[i] + rightConsonants[i];\n        \
    \    }\n        }\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.getClosestVowel(tmpcj60ehqe.java:40)\n\
    \tat Problem.main(tmpcj60ehqe.java:47)\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word ==\
    \ null || word.isEmpty()) return \"\";\n\n        List<Character> vowels = new\
    \ ArrayList<>();\n\n        for (char ch : word.toCharArray()) {\n           \
    \ if (Character.isLetter(ch)) {\n                if (Character.isLowerCase(ch))\n\
    \                    vowels.add('a');\n                else\n                \
    \    vowels.add('A');\n            }\n        }\n\n        boolean isPrevChar\
    \ = false, isNextChar = true;\n        \n        for(int i = 0; i < vowels.size();\
    \ i++) {\n            Character ch = vowels.get(i);\n\n            if (isPrevChar\
    \ && ch == 'a') {\n                isPrevChar = false;\n                isNextChar\
    \ = true;\n            }\n            else if (isNextChar && ch == 'A') {\n  \
    \              isPrevChar = true;\n                isNextChar = false;\n     \
    \       }\n            else {\n                if (Character.isLowerCase(ch))\n\
    \                    isPrevChar = true;\n                else\n              \
    \      isPrevChar = false;\n                isNextChar = true;\n            }\n\
    \        }\n\n        OptionalInt upperBound = vowels.stream().mapToInt(Character\
    \ -> Character.isUpperCase(ch))\n            .filter(n -> n > 0).findFirst();\n\
    \n        return vowels.stream()\n            .filter(Character.isLowerCase(ch))\n\
    \            .filter(n -> n >= upperBound.orElse(1))\n            .filter(n ->\
    \ n <= vowels.size() - upperBound.orElse(0))\n            .max((a, b) -> a - b).orElse(\"\
    \");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8m8uzhfn.java:59: error: cannot find symbol\n        OptionalInt\
    \ upperBound = vowels.stream().mapToInt(Character -> Character.isUpperCase(ch))\n\
    \                                                                            \
    \                 ^\n  symbol:   variable ch\n  location: class Problem\n/tmp/tmp8m8uzhfn.java:63:\
    \ error: cannot find symbol\n            .filter(Character.isLowerCase(ch))\n\
    \                                          ^\n  symbol:   variable ch\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // Your code\
    \ here\n        if(word == null || word.trim().isEmpty()) {\n            return\
    \ \"\";\n        }\n        char lastCharacter = word.charAt(word.length()-1);\n\
    \        char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'y' };\n        char[] consonants\
    \ = { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x' };\n        List<Character> vowelList = new ArrayList<>();\n\
    \        List<Character> consonantList = new ArrayList<>();\n        for (int\
    \ i=0; i<vowels.length; i++) {\n            char vowel = vowels[i];\n        \
    \    if (vowel==lastCharacter || vowel == 'a' || vowel == 'e' || vowel == 'i'\
    \ || vowel == 'o' || vowel == 'u' || vowel == 'y') {\n                vowelList.add(vowel);\n\
    \            }\n        }\n        for (int i=0; i<consonants.length; i++) {\n\
    \            char consonant = consonants[i];\n            if (consonant==lastCharacter\
    \ || consonant == 'a' || consonant == 'e' || consonant == 'i' || consonant ==\
    \ 'o' || consonant == 'u' || consonant == 'y') {\n                consonantList.add(consonant);\n\
    \            }\n        }\n        Character firstVowel = vowelList.get(0);\n\
    \        Character firstConsonant = consonantList.get(0);\n        if(firstVowel\
    \ == firstConsonant) {\n            return firstVowel;\n        }\n        String\
    \ vowel = firstVowel.toString();\n        String consonant = firstConsonant.toString();\n\
    \        String result = \"\";\n        if (vowel.charAt(1)=='u') {\n        \
    \    result = vowel.substring(0,1)+vowel.substring(1,2)+consonant;\n        }\
    \ else if (vowel.charAt(1)=='a') {\n            result = vowel.substring(0,1)+consonant;\n\
    \        } else if (vowel.charAt(1)=='e') {\n            result = consonant;\n\
    \        } else if (vowel.charAt(1)=='o') {\n            result = consonant.substring(0,1)+vowel.substring(1,2);\n\
    \        } else if (vowel.charAt(1)=='i') {\n            result = consonant.substring(0,1)+vowel.substring(1,2);\n\
    \        } else if (vowel.charAt(1)=='y') {\n            result = consonant.substring(0,1)+vowel.substring(1,2);\n\
    \        } else if (vowel.charAt(1)=='a') {\n            result = consonant.substring(0,1)+vowel.substring(1,2);\n\
    \        } else if (vowel.charAt(1)=='u') {\n            result = consonant.substring(0,1)+vowel.substring(1,2);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgpb6myoc.java:48: error: incompatible types: Character cannot be\
    \ converted to String\n            return firstVowel;\n                   ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word.length()\
    \ < 2) return \"\";\n        int vowel = 0;\n        int i = word.length() - 1;\n\
    \        while(i>0) {\n            char c = word.charAt(i);\n            if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                vowel\
    \ += 1;\n                i -= 1;\n            } else {\n                i -= 1;\n\
    \            }\n        }\n        int j = word.length() - 1;\n        while(j>0)\
    \ {\n            char c = word.charAt(j);\n            if(c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n                vowel -= 1;\n      \
    \          j += 1;\n            } else {\n                j += 1;\n          \
    \  }\n        }\n        if (vowel == 0) return \"\";\n        if(vowel > 0) return\
    \ \"\";\n        int min = 0;\n        int max = word.length() - 1;\n        while(min\
    \ < max) {\n            int mid = (min + max) / 2;\n            char c = word.charAt(mid);\n\
    \            if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \                min = mid + 1;\n            } else {\n                max = mid\
    \ - 1;\n            }\n        }\n        return word.substring(min, max);\n \
    \   }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 6\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.getClosestVowel(tmp4i6z087z.java:38)\n\
    \tat Problem.main(tmp4i6z087z.java:62)\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<String>\
    \ vowels = new HashSet<>(Arrays.asList(new String[]{\"a\", \"e\", \"i\", \"o\"\
    , \"u\"}));\n        StringBuilder result = new StringBuilder();\n        IntStream.range(0,\
    \ word.length() - 1).forEach(i -> {\n            char c = word.charAt(i);\n  \
    \          if (vowels.contains(word.substring(i, i + 1).trim().toLowerCase()))\
    \ {\n                result.append(word.substring(i, i + 1));\n              \
    \  return;\n            }\n            int index = word.indexOf(String.valueOf(c\
    \ + 1), i);\n            if (index > -1) {\n                result.append(word.substring(i,\
    \ index));\n                return;\n            }\n        });\n        return\
    \ result.toString().trim();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp48s8evhw.java:41)\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int[] vowels\
    \ = {2,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26};\n    \
    \    char ending = word.charAt(word.length()-1);\n        char firstConsonant\
    \ = word.charAt(0);\n        char secondConsonant = word.charAt(1);\n        char[]\
    \ charArray = word.toCharArray();\n        int startPosition = 0;\n        boolean\
    \ foundVowel = false;\n        for(int i=0;i<vowels.length;i++){\n           \
    \ if (charArray[i] == 'a'){\n                foundVowel = true;\n            }\n\
    \            if (foundVowel == true){\n                startPosition = i;\n  \
    \              break;\n            }\n        }\n        boolean foundVowelBefore\
    \ = false;\n        for(int i=0;i<vowels.length;i++){\n            if (vowels[i]\
    \ > firstConsonant && vowels[i] <= ending){\n                if (charArray[i]\
    \ == 'a'){\n                    foundVowelBefore = true;\n                }\n\
    \                if (foundVowelBefore == true){\n                    break;\n\
    \                }\n            }\n        }\n        if (foundVowel == false){\n\
    \            return \"\";\n        }\n        boolean foundVowelAfter = false;\n\
    \        for(int i=0;i<vowels.length;i++){\n            if (vowels[i] < firstConsonant\
    \ && vowels[i] > ending){\n                if (charArray[i] == 'a'){\n       \
    \             foundVowelAfter = true;\n                }\n                if (foundVowelAfter\
    \ == true){\n                    break;\n                }\n            }\n  \
    \      }\n        if (foundVowelAfter == false){\n            return \"\";\n \
    \       }\n        boolean foundVowelMiddle = false;\n        for(int i=0;i<vowels.length;i++){\n\
    \            if (vowels[i] == firstConsonant && vowels[i+1] == secondConsonant){\n\
    \                if (charArray[i] == 'a'){\n                    foundVowelMiddle\
    \ = true;\n                }\n                if (foundVowelMiddle == true){\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     if (foundVowelMiddle == false){\n            return \"\";\n        }\n \
    \       int vowelPositionBefore = vowels[startPosition];\n        int vowelPositionAfter\
    \ = vowels[startPosition+1];\n        int vowelPositionMiddle = vowels[startPosition+2];\n\
    \        int vowelPosition = (vowelPositionAfter+vowelPositionBefore)/2;\n   \
    \     if (vowelPosition < vowelPositionMiddle){\n            return \"\";\n  \
    \      }\n        return vowels[vowelPosition];\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp976pwuuo.java:89: error: incompatible types: int cannot be converted\
    \ to String\n        return vowels[vowelPosition];\n                     ^\n1\
    \ error\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        char[] charArr\
    \ = word.toCharArray();\n        Arrays.sort(charArr);\n        String res = \"\
    \";\n        for(int i = charArr.length - 1; i > -1; i--) {\n            char\
    \ c = charArr[i];\n            if(c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n                if(i+1 < charArr.length && charArr[i+1] == 'a'){\n\
    \                    i++;\n                }\n                if(i-1 > 0 && charArr[i-1]\
    \ == 'e'){\n                    i--;\n                }\n                if(i\
    \ > 0 && i < charArr.length - 1 && charArr[i+1] == 'e'){\n                   \
    \ i++;\n                }\n                if(i+1 < charArr.length && charArr[i+1]\
    \ == 'e'){\n                    i++;\n                }\n                if(i-1\
    \ > 0 && charArr[i-1] == 'i'){\n                    i--;\n                }\n\
    \                if(i > 0 && i < charArr.length - 1 && charArr[i+1] == 'i'){\n\
    \                    i++;\n                }\n                if(i+1 < charArr.length\
    \ && charArr[i+1] == 'i'){\n                    i++;\n                }\n    \
    \            if(i-1 > 0 && charArr[i-1] == 'o'){\n                    i--;\n \
    \               }\n                if(i > 0 && i < charArr.length - 1 && charArr[i+1]\
    \ == 'o'){\n                    i++;\n                }\n                if(i+1\
    \ < charArr.length && charArr[i+1] == 'o'){\n                    i++;\n      \
    \          }\n                if(i-1 > 0 && charArr[i-1] == 'u'){\n          \
    \          i--;\n                }\n                if(i > 0 && i < charArr.length\
    \ - 1 && charArr[i+1] == 'u'){\n                    i++;\n                }\n\
    \                if(i > 0 && i < charArr.length - 1 && charArr[i+1] == 'a'){\n\
    \                    i++;\n                }\n                if(i < charArr.length\
    \ - 1 && charArr[i-1] == 'e'){\n                    i--;\n                }\n\
    \                if(i < charArr.length - 1 && charArr[i-1] == 'i'){\n        \
    \            i--;\n                }\n                if(i < charArr.length -\
    \ 1 && charArr[i-1] == 'o'){\n                    i--;\n                }\n  \
    \              if(i < charArr.length - 1 && charArr[i-1] == 'u'){\n          \
    \          i--;\n                }\n                if(i > 0 && i < charArr.length\
    \ - 1 && charArr[i+1] == 'a'){\n                    i++;\n                }\n\
    \                if(i < charArr.length - 1 && charArr[i-1] == 'e'){\n        \
    \            i--;\n                }\n                if(i < charArr.length -\
    \ 1 && charArr[i-1] == 'i'){\n                    i--;\n                }\n  \
    \              if(i < charArr.length - 1 && \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphd_efs0t.java:91: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmphd_efs0t.java:92: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011627
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u'};\n        char[] consonants = {'B', 'D', 'G', 'J',\
    \ 'K', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'V', 'W', 'Y'};\n        boolean found\
    \ = false;\n        int i = 0;\n        int j = word.length();\n\n        while\
    \ ((i < j) && (!found)) {\n            int k = i;\n            int flag = 0;\n\
    \            while (k < j) {\n                char c = word.charAt(k);\n     \
    \           if (Character.isLetter(c)) {\n                    if (consonants.contains(Character.toLowerCase(c)))\
    \ {\n                        k = j;\n                        flag = 1;\n     \
    \               }\n                }\n                else {\n               \
    \     flag = 0;\n                    break;\n                }\n             \
    \   k++;\n            }\n            if ((flag == 1) && i < j) {\n           \
    \     i = k;\n            }\n            else {\n                j--;\n      \
    \      }\n        }\n        if (found) {\n            return word.substring(i,\
    \ j);\n        }\n        else {\n            return \"\";\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp17s_dkho.java:36: error: cannot find symbol\n                 \
    \   if (consonants.contains(Character.toLowerCase(c))) {\n                   \
    \               ^\n  symbol:   method contains(char)\n  location: variable consonants\
    \ of type char[]\n1 error\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String result\
    \ = \"\";\n        String vowels = \"AEIOUaeiou\";\n        word = word.toUpperCase();\n\
    \        if (word.length() <= 1) {\n            return result;\n        }\n  \
    \      for (int i = word.length() - 1; i >= 0; i--) {\n            if (vowels.contains(word.charAt(i)))\
    \ {\n                result = word.substring(0, i + 1) + word.charAt(i);\n   \
    \             return result;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt5m8yjul.java:31: error: incompatible types: char cannot be converted\
    \ to CharSequence\n            if (vowels.contains(word.charAt(i))) {\n      \
    \                                     ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = Arrays.asList(\"a\",\"e\",\"i\",\"o\",\"u\");\n        String result\
    \ = \"\";\n        char[] characters = word.toCharArray();\n        int length\
    \ = characters.length;\n        for (int i = length-1; i >= 0; i--) {\n      \
    \      if (vowels.contains(String.valueOf(characters[i]))) {\n               \
    \ result = String.valueOf(characters[i]);\n                break;\n          \
    \  }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiwqz1ih3.java:39)\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String[] vowels\
    \ = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"}; // Vowels in the beginning and\
    \ ending doesn't count\n        String[] consonants = {\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"z\"}; // Consonants do\n        // count\n\
    \        \n        // For each vowel in the middle, consonants to the left, and\
    \ consonants to the right\n        for (int i = 0; i < vowels.length - 1; ++i)\
    \ {\n            // For each vowel\n            for(int j = 0; j < vowels.length;\
    \ ++j) {\n                // For each consonants to the left\n               \
    \ for (int k = 0; k < consonants.length; ++k) {\n                    // For each\
    \ consonants to the right\n                    for (int m = 0; m < consonants.length;\
    \ ++m) {\n                        String temp = word.substring(i, i + 2);\n  \
    \                      \n                        if (temp.toLowerCase().contains(vowels[j]))\
    \ { \n                            temp = word.substring(i, i + 2);\n         \
    \                   \n                            if (temp.toLowerCase().contains(consonants[k]))\
    \ { \n                                temp = word.substring(i, i + 2);\n     \
    \                           \n                                if (temp.toLowerCase().contains(consonants[m]))\
    \ { \n                                    return \"\"; // Found a vowel\n    \
    \                            }\n                            }\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n        return \"\"; // No vowel found\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_31wied3.java:56)\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int i=0;\n \
    \       for (i=0;i<word.length()-1;i++) {\n            if (word.charAt(i)=='a'||word.charAt(i)=='e'||word.charAt(i)=='i'||word.charAt(i)=='o'||word.charAt(i)=='u')\n\
    \            {\n                return word.substring(0,i+1);\n            }\n\
    \        }\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeb4hcvt3.java:34)\n"
  stdout: ''
  timestamp: 1660011629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        \n        List<String>\
    \ vowel = new ArrayList<>(Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\"));\n\
    \        int startIndex = word.length() - 2;\n        int endIndex = word.length()\
    \ - 1;\n        for(int i = endIndex; i >= startIndex; i--) {\n            if(vowel.contains(word.charAt(i)))\n\
    \                return word.substring(0, i);\n        }\n        \n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwly3a6yk.java:36)\n"
  stdout: ''
  timestamp: 1660011629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        boolean flag\
    \ = false;\n        String vowel=\"\";\n        ArrayList<String> arr=new ArrayList<>();\n\
    \        for(int i=word.length()-1;i>=0;i--) {\n            char c=word.charAt(i);\n\
    \            if((c>='A' && c<='Z') || (c>='a' && c<='z')) {\n                arr.add(c);\n\
    \            }\n        }\n        arr.add(word.charAt(word.length()-1));\n  \
    \      Collections.sort(arr);\n        arr.stream().forEach(x->{\n           \
    \ if(x==\"A\" || x==\"a\") {\n                flag=true;\n            }\n    \
    \    });\n        if(!flag) {\n            return vowel;\n        }\n        for(int\
    \ i=0;i<arr.size()-1;i++) {\n            if(word.charAt(arr.size()-1)==(arr.get(i)))\
    \ {\n                vowel=arr.get(i);\n                break;\n            }\n\
    \        }\n        return vowel;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzswzcp2g.java:30: error: incompatible types: char cannot be converted\
    \ to String\n                arr.add(c);\n                        ^\n/tmp/tmpzswzcp2g.java:33:\
    \ error: incompatible types: char cannot be converted to String\n        arr.add(word.charAt(word.length()-1));\n\
    \                           ^\n/tmp/tmpzswzcp2g.java:44: error: bad operand types\
    \ for binary operator '=='\n            if(word.charAt(arr.size()-1)==(arr.get(i)))\
    \ {\n                                        ^\n  first type:  char\n  second\
    \ type: String\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<String>\
    \ vowels = new HashSet<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        String s = \"\";\n        Set<String> cons = new HashSet<>();\n\
    \        cons.add(\"b\");\n        cons.add(\"c\");\n        cons.add(\"d\");\n\
    \        cons.add(\"f\");\n        cons.add(\"g\");\n        cons.add(\"h\");\n\
    \        cons.add(\"j\");\n        cons.add(\"k\");\n        cons.add(\"l\");\n\
    \        cons.add(\"m\");\n        cons.add(\"n\");\n        cons.add(\"p\");\n\
    \        cons.add(\"q\");\n        cons.add(\"r\");\n        cons.add(\"s\");\n\
    \        cons.add(\"t\");\n        cons.add(\"v\");\n        cons.add(\"w\");\n\
    \        cons.add(\"x\");\n        cons.add(\"y\");\n        cons.add(\"z\");\n\
    \        StringBuilder sb = new StringBuilder();\n        if (word.length() >\
    \ 2) {\n            word = word.substring(0, word.length() - 1);\n           \
    \ for (char c : word.toCharArray()) {\n                if (vowels.contains(Character.toString(c))\n\
    \                        || cons.contains(Character.toString(c))) {\n        \
    \            sb.append(c);\n                    break;\n                }\n  \
    \          }\n            if (sb.length() != 0) {\n                s = sb.toString();\n\
    \            }\n        }\n        return s;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjm9j6fnw.java:70)\n"
  stdout: ''
  timestamp: 1660011629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        char[] letters\
    \ = word.toCharArray();\n        int len = letters.length;\n        int i = 0;\n\
    \        String vowel = \"U\";\n        String outputVowel = \"\";\n        for(int\
    \ j = 0; j < len; j++) {\n            char c = letters[j];\n            if(c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n                if(j > 0 && j - 1 <\
    \ len) {\n                    char c2 = letters[j - 1];\n                    if(c2\
    \ == 'a' || c2 == 'e' || c2 == 'i' || c2 == 'o' || c2 == 'u' || c2 == 'A' || c2\
    \ == 'E' || c2 == 'I' || c2 == 'O' || c2 == 'U') {\n                        if(i\
    \ < len - 1) {\n                            char c3 = letters[i + 1];\n      \
    \                      if(c3 == 'a' || c3 == 'e' || c3 == 'i' || c3 == 'o' ||\
    \ c3 == 'u' || c3 == 'A' || c3 == 'E' || c3 == 'I' || c3 == 'O' || c3 == 'U')\
    \ {\n                                outputVowel = vowel;\n                  \
    \              break;\n                            }\n                       \
    \ }\n                    }\n                }\n            }\n        }\n    \
    \    return outputVowel;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0isbd7yf.java:49)\n"
  stdout: ''
  timestamp: 1660011629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        char[] ch =\
    \ word.toCharArray();\n        int c1 = 0, c2 = ch.length;\n        int i = word.length()\
    \ - 1;\n        // find first and last position of consonants\n        while ((c1\
    \ < c2) && (Character.isLetter(ch[c2])) && (Character.isLetter(ch[c1]))) c1 ++;\n\
    \        // find the first and last position of vowels\n        while ((c1 < c2)\
    \ && (Character.isVowel(ch[c2])) && (Character.isVowel(ch[c1]))) c1 ++;\n    \
    \    while ((c1 < c2) && (Character.isVowel(ch[c2])) && (Character.isVowel(ch[c1])))\
    \ c2 --;\n        if ((c1 == c2) && (c2 < ch.length)) {\n            int j = 0;\n\
    \            while (!Character.isLetter(ch[j]) && (j < ch.length)) {\n       \
    \         j++;\n            }\n            while (!Character.isLetter(ch[j]) &&\
    \ (j < ch.length)) {\n                j++;\n            }\n            if (Character.isLetter(ch[j])\
    \ && (j > 0)) {\n                return word.substring(j);\n            }\n  \
    \      }\n        return \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvhivc8v7.java:30: error: cannot find symbol\n        while ((c1\
    \ < c2) && (Character.isVowel(ch[c2])) && (Character.isVowel(ch[c1]))) c1 ++;\n\
    \                                      ^\n  symbol:   method isVowel(char)\n \
    \ location: class Character\n/tmp/tmpvhivc8v7.java:30: error: cannot find symbol\n\
    \        while ((c1 < c2) && (Character.isVowel(ch[c2])) && (Character.isVowel(ch[c1])))\
    \ c1 ++;\n                                                                   \
    \  ^\n  symbol:   method isVowel(char)\n  location: class Character\n/tmp/tmpvhivc8v7.java:31:\
    \ error: cannot find symbol\n        while ((c1 < c2) && (Character.isVowel(ch[c2]))\
    \ && (Character.isVowel(ch[c1]))) c2 --;\n                                   \
    \   ^\n  symbol:   method isVowel(char)\n  location: class Character\n/tmp/tmpvhivc8v7.java:31:\
    \ error: cannot find symbol\n        while ((c1 < c2) && (Character.isVowel(ch[c2]))\
    \ && (Character.isVowel(ch[c1]))) c2 --;\n                                   \
    \                                  ^\n  symbol:   method isVowel(char)\n  location:\
    \ class Character\n4 errors\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<Character>\
    \ vowels = Set.of('a', 'e', 'i', 'o', 'u');\n        String vowel = word.substring(word.length()\
    \ - 1).chars().filter(v -> vowels.contains(v)).findFirst().get();\n        return\
    \ vowel;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0449o9c5.java:25: error: cannot find symbol\n        String vowel\
    \ = word.substring(word.length() - 1).chars().filter(v -> vowels.contains(v)).findFirst().get();\n\
    \                                                                            \
    \                                ^\n  symbol:   method get()\n  location: class\
    \ OptionalInt\n1 error\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<String>\
    \ vowels = new HashSet<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"u\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"a\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"e\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"u\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"a\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"y\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"e\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    i\");\n        vowels.add(\"o\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    y\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"u\");\n        vowels.add(\"e\");\n        vowels.add(\"\
    a\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        vowels.add(\"u\");\n        vowels.add(\"\
    \n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyoyt7xwi.java:98: error: unclosed string literal\n        vowels.add(\"\
    \n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int start =\
    \ 0;\n        int end = word.length();\n        while(start < end) {\n       \
    \     char letter = word.charAt(start);\n            char nextLetter = word.charAt(end);\n\
    \            if(vowels.contains(letter)) {\n                start++;\n       \
    \         end--;\n            } else {\n                end--;\n            }\n\
    \        }\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6up393np.java:29: error: cannot find symbol\n            if(vowels.contains(letter))\
    \ {\n               ^\n  symbol:   variable vowels\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<Character>\
    \ vowel = new ArrayList<>();\n        vowel.add('a');\n        vowel.add('e');\n\
    \        vowel.add('i');\n        vowel.add('o');\n        vowel.add('u');\n \
    \       vowel.add('y');\n        vowel.add('i');\n        vowel.add('o');\n  \
    \      vowel.add('u');\n        vowel.add('y');\n\n        List<Character> vowelUpper\
    \ = new ArrayList<>();\n        vowelUpper.add(Character.toUpperCase('a'));\n\
    \        vowelUpper.add(Character.toUpperCase('e'));\n        vowelUpper.add(Character.toUpperCase('i'));\n\
    \        vowelUpper.add(Character.toUpperCase('o'));\n        vowelUpper.add(Character.toUpperCase('u'));\n\
    \        vowelUpper.add(Character.toUpperCase('y'));\n        vowelUpper.add(Character.toUpperCase('i'));\n\
    \        vowelUpper.add(Character.toUpperCase('o'));\n        vowelUpper.add(Character.toUpperCase('u'));\n\
    \        vowelUpper.add(Character.toUpperCase('y'));\n\n        List<Character>\
    \ vowelLower = new ArrayList<>();\n        vowelLower.add(Character.toLowerCase('a'));\n\
    \        vowelLower.add(Character.toLowerCase('e'));\n        vowelLower.add(Character.toLowerCase('i'));\n\
    \        vowelLower.add(Character.toLowerCase('o'));\n        vowelLower.add(Character.toLowerCase('u'));\n\
    \        vowelLower.add(Character.toLowerCase('y'));\n        vowelLower.add(Character.toLowerCase('i'));\n\
    \        vowelLower.add(Character.toLowerCase('o'));\n        vowelLower.add(Character.toLowerCase('u'));\n\
    \        vowelLower.add(Character.toLowerCase('y'));\n        \n        List<Character>\
    \ consonants = new ArrayList<>();\n        consonants.add('b');\n        consonants.add('c');\n\
    \        consonants.add('d');\n        consonants.add('f');\n        consonants.add('g');\n\
    \        consonants.add('h');\n        consonants.add('j');\n        consonants.add('k');\n\
    \        consonants.add('l');\n        consonants.add('m');\n        consonants.add('n');\n\
    \        consonants.add('p');\n        consonants.add('q');\n        consonants.add('r');\n\
    \        consonants.add('s');\n        consonants.add('t');\n        consonants.add('v');\n\
    \        consonants.add('w');\n        consonants.add('x');\n        consonants.add('\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp56r6iw_7.java:80: error: illegal line end in character literal\n\
    \        consonants.add('\n                       ^\n1 error\n"
  stdout: ''
  timestamp: 1660011628
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<Character>\
    \ vowels = new HashSet<>();\n        for (char c : word.toCharArray()) {\n   \
    \         if (isVowel(c)) vowels.add(c);\n        }\n        \n        Set<Character>\
    \ startConsonants = new HashSet<>();\n        for (char c : word.toCharArray())\
    \ {\n            if (isConsonant(c)) startConsonants.add(c);\n        }\n    \
    \    \n        Set<Character> endConsonants = new HashSet<>();\n        for (char\
    \ c : word.toCharArray()) {\n            if (isConsonant(c)) endConsonants.add(c);\n\
    \        }\n        \n        \n        if (startConsonants.equals(endConsonants))\
    \ {\n            return \"\";\n        }\n        \n        \n        for (char\
    \ c : word.toCharArray()) {\n            if (isConsonant(c)) {\n             \
    \   if (vowels.contains(c)) {\n                    char left = getLeftVowel(c);\n\
    \                    if (vowels.contains(left)) return left + getRightVowel(c);\n\
    \                    \n                    char right = getRightVowel(c);\n  \
    \                  if (vowels.contains(right)) return right + getLeftVowel(c);\n\
    \                }\n            }\n        }\n        \n        return \"\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1wa_lh33.java:26: error: cannot find symbol\n            if (isVowel(c))\
    \ vowels.add(c);\n                ^\n  symbol:   method isVowel(char)\n  location:\
    \ class Problem\n/tmp/tmp1wa_lh33.java:31: error: cannot find symbol\n       \
    \     if (isConsonant(c)) startConsonants.add(c);\n                ^\n  symbol:\
    \   method isConsonant(char)\n  location: class Problem\n/tmp/tmp1wa_lh33.java:36:\
    \ error: cannot find symbol\n            if (isConsonant(c)) endConsonants.add(c);\n\
    \                ^\n  symbol:   method isConsonant(char)\n  location: class Problem\n\
    /tmp/tmp1wa_lh33.java:46: error: cannot find symbol\n            if (isConsonant(c))\
    \ {\n                ^\n  symbol:   method isConsonant(char)\n  location: class\
    \ Problem\n/tmp/tmp1wa_lh33.java:48: error: cannot find symbol\n             \
    \       char left = getLeftVowel(c);\n                                ^\n  symbol:\
    \   method getLeftVowel(char)\n  location: class Problem\n/tmp/tmp1wa_lh33.java:49:\
    \ error: cannot find symbol\n                    if (vowels.contains(left)) return\
    \ left + getRightVowel(c);\n                                                 \
    \            ^\n  symbol:   method getRightVowel(char)\n  location: class Problem\n\
    /tmp/tmp1wa_lh33.java:51: error: cannot find symbol\n                    char\
    \ right = getRightVowel(c);\n                                 ^\n  symbol:   method\
    \ getRightVowel(char)\n  location: class Problem\n/tmp/tmp1wa_lh33.java:52: error:\
    \ cannot find symbol\n                    if (vowels.contains(right)) return right\
    \ + getLeftVowel(c);\n                                                       \
    \        ^\n  symbol:   method getLeftVowel(char)\n  location: class Problem\n\
    8 errors\n"
  stdout: ''
  timestamp: 1660011629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // You can write\
    \ your code here\n        StringBuilder result = new StringBuilder();\n      \
    \  for(char c : word.toCharArray())\n        {\n            if(c>='A' && c<='Z')\n\
    \            {\n                if(c==word.charAt(word.length()-1))\n        \
    \            result.append(c);\n            }\n            else\n            {\n\
    \                String subString = new StringBuilder();\n                int\
    \ endIndex = word.length()-1;\n                for(char d : word.substring(word.length()-2,word.length()).toCharArray())\n\
    \                {\n                    if(d>='A' && d<='Z')\n               \
    \     {\n                        subString.append(d);\n                    }\n\
    \                    else\n                    {\n                        break;\n\
    \                    }\n                }\n                if(subString.equals(\"\
    \"))\n                {\n                    break;\n                }\n     \
    \           else\n                {\n                    if(endIndex<0)\n    \
    \                {\n                        endIndex=0;\n                    }\n\
    \                    if(subString.compareTo(word.substring(word.length()-2,endIndex))>0)\n\
    \                    {\n                        result.append(subString);\n  \
    \                  }\n                    else\n                    {\n      \
    \                  result.append(word.substring(word.length()-2,endIndex));\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result.toString();\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_8kumlc0.java:35: error: incompatible types: StringBuilder cannot\
    \ be converted to String\n                String subString = new StringBuilder();\n\
    \                                   ^\n/tmp/tmp_8kumlc0.java:41: error: cannot\
    \ find symbol\n                        subString.append(d);\n                \
    \                 ^\n  symbol:   method append(char)\n  location: variable subString\
    \ of type String\n2 errors\n"
  stdout: ''
  timestamp: 1660011629
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ result = new ArrayList<>();\n        char[] arr = word.toCharArray();\n    \
    \    Arrays.sort(arr);\n        char[] arr = word.toCharArray();\n        Arrays.sort(arr);\n\
    \        StringBuilder finalResult = new StringBuilder();\n        for(int i =\
    \ 0; i<arr.length-1; i++) {\n            if(Character.isLetter(arr[i])) {\n  \
    \              for(int j=0; j<arr.length; j++) {\n                    if(Character.isLetter(arr[j]))\
    \ {\n                        if(Character.isUpperCase(arr[j])) {\n           \
    \                 result.add(arr[j]);\n                            break;\n  \
    \                      }\n                    }\n                }\n         \
    \   }\n        }\n        Collections.sort(result);\n        Collections.sort(result);\n\
    \        boolean b = false;\n        for(int i = 0; i<result.size(); i++) {\n\
    \            if(result.get(i).equals(\"a\") || result.get(i).equals(\"e\") ||\
    \ result.get(i).equals(\"i\") || result.get(i).equals(\"o\") || result.get(i).equals(\"\
    u\")) {\n                b = true;\n                break;\n            }\n  \
    \      }\n        if(!b) {\n            return \"\";\n        }\n        for(int\
    \ i = 0; i<result.size(); i++) {\n            if(result.get(i).equals(\"A\") ||\
    \ result.get(i).equals(\"E\") || result.get(i).equals(\"I\") || result.get(i).equals(\"\
    O\") || result.get(i).equals(\"U\")) {\n                b = true;\n          \
    \      break;\n            }\n        }\n        if(!b) {\n            return\
    \ \"\";\n        }\n        finalResult.append(result.get(0));\n        for(int\
    \ i = 1; i<result.size(); i++) {\n            if(result.get(i).equals(\"a\") ||\
    \ result.get(i).equals(\"e\") || result.get(i).equals(\"i\") || result.get(i).equals(\"\
    o\") || result.get(i).equals(\"u\")) {\n                finalResult.append(result.get(i));\n\
    \            }\n        }\n        return finalResult.toString();\n    }\n   \
    \ public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4403q0ww.java:27: error: variable arr is already defined in method\
    \ getClosestVowel(String)\n        char[] arr = word.toCharArray();\n        \
    \       ^\n/tmp/tmp4403q0ww.java:35: error: incompatible types: char cannot be\
    \ converted to String\n                            result.add(arr[j]);\n     \
    \                                     ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String[] splitted\
    \ = word.split(\"\");\n        String[] consonants = splitted.filter(c -> !Character.isLetter(c)).collect(Collectors.toList()).toArray(new\
    \ String[splitted.length]);\n        String[] vowels = splitted.filter(c -> Character.isLetter(c)\
    \ && Character.getType(c) == Character.VOWEL).collect(Collectors.toList()).toArray(new\
    \ String[splitted.length]);\n        System.out.println(Arrays.toString(consonants));\n\
    \        System.out.println(Arrays.toString(vowels));\n        if (consonants.length\
    \ == 0 || vowels.length == 0) return \"\";\n        String vowelStr = vowels[vowels.length\
    \ - 1];\n        char[] vowel = vowelStr.toCharArray();\n        char[] consonants\
    \ = consonants.clone();\n        Arrays.sort(consonants);\n        Arrays.sort(vowel);\n\
    \        if (vowelStr.charAt(0) == consonants[0]) {\n            if (vowelStr.charAt(vowel.length\
    \ - 1) == consonants[consonants.length - 1]) {\n                return vowelStr;\n\
    \            }\n            return \"\";\n        }\n        int low = 0;\n  \
    \      int high = vowel.length - 1;\n        boolean found = false;\n        while\
    \ (low <= high) {\n            int middle = (low + high) / 2;\n            if\
    \ (vowel[middle] == consonants[middle]) {\n                if (vowelStr.charAt(vowel.length\
    \ - 1 - middle) == consonants[middle]) {\n                    found = true;\n\
    \                    break;\n                }\n                if (vowelStr.charAt(vowel.length\
    \ - 1 - middle) == consonants[middle + 1]) {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (vowelStr.charAt(vowel.length - 1 - middle) == consonants[middle]) {\n     \
    \           found = true;\n                break;\n            }\n           \
    \ if (vowelStr.charAt(vowel.length - 1 - middle) == consonants[middle + 1]) {\n\
    \                found = true;\n                break;\n            }\n      \
    \      if (vowelStr.charAt(vowel.length - 1 - middle) < consonants[middle]) {\n\
    \                low = middle + 1;\n            }\n            else {\n      \
    \          high = middle - 1;\n            }\n        }\n        if (!found) return\
    \ \"\";\n        int middle = (low + high) / 2;\n        if (vowel[middle] ==\
    \ consonants[middle]) {\n            if (vowelStr.charAt(vowel.length - 1 - middle)\
    \ == consonants[middle]) {\n                return vowelStr;\n            }\n\
    \            return \"\";\n        }\n        if (vowelStr.charAt(vowel.length\
    \ - 1 - middle) == consonants[middle]) {\n            return vowelStr;\n     \
    \   }\n        return \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpczf94yxs.java:25: error: cannot find symbol\n        String[] consonants\
    \ = splitted.filter(c -> !Character.isLetter(c)).collect(Collectors.toList()).toArray(new\
    \ String[splitted.length]);\n                                      ^\n  symbol:\
    \   method filter((c)->!Char[...]er(c))\n  location: variable splitted of type\
    \ String[]\n/tmp/tmpczf94yxs.java:26: error: cannot find symbol\n        String[]\
    \ vowels = splitted.filter(c -> Character.isLetter(c) && Character.getType(c)\
    \ == Character.VOWEL).collect(Collectors.toList()).toArray(new String[splitted.length]);\n\
    \                                  ^\n  symbol:   method filter((c)->Chara[...]VOWEL)\n\
    \  location: variable splitted of type String[]\n/tmp/tmpczf94yxs.java:26: error:\
    \ cannot find symbol\n        String[] vowels = splitted.filter(c -> Character.isLetter(c)\
    \ && Character.getType(c) == Character.VOWEL).collect(Collectors.toList()).toArray(new\
    \ String[splitted.length]);\n                                                \
    \                                                         ^\n  symbol:   variable\
    \ VOWEL\n  location: class Character\n/tmp/tmpczf94yxs.java:32: error: variable\
    \ consonants is already defined in method getClosestVowel(String)\n        char[]\
    \ consonants = consonants.clone();\n               ^\n4 errors\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word ==\
    \ null || word.length() <= 0) {\n            return \"\";\n        }\n       \
    \ // use regex to match the vowels in the middle of the word\n        Matcher\
    \ m = Pattern.compile(\"[aeiouAEIOU]+\").matcher(word);\n        if (!m.find())\
    \ {\n            return \"\";\n        }\n        // use streams to find the two\
    \ consonants whose index are in the range of\n        // vowel positions.\n  \
    \      IntStream.range(m.end() - 1, 0).map(x -> x + 1).forEach(x -> {\n      \
    \      String consonant = word.substring(x + 1, x + 2);\n            if (consonant.equalsIgnoreCase(\"\
    a\") || consonant.equalsIgnoreCase(\"e\") ||\n                    consonant.equalsIgnoreCase(\"\
    i\") || consonant.equalsIgnoreCase(\"o\") ||\n                    consonant.equalsIgnoreCase(\"\
    u\")) {\n                return consonant;\n            }\n        });\n     \
    \   return \"\";\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxinzheog.java:28: error: cannot find symbol\n        Matcher m\
    \ = Pattern.compile(\"[aeiouAEIOU]+\").matcher(word);\n        ^\n  symbol:  \
    \ class Matcher\n  location: class Problem\n/tmp/tmpxinzheog.java:28: error: cannot\
    \ find symbol\n        Matcher m = Pattern.compile(\"[aeiouAEIOU]+\").matcher(word);\n\
    \                    ^\n  symbol:   variable Pattern\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Map<String,\
    \ String> vowelMap = new HashMap<String, String>();\n        vowelMap.put(\"A\"\
    ,\"E\");\n        vowelMap.put(\"E\",\"I\");\n        vowelMap.put(\"I\",\"O\"\
    );\n        vowelMap.put(\"O\",\"U\");\n        vowelMap.put(\"U\",\"a\");\n \
    \       vowelMap.put(\"a\",\"e\");\n        vowelMap.put(\"e\",\"i\");\n     \
    \   vowelMap.put(\"i\",\"o\");\n        vowelMap.put(\"o\",\"u\");\n        vowelMap.put(\"\
    u\",\"a\");\n        List<String> vowels = new ArrayList<String>();\n        for(String\
    \ vowel:vowelMap.keySet())\n        {\n            if(vowel.equalsIgnoreCase(word.substring(word.length()-1,word.length())))\n\
    \            {\n                vowels.add(vowel);\n            }\n        }\n\
    \        return vowels.isEmpty() ? \"\" : vowels.get(0);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4k5wxnu7.java:46)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // Write your\
    \ code here\n        Map<Character, Integer> vowelMap = new HashMap<Character,\
    \ Integer>();\n        vowelMap.put('e', 1);\n        vowelMap.put('a', 1);\n\
    \        vowelMap.put('o', 1);\n        vowelMap.put('i', 1);\n        vowelMap.put('u',\
    \ 1);\n        for (Character c : word.toCharArray()) {\n            if (vowelMap.containsKey(c))\
    \ {\n                vowelMap.put(c, vowelMap.get(c) + 1);\n            } else\
    \ {\n                vowelMap.put(c, 1);\n            }\n        }\n        List<Map.Entry<Character,\
    \ Integer>> sortedVowels =\n            vowelMap.entrySet().stream()\n       \
    \         .sorted(Map.Entry.comparingByValue())\n                .collect(Collectors.toList());\n\
    \        return sortedVowels.get(0).getKey().toString().isEmpty() ? \"\" : sortedVowels.get(0).getKey().toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfujx876w.java:45)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ consonants = Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\",\
    \ \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"z\");\n        String vowel = \"a\";\n        if (word.length() < 2)\n\
    \            return \"\";\n        int lastIndex = word.length() - 1;\n      \
    \  int firstIndex = lastIndex - 1;\n        String firstChar = word.substring(firstIndex,\
    \ lastIndex);\n        if (!consonants.contains(firstChar)) {\n            return\
    \ \"\";\n        }\n        if (word.charAt(0) == firstChar.charAt(0)) {\n   \
    \         vowel = firstChar.substring(1);\n        }\n        for (int i = word.length()\
    \ - 1; i >= 0; i--) {\n            String nextChar = word.substring(i, i + 1);\n\
    \            if (!consonants.contains(nextChar)) {\n                continue;\n\
    \            }\n            if (nextChar.charAt(0) == vowel.charAt(0)) {\n   \
    \             return nextChar;\n            }\n        }\n        return \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl3yirwfn.java:49)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String[] arr\
    \ = new String[word.length()];\n        for(int i = 0; i < word.length(); i++)\
    \ {\n            arr[i] = word.substring(i, i+1);\n        }\n        Arrays.sort(arr);\n\
    \        String result = \"\";\n        boolean flag = false;\n        for(int\
    \ i = (arr.length-1); i >= 0; i--) {\n            if(!flag) {\n              \
    \  if(i == 0) {\n                    flag = true;\n                    continue;\n\
    \                }\n                String temp = arr[i]; \n                if(i\
    \ == arr.length-1) {\n                    result = temp;\n                }\n\
    \                if(temp.equalsIgnoreCase(\"a\") || temp.equalsIgnoreCase(\"i\"\
    ) || temp.equalsIgnoreCase(\"u\")\n                        || temp.equalsIgnoreCase(\"\
    e\")) {\n                    result = temp;\n                }\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5nrkniu4.java:52)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int i = 1;\n\
    \        int length = word.length();\n        char firstLetter = word.charAt(0);\n\
    \        char secondLetter = word.charAt(length);\n        boolean firstLetterIsVowel\
    \ = isVowel(firstLetter);\n        boolean secondLetterIsVowel = isVowel(secondLetter);\n\
    \        if (firstLetterIsVowel && secondLetterIsVowel) {\n            char min\
    \ = Math.min(firstLetter, secondLetter);\n            char max = Math.max(firstLetter,\
    \ secondLetter);\n            String vowel = String.valueOf(min);\n          \
    \  vowel = vowel.concat(max);\n            return vowel;\n        }\n        while\
    \ (i < length) {\n            char firstLetterOfCurrentWord = word.charAt(i);\n\
    \            char secondLetterOfCurrentWord = word.charAt(length - i - 1);\n \
    \           boolean firstLetterOfCurrentWordIsVowel = isVowel(firstLetterOfCurrentWord);\n\
    \            boolean secondLetterOfCurrentWordIsVowel = isVowel(secondLetterOfCurrentWord);\n\
    \            if (firstLetterOfCurrentWordIsVowel && secondLetterOfCurrentWordIsVowel)\
    \ {\n                if (firstLetterOfCurrentWord < secondLetterOfCurrentWord)\
    \ {\n                    char temp = firstLetterOfCurrentWord;\n             \
    \       firstLetterOfCurrentWord = secondLetterOfCurrentWord;\n              \
    \      secondLetterOfCurrentWord = temp;\n                }\n                char\
    \ min = Math.min(firstLetterOfCurrentWord, secondLetterOfCurrentWord);\n     \
    \           char max = Math.max(firstLetterOfCurrentWord, secondLetterOfCurrentWord);\n\
    \                String vowel = String.valueOf(min);\n                vowel =\
    \ vowel.concat(max);\n                return vowel;\n            }\n         \
    \   i++;\n        }\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzuhg3a2p.java:28: error: cannot find symbol\n        boolean firstLetterIsVowel\
    \ = isVowel(firstLetter);\n                                     ^\n  symbol: \
    \  method isVowel(char)\n  location: class Problem\n/tmp/tmpzuhg3a2p.java:29:\
    \ error: cannot find symbol\n        boolean secondLetterIsVowel = isVowel(secondLetter);\n\
    \                                      ^\n  symbol:   method isVowel(char)\n \
    \ location: class Problem\n/tmp/tmpzuhg3a2p.java:31: error: incompatible types:\
    \ possible lossy conversion from int to char\n            char min = Math.min(firstLetter,\
    \ secondLetter);\n                               ^\n/tmp/tmpzuhg3a2p.java:32:\
    \ error: incompatible types: possible lossy conversion from int to char\n    \
    \        char max = Math.max(firstLetter, secondLetter);\n                   \
    \            ^\n/tmp/tmpzuhg3a2p.java:34: error: incompatible types: char cannot\
    \ be converted to String\n            vowel = vowel.concat(max);\n           \
    \                      ^\n/tmp/tmpzuhg3a2p.java:40: error: cannot find symbol\n\
    \            boolean firstLetterOfCurrentWordIsVowel = isVowel(firstLetterOfCurrentWord);\n\
    \                                                      ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n/tmp/tmpzuhg3a2p.java:41: error: cannot find symbol\n\
    \            boolean secondLetterOfCurrentWordIsVowel = isVowel(secondLetterOfCurrentWord);\n\
    \                                                       ^\n  symbol:   method\
    \ isVowel(char)\n  location: class Problem\n/tmp/tmpzuhg3a2p.java:48: error: incompatible\
    \ types: possible lossy conversion from int to char\n                char min\
    \ = Math.min(firstLetterOfCurrentWord, secondLetterOfCurrentWord);\n         \
    \                          ^\n/tmp/tmpzuhg3a2p.java:49: error: incompatible types:\
    \ possible lossy conversion from int to char\n                char max = Math.max(firstLetterOfCurrentWord,\
    \ secondLetterOfCurrentWord);\n                                   ^\n/tmp/tmpzuhg3a2p.java:51:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \    vowel = vowel.concat(m"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word ==\
    \ null || word.isEmpty()) {\n            return \"\";\n        }\n        List<Integer>\
    \ indexes = IntStream.range(word.length() - 1, -1, -1)\n            .mapToObj(i\
    \ -> word.charAt(i))\n            .collect(Collectors.toList());\n        String\
    \ result = \"\";\n        char previous = 'a';\n        for (int i : indexes)\
    \ {\n            char currentChar = word.charAt(i);\n            if (currentChar\
    \ == 'a') {\n                result = currentChar;\n            } else if (currentChar\
    \ == 'e') {\n                result = result + 'i';\n            } else if (currentChar\
    \ == 'o') {\n                result = result + 'i';\n            } else if (currentChar\
    \ == 'i') {\n                result = result + 'u';\n            } else if (currentChar\
    \ == 'u') {\n                result = result + 'a';\n            } else if (currentChar\
    \ == 'y') {\n                result = result + 'e';\n            } else if (currentChar\
    \ == 'i') {\n                result = result + 'e';\n            } else if (currentChar\
    \ == 'u' || currentChar == 'a') {\n                result = result + 'a';\n  \
    \          } else {\n                result = result + currentChar;\n        \
    \    }\n            if (word.charAt(i - 1) != previous) {\n                result\
    \ = result + word.charAt(i - 1);\n            }\n            previous = currentChar;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx06qxw2h.java:27: error: method range in interface IntStream cannot\
    \ be applied to given types;\n        List<Integer> indexes = IntStream.range(word.length()\
    \ - 1, -1, -1)\n                                         ^\n  required: int,int\n\
    \  found:    int,int,int\n  reason: actual and formal argument lists differ in\
    \ length\n/tmp/tmpx06qxw2h.java:35: error: incompatible types: char cannot be\
    \ converted to String\n                result = currentChar;\n               \
    \          ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int left = 0,\
    \ right = 0;\n        int index = -1;\n        String result = \"\";\n       \
    \ char[] vowels = {'A', 'E', 'I', 'O', 'U'};\n        word = word.toLowerCase();\n\
    \n        while (left < word.length()) {\n            right = 0;\n           \
    \ while (right < word.length()) {\n                if (vowels.contains(word.charAt(right)))\
    \ {\n                    if (index == -1)\n                        index = right;\n\
    \                    else\n                        index++;\n                }\n\
    \                else\n                    right++;\n            }\n         \
    \   left++;\n        }\n        if (index > -1) {\n            for (int i = index;\
    \ i > 0; i--) {\n                result = word.substring(0, i) + word.substring(i\
    \ + 1);\n                if (result.equals(word)) {\n                    i = -1;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3ucn8y6.java:33: error: cannot find symbol\n                if\
    \ (vowels.contains(word.charAt(right))) {\n                          ^\n  symbol:\
    \   method contains(char)\n  location: variable vowels of type char[]\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        char[] vowels\
    \ = {'a', 'e', 'i', 'o', 'u', 'y'};\n        int index = 0;\n        boolean found\
    \ = false;\n        while (index < word.length() - 1) {\n            found = false;\n\
    \            for (int i = word.length() - 1; i > index; i--) {\n             \
    \   if (vowels.contains(word.charAt(i))) {\n                    found = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!found) {\n                index++;\n                continue;\n          \
    \  }\n            int count = 1;\n            int rightVowel = 0;\n          \
    \  for (int i = word.length() - 1; i > index; i--) {\n                if (vowels.contains(word.charAt(i)))\
    \ {\n                    if (count < rightVowel) {\n                        rightVowel\
    \ = count;\n                    }\n                    count++;\n            \
    \    }\n            }\n            return \"\" + word.charAt(rightVowel);\n  \
    \      }\n        return \"\";\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp97dri3d1.java:30: error: cannot find symbol\n                if\
    \ (vowels.contains(word.charAt(i))) {\n                          ^\n  symbol:\
    \   method contains(char)\n  location: variable vowels of type char[]\n/tmp/tmp97dri3d1.java:42:\
    \ error: cannot find symbol\n                if (vowels.contains(word.charAt(i)))\
    \ {\n                          ^\n  symbol:   method contains(char)\n  location:\
    \ variable vowels of type char[]\n2 errors\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<Character>\
    \ vowels = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\"\
    , \"O\", \"U\");\n        \n        List<Integer> count = new ArrayList<>();\n\
    \        \n        char[] chars = word.toCharArray();\n        \n        for(int\
    \ i=chars.length-1; i>=0; i--){\n            if(vowels.contains(chars[i])){\n\
    \                count.add(vowels.indexOf(chars[i]));\n            }\n       \
    \ }\n        \n        Arrays.sort(count);\n        \n        if(count.size()\
    \ >= 2){\n            return \"\";\n        }\n        else if(count.size() ==\
    \ 1){\n            return vowels.get(count.get(0));\n        }\n        else{\n\
    \            return \"\";\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl5fevit8.java:24: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        List<Character> vowels = Arrays.asList(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\");\n       \
    \                                       ^\n    equality constraints: Character\n\
    \    lower bounds: String\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>asList(T...)\n/tmp/tmpl5fevit8.java:36: error: no suitable\
    \ method found for sort(List<Integer>)\n        Arrays.sort(count);\n        \
    \      ^\n    method Arrays.sort(int[]) is not applicable\n      (argument mismatch;\
    \ List<Integer> cannot be converted to int[])\n    method Arrays.sort(long[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to long[])\n    method Arrays.sort(short[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to short[])\n    method Arrays.sort(char[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to char[])\n    method Arrays.sort(byte[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to byte[])\n    method Arrays.sort(float[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to float[])\n    method Arrays.sort(double[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to double[])\n    method Arrays.sort(Object[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is\
    \ not applicable\n      (cannot infer type-variable(s) T#1\n        (actual and\
    \ formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = Arrays.asList(\"\", \"A\", \"E\", \"I\", \"O\", \"U\");\n        char\
    \ currentVowel = word.length() > 0 ? word.charAt(word.length() - 1) : ' ';\n \
    \       String result = \"\";\n        for (String vowel : vowels) {\n       \
    \     if (vowel.equalsIgnoreCase(currentVowel)) {\n                return vowel;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpty_1id3_.java:28: error: incompatible types: char cannot be converted\
    \ to String\n            if (vowel.equalsIgnoreCase(currentVowel)) {\n       \
    \                                ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word.length()\
    \ < 4) {\n            return \"\";\n        }\n        List<String> vowels = getVowels(word);\n\
    \        char[] vowelChars = vowels.toArray(new char[vowels.size()]);\n      \
    \  char[] vowelsAfterLastConsonant = word.substring(word.length() - 1).toCharArray();\n\
    \        String closestVowel = \"\";\n        int minLength = getMinLengthOfVowels(vowels);\n\
    \        int maxLength = getMaxLengthOfVowels(vowels);\n        \n        for\
    \ (int i = 0; i < maxLength; i++) {\n            for (int j = 0; j < minLength;\
    \ j++) {\n                if (vowelsAfterLastConsonant[j] == vowelChars[i]) {\n\
    \                    closestVowel = vowelChars[i];\n                }\n      \
    \      }\n        }\n        return closestVowel;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplq8dhyl5.java:27: error: cannot find symbol\n        List<String>\
    \ vowels = getVowels(word);\n                              ^\n  symbol:   method\
    \ getVowels(String)\n  location: class Problem\n/tmp/tmplq8dhyl5.java:28: error:\
    \ no suitable method found for toArray(char[])\n        char[] vowelChars = vowels.toArray(new\
    \ char[vowels.size()]);\n                                  ^\n    method Collection.<T#1>toArray(IntFunction<T#1[]>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; char[] cannot be converted to IntFunction<T#1[]>))\n    method List.<T#2>toArray(T#2[])\
    \ is not applicable\n      (inference variable T#2 has incompatible bounds\n \
    \       equality constraints: char\n        lower bounds: Object)\n  where T#1,T#2\
    \ are type-variables:\n    T#1 extends Object declared in method <T#1>toArray(IntFunction<T#1[]>)\n\
    \    T#2 extends Object declared in method <T#2>toArray(T#2[])\n/tmp/tmplq8dhyl5.java:31:\
    \ error: cannot find symbol\n        int minLength = getMinLengthOfVowels(vowels);\n\
    \                        ^\n  symbol:   method getMinLengthOfVowels(List<String>)\n\
    \  location: class Problem\n/tmp/tmplq8dhyl5.java:32: error: cannot find symbol\n\
    \        int maxLength = getMaxLengthOfVowels(vowels);\n                     \
    \   ^\n  symbol:   method getMaxLengthOfVowels(List<String>)\n  location: class\
    \ Problem\n/tmp/tmplq8dhyl5.java:37: error: incompatible types: char cannot be\
    \ converted to String\n                    closestVowel = vowelChars[i];\n   \
    \                                          ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n5 errors\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<Character>\
    \ vowels = Arrays.asList('a', 'e', 'i', 'o', 'u');\n        // vowel list: a,\
    \ e, i, o, u\n\n        List<Character> vowelsReversed = vowels.stream().mapToObj(Character\
    \ -> Character.toLowerCase(Character.valueOf('z'))).collect(Collectors.toList());\n\
    \        vowelsReversed.addAll(vowels);\n        List<Character> consonants =\
    \ Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'z');\n        // vowel list: b, c, d, f, g, h,\
    \ j, k, l, m, n, p, q, r, s, t, v, w, x, z\n\n        List<Character> consonantsReversed\
    \ = consonants.stream().mapToObj(Character -> Character.toLowerCase(Character.valueOf('z'))).collect(Collectors.toList());\n\
    \        consonantsReversed.addAll(consonants);\n        List<Character> consonantsAndVowels\
    \ = vowels.stream().mapToObj(Character -> Character.toLowerCase(Character.valueOf('z'))).collect(Collectors.toList());\n\
    \        consonantsAndVowels.addAll(vowels);\n        List<Character> consonantsAndVowelsReversed\
    \ = vowels.stream().mapToObj(Character -> Character.toLowerCase(Character.valueOf('z'))).collect(Collectors.toList());\n\
    \        consonantsAndVowelsReversed.addAll(vowels);\n\n        Integer bestDistance\
    \ = Integer.MIN_VALUE;\n        Integer bestVowel = 0;\n        int lastLetter\
    \ = 0;\n\n        for(int i = 0; i < word.length(); i++) {\n            Character\
    \ letter = word.charAt(i);\n            lastLetter = i;\n            for(Character\
    \ c : consonantsAndVowels) {\n                if(letter == c) {\n            \
    \        Integer currentDistance = Math.abs(vowelsReversed.indexOf(letter) - vowelsReversed.indexOf(lastLetter));\n\
    \                    if(bestDistance > currentDistance) {\n                  \
    \      bestDistance = currentDistance;\n                        bestVowel = c;\n\
    \                    }\n                }\n            }\n\n            for(Character\
    \ c : consonantsAndVowelsReversed) {\n                if(letter == c) {\n    \
    \                Integer currentDistance = Math.abs(vowelsReversed.indexOf(letter)\
    \ - vowelsReversed.indexOf(lastLetter));\n                    if(bestDistance\
    \ > currentDistance) {\n                        bestDistance = currentDistance;\n\
    \                        bestVowel = c;\n                    }\n             \
    \   }\n            }\n        }\n\n        return bestVowel\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpenarqksg.java:67: error: ';' expected\n        return bestVowel\n\
    \                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<String>\
    \ vowels = new HashSet<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n\n        StringBuilder vowelBuilder = new\
    \ StringBuilder();\n        for (char vowel : vowels) {\n            String vowelString\
    \ = \"\";\n            if (word.contains(vowel)) {\n                vowelString\
    \ = vowel + word.charAt(word.length() - vowel.length());\n                vowelBuilder.append(vowelString);\n\
    \            }\n        }\n        if (vowelBuilder.length() == 0) {\n       \
    \     return \"\";\n        }\n        vowelBuilder.reverse();\n        int i\
    \ = 0;\n        char firstVowel = vowelBuilder.charAt(i);\n        String firstVowelString\
    \ = \"\";\n        while (i < vowelBuilder.length()) {\n            char current\
    \ = vowelBuilder.charAt(i);\n            char next = vowelBuilder.charAt(i + 1);\n\
    \            if (vowelBuilder.charAt(i) == vowelBuilder.charAt(i + 1)) {\n   \
    \             i++;\n                continue;\n            }\n            if (vowelBuilder.charAt(i).equals(vowelBuilder.charAt(i\
    \ + 1))) {\n                if (vowelBuilder.charAt(i) != firstVowel) {\n    \
    \                firstVowel = current;\n                    firstVowelString =\
    \ firstVowel;\n                }\n                i++;\n                continue;\n\
    \            }\n            String vowelString = \"\";\n            if (word.contains(vowel))\
    \ {\n                vowelString = vowel + word.charAt(word.length() - vowel.length());\n\
    \            }\n            if (vowelString.equals(firstVowelString)) {\n    \
    \            return vowelString.toUpperCase();\n            }\n            if\
    \ (vowelString.equals(firstVowelString.toUpperCase())) {\n                return\
    \ vowelString.toLowerCase();\n            }\n            firstVowelString = vowelString;\n\
    \            i++;\n        }\n        return \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4mr4n8rh.java:33: error: incompatible types: String cannot be converted\
    \ to char\n        for (char vowel : vowels) {\n                          ^\n\
    /tmp/tmp4mr4n8rh.java:35: error: incompatible types: char cannot be converted\
    \ to CharSequence\n            if (word.contains(vowel)) {\n                 \
    \             ^\n/tmp/tmp4mr4n8rh.java:36: error: char cannot be dereferenced\n\
    \                vowelString = vowel + word.charAt(word.length() - vowel.length());\n\
    \                                                                       ^\n/tmp/tmp4mr4n8rh.java:54:\
    \ error: char cannot be dereferenced\n            if (vowelBuilder.charAt(i).equals(vowelBuilder.charAt(i\
    \ + 1))) {\n                                      ^\n/tmp/tmp4mr4n8rh.java:57:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \        firstVowelString = firstVowel;\n                                    \
    \   ^\n/tmp/tmp4mr4n8rh.java:63: error: cannot find symbol\n            if (word.contains(vowel))\
    \ {\n                              ^\n  symbol:   variable vowel\n  location:\
    \ class Problem\n/tmp/tmp4mr4n8rh.java:64: error: cannot find symbol\n       \
    \         vowelString = vowel + word.charAt(word.length() - vowel.length());\n\
    \                              ^\n  symbol:   variable vowel\n  location: class\
    \ Problem\n/tmp/tmp4mr4n8rh.java:64: error: cannot find symbol\n             \
    \   vowelString = vowel + word.charAt(word.length() - vowel.length());\n     \
    \                                                             ^\n  symbol:   variable\
    \ vowel\n  location: class Problem\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n8 errors\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String[] vowels\
    \ = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        String[] vowelsUppercase = {\"\
    A\", \"E\", \"I\", \"O\", \"U\"};\n        String[] vowelsLowercase = {\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"};\n        String[] vowelsMiddleCase = {\"A\", \"\
    E\", \"I\", \"O\", \"U\"};\n        String[] vowelsOtherCase = {\"A\", \"E\",\
    \ \"I\", \"O\", \"U\"};\n\n        int vowelsCount = 0;\n        int vowelsCountUppercase\
    \ = 0;\n        int vowelsCountLowercase = 0;\n        int vowelsCountMiddleCase\
    \ = 0;\n        int vowelsCountOtherCase = 0;\n\n        int consonantsCount =\
    \ 0;\n        int consonantsCountUppercase = 0;\n        int consonantsCountLowercase\
    \ = 0;\n        int consonantsCountMiddleCase = 0;\n        int consonantsCountOtherCase\
    \ = 0;\n\n        boolean vowelInWord = true;\n\n        for(int i = word.length()\
    \ - 1; i >= 0; i--) {\n            char c = word.charAt(i);\n            vowelsCount++;\n\
    \            vowelsCountUppercase++;\n            vowelsCountLowercase++;\n  \
    \          vowelsCountMiddleCase++;\n            vowelsCountOtherCase++;\n   \
    \         consonantsCount++;\n            consonantsCountUppercase++;\n      \
    \      consonantsCountLowercase++;\n            consonantsCountMiddleCase++;\n\
    \            consonantsCountOtherCase++;\n\n            if(vowelInWord) {\n  \
    \              if(word.startsWith(\"u\")) {\n                    if(vowelsCount\
    \ > vowelsCountUppercase) {\n                        vowelsInWord = false;\n \
    \                   }\n                } else if(word.startsWith(\"A\")) {\n \
    \                   if(vowelsCount > vowelsCountLowercase) {\n               \
    \         vowelsInWord = false;\n                    }\n                } else\
    \ if(word.startsWith(\"I\")) {\n                    if(vowelsCount > vowelsCountMiddleCase)\
    \ {\n                        vowelsInWord = false;\n                    }\n  \
    \              } else if(word.startsWith(\"O\")) {\n                    if(vowelsCount\
    \ > vowelsCountOtherCase) {\n                        vowelsInWord = false;\n \
    \                   }\n                } else if(word.startsWith(\"E\")) {\n \
    \                   if(vowelsCount > vowelsCountMiddleCase) {\n              \
    \          vowelsInWord = false;\n                    }\n                } else\
    \ if(word.startsWith(\"a\")) {\n                    if(vowelsCount > vowelsCountOtherCase)\
    \ {\n                        vowelsInWord = false;\n                    }\n  \
    \              } else if(word.startsWith(\"e\")) {\n                    if(vowelsCount\
    \ > vowelsCountOtherCase) {\n                        vowelsInWord = false;\n \
    \                   }\n                } else if(word.startsWith(\"i\")) {\n \
    \                   if(vowelsCount > vowel\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvv0nim37.java:87: error: ')' expected\n                    if(vowelsCount\
    \ > vowel\n                                          ^\n/tmp/tmpvv0nim37.java:88:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpvv0nim37.java:89: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<Character>\
    \ vowels = new HashSet<>();\n        vowels.add('a');\n        vowels.add('e');\n\
    \        vowels.add('i');\n        vowels.add('o');\n        vowels.add('u');\n\
    \        vowels.add('y');\n        vowels.add('A');\n        vowels.add('E');\n\
    \        vowels.add('I');\n        vowels.add('O');\n        vowels.add('U');\n\
    \        vowels.add('Y');\n        Set<Character> consonants = new HashSet<>();\n\
    \        consonants.add('b');\n        consonants.add('c');\n        consonants.add('d');\n\
    \        consonants.add('f');\n        consonants.add('g');\n        consonants.add('h');\n\
    \        consonants.add('i');\n        consonants.add('j');\n        consonants.add('k');\n\
    \        consonants.add('l');\n        consonants.add('m');\n        consonants.add('n');\n\
    \        consonants.add('p');\n        consonants.add('q');\n        consonants.add('r');\n\
    \        consonants.add('s');\n        consonants.add('t');\n        consonants.add('v');\n\
    \        consonants.add('w');\n        consonants.add('x');\n        consonants.add('y');\n\
    \        consonants.add('z');\n        consonants.add('');\n        String str\
    \ = \"\";\n        char[] charArr = word.toCharArray();\n        for (char c :\
    \ charArr) {\n            if (vowels.contains(c)) {\n                str += c;\n\
    \            } else {\n                for (int i = charArr.length - 1; i >= 0;\
    \ i--) {\n                    char cons = charArr[i];\n                    if\
    \ (consonants.contains(cons)) {\n                        str+=cons;\n        \
    \                break;\n                    } else\n                        str\
    \ += cons;\n                }\n            }\n        }\n        return str;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjbzuud77.java:60: error: empty character literal\n        consonants.add('');\n\
    \                       ^\n1 error\n"
  stdout: ''
  timestamp: 1660011630
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Map<Character,\
    \ Integer> vowels = new HashMap<Character, Integer>();\n        Arrays.stream(word.split(\"\
    \")).forEach(c -> {\n            if (vowels.containsKey(c)) {\n              \
    \  vowels.put(c, vowels.get(c) + 1);\n            } else {\n                vowels.put(c,\
    \ 1);\n            }\n        });\n        return Arrays.stream(vowels.entrySet().stream()).min(Comparator.comparingInt(Entry::getValue)).get().getKey();\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjh3dkczs.java:27: error: incompatible types: String cannot be converted\
    \ to Character\n                vowels.put(c, vowels.get(c) + 1);\n          \
    \                 ^\n/tmp/tmpjh3dkczs.java:29: error: incompatible types: String\
    \ cannot be converted to Character\n                vowels.put(c, 1);\n      \
    \                     ^\n/tmp/tmpjh3dkczs.java:32: error: no suitable method found\
    \ for stream(Stream<Entry<Character,Integer>>)\n        return Arrays.stream(vowels.entrySet().stream()).min(Comparator.comparingInt(Entry::getValue)).get().getKey();\n\
    \                     ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; Stream<Entry<Character,Integer>>\
    \ cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; Stream<Entry<Character,Integer>>\
    \ cannot be converted to int[])\n    method Arrays.stream(long[]) is not applicable\n\
    \      (argument mismatch; Stream<Entry<Character,Integer>> cannot be converted\
    \ to long[])\n    method Arrays.stream(double[]) is not applicable\n      (argument\
    \ mismatch; Stream<Entry<Character,Integer>> cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmpjh3dkczs.java:32: error: cannot find symbol\n        return Arrays.stream(vowels.entrySet().stream()).min(Comparator.comparingInt(Entry::getValue)).get().getKey();\n\
    \                                                                            \
    \         ^\n  symbol:   variable Entry\n  location: class Problem\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    4 errors\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word.length()\
    \ < 3) return \"\";\n        String vowels[] = new String[]{\"a\", \"e\", \"i\"\
    , \"o\", \"u\"};\n        int len = word.length();\n        int index = 0;\n \
    \       int minDist = Integer.MAX_VALUE;\n        while (index < len) {\n    \
    \        int currentDist = distanceBetweenVowels(vowels[index], word);\n     \
    \       if (currentDist < minDist) {\n                minDist = currentDist;\n\
    \            }\n            index++;\n        }\n        return vowels[minDist\
    \ - 1];\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8tqt4kf1.java:30: error: cannot find symbol\n            int currentDist\
    \ = distanceBetweenVowels(vowels[index], word);\n                            \
    \  ^\n  symbol:   method distanceBetweenVowels(String,String)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ list = new ArrayList<>();\n        list.add(word.substring(word.length() - 1));\n\
    \        list.add(word.substring(word.length() - 2));\n        list.add(word.substring(word.length()\
    \ - 3));\n        list.add(word.substring(word.length() - 4));\n        list.add(word.substring(word.length()\
    \ - 5));\n        list.add(word.substring(word.length() - 6));\n        list.add(word.substring(word.length()\
    \ - 7));\n        list.add(word.substring(word.length() - 8));\n        list.add(word.substring(word.length()\
    \ - 9));\n        list.add(word.substring(word.length() - 10));\n        list.add(word.substring(word.length()\
    \ - 11));\n        list.add(word.substring(word.length() - 12));\n        list.add(word.substring(word.length()\
    \ - 13));\n        list.add(word.substring(word.length() - 14));\n        list.add(word.substring(word.length()\
    \ - 15));\n        list.add(word.substring(word.length() - 16));\n        list.add(word.substring(word.length()\
    \ - 17));\n        list.add(word.substring(word.length() - 18));\n        list.add(word.substring(word.length()\
    \ - 19));\n        list.add(word.substring(word.length() - 20));\n        list.add(word.substring(word.length()\
    \ - 21));\n        list.add(word.substring(word.length() - 22));\n        list.add(word.substring(word.length()\
    \ - 23));\n        list.add(word.substring(word.length() - 24));\n        list.add(word.substring(word.length()\
    \ - 25));\n        list.add(word.substring(word.length() - 26));\n        list.add(word.substring(word.length()\
    \ - 27));\n        list.add(word.substring(word.length() - 28));\n        list.add(word.substring(word.length()\
    \ - 29));\n        list.add(word.substring(word.length() - 30));\n        list.add(word.substring(word.length()\
    \ - 31));\n        list.add(word.substring(word.length() - 32));\n        list.add(word.substring(word.length()\
    \ - 33));\n        list.add(word.substring(word.length() - 34));\n        list.add(word.substring(word.length()\
    \ - 35));\n        list.add(word.substring(word.length() - 36));\n        list.add(word.substring(word.length()\
    \ - 37));\n        list.add(word.substring(word.length() - 38));\n        list.add(word.substring(word.length()\
    \ - 39));\n        list.add(word.substring(word.length() - 40));\n        list.add(word.substring(word.length()\
    \ - 41));\n        list.add(word.substring(word.length() - 42));\n        list.add(word.substring(word.length()\
    \ - 43));\n        list.add(word.substring(word.length() - 44));\n        list.add(word.substring(word.length()\
    \ - 45));\n        list.add(word.substring(word.length() - 46));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc9a89jxv.java:71: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        \n        \n\
    \        //write your code here\n        \n        \n        \n        //System.out.println(\"\
    yogurt\".contains(\"u\"));\n        \n        if(word.indexOf(\"o\") != -1){\n\
    \            word = word.substring(0,word.indexOf(\"o\"));\n            String\
    \ vowel = word.substring(word.indexOf(\"o\"));\n            if(vowel.equals(\"\
    a\") || vowel.equals(\"e\") || vowel.equals(\"i\") || vowel.equals(\"o\")){\n\
    \                return vowel;\n            }\n        }\n        if(word.indexOf(\"\
    a\") != -1){\n            word = word.substring(0,word.indexOf(\"a\"));\n    \
    \        String vowel = word.substring(word.indexOf(\"a\"));\n            if(vowel.equals(\"\
    a\") || vowel.equals(\"e\") || vowel.equals(\"i\") || vowel.equals(\"o\")){\n\
    \                return vowel;\n            }\n        }\n        if(word.indexOf(\"\
    u\") != -1){\n            word = word.substring(0,word.indexOf(\"u\"));\n    \
    \        String vowel = word.substring(word.indexOf(\"u\"));\n            if(vowel.equals(\"\
    a\") || vowel.equals(\"e\") || vowel.equals(\"i\") || vowel.equals(\"o\")){\n\
    \                return vowel;\n            }\n        }\n        if(word.indexOf(\"\
    e\") != -1){\n            word = word.substring(0,word.indexOf(\"e\"));\n    \
    \        String vowel = word.substring(word.indexOf(\"e\"));\n            if(vowel.equals(\"\
    a\") || vowel.equals(\"e\") || vowel.equals(\"i\") || vowel.equals(\"o\")){\n\
    \                return vowel;\n            }\n        }\n        if(word.indexOf(\"\
    i\") != -1){\n            word = word.substring(0,word.indexOf(\"i\"));\n    \
    \        String vowel = word.substring(word.indexOf(\"i\"));\n            if(vowel.equals(\"\
    a\") || vowel.equals(\"e\") || vowel.equals(\"i\") || vowel.equals(\"o\")){\n\
    \                return vowel;\n            }\n        }\n        if(word.indexOf(\"\
    t\") != -1){\n            word = word.substring(0,word.indexOf(\"t\"));\n    \
    \        String vowel = word.substring(word.indexOf(\"t\"));\n            if(vowel.equals(\"\
    a\") || vowel.equals(\"e\") || vowel.equals(\"i\") || vowel.equals(\"o\")){\n\
    \                return vowel;\n            }\n        }\n        if(word.indexOf(\"\
    s\") != -1){\n            word = word.substring(0,word.indexOf(\"s\"));\n    \
    \        String vowel = word.substring(word.indexOf(\"s\"));\n            if(vowel.equals(\"\
    a\") || vowel.equals(\"e\") || vowel.equals(\"i\") || vowel.\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj3lch5mb.java:77: error: <identifier> expected\n            if(vowel.equals(\"\
    a\") || vowel.equals(\"e\") || vowel.equals(\"i\") || vowel.\n               \
    \                                                                     ^\n/tmp/tmpj3lch5mb.java:78:\
    \ error: illegal start of statement\n    }\n    ^\n/tmp/tmpj3lch5mb.java:79: error:\
    \ illegal start of expression\n    public static void main(String[] args) {\n\
    \    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // write your\
    \ code here\n        \n        String vowel = word.substring(word.length()-2,\
    \ word.length()-1);\n        if (vowel.equals(\"a\") || vowel.equals(\"e\") ||\
    \ vowel.equals(\"i\") || vowel.equals(\"o\") || vowel.equals(\"u\")) {\n     \
    \       return vowel;\n        }\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7hmm1x5z.java:33)\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // Write your\
    \ code here\n        Set<String> vowels = Set.of(\"a\", \"e\", \"i\", \"o\", \"\
    u\");\n        char[] arr = word.toCharArray();\n        int leftIndex = -1;\n\
    \        int rightIndex = arr.length - 1;\n        StringBuilder sb = new StringBuilder();\n\
    \        while(leftIndex < rightIndex) {\n            int middleIndex = (leftIndex\
    \ + rightIndex) / 2;\n            String middleChar = String.valueOf(arr[middleIndex]);\n\
    \            if(middleChar.length() != 1) {\n                String middle = middleChar.charAt(0);\n\
    \                if(vowels.contains(middle)) {\n                    sb.append(middle);\n\
    \                    break;\n                }\n            }\n            if(middleChar.charAt(0)\
    \ == arr[middleIndex]) {\n                leftIndex = middleIndex;\n         \
    \   } else {\n                rightIndex = middleIndex;\n            }\n     \
    \   }\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o1jtp47.java:34: error: incompatible types: char cannot be converted\
    \ to String\n                String middle = middleChar.charAt(0);\n         \
    \                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // Your code\
    \ goes here\n        \n        // I tried to solve my problem by using the following\
    \ logic\n        int i = 0;\n        while (i != -1){\n            i = word.indexOf(consonants,\
    \ i);\n            if(i == -1){\n                i = word.lastIndexOf(consonants,\
    \ i);\n            }\n            if(i != -1){\n                if(word.charAt(i)\
    \ == vowels[i]){\n                    if(i == 0){\n                        return\
    \ \"\"; // I returned empty string if the index is 0\n                    }\n\
    \                    else if(i > 0 && i < word.length() - 1){\n              \
    \          String newWord = word.substring(i, word.length());\n              \
    \          if(newWord.equals(word)){\n                            i = -1;\n  \
    \                      }\n                    }\n                }\n         \
    \   }\n        }\n        \n        return \"\"; // I returned empty string if\
    \ nothing is found\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp728rzet8.java:29: error: cannot find symbol\n            i = word.indexOf(consonants,\
    \ i);\n                             ^\n  symbol:   variable consonants\n  location:\
    \ class Problem\n/tmp/tmp728rzet8.java:31: error: cannot find symbol\n       \
    \         i = word.lastIndexOf(consonants, i);\n                             \
    \        ^\n  symbol:   variable consonants\n  location: class Problem\n/tmp/tmp728rzet8.java:34:\
    \ error: cannot find symbol\n                if(word.charAt(i) == vowels[i]){\n\
    \                                     ^\n  symbol:   variable vowels\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // Write your\
    \ code here\n        int len = word.length();\n        int index = 0;\n      \
    \  \n        List<Character> arr = new ArrayList<>();\n        arr.add('A');\n\
    \        arr.add('B');\n        arr.add('C');\n        arr.add('D');\n       \
    \ arr.add('E');\n        arr.add(\"U\");\n        arr.add('F');\n        arr.add('G');\n\
    \        arr.add('H');\n        arr.add('I');\n        arr.add('J');\n       \
    \ arr.add('K');\n        arr.add('L');\n        arr.add('M');\n        arr.add('N');\n\
    \        arr.add('O');\n        arr.add('P');\n        arr.add('Q');\n       \
    \ arr.add('R');\n        arr.add('S');\n        arr.add('T');\n        arr.add('U');\n\
    \        arr.add('V');\n        arr.add('W');\n        arr.add('X');\n       \
    \ arr.add('Y');\n        arr.add('Z');\n        \n        if(len > 0) {\n    \
    \        char first = word.charAt(0);\n            char last = word.charAt(len-1);\n\
    \            \n            if(arr.contains(first)) {\n                if(arr.contains(last))\
    \ {\n                    for(char c : word.subSequence(0, len-1)) {\n        \
    \                if(arr.contains(c)) {\n                            return String.valueOf(c);\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgj1amhd2.java:34: error: incompatible types: String cannot be converted\
    \ to Character\n        arr.add(\"U\");\n                ^\n/tmp/tmpgj1amhd2.java:63:\
    \ error: for-each not applicable to expression type\n                    for(char\
    \ c : word.subSequence(0, len-1)) {\n                                        \
    \         ^\n  required: array or java.lang.Iterable\n  found:    CharSequence\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<Character>\
    \ vowels = new HashSet<Character>();\n        vowels.add('a');\n        vowels.add('e');\n\
    \        vowels.add('i');\n        vowels.add('o');\n        vowels.add('u');\n\
    \        vowels.add('y');\n\n        String[] split = word.split(\"\");\n    \
    \    int length = split.length;\n        int i = length - 2;\n\n        for (int\
    \ j = 0; j < length; j++) {\n            if (vowels.contains(split[j])) {\n  \
    \              i = j;\n            }\n        }\n\n        Set<Character> consonants\
    \ = new HashSet<Character>();\n        consonants.add('b');\n        consonants.add('c');\n\
    \        consonants.add('d');\n        consonants.add('f');\n        consonants.add('g');\n\
    \        consonants.add('h');\n        consonants.add('j');\n        consonants.add('k');\n\
    \        consonants.add('l');\n        consonants.add('m');\n        consonants.add('n');\n\
    \        consonants.add('p');\n        consonants.add('q');\n        consonants.add('r');\n\
    \        consonants.add('s');\n        consonants.add('t');\n        consonants.add('v');\n\
    \        consonants.add('w');\n        consonants.add('x');\n        consonants.add('y');\n\
    \        consonants.add('z');\n        consonants.add('A');\n        consonants.add('B');\n\
    \        consonants.add('C');\n        consonants.add('D');\n        consonants.add('E');\n\
    \        consonants.add('F');\n        consonants.add('G');\n        consonants.add('H');\n\
    \        consonants.add('J');\n        consonants.add('K');\n        consonants.add('L');\n\
    \        consonants.add('M');\n        consonants.add('N');\n        consonants.add('P');\n\
    \        consonants.add('Q');\n        consonants.add('R');\n        consonants.add('S');\n\
    \        consonants.add('T');\n        consonants.add('V');\n        consonants.add('W');\n\
    \        consonants.add('X');\n        consonants.add('Y');\n        consonants.add('Z');\n\
    \n        String[] split2 = word.substring(i, i + 2).split(\"\");\n\n        char\
    \ first = split2[0];\n        char second = split2[1];\n\n        if (consonants.contains(first)\
    \ && consonants.contains(second)) {\n            return \"\";\n        }\n\n \
    \       Set<Character> consonants_\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppoxq5jz1.java:97: error: ';' expected\n        Set<Character> consonants_\n\
    \                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011631
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // Write your\
    \ solution here\n        int len = word.length();\n        int i = 0;\n      \
    \  int j = len - 1;\n        Stack<Integer> stack = new Stack<Integer>();\n  \
    \      while (i < len) {\n            stack.push(i);\n            i = i + 1;\n\
    \        }\n        while (j > 0) {\n            i = stack.pop();\n          \
    \  j = j - 1;\n            if (i < len && word.length() > 0 && isVowel(word.charAt(i)))\
    \ {\n                stack.push(i);\n                i = i + 1;\n            }\n\
    \            if (j < len && word.length() > 0 && isVowel(word.charAt(j))) {\n\
    \                j = j - 1;\n            }\n        }\n        if (stack.isEmpty())\
    \ {\n            return \"\";\n        } else {\n            return word.substring(stack.pop(),\
    \ stack.pop() + 1);\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_hnrxise.java:36: error: cannot find symbol\n            if (i\
    \ < len && word.length() > 0 && isVowel(word.charAt(i))) {\n                 \
    \                               ^\n  symbol:   method isVowel(char)\n  location:\
    \ class Problem\n/tmp/tmp_hnrxise.java:40: error: cannot find symbol\n       \
    \     if (j < len && word.length() > 0 && isVowel(word.charAt(j))) {\n       \
    \                                         ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011632
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        StringBuilder\
    \ builder = new StringBuilder();\n        if (word == null) {\n            return\
    \ \"\";\n        }\n        char[] c = word.toCharArray();\n        Arrays.sort(c);\n\
    \        char temp;\n        for (int i = 0; i < c.length - 1; i++) {\n      \
    \      if (c[i] == 'a' || c[i] == 'e' || c[i] == 'i' || c[i] == 'o' || c[i] ==\
    \ 'u') {\n                temp = c[i + 1];\n                i += 1;\n        \
    \        while (i < c.length - 1 && c[i] == temp) {\n                    i +=\
    \ 1;\n                }\n                if (i == c.length - 1) {\n          \
    \          builder.append(c[i]);\n                }\n            }\n        }\n\
    \        return builder.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjzlldj30.java:46)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<String>\
    \ set = new HashSet<>();\n        for(int i = 0; i < word.length(); i++) {\n \
    \           if(Character.isLetter(word.charAt(i))) {\n                String vowels\
    \ = \"aeiouAEIOU\";\n                for(int j = i; j < word.length(); j++) {\n\
    \                    if(vowels.contains(word.charAt(j))) \n                  \
    \      set.add(word.charAt(j));\n                }\n            }\n        }\n\
    \        \n        for(String s : set) {\n            if(word.lastIndexOf(s, word.length()\
    \ - 1) >= 0) {\n                return s;\n            }\n        }\n        \n\
    \        return \"\";\n    }\n    public static void main(String[] args) {\n \
    \   assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5q94w5ii.java:29: error: incompatible types: char cannot be converted\
    \ to CharSequence\n                    if(vowels.contains(word.charAt(j))) \n\
    \                                                  ^\n/tmp/tmp5q94w5ii.java:30:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \            set.add(word.charAt(j));\n                                      \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        \n        if(!word.matches(\"\
    [a-zA-Z]+\")) return \"\";\n        \n        String[] arr = word.split(\"\");\
    \ //Split String at every letters\n        \n        Arrays.sort(arr); //Sort\
    \ the letters\n        \n        int lastPos = arr.length - 1; //Store the last\
    \ letter\n        \n        String leftVowel = \"\";\n        \n        for(int\
    \ i = 0; i < lastPos; i++) {\n            \n            //To find out the left\
    \ vowel\n            if(arr[i].equals(\"A\") || arr[i].equals(\"E\") || arr[i].equals(\"\
    I\") || arr[i].equals(\"O\") || arr[i].equals(\"U\")) { \n                leftVowel\
    \ = arr[i];\n                break;\n            }\n        }\n        \n    \
    \    String[] arr2 = word.substring(lastPos).split(\"\");\n        \n        Arrays.sort(arr2);\n\
    \        \n        //Sort the letters\n        int lastPos2 = arr2.length - 1;\n\
    \        \n        String rightVowel = \"\";\n        \n        for(int i = 0;\
    \ i < lastPos2; i++) {\n            \n            //To find out the right vowel\n\
    \            if(arr2[i].equals(\"a\") || arr2[i].equals(\"e\") || arr2[i].equals(\"\
    i\") || arr2[i].equals(\"o\") || arr2[i].equals(\"u\")) { \n                rightVowel\
    \ = arr2[i];\n                break;\n            }\n        }\n        \n   \
    \     if(rightVowel == \"\" && leftVowel == \"\") return \"\"; //if there is no\
    \ vowel met between the two consonants return empty\n        \n        if(leftVowel\
    \ == \"\") return leftVowel; //if there is no left vowel return the left vowel\n\
    \        \n        if(rightVowel == \"\") return rightVowel; //if there is no\
    \ right vowel return the right vowel\n        \n        return \"\"; //if we have\
    \ vowel between two consonants return empty\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8tp7emad.java:71)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        \n        String\
    \ vowels = \"AEIOUaeiou\";\n        String[] splitWord = word.split(\"\");\n \
    \       \n        Optional<String> vowelOption = Arrays.stream(vowels).filter(vowels::contains).findFirst();\n\
    \        String vowelStr = vowelOption.get();\n        \n        String[] splitWordVowel\
    \ = vowelStr.split(\"\");\n        \n        int startIndex = 0;\n        int\
    \ endIndex = 0;\n        \n        for(int i = 0; i<splitWord.length; i++){\n\
    \            if(splitWordVowel[i].equals(splitWord[i])){\n                endIndex\
    \ = i;\n            }\n        }\n        \n        return splitWord[endIndex];\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo8hnaatq.java:28: error: no suitable method found for stream(String)\n\
    \        Optional<String> vowelOption = Arrays.stream(vowels).filter(vowels::contains).findFirst();\n\
    \                                             ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; String cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; String cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; String cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // (A) Find\
    \ vowel pair in word\n        // Example: (\"yogurt\")\n        // (A)\n     \
    \   Set<Pair<Integer, Integer>> pairs = new HashSet<>();\n        int cons = 0,\
    \ vowel = 0, vowelCount = 0;\n        for (int i = word.length() - 1; i >= 0;\
    \ i--) {\n            char ch = word.charAt(i);\n            vowelCount++;\n \
    \           if (isVowel(ch)) {\n                vowel++;\n            }\n    \
    \        if (ch == 'e') {\n                pairs.add(new Pair<>(cons, i));\n \
    \               cons = 0;\n                vowel = 0;\n                vowelCount\
    \ = 0;\n            }\n            if (ch == 'a') {\n                pairs.add(new\
    \ Pair<>(cons, i));\n                cons = i;\n                vowel = 0;\n \
    \               vowelCount = 0;\n            }\n            if (vowelCount ==\
    \ 2) {\n                pairs.add(new Pair<>(vowel, cons));\n                vowel\
    \ = 0;\n                vowelCount = 0;\n            }\n        }\n        //\
    \ (B) Iterate through pairs set and find closest vowel pair\n        // (B)\n\
    \        int min = pairs.stream().mapToInt(p -> p.x).min().getAsInt();\n     \
    \   int max = pairs.stream().mapToInt(p -> p.x).max().getAsInt();\n        char\
    \ min = word.charAt(min);\n        char max = word.charAt(max);\n        // (C)\n\
    \        return word.substring(min, max) + word.substring(max).equals(min) ? \"\
    \" : word.substring(min, max);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpygv64rdo.java:32: error: cannot find symbol\n            if (isVowel(ch))\
    \ {\n                ^\n  symbol:   method isVowel(char)\n  location: class Problem\n\
    /tmp/tmpygv64rdo.java:55: error: cannot find symbol\n        int min = pairs.stream().mapToInt(p\
    \ -> p.x).min().getAsInt();\n                                                ^\n\
    \  symbol:   variable x\n  location: variable p of type Pair<Integer,Integer>\n\
    /tmp/tmpygv64rdo.java:56: error: cannot find symbol\n        int max = pairs.stream().mapToInt(p\
    \ -> p.x).max().getAsInt();\n                                                ^\n\
    \  symbol:   variable x\n  location: variable p of type Pair<Integer,Integer>\n\
    /tmp/tmpygv64rdo.java:57: error: variable min is already defined in method getClosestVowel(String)\n\
    \        char min = word.charAt(min);\n             ^\n/tmp/tmpygv64rdo.java:58:\
    \ error: variable max is already defined in method getClosestVowel(String)\n \
    \       char max = word.charAt(max);\n             ^\n/tmp/tmpygv64rdo.java:60:\
    \ error: incompatible types: String cannot be converted to boolean\n        return\
    \ word.substring(min, max) + word.substring(max).equals(min) ? \"\" : word.substring(min,\
    \ max);\n                                        ^\n6 errors\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        char[] wordArr\
    \ = word.toCharArray();\n        for (int i = wordArr.length - 2; i >= 0; i--)\
    \ {\n            if (isVowel(wordArr[i]) && isVowel(wordArr[i + 1])) {\n     \
    \           return wordArr[i];\n            }\n        }\n        return \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeenkmad9.java:26: error: cannot find symbol\n            if (isVowel(wordArr[i])\
    \ && isVowel(wordArr[i + 1])) {\n                ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n/tmp/tmpeenkmad9.java:26: error: cannot find symbol\n\
    \            if (isVowel(wordArr[i]) && isVowel(wordArr[i + 1])) {\n         \
    \                              ^\n  symbol:   method isVowel(char)\n  location:\
    \ class Problem\n/tmp/tmpeenkmad9.java:27: error: incompatible types: char cannot\
    \ be converted to String\n                return wordArr[i];\n               \
    \               ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String vowel=\"\
    \";\n        int i=word.length();\n        if(word.substring(0,1).equals(\"a\"\
    ) && word.substring(0,2).equals(\"b\") && word.substring(0,3).equals(\"c\") &&\
    \ word.substring(0,4).equals(\"d\")\n                && word.substring(0,5).equals(\"\
    e\") && word.substring(0,6).equals(\"f\") && word.substring(0,7).equals(\"g\"\
    ) && word.substring(0,8).equals(\"h\")\n                && word.substring(0,9).equals(\"\
    i\") && word.substring(0,10).equals(\"j\") && word.substring(0,11).equals(\"k\"\
    ) && word.substring(0,12).equals(\"l\")\n                && word.substring(0,13).equals(\"\
    m\") && word.substring(0,14).equals(\"n\") && word.substring(0,15).equals(\"o\"\
    ) && word.substring(0,16).equals(\"p\")\n                && word.substring(0,17).equals(\"\
    q\") && word.substring(0,18).equals(\"r\") && word.substring(0,19).equals(\"s\"\
    ) && word.substring(0,20).equals(\"t\")\n                && word.substring(0,21).equals(\"\
    u\") && word.substring(0,22).equals(\"v\") && word.substring(0,23).equals(\"w\"\
    ) && word.substring(0,24).equals(\"x\")\n                && word.substring(0,25).equals(\"\
    y\") && word.substring(0,26).equals(\"z\")){\n            return vowel;\n    \
    \    }\n        for(int j=i;j>=0;j--){\n            if(word.substring(j,j+1)!=null){\n\
    \                vowel=word.substring(j,j+1);\n                return vowel;\n\
    \            }\n        }\n        return vowel;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 6, end 7, length 6\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.getClosestVowel(tmpsnurg3c5.java:36)\n\
    \tat Problem.main(tmpsnurg3c5.java:44)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsmh_uozr.java:281: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        ArrayList<String>\
    \ vowels= new ArrayList<>();\n        for(int i=0;i<word.length();i++) {\n   \
    \         String letter=word.substring(i, i+1);\n            if(letter.equals(\"\
    a\") || letter.equals(\"e\") || letter.equals(\"i\") || letter.equals(\"o\") ||\
    \ letter.equals(\"u\")) {\n                vowels.add(letter);\n            }\n\
    \        }\n        String test=\"\";\n        for(int i=0;i<word.length();i++)\
    \ {\n            String letter=word.substring(i, i+1);\n            if(vowels.contains(letter))\
    \ {\n                test = test+letter;\n            }\n        }\n        return\
    \ test;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ao0bkas.java:41)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Map<Character,Integer>\
    \ vowelMap = new HashMap<>();\n        Set<Character> vowels = new HashSet<>();\n\
    \n        for (char c : word.toCharArray()) {\n            vowels.add(c);\n  \
    \      }\n\n        for (char c : vowels) {\n            if (vowelMap.containsKey(c))\
    \ {\n                vowelMap.put(c, vowelMap.get(c) + 1);\n            } else\
    \ {\n                vowelMap.put(c, 1);\n            }\n        }\n\n       \
    \ Optional<Integer> maxValue = vowelMap.entrySet().stream().max(Map.Entry.comparingByValue())\n\
    \                .map(Map.Entry::getValue);\n\n        Optional<Map.Entry<Character,Integer>>\
    \ maxValue = vowelMap.entrySet().stream().max(Map.Entry.comparingByValue());\n\
    \        return maxValue.get().getKey().toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfeet_1ra.java:42: error: variable maxValue is already defined in\
    \ method getClosestVowel(String)\n        Optional<Map.Entry<Character,Integer>>\
    \ maxValue = vowelMap.entrySet().stream().max(Map.Entry.comparingByValue());\n\
    \                                               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String vowels\
    \ = \"AEIOUYaeiouy\";\n        String[] arr1 = word.split(\"\");\n        for\
    \ (int i = 0; i < arr1.length; i++) {\n            if (vowels.contains(arr1[i]))\
    \ {\n                return arr1[i];\n            }\n        }\n        for (int\
    \ i = arr1.length-1; i >=0; i--) {\n            if (vowels.contains(arr1[i]))\
    \ {\n                return arr1[i];\n            }\n        }\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr_piqtzl.java:39)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        \n        //\
    \ Write your code here\n        \n        int wordlength = word.length();\n  \
    \      int vowelcount = 1;\n        int consonantcount = 0;\n        \n      \
    \  for(int i=wordlength-1; i>=0; i--) {\n            if(word.charAt(i) == 'a'||word.charAt(i)\
    \ == 'e'||word.charAt(i) == 'i'||word.charAt(i) == 'o'||word.charAt(i) == 'u')\
    \ {\n                vowelcount++;\n            }\n            if(word.charAt(i)\
    \ == 'A'||word.charAt(i) == 'E'||word.charAt(i) == 'I'||word.charAt(i) == 'O'||word.charAt(i)\
    \ == 'U') {\n                vowelcount++;\n            }\n            if(word.charAt(i)\
    \ == ' ') {\n                consonantcount++;\n            }\n            if(word.charAt(i)\
    \ == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i' || word.charAt(i) ==\
    \ 'o' || word.charAt(i) == 'u' || word.charAt(i) == ' ') {\n                consonantcount++;\n\
    \            }\n        }\n        \n        if(vowelcount >= 2) {\n         \
    \   return \"U\";\n        }\n        if(consonantcount >= 2) {\n            return\
    \ \"U\";\n        }\n        if(vowelcount >= 1) {\n            return \"\";\n\
    \        }\n        if(consonantcount >= 1) {\n            return \"\";\n    \
    \    }\n        \n        return \"U\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5sus1v3l.java:62)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int vowel_a\
    \ = Character.getNumericValue(word.charAt(word.length()-1));\n        int vowel_b\
    \ = Character.getNumericValue(word.charAt(word.length()-2));\n        int vowel_c\
    \ = Character.getNumericValue(word.charAt(word.length()-3));\n\n        if (vowel_a\
    \ != vowel_b && vowel_a != vowel_c && vowel_b != vowel_c){\n            return\
    \ \"\";\n        }\n\n        int consonant_a = Character.getNumericValue(word.charAt(word.length()-3));\n\
    \        int consonant_b = Character.getNumericValue(word.charAt(word.length()-2));\n\
    \        int consonant_c = Character.getNumericValue(word.charAt(word.length()-1));\n\
    \n        if (consonant_a != consonant_b && consonant_a != consonant_c && consonant_b\
    \ != consonant_c){\n            return \"\";\n        }\n\n        int minValue\
    \ = (consonant_a > consonant_b ? consonant_a : consonant_b);\n        int maxValue\
    \ = (consonant_a < consonant_b ? consonant_a : consonant_b);\n\n        if (minValue\
    \ == maxValue) {\n            String result = word.substring(word.length()-2,\
    \ word.length()-1);\n            return result;\n        }\n\n        int diff\
    \ = maxValue - minValue;\n\n        String result = \"\";\n\n        if (diff\
    \ >= vowel_a && diff <= vowel_b) {\n            result = \"U\";\n        } else\
    \ if (diff >= vowel_b && diff <= vowel_c) {\n            result = \"R\";\n   \
    \     } else if (diff >= vowel_c && diff <= vowel_a) {\n            result = \"\
    L\";\n        }\n\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpam2j1lsv.java:63)\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int length =\
    \ word.length();\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u', 'A', 'E',\
    \ 'I', 'O', 'U' };\n        if (length < 2) return \"\";\n        char first =\
    \ word.charAt(length - 1);\n        char lastChar = word.charAt(length - 2);\n\
    \        char[] reverse = Arrays.copyOfRange(word.toCharArray(), 0, length - 1);\n\
    \        Arrays.sort(reverse);\n        char closestVowel = Arrays.binarySearch(reverse,\
    \ lastChar);\n        if (closestVowel >= 0) {\n            int i = closestVowel;\n\
    \            int j = length - 1;\n            while (i <= j) {\n             \
    \   char c = word.charAt(i);\n                if (c < vowels[i]) {\n         \
    \           i = i + 1;\n                } else if (c > vowels[j]) {\n        \
    \            j = j - 1;\n                } else {\n                    return\
    \ word.charAt(i);\n                }\n            }\n            return \"\";\n\
    \        }\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnigfjc5o.java:31: error: incompatible types: possible lossy conversion\
    \ from int to char\n        char closestVowel = Arrays.binarySearch(reverse, lastChar);\n\
    \                                               ^\n/tmp/tmpnigfjc5o.java:42: error:\
    \ incompatible types: char cannot be converted to String\n                   \
    \ return word.charAt(i);\n                                      ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word ==\
    \ null || word.isEmpty()) {\n            return \"\";\n        }\n        Set<Character>\
    \ vowels = Sets.newHashSet('a', 'e', 'i', 'o', 'u');\n        Set<Character> consonants\
    \ = Sets.newHashSet('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n        Set<Character> vowelsOnly\
    \ = vowels.stream().filter(c -> !consonants.contains(c)).collect(Collectors.toSet());\n\
    \        int index = word.lastIndexOf(\"a\");\n        if (index == -1) {\n  \
    \          return \"\";\n        }\n        for (int i = index + 1; i < word.length();\
    \ i++) {\n            char ch = word.charAt(i);\n            if (vowelsOnly.contains(ch))\
    \ {\n                return String.valueOf(ch);\n            }\n        }\n  \
    \      return \"\";\n    }\n    public static void main(String[] args) {\n   \
    \ assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpec27_29n.java:27: error: cannot find symbol\n        Set<Character>\
    \ vowels = Sets.newHashSet('a', 'e', 'i', 'o', 'u');\n                       \
    \         ^\n  symbol:   variable Sets\n  location: class Problem\n/tmp/tmpec27_29n.java:28:\
    \ error: cannot find symbol\n        Set<Character> consonants = Sets.newHashSet('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z');\n                                    ^\n  symbol:   variable\
    \ Sets\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        return \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0f33fh2w.java:27)\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        HashMap<Character,\
    \ Integer> map = new HashMap<>();\n        char[] array = word.toCharArray();\n\
    \n        // find how many vowels are in the word\n        for(int i = 0; i< array.length;\
    \ i++)\n            if(Character.isLetter(array[i]))\n                map.put(array[i],\
    \ 1);\n\n        // find how many consonants are in the word\n        for(int\
    \ i = 0; i< array.length; i++)\n            if(Character.isLetter(array[i]))\n\
    \                map.put(array[i], 1);\n\n        // sort the map by value\n \
    \       Arrays.sort(map.values());\n\n        // return the nearest vowel\n  \
    \      for(int i =0; i <array.length; i++) {\n            if(map.containsKey(array[i])\
    \ && (map.get(array[i]) + 1 < map.get(array[i+1]))) {\n                return\
    \ \"\"; // return empty string if there is no vowel at the right side\n      \
    \      }\n        }\n        return \"\"; // return empty string if no vowel found\
    \ at the right side\n    }\n    public static void main(String[] args) {\n   \
    \ assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphz6vcinh.java:38: error: no suitable method found for sort(Collection<Integer>)\n\
    \        Arrays.sort(map.values());\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; Collection<Integer> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; Collection<Integer> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; Collection<Integer> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; Collection<Integer> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; Collection<Integer> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; Collection<Integer> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; Collection<Integer> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; Collection<Integer> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // Your Code\
    \ Here\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_fs0rzhg.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011633
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int vowelIdx\
    \ = 0;\n        char startChar = word.charAt(word.length() - 1);\n        for\
    \ (char c : word.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n\
    \                if (startChar == Character.toUpperCase(c)) {\n              \
    \      vowelIdx++;\n                } else if (vowelIdx > 0) {\n             \
    \       vowelIdx = 0;\n                    startChar = c;\n                } else\
    \ {\n                    break;\n                }\n            }\n        }\n\
    \        if (vowelIdx == word.length() - 1) {\n            return \"\";\n    \
    \    }\n        char endChar = word.charAt(word.length() - 2);\n        for (char\
    \ c : word.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n   \
    \             if (startChar == Character.toUpperCase(c)) {\n                 \
    \   vowelIdx++;\n                } else if (vowelIdx > 0) {\n                \
    \    vowelIdx = 0;\n                    endChar = c;\n                } else {\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     if (vowelIdx == word.length() - 2) {\n            return \"\";\n       \
    \ }\n        return word.substring(vowelIdx + 1, word.length());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj73enh74.java:60)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if(word.isEmpty())\
    \ return \"\";\n        \n        for(int i = word.length() - 1; i >= 0; i--)\
    \ {\n            char c = word.charAt(i);\n            if(c == 'A' || c == 'E'\
    \ || c == 'I' || c == 'O' || c == 'U') {\n                return word.substring(i,\
    \ i + 1);\n            }\n        }\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo6olfbar.java:35)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int upperBound\
    \ = word.length()-1;\n        int lowerBound = word.length()-1;\n        int counter\
    \ = 0;\n\n        for (char c : word.toCharArray()) {\n            if (Character.isUpperCase(c))\
    \ {\n                counter++;\n                if (counter < lowerBound) {\n\
    \                    lowerBound = counter;\n                }\n            }\n\
    \            if (Character.isLowerCase(c)) {\n                counter++;\n   \
    \             if (counter > upperBound) {\n                    upperBound = counter;\n\
    \                }\n            }\n        }\n\n        if (lowerBound < upperBound)\
    \ {\n            String result = word.substring(0, lowerBound)+word.substring(upperBound+1);\n\
    \            return result;\n        }\n\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 6, length 6\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat java.base/java.lang.String.substring(String.java:2680)\n\
    \tat Problem.getClosestVowel(tmpfomha_r_.java:44)\n\tat Problem.main(tmpfomha_r_.java:51)\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Map<Character,\
    \ Integer> vowels = Arrays.stream(word.toCharArray()).filter(ch -> 'a' <= ch &&\
    \ ch <= 'z' || 'A' <= ch && ch <= 'Z').boxed().collect(Collectors.toMap(ch ->\
    \ ch,\n                ch -> word.indexOf(\"a\" + ch + \"o\") + 1));\n       \
    \ vowels.put('a', 1);\n        vowels.put('e', 1);\n        vowels.put('i', 1);\n\
    \        vowels.put('o', 1);\n        vowels.put('u', 1);\n        vowels.put('y',\
    \ 1);\n        vowels.put('y', 1);\n        vowels.put('h', 1);\n        vowels.put('k',\
    \ 1);\n        vowels.put('q', 1);\n        vowels.put('d', 1);\n        vowels.put('l',\
    \ 1);\n        vowels.put('u', 1);\n        vowels.put('t', 1);\n        vowels.put('f',\
    \ 1);\n        vowels.put('b', 1);\n        return vowels.entrySet().stream()\n\
    \                .filter(entry -> entry.getValue() >= word.indexOf(\"a\" + entry.getKey()\
    \ + \"o\") + 1 && entry.getValue() <= word.indexOf(\"a\" + entry.getKey() + \"\
    u\") + 1)\n                .map(Map.Entry::getKey)\n                .findFirst().orElse(\"\
    \");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp595ka0df.java:24: error: no suitable method found for stream(char[])\n\
    \        Map<Character, Integer> vowels = Arrays.stream(word.toCharArray()).filter(ch\
    \ -> 'a' <= ch && ch <= 'z' || 'A' <= ch && ch <= 'Z').boxed().collect(Collectors.toMap(ch\
    \ -> ch,\n                                               ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (inference variable T#1 has incompatible bounds\n \
    \       equality constraints: char\n        lower bounds: Object)\n    method\
    \ Arrays.<T#2>stream(T#2[],int,int) is not applicable\n      (cannot infer type-variable(s)\
    \ T#2\n        (actual and formal argument lists differ in length))\n    method\
    \ Arrays.stream(int[]) is not applicable\n      (argument mismatch; char[] cannot\
    \ be converted to int[])\n    method Arrays.stream(long[]) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmp595ka0df.java:45: error: incompatible types: String cannot be converted\
    \ to Character\n                .findFirst().orElse(\"\");\n                 \
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<String>\
    \ vowels = new HashSet<String>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"A\");\n        vowels.add(\"E\");\n        vowels.add(\"\
    I\");\n        vowels.add(\"O\");\n        vowels.add(\"U\");\n        int index\
    \ = word.indexOf(\"a\");\n        while (index != -1) {\n            String current\
    \ = word.substring(index + 1, word.length());\n            if (vowels.contains(current))\
    \ {\n                return current;\n            }\n            index = word.indexOf(\"\
    a\", index + 1);\n        }\n        return \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgx8cc4it.java:46)\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // (a)\n   \
    \     // find vowels\n        List<String> vowelsLst = Arrays.asList(\n      \
    \          \"A\", \"E\", \"I\", \"O\", \"U\"\n        );\n        Map<String,\
    \ List<String>> vowelMap = new HashMap<String, List<String>>();\n        vowelsLst.forEach(a\
    \ -> vowelMap.put(a, new ArrayList<String>()));\n        vowelMap.keySet().forEach(a\
    \ -> vowelMap.get(a).add(a));\n        \n        // (b)\n        // find consonants\n\
    \        List<String> consonantsLst = Arrays.asList(\n                \"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\n        );\n    \
    \    Map<String, List<String>> consonantMap = new HashMap<String, List<String>>();\n\
    \        consonantsLst.forEach(a -> consonantMap.put(a, new ArrayList<String>()));\n\
    \        consonantMap.keySet().forEach(a -> consonantMap.get(a).add(a));\n   \
    \     \n        // (c)\n        // find the right consonant and vowel in the word\n\
    \        List<String> vowelsRight = vowelMap.get(word.charAt(word.length()-1));\n\
    \        List<String> consonantsRight = consonantMap.get(word.charAt(word.length()-1));\n\
    \        \n        // (d)\n        // find the vowels before the right consonant\n\
    \        List<String> vowelsLeft = vowelMap.get(word.charAt(word.length()-2));\n\
    \        vowelsLeft.removeAll(vowelsRight);\n        \n        // (e)\n      \
    \  // find vowels after the right consonant\n        List<String> vowelsRight1\
    \ = vowelMap.get(word.charAt(word.length()-3));\n        vowelsRight1.removeAll(vowelsRight);\n\
    \        \n        // (f)\n        // find the left and right consonants of the\
    \ word\n        List<String> consonantsLeft = consonantMap.get(word.charAt(word.length()-2));\n\
    \        List<String> consonantsRight1 = consonantMap.get(word.charAt(word.length()-3));\n\
    \        \n        // (g)\n        // find vowels in between\n        vowelsLeft.addAll(vowelsRight1);\n\
    \        \n        // (h)\n        // find the shortest vowel\n        vowelsLst.removeAll(vowelsRight1);\n\
    \        vowelsLst.forEach((vowel) -> {\n            if (vowel.length() < vowelsRight1.size())\
    \ {\n                vowelsRight1.remove(vowel);\n            }\n        });\n\
    \        \n        // (i)\n        // find vowels in the middle of the word\n\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb81imbz7.java:78: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word.length()\
    \ <= 2) {\n            return \"\";\n        }\n        List<String> vowelList\
    \ = new ArrayList<String>();\n        for (int i = 0; i < word.length(); i++)\
    \ {\n            if (Character.isLetter(word.charAt(i))) {\n                for\
    \ (int j = i + 1; j < word.length(); j++) {\n                    if (Character.isLetter(word.charAt(j)))\
    \ {\n                        char c = word.charAt(i);\n                      \
    \  char d = word.charAt(j);\n                        if (c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u' &&\n                                d !=\
    \ 'a' && d != 'e' && d != 'i' && d != 'o' && d != 'u') {\n                   \
    \         vowelList.add(\"a\");\n                            vowelList.add(\"\
    e\");\n                            vowelList.add(\"i\");\n                   \
    \         vowelList.add(\"o\");\n                            vowelList.add(\"\
    u\");\n                        }\n                    }\n                }\n \
    \           }\n        }\n        vowelList.sort(Comparator.naturalOrder());\n\
    \        int index = vowelList.indexOf(word.charAt(word.length() - 1));\n    \
    \    String vowel = word.substring(word.length() - 1, word.length());\n      \
    \  if (vowelList.contains(vowel)) {\n            return vowel;\n        }\n  \
    \      else {\n            return \"\";\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_rzj8gjw.java:57)\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String[] vowels\
    \ = {\"a\",\"e\",\"i\",\"o\",\"u\"};\n        List<String> vowelList = Arrays.stream(vowels).collect(Collectors.toList());\n\
    \        word= word.toUpperCase();\n        for(int i=word.length()-1;i>=0;i--)\
    \ {\n            String letter = word.substring(i, i+1);\n            if(vowelList.contains(letter))\
    \ {\n                return letter;\n            }\n        }\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw8wqwa_l.java:36)\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String vowels\
    \ = \"AEIOUaeiou\";\n        List<String> list = new ArrayList<>();\n        for\
    \ (int i = 0; i < word.length() - 1; i++) {\n            if (vowels.contains(word.substring(i,\
    \ i + 1))) {\n                list.add(word.substring(i, i + 1));\n          \
    \  }\n        }\n        list.add(word.substring(word.length() - 1));\n      \
    \  Collections.sort(list);\n        if (list.size() > 1) {\n            return\
    \ list.get(list.size() - 1);\n        } else {\n            return \"\";\n   \
    \     }\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaq6kw1m0.java:42)\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        return word.substring(word.length()\
    \ - 1) + getClosestVowel(word.substring(0, word.length() - 1));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin -1, end 0, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat java.base/java.lang.String.substring(String.java:2680)\n\
    \tat Problem.getClosestVowel(tmp8nk6i9zm.java:24)\n\tat Problem.getClosestVowel(tmp8nk6i9zm.java:24)\n\
    \tat Problem.getClosestVowel(tmp8nk6i9zm.java:24)\n\tat Problem.getClosestVowel(tmp8nk6i9zm.java:24)\n\
    \tat Problem.getClosestVowel(tmp8nk6i9zm.java:24)\n\tat Problem.getClosestVowel(tmp8nk6i9zm.java:24)\n\
    \tat Problem.getClosestVowel(tmp8nk6i9zm.java:24)\n\tat Problem.main(tmp8nk6i9zm.java:27)\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // Use recursion\
    \ to solve the problem\n        if (word.length() == 0) {\n            return\
    \ \"\";\n        }\n        // Get the first consonant\n        String firstConsonant\
    \ = word.substring(0, 1);\n        // Get the last consonant\n        String lastConsonant\
    \ = word.substring(word.length() - 1, word.length());\n        // Get the first\
    \ vowel\n        String firstVowel = firstConsonant.substring(0,1);\n        //\
    \ Get the last vowel\n        String lastVowel = lastConsonant.substring(0,1);\n\
    \        // Compare the first vowel\n        String vowel = firstVowel;\n    \
    \    if (vowel.equals(\"A\")) {\n            firstVowel = firstVowel.substring(0,2);\n\
    \        } else if (vowel.equals(\"E\")) {\n            firstVowel = firstVowel.substring(0,1);\n\
    \        } else if (vowel.equals(\"I\")) {\n            firstVowel = firstVowel.substring(0,1);\n\
    \        } else if (vowel.equals(\"O\")) {\n            firstVowel = firstVowel.substring(0,1);\n\
    \        } else if (vowel.equals(\"U\")) {\n            firstVowel = firstVowel.substring(0,1);\n\
    \        } else {\n            return \"\";\n        }\n        vowel = firstVowel;\n\
    \        // Compare the last vowel\n        if (vowel.equals(\"A\")) {\n     \
    \       lastVowel = lastVowel.substring(0,2);\n        } else if (vowel.equals(\"\
    E\")) {\n            lastVowel = lastVowel.substring(0,1);\n        } else if\
    \ (vowel.equals(\"I\")) {\n            lastVowel = lastVowel.substring(0,1);\n\
    \        } else if (vowel.equals(\"O\")) {\n            lastVowel = lastVowel.substring(0,1);\n\
    \        } else if (vowel.equals(\"U\")) {\n            lastVowel = lastVowel.substring(0,1);\n\
    \        } else {\n            return \"\";\n        }\n        vowel = lastVowel;\n\
    \        // Compare the first and last vowel\n        if (vowel.equals(\"A\"))\
    \ {\n            firstVowel = firstVowel.substring(0,1);\n            lastVowel\
    \ = lastVowel.substring(0,1);\n        } else if (vowel.equals(\"E\")) {\n   \
    \         firstVowel = firstVowel.substring(0,1);\n            lastVowel = lastVowel.substring(0,1);\n\
    \        } else if (vowel.equals(\"I\")) {\n            firstVowel = firstVowel.substring(0,1);\n\
    \            lastVowel = lastVowel.substring(0,1);\n        } else if (vowel.equals(\"\
    O\")) {\n            firstVowel = firstVowel.substring(0,1);\n            lastVowel\
    \ = lastVowel.substring(0,1);\n        } else if (vowel\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt06jyyes.java:80: error: ')' expected\n        } else if (vowel\n\
    \                        ^\n/tmp/tmpt06jyyes.java:81: error: illegal start of\
    \ statement\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        final String\
    \ vowels = \"AEIOUaeiou\";\n        final StringBuilder vowelString = new StringBuilder(\"\
    \");\n        final List<String> vowelList = Arrays.asList(vowels.split(\"\"));\n\
    \        for (String vowel : vowelList) {\n            int length = word.length();\n\
    \            boolean found = false;\n            int vowelIndex = -1;\n      \
    \      while (vowelIndex < length && !found) {\n                if (word.charAt(vowelIndex)\
    \ == vowel) {\n                    vowelIndex++;\n                    found =\
    \ true;\n                } else {\n                    vowelIndex--;\n       \
    \         }\n            }\n            if (found) {\n                vowelString.append(vowel);\n\
    \            }\n        }\n        return vowelString.toString();\n    }\n   \
    \ public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9lvts1is.java:32: error: bad operand types for binary operator\
    \ '=='\n                if (word.charAt(vowelIndex) == vowel) {\n            \
    \                                ^\n  first type:  char\n  second type: String\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        //System.out.println(word);\n\
    \        String[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        if (word.length()\
    \ <= 1) return \"\";\n        List<String> vowelLst = new ArrayList<>(Arrays.asList(vowels));\n\
    \        List<String> vowelRst = new ArrayList<>();\n        List<String> vowelLef\
    \ = new ArrayList<>();\n        List<String> vowelRight = new ArrayList<>();\n\
    \        int len = word.length();\n        for (int i = len - 1; i >= 0; i--)\
    \ {\n            if (vowelLst.contains(word.charAt(i))) {\n                vowelLst.remove(word.charAt(i));\n\
    \                vowelRst.remove(word.charAt(i));\n                vowelLeft.remove(word.charAt(i));\n\
    \                vowelRight.remove(word.charAt(i));\n            } else if (vowelRst.contains(word.charAt(i)))\
    \ {\n                vowelRst.remove(word.charAt(i));\n                vowelLst.remove(word.charAt(i));\n\
    \                vowelLeft.remove(word.charAt(i));\n                vowelRight.remove(word.charAt(i));\n\
    \            } else if (vowelLeft.contains(word.charAt(i))) {\n              \
    \  vowelLeft.remove(word.charAt(i));\n                vowelRst.remove(word.charAt(i));\n\
    \                vowelLst.remove(word.charAt(i));\n                vowelRight.remove(word.charAt(i));\n\
    \            } else if (vowelRight.contains(word.charAt(i))) {\n             \
    \   vowelRight.remove(word.charAt(i));\n                vowelLst.remove(word.charAt(i));\n\
    \                vowelRst.remove(word.charAt(i));\n                vowelLeft.remove(word.charAt(i));\n\
    \            }\n        }\n        if (vowelLeft.size() > 0 || vowelRight.size()\
    \ > 0) {\n            for (int i = 0; i < len - 1; i++) {\n                if\
    \ (vowelLst.contains(word.charAt(i)) && vowelRst.contains(word.charAt(i))) {\n\
    \                    return \"\";\n                } else if (vowelLst.contains(word.charAt(i))\
    \ && !vowelRst.contains(word.charAt(i))) {\n                    vowelRst.add(word.charAt(i));\n\
    \                    //System.out.println(vowelRst);\n                } else if\
    \ (vowelRst.contains(word.charAt(i)) && !vowelLst.contains(word.charAt(i))) {\n\
    \                    vowelLst.add(word.charAt(i));\n                    //System.out.println(vowelLst);\n\
    \                } else if (vowelLeft.contains(word.charAt(i)) && !vowelRst.contains(word.charAt(i))\
    \ && !vowelLst.contains(word.charAt(i))) {\n                    vowelLeft.add(word.charAt(i));\n\
    \                    //System.out.println(vowelLeft);\n                } else\
    \ if (vowelRight.contains(word.charAt(i)) && !vowelLst.contains(word.charAt(i))\
    \ && !vowelRst.contains(word.charAt(i))) {\n                    vowelRight.add(word.charAt(i));\n\
    \                    //System.out.println(vowelRight);\n                }\n  \
    \          }\n            //System.out.println(vowelLeft);\n            //System.out.println(vowel\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptcvd2vka.java:76: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011634
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String result\
    \ = \"\";\n        if (word.length() == 0 || word.length() == 1)\n           \
    \ return result;\n        int con = word.length() - 1;\n        String consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n        String vowels = \"aeiou\";\n        String\
    \ str = word.toLowerCase();\n        int firstVowel = 0;\n        int lastVowel\
    \ = con;\n        while (firstVowel < lastVowel) {\n            int index = 0;\n\
    \            while (index < str.length() && str.charAt(index) == consonants.charAt(con))\
    \ {\n                index++;\n            }\n            int start = index -\
    \ 1;\n            while (start >= 0 && str.charAt(start) == vowels.charAt(firstVowel))\
    \ {\n                start--;\n            }\n            if (start <= 0) {\n\
    \                firstVowel = lastVowel + 1;\n            }\n            else\
    \ {\n                int end = index + 1;\n                while (end < str.length()\
    \ && str.charAt(end) == consonants.charAt(con)) {\n                    end++;\n\
    \                }\n                int lastIndex = con;\n                while\
    \ (lastIndex > firstVowel && str.charAt(lastIndex) == vowels.charAt(lastVowel))\
    \ {\n                    lastIndex--;\n                }\n                if (end\
    \ >= str.length()) {\n                    lastVowel = firstVowel - 1;\n      \
    \          }\n                else {\n                    int middle = start +\
    \ 1;\n                    while (middle < end && str.charAt(middle) == consonants.charAt(con))\
    \ {\n                        middle++;\n                    }\n              \
    \      if (middle >= end) {\n                        lastVowel = firstVowel;\n\
    \                    }\n                    else {\n                        firstVowel\
    \ = lastVowel + 1;\n                        lastVowel = firstVowel;\n        \
    \                int middle2 = middle+1;\n                        while (middle2\
    \ < end && str.charAt(middle2) == consonants.charAt(con)) {\n                \
    \            middle2++;\n                        }\n                        if\
    \ (middle2 < end) {\n                            result = str.substring(middle,\
    \ end);\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp48y1o0lm.java:82)\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if(word.length()\
    \ < 2) {\n            return \"\";\n        }\n        List<String> vowel = new\
    \ ArrayList<>();\n        vowel.add(\"a\");\n        vowel.add(\"e\");\n     \
    \   vowel.add(\"i\");\n        vowel.add(\"o\");\n        vowel.add(\"u\");\n\
    \        \n        word = word.toUpperCase();\n        \n        String vowelStr\
    \ = \"\";\n        for(int i = word.length()-1; i >=0; i--) {\n            char\
    \ c = word.charAt(i);\n            vowelStr += c;\n            vowel.add(vowelStr);\n\
    \        }\n        \n        \n        String nextVowel = word;\n        boolean\
    \ found = false;\n        \n        while(!found) {\n            nextVowel = nextVowel.substring(0,\
    \ nextVowel.length() - 1);\n            if(vowel.contains(nextVowel)) {\n    \
    \            found = true;\n            }\n        }\n        \n        return\
    \ nextVowel;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.getClosestVowel(tmpeff5blw1.java:48)\n\
    \tat Problem.main(tmpeff5blw1.java:57)\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String vowel\
    \ = \"aAeEiIoOuU\";\n        char[] arr = word.toCharArray();\n        Arrays.sort(arr);\n\
    \        return Arrays.binarySearch(vowel, arr, (ch1, ch2) -> (ch1 - 'a') == (ch2\
    \ - 'a'));\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdsid9ni.java:27: error: no suitable method found for binarySearch(String,char[],(ch1,ch2)-[...]\
    \ 'a'))\n        return Arrays.binarySearch(vowel, arr, (ch1, ch2) -> (ch1 - 'a')\
    \ == (ch2 - 'a'));\n                     ^\n    method Arrays.<T#1>binarySearch(T#1[],T#1,Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (argument mismatch; String cannot be converted to T#1[]))\n    method Arrays.<T#2>binarySearch(T#2[],int,int,T#2,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>binarySearch(T#1[],T#1,Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>binarySearch(T#2[],int,int,T#2,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<Character>\
    \ vowels = newHashSet<Character>();\n        vowels.addAll(Arrays.asList('a','e','i','o','u'));\n\
    \        String vowelsString = vowels.toString();\n        String[] letters =\
    \ word.split(\"\");\n        int startIndex = 0;\n        int endIndex = letters.length-1;\n\
    \        while(startIndex < endIndex) {\n            int midIndex = (startIndex+endIndex)/2;\n\
    \            String vowel = letters[midIndex].toLowerCase();\n            vowelsString\
    \ = vowelsString.replaceFirst(vowel, \"\");\n            if (vowelsString.isEmpty())\
    \ return \"\";\n            if (vowelsString.contains(vowelsString)) {\n     \
    \           startIndex = midIndex+1;\n            }\n            else {\n    \
    \            endIndex = midIndex-1;\n            }\n        }\n        return\
    \ \"\";\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuw7fvfgm.java:24: error: -> expected\n        Set<Character> vowels\
    \ = newHashSet<Character>();\n                                               \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        \n        Set<Character>\
    \ vowels = new HashSet<Character>();\n        vowels.add('a');\n        vowels.add('e');\n\
    \        vowels.add('i');\n        vowels.add('o');\n        vowels.add('u');\n\
    \        vowels.add('y');\n        vowels.add('\xE6');\n        vowels.add('\xE5\
    ');\n        \n        \n        \n        \n        // Step 1: First sort the\
    \ letters in string from right to left. \n        \n        \n        \n     \
    \   \n        // Step 2: Go through the sorted letters and find the first vowel\
    \ character that is between \n        // two consonants from the right side. \n\
    \        // Keep searching until we found a vowel character that stands between\
    \ two consonants. \n        // This step is important to make sure that the consonants\
    \ found are actually in \n        // between the two vowels. \n        \n    \
    \    \n        \n        \n        \n        \n        \n        // Step 3: Return\
    \ the character you found in the previous step. \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n    }\n    public static void main(String[] args)\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpml13vmeb.java:215: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        LinkedList<Character>\
    \ vowelList = new LinkedList<>();\n        vowelList.addLast('a', 'e', 'i', 'o',\
    \ 'u', 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u', 'y');\n     \
    \   vowelList.addLast('a', 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a',\
    \ 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u',\
    \ 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a',\
    \ 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u',\
    \ 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a',\
    \ 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u',\
    \ 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a',\
    \ 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u',\
    \ 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a',\
    \ 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u',\
    \ 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a',\
    \ 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u',\
    \ 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a',\
    \ 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u',\
    \ 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a',\
    \ 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u',\
    \ 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a',\
    \ 'e', 'i', 'o', 'u', 'y');\n        vowelList.addLast('a', 'e', 'i', 'o', 'u',\
    \ 'y');\n        vowelList.addLast\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwpp3phkv.java:54: error: not a statement\n        vowelList.addLast\n\
    \                 ^\n/tmp/tmpwpp3phkv.java:54: error: ';' expected\n        vowelList.addLast\n\
    \                         ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if(word.length()\
    \ == 0)\n            return \"\";\n        Stack<Character> vowels = new Stack<Character>();\n\
    \        Stack<Character> vowelsBefore = new Stack<Character>();\n        Stack<Character>\
    \ vowelsAfter = new Stack<Character>();\n        for(int i = word.length() - 1;\
    \ i >= 0; i--) {\n            vowelsBefore.push(word.charAt(i));\n        }\n\
    \        for(int i = 0; i < word.length(); i++) {\n            char c = word.charAt(i);\n\
    \            vowels.push(c);\n        }\n        for(int i = 0; i < word.length();\
    \ i++) {\n            char c = word.charAt(i);\n            vowelsAfter.push(c);\n\
    \        }\n        int index = vowelsBefore.size() - 1;\n        while(vowelsBefore.isEmpty()\
    \ || vowelsBefore.peek() == vowels.peek()) {\n            index--;\n         \
    \   if(index < 0) {\n                index += vowels.size();\n            }\n\
    \            vowelsBefore.pop();\n        }\n        index = vowelsAfter.size()\
    \ - 1;\n        while(vowelsAfter.isEmpty() || vowelsAfter.peek() == vowels.peek())\
    \ {\n            index++;\n            if(index > vowels.size()) {\n         \
    \       index -= vowels.size();\n            }\n            vowelsAfter.pop();\n\
    \        }\n        if(vowelsBefore.isEmpty() && vowelsAfter.isEmpty()) {\n  \
    \          return \"\";\n        }\n        for(int i = index + 1; i < vowelsBefore.size();\
    \ i++) {\n            if(vowelsBefore.peek() == vowels.peek()) {\n           \
    \     vowelsBefore.pop();\n                vowelsAfter.push(vowelsBefore.peek());\n\
    \                index++;\n                while(index < vowelsAfter.size()) {\n\
    \                    vowelsAfter.pop();\n                    index++;\n      \
    \          }\n                break;\n            }\n        }\n        if(vowelsAfter.size()\
    \ > 0) {\n            vowelsBefore.push(vowels.peek());\n            int beforeIndex\
    \ = 0;\n            for(; beforeIndex < vowelsAfter.size() && vowelsAfter.peek()\
    \ == vowels.peek(); beforeIndex++) {\n                vowelsBefore.push(vowelsAfter.peek());\n\
    \            }\n            if(beforeIndex > 0) {\n                vowelsBefore.push(vowels.peek());\n\
    \                vowelsAfter.push(vowels.peek());\n            }\n        }\n\
    \        if(vowelsBefore.size() > 2) {\n            int index = vowelsBefore.size()\
    \ - 2;\n            while(vowelsBefore.peek() == vowels.peek()) {\n          \
    \      vowelsBefore.push(vowelsBefore.peek());\n                index--;\n   \
    \             if(index < 0) {\n                    index += vowels.size();\n \
    \               }\n                \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr4vrmt6x.java:92: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<Character>\
    \ vowels = new ArrayList<Character>();\n        vowels.add('a');\n        vowels.add('e');\n\
    \        vowels.add('i');\n        vowels.add('o');\n        vowels.add('u');\n\
    \        vowels.add('y');\n\n        List<Character> consonants = new ArrayList<Character>();\n\
    \        consonants.add('b');\n        consonants.add('c');\n        consonants.add('d');\n\
    \        consonants.add('f');\n        consonants.add('g');\n        consonants.add('j');\n\
    \        consonants.add('k');\n        consonants.add('l');\n        consonants.add('m');\n\
    \        consonants.add('n');\n        consonants.add('p');\n        consonants.add('q');\n\
    \        consonants.add('r');\n        consonants.add('s');\n        consonants.add('t');\n\
    \        consonants.add('v');\n        consonants.add('w');\n        consonants.add('x');\n\
    \        consonants.add('z');\n\n        char[] charArray = word.toCharArray();\n\
    \        Arrays.sort(charArray);\n        char[] result = new char[charArray.length];\n\
    \        for (int i = 0; i < charArray.length; i++) {\n            if (vowels.contains(charArray[i]))\
    \ {\n                result[i] = charArray[i];\n            }\n            else\
    \ if (consonants.contains(charArray[i])) {\n                if (charArray[i] >=\
    \ charArray[i - 1]) {\n                    result[i] = charArray[i];\n       \
    \         }\n            }\n            else {\n                return \"\";\n\
    \            }\n        }\n\n        return new String(result);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -1 out of bounds for length 6\n\tat Problem.getClosestVowel(tmpz50b50zq.java:61)\n\
    \tat Problem.main(tmpz50b50zq.java:73)\n"
  stdout: ''
  timestamp: 1660011636
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<String>\
    \ vowelSet = Stream.of(word.split(\"\")).collect(Collectors.toSet());\n      \
    \  vowelSet.addAll(vowelSet);\n        List<String> vowelList = vowelSet.stream().filter(s\
    \ -> s.equals(\"u\")||s.equals(\"U\")).collect(Collectors.toList());\n       \
    \ vowelList.add(\"\");\n        List<String> result = vowelList.stream()\n   \
    \             .collect(Collectors.toMap(s -> s, s -> s.endsWith(\"a\") ? \"u\"\
    \ :\n                        (s.endsWith(\"e\")||s.endsWith(\"E\")) ? \"u\" :\n\
    \                        (s.endsWith(\"o\")||s.endsWith(\"O\")) ? \"u\" :\n  \
    \                      (s.endsWith(\"i\")||s.endsWith(\"I\")) ? \"u\" :\n    \
    \                    (s.endsWith(\"e\")||s.endsWith(\"E\")) ? \"i\" :\n      \
    \                  (s.endsWith(\"o\")||s.endsWith(\"O\")) ? \"i\" :\n        \
    \                (s.endsWith(\"i\")||s.endsWith(\"I\")) ? \"i\" :\n          \
    \              (s.endsWith(\"a\")||s.endsWith(\"A\")) ? \"a\" :\n            \
    \            (s.endsWith(\"o\")||s.endsWith(\"O\")) ? \"o\" :\n              \
    \          (s.endsWith(\"a\")||s.endsWith(\"A\")) ? \"a\" :\n                \
    \        (s.endsWith(\"e\")||s.endsWith(\"E\")) ? \"e\" :\n                  \
    \      (s.endsWith(\"o\")||s.endsWith(\"O\")) ? \"o\" :\n                    \
    \    (s.endsWith(\"a\")||s.endsWith(\"A\")) ? \"a\" :\n                      \
    \  (s.endsWith(\"e\")||s.endsWith(\"E\")) ? \"e\" :\n                        (s.endsWith(\"\
    o\")||s.endsWith(\"O\")) ? \"o\" :\n                        (s.endsWith(\"a\"\
    )||s.endsWith(\"A\")) ? \"a\" :\n                        (s.endsWith(\"e\")||s.endsWith(\"\
    E\")) ? \"e\" :\n                        (s.endsWith(\"o\")||s.endsWith(\"O\"\
    )) ? \"o\" :\n                        (s.endsWith(\"a\")||s.endsWith(\"A\")) ?\
    \ \"a\" :\n                        (s.endsWith(\"e\")||s.endsWith(\"E\")) ? \"\
    e\" :\n                        (s.endsWith(\"o\")||s.endsWith(\"O\")) ? \"o\"\
    \ :\n                        (s.endsWith(\"a\")||s.endsWith(\"A\")) ? \"a\" \n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0h89y17m.java:50: error: : expected\n                        (s.endsWith(\"\
    a\")||s.endsWith(\"A\")) ? \"a\" \n                                          \
    \                      ^\n/tmp/tmp0h89y17m.java:51: error: illegal start of expression\n\
    \    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<String>\
    \ vowelSet = new HashSet<String>(Arrays.asList(\n            \"A\", \"E\", \"\
    I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\"));\n        List<String>\
    \ vowelList = Arrays.asList(\n            \"A\", \"E\", \"I\", \"O\", \"U\", \"\
    a\", \"e\", \"i\", \"o\", \"u\");\n        List<String> consonantList = Arrays.asList(\n\
    \            \"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"\
    M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"\
    Z\");\n        Set<String> consonantSet = new HashSet<String>(Arrays.asList(\n\
    \            \"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"\
    M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"\
    Z\"));\n        \n        Set<String> set1 = new HashSet<String>();\n        for(String\
    \ cons : consonantList) {\n            set1.add(cons);\n        }\n        for(String\
    \ vowel : vowelList) {\n            set1.add(vowel);\n        }\n        \n  \
    \      \n        \n        Set<String> set2 = new HashSet<String>();\n       \
    \ for(String cons : consonantList) {\n            set2.add(cons);\n        }\n\
    \        for(String vowel : vowelList) {\n            set2.add(vowel);\n     \
    \   }\n        \n        Set<String> set3 = new HashSet<String>();\n        for(String\
    \ cons : consonantList) {\n            set3.add(cons);\n        }\n        for(String\
    \ vowel : vowelList) {\n            set3.add(vowel);\n        }\n        \n  \
    \      \n        if(word.length() <= 2) {\n            return \"\";\n        }\n\
    \        String firstConsonant = word.substring(word.length() - 1, word.length());\n\
    \        if(firstConsonant.equals(\"\")) {\n            return \"\";\n       \
    \ }\n        \n        \n        \n        if(vowelList.contains(firstConsonant))\
    \ {\n            return firstConsonant;\n        }\n        \n        \n     \
    \   \n        int index = -1;\n        for(int i = 0; i < word.length(); i++)\
    \ {\n            String c = word.substring(i, i + 1);\n            \n        \
    \    if(consonantSet.contains(c)) {\n                index = i;\n            \
    \    break;\n            }\n        }\n        \n        if(index == -1) {\n \
    \           return \"\";\n        }\n        \n        \n        \n        \n\
    \        \n        \n        String firstVowel = word.substring(0, index);\n \
    \       if(vowelSet.contains(firstVowel)) {\n            return firstVowel;\n\
    \        }\n        \n        if(\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_x_adn8_.java:101: error: illegal start of expression\n    }\n\
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011635
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = new ArrayList<>(Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\"));\n\
    \        List<String> consonants = new ArrayList<>(Arrays.asList(\"b\", \"c\"\
    , \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"));\n        List<String>\
    \ prefixs = new ArrayList<>(Arrays.asList(\"b\", \"c\"));\n        List<String>\
    \ suffixes = new ArrayList<>(Arrays.asList(\"d\", \"f\"));\n        Set<String>\
    \ allVowels = vowels.stream().distinct().collect(Collectors.toSet());\n      \
    \  Set<String> allConsonants = consonants.stream().distinct().collect(Collectors.toSet());\n\
    \        Set<String> allPrefixes = prefixes.stream().distinct().collect(Collectors.toSet());\n\
    \        Set<String> allSuffixes = suffixes.stream().distinct().collect(Collectors.toSet());\n\
    \        Set<String> allCombinations = Stream.concat(allVowels.stream(), allConsonants.stream(),\
    \ allPrefixes.stream(), allSuffixes.stream()).collect(Collectors.toSet());\n \
    \       List<String> vowelsAtEnd = word.endsWith(\"a\") ? word.substring(0, word.length()\
    \ - 1) : word.substring(word.length() - 1);\n        Set<String> vowelsAtEndSet\
    \ = vowelsAtEnd.chars().mapToObj(i -> String.valueOf((char) i)).collect(Collectors.toSet());\n\
    \        Set<String> vowelsAtStartSet = vowels.stream().flatMap(i -> Arrays.stream(i)).distinct().collect(Collectors.toSet());\n\
    \        Set<String> vowelsAtStartAndEnd = Stream.concat(vowelsAtStartSet.stream(),\
    \ vowelsAtEndSet.stream()).collect(Collectors.toSet());\n        Set<String> vowelsAtStartAndEndSet\
    \ = vowelsAtStartAndEnd.stream().flatMap(i -> Arrays.stream(i)).distinct().collect(Collectors.toSet());\n\
    \        Set<String> prefixesAndSuffixesSet = Stream.concat(allPrefixes.stream(),\
    \ allSuffixes.stream()).collect(Collectors.toSet());\n        Set<String> allVowelsSet\
    \ = allVowels.stream().flatMap(i -> Arrays.stream(i)).distinct().collect(Collectors.toSet());\n\
    \        Set<String> allConsonantsSet = allConsonants.stream().flatMap(i -> Arrays.stream(i)).distinct().collect(Collectors.toSet());\n\
    \n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyctfsx93.java:30: error: cannot find symbol\n        Set<String>\
    \ allPrefixes = prefixes.stream().distinct().collect(Collectors.toSet());\n  \
    \                                ^\n  symbol:   variable prefixes\n  location:\
    \ class Problem\n/tmp/tmpyctfsx93.java:32: error: method concat in interface Stream<T#2>\
    \ cannot be applied to given types;\n        Set<String> allCombinations = Stream.concat(allVowels.stream(),\
    \ allConsonants.stream(), allPrefixes.stream(), allSuffixes.stream()).collect(Collectors.toSet());\n\
    \                                            ^\n  required: Stream<? extends T#1>,Stream<?\
    \ extends T#1>\n  found:    Stream<String>,Stream<String>,Stream<String>,Stream<String>\n\
    \  reason: cannot infer type-variable(s) T#1\n    (actual and formal argument\
    \ lists differ in length)\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Object declared in method <T#1>concat(Stream<? extends T#1>,Stream<? extends\
    \ T#1>)\n    T#2 extends Object declared in interface Stream\n/tmp/tmpyctfsx93.java:33:\
    \ error: incompatible types: bad type in conditional expression\n        List<String>\
    \ vowelsAtEnd = word.endsWith(\"a\") ? word.substring(0, word.length() - 1) :\
    \ word.substring(word.length() - 1);\n                                       \
    \                               ^\n    String cannot be converted to List<String>\n\
    /tmp/tmpyctfsx93.java:33: error: incompatible types: bad type in conditional expression\n\
    \        List<String> vowelsAtEnd = word.endsWith(\"a\") ? word.substring(0, word.length()\
    \ - 1) : word.substring(word.length() - 1);\n                                \
    \                                                                            \
    \ ^\n    String cannot be converted to List<String>\n/tmp/tmpyctfsx93.java:34:\
    \ error: cannot find symbol\n        Set<String> vowelsAtEndSet = vowelsAtEnd.chars().mapToObj(i\
    \ -> String.valueOf((char) i)).collect(Collectors.toSet());\n                \
    \                                ^\n  symbol:   method chars()\n  location: variable\
    \ vowelsAtEnd of type List<String>\n/tmp/tmpyctfsx93.java:35: error: no suitable\
    \ method fo"
  stdout: ''
  timestamp: 1660011637
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String vowels\
    \ = \"AEIOUaeiouAEIOU\";\n        char vowel = word.charAt(word.length() - 1);\n\
    \        char[] arr = word.toCharArray();\n        String result = \"\";\n   \
    \     for (int i = 0; i < arr.length; i++) {\n            if (vowels.indexOf(arr[i])\
    \ > 0) {\n                result = arr[i];\n            }\n        }\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmt3xvjr6.java:30: error: incompatible types: char cannot be converted\
    \ to String\n                result = arr[i];\n                            ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011636
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // convert word\
    \ to upper case\n        String uppercase = word.toUpperCase();\n\n        //\
    \ convert to list to remove repeating characters\n        List<Character> list\
    \ = new ArrayList<>(Arrays.asList(uppercase));\n\n        // find the first consonant\
    \ from right to left\n        int index = list.lastIndexOf('\\u0000');\n     \
    \   if (index >= 0) {\n            // get the character after that index\n   \
    \         char nextChar = list.get(index + 1);\n\n            // get all vowels\n\
    \            List<Character> vowels = new ArrayList<>(Arrays.asList('a', 'e',\
    \ 'i', 'o', 'u'));\n\n            // find the vowel right to left\n          \
    \  int i = vowels.indexOf(nextChar);\n            if (i >= 0) {\n            \
    \    // get the character before that vowel\n                char prevChar = vowels.get(i-1);\n\
    \n                // if the index between vowels is a vowel\n                if\
    \ (nextChar == prevChar) {\n                    // remove that vowel from the\
    \ list\n                    list.remove(i);\n                }\n            }\n\
    \        }\n\n        // return the result\n        return list.isEmpty() ? \"\
    \" : list.get(0);\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr6gyzh67.java:28: error: incompatible types: cannot infer type\
    \ arguments for ArrayList<>\n        List<Character> list = new ArrayList<>(Arrays.asList(uppercase));\n\
    \                                            ^\n    reason: inference variable\
    \ E has incompatible bounds\n      equality constraints: Character\n      lower\
    \ bounds: T,String\n  where E,T are type-variables:\n    E extends Object declared\
    \ in class ArrayList\n    T extends Object declared in method <T>asList(T...)\n\
    /tmp/tmpr6gyzh67.java:54: error: incompatible types: bad type in conditional expression\n\
    \        return list.isEmpty() ? \"\" : list.get(0);\n                       \
    \                      ^\n    Character cannot be converted to String\n2 errors\n"
  stdout: ''
  timestamp: 1660011636
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String vowel\
    \ = \"\";\n        int index = word.length() - 1;\n        int count = 0;\n  \
    \      // Use string builder instead of String concatenation in loop\n       \
    \ StringBuilder builder = new StringBuilder();\n        for(int i = index; i >=\
    \ 0; i--) {\n            if(word.charAt(i) == vowel) {\n                count++;\n\
    \                if(count == 1) {\n                    // If one vowel meet this\
    \ condition then return this vowel\n                    vowel = word.charAt(i);\n\
    \                    builder.append(vowel);\n                }\n             \
    \   // If more than one vowel meet this condition then return this vowel which\
    \ is \n                // the minimum distance from the right\n              \
    \  else {\n                    // We use string builder instead of string concatenation\
    \ in loop\n                    // to reduce number of string concatenation\n \
    \                   builder.setLength(1);\n                    builder.append(vowel);\n\
    \                    builder.append(vowel);\n                }\n            }\n\
    \        }\n        return builder.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr0awyyte.java:30: error: bad operand types for binary operator\
    \ '=='\n            if(word.charAt(i) == vowel) {\n                          \
    \    ^\n  first type:  char\n  second type: String\n/tmp/tmpr0awyyte.java:34:\
    \ error: incompatible types: char cannot be converted to String\n            \
    \        vowel = word.charAt(i);\n                                       ^\n2\
    \ errors\n"
  stdout: ''
  timestamp: 1660011637
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String[] arr\
    \ = word.split(\"[^a-z]\");\n        Arrays.sort(arr);\n        return arr[arr.length\
    \ - 1];\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5g6qhi4w.java:29)\n"
  stdout: ''
  timestamp: 1660011637
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String vowel\
    \ = \"\";\n        int a = word.length() - 1;\n        boolean isUpper = false;\n\
    \        String consonant = \"bcdfghjklmnpqrstvwxyz\";\n        for(int i = word.length()\
    \ - 2; i > 0; i--) {\n            String s = word.substring(i, i + 2);\n     \
    \       char c = s.charAt(0);\n            if(isUpper) {\n                if(consonant.contains(Character.toUpperCase(c)))\
    \ {\n                    vowel += c;\n                }\n            } else {\n\
    \                if(consonant.contains(Character.toUpperCase(c))) {\n        \
    \            vowel += c;\n                } else {\n                    if(consonant.contains(c))\
    \ {\n                        vowel += c;\n                    }\n            \
    \    }\n            }\n            isUpper = !isUpper;\n        }\n        return\
    \ vowel;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe8e89csh.java:32: error: incompatible types: char cannot be converted\
    \ to CharSequence\n                if(consonant.contains(Character.toUpperCase(c)))\
    \ {\n                                                           ^\n/tmp/tmpe8e89csh.java:36:\
    \ error: incompatible types: char cannot be converted to CharSequence\n      \
    \          if(consonant.contains(Character.toUpperCase(c))) {\n              \
    \                                             ^\n/tmp/tmpe8e89csh.java:39: error:\
    \ incompatible types: char cannot be converted to CharSequence\n             \
    \       if(consonant.contains(c)) {\n                                        \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011637
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<String>\
    \ vowelSet = new HashSet<>();\n        vowelSet.add(\"a\");\n        vowelSet.add(\"\
    e\");\n        vowelSet.add(\"i\");\n        vowelSet.add(\"o\");\n        vowelSet.add(\"\
    u\");\n\n        String vowels = \"\";\n        for(int i = word.length() - 1;\
    \ i >= 0; i--){\n            char letter = word.charAt(i);\n            if(vowelSet.contains(Character.toString(letter))){\n\
    \                vowels += letter;\n            }\n        }\n        return vowels;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprx62cwz2.java:41)\n"
  stdout: ''
  timestamp: 1660011637
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        //get vowels\
    \ at ends\n        String[] ends = word.substring(word.length() - 1).split(\"\
    [aeiouy]\");\n        // get the vowel count at ends\n        int vowelCount =\
    \ 0;\n        for (String end : ends) {\n            if (end.equals(end.toUpperCase()))\
    \ {\n                vowelCount++;\n            }\n        }\n        //get the\
    \ vowel count at begins\n        int vCount = word.substring(0, word.length()\
    \ - 1).split(\"[aeiouy]\").length;\n        if (vCount > vowelCount) {\n     \
    \       vowelCount = vCount;\n        }\n        // get all vowels\n        String[]\
    \ vowels = word.split(\"[aeiouy]\");\n        // get vowel count for each vowel\n\
    \        Map<String, Integer> vowelCount = new HashMap<>();\n        for (int\
    \ i = 0; i < vowels.length; i++) {\n            if (vowelCount.containsKey(vowels[i]))\
    \ {\n                vowelCount.put(vowels[i], vowelCount.get(vowels[i]) + 1);\n\
    \            } else {\n                vowelCount.put(vowels[i], 1);\n       \
    \     }\n        }\n        // find the vowel count with the greatest difference\
    \ in vowel count from the two ends.\n        int maxVCount = vowelCount.get(vowels[ends.length\
    \ - 1]) - vowelCount.get(vowels[0]);\n        String[] maxVCountVowels = new String[vowels.length\
    \ - 1];\n        vowelCount\n                .forEach((k, v) -> {\n          \
    \          if (maxVCount - v >= 0) {\n                        maxVCount = maxVCount\
    \ - v;\n                        maxVCountVowels[v] = k;\n                    }\n\
    \                });\n        // return the vowel with the greatest difference\n\
    \        if (maxVCountVowels.length == 0) {\n            return \"\";\n      \
    \  } else {\n            return maxVCountVowels[0];\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp48lk0tfp.java:41: error: variable vowelCount is already defined\
    \ in method getClosestVowel(String)\n        Map<String, Integer> vowelCount =\
    \ new HashMap<>();\n                             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011637
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Map<Character,\
    \ Integer> map = new HashMap<>();\n        for (char c : word.toCharArray()) {\n\
    \            if (map.containsKey(c)) {\n                map.put(c, map.get(c)\
    \ + 1);\n            } else {\n                map.put(c, 1);\n            }\n\
    \        }\n        ArrayList<String> vowels = new ArrayList<>();\n        for\
    \ (Character c: map.keySet()) {\n            vowels.add(\"\" + c);\n         \
    \   if (vowels.get(vowels.size()-1) == \"\" + c) {\n                vowels.remove(vowels.size()-1);\n\
    \            }\n        }\n        int index = Collections.binarySearch(vowels,\
    \ \"\" + word.toLowerCase().charAt(word.length() - 1));\n        if(index > -1)\
    \ {\n            String returnValue = vowels.get(index);\n            return returnValue;\n\
    \        }\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj4uimrn7.java:47)\n"
  stdout: ''
  timestamp: 1660011638
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        ArrayList vowels\
    \ = new ArrayList();\n        vowels.add(\"a\");\n        vowels.add(\"e\");\n\
    \        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        \n        char current = word.charAt(word.length() - 1);\n    \
    \    \n        while(Character.isLetter(current)) {\n            int count = 0;\n\
    \            for(int i = 0; i < word.length(); i++) {\n                if(vowels.contains(word.charAt(i)))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if(count > 1) {\n                return word.substring(word.length() - 1,\
    \ word.length());\n            }\n            current = word.charAt(word.length()\
    \ - 1);\n        }\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011642
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // Your code\
    \ goes here\n        String vowel = \"U\";\n        if (word.length() > 0) {\n\
    \            StringBuilder stringBuilder = new StringBuilder();\n            for\
    \ (int i = 0; i < word.length() - 1; i++) {\n                char c = word.charAt(i);\n\
    \                if (isVowel(c)) {\n                    if (i != 0) {\n      \
    \                  char c1 = word.charAt(i - 1);\n                        if (c\
    \ == c1) {\n                            stringBuilder.append(vowel);\n       \
    \                     break;\n                        }\n                    }\n\
    \                    stringBuilder.append(vowel);\n                }\n       \
    \     }\n            if (stringBuilder.length() == 0) {\n                return\
    \ \"\";\n            }\n            return stringBuilder.toString();\n       \
    \ }\n        return \"\";\n    }\n    public static void main(String[] args) {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd11_8ec0.java:30: error: cannot find symbol\n                if\
    \ (isVowel(c)) {\n                    ^\n  symbol:   method isVowel(char)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011637
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<String>\
    \ vowelSet = new HashSet<>();\n        vowelSet.add(\"a\");\n        vowelSet.add(\"\
    e\");\n        vowelSet.add(\"i\");\n        vowelSet.add(\"o\");\n        vowelSet.add(\"\
    u\");\n\n        String vowel = getClosestVowel(vowelSet, word, new HashSet<>());\n\
    \        System.out.println(vowel);\n        return vowel;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqakmrftn.java:31: error: method getClosestVowel in class Problem\
    \ cannot be applied to given types;\n        String vowel = getClosestVowel(vowelSet,\
    \ word, new HashSet<>());\n                       ^\n  required: String\n  found:\
    \    Set<String>,String,HashSet<Object>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011637
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        //  Write your\
    \ code here.\n        String[] arrWord = word.split(\"\");\n        ArrayList<String>\
    \ arrVowel = new ArrayList<>();\n        Arrays.stream(arrWord).forEach(letter\
    \ -> {\n            if(letter.equals(\"a\") || letter.equals(\"A\") || letter.equals(\"\
    e\") || letter.equals(\"E\") || letter.equals(\"i\") || letter.equals(\"I\") ||\
    \ letter.equals(\"o\") || letter.equals(\"O\") || letter.equals(\"u\") || letter.equals(\"\
    U\") || letter.equals(\"y\") || letter.equals(\"Y\"))\n                arrVowel.add(letter);\n\
    \        });\n        arrVowel.add(\"a\");\n        arrVowel.add(\"e\");\n   \
    \     arrVowel.add(\"i\");\n        arrVowel.add(\"o\");\n        arrVowel.add(\"\
    u\");\n        arrVowel.add(\"y\");\n        Collections.shuffle(arrVowel);\n\
    \        if(arrVowel.isEmpty())\n            return \"\";\n        int length\
    \ = arrVowel.size();\n        for(int i = 0; i < arrVowel.size(); i++){\n    \
    \        if(i < length){\n                if(word.charAt(word.length() - arrVowel.size()\
    \ - 1) != arrVowel.get(i))\n                    return \"\";\n            }else{\n\
    \                if(word.charAt(word.length() - arrVowel.size()) != arrVowel.get(i))\n\
    \                    return \"\";\n            }\n        }\n        return arrVowel.get(arrVowel.size()\
    \ - 1);\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq1ea440r.java:43: error: bad operand types for binary operator\
    \ '!='\n                if(word.charAt(word.length() - arrVowel.size() - 1) !=\
    \ arrVowel.get(i))\n                                                         \
    \           ^\n  first type:  char\n  second type: String\n/tmp/tmpq1ea440r.java:46:\
    \ error: bad operand types for binary operator '!='\n                if(word.charAt(word.length()\
    \ - arrVowel.size()) != arrVowel.get(i))\n                                   \
    \                             ^\n  first type:  char\n  second type: String\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011637
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        \n        String\
    \ vowels=\"AEIOUaeiou\";\n        \n        if(vowels.contains(word.substring(word.length()-2)))\
    \ {\n            return word.substring(word.length()-2,word.length()-1);\n   \
    \     }\n        else if(vowels.contains(word.substring(word.length()-1))) {\n\
    \            return word.substring(word.length()-1,word.length());\n        }\n\
    \        else {\n            return \"\";\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl7xk4_2e.java:38)\n"
  stdout: ''
  timestamp: 1660011638
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String v1 =\
    \ \"\";\n        String v2 = \"\";\n        String v3 = \"\";\n        for(int\
    \ i=0;i<word.length();i++) {\n            if (word.charAt(i)=='a' || word.charAt(i)=='e'\
    \ || word.charAt(i)=='i' ||\n                word.charAt(i)=='o' || word.charAt(i)=='u')\
    \ {\n                v1+= word.charAt(i);\n            }\n            if (word.charAt(i)=='b'\
    \ || word.charAt(i)=='d' || word.charAt(i)=='g' ||\n                word.charAt(i)=='h'\
    \ || word.charAt(i)=='j' || word.charAt(i)=='k' ||\n                word.charAt(i)=='l'\
    \ || word.charAt(i)=='m' || word.charAt(i)=='n' ||\n                word.charAt(i)=='p'\
    \ || word.charAt(i)=='q' || word.charAt(i)=='r' ||\n                word.charAt(i)=='s'\
    \ || word.charAt(i)=='t' || word.charAt(i)=='v' ||\n                word.charAt(i)=='w'\
    \ || word.charAt(i)=='x' || word.charAt(i)=='z') {\n                v2+= word.charAt(i);\n\
    \            }\n            if (word.charAt(i)=='c' || word.charAt(i)=='f' ||\
    \ word.charAt(i)=='h' ||\n                word.charAt(i)=='j' || word.charAt(i)=='k'\
    \ || word.charAt(i)=='l' ||\n                word.charAt(i)=='n' || word.charAt(i)=='p'\
    \ || word.charAt(i)=='q' ||\n                word.charAt(i)=='v' || word.charAt(i)=='w'\
    \ || word.charAt(i)=='x' ||\n                word.charAt(i)=='y' || word.charAt(i)=='z')\
    \ {\n                v3+= word.charAt(i);\n            }\n        }\n        if\
    \ (v1.length()>v2.length()) {\n            if (v1.length()>v3.length()) {\n  \
    \              System.out.println(v1);\n                return v1;\n         \
    \   }\n            System.out.println(v2);\n            return v2;\n        }\n\
    \        if (v1.length()>v3.length()) {\n            System.out.println(v3);\n\
    \            return v3;\n        }\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp70vhvr6w.java:63)\n"
  stdout: 'y

    '
  timestamp: 1660011638
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ list = Arrays.asList(word.split(\"\"));\n        int vowelCount = 0;\n     \
    \   int finalIndex = 0;\n        int finalVowelCount = 1;\n        boolean found\
    \ = false;\n        int i = 0;\n        while(!found && i < list.size() - 1) {\n\
    \            int count1 = 0;\n            int count2 = 0;\n            while(list.get(i)\
    \ != \"U\" && list.get(i) != \"u\" && list.get(i) != \"A\" && list.get(i) != \"\
    a\") {\n                if(list.get(i) == list.get(++i)) {\n                 \
    \   count1++;\n                }\n                else {\n                   \
    \ count2++;\n                }\n                i++;\n            }\n        \
    \    \n            if(!found) {\n                if(count1 >= finalVowelCount)\
    \ {\n                    finalVowelCount = count1;\n                    finalIndex\
    \ = i;\n                }\n                else if(count2 >= finalVowelCount)\
    \ {\n                    finalVowelCount = count2;\n                    finalIndex\
    \ = i;\n                }\n            }\n            i++;\n        }\n      \
    \  return \"\".equals(list.get(finalIndex)) ? \"fail\" : list.get(finalIndex -\
    \ 1);\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 6 out of bounds for length 6\n\tat java.base/java.util.Arrays$ArrayList.get(Arrays.java:4165)\n\
    \tat Problem.getClosestVowel(tmpdngq2bei.java:33)\n\tat Problem.main(tmpdngq2bei.java:58)\n"
  stdout: ''
  timestamp: 1660011638
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        char[] vowels\
    \ = {'A', 'O', 'U', 'a', 'o', 'u'};\n        List<String> list = Arrays.asList(word).stream().filter(character\
    \ -> vowels.contains(character.toLowerCase())).collect(Collectors.toList());\n\
    \        if(list.size()==0) {\n            return \"\";\n        }\n        String\
    \ vowel = list.get(list.size()-1);\n        for(int i = list.size()-2; i >= 0;\
    \ i--) {\n            if(vowel.equals(list.get(i))) {\n                return\
    \ list.get(i);\n            }\n        }\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6oews70b.java:25: error: cannot find symbol\n        List<String>\
    \ list = Arrays.asList(word).stream().filter(character -> vowels.contains(character.toLowerCase())).collect(Collectors.toList());\n\
    \                                                                            \
    \       ^\n  symbol:   method contains(String)\n  location: variable vowels of\
    \ type char[]\n1 error\n"
  stdout: ''
  timestamp: 1660011638
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word ==\
    \ null || word.isEmpty()) return \"\";\n        HashMap<Character, Integer> map\
    \ = new HashMap<>();\n        for (Character c : word.toCharArray()) {\n     \
    \       Integer i = map.get(c);\n            if (i == null) map.put(c, 1);\n \
    \           else map.put(c, i + 1);\n        }\n        List<Map.Entry<Character,\
    \ Integer>> list = map.entrySet().stream()\n                .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n\
    \                .collect(Collectors.toList());\n        int index = list.size();\n\
    \        while (index > 0) {\n            if (list.get(index).getValue() > 0)\
    \ {\n                if (list.get(index - 1).getValue() >= list.get(index).getValue())\n\
    \                    return list.get(index - 1).getKey().toString();\n       \
    \     }\n            index--;\n        }\n        return \"\";\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 6 out of bounds for length 6\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.getClosestVowel(tmprw43teyd.java:36)\n\tat Problem.main(tmprw43teyd.java:45)\n"
  stdout: ''
  timestamp: 1660011638
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        StringBuilder\
    \ sb = new StringBuilder(word);\n        for (int i = 0; i < sb.length(); i++)\
    \ {\n            char c = sb.charAt(i);\n            if ((c >= 'a' && c <= 'z')\
    \ || (c >= 'A' && c <= 'Z')) {\n                c = Character.toLowerCase(c);\n\
    \            }\n            if (sb.charAt(i) == 'U' || sb.charAt(i) == 'u') {\n\
    \                return Character.toString(c);\n            }\n        }\n   \
    \     return \"\";\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy9sr7dqv.java:42)\n"
  stdout: ''
  timestamp: 1660011638
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = new ArrayList<>();\n        for(int i = word.indexOf('e') + 1, len\
    \ = word.length(); i <= len; ++i) {\n            vowels.add(word.charAt(i));\n\
    \        }\n        vowels.remove(\"e\");\n        vowels.remove(\"i\");\n   \
    \     vowels.remove(\"o\");\n        vowels.remove(\"u\");\n        vowels.add(0,\
    \ \"\");\n        vowels.add(\"\", \"\");\n        vowels.remove(\"\");\n    \
    \    for(String vowel : vowels) {\n            int index = word.lastIndexOf(vowel);\n\
    \            if(index != -1) {\n                return word.substring(index).charAt(0);\n\
    \            }\n        }\n        return \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxifhzglh.java:26: error: incompatible types: char cannot be converted\
    \ to String\n            vowels.add(word.charAt(i));\n                       \
    \           ^\n/tmp/tmpxifhzglh.java:33: error: incompatible types: String cannot\
    \ be converted to int\n        vowels.add(\"\", \"\");\n                   ^\n\
    /tmp/tmpxifhzglh.java:38: error: incompatible types: char cannot be converted\
    \ to String\n                return word.substring(index).charAt(0);\n       \
    \                                            ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011638
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Map<Character,Integer>\
    \ map = new HashMap<>();\n        for(int i=word.length()-1; i>=0; i--) {\n  \
    \          char c = word.charAt(i);\n            int count = map.get(c);\n   \
    \         if(count == null) {\n                map.put(c,1);\n            } else\
    \ {\n                map.put(c,count + 1);\n            }\n        }\n       \
    \ \n        List<String> list = Arrays.asList(map.keySet().stream().sorted().map(String::valueOf).collect(Collectors.toList()));\n\
    \        \n        int left = list.get(list.length()-1).toString().toInt();\n\
    \        \n        if(left<=1) {\n            return \"\";\n        } else {\n\
    \            return list.get(list.length()-2).toString();\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpavt8f4u1.java:28: error: bad operand types for binary operator\
    \ '=='\n            if(count == null) {\n                     ^\n  first type:\
    \  int\n  second type: <null>\n/tmp/tmpavt8f4u1.java:35: error: incompatible types:\
    \ inference variable T#1 has incompatible bounds\n        List<String> list =\
    \ Arrays.asList(map.keySet().stream().sorted().map(String::valueOf).collect(Collectors.toList()));\n\
    \                                         ^\n    equality constraints: String\n\
    \    lower bounds: List<T#2>,R\n  where T#1,T#2,R,A,T#3 are type-variables:\n\
    \    T#1 extends Object declared in method <T#1>asList(T#1...)\n    T#2 extends\
    \ Object declared in method <T#2>toList()\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#3,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#3,A,R>)\n    T#3 extends Object declared in\
    \ interface Stream\n/tmp/tmpavt8f4u1.java:37: error: cannot find symbol\n    \
    \    int left = list.get(list.length()-1).toString().toInt();\n              \
    \                  ^\n  symbol:   method length()\n  location: variable list of\
    \ type List<String>\n/tmp/tmpavt8f4u1.java:42: error: cannot find symbol\n   \
    \         return list.get(list.length()-2).toString();\n                     \
    \           ^\n  symbol:   method length()\n  location: variable list of type\
    \ List<String>\n4 errors\n"
  stdout: ''
  timestamp: 1660011638
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        char[] arr =\
    \ word.toCharArray();\n        Arrays.sort(arr);\n        int left = 0;\n    \
    \    int right = arr.length-1;\n        String vowel = \"\";\n        while(left\
    \ < right) {\n            int center = (left + right) / 2;\n            int v1\
    \ = arr[center];\n            int v2 = arr[center+1];\n            int v3 = arr[center-1];\n\
    \            if(Character.isUpperCase(v1)) {\n                if(Character.isUpperCase(v2))\
    \ {\n                    if(Character.isUpperCase(v3)) {\n                   \
    \     vowel = vowel + v3;\n                        left = center - 1;\n      \
    \              } else {\n                        vowel = vowel + v2;\n       \
    \                 right = center - 1;\n                    }\n               \
    \ } else {\n                    vowel = vowel + v1;\n                    left\
    \ = center;\n                }\n            } else {\n                if(Character.isUpperCase(v2))\
    \ {\n                    vowel = vowel + v2;\n                    right = center;\n\
    \                } else {\n                    vowel = vowel + v1;\n         \
    \           right = center - 1;\n                }\n            }\n        }\n\
    \        return vowel;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index -1 out of bounds for length 6\n\tat Problem.getClosestVowel(tmp0uaq3_79.java:33)\n\
    \tat Problem.main(tmp0uaq3_79.java:60)\n"
  stdout: ''
  timestamp: 1660011638
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word.length()\
    \ <= 2) {\n            return \"\";\n        }\n        char[] arr = word.toCharArray();\n\
    \        for (int i = 0; i < arr.length - 2; i++) {\n            if (isVowel(arr[i]))\
    \ {\n                for (int j = i + 2; j < arr.length - 1; j++) {\n        \
    \            if (isVowel(arr[j])) {\n                        int a = j + 1;\n\
    \                        int b = arr.length - 1;\n                        int\
    \ min = a;\n                        while (a < b) {\n                        \
    \    if (Math.abs(a - b) < Math.abs(b - a)) {\n                              \
    \  min = a;\n                            } else {\n                          \
    \      b = a;\n                            }\n                            a++;\n\
    \                            b--;\n                        }\n               \
    \         if (Math.abs(a - b) < Math.abs(b - a)) {\n                         \
    \   return getVowel(arr[min], arr[j]);\n                        }\n          \
    \          }\n                }\n            }\n        }\n        return \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvy98ut0o.java:29: error: cannot find symbol\n            if (isVowel(arr[i]))\
    \ {\n                ^\n  symbol:   method isVowel(char)\n  location: class Problem\n\
    /tmp/tmpvy98ut0o.java:31: error: cannot find symbol\n                    if (isVowel(arr[j]))\
    \ {\n                        ^\n  symbol:   method isVowel(char)\n  location:\
    \ class Problem\n/tmp/tmpvy98ut0o.java:45: error: cannot find symbol\n       \
    \                     return getVowel(arr[min], arr[j]);\n                   \
    \                ^\n  symbol:   method getVowel(char,char)\n  location: class\
    \ Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011638
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int vowelIndex\
    \ = 0;\n        List<Integer> vowelIndexList = new ArrayList<Integer>();\n   \
    \     for (int i = 0; i < word.length(); i++) {\n            if (isVowel(word.charAt(i)))\
    \ {\n                vowelIndexList.add(vowelIndex);\n                vowelIndex++;\n\
    \            }\n        }\n        Collections.sort(vowelIndexList);\n       \
    \ if (vowelIndexList.get(vowelIndexList.size() - 1) == word.length() - 1) {\n\
    \            return \"\";\n        }\n        if (vowelIndexList.get(vowelIndexList.size()\
    \ - 1) < word.length() - 1) {\n            return getClosestVowel(word, vowelIndexList.size()\
    \ - 1, vowelIndexList.size() - 1);\n        }\n        throw new RuntimeException(\"\
    error\");\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptqwd6q0r.java:27: error: cannot find symbol\n            if (isVowel(word.charAt(i)))\
    \ {\n                ^\n  symbol:   method isVowel(char)\n  location: class Problem\n\
    /tmp/tmptqwd6q0r.java:37: error: method getClosestVowel in class Problem cannot\
    \ be applied to given types;\n            return getClosestVowel(word, vowelIndexList.size()\
    \ - 1, vowelIndexList.size() - 1);\n                   ^\n  required: String\n\
    \  found:    String,int,int\n  reason: actual and formal argument lists differ\
    \ in length\n2 errors\n"
  stdout: ''
  timestamp: 1660011638
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = new ArrayList<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n        vowels.add(\"\
    E\");\n        vowels.add(\"I\");\n        vowels.add(\"O\");\n        vowels.add(\"\
    U\");\n        vowels.add(\"Y\");\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        vowels.add(\"y\");\n        vowels.add(\"A\");\n\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi7xbcvej.java:99: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011639
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word ==\
    \ null || word.length() < 1)\n            return \"\";\n        char[] vowels\
    \ = { \"a\", \"e\", \"i\", \"o\", \"u\", \"y\" };\n        char[] consonants =\
    \ { \n                \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\",\
    \ \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\",\n                \"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"\
    H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"N\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"V\",\"\
    W\",\"X\",\"Y\",\"Z\",\n                \"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"\
    6\",\"7\",\"8\",\"9\",\n                \"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"\
    &\",\"*\",\"(\",\")\",\"_\",\"+\",\".\",\"/\",\":\",\"<\",\">\",\"?\",\"~\",\n\
    \                \"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\n\
    \                \"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"\
    _\",\"+\",\".\",\"/\",\":\",\"<\",\">\",\"?\",\"~\",\n                \"a\",\"\
    b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"\
    p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"z\",\n                \"\
    A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\",\"H\",\"I\",\"J\",\"K\",\"L\",\"M\",\"\
    N\",\"P\",\"Q\",\"R\",\"S\",\"T\",\"V\",\"W\",\"X\",\"Y\",\"Z\",\n           \
    \     \"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\n         \
    \       \"!\",\"@\",\"#\",\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"_\",\"+\"\
    ,\".\",\"/\",\":\",\"<\",\">\",\"?\",\"~\",\n                \"0\",\"1\",\"2\"\
    ,\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\n                \"!\",\"@\",\"#\"\
    ,\"$\",\"%\",\"^\",\"&\",\"*\",\"(\",\")\",\"_\",\"+\",\".\",\"/\",\":\",\"<\"\
    ,\">\",\"?\",\"~\",\n                \"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"\
    ,\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\"\
    ,\"w\",\"x\",\"y\",\"\n    }\n    public static void main(String[] args) {\n \
    \   assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmrqhr9km.java:40: error: unclosed string literal\n            \
    \    \"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"\
    m\",\"n\",\"p\",\"q\",\"r\",\"s\",\"t\",\"v\",\"w\",\"x\",\"y\",\"\n         \
    \                                                                            \
    \                       ^\n1 error\n"
  stdout: ''
  timestamp: 1660011638
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        // Write your\
    \ code here\n        \n        word = word.toUpperCase();\n        \n        Set<Character>\
    \ vowels = Set.of(\"A\", \"E\", \"I\", \"O\", \"U\");\n        \n        int leftVowel\
    \ = word.indexOf('a') - 1;\n        int rightVowel = word.lastIndexOf('a') + 1;\n\
    \        \n        boolean leftVowelExists = vowels.contains(word.charAt(leftVowel));\n\
    \        boolean rightVowelExists = vowels.contains(word.charAt(rightVowel));\n\
    \        \n        if (leftVowelExists && !rightVowelExists) {\n            int\
    \ index = leftVowel;\n            \n            while (index < rightVowel) {\n\
    \                char ch = word.charAt(index);\n                \n           \
    \     if (vowels.contains(ch)) {\n                    break;\n               \
    \ }\n                \n                index++;\n            }\n            \n\
    \            return word.substring(index + 1);\n        }\n        \n        else\
    \ if (rightVowelExists && !leftVowelExists) {\n            int index = rightVowel;\n\
    \            \n            while (index > leftVowel) {\n                char ch\
    \ = word.charAt(index);\n                \n                if (vowels.contains(ch))\
    \ {\n                    break;\n                }\n                \n       \
    \         index--;\n            }\n            \n            return word.substring(index\
    \ + 1);\n        }\n        \n        else if (leftVowelExists && rightVowelExists)\
    \ {\n            return \"\";\n        }\n        \n        else if (leftVowelExists)\
    \ {\n            int index = leftVowel;\n            \n            while (index\
    \ < rightVowel) {\n                char ch = word.charAt(index);\n           \
    \     \n                if (!vowels.contains(ch)) {\n                    break;\n\
    \                }\n                \n                index++;\n            }\n\
    \            \n            return word.substring(index + 1);\n        }\n    \
    \    \n        else {\n            int index = rightVowel;\n            \n   \
    \         while (index > leftVowel) {\n                char ch = word.charAt(index);\n\
    \                \n                if (!vowels.contains(ch)) {\n             \
    \       break;\n                }\n                \n                index--;\n\
    \            }\n            \n            return word.substring(index + 1);\n\
    \        }\n        \n        \n    }\n    public static void main(String[] args)\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnpzfqirk.java:28: error: incompatible types: inference variable\
    \ E has incompatible bounds\n        Set<Character> vowels = Set.of(\"A\", \"\
    E\", \"I\", \"O\", \"U\");\n                                      ^\n    equality\
    \ constraints: Character\n    lower bounds: String\n  where E is a type-variable:\n\
    \    E extends Object declared in method <E>of(E,E,E,E,E)\n1 error\n"
  stdout: ''
  timestamp: 1660011639
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String vowel\
    \ = \"\";\n        String vowels = getVowels(word);\n        if(vowels == null\
    \ || vowels.isEmpty()) return \"\";\n        int length = vowels.length();\n \
    \       int lowerIndex = word.indexOf(vowels.toLowerCase());\n        int upperIndex\
    \ = word.indexOf(vowels.toUpperCase());\n        if(lowerIndex >= 0 && upperIndex\
    \ >= 0) {\n            if(lowerIndex > upperIndex) lowerIndex = word.lastIndexOf(vowels.toLowerCase());\n\
    \            int middle = upperIndex - lowerIndex;\n            vowel = word.substring(middle);\n\
    \        }\n        return vowel;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprws5l8yw.java:25: error: cannot find symbol\n        String vowels\
    \ = getVowels(word);\n                        ^\n  symbol:   method getVowels(String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011639
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = Arrays.asList(new String[]{\"a\", \"e\", \"i\", \"o\", \"u\"});\n \
    \       char firstConsonant = word.length() % 2 != 0 ? word.get(word.length()-1)\
    \ : 'z';\n        char lastConsonant = word.length() % 2 != 0 ? word.get(word.length()-2)\
    \ : 'z';\n        Optional<String> opt = vowels.stream()\n                .filter(letter\
    \ -> word.startsWith(letter))\n                .filter(letter -> word.endsWith(letter))\n\
    \                .filter(letter -> word.charAt(word.length()-1) != firstConsonant)\n\
    \                .filter(letter -> word.charAt(word.length()-2) != lastConsonant)\n\
    \                .filter(letter -> word.indexOfFirst(letter) == word.lastIndexOf(letter))\n\
    \                .findFirst();\n        return opt.orElse(\"\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp41in0r8i.java:25: error: cannot find symbol\n        char firstConsonant\
    \ = word.length() % 2 != 0 ? word.get(word.length()-1) : 'z';\n              \
    \                                             ^\n  symbol:   method get(int)\n\
    \  location: variable word of type String\n/tmp/tmp41in0r8i.java:26: error: cannot\
    \ find symbol\n        char lastConsonant = word.length() % 2 != 0 ? word.get(word.length()-2)\
    \ : 'z';\n                                                          ^\n  symbol:\
    \   method get(int)\n  location: variable word of type String\n/tmp/tmp41in0r8i.java:32:\
    \ error: cannot find symbol\n                .filter(letter -> word.indexOfFirst(letter)\
    \ == word.lastIndexOf(letter))\n                                      ^\n  symbol:\
    \   method indexOfFirst(String)\n  location: variable word of type String\n3 errors\n"
  stdout: ''
  timestamp: 1660011639
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        char c = word.charAt(word.length()\
    \ - 1);\n        int i = 0;\n        while ((i + 1) < word.length()) {\n     \
    \       if (word.charAt(i) == c && word.charAt(i) != c) break;\n            ++i;\n\
    \        }\n        if ((i + 1) < word.length()) {\n            int j = i;\n \
    \           boolean endFound = false;\n            while ((j + 1) < word.length()\
    \ && !endFound) {\n                if (word.charAt(j) == c && word.charAt(j) !=\
    \ c) break;\n                ++j;\n                if (j == word.length()) endFound\
    \ = true;\n            }\n            if (j == word.length()) \n             \
    \   return \"\"; \n            char upperC = word.charAt(j);\n            String\
    \ leftSide = word.substring(0, i);\n            String rightSide = word.substring(j);\n\
    \            String rightSideCap = word.substring(j).toUpperCase();\n        \
    \    String leftSideCap = word.substring(0, i).toUpperCase();\n            char\
    \ upperLeftSide = leftSide.charAt(0);\n            char upperRightSide = rightSide.charAt(0);\n\
    \            if ((upperLeftSide == c || upperRightSide == c) &&\n            \
    \        (upperLeftSide != upperC || upperRightSide != upperC)) \n           \
    \     return \"\";\n            boolean firstConsonantFound = true;\n        \
    \    boolean lastConsonantFound = false;\n            for (int k = i; k < word.length();\
    \ k++) {\n                if (word.charAt(k) == c && word.charAt(k) != c) \n \
    \                   break;\n            }\n            char firstConsonant = word.charAt(k);\n\
    \            char lastConsonant = word.charAt(k - 1);\n            String leftSideCapLetter\
    \ = word.substring(k, k + 1).toUpperCase();\n            String leftSideLetter\
    \ = word.substring(k, k + 1);\n            String rightSideCapLetter = word.substring(k\
    \ + 1, word.length() - 1).toUpperCase();\n            String rightSideLetter =\
    \ word.substring(k + 1, word.length() - 1);\n            boolean firstVowelFound\
    \ = true;\n            boolean lastVowelFound = false;\n            char firstVowel\
    \ = firstConsonant;\n            char lastVowel = lastConsonant;\n           \
    \ for (int l = i; l < word.length(); l++) {\n                if (word.charAt(l)\
    \ == c && word.charAt(l) != c) \n                    break;\n            }\n \
    \           char firstVowelInMiddle = word.charAt(l);\n            char lastVowelInMiddle\
    \ = word.charAt(l - 1);\n            String leftSideCapLetterInMiddle = word.substring(l,\
    \ l + 1).toUpperCase();\n            String leftSideLetterInMiddle = word.substring(l,\
    \ l + 1);\n            \n    }\n    public static void main(String[] args) {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkv6arjcj.java:76: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011638
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ vowels = new ArrayList<>();\n        vowels.add(\"a\");\n        vowels.add(\"\
    e\");\n        vowels.add(\"i\");\n        vowels.add(\"o\");\n        vowels.add(\"\
    u\");\n        Set<String> vowelSet = new HashSet<>(vowels);\n        word = word.trim().toLowerCase();\n\
    \        char[] charArray = word.toCharArray();\n        int len = charArray.length;\n\
    \        for (int i = 0; i < len; i++) {\n            char c = charArray[i];\n\
    \            if ((c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') &&\
    \ !vowelSet.contains(String.valueOf(c))) {\n                vowelSet.add(String.valueOf(c));\n\
    \            }\n        }\n        char nextVowel = charArray[len - 1];\n    \
    \    if (vowelSet.contains(nextVowel)) {\n            return \"\" + nextVowel;\n\
    \        }\n        for (int i = 0; i < len; i++) {\n            char c = charArray[i];\n\
    \            if ((c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') &&\
    \ vowelSet.contains(String.valueOf(c))) {\n                return \"\" + c;\n\
    \            }\n        }\n        return \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgceeiv5p.java:53)\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        char[] arr =\
    \ word.toCharArray();\n        Set<Character> vowels = new HashSet<Character>();\n\
    \        vowels.add('a');\n        vowels.add('e');\n        vowels.add('i');\n\
    \        vowels.add('o');\n        vowels.add('u');\n        vowels.add('y');\n\
    \        int len = arr.length;\n        for(int i = len-1; i>=0; i--) {\n    \
    \        char c = arr[i];\n            if(vowels.contains(c)) {\n            \
    \    break;\n            }\n        }\n        int end = len-1;\n        for(int\
    \ i = len-1; i>=0; i--) {\n            char c = arr[i];\n            if(vowels.contains(c))\
    \ {\n                end = i;\n                break;\n            }\n       \
    \ }\n        String vowel = word.substring(len-end);\n        char[] vowelChar\
    \ = vowel.toCharArray();\n        int i = 0;\n        int j = 0;\n        while(i\
    \ < vowelChar.length && j<arr.length) {\n            if(vowelChar[i]==arr[j])\
    \ {\n                i++;\n                j++;\n            }else {\n       \
    \         i = 0;\n                j++;\n            }\n        }\n        if(j<arr.length)\
    \ {\n            return \"\";\n        }else {\n            return vowel;\n  \
    \      }\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmposb2to3t.java:67)\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<Vowel>\
    \ vowelList = new ArrayList<Vowel>();\n        vowelList.add(new Vowel(\"A\"));\n\
    \        vowelList.add(new Vowel(\"E\"));\n        vowelList.add(new Vowel(\"\
    I\"));\n        vowelList.add(new Vowel(\"O\"));\n        vowelList.add(new Vowel(\"\
    U\"));\n        vowelList.add(new Vowel(\"a\"));\n        vowelList.add(new Vowel(\"\
    e\"));\n        vowelList.add(new Vowel(\"i\"));\n        vowelList.add(new Vowel(\"\
    o\"));\n        vowelList.add(new Vowel(\"u\"));\n        vowelList.add(new Vowel(\"\
    Y\"));\n        vowelList.add(new Vowel(\"U\"));\n        vowelList.add(new Vowel(\"\
    y\"));\n        vowelList.add(new Vowel(\"i\"));\n        vowelList.add(new Vowel(\"\
    o\"));\n        vowelList.add(new Vowel(\"r\"));\n        vowelList.add(new Vowel(\"\
    t\"));\n        vowelList.add(new Vowel(\"w\"));\n        vowelList.add(new Vowel(\"\
    h\"));\n        vowelList.add(new Vowel(\"u\"));\n        vowelList.add(new Vowel(\"\
    r\"));\n        vowelList.add(new Vowel(\"p\"));\n        vowelList.add(new Vowel(\"\
    r\"));\n        vowelList.add(new Vowel(\"h\"));\n        vowelList.add(new Vowel(\"\
    w\"));\n        vowelList.add(new Vowel(\"y\"));\n        vowelList.add(new Vowel(\"\
    g\"));\n        vowelList.add(new Vowel(\"d\"));\n        vowelList.add(new Vowel(\"\
    m\"));\n        vowelList.add(new Vowel(\"y\"));\n        vowelList.add(new Vowel(\"\
    v\"));\n        vowelList.add(new Vowel(\"n\"));\n        vowelList.add(new Vowel(\"\
    b\"));\n        vowelList.add(new Vowel(\"s\"));\n        vowelList.add(new Vowel(\"\
    s\"));\n        vowelList.add(new Vowel(\"b\"));\n        vowelList.add(new Vowel(\"\
    e\"));\n        vowelList.add(new Vowel(\"b\"));\n        vowelList.add(new Vowel(\"\
    a\"));\n        vowelList.add(new Vowel(\"y\"));\n        vowelList.add(new Vowel(\"\
    r\"));\n        vowelList.add(new \n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaba2r18g.java:66: error: <identifier> expected\n        vowelList.add(new\
    \ \n                         ^\n/tmp/tmpaba2r18g.java:67: error: '(' or '[' expected\n\
    \    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011639
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        return \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0f33fh2w.java:27)\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word.length()\
    \ <= 2) {\n            return \"\";\n        }\n        String vowels = \"AEIOUaeiou\"\
    ;\n        String letter = word.substring(0, word.length() - 1);\n        String\
    \ consonant = word.substring(word.length() - 1, word.length());\n        String\
    \ result = \"\";\n        if (vowels.contains(letter)) {\n            result =\
    \ letter;\n        } else {\n            int index = 0;\n            while (index\
    \ < consonant.length()) {\n                if (consonant.charAt(index) == letter.charAt(0))\
    \ {\n                    if (consonant.charAt(index + 1) == letter.charAt(1))\
    \ {\n                        result = consonant.substring(0, index);\n       \
    \                 break;\n                    }\n                }\n         \
    \       index++;\n            }\n        }\n        return result;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb6i8e4n3.java:48)\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        boolean isLeft\
    \ = false;\n        boolean isRight = false;\n        for(int i = word.length()\
    \ - 1; i >= 0; i--) {\n            if(isLeft) {\n                if(!isRight)\
    \ {\n                    if(word.charAt(i) == 'a' || word.charAt(i) == 'e' ||\
    \ word.charAt(i) == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n\
    \                        isLeft = false;\n                        isRight = true;\n\
    \                    }\n                }\n            } else {\n            \
    \    if(isRight) {\n                    if(!isLeft) {\n                      \
    \  if(word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i) == 'i'\
    \ || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n                     \
    \       isRight = false;\n                            isLeft = true;\n       \
    \                 }\n                    }\n                } else {\n       \
    \             if(word.charAt(i) == 'a' || word.charAt(i) == 'e' || word.charAt(i)\
    \ == 'i' || word.charAt(i) == 'o' || word.charAt(i) == 'u') {\n              \
    \          isRight = true;\n                        isLeft = false;\n        \
    \            }\n                }\n            }\n        }\n        return \"\
    \";\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps4p3w9j1.java:53)\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word.isEmpty())\
    \ return \"\";\n        String vowels = \"AEIOUaeiou\";\n        if (vowels.contains(word.charAt(word.length()\
    \ - 1))) {\n            String vowelsStr = word.substring(0, word.length() - 1);\n\
    \            String lastVowel = word.substring(word.length() - 1);\n         \
    \   if (vowelsStr.indexOf(lastVowel) < vowelsStr.lastIndexOf(lastVowel)) {\n \
    \               return \"\";\n            }\n        }\n        return \"\";\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe3fpl8qg.java:26: error: incompatible types: char cannot be converted\
    \ to CharSequence\n        if (vowels.contains(word.charAt(word.length() - 1)))\
    \ {\n                                       ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        \n        HashSet<String>\
    \ vowelSet = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\");\n        \n   \
    \     HashSet<String> consonantSet = Arrays.asList(\"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n        \n        ArrayList<String>\
    \ vowelStrings = new ArrayList<>();\n        \n        vowelStrings.add(vowelSet.toString());\n\
    \        \n        vowelStrings.add(consonantSet.toString());\n        \n    \
    \    HashSet<String> result = new HashSet<>();\n        \n        Iterator<String>\
    \ iterator = vowelStrings.iterator();\n        \n        while(iterator.hasNext()){\n\
    \            String s = iterator.next();\n            \n            int index\
    \ = word.lastIndexOf(s);\n            \n            if(index > -1){\n        \
    \        String resultString = word.substring(index+1, word.length());\n     \
    \           \n                result.add(resultString);\n            }\n     \
    \       \n        }\n        \n        //return \"\";\n        \n        return\
    \ result.iterator().next();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfa5upunt.java:25: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to HashSet<String>\n     \
    \   HashSet<String> vowelSet = Arrays.asList(\"a\", \"e\", \"i\", \"o\", \"u\"\
    );\n                                                ^\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>asList(T...)\n/tmp/tmpfa5upunt.java:27:\
    \ error: incompatible types: no instance(s) of type variable(s) T exist so that\
    \ List<T> conforms to HashSet<String>\n        HashSet<String> consonantSet =\
    \ Arrays.asList(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\");\n                                                    ^\n  where T is\
    \ a type-variable:\n    T extends Object declared in method <T>asList(T...)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word ==\
    \ null || word.isEmpty()) return \"\";\n        char c;\n        char prevVowel\
    \ = ' ';\n        int index = word.length() - 1;\n        for (char c : word.toCharArray())\
    \ {\n            prevVowel = c;\n            if (isVowel(c)) {\n             \
    \   if (prevVowel == ' ') {\n                    index = index - 1;\n        \
    \        } else {\n                    index = index;\n                    break;\n\
    \                }\n            }\n        }\n        return word.substring(0,\
    \ index + 1);\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsrfxa2j5.java:28: error: variable c is already defined in method\
    \ getClosestVowel(String)\n        for (char c : word.toCharArray()) {\n     \
    \             ^\n/tmp/tmpsrfxa2j5.java:30: error: cannot find symbol\n       \
    \     if (isVowel(c)) {\n                ^\n  symbol:   method isVowel(char)\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Set<Character>\
    \ vowels = Arrays.stream(\n            new char[] { 'A', 'E', 'I', 'O', 'U', 'Y',\
    \ 'a','e','i','o','u','y' })\n            .collect(Collectors.toSet());\n    \
    \    String result = \"\";\n        char[] charArray = word.toCharArray();\n \
    \       int len = charArray.length - 1;\n        for (int i = len; i >= 0; i--)\
    \ {\n            char left = charArray[i];\n            char right = charArray[i\
    \ + 1];\n            if (vowels.contains(left) && vowels.contains(right)) {\n\
    \                result = String.valueOf(left) + String.valueOf(right);\n    \
    \            break;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7gqqqupf.java:24: error: no suitable method found for stream(char[])\n\
    \        Set<Character> vowels = Arrays.stream(\n                            \
    \          ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n      (inference\
    \ variable T#1 has incompatible bounds\n        equality constraints: char\n \
    \       lower bounds: Object)\n    method Arrays.<T#2>stream(T#2[],int,int) is\
    \ not applicable\n      (cannot infer type-variable(s) T#2\n        (actual and\
    \ formal argument lists differ in length))\n    method Arrays.stream(int[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.stream(long[]) is not applicable\n      (argument mismatch;\
    \ char[] cannot be converted to long[])\n    method Arrays.stream(double[]) is\
    \ not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Vowels vowels\
    \ = new Vowels();\n        return vowels.getClosestVowel(word);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpki30wucb.java:24: error: cannot find symbol\n        Vowels vowels\
    \ = new Vowels();\n        ^\n  symbol:   class Vowels\n  location: class Problem\n\
    /tmp/tmpki30wucb.java:24: error: cannot find symbol\n        Vowels vowels = new\
    \ Vowels();\n                            ^\n  symbol:   class Vowels\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Map<String,\
    \ Integer> vowelMap = new HashMap<>();\n        vowelMap.put(\"A\", 1);\n    \
    \    vowelMap.put(\"E\", 1);\n        vowelMap.put(\"I\", 1);\n        vowelMap.put(\"\
    O\", 1);\n        vowelMap.put(\"U\", 1);\n        vowelMap.put(\"a\", 1);\n \
    \       vowelMap.put(\"e\", 1);\n        vowelMap.put(\"i\", 1);\n        vowelMap.put(\"\
    o\", 1);\n        vowelMap.put(\"u\", 1);\n        vowelMap.put(\"Aa\", 2);\n\
    \        vowelMap.put(\"Ee\", 2);\n        vowelMap.put(\"Ii\", 2);\n        vowelMap.put(\"\
    Oo\", 2);\n        vowelMap.put(\"Uu\", 2);\n        vowelMap.put(\"A\", 2);\n\
    \        vowelMap.put(\"E\", 2);\n        vowelMap.put(\"I\", 2);\n        vowelMap.put(\"\
    O\", 2);\n        vowelMap.put(\"U\", 2);\n        \n        boolean isVowel(String\
    \ word) {\n            \n            for (String vowel : vowelMap.keySet()) {\n\
    \                if (word.endsWith(vowel)) {\n                    return true;\n\
    \                }\n            }\n            return false;\n        }\n    \
    \    \n        if (isVowel(word)) {\n            return word;\n        }\n   \
    \     \n        String[] wordParts = word.split(\"[AEIOUaeiou]\");\n        String\
    \ lowerWord = wordParts[0];\n        String upperWord = wordParts[1];\n      \
    \  \n        if (lowerWord.length() > upperWord.length()) {\n            String\
    \ lowerLeftPart = lowerWord.substring(0, upperWord.length());\n            String\
    \ lowerRightPart = lowerWord.substring(upperWord.length(), lowerWord.length());\n\
    \            \n            if (vowelMap.containsKey(lowerLeftPart)) {\n      \
    \          return vowelMap.get(lowerLeftPart);\n            }\n            return\
    \ \"\";\n        }\n        \n        if (upperWord.length() > lowerWord.length())\
    \ {\n            String upperLeftPart = upperWord.substring(0, lowerWord.length());\n\
    \            String upperRightPart = upperWord.substring(lowerWord.length(), upperWord.length());\n\
    \            \n            if (vowelMap.containsKey(upperRightPart)) {\n     \
    \           return vowelMap.get(upperRightPart);\n            }\n            return\
    \ \"\";\n        }\n        \n        return \"\";\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf6azy50h.java:46: error: ';' expected\n        boolean isVowel(String\
    \ word) {\n                       ^\n/tmp/tmpf6azy50h.java:46: error: ';' expected\n\
    \        boolean isVowel(String word) {\n                                   ^\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011639
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        char[] vowels\
    \ = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n        Set<Character> set = new HashSet<>(Arrays.asList(vowels));\n\
    \        String result = \"\";\n        if (word.equalsIgnoreCase(\"\")) {\n \
    \           return result;\n        }\n        int last = 0;\n        for (char\
    \ c : word.toCharArray()) {\n            if (set.contains(Character.toUpperCase(c)))\
    \ {\n                last = c - 32;\n                break;\n            }\n \
    \       }\n        if (last == 0 || last > word.length() - 1) {\n            return\
    \ result;\n        }\n        last = word.length() - 1 - last;\n        if (word.length()\
    \ - last < 2) {\n            return result;\n        }\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < last; i++) {\n      \
    \      sb.append(vowels[i]);\n        }\n        sb.append(word.substring(last));\n\
    \        result = sb.toString();\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppfrjypxa.java:24: error: incompatible types: String cannot be converted\
    \ to char\n        char[] vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n    \
    \                     ^\n/tmp/tmppfrjypxa.java:24: error: incompatible types:\
    \ String cannot be converted to char\n        char[] vowels = {\"a\", \"e\", \"\
    i\", \"o\", \"u\"};\n                              ^\n/tmp/tmppfrjypxa.java:24:\
    \ error: incompatible types: String cannot be converted to char\n        char[]\
    \ vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n                            \
    \       ^\n/tmp/tmppfrjypxa.java:24: error: incompatible types: String cannot\
    \ be converted to char\n        char[] vowels = {\"a\", \"e\", \"i\", \"o\", \"\
    u\"};\n                                        ^\n/tmp/tmppfrjypxa.java:24: error:\
    \ incompatible types: String cannot be converted to char\n        char[] vowels\
    \ = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n                                   \
    \          ^\n/tmp/tmppfrjypxa.java:25: error: incompatible types: cannot infer\
    \ type arguments for HashSet<>\n        Set<Character> set = new HashSet<>(Arrays.asList(vowels));\n\
    \                                        ^\n    reason: inference variable E has\
    \ incompatible bounds\n      equality constraints: Character\n      lower bounds:\
    \ T,char[]\n  where E,T are type-variables:\n    E extends Object declared in\
    \ class HashSet\n    T extends Object declared in method <T>asList(T...)\n6 errors\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String vowel\
    \ = \"\";\n        String vowels = \"\";\n        int vowels_len = 0;\n      \
    \  char vowel_first;\n        char vowel_second;\n        char consonant_first;\n\
    \        char consonant_second;\n        char vowel_first_2;\n        char vowel_second_2;\n\
    \        char consonant_first_2;\n        char consonant_second_2;\n        boolean\
    \ vowel_found = false;\n        boolean vowel_found_2 = false;\n        boolean\
    \ consonant_found = false;\n        boolean consonant_found_2 = false;\n     \
    \   if (word.length() >= 2) {\n            vowel_first = word.charAt(word.length()\
    \ - 1);\n            consonant_first = word.charAt(word.length() - 2);\n     \
    \       for (int i = 0; i < word.length(); i++) {\n                if (word.charAt(i)\
    \ == vowel_first) {\n                    vowels_len++;\n                }\n  \
    \              if (word.charAt(i) == vowel_second) {\n                    vowels_len++;\n\
    \                }\n            }\n            if (vowels_len >= 2) {\n      \
    \          vowel_first_2 = word.charAt(word.length() - 1);\n                consonant_first_2\
    \ = word.charAt(word.length() - 2);\n                for (int i = 0; i < word.length();\
    \ i++) {\n                    if (word.charAt(i) == vowel_first_2) {\n       \
    \                 vowels_len++;\n                    }\n                    if\
    \ (word.charAt(i) == vowel_second_2) {\n                        vowels_len++;\n\
    \                    }\n                }\n                if (vowels_len >= 2)\
    \ {\n                    consonant_second_2 = word.charAt(word.length() - 2);\n\
    \                    for (int i = 0; i < word.length(); i++) {\n             \
    \           if (word.charAt(i) == consonant_second_2) {\n                    \
    \        vowels_len++;\n                        }\n                    }\n   \
    \             }\n            }\n        }\n        if (!vowel_found && !vowel_found_2\
    \ && consonant_found && !consonant_found_2) {\n            return vowel;\n   \
    \     }\n        return vowels;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcsk0cts_.java:46: error: variable vowel_second might not have been\
    \ initialized\n                if (word.charAt(i) == vowel_second) {\n       \
    \                               ^\n/tmp/tmpcsk0cts_.java:57: error: variable vowel_second_2\
    \ might not have been initialized\n                    if (word.charAt(i) == vowel_second_2)\
    \ {\n                                          ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String vowel\
    \ = \"aeiouAEIOU\";\n        List<Integer> resultList = new ArrayList<>();\n \
    \       List<Character> consonants = word.chars().filter(x -> x == ' ').collect(Collectors.toList());\n\
    \        String result = \"\";\n        for (Character c : consonants) {\n   \
    \         boolean flag = false;\n            for (int i = 0; i < vowel.length();\
    \ i++) {\n                if (vowel.charAt(i) == c) {\n                    flag\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (!flag) {\n                resultList.add(vowel.indexOf(c));\n   \
    \         }\n        }\n        resultList.sort(Comparator.comparingInt(i -> i));\n\
    \        String vowelResult = \"\";\n        if (resultList.size() > 1) {\n  \
    \          vowelResult = word.substring(resultList.get(0), resultList.get(1));\n\
    \        }\n        return vowelResult;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgsm5rjh4.java:26: error: method collect in interface IntStream\
    \ cannot be applied to given types;\n        List<Character> consonants = word.chars().filter(x\
    \ -> x == ' ').collect(Collectors.toList());\n                               \
    \                                        ^\n  required: Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>\n\
    \  found:    Collector<Object,CAP#1,List<Object>>\n  reason: cannot infer type-variable(s)\
    \ R\n    (actual and formal argument lists differ in length)\n  where R is a type-variable:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n/tmp/tmpgsm5rjh4.java:26: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        List<Character> consonants = word.chars().filter(x -> x == ' ').collect(Collectors.toList());\n\
    \                                                                            \
    \   ^\n    (argument mismatch; no instance(s) of type variable(s) CAP#1,T exist\
    \ so that Collector<T,?,List<T>> conforms to Supplier<R>)\n  where R,T are type-variables:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T>toList()\n  where CAP#1 is a fresh\
    \ type-variable:\n    CAP#1 extends Object from capture of ?\n2 errors\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        boolean vowel_found\
    \ = false;\n        String vowels = \"\";\n        char[] chars = word.toCharArray();\n\
    \        for (char c: chars) {\n            if (Character.isLetter(c)) {\n   \
    \             if (Character.isUpperCase(c)) {\n                    vowels += Character.toUpperCase(c).toLowerCase();\n\
    \                }\n                else if (Character.isLowerCase(c)) {\n   \
    \                 vowels += Character.toUpperCase(c);\n                }\n   \
    \             else if (Character.isAlphabetic(c) && vowel_found == false) {\n\
    \                    vowels += c;\n                    vowel_found = true;\n \
    \               }\n                else if (Character.isAlphabetic(c) && vowel_found\
    \ == true) {\n                    vowels += c;\n                }\n          \
    \  }\n        }\n        if (vowels.isEmpty()) {\n            return \"\";\n \
    \       }\n        int i = vowels.length() - 1;\n        while (i >= 0 && !Character.isLetter(vowels.charAt(i)))\
    \ {\n            i--;\n        }\n        if (i < 0) {\n            return \"\"\
    ;\n        }\n        return vowels.substring(i, i + 1);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7b3k5fqm.java:30: error: char cannot be dereferenced\n        \
    \            vowels += Character.toUpperCase(c).toLowerCase();\n             \
    \                                         ^\n1 error\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        ArrayList arr1\
    \ = new ArrayList();\n        ArrayList arr2 = new ArrayList();\n        arr1\
    \ = word.split(\"\");\n        arr2 = word.split(\"\");\n\n        int c=0;\n\n\
    \        for(int i=0;i<arr1.size();i++){\n            if(arr2.size()>i){\n   \
    \             if(arr1.get(i).equals(\"A\") || arr1.get(i).equals(\"E\") || arr1.get(i).equals(\"\
    I\") || arr1.get(i).equals(\"O\") || arr1.get(i).equals(\"U\")){\n           \
    \         arr2.remove(i);\n                    arr2.add(i, arr1.get(i));\n   \
    \             }\n                if(arr1.get(i).equals(\"a\") || arr1.get(i).equals(\"\
    e\") || arr1.get(i).equals(\"i\") || arr1.get(i).equals(\"o\") || arr1.get(i).equals(\"\
    u\")){\n                    arr2.remove(i);\n                    arr2.add(i, arr1.get(i));\n\
    \                }\n            }\n        }\n\n        for(int i=0;i<arr2.size();i++){\n\
    \            if(arr1.size()>i){\n                if(arr1.get(i).equals(\"A\")\
    \ || arr1.get(i).equals(\"E\") || arr1.get(i).equals(\"I\") || arr1.get(i).equals(\"\
    O\") || arr1.get(i).equals(\"U\")){\n                    arr1.remove(i);\n   \
    \                 arr1.add(i, arr2.get(i));\n                }\n             \
    \   if(arr1.get(i).equals(\"a\") || arr1.get(i).equals(\"e\") || arr1.get(i).equals(\"\
    i\") || arr1.get(i).equals(\"o\") || arr1.get(i).equals(\"u\")){\n           \
    \         arr1.remove(i);\n                    arr1.add(i, arr2.get(i));\n   \
    \             }\n            }\n        }\n\n        String answer=\"\";\n   \
    \     for(int i=0;i<arr1.size();i++){\n            if(arr1.get(i).equals(\"A\"\
    ) || arr1.get(i).equals(\"E\") || arr1.get(i).equals(\"I\") || arr1.get(i).equals(\"\
    O\") || arr1.get(i).equals(\"U\")){\n                answer = answer + arr1.get(i);\n\
    \            }\n            if(arr1.get(i).equals(\"a\") || arr1.get(i).equals(\"\
    e\") || arr1.get(i).equals(\"i\") || arr1.get(i).equals(\"o\") || arr1.get(i).equals(\"\
    u\")){\n                answer = answer + arr1.get(i);\n            }\n    }\n\
    \    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7s52r_9q.java:66: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String vowel\
    \ = \"[aeiouAEIOU]+\";\n        if (vowel.matches(word)) {\n            int vowelCount\
    \ = word.matches(vowel).length;\n            int index = word.length() - vowelCount;\n\
    \            String rest = word.substring(index);\n            String[] split\
    \ = Arrays.stream(rest.split(\"\")).filter(w -> w.matches(\"[bcdfghjklmnpqrstvwxyz]+\"\
    )).toArray(String[]::new);\n            int max = 0;\n            int min = 0;\n\
    \            for (String word : split) {\n                int index1 = word.indexOf(\"\
    b\");\n                int index2 = word.indexOf(\"c\");\n                int\
    \ index3 = word.indexOf(\"d\");\n                int index4 = word.indexOf(\"\
    f\");\n                int index5 = word.indexOf(\"g\");\n                int\
    \ index6 = word.indexOf(\"h\");\n                int index7 = word.indexOf(\"\
    k\");\n                int index8 = word.indexOf(\"l\");\n                int\
    \ index9 = word.indexOf(\"m\");\n                int index10 = word.indexOf(\"\
    n\");\n                int index11 = word.indexOf(\"p\");\n                int\
    \ index12 = word.indexOf(\"q\");\n                int index13 = word.indexOf(\"\
    r\");\n                int index14 = word.indexOf(\"s\");\n                int\
    \ index15 = word.indexOf(\"t\");\n                int index16 = word.indexOf(\"\
    v\");\n                int index17 = word.indexOf(\"x\");\n                int\
    \ index18 = word.indexOf(\"z\");\n                int index19 = word.indexOf(\"\
    A\");\n                int index20 = word.indexOf(\"E\");\n                int\
    \ index21 = word.indexOf(\"I\");\n                int index22 = word.indexOf(\"\
    O\");\n                int index23 = word.indexOf(\"U\");\n                int\
    \ index24 = word.indexOf(\"a\");\n                int index25 = word.indexOf(\"\
    e\");\n                int index26 = word.indexOf(\"i\");\n                int\
    \ index27 = word.indexOf(\"o\");\n                int index28 = word.indexOf(\"\
    u\");\n                max = Math.max(max, index1 + 1);\n                min =\
    \ Math.min(min, index20 + 1);\n            }\n            int max1 = Integer.MAX_VALUE;\n\
    \            int min1 = Integer.MIN_VALUE;\n            for (String word : split)\
    \ {\n                int index1 = word.indexOf(\"b\");\n                int index2\
    \ = word.indexOf(\"c\");\n                int index3 = word.indexOf(\"d\");\n\
    \                int index4 = word.indexOf(\"f\");\n                int index5\
    \ = word.indexOf(\"g\");\n                int index6 = word.indexOf(\"h\");\n\
    \                int index7 = word.indexOf(\"k\");\n                int index8\
    \ = word.indexOf(\"l\");\n                int index9 = word.indexOf(\"m\");\n\
    \                int index10 = word.indexOf(\"n\");\n                int index11\
    \ = word.indexOf(\"p\");\n                int \n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu2ffo1zo.java:78: error: not a statement\n                int \n\
    \                ^\n/tmp/tmpu2ffo1zo.java:78: error: ';' expected\n          \
    \      int \n                   ^\n/tmp/tmpu2ffo1zo.java:80: error: illegal start\
    \ of expression\n    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int startVowel\
    \ = -1;\n        int endVowel = -1;\n        int i;\n        for (i = 0; i < word.length();\
    \ i++) {\n            char c = word.charAt(i);\n            if (c != ' ') {\n\
    \                startVowel = i;\n            }\n            if (c == ' ' && startVowel\
    \ > 0) {\n                startVowel--;\n            }\n            if (c != '\
    \ ' && startVowel > 0) {\n                endVowel = i;\n            }\n     \
    \   }\n        if (startVowel == -1 && endVowel == -1) {\n            return \"\
    \";\n        }\n        if (startVowel > 0 && endVowel == word.length() - 1) {\n\
    \            return word.substring(startVowel);\n        }\n        if (startVowel\
    \ == 0 && endVowel == word.length() - 1) {\n            return word.substring(endVowel\
    \ + 1);\n        }\n        String rest = word.substring(startVowel + 1, endVowel);\n\
    \        if (rest != \"\") {\n            return rest;\n        }\n        String\
    \ preVowel = word.substring(0, startVowel);\n        if (preVowel != \"\") {\n\
    \            return getClosestVowel(preVowel);\n        }\n        return \"\"\
    ;\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2a53g7l0.java:59)\n"
  stdout: ''
  timestamp: 1660011641
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String vowel\
    \ = word.substring(0, 1);\n        for (int i = 1; i < word.length() - 1; i++)\
    \ {\n            vowel = word.substring(i, i + 1);\n            if (vowel.equals(\"\
    a\")\n                    || vowel.equals(\"e\")\n                    || vowel.equals(\"\
    i\")\n                    || vowel.equals(\"o\")\n                    || vowel.equals(\"\
    u\")) {\n                break;\n            }\n        }\n        return vowel;\n\
    \    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvn305ydz.java:38)\n"
  stdout: ''
  timestamp: 1660011640
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        int l = word.length();\n\
    \        List<String> vowels = new ArrayList<String>();\n        vowels.add(\"\
    a\");\n        vowels.add(\"e\");\n        vowels.add(\"i\");\n        vowels.add(\"\
    o\");\n        vowels.add(\"u\");\n        int count = 0;\n        int i = 0;\n\
    \        while (i < l) {\n            char ch = word.charAt(i);\n            if\
    \ (vowels.contains(ch)) {\n                count++;\n            }\n         \
    \   i++;\n        }\n        if (count == 0) {\n            return \"\";\n   \
    \     }\n        while (i < l) {\n            char ch = word.charAt(i);\n    \
    \        if (vowels.contains(ch)) {\n                return Character.toString(ch);\n\
    \            }\n            i++;\n        }\n        return \"\";\n    }\n   \
    \ public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi5r75k7k.java:53)\n"
  stdout: ''
  timestamp: 1660011641
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String[] vowels\
    \ = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"};\n\
    \        String[] consonants = {\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\"\
    , \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"};\n        String[] consonantsAfter = new String[consonants.length\
    \ - 1];\n        String[] consonantsBefore = new String[consonants.length - 1];\n\
    \        int consonantsCount = 0, consonantsCountBefore = 0, consonantsCountAfter\
    \ = 0;\n\n        char[] ch = word.toCharArray();\n\n        for (int i = ch.length\
    \ - 1; i >= 0; i--) {\n            if (consonants.contains(ch[i])) {\n       \
    \         consonantsCount++;\n                consonantsAfter[consonantsCountAfter++]\
    \ = ch[i];\n            } else if (vowels.contains(ch[i])) {\n               \
    \ consonantsCountBefore++;\n                consonantsBefore[consonantsCountBefore++]\
    \ = ch[i];\n            }\n        }\n\n        int min = Integer.MAX_VALUE;\n\
    \        String ans = \"\";\n        if (consonantsCount > 0 && consonantsCountBefore\
    \ == consonantsCountAfter) {\n            int consonantsCountAfterMin = Integer.MAX_VALUE;\n\
    \            for (int i = consonantsCountAfter - 1; i >= 0; i--) {\n         \
    \       if (consonantsAfter[i] > consonantsAfter[consonantsCountAfterMin]) {\n\
    \                    consonantsCountAfterMin = i;\n                }\n       \
    \     }\n            int consonantsCountBeforeMin = Integer.MAX_VALUE;\n     \
    \       for (int i = consonantsCountBefore - 1; i >= 0; i--) {\n             \
    \   if (consonantsBefore[i] > consonantsBefore[consonantsCountBeforeMin]) {\n\
    \                    consonantsCountBeforeMin = i;\n                }\n      \
    \      }\n            if (consonantsCountAfterMin == consonantsCountBeforeMin)\
    \ {\n                ans = vowels[consonantsCountAfterMin];\n            } else\
    \ if (consonantsCountAfterMin + consonantsCountBeforeMin < consonantsCount) {\n\
    \                ans = vowels[consonantsCountAfterMin + consonantsCountBeforeMin];\n\
    \            } else {\n                return \"\";\n            }\n        }\
    \ else if (consonantsCount > 0) {\n            ans = vowels[consonantsCount];\n\
    \        } else if (consonantsCount == 0) {\n            ans = \"\";\n       \
    \ }\n        return ans;\n    }\n    public static void main(String[] args) {\n\
    \    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdsjaqqt9.java:33: error: cannot find symbol\n            if (consonants.contains(ch[i]))\
    \ {\n                          ^\n  symbol:   method contains(char)\n  location:\
    \ variable consonants of type String[]\n/tmp/tmpdsjaqqt9.java:35: error: incompatible\
    \ types: char cannot be converted to String\n                consonantsAfter[consonantsCountAfter++]\
    \ = ch[i];\n                                                            ^\n/tmp/tmpdsjaqqt9.java:36:\
    \ error: cannot find symbol\n            } else if (vowels.contains(ch[i])) {\n\
    \                             ^\n  symbol:   method contains(char)\n  location:\
    \ variable vowels of type String[]\n/tmp/tmpdsjaqqt9.java:38: error: incompatible\
    \ types: char cannot be converted to String\n                consonantsBefore[consonantsCountBefore++]\
    \ = ch[i];\n                                                              ^\n\
    /tmp/tmpdsjaqqt9.java:47: error: bad operand types for binary operator '>'\n \
    \               if (consonantsAfter[i] > consonantsAfter[consonantsCountAfterMin])\
    \ {\n                                       ^\n  first type:  String\n  second\
    \ type: String\n/tmp/tmpdsjaqqt9.java:53: error: bad operand types for binary\
    \ operator '>'\n                if (consonantsBefore[i] > consonantsBefore[consonantsCountBeforeMin])\
    \ {\n                                        ^\n  first type:  String\n  second\
    \ type: String\n6 errors\n"
  stdout: ''
  timestamp: 1660011641
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        if (word ==\
    \ null || word.length() < 2) {\n            return \"\";\n        }\n        //\
    \ use stack to store all vowels and reverse the word for better performance\n\
    \        StringBuilder str = new StringBuilder();\n        Stack<Character> vowels\
    \ = new Stack<>();\n        for (int i = word.length() - 1; i >= 0; i--) {\n \
    \           char c = word.charAt(i);\n            if (Character.isLetter(c)) {\n\
    \                vowels.push(c);\n            }\n        }\n        for (Character\
    \ c : vowels) {\n            String vowel = String.valueOf(c);\n            char\
    \ first = vowel.charAt(0);\n            char last = vowel.charAt(vowel.length()\
    \ - 1);\n            if (first == 'a' || first == 'e' || first == 'i' || first\
    \ == 'o' || first == 'u' || last == 'a' || last == 'e' || last == 'i' || last\
    \ == 'o' || last == 'u') {\n                str.append(vowel);\n            }\n\
    \        }\n        if (str.length() > 0) {\n            return str.reverse().toString();\n\
    \        }\n        return \"\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    full\")).equals((\"u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ali\")).equals((\"\")));\n    assert(getClosestVowel((\"bad\")).equals((\"a\"\
    )));\n    assert(getClosestVowel((\"most\")).equals((\"o\")));\n    assert(getClosestVowel((\"\
    ab\")).equals((\"\")));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n\
    \    assert(getClosestVowel((\"quick\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\
    \")));\n    assert(getClosestVowel((\"Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_2yjvfki.java:50)\n"
  stdout: ''
  timestamp: 1660011641
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        List<String>\
    \ result = new ArrayList<>();\n        Arrays.stream(word.split(\"\")).filter(x\
    \ -> Character.isLetter(x)).forEach(x -> {\n            boolean isBefore = word.length()-1\
    \ >= getIndex(x, 'q');\n            boolean isAfter = word.length()-1 >= getIndex(x,\
    \ 'a');\n            if (isBefore) {\n                result.add(\"\");\n    \
    \        } else {\n                if (isAfter) {\n                    result.add(\"\
    \");\n                } else {\n                    if (getIndex(x, 'a') == -1)\
    \ {\n                        result.add(\"a\");\n                    } else {\n\
    \                        result.add(getVowel(x, \"a\"));\n                   \
    \ }\n                }\n            }\n        });\n        if (result.isEmpty())\
    \ {\n            return \"\";\n        } else {\n            return result.get(result.size()-1);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(getClosestVowel((\"\
    yogurt\")).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5vbhrze1.java:25: error: no suitable method found for isLetter(String)\n\
    \        Arrays.stream(word.split(\"\")).filter(x -> Character.isLetter(x)).forEach(x\
    \ -> {\n                                                           ^\n    method\
    \ Character.isLetter(char) is not applicable\n      (argument mismatch; String\
    \ cannot be converted to char)\n    method Character.isLetter(int) is not applicable\n\
    \      (argument mismatch; String cannot be converted to int)\n/tmp/tmp5vbhrze1.java:26:\
    \ error: cannot find symbol\n            boolean isBefore = word.length()-1 >=\
    \ getIndex(x, 'q');\n                                                  ^\n  symbol:\
    \   method getIndex(String,char)\n  location: class Problem\n/tmp/tmp5vbhrze1.java:27:\
    \ error: cannot find symbol\n            boolean isAfter = word.length()-1 >=\
    \ getIndex(x, 'a');\n                                                 ^\n  symbol:\
    \   method getIndex(String,char)\n  location: class Problem\n/tmp/tmp5vbhrze1.java:34:\
    \ error: cannot find symbol\n                    if (getIndex(x, 'a') == -1) {\n\
    \                        ^\n  symbol:   method getIndex(String,char)\n  location:\
    \ class Problem\n/tmp/tmp5vbhrze1.java:37: error: cannot find symbol\n       \
    \                 result.add(getVowel(x, \"a\"));\n                          \
    \         ^\n  symbol:   method getVowel(String,String)\n  location: class Problem\n\
    5 errors\n"
  stdout: ''
  timestamp: 1660011641
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        String[] vowels\
    \ = {\"a\",\"e\",\"i\",\"o\",\"u\",\"y\"};\n        String[] consonants = {\"\
    b\",\"c\",\"d\",\"f\",\"g\",\"h\",\"j\",\"k\",\"l\",\"m\",\"n\",\"p\",\"q\",\"\
    r\",\"s\",\"t\",\"v\",\"x\",\"z\"};\n        StringBuilder vowelBuilder = new\
    \ StringBuilder();\n        StringBuilder consonantBuilder = new StringBuilder();\n\
    \        for (int index = 0; index < word.length(); index++) {\n            if\
    \ (vowels.contains(word.charAt(index))) {\n                vowelBuilder.append(word.charAt(index));\n\
    \            } else if (consonants.contains(word.charAt(index))) {\n         \
    \       consonantBuilder.append(word.charAt(index));\n            }\n        }\n\
    \        int firstVowelIndex = word.length() - vowelBuilder.length();\n      \
    \  int firstConsonantIndex = word.length() - consonantBuilder.length();\n    \
    \    return word.substring(firstVowelIndex, firstConsonantIndex);\n    }\n   \
    \ public static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\"\
    )).equals((\"u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n\
    \    assert(getClosestVowel((\"easy\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    eAsy\")).equals((\"\")));\n    assert(getClosestVowel((\"ali\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"\
    most\")).equals((\"o\")));\n    assert(getClosestVowel((\"ab\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ba\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    quick\")).equals((\"\")));\n    assert(getClosestVowel((\"anime\")).equals((\"\
    i\")));\n    assert(getClosestVowel((\"Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    Above\")).equals((\"o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl534vgyz.java:29: error: cannot find symbol\n            if (vowels.contains(word.charAt(index)))\
    \ {\n                      ^\n  symbol:   method contains(char)\n  location: variable\
    \ vowels of type String[]\n/tmp/tmpl534vgyz.java:31: error: cannot find symbol\n\
    \            } else if (consonants.contains(word.charAt(index))) {\n         \
    \                        ^\n  symbol:   method contains(char)\n  location: variable\
    \ consonants of type String[]\n2 errors\n"
  stdout: ''
  timestamp: 1660011641
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        return word.substring(word.length()\
    \ - 1).chars().filter(c -> isVowel(c)).collect(\n            Collectors.toMap(i\
    \ -> word.charAt(i), i -> word.charAt(i + 1))).entrySet().stream()\n         \
    \   .map(Map.Entry::getValue)\n            .min(Comparator.comparingDouble((vowel)\
    \ -> vowel.length()))\n            .orElse(\"\");\n    }\n    public static void\
    \ main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"u\"\
    )));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdyls9r9r.java:24: error: cannot find symbol\n        return word.substring(word.length()\
    \ - 1).chars().filter(c -> isVowel(c)).collect(\n                            \
    \                                         ^\n  symbol:   method isVowel(int)\n\
    \  location: class Problem\n/tmp/tmpdyls9r9r.java:24: error: method collect in\
    \ interface IntStream cannot be applied to given types;\n        return word.substring(word.length()\
    \ - 1).chars().filter(c -> isVowel(c)).collect(\n                            \
    \                                                    ^\n  required: Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>\n\
    \  found:    Collector<Object,CAP#1,Map<Object,Object>>\n  reason: cannot infer\
    \ type-variable(s) R\n    (actual and formal argument lists differ in length)\n\
    \  where R is a type-variable:\n    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n/tmp/tmpdyls9r9r.java:24: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        return word.substring(word.length() - 1).chars().filter(c -> isVowel(c)).collect(\n\
    \                                                                            \
    \            ^\n    (argument mismatch; no instance(s) of type variable(s) CAP#1,T,K,U\
    \ exist so that Collector<T,?,Map<K,U>> conforms to Supplier<R>)\n  where R,T,K,U\
    \ are type-variables:\n    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T,K,U>toMap(Function<? super T,? extends\
    \ K>,Function<? super T,? extends U>)\n    K extends Object declared in method\
    \ <T,K,U>toMap(Function<? super T,? extends K>,Function<? super T,? extends U>)\n\
    \    U extends Object declared in method <T,K,U>toMap(Function<? super T,? extends\
    \ K>,Function<? super T,? extends U>)\n  where CAP#1 is a fresh type-variable:\n\
    \    CAP#1 extends Object from capture of ?\n/tmp/tmpdyls9r9r.java:27: error:\
    \ cannot find symbol\n            .min(Comparator.comparingDouble((vowel) -> v"
  stdout: ''
  timestamp: 1660011641
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given a word. Your task is to find the closest\
    \ vowel that stands between \n    // two consonants from the right side of the\
    \ word (case sensitive).\n    // Vowels in the beginning and ending doesn't count.\
    \ Return empty string if you didn't\n    // find any vowel met the above condition.\
    \ \n    // You may assume that the given string contains English letter only.\n\
    \    // Example:\n    // >>> getClosestVowel((\"yogurt\"))\n    // (\"u\")\n \
    \   // >>> getClosestVowel((\"FULL\"))\n    // (\"U\")\n    // >>> getClosestVowel((\"\
    quick\"))\n    // (\"\")\n    // >>> getClosestVowel((\"ab\"))\n    // (\"\")\n\
    \    public static String getClosestVowel(String word) {\n        Vowel u = new\
    \ Vowel(\"u\", \"U\");\n        Vowel l = new Vowel(\"l\", \"L\");\n        Vowel\
    \ le = new Vowel(\"le\", \"L\");\n        Vowel lee = new Vowel(\"lee\", \"L\"\
    );\n        Vowel lee = new Vowel(\"lee\", \"L\");\n        Vowel o = new Vowel(\"\
    o\", \"O\");\n        Vowel ee = new Vowel(\"ee\", \"E\");\n        Vowel oo =\
    \ new Vowel(\"oo\", \"O\");\n        Vowel ue = new Vowel(\"ue\", \"U\");\n  \
    \      Vowel eee = new Vowel(\"eee\", \"E\");\n        Vowel oooo = new Vowel(\"\
    oooo\", \"O\");\n        Vowel uue = new Vowel(\"uu\", \"U\");\n        Vowel\
    \ ll = new Vowel(\"ll\", \"L\");\n        Vowel el = new Vowel(\"el\", \"E\");\n\
    \        Vowel lll = new Vowel(\"lll\", \"L\");\n        Vowel ul = new Vowel(\"\
    ul\", \"U\");\n        Vowel lul = new Vowel(\"lul\", \"L\");\n        Vowel eel\
    \ = new Vowel(\"eel\", \"E\");\n        Vowel leel = new Vowel(\"leel\", \"L\"\
    );\n        Vowel elle = new Vowel(\"elle\", \"E\");\n        Vowel n = new Vowel(\"\
    n\", \"N\");\n        Vowel een = new Vowel(\"een\", \"E\");\n        Vowel enn\
    \ = new Vowel(\"enn\", \"N\");\n        Vowel nen = new Vowel(\"nen\", \"N\");\n\
    \        Vowel nnen = new Vowel(\"nnen\", \"N\");\n        Vowel in = new Vowel(\"\
    in\", \"I\");\n        Vowel en = new Vowel(\"en\", \"E\");\n        Vowel inn\
    \ = new Vowel(\"inn\", \"I\");\n        Vowel nin = new Vowel(\"nin\", \"N\");\n\
    \        Vowel nnin = new Vowel(\"nnin\", \"N\");\n        Vowel eln = new Vowel(\"\
    eln\", \"E\");\n        Vowel ninn = new Vowel(\"ninn\", \"N\");\n    }\n    public\
    \ static void main(String[] args) {\n    assert(getClosestVowel((\"yogurt\")).equals((\"\
    u\")));\n    assert(getClosestVowel((\"full\")).equals((\"u\")));\n    assert(getClosestVowel((\"\
    easy\")).equals((\"\")));\n    assert(getClosestVowel((\"eAsy\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"ali\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    bad\")).equals((\"a\")));\n    assert(getClosestVowel((\"most\")).equals((\"o\"\
    )));\n    assert(getClosestVowel((\"ab\")).equals((\"\")));\n    assert(getClosestVowel((\"\
    ba\")).equals((\"\")));\n    assert(getClosestVowel((\"quick\")).equals((\"\"\
    )));\n    assert(getClosestVowel((\"anime\")).equals((\"i\")));\n    assert(getClosestVowel((\"\
    Asia\")).equals((\"\")));\n    assert(getClosestVowel((\"Above\")).equals((\"\
    o\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdfm5y802.java:24: error: cannot find symbol\n        Vowel u =\
    \ new Vowel(\"u\", \"U\");\n        ^\n  symbol:   class Vowel\n  location: class\
    \ Problem\n/tmp/tmpdfm5y802.java:24: error: cannot find symbol\n        Vowel\
    \ u = new Vowel(\"u\", \"U\");\n                      ^\n  symbol:   class Vowel\n\
    \  location: class Problem\n/tmp/tmpdfm5y802.java:25: error: cannot find symbol\n\
    \        Vowel l = new Vowel(\"l\", \"L\");\n        ^\n  symbol:   class Vowel\n\
    \  location: class Problem\n/tmp/tmpdfm5y802.java:25: error: cannot find symbol\n\
    \        Vowel l = new Vowel(\"l\", \"L\");\n                      ^\n  symbol:\
    \   class Vowel\n  location: class Problem\n/tmp/tmpdfm5y802.java:26: error: cannot\
    \ find symbol\n        Vowel le = new Vowel(\"le\", \"L\");\n        ^\n  symbol:\
    \   class Vowel\n  location: class Problem\n/tmp/tmpdfm5y802.java:26: error: cannot\
    \ find symbol\n        Vowel le = new Vowel(\"le\", \"L\");\n                \
    \       ^\n  symbol:   class Vowel\n  location: class Problem\n/tmp/tmpdfm5y802.java:27:\
    \ error: cannot find symbol\n        Vowel lee = new Vowel(\"lee\", \"L\");\n\
    \        ^\n  symbol:   class Vowel\n  location: class Problem\n/tmp/tmpdfm5y802.java:27:\
    \ error: cannot find symbol\n        Vowel lee = new Vowel(\"lee\", \"L\");\n\
    \                        ^\n  symbol:   class Vowel\n  location: class Problem\n\
    /tmp/tmpdfm5y802.java:28: error: cannot find symbol\n        Vowel lee = new Vowel(\"\
    lee\", \"L\");\n        ^\n  symbol:   class Vowel\n  location: class Problem\n\
    /tmp/tmpdfm5y802.java:28: error: cannot find symbol\n        Vowel lee = new Vowel(\"\
    lee\", \"L\");\n                        ^\n  symbol:   class Vowel\n  location:\
    \ class Problem\n/tmp/tmpdfm5y802.java:29: error: cannot find symbol\n       \
    \ Vowel o = new Vowel(\"o\", \"O\");\n        ^\n  symbol:   class Vowel\n  location:\
    \ class Problem\n/tmp/tmpdfm5y802.java:29: error: cannot find symbol\n       \
    \ Vowel o = new Vowel(\"o\", \"O\");\n                      ^\n  symbol:   class\
    \ Vowel\n  location: class Problem\n/tmp/tmpdfm5y802.java:30: error: cannot find\
    \ symbol\n        Vowel ee = new Vowel(\"ee\", \"E\");\n        ^\n  symbol: \
    \  class Vowel\n"
  stdout: ''
  timestamp: 1660011641
