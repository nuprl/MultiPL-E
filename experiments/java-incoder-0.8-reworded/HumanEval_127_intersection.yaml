name: HumanEval_127_intersection
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given two intervals,\n    // where each interval\
  \ is a pair of integers. For example, interval = (start, end) = (1, 2).\n    //\
  \ The given intervals are closed which means that the interval (start, end)\n  \
  \  // includes both start and end.\n    // For each given interval, it is assumed\
  \ that its start is less or equal its end.\n    // Your task is to determine whether\
  \ the length of intersection of these two \n    // intervals is a prime number.\n\
  \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  \
  \  // which its length is 1, which not a prime number.\n    // If the length of\
  \ the intersection is a prime number, return \"YES\",\n    // otherwise, return\
  \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output]\
  \ samples:\n    // >>> intersection((Pair.with(1l, 2l)), (Pair.with(2l, 3l)))\n\
  \    // (\"NO\")\n    // >>> intersection((Pair.with(-1l, 1l)), (Pair.with(0l, 4l)))\n\
  \    // (\"NO\")\n    // >>> intersection((Pair.with(-3l, -1l)), (Pair.with(-5l,\
  \ 5l)))\n    // (\"YES\")\n    public static String intersection(Pair<Long, Long>\
  \ interval1, Pair<Long, Long> interval2) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(intersection((Pair.with(1l,\
  \ 2l)), (Pair.with(2l, 3l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-1l,\
  \ 1l)), (Pair.with(0l, 4l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-3l,\
  \ -1l)), (Pair.with(-5l, 5l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-2l,\
  \ 2l)), (Pair.with(-4l, 0l))).equals((\"YES\")));\n    assert(intersection((Pair.with(-11l,\
  \ 2l)), (Pair.with(-1l, -1l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
  \ 2l)), (Pair.with(3l, 5l))).equals((\"NO\")));\n    assert(intersection((Pair.with(1l,\
  \ 2l)), (Pair.with(1l, 2l))).equals((\"NO\")));\n    assert(intersection((Pair.with(-2l,\
  \ -2l)), (Pair.with(-3l, -2l))).equals((\"NO\")));\n    }\n\n}\n"
completions: ["        int len1, len2;\n        long intersect, len_intersect;\n \
    \       boolean prime_found;\n        len1 = interval1.getFirst() - interval1.getSecond();\n\
    \        len2 = interval2.getFirst() - interval2.getSecond();\n        intersect\
    \ = len1 * len2;\n        len_intersect = (int) Math.ceil(Math.sqrt(intersect));\n\
    \        prime_found = true;\n        if (len1 == len2) {\n            if (len_intersect\
    \ % 2 == 0) {\n                prime_found = false;\n            }\n         \
    \   else if (len_intersect % 2 == 1) {\n                if (interval1.getSecond()\
    \ < interval2.getSecond()) {\n                    prime_found = false;\n     \
    \           }\n            }\n        }\n        else if ((len1 > len2) && (len1\
    \ < len_intersect)) {\n            prime_found = false;\n        }\n        else\
    \ if (len1 > len2) && (len1 > len_intersect) {\n            if (interval1.getSecond()\
    \ < interval2.getSecond()) {\n                prime_found = false;\n         \
    \   }\n        }\n        else if (len1 == len_intersect) {\n            if (interval1.getSecond()\
    \ < interval2.getSecond()) {\n                prime_found = false;\n         \
    \   }\n        }\n        else if (len1 > len_intersect) {\n            if (interval1.getSecond()\
    \ < interval2.getSecond()) {\n                prime_found = false;\n         \
    \   }\n        }\n        if (prime_found) {\n            return \"YES\";\n  \
    \      }\n        else {\n            return \"NO\";\n        }", "        long\
    \ len1, len2;\n        boolean isIntersect = false;\n        len1 = interval1.getFirst()\
    \ - interval1.getSecond();\n        len2 = interval2.getFirst() - interval2.getSecond();\n\
    \        if (len1 == len2 && len1 != 0) {\n            if (len1 == 2) {\n    \
    \            if (interval1.getFirst() != interval2.getFirst()) {\n           \
    \         isIntersect = true;\n                } else {\n                    isIntersect\
    \ = false;\n                }\n            } else if (len1 == 2) {\n         \
    \       isIntersect = false;\n            } else {\n                isIntersect\
    \ = true;\n            }\n        } else if (len1 != len2 && len1 != 0) {\n  \
    \          if (len1 == 2) {\n                if (interval1.getFirst() != interval2.getFirst())\
    \ {\n                    isIntersect = false;\n                } else {\n    \
    \                isIntersect = true;\n                }\n            } else {\n\
    \                isIntersect = false;\n            }\n        } else if (len1\
    \ == len2) {\n            if (interval1.getFirst() != interval2.getFirst()) {\n\
    \                isIntersect = true;\n            } else {\n                isIntersect\
    \ = false;\n            }\n        } else {\n            isIntersect = false;\n\
    \        }\n        if (isIntersect) {\n            return \"YES\";\n        }\
    \ else {\n            return \"NO\";\n        }", "        Long start1 = interval1.getFirst();\n\
    \        Long end1 = interval1.getSecond();\n        Long start2 = interval2.getFirst();\n\
    \        Long end2 = interval2.getSecond();\n\n        if ((start1 <= end2) &&\
    \ (start2 <= end1)) {\n            if (start1 < start2) {\n                end2\
    \ = end1;\n                start2 = start1;\n            }\n            if (end1\
    \ < end2) {\n                end1 = end2;\n                start1 = start2;\n\
    \            }\n            String str = String.format(\"%s;%s\", start2, end2);\n\
    \            long length = str.length();\n            if (length != 0) {\n   \
    \             if (isPrime(length)) {\n                    return \"YES\";\n  \
    \              } else {\n                    return \"NO\";\n                }\n\
    \            }\n        }\n        return \"NO\";", "        // Write your code\
    \ here\n        long start = Math.min(interval1.getValue(), interval2.getValue());\n\
    \        long end = Math.max(interval1.getValue(), interval2.getValue());\n\n\
    \        if(start < end)\n        {\n            long l1 = (long) Math.sqrt(start\
    \ * 1.0);\n            long l2 = (long) Math.sqrt(end * 1.0);\n            long\
    \ len1 = ((l1 * l1) / 2) * 2;\n            long len2 = ((l2 * l2) / 2) * 2;\n\
    \            long len = (len1 + len2 - len1 - len2);\n\n            if(len < 2)\n\
    \            {\n                return \"NO\";\n            }\n\n            if(len\
    \ % 2 == 0)\n            {\n                long sum1 = (l1 + l2 - len1) / 2;\n\
    \                long sum2 = (l2 + l1 - len2) / 2;\n                long sum =\
    \ (sum1 + sum2 - sum1 - sum2) / 2;\n                long num1 = sum / l1;\n  \
    \              long num2 = sum / l2;\n\n                if(num1 + num2 == 1)\n\
    \                {\n                    return \"YES\";\n                }\n \
    \               else if(num1 + num2 != 1)\n                {\n               \
    \     return \"NO\";\n                }\n            }\n\n            return \"\
    NO\";\n        }\n        else\n        {\n            return \"NO\";\n      \
    \  }", "        Pair<Long, Long> intersection = Pair.with(interval1.getLeft()\
    \ - interval2.getLeft(), interval1.getRight() - interval2.getRight());\n     \
    \   if (intersection.getLeft() > intersection.getRight()) {\n            return\
    \ \"NO\";\n        }\n        String result;\n        if (intersection.getLeft()\
    \ == intersection.getRight()) {\n            if (intersection.getLeft() < interval1.getLeft()\
    \ || intersection.getLeft() > interval1.getRight()) {\n                result\
    \ = \"NO\";\n            } else {\n                result = \"YES\";\n       \
    \     }\n        } else {\n            long diff = intersection.getLeft() - intersection.getRight();\n\
    \            long length = interval1.getRight() - interval1.getLeft();\n     \
    \       long min = interval1.getRight();\n            long max = interval1.getLeft();\n\
    \            while (true) {\n                min += 2;\n                max +=\
    \ 2;\n                if (max > length) break;\n                if (min >= length)\
    \ {\n                    if (min == length) result = \"YES\";\n              \
    \      else result = \"NO\";\n                    break;\n                }\n\
    \                long diff = max - min;\n                if (diff == 2) result\
    \ = \"YES\";\n                else if (diff == 3) result = \"YES\";\n        \
    \        else if (diff == length) result = \"NO\";\n                else if (diff\
    \ % 2 == 1) result = \"NO\";\n            }\n        }\n        return result;",
  "        long intersection = interval1.getLeft() > interval2.getLeft() ? interval1.getLeft()\
    \ : interval2.getLeft();\n        intersection = Math.max(interval1.getRight(),\
    \ interval2.getRight()) + intersection;\n        long divisor = Long.MAX_VALUE\
    \ / interval1.getLeft() - Long.MAX_VALUE / interval2.getLeft();\n        if (interval1.getLeft()\
    \ + interval2.getLeft() == 0) {\n            divisor = Long.MAX_VALUE / interval1.getLeft()\
    \ - Long.MAX_VALUE / interval1.getRight();\n        }\n        if (interval1.getLeft()\
    \ + interval2.getLeft() < 0) {\n            divisor = Long.MAX_VALUE / interval1.getRight()\
    \ - Long.MAX_VALUE / interval2.getLeft();\n        }\n        if (interval1.getLeft()\
    \ >= interval1.getRight() && interval2.getLeft() >= interval2.getRight()) {\n\
    \            if (interval1.getLeft() < interval2.getLeft()) {\n              \
    \  divisor = Long.MAX_VALUE / interval1.getLeft() - Long.MAX_VALUE / interval2.getLeft();\n\
    \            }\n            if (interval1.getRight() > interval2.getRight()) {\n\
    \                divisor = Long.MAX_VALUE / interval1.getRight() - Long.MAX_VALUE\
    \ / interval2.getRight();\n            }\n        }\n        if (interval1.getLeft()\
    \ < 0 && interval1.getRight() > interval2.getLeft() && interval2.getRight() >\
    \ interval2.getLeft()) {\n            long temp = interval1.getRight() - interval1.getLeft();\n\
    \            temp = Math.max(interval2.getRight(), interval2.getLeft()) + temp;\n\
    \            if (temp % interval1.getLeft() != 0) {\n                divisor =\
    \ Long.MAX_VALUE / interval1.getRight() - Long.MAX_VALUE / interval2.getLeft();\n\
    \            }\n            if (temp % interval2.getLeft() != 0) {\n         \
    \       divisor = Long.MAX_VALUE / interval2.getRight() - Long.MAX_VALUE / interval1.getLeft();\n\
    \            }\n        }\n        if (interval1.getLeft() < 0 && interval1.getRight()\
    \ > interval2.getLeft() && interval2.getLeft() < interval2.getRight()) {\n   \
    \         long temp = interval1.getRight() - interval1.getLeft();\n          \
    \  temp = Math.max(interval1.getLeft(), interval1.getRight()) + temp;\n      \
    \      if (temp % interval1.getRight() != 0) {\n                divisor = Long.MAX_VALUE ",
  "        if (interval1.getStart() > interval1.getEnd()) {\n            throw new\
    \ IllegalArgumentException(\"The interval1 should be lesser than interval2\");\n\
    \        }\n        if (interval2.getStart() > interval2.getEnd()) {\n       \
    \     throw new IllegalArgumentException(\"The interval2 should be lesser than\
    \ interval1\");\n        }\n        \n        if (interval1.getEnd() < interval2.getStart())\
    \ {\n            throw new IllegalArgumentException(\"The interval1 should be\
    \ lesser than interval2\");\n        }\n        if (interval1.getEnd() < interval2.getEnd())\
    \ {\n            throw new IllegalArgumentException(\"The interval1 should be\
    \ lesser than interval2\");\n        }\n        \n        if (interval1.getStart()\
    \ == interval2.getStart()) {\n            return \"YES\";\n        }\n       \
    \ \n        if (interval1.getStart() == interval1.getEnd()) {\n            return\
    \ interval1.getEnd() == interval2.getStart() ? \"YES\" : \"NO\";\n        }\n\
    \        \n        if (interval2.getStart() == interval2.getEnd()) {\n       \
    \     return interval1.getStart() == interval1.getEnd() ? \"YES\" : \"NO\";\n\
    \        }\n        \n        if (interval1.getStart() > interval1.getEnd() &&\
    \ interval2.getStart() > interval2.getEnd()) { \n            return \"NO\"; \n\
    \        }\n        \n        if (interval1.getStart() < interval1.getEnd() &&\
    \ interval2.getStart() < interval2.getEnd()) { \n            return \"NO\"; \n\
    \        }\n        \n        if (interval1.getStart() < interval1.getEnd() &&\
    \ interval2.getStart() < interval2.getEnd()) { \n            return \"YES\"; \n\
    \        }\n        \n        if (interval1.getStart() < interval1.getEnd() &&\
    \ interval2.getStart() > interval2.getEnd()) { \n            return \"YES\"; \n\
    \        }\n        \n        if (interval1.getStart() > interval1.getEnd() &&\
    \ interval2.getStart() > interval2.getEnd()) { \n            return \"YES\"; \n\
    \        }\n        \n        if (interval1.getStart() == interval1.getEnd() &&\
    \ interval2.getStart() == interval2.getEnd()) { \n            return \"YES\";\
    \ \n        }\n        \n        if (interval1.getStart() == interval2.getEnd()\
    \ && interval2.getStart() == interval1.getEnd()) { \n            return \"YES\"\
    ; \n        }\n        \n        return \"NO\";", "        long start = interval1.getLeft();\n\
    \        long end = interval1.getRight();\n        long sstart = interval2.getLeft();\n\
    \        long send = interval2.getRight();\n        long diff = end - start;\n\
    \        long sdiff = send - sstart;\n        if (diff == 0 || sdiff == 0) {\n\
    \            return \"NO\";\n        }\n        if (diff == sdiff) {\n       \
    \     if (diff == 1) {\n                return \"YES\";\n            }\n     \
    \       return \"NO\";\n        }\n        if (start > end) {\n            Pair<Long,\
    \ Long> temp = interval1;\n            interval1 = interval2;\n            interval2\
    \ = temp;\n            end = start;\n            sstart = send;\n            send\
    \ = sstart;\n        }\n        long mid = (start + end) / 2;\n        long mid2\
    \ = (start + end) / 2;\n        if (sstart > send){\n            return intersection(interval1,\
    \ Pair.with(mid, mid));\n        }\n        if (sstart < send){\n            return\
    \ intersection(Pair.with(mid, mid2), interval2);\n        }\n        if (mid2\
    \ > mid){\n            return intersection(Pair.with(mid, mid), interval2);\n\
    \        }\n        if (mid2 < mid){\n            return intersection(interval1,\
    \ Pair.with(mid, mid2));\n        }\n        if (start > send){\n            return\
    \ intersection(Pair.with(mid, mid), interval2);\n        }\n        if (sstart\
    \ < send){\n            return intersection(Pair.with(mid, mid2), Pair.with(mid,\
    \ mid));\n        }\n        if (mid2 > mid){\n            return intersection(Pair.with(mid,\
    \ mid), Pair.with(mid, mid2));\n        }\n        if (mid2 < mid){\n        \
    \    return intersection(Pair.with(mid, mid), Pair.with(mid, mid));\n        }\n\
    \        if (mid2 > mid){\n            return intersection(Pair.with(mid, mid),\
    \ Pair.with(mid, mid2));\n        }\n        if (mid2 < mid){\n            return\
    \ intersection(Pair.with(mid, mid), Pair.with(mid, mid2));\n        }\n      \
    \  if (mid2 < mid){\n            return intersection(Pair.with(mid, mid), Pair.with(mid,\
    \ mid2));\n        }\n        if (mid2 < mid){\n            return intersection(Pair.with(mid,\
    \ mid), Pair.with(mid, mid2));\n        }\n        return \"NO\";", "        interval1\
    \ = new Pair<Long, Long>(interval1.getLeft(), interval1.getRight());\n       \
    \ interval2 = new Pair<Long, Long>(interval2.getLeft(), interval2.getRight());\n\
    \        long end1Left = interval1.getLeft();\n        long end2Left = interval2.getLeft();\n\
    \        long end1Right = interval1.getRight();\n        long end2Right = interval2.getRight();\n\
    \        // check: end1Left == end2Left || end1Right == end2Right\n        if\
    \ (end1Left == end2Left || end1Right == end2Right) {\n            return \"NO\"\
    ;\n        }\n        boolean isIntersect = end1Left <= end2Right && end2Left\
    \ <= end1Right;\n        long intersect_length;\n        if (isIntersect) {\n\
    \            intersect_length = end1Left > end2Left ? end2Left : end1Left;\n \
    \       } else {\n            intersect_length = end1Right > end2Right ? end2Right\
    \ : end1Right;\n        }\n        // check if intersect_length is prime\n   \
    \     if (isPrime(intersect_length)) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";", "        if (interval1.getLeft() > interval2.getLeft())\
    \ return \"NO\";\n        if (interval1.getRight() < interval2.getRight()) return\
    \ \"NO\";\n        long intersection = interval1.getLeft() <= interval2.getRight()\
    \ ? interval2.getRight() - interval1.getLeft() : interval1.getLeft() - interval2.getRight();\n\
    \        return !PrimeUtils.isPrime(intersection) ? \"NO\" : \"YES\";", "    \
    \    int len1 = interval1.getRight().intValue() - interval1.getLeft().intValue();\n\
    \        int len2 = interval2.getRight().intValue() - interval2.getLeft().intValue();\n\
    \        if (len2 == 0) {\n            int len = Math.min(len1, len2);\n     \
    \       return primeCheck(len);\n        } else {\n            return primeCheck(Math.min(len1,\
    \ len2));\n        }", "        if (interval1.equals(interval2)) {\n         \
    \   return String.valueOf(interval1.value);\n        }\n        long start1 =\
    \ interval1.getLeft();\n        long end1 = interval1.getRight();\n        long\
    \ start2 = interval2.getLeft();\n        long end2 = interval2.getRight();\n \
    \       // The intersection can be calculated between any two integers\n     \
    \   // So if we subtract one from another we get a negative number\n        //\
    \ which is impossible. Thus we check if the intervals are intersecting or not\n\
    \        if (start1 <= end2 && start2 <= end1) {\n            if (findPrime(start1,\
    \ end1) && findPrime(start2, end2)) {\n                return \"YES\";\n     \
    \       }\n        }\n        return \"NO\";", "        List<Interval> intervals\
    \ = Arrays.asList(new Interval(interval1, interval2));\n        Iterator<Interval>\
    \ it = intervals.iterator();\n        int count = 0;\n        boolean hasIntersect\
    \ = false;\n        Interval inter;\n        while (it.hasNext()) {\n        \
    \    inter = it.next();\n            long interStart = inter.start;\n        \
    \    long interEnd = inter.end;\n            if (interStart >= interEnd) {\n \
    \               hasIntersect = true;\n                break;\n            }\n\
    \            if (hasIntersect) {\n                continue;\n            }\n \
    \           count++;\n            long interStartEnd = Math.min(interStart, interEnd);\n\
    \            long interEndStart = Math.max(interStart, interEnd);\n          \
    \  if (interStartEnd >= interEndStart) {\n                hasIntersect = true;\n\
    \                break;\n            }\n        }\n        if (hasIntersect) {\n\
    \            int len = count / 2;\n            if (PrimeNumbers.isPrime(len))\
    \ {\n                return \"YES\";\n            }\n            return \"NO\"\
    ;\n        }\n        return \"NO\";", "        // check both interval\n     \
    \   if (interval1.getLeft() > interval2.getRight()) {\n            return intersection(interval2,\
    \ interval1);\n        } else if (interval1.getLeft() < interval2.getLeft()) {\n\
    \            return intersection(interval1, interval2);\n        }\n        //\
    \ if both interval has same left and right number\n        // check intersection\
    \ number\n        if (interval1.getLeft() <= interval2.getLeft()) {\n        \
    \    if (interval1.getRight() <= interval2.getRight()) {\n                // check\
    \ whether intersection is prime\n                boolean prime = true;\n     \
    \           long intersection_l = interval1.getLeft();\n                long intersection_r\
    \ = interval1.getRight();\n                while (intersection_l < interval2.getRight())\
    \ {\n                    long interval_l = interval2.getLeft();\n            \
    \        if (intersection_l > interval_r) {\n                        return intersection(interval1,\
    \ interval2);\n                    }\n                    intersection_l++;\n\
    \                    interval_l++;\n                }\n                while (intersection_r\
    \ > interval1.getLeft()) {\n                    long interval_r = interval1.getRight();\n\
    \                    if (intersection_r < interval_l) {\n                    \
    \    return intersection(interval1, interval2);\n                    }\n     \
    \               intersection_r--;\n                    interval_r--;\n       \
    \         }\n                if (interval_r > interval_l) {\n                \
    \    prime = false;\n                }\n                return prime;\n      \
    \      } else {\n                return intersection(interval1, interval2);\n\
    \            }\n        } else {\n            return intersection(interval1, interval2);\n\
    \        }", "        List<Pair<Long, Long>> ranges1 = ranges(interval1);\n  \
    \      List<Pair<Long, Long>> ranges2 = ranges(interval2);\n\n        // For two\
    \ non-intersected intervals, just return \"NO\"\n        if (ranges1.size() ==\
    \ 0 || ranges2.size() == 0) {\n            return \"NO\";\n        }\n       \
    \ \n        // Check whether the intersect is prime\n        Long intersect =\
    \ getIntersect(ranges1, ranges2, interval1, interval2);\n        if (intersect\
    \ == null) {\n            return \"NO\";\n        }\n        \n        if (prime(intersect))\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }", "        Map<Long, Long> map = new HashMap<>();\n        map.put(interval1.getLeft(),\
    \ interval1.getRight());\n        map.put(interval2.getLeft(), interval2.getRight());\n\
    \        Set<Long> set = new HashSet<>();\n        set.add(interval1.getLeft());\n\
    \        set.add(interval1.getRight());\n        set.add(interval2.getLeft());\n\
    \        set.add(interval2.getRight());\n        long result = LongStream.range(interval1.getLeft(),\
    \ interval1.getRight())\n                .filter(e -> set.contains(e))\n     \
    \           .filter(e -> map.get(e) != null)\n                .collect(Collectors.toList()).stream().filter(e\
    \ -> map.get(e) != null)\n                .mapToLong(e -> map.get(e)).sum();\n\
    \        return LongStream.range(interval1.getLeft(), interval1.getRight())\n\
    \                .filter(e -> set.contains(e))\n                .filter(e -> map.get(e)\
    \ != null)\n                .mapToLong(e -> map.get(e)).sum().equals(result) ?\
    \ \"YES\" : \"NO\";", "        boolean flag = false;\n        List<Long> list1\
    \ = new ArrayList<>();\n        List<Long> list2 = new ArrayList<>();\n      \
    \  long result = interval1.getFirst();\n        long min1 = interval1.getSecond();\n\
    \        long min2 = interval2.getSecond();\n        long max1 = interval1.getFirst();\n\
    \        long max2 = interval2.getFirst();\n        while (min1 != max1 && min2\
    \ != max2) {\n            if (min1 < min2) {\n                list1.add(min1);\n\
    \                min2 = min2 + 1;\n            } else {\n                list2.add(min2);\n\
    \                min1 = min1 + 1;\n            }\n        }\n        while (min1\
    \ != max1) {\n            if (min1 < max2) {\n                list1.add(min1);\n\
    \                min2 = min2 + 1;\n            } else {\n                list2.add(min2);\n\
    \                min1 = min1 + 1;\n            }\n        }\n        while (min2\
    \ != max2) {\n            if (min2 < max1) {\n                list2.add(min2);\n\
    \                min1 = min1 + 1;\n            } else {\n                list1.add(min1);\n\
    \                min2 = min2 + 1;\n            }\n        }\n        if (list1.size()\
    \ < list2.size()) {\n            flag = true;\n            for (int i = 0; i <\
    \ list1.size(); i++) {\n                result = result + list1.get(i);\n    \
    \        }\n            List<Long> list = new ArrayList<>();\n            list.addAll(list1);\n\
    \            list.removeAll(list2);\n            result = result + list.size();\n\
    \        } else {\n            flag = true;\n            for (int i = 0; i < list2.size();\
    \ i++) {\n                result = result + list2.get(i);\n            }\n   \
    \         List<Long> list = new ArrayList<>();\n            list.addAll(list2);\n\
    \            list.removeAll(list1);\n            result = result + list.size();\n\
    \        }\n        if (result == 0) {\n            return \"NO\";\n        }\n\
    \        boolean flag2 = true;\n        if (result == 1) {\n            return\
    \ \"NO\";\n        }\n        for (int i = 2; i < result; i++) {\n           \
    \ if (flag2) {\n                if (flag) {\n                    return \"NO\"\
    ;\n                }\n            }\n            boolean flag3 = false;\n    \
    \        for (int j = 0; j < i; j++) {\n                if (flag) {\n        \
    \            flag3 = true;\n                    break;\n                }\n  \
    \          }\n            if (flag3 == false) {\n                return \"NO\"\
    ;\n            }\n        }\n        return \"YES\";", "        String str = \"\
    NO\";\n        if(interval1.getFirst() > interval2.getFirst() || interval1.getFirst()\
    \ < interval2.getFirst() || interval1.getSecond() > interval2.getSecond() || interval1.getSecond()\
    \ < interval2.getSecond()) {\n            return \"NO\";\n        }\n        if(interval1.getFirst()\
    \ < interval2.getFirst() || interval1.getSecond() > interval2.getSecond()) {\n\
    \            return \"NO\";\n        }\n        int length = intersectionLength(interval1,\
    \ interval2);\n        boolean isPrime = isPrime(length);\n        if(isPrime)\
    \ {\n            str = \"YES\";\n        }\n        return str;", "        interval1\
    \ = interval1.getValue();\n        interval2 = interval2.getValue();\n       \
    \ Pair<Long, Long> intersection = Pair.with(0l, 0l);\n        if (interval1.getLeft()\
    \ == interval2.getLeft()) {\n            intersection = Pair.with(interval1.getLeft(),\
    \ interval1.getRight());\n        } else if (interval1.getLeft() < interval2.getLeft())\
    \ {\n            Pair<Long, Long> start1 = Pair.with(interval1.getLeft(), interval1.getRight());\n\
    \            Pair<Long, Long> end1 = Pair.with(interval1.getLeft(), interval1.getRight());\n\
    \            if (interval2.getRight() >= interval1.getRight()) {\n           \
    \     end1 = Pair.with(interval1.getLeft(), interval1.getRight());\n         \
    \   }\n            Pair<Long, Long> start2 = Pair.with(interval2.getLeft(), interval2.getRight());\n\
    \            Pair<Long, Long> end2 = Pair.with(interval2.getLeft(), interval2.getRight());\n\
    \            if (interval1.getRight() >= interval2.getRight()) {\n           \
    \     end2 = Pair.with(interval2.getLeft(), interval2.getRight());\n         \
    \   }\n            intersection = Pair.with(start1.getLeft() <= end2.getLeft()\
    \ ? start1.getLeft() : end2.getLeft(),\n                    end1.getRight() <=\
    \ start2.getLeft() ? end1.getRight() : start2.getRight());\n        } else {\n\
    \            Pair<Long, Long> start1 = Pair.with(interval1.getLeft(), interval1.getRight());\n\
    \            Pair<Long, Long> end1 = Pair.with(interval1.getLeft(), interval1.getRight());\n\
    \            if (interval2.getRight() >= interval1.getRight()) {\n           \
    \     end1 = Pair.with(interval1.getLeft(), interval1.getRight());\n         \
    \   }\n            Pair<Long, Long> start2 = Pair.with(interval2.getLeft(), interval2.getRight());\n\
    \            Pair<Long, Long> end2 = Pair.with(interval2.getLeft(), interval2.getRight());\n\
    \            if (interval1.getRight() >= interval2.getRight()) {\n           \
    \     end2 = Pair.with(interval2.getLeft(), interval2.getRight());\n         \
    \   }\n            intersection = Pair.with(start1.getLeft() <= end2.getLeft()\
    \ ? start1.getLeft() : end2.getLeft(),\n                    end1.getRight() <=\
    \ start2.getLeft() ? end1.getRight() : start2.getRight());\n        }\n", "  \
    \      // Your code goes here\n        // You can copy and paste your code in\
    \ here and run it directly.\n        Long intersection = interval1.getEnd() -\
    \ interval1.getStart();\n        if (interval2.getEnd() - interval2.getStart()\
    \ == 0) {\n            return (\"NO\");\n        }\n        Long total = intersection\
    \ + interval2.getEnd() - interval2.getStart();\n        if (total == 0) {\n  \
    \          return (\"NO\");\n        }\n        if (total == 1) {\n          \
    \  return (\"YES\");\n        }\n        boolean isPrime = true;\n        for\
    \ (int i = 0; i <= total; i++) {\n            if (i % 2 == 0) {\n            \
    \    if (interval1.getStart() >= interval2.getStart()) {\n                   \
    \ if (interval1.getEnd() <= interval2.getEnd()) {\n                        if\
    \ (interval1.getStart() <= interval2.getEnd() && interval1.getEnd() > 0) {\n \
    \                           isPrime = false;\n                            break;\n\
    \                        }\n                    }\n                    if (interval1.getEnd()\
    \ > interval2.getEnd()) {\n                        if (interval1.getStart() <=\
    \ interval2.getEnd() && interval1.getEnd() > 0) {\n                          \
    \  isPrime = false;\n                            break;\n                    \
    \    }\n                    }\n                } else {\n                    if\
    \ (interval1.getEnd() <= interval2.getStart()) {\n                        if (interval1.getStart()\
    \ > interval2.getStart()) {\n                            isPrime = false;\n  \
    \                          break;\n                        }\n               \
    \     }\n                    if (interval1.getStart() > interval2.getEnd()) {\n\
    \                        if (interval1.getStart() > interval2.getStart()) {\n\
    \                            isPrime = false;\n                            break;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        if (isPrime) {\n            return (\"YES\");\n  \
    \      }\n        return (\"NO\");", "        long intersectionLength = interval1.getLeft().longValue()\
    \ <= interval2.getLeft().longValue() ? interval1.getLeft().longValue() - interval2.getLeft().longValue()\
    \ : interval1.getLeft().longValue() - interval2.getRight().longValue();\n    \
    \    if (intersectionLength == 2) {\n            return \"YES\";\n        }\n\
    \        long startLength = interval1.getLeft().longValue() - interval2.getLeft().longValue();\n\
    \        long endLength = interval1.getRight().longValue() - interval2.getRight().longValue();\n\
    \        if (startLength == 2 && endLength == 2) {\n            return \"YES\"\
    ;\n        }\n        if (startLength == 2 && endLength > 2) {\n            return\
    \ \"NO\";\n        }\n        if (startLength > 2 && endLength == 2) {\n     \
    \       return \"NO\";\n        }\n        long length = intersectionLength;\n\
    \        long lastOne = length / 2;\n        while(true) {\n            if (length\
    \ % 2 == 0) {\n                if (length / 2 == lastOne) {\n                \
    \    length = lastOne + 1;\n                    break;\n                }\n  \
    \              else {\n                    length = lastOne + 1;\n           \
    \         break;\n                }\n            }\n            else {\n     \
    \           if (length / 2 == lastOne) {\n                    length = lastOne\
    \ - 1;\n                    break;\n                }\n                else {\n\
    \                    length = lastOne - 1;\n                    break;\n     \
    \           }\n            }\n        }\n        if (length == 1) {\n        \
    \    return \"NO\";\n        }\n        return \"YES\";", "        // Write your\
    \ code here\n        if (interval1.getFirst() > interval2.getFirst()) return \"\
    NO\";\n        else if (interval1.getFirst() < interval2.getFirst()) return \"\
    YES\";\n        if (interval1.getSecond() > interval2.getSecond()) return \"NO\"\
    ;\n        else if (interval1.getSecond() < interval2.getSecond()) return \"YES\"\
    ;\n        \n        long int1Start = interval1.getFirst();\n        long int1End\
    \ = interval1.getSecond();\n        long int2Start = interval2.getFirst();\n \
    \       long int2End = interval2.getSecond();\n        if (int2Start < int1End\
    \ && int2End < int1Start) return \"NO\";\n        if ((int2Start <= int1Start)\
    \ && (int2End >= int1End)) return \"NO\";\n        \n        long intersectionStart\
    \ = Math.min(interval1.getFirst(), interval2.getFirst());\n        long intersectionEnd\
    \ = Math.max(interval1.getSecond(), interval2.getSecond());\n        long length\
    \ = (int2Start - int1Start) * (int1End - int2End);\n        if ((length == 1)\
    \ || (length == 2)) {\n            if (length == 2 && (int1Start <= int2Start\
    \ && int1End >= int2End)) return \"YES\";\n            return \"NO\";\n      \
    \  }\n        boolean isPrime = true;\n        if (length == 3 && int1Start %\
    \ 3 != 0 && int1End % 3 != 0 && int2Start % 3 != 0 && int2End % 3 != 0) {\n  \
    \          if (int1Start % 3 == 0 && int1End % 3 == 0 && int2Start % 3 == 0 &&\
    \ int2End % 3 == 0) {\n                return \"YES\";\n            }\n      \
    \  }\n        if (length == 4 && int1Start % 2 != 0 && int1End % 2 != 0 && int2Start\
    \ % 2 != 0 && int2End % 2 != 0) {\n            if (int1Start % 2 == 0 && int1End\
    \ % 2 == 0 && int2Start % 2 == 0 && int2End % 2 == 0) {\n                return\
    \ \"YES\";\n            }\n        }\n        for (int i = 8; i <= Math.sqrt(length);\
    \ i++) {\n            if (length%i == 0) {\n                isPrime = false;\n\
    \                if (int1Start % i == 0 && int1End % i == 0 && int2Start % i ==\
    \ 0 && int2End % i == 0) {\n                    return \"YES\";\n            \
    \    }\n            }\n        }\n        if (!isPrime) {\n            return\
    \ \"NO\";\n        }\n        return \"YES\";", "        if (interval1.compareTo(interval2)\
    \ <= 0) {\n            return \"NO\";\n        }\n        if (interval1.compareTo(interval2)\
    \ >= 0) {\n            return \"NO\";\n        }\n        long start1 = interval1.getLeft();\n\
    \        long end1 = interval1.getRight();\n        long start2 = interval2.getLeft();\n\
    \        long end2 = interval2.getRight();\n        if (start1 == start2 && end1\
    \ == end2) {\n            return interval1.getLeft() + \"\\t\" + interval1.getRight()\
    \ + \"\\t\" + interval2.getLeft() + \"\\t\" + interval2.getRight();\n        }\n\
    \        long intersection = start1 + end2 - start2 - end1;\n        if (intersection\
    \ == 1) {\n            return interval1.getLeft() + \"\\t\" + interval1.getRight()\
    \ + \"\\t\" + interval2.getLeft() + \"\\t\" + interval2.getRight();\n        }\n\
    \        if (intersection == 2) {\n            long x1 = interval1.getLeft();\n\
    \            long x2 = interval2.getLeft();\n            if (x1 < x2) {\n    \
    \            return \"NO\";\n            }\n            if (x1 > x2) {\n     \
    \           return \"NO\";\n            }\n        }\n        if (intersection\
    \ == 3) {\n            long x1 = interval1.getLeft();\n            long x2 = interval2.getLeft();\n\
    \            if (x1 < x2) {\n                return \"NO\";\n            }\n \
    \           if (x1 > x2) {\n                return \"NO\";\n            }\n  \
    \      }\n        return \"NO\";", "        if (interval1.equals(interval2)) {\n\
    \            return \"YES\";\n        }\n        if (interval1.end < interval2.start)\
    \ {\n            Pair<Long, Long> temp = new Pair<>(interval2.start, interval1.end);\n\
    \            return intersection(temp, interval2);\n        }\n        if (interval1.start\
    \ > interval2.end) {\n            Pair<Long, Long> temp = new Pair<>(interval1.start,\
    \ interval2.end);\n            return intersection(temp, interval1);\n       \
    \ }\n        Pair<Long, Long> temp = findIntersection(interval1, interval2);\n\
    \        if (temp.left != null && temp.right != null) {\n            if (temp.left.length\
    \ == 1 && temp.right.length == 1) {\n                return \"YES\";\n       \
    \     } else {\n                return \"NO\";\n            }\n        } else\
    \ if (temp.left != null) {\n            return \"NO\";\n        } else if (temp.right\
    \ != null) {\n            return \"NO\";\n        }\n        return \"NO\";",
  "        Interval interval = new Interval(interval1, interval2);\n        String\
    \ result = \"\";\n        if (interval.isEmpty()) {\n            return result;\n\
    \        }\n        // check whether the intersection contains 1\n        boolean\
    \ is1 = interval1.getFirst() <= interval1.getSecond();\n        // check whether\
    \ the intersection contains 2\n        boolean is2 = interval2.getFirst() <= interval2.getSecond();\n\
    \        if (is1 && is2) {\n            Interval interval3 = new Interval(interval1,\
    \ interval2);\n            if (interval3.isPrime()) {\n                result\
    \ = \"YES\";\n            } else {\n                result = \"NO\";\n       \
    \     }\n            return result;\n        }\n        // check whether the intersection\
    \ contains 1\n        boolean is3 = interval1.getFirst() > interval1.getSecond();\n\
    \        // check whether the intersection contains 2\n        boolean is4 = interval2.getFirst()\
    \ > interval2.getSecond();\n        if (is3 && is4) {\n            Interval interval5\
    \ = new Interval(interval1, interval2);\n            if (interval5.isPrime())\
    \ {\n                result = \"YES\";\n            } else {\n               \
    \ result = \"NO\";\n            }\n            return result;\n        }\n   \
    \     Interval interval6 = new Interval(interval1, interval2);\n        if (interval6.isPrime())\
    \ {\n            result = \"YES\";\n        } else {\n            result = \"\
    NO\";\n        }\n        return result;", "        Set<Long> set = new HashSet<>();\n\
    \        long start = interval1.getLeft();\n        long end = interval1.getRight();\n\
    \        while(start < end) {\n            set.add(start);\n            start\
    \ = start + 1;\n        }\n        set.remove(interval2.getLeft());\n        while(end\
    \ > interval2.getRight()) {\n            set.add(end);\n            end = end\
    \ - 1;\n        }\n        if(set.size() == 1)\n            return \"NO\";\n \
    \       PrimeLong primeLong = PrimeLong.of(interval1.getRight() - interval1.getLeft());\n\
    \        long start2 = interval2.getLeft();\n        long end2 = interval2.getRight();\n\
    \        while(start2 < end2) {\n            primeLong = primeLong.multiply(PrimeLong.of(start2));\n\
    \            start2 = start2 + 1;\n        }\n        primeLong = primeLong.multiply(PrimeLong.of(end2));\n\
    \        long result = primeLong.bitLength();\n        for(int i = 0; i < result.bitLength();\
    \ i++) {\n            if(result.testBit(i) == 0) {\n                return \"\
    NO\";\n            }\n        }\n        return \"YES\";", "        // write your\
    \ code in Java 7\n        long start = interval1.first;\n        long end = interval1.second;\n\
    \        long start2 = interval2.first;\n        long end2 = interval2.second;\n\
    \n        if (start >= end2) {\n            if (end >= start2) {\n           \
    \     return \"NO\";\n            } else {\n                return \"YES\";\n\
    \            }\n        } else {\n            if (end >= start2) {\n         \
    \       if (start2 < end) {\n                    return \"YES\";\n           \
    \     } else {\n                    return \"NO\";\n                }\n      \
    \      } else {\n                return \"NO\";\n            }\n        }", " \
    \       Interval interval = new Interval(interval1.getValue(), interval2.getValue());\n\
    \        Interval intervalCopy = interval;\n        boolean isIntersect = false;\n\
    \        Interval temp = intervalCopy;\n        if (interval1.getValue() < interval2.getValue())\
    \ {\n            if (interval1.getValue() == interval2.getValue()) {\n       \
    \         isIntersect = true;\n            }\n            else if (interval1.getValue()\
    \ <= temp.getRight()) {\n                isIntersect = true;\n            }\n\
    \            else {\n                if (temp.getLeft() <= interval2.getValue())\
    \ {\n                    isIntersect = true;\n                }\n            }\n\
    \        }\n        else if (interval1.getValue() >= interval2.getValue()) {\n\
    \            if (interval1.getValue() == interval2.getValue()) {\n           \
    \     isIntersect = true;\n            }\n            else if (interval1.getValue()\
    \ >= temp.getLeft()) {\n                isIntersect = true;\n            }\n \
    \           else {\n                if (temp.getRight() >= interval2.getValue())\
    \ {\n                    isIntersect = true;\n                }\n            }\n\
    \        }\n        if (isIntersect) {\n            if (interval1.getLeft() >\
    \ interval2.getRight()) {\n                temp = intervalCopy;\n            \
    \    intervalCopy = interval;\n                interval = temp;\n            \
    \    temp = intervalCopy;\n            }\n            isIntersect = false;\n \
    \           int leftLength = 0;\n            int rightLength = 0;\n          \
    \  while (intervalCopy.getLeft() > interval.getRight()) {\n                intervalCopy\
    \ = intervalCopy.getLeft();\n                leftLength++;\n            }\n  \
    \          while (intervalCopy.getRight() < interval.getLeft()) {\n          \
    \      intervalCopy = intervalCopy.getRight();\n                rightLength++;\n\
    \            }\n            if (intervalCopy.getLeft() == interval.getLeft() &&\
    \ intervalCopy.getRight() == interval.getRight()) {\n                isIntersect\
    \ = true;\n            }\n            if (intervalCopy.getLeft() > interval.getLeft())\
    \ {\n                while (intervalCopy.getLeft() < interval.getLeft()) {\n \
    \                   intervalCopy = intervalCopy.getRight();\n                \
    \    leftLength--;\n                }\n                while (intervalCopy.getRight()\
    \ > interval.getRight()) {\n                    intervalCopy = intervalCopy.getLeft();\n\
    \                    rightLength--;\n                }\n            }\n      \
    \      if (intervalCopy.getRight() > interval.getRight()) {\n                while\
    \ (intervalCopy.getRight() < interval.getRight()) {\n                    intervalCopy\
    \ = intervalCopy.getLeft();\n                    leftLength--;\n             \
    \   }\n                while (intervalCopy.getLeft() > interval.getLeft()) {\n\
    \                    intervalCopy = intervalCopy.getRight();\n               \
    \     rightLength--;\n                }\n            }\n            if (leftLength\
    \ % 2 == 0) {\n", "        long start = interval1.getLeft();\n        long end\
    \ = interval1.getRight();\n        long start = interval2.getLeft();\n       \
    \ long end = interval2.getRight();\n\n        long leftIntersection = start;\n\
    \        long rightIntersection = end;\n        long intersectionLength = end\
    \ - start;\n        long isPrime = checkIfPrime(intersectionLength);\n\n     \
    \   if (isPrime == true) {\n            return \"YES\";\n        }\n        if\
    \ (leftIntersection < rightIntersection) {\n            leftIntersection = start;\n\
    \            rightIntersection = end;\n            intersectionLength = end -\
    \ start;\n            isPrime = checkIfPrime(intersectionLength);\n        }\n\
    \        if (isPrime == true) {\n            return \"YES\";\n        }\n    \
    \    return \"NO\";", "        long start1 = interval1.getLeft();\n        long\
    \ end1 = interval1.getRight();\n        long start2 = interval2.getLeft();\n \
    \       long end2 = interval2.getRight();\n        long length = (end1 - start1)\
    \ + (end2 - start2);\n        if (length < 0)\n            return null;\n    \
    \    int prime = 1;\n        while (length / prime != 1) {\n            length++;\n\
    \            prime++;\n        }\n        if (length == 1)\n            return\
    \ \"YES\";\n        long startPrime = start1;\n        while (startPrime < end1\
    \ && startPrime < end2) {\n            startPrime++;\n        }\n        long\
    \ endPrime = start2;\n        while (endPrime < end1 && endPrime < end2) {\n \
    \           endPrime++;\n        }\n        if (endPrime > startPrime)\n     \
    \       return \"NO\";\n        return null;", "        long a = interval1.getValue(),\
    \ b = interval2.getValue();\n        if( a>=b ) return \"NO\";\n        if( a==b\
    \ ) return \"YES\";\n        if( a<b && b<0 ) return \"NO\";\n        List<Pair<Long,\
    \ Long>> a2 = Arrays.asList( new Pair<>(a, b) ), b2 = Arrays.asList( new Pair<>(b,\
    \ b) );\n        Stream<Pair<Long, Long>> aStream = a2.stream(), bStream = b2.stream();\n\
    \        if( aStream.get().compareTo(bStream.get())==1 ) return \"YES\";\n   \
    \     if( aStream.get().compareTo(bStream.get())==-1 ) return \"NO\";\n      \
    \  ArrayList<Pair<Long, Long>> intersection = new ArrayList<>();\n        while(\
    \ aStream.anyMatch(x -> bStream.anyMatch(y -> x.compareTo(y)==1)) ) {\n      \
    \      int a = aStream.get().compareTo(bStream.get()), b = aStream.get().compareTo(bStream.get());\n\
    \            if( a==1 ) {\n                intersection.add(new Pair<>(bStream.get(),\
    \ aStream.get()));\n            }\n            if( a==-1 ) {\n               \
    \ intersection.add(new Pair<>(aStream.get(), bStream.get()));\n            }\n\
    \            if( a==0 ) {\n                intersection.add(new Pair<>(aStream.get(),\
    \ bStream.get()));\n            }\n            aStream = aStream.filter(x -> aStream.get().compareTo(y)==1);\n\
    \            bStream = bStream.filter(x -> bStream.get().compareTo(y)==1);\n \
    \       }\n        if( aStream.get().compareTo(bStream.get())==1 ) return \"YES\"\
    ;\n        if( aStream.get().compareTo(bStream.get())==-1 ) return \"NO\";\n \
    \       Iterator<Pair<Long, Long>> i1 = aStream.iterator(), i2 = bStream.iterator();\n\
    \        while( i1.hasNext() && i2.hasNext() ){\n            if( i1.get().compareTo(i2.get())==1\
    \ ) {\n                intersection.add(new Pair<>(i1.get(), i2.get()));\n   \
    \         }\n            if( i1.get().compareTo(i2.get())==-1 ) {\n          \
    \      intersection.add(new Pair<>(i2.get(), i1.get()));\n            }\n    \
    \        if( i1.get().compareTo(i2.get())==0 ) {\n                intersection.add(new\
    \ Pair<>(i1.get(), i2.get()));\n            }\n            i1 = i1.next();\n \
    \           i2 = i2.next();\n        }\n        if( i1.hasNext() && i2.hasNext()\
    \ ){\n            ", "        boolean intersect = interval1.getLeft() <= interval2.getRight()\
    \ || interval1.getRight() >= interval2.getLeft();\n        if (!intersect) {\n\
    \            return \"NO\";\n        } else {\n            int min = Math.min(interval1.getLeft(),\
    \ interval2.getLeft());\n            int max = Math.max(interval1.getRight(),\
    \ interval2.getRight());\n            int l1 = min - interval1.getLeft();\n  \
    \          int l2 = max - interval1.getRight();\n            int r1 = min - interval2.getLeft();\n\
    \            int r2 = max - interval2.getRight();\n            int length = Math.abs(l1)\
    \ + Math.abs(l2) + Math.abs(r1) + Math.abs(r2);\n            int j = 0;\n    \
    \        boolean isPrime = true;\n            while (j < length) {\n         \
    \       int k = length - j;\n                int div = k;\n                if\
    \ (isPrime == true) {\n                    while (div > 0) {\n               \
    \         if (j + div > length) {\n                            isPrime = false;\n\
    \                            return \"NO\";\n                        }\n     \
    \                   if (l1 % j == 0) {\n                            div -= j;\n\
    \                            break;\n                        }\n             \
    \           ++div;\n                    }\n                    while (div > 0)\
    \ {\n                        if (r1 % j == 0) {\n                            div\
    \ -= j;\n                            break;\n                        }\n     \
    \                   ++div;\n                    }\n                    while (div\
    \ > 0) {\n                        if (j % l2 == 0) {\n                       \
    \     div -= l2;\n                            break;\n                       \
    \ }\n                        ++div;\n                    }\n                 \
    \   while (div > 0) {\n                        if (r1 % l2 == 0) {\n         \
    \                   div -= l2;\n                            break;\n         \
    \               }\n                        ++div;\n                    }\n   \
    \                 while (div > 0) {\n                        if (l2 % j == 0)\
    \ {\n                            div -= j;\n                            break;\n\
    \                        }\n                        ++div;\n                 \
    \   }\n                    while (div > 0) {\n                        if (r2 %\
    \ j == 0) {\n                            div -= j;\n                         \
    \   break;\n                        }\n                        ++div;\n      \
    \              }\n                    if (isPrime == true) {\n               \
    \         break;\n                    }\n                }\n                j\
    \ += 1;\n            }\n            if (isPrime == true) {\n                return\
    \ \"YES\";\n            } else {\n                return \"NO\";\n           \
    \ }\n        }", "        // First, find the intersection point\n        long\
    \ inter = interval1.getFirst() <= interval2.getFirst() \n            ? interval1.getFirst()\
    \ : interval2.getFirst();\n        if (interval1.getFirst() < interval2.getFirst())\
    \ {\n            inter = interval1.getFirst();\n        }\n\n        // Intersect\
    \ both intervals\n        long intersection = interval1.getFirst() <= interval2.getFirst()\
    \ \n            ? interval1.getSecond() : interval2.getSecond();\n        if (interval1.getFirst()\
    \ < interval2.getFirst()) {\n            intersection = interval1.getSecond();\n\
    \        }\n\n        // Determine the intersection length\n        long intersectionLength\
    \ = interval1.getFirst() - inter;\n        if (interval1.getSecond() - inter >\
    \ 0) {\n            intersectionLength += interval2.getSecond() - inter;\n   \
    \     }\n\n        // Calculate the length of intersection\n        long length\
    \ = interval1.getFirst() <= interval2.getFirst() \n            ? interval1.getSecond()\
    \ - inter : interval2.getSecond() - inter;\n        if (interval1.getSecond()\
    \ - inter > 0) {\n            length += interval2.getSecond() - inter;\n     \
    \   }\n\n        // Calculate the length\n        long sum = length / intersectionLength;\n\
    \        if (sum % 2 != 0) {\n            return \"NO\";\n        } else {\n \
    \           return \"YES\";\n        }", "        long start = Math.max(interval1.getLeft(),\
    \ interval2.getLeft());\n        long end = Math.min(interval1.getRight(), interval2.getRight());\n\
    \        long intersectionLen = end - start;\n        boolean prime = false;\n\
    \        if (prime) \n            return \"NO\"; \n        else if (intersectionLen\
    \ <= 1) \n            return \"NO\";\n        else {\n            String ret =\
    \ \"\";\n            for (int i = 2; i <= intersectionLen; i+=2) {\n         \
    \       if (i*i == intersectionLen) {\n                    prime = true;\n   \
    \                 break;\n                }\n            }\n            if (prime)\
    \ {\n                return \"YES\";\n            } else {\n                return\
    \ \"NO\";\n            }\n        }", "        if (interval1.left > interval2.right)\
    \ {\n            return intersection(interval2, interval1);\n        }\n     \
    \   if (interval1.right < interval2.left) {\n            return intersection(interval1,\
    \ interval2);\n        }\n        long length1 = interval1.left - interval1.right;\n\
    \        long length2 = interval2.right - interval2.left;\n        if (length1\
    \ > length2) {\n            return intersection(interval1, interval2);\n     \
    \   }\n        if (length1 < length2) {\n            return intersection(interval2,\
    \ interval1);\n        }\n        long interA = interval1.left + (interval1.right\
    \ - interval1.left) / 2;\n        long interB = interval2.left + (interval2.right\
    \ - interval2.left) / 2;\n        long inter = interA + interB;\n        if (interA\
    \ == interB) {\n            return \"YES\";\n        }\n        if (inter % 2\
    \ == 0) {\n            return intersection(interval1, interval2);\n        }\n\
    \        return \"NO\";", "        if (interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"NO\"\
    ;\n        }\n        if (interval1.getLeft() > interval2.getRight()) {\n    \
    \        Pair<Long, Long> temp = interval1;\n            interval1 = interval2;\n\
    \            interval2 = temp;\n        }\n        long start1 = interval1.getLeft();\n\
    \        long end1 = interval1.getRight();\n        long start2 = interval2.getLeft();\n\
    \        long end2 = interval2.getRight();\n\n        long startIntersection =\
    \ start1 < start2 ? start1 : start2;\n        long endIntersection = end1 < end2\
    \ ? end1 : end2;\n        if (endIntersection == startIntersection) {\n      \
    \      if (endIntersection == start1) {\n                return \"NO\";\n    \
    \        }\n            if (endIntersection == start2) {\n                return\
    \ \"NO\";\n            }\n        }\n        long lengthIntersection = startIntersection\
    \ < endIntersection ? endIntersection - startIntersection : startIntersection\
    \ - endIntersection;\n        if (lengthIntersection == start1 || lengthIntersection\
    \ == start2) {\n            return \"NO\";\n        }\n        long length1 =\
    \ end1 - start1;\n        long length2 = end2 - start2;\n        if (length1 >\
    \ length2) {\n            length1 = length2;\n        }\n        boolean isPrime\
    \ = true;\n        for (long i = 2; i < length1; i++) {\n            if (i % length1\
    \ != 0) {\n                isPrime = false;\n                break;\n        \
    \    }\n        }\n        if (isPrime) {\n            return \"YES\";\n     \
    \   } else {\n            return \"NO\";\n        }", "        final long start\
    \ = Math.min(interval1.first, interval2.first);\n        final long end = Math.max(interval1.second,\
    \ interval2.second);\n        long length = end - start;\n        final long center\
    \ = start + length / 2;\n        long leftIntervalLeftHalfLength = interval1.second\
    \ - center;\n        long leftIntervalRightHalfLength = end - center;\n      \
    \  long rightIntervalLeftHalfLength = end - interval1.first;\n        long rightIntervalRightHalfLength\
    \ = interval2.second - interval2.first;\n\n        if (leftIntervalLeftHalfLength\
    \ <= rightIntervalLeftHalfLength) {\n            if (leftIntervalLeftHalfLength\
    \ == rightIntervalLeftHalfLength && leftIntervalRightHalfLength == rightIntervalRightHalfLength)\
    \ {\n                return \"NO\";\n            } else if (leftIntervalLeftHalfLength\
    \ > rightIntervalLeftHalfLength) {\n                return \"YES\";\n        \
    \    }\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }", "        long length1 = interval1.getLeft() + interval1.getRight();\n\
    \        long length2 = interval2.getLeft() + interval2.getRight();\n        long\
    \ intersectionLength = length1 - length2;\n        if (intersectionLength == 0\
    \ || intersectionLength > length1 - length2)\n            return \"NO\";\n   \
    \     long product = length1 * length2;\n        long prime = product % length2;\n\
    \        if (product != 0 && prime != 0)\n            return \"YES\";\n      \
    \  return \"NO\";", "        long intersectionLength = interval1.getLeft()*interval1.getRight()\n\
    \                + interval2.getLeft()*interval2.getRight();\n        if (intersectionLength\
    \ < Math.sqrt(intersectionLength)){\n            return \"NO\";\n        }\n \
    \       if (interval1.getLeft() > interval1.getRight() && interval2.getLeft()\
    \ > interval2.getRight()) {\n            return \"YES\";\n        }\n        BigInteger\
    \ one = BigInteger.ONE;\n        BigInteger two = BigInteger.valueOf(2);\n   \
    \     BigInteger third = one.multiply(two).add(two.multiply(two));\n        BigInteger\
    \ ninetyFour = one.multiply(two).multiply(two).multiply(two);\n        BigInteger\
    \ four = two.multiply(two);\n        BigInteger ninetyEight = one.multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two);\n\
    \        BigInteger eight = two.multiply(two).multiply(two);\n        BigInteger\
    \ ninetySixteen = one.multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two);\n\
    \        BigInteger sixteen = two.multiply(two).multiply(two).multiply(two);\n\
    \        BigInteger ninetyFourteen = one.multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two);\n\
    \        BigInteger fourteen = two.multiply(two).multiply(two).multiply(two);\n\
    \        BigInteger ninetyThree = one.multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two);\n\
    \        BigInteger three = two.multiply(two).multiply(two).multiply(two);\n \
    \       BigInteger ninetyOne = one.multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two);\n\
    \        BigInteger one = two.multiply(two).multiply(two).multiply(two).multiply(two).multiply(two);\n\
    \        BigInteger two = two.multiply(two);\n        BigInteger ninetyFour =\
    \ one.multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two).multiply(two);\n\
    \        BigInteger four = two.multiply(two).multiply(two", "        if (interval1.getLeft()\
    \ == interval2.getLeft()) {\n            return \"NO\";\n        } else if (interval1.getLeft()\
    \ < interval2.getLeft()) {\n            interval1 = Pair.with(interval1.getLeft()\
    \ + 1, interval1.getRight());\n        } else {\n            interval2 = Pair.with(interval2.getLeft()\
    \ + 1, interval2.getRight());\n        }\n        Set<Pair<Long, Long>> intervals\
    \ = new HashSet<>();\n        intervals.add(interval1);\n        intervals.add(interval2);\n\
    \        long intersection = 0;\n        for (Pair<Long, Long> interval : intervals)\
    \ {\n            intersection = intersection + interval.getLeft() * interval.getRight();\n\
    \        }\n        if (intersection % 2 == 0 && intersection != 0) {\n      \
    \      return \"YES\";\n        } else {\n            return \"NO\";\n       \
    \ }", "        long result = 0;\n        if (interval1.getLeft() <= interval2.getLeft())\
    \ {\n            result = interval1.getLeft() <= interval2.getRight() ? interval1.getLeft()\
    \ :\n                    interval1.getRight();\n        } else {\n           \
    \ result = interval1.getRight() <= interval2.getLeft() ? interval1.getRight()\
    \ :\n                    interval1.getLeft();\n        }\n        if (result ==\
    \ interval1.getLeft() + interval1.getRight()) {\n            return \"NO\";\n\
    \        }\n        if (result == interval2.getLeft() + interval2.getRight())\
    \ {\n            return \"NO\";\n        }\n        long a = interval1.getLeft()\
    \ > interval1.getRight() ? interval1.getLeft() :\n                interval1.getRight();\n\
    \        long b = interval2.getLeft() > interval2.getRight() ? interval2.getLeft()\
    \ :\n                interval2.getRight();\n        long c = interval1.getLeft()\
    \ < interval1.getRight() ? interval1.getLeft() :\n                interval1.getRight();\n\
    \        long d = interval2.getLeft() < interval2.getRight() ? interval2.getLeft()\
    \ :\n                interval2.getRight();\n        if ((a + b) == c && d == d)\
    \ {\n            return \"NO\";\n        }\n        if ((a + b) == d && c == d)\
    \ {\n            return \"NO\";\n        }\n        if ((b + c) == d && a == d)\
    \ {\n            return \"NO\";\n        }\n        if ((b + c) == c && a == c)\
    \ {\n            return \"NO\";\n        }\n        if ((c + d) == a && b == a)\
    \ {\n            return \"NO\";\n        }\n        if ((c + d) == b && a == b)\
    \ {\n            return \"NO\";\n        }\n        if ((d + c) == a && b == a)\
    \ {\n            return \"NO\";\n        }\n        if ((d + c) == b && a == b)\
    \ {\n            return \"NO\";\n        }\n        if ((a + b) == c && d == c)\
    \ {\n            return \"NO\";\n        }\n        if ((a + b) == d && c == d)\
    \ {\n            return \"NO\";\n        }\n        if ((b + c) == d && a == d)\
    \ {\n            return \"NO\";\n        }\n        if ((b + c) == c && a == c)\
    \ {\n            return \"NO\";\n        }\n        if ((c + d) == a && b == a)\
    \ {\n            return \"NO\";\n        }\n        if ((c + d) == b && a == b)\
    \ {\n            return \"NO\";\n        }\n        if ((d + c) == a && b == a)\
    \ {\n            return \"NO\";\n        }\n        if ((d + c) == b && a == b)\
    \ {\n            return \"NO\";\n        }\n        return \"YES", "        if\
    \ (interval1.equals(interval2)) {\n            return \"NO\";\n        }\n   \
    \     long s1 = interval1.getFirst();\n        long s2 = interval2.getFirst();\n\
    \        long e1 = interval1.getSecond();\n        long e2 = interval2.getSecond();\n\
    \        long intersection = e1 < e2 ? s1 : s2;\n        long ei1 = e1 <= intersection\
    \ ? e1 : (intersection - e1);\n        long ei2 = e2 <= intersection ? e2 : (intersection\
    \ - e2);\n        boolean isPrime = ei1 == ei2;\n        if (isPrime) {\n    \
    \        return \"YES\";\n        } else {\n            return \"NO\";\n     \
    \   }", "        final long start1 = interval1.getLeft();\n        final long\
    \ end1 = interval1.getRight();\n        final long start2 = interval2.getLeft();\n\
    \        final long end2 = interval2.getRight();\n\n        if (start1 < end2\
    \ && start2 < end1) {\n            final long intersection = start1 * end2 - start2\
    \ * end1;\n            if (intersection < -1l || intersection > 1l) {\n      \
    \          return \"NO\";\n            }\n            for (long i = 2l; i <= intersection;\
    \ ++i) {\n                if (i * i > intersection) {\n                    break;\n\
    \                }\n                if (Math.sqrt(i) % 1 == 0) {\n           \
    \         return \"NO\";\n                }\n            }\n            return\
    \ \"YES\";\n        }\n        return \"NO\";", "        if (interval1.getFirst()\
    \ > interval1.getSecond())\n            return intersection(interval2, interval1);\n\
    \        if (interval2.getFirst() > interval2.getSecond())\n            return\
    \ intersection(interval1, interval2);\n        \n        int start = Math.min(interval1.getFirst(),\
    \ interval2.getFirst());\n        int end = Math.max(interval1.getSecond(), interval2.getSecond());\n\
    \        int sum = (end - start) * (end - start);\n        if (interval1.getSecond()\
    \ == interval1.getFirst() || interval2.getSecond() == interval2.getFirst())\n\
    \            return \"\"; // No intersection\n        if (sum < 1)\n         \
    \   return \"\"; // No intersection\n        if (sum < 4)\n            return\
    \ \"\"; // No intersection\n        \n        long start = Math.min(interval1.getFirst(),\
    \ interval2.getFirst());\n        long end = Math.max(interval1.getSecond(), interval2.getSecond());\n\
    \        long sum = (end - start) * (end - start);\n        \n        if (interval1.getSecond()\
    \ == interval1.getFirst() || interval2.getSecond() == interval2.getFirst())\n\
    \            return \"\"; // No intersection\n        \n        long div = 1;\n\
    \        for (int i = 0; i < sum / 2; i++) {\n            div *= 2;\n        }\n\
    \        int j = 0;\n        while (start < end) {\n            if (sum % div\
    \ == 0) // if there is no remainder, sum is prime\n                return \"YES\"\
    ;\n            j++;\n            start += start;\n            sum -= j;\n    \
    \        div = 2 * j;\n        }\n        return \"NO\";", "        long start\
    \ = interval1.getLeft();\n        long end = interval2.getRight();\n        Pair<Long,\
    \ Long> pair = Pair.with((end - start), (end + start));\n        if (interval1.getLeft()\
    \ < interval2.getLeft()) {\n            pair = Pair.with((start - end), (start\
    \ + end));\n        }\n        if (pair.getLeft() == pair.getRight()) {\n    \
    \        return \"NO\";\n        }\n        if (PrimeNumbers.isPrime(pair.getRight()\
    \ - pair.getLeft())) {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";", "        // Write your code here\n        long inter = interval1.getValue().max(interval2.getValue());\n\
    \        if (inter <= interval1.getValue().min(interval2.getValue())) {\n    \
    \        return \"NO\";\n        } else {\n            return \"YES\";\n     \
    \   }", "        Interval interval3 = new Interval(interval1.start, interval1.end,\
    \ interval2.start, interval2.end);\n        if(interval1.start <= interval1.end\
    \ && interval2.start <= interval2.end && interval1.end <= interval2.start && interval3.size()\
    \ > 0) {\n            int start1 = interval1.start;\n            int end1 = interval1.end;\n\
    \            int start2 = interval2.start;\n            int end2 = interval2.end;\n\
    \            int start3 = interval3.start;\n            int end3 = interval3.end;\n\
    \            int start = Math.min(start1, start2);\n            int end = Math.max(end1,\
    \ end2);\n            int flag1 = (start2 < end3) ? 1 : 0;\n            int flag2\
    \ = (start1 < end3) ? 1 : 0;\n            int flag3 = (start2 < end3) ? 1 : 0;\n\
    \            int flag4 = (start1 < end3) ? 1 : 0;\n            int flag5 = (start2\
    \ < end3) ? 1 : 0;\n            int flag6 = (start1 < end3) ? 1 : 0;\n       \
    \     int flag7 = (start2 < end3) ? 1 : 0;\n            int flag8 = (start1 <\
    \ end3) ? 1 : 0;\n            int flag9 = (start2 < end3) ? 1 : 0;\n         \
    \   int flag10 = (start1 < end3) ? 1 : 0;\n            int flag11 = (start2 <\
    \ end3) ? 1 : 0;\n            int flag12 = (start1 < end3) ? 1 : 0;\n        \
    \    int flag13 = (start2 < end3) ? 1 : 0;\n            int flag14 = (start1 <\
    \ end3) ? 1 : 0;\n            int flag15 = (start2 < end3) ? 1 : 0;\n        \
    \    int flag16 = (start1 < end3) ? 1 : 0;\n            int flag17 = (start2 <\
    \ end3) ? 1 : 0;\n            int flag18 = (start1 < end3) ? 1 : 0;\n        \
    \    int flag19 = (start2 < end3) ? 1 : 0;\n            int flag20 = (start1 <\
    \ end3) ? 1 : 0;\n            int flag21 = (start2 < end3) ? 1 : 0;\n        \
    \    int flag22 = (start1 < end3) ? 1 : 0;\n            int flag23 = (start2 <\
    \ end3) ? 1 : 0;\n            int flag24 = (start1 < end3) ? 1 : 0;\n        \
    \    int flag25 = (start2 < end3) ? 1 : 0;\n            int flag26 = (start1 <\
    \ end3) ? 1 : 0;\n            int flag27 = (start2 < end3) ? 1 : 0;\n        \
    \    int flag28 = (start1 < end3) ? 1 : 0;\n            int flag29 = (start2 <\
    \ end3) ? 1 : 0;\n            int flag30 = (start1 < end3) ? 1 : 0;\n        \
    \    int flag31 = (start2 < end3) ? 1 : 0;\n            int flag32 = (start1 <\
    \ end3) ? 1 : 0;\n            int flag33 = (start2 < end", "        final long\
    \ start = Math.min(interval1.getValue(), interval2.getValue());\n        final\
    \ long end = Math.max(interval1.getValue(), interval2.getValue());\n        final\
    \ long length = end - start;\n        final long length = interval1.getValue()\
    \ - interval2.getValue();\n        final long length = interval1.getValue() +\
    \ interval2.getValue();\n\n        if (length == 2 && length % 2 == 0) {\n   \
    \         return \"YES\";\n        } else if (length > 2) {\n            return\
    \ \"NO\";\n        } else {\n            return \"NO\";\n        }\n", "     \
    \   boolean flag = interval1.getRight().compareTo(interval2.getLeft()) <= 0 &&\
    \ interval1.getLeft().compareTo(interval2.getRight()) >= 0;\n        long a =\
    \ interval1.getRight().longValue();\n        long b = interval2.getLeft().longValue();\n\
    \        long d = interval1.getLeft().longValue();\n        long c = interval2.getRight().longValue();\n\
    \        if (a == b == c) return flag ? \"YES\" : \"NO\";\n        long p1 = (long)Math.min(a,\
    \ b);\n        long p2 = (long)Math.max(a, b);\n        long q1 = (long)Math.min(c,\
    \ d);\n        long q2 = (long)Math.max(c, d);\n        long t1 = (p1 - q1);\n\
    \        long t2 = (p2 - q2);\n        long length = (t1 < t2) ? t1 : t2;\n  \
    \      if (flag) {\n            String result = \"\";\n            if (isPrime(length))\
    \ {\n                result = \"YES\";\n            } else {\n               \
    \ result = \"NO\";\n            }\n            return result;\n        } else\
    \ {\n            String result = \"\";\n            if (isPrime(length)) {\n \
    \               result = \"YES\";\n            } else {\n                result\
    \ = \"NO\";\n            }\n            return result;\n        }", "        Set<Long>\
    \ intervalSet1 = new HashSet<>();\n        Set<Long> intervalSet2 = new HashSet<>();\n\
    \        intervalSet1.add(interval1.getFirst());\n        intervalSet1.add(interval1.getSecond());\n\
    \        intervalSet2.add(interval2.getFirst());\n        intervalSet2.add(interval2.getSecond());\n\
    \        boolean hasIntersection = intervalSet1.containsAll(intervalSet2) && intervalSet2.containsAll(intervalSet1);\n\
    \        return hasIntersection ? \"YES\" : \"NO\";", "        if (interval1.getRight().compareTo(interval1.getLeft())\
    \ >= 0) {\n            if (interval2.getRight().compareTo(interval2.getLeft())\
    \ >= 0) {\n                return \"NO\";\n            } else {\n            \
    \    return \"YES\";\n            }\n        } else {\n            return \"NO\"\
    ;\n        }", "        if (interval1.equals(interval2)) {\n            return\
    \ \"YES\";\n        }\n        if (interval1.getLeft() > interval1.getRight())\
    \ {\n            return \"NO\";\n        }\n        if (interval2.getLeft() >\
    \ interval2.getRight()) {\n            return \"NO\";\n        }\n        BigInteger\
    \ a1 = new BigInteger(interval1.getLeft(), 10);\n        BigInteger a2 = new BigInteger(interval1.getRight(),\
    \ 10);\n        BigInteger b1 = new BigInteger(interval2.getLeft(), 10);\n   \
    \     BigInteger b2 = new BigInteger(interval2.getRight(), 10);\n        BigInteger\
    \ c1 = new BigInteger(interval1.getLeft(), 10);\n        BigInteger c2 = new BigInteger(interval2.getLeft(),\
    \ 10);\n        BigInteger d1 = new BigInteger(interval1.getRight(), 10);\n  \
    \      BigInteger d2 = new BigInteger(interval2.getRight(), 10);\n        BigInteger\
    \ intersect = (BigInteger.ZERO).subtract(a2).subtract(b2);\n        BigInteger\
    \ num1 = BigInteger.ZERO.subtract(c1);\n        BigInteger num2 = BigInteger.ZERO.subtract(c2);\n\
    \        BigInteger intersectNum = (BigInteger.ZERO).subtract(d1).subtract(d2);\n\
    \        BigInteger a = b1.subtract(a1);\n        BigInteger b = b2.subtract(a2);\n\
    \        BigInteger c = c1.subtract(a1);\n        BigInteger d = d2.subtract(a2);\n\
    \        if (intersect.equals(BigInteger.ZERO)) {\n            if (intersectNum.equals(BigInteger.ZERO))\
    \ {\n                return \"NO\";\n            } else {\n                return\
    \ \"YES\";\n            }\n        }\n        BigInteger num3 = BigInteger.ZERO.subtract(intersectNum);\n\
    \        BigInteger num4 = BigInteger.ZERO.subtract(intersect);\n        if (a.equals(BigInteger.ZERO))\
    \ {\n            if (num3.equals(BigInteger.ZERO)) {\n                return \"\
    NO\";\n            }\n        }\n        if (b.equals(BigInteger.ZERO)) {\n  \
    \          if (num4.equals(BigInteger.ZERO)) {\n                return \"NO\"\
    ;\n            }\n        }\n        if (num3.equals(BigInteger.ZERO)) {\n   \
    \         if (num4.equals(BigInteger.ZERO)) {\n                return \"NO\";\n\
    \            }\n        }\n        if (num1.equals(BigInteger.ZERO)) {\n     \
    \       if (num2.equals(BigInteger.ZERO)) {\n                return \"NO\";\n\
    \            }\n        }\n        if (num2.equals(BigInteger.ZERO)) {\n     \
    \       if (num3.equals(BigInteger.ZERO)) {\n                return \"NO\";\n\
    \            }\n        }\n        if (num3.equals(BigInteger.ZERO)) {\n     \
    \       if (num4.equals(BigInteger.ZERO)) {\n                return \"NO\";\n\
    \            }\n        }\n        if (num1.equals(BigInteger.ZERO)) {\n     \
    \       if (num2.equals(BigInteger.ZERO)) {\n", "        String result = \"NO\"\
    ;\n        \n        if (interval1.getValue() < interval2.getValue()) {\n    \
    \        Pair<Long, Long> intersection = findIntersection(interval1, interval2);\n\
    \            if (intersection.getValue() == -1l) {\n                result = \"\
    YES\";\n            }\n        }\n        return result;", "        long s1 =\
    \ interval1.getLeft().longValue();\n        long e1 = interval1.getRight().longValue();\n\
    \        long s2 = interval2.getLeft().longValue();\n        long e2 = interval2.getRight().longValue();\n\
    \        if(s1 <= e2 && e2 <= s2) return \"NO\";\n        if(s1 > e2 || e1 > s2)\
    \ return \"NO\";\n        if(s1 == e1 && e1 == s2) return \"YES\";\n        if(s1\
    \ == s2) return \"YES\";\n        long p1 = ((long)Math.sqrt(Math.pow(s1, 2)));\n\
    \        long p2 = ((long)Math.sqrt(Math.pow(e2, 2)));\n        long s = (p1 *\
    \ p2) - (s1 * s2);\n        if(((p1 * p1 + p2 * p2) == s) && ((s1 * s1 + e2 *\
    \ e2) == s)) return \"YES\";\n        return \"NO\";", "        long min = Math.min(interval1.getLeft(),\
    \ interval2.getLeft());\n        long max = Math.max(interval1.getRight(), interval2.getRight());\n\
    \        long max1 = 0, max2 = 0;\n\n        for (long i = min; i <= max; i++)\
    \ {\n            for (long j = min; j <= max; j++) {\n                if (i ==\
    \ j) {\n                    max1++;\n                } else {\n              \
    \      max2++;\n                }\n            }\n        }\n\n        if (max1\
    \ == max2) {\n            return \"NO\";\n        } else {\n            return\
    \ \"YES\";\n        }", "        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ < 0 || interval1.getFirst().compareTo(interval2.getFirst()) > 0) {\n       \
    \     return \"NO\";\n        }\n        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ == 0 && interval1.getSecond().compareTo(interval2.getSecond()) == 0) {\n   \
    \         return \"NO\";\n        }\n        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ == 0 && interval1.getSecond().compareTo(interval2.getSecond()) < 0) {\n    \
    \        return \"NO\";\n        }\n        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ == 0 && interval1.getSecond().compareTo(interval2.getSecond()) > 0) {\n    \
    \        return \"NO\";\n        }\n        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ == 0 && interval1.getSecond().compareTo(interval2.getSecond()) == 0) {\n   \
    \         return \"NO\";\n        }\n        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ < 0 && interval1.getSecond().compareTo(interval2.getSecond()) < 0) {\n     \
    \       return \"NO\";\n        }\n        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ < 0 && interval1.getSecond().compareTo(interval2.getSecond()) > 0) {\n     \
    \       return \"NO\";\n        }\n        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ < 0 && interval1.getSecond().compareTo(interval2.getSecond()) == 0) {\n    \
    \        return \"NO\";\n        }\n        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ < 0 && interval1.getSecond().compareTo(interval2.getSecond()) < 0) {\n     \
    \       return \"NO\";\n        }\n        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ < 0 && interval1.getSecond().compareTo(interval2.getSecond()) > 0) {\n     \
    \       return \"NO\";\n        }\n        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ == 0 && interval1.getSecond().compareTo(interval2.getSecond()) > 0) {\n    \
    \        return \"NO\";\n        }\n        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ == 0 && interval1.getSecond().compareTo(interval2.getSecond()) < 0) {\n    \
    \        return \"NO\";\n        }\n        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ == 0 && interval1.getSecond().compareTo(interval2.getSecond()) == 0) {\n   \
    \         return \"NO\";\n        }\n        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ < 0 && interval1.getSecond().compareTo(interval2.getSecond()) > 0) {\n     \
    \       return \"NO\";\n        }\n        if (interval1.getFirst().compareTo(interval2.getFirst())\
    \ < 0 && interval1.getSecond().compareTo(interval2.getSecond()) < 0) {\n     \
    \       return \"NO\";\n        }\n        if (interval", "        long start1\
    \ = interval1.getFirst();\n        long end1 = interval1.getSecond();\n      \
    \  long start2 = interval2.getFirst();\n        long end2 = interval2.getSecond();\n\
    \        long length1 = end1 - start1;\n        long length2 = end2 - start2;\n\
    \        if (length1 > length2)\n            return String.format(\"NO\");\n \
    \       if (length1 == length2)\n            return \"YES\";\n        long length\
    \ = length1 > length2 ? length1 : length2;\n        boolean isPrime = true;\n\
    \        List<Long> primes = new ArrayList<>();\n        primes.add(2);\n    \
    \    while (length >= 2) {\n            if (length % 2 == 0 && length != 2) {\n\
    \                isPrime = false;\n                break;\n            }\n   \
    \         length /= 2;\n            primes.add(2);\n        }\n        if (length\
    \ == 2 && isPrime)\n            return \"YES\";\n        return \"NO\";", "  \
    \      long start = Math.min(interval1.getLeft(), interval2.getLeft());\n    \
    \    long end = Math.max(interval1.getRight(), interval2.getRight());\n      \
    \  if (start > end) {\n            long tmp = start;\n            start = end;\n\
    \            end = tmp;\n        }\n        if (interval1.getLeft() == interval2.getLeft())\
    \ {\n            if (interval1.getRight() == interval2.getRight()) {\n       \
    \         long value = Math.min(start, end);\n                if (value % 2 ==\
    \ 0) {\n                    return \"NO\";\n                }\n              \
    \  else {\n                    return \"YES\";\n                }\n          \
    \  }\n            else {\n                return \"NO\";\n            }\n    \
    \    }\n        else if (interval1.getLeft() < interval2.getLeft()) {\n      \
    \      if (interval1.getRight() == interval2.getRight()) {\n                long\
    \ value = Math.min(start, end);\n                if (value % 2 == 0) {\n     \
    \               return \"YES\";\n                }\n                else {\n \
    \                   return \"NO\";\n                }\n            }\n       \
    \     else {\n                return \"NO\";\n            }\n        }\n     \
    \   else if (interval1.getLeft() > interval2.getLeft()) {\n            if (interval1.getRight()\
    \ == interval2.getRight()) {\n                long value = Math.min(start, end);\n\
    \                if (value % 2 == 0) {\n                    return \"NO\";\n \
    \               }\n                else {\n                    return \"YES\"\
    ;\n                }\n            }\n            else {\n                return\
    \ \"NO\";\n            }\n        }", "        long start = Math.min(interval1.first,\
    \ interval2.first);\n        long end = Math.max(interval1.second, interval2.second);\n\
    \        long length = end - start + 1;\n\n        // [your code here]\n     \
    \   boolean isPrime = true;\n        if (length == 1) {\n            isPrime =\
    \ false;\n        } else if (length % 2 == 0) {\n            if (length == 2 ||\
    \ length == 3) {\n                isPrime = true;\n            } else if (length\
    \ == 5) {\n                isPrime = true;\n            } else if (length == 7)\
    \ {\n                isPrime = true;\n            } else if (length == 11) {\n\
    \                isPrime = true;\n            } else if (length == 13) {\n   \
    \             isPrime = true;\n            } else if (length == 17) {\n      \
    \          isPrime = true;\n            } else if (length == 19) {\n         \
    \       isPrime = true;\n            } else if (length == 23) {\n            \
    \    isPrime = true;\n            } else if (length == 29) {\n               \
    \ isPrime = true;\n            } else if (length == 33) {\n                isPrime\
    \ = true;\n            } else if (length == 41) {\n                isPrime = true;\n\
    \            } else if (length == 53) {\n                isPrime = true;\n   \
    \         } else if (length == 71) {\n                isPrime = true;\n      \
    \      } else if (length == 79) {\n                isPrime = true;\n         \
    \   } else if (length == 83) {\n                isPrime = true;\n            }\
    \ else if (length == 91) {\n                isPrime = true;\n            } else\
    \ if (length == 99) {\n                isPrime = true;\n            } else if\
    \ (length == 111) {\n                isPrime = true;\n            } else if (length\
    \ == 127) {\n                isPrime = true;\n            } else if (length ==\
    \ 131) {\n                isPrime = true;\n            } else if (length == 139)\
    \ {\n                isPrime = true;\n            } else if (length == 147) {\n\
    \                isPrime = true;\n            } else if (length == 151) {\n  \
    \              isPrime = true;\n            } else if (length == 159) {\n    \
    \            isPrime = true;\n            } else if (length == 167)\n        \
    \        isPrime = true;\n        }\n        return isPrime ? \"YES\" : \"NO\"\
    ;", "        long[] interval1Array = {interval1.getFirst(), interval1.getSecond()};\n\
    \        long[] interval2Array = {interval2.getFirst(), interval2.getSecond()};\n\
    \n        long[] intersection1Array = new long[2];\n        long[] intersection2Array\
    \ = new long[2];\n        if (interval1Array[0] > interval2Array[0])\n       \
    \ {\n            Arrays.sort(interval1Array);\n            Arrays.sort(interval2Array);\n\
    \        }\n        else\n        {\n            Arrays.sort(interval2Array);\n\
    \            Arrays.sort(interval1Array);\n        }\n        int i = 0;\n   \
    \     int j = 0;\n        while (i < interval1Array.length && j < interval2Array.length)\n\
    \        {\n            if (interval1Array[i] == interval2Array[j])\n        \
    \    {\n                intersection1Array[0] = interval1Array[i];\n         \
    \       intersection1Array[1] = interval1Array[i];\n                intersection2Array[0]\
    \ = interval2Array[j];\n                intersection2Array[1] = interval2Array[j];\n\
    \                i++;\n                j++;\n            }\n            else if\
    \ (interval1Array[i] < interval2Array[j])\n            {\n                i++;\n\
    \            }\n            else\n            {\n                j++;\n      \
    \      }\n        }\n        if (i == interval1Array.length && j == interval2Array.length)\n\
    \        {\n            if (intersection1Array[0] > intersection2Array[0])\n \
    \           {\n                intersection1Array[0] = intersection2Array[0];\n\
    \                intersection1Array[1] = intersection2Array[1];\n            }\n\
    \            else\n            {\n                intersection1Array[0] = intersection2Array[0];\n\
    \                intersection1Array[1] = intersection2Array[1];\n            }\n\
    \            return \"NO\";\n        }\n        \n        if (i == interval1Array.length)\n\
    \        {\n            intersection1Array[0] = intersection2Array[0];\n     \
    \       return \"YES\";\n        }\n        \n        if (j == interval2Array.length)\n\
    \        {\n            intersection2Array[0] = intersection1Array[0];\n     \
    \       return \"YES\";\n        }\n        if (intersection1Array[0] == intersection2Array[0])\n\
    \        {\n            if (intersection1Array[1] >= intersection2Array[1])\n\
    \            {\n                intersection1Array[1] = intersection2Array[1];\n\
    \            }\n            else\n            {\n                intersection1Array[0]\
    \ = intersection2Array[0];\n                intersection1Array[1] = intersection2Array[1];\n\
    \            }\n            return \"YES\";\n        }\n        else\n       \
    \ {\n            if (intersection1Array[0] > intersection2Array[0])\n        \
    \    {\n                intersection1Array[0] = intersection2Array[0];\n     \
    \           intersection1Array[1] = intersection2Array[1];\n            }\n  \
    \          else\n            {\n                intersection1Array[0] = intersection2Array[0];\n\
    \                intersection1Array[1] = intersection2Array[1];\n            }\n\
    \            return \"YES\";", "        List<Pair<Long, Long>> interval = new\
    \ ArrayList<Pair<Long, Long>>();\n        interval.add(interval1);\n        interval.add(interval2);\n\
    \        boolean intersect = false;\n        for (Pair<Long, Long> interval :\
    \ interval) {\n            if (interval1.getStart() < interval2.getStart()) {\n\
    \                if (interval1.getEnd() > interval2.getStart()) {\n          \
    \          intersect = true;\n                    break;\n                }\n\
    \            } else {\n                if (interval1.getStart() > interval2.getStart())\
    \ {\n                    intersect = true;\n                    break;\n     \
    \           }\n            }\n        }\n        return intersect ? \"YES\" :\
    \ \"NO\";", "        long interval1Start = interval1.getKey();\n        long interval1End\
    \ = interval1.getValue();\n        long interval2Start = interval2.getKey();\n\
    \        long interval2End = interval2.getValue();\n        if (interval1Start\
    \ > interval1End) {\n            interval1Start = interval1End;\n        }\n \
    \       if (interval2Start > interval2End) {\n            interval2Start = interval2End;\n\
    \        }\n        if (interval1Start == interval2Start && interval1End == interval2End)\
    \ {\n            return \"NO\";\n        } else if (interval1Start < interval2Start\
    \ && interval1End < interval2End) {\n            return \"NO\";\n        } else\
    \ if (interval1Start == interval2Start || interval1End == interval2End) {\n  \
    \          return \"YES\";\n        }\n        // Intersection is between interval1\
    \ and interval2\n        long intersectionStart = Math.max(interval1Start, interval2Start);\n\
    \        long intersectionEnd = Math.min(interval1End, interval2End);\n      \
    \  long intersectionLength = intersectionEnd - intersectionStart;\n        if\
    \ (intersectionLength < 1) {\n            return \"NO\";\n        }\n        for\
    \ (long i = intersectionStart; i < intersectionEnd; i++) {\n            if (isPrime(i))\
    \ {\n                return \"YES\";\n            }\n        }\n        return\
    \ \"NO\";", "        if (interval1.compareTo(interval2) > 0) {\n            return\
    \ intersection(interval2, interval1);\n        }\n        if (interval2.compareTo(interval1)\
    \ < 0) {\n            return intersection(interval1, interval2);\n        }\n\
    \        Pair<Long, Long> start = interval1;\n        Pair<Long, Long> end = interval2;\n\
    \        if (interval1.compareTo(interval2) < 0) {\n            end = interval2;\n\
    \            start = interval1;\n        }\n        int a = Math.abs(start.getLeft()\
    \ - end.getLeft());\n        int b = Math.abs(start.getRight() - end.getRight());\n\
    \        if (a == 0 || b == 0) {\n            return \"NO\";\n        }\n    \
    \    if (a > b) {\n            a = a - b;\n            return a >= 2 && a != 0\
    \ ? \"YES\" : \"NO\";\n        } else {\n            return b >= 2 && b != 0 ?\
    \ \"YES\" : \"NO\";\n        }", "        if (interval1.getLeft() < interval1.getRight())\
    \ {\n            if (interval2.getLeft() < interval2.getRight()) {\n         \
    \       if (interval1.getLeft() > interval1.getRight() || interval2.getLeft()\
    \ > interval2.getRight()) {\n                    return \"NO\";\n            \
    \    }\n                String result = \"\";\n                if (interval1.getLeft()\
    \ > interval2.getLeft()) {\n                    result = intersection(interval2,\
    \ interval1);\n                } else {\n                    result = intersection(interval1,\
    \ interval2);\n                }\n                if (result.length() > 0) {\n\
    \                    return \"YES\";\n                }\n                return\
    \ \"NO\";\n            } else if (interval2.getLeft() > interval2.getRight())\
    \ {\n                return \"NO\";\n            }\n            return intersection(interval1,\
    \ interval2);\n        } else {\n            if (interval2.getLeft() < interval2.getRight())\
    \ {\n                if (interval1.getLeft() > interval1.getRight() || interval2.getLeft()\
    \ > interval2.getRight()) {\n                    return \"NO\";\n            \
    \    }\n                String result = \"\";\n                if (interval1.getLeft()\
    \ > interval2.getLeft()) {\n                    result = intersection(interval1,\
    \ interval2);\n                } else {\n                    result = intersection(interval2,\
    \ interval1);\n                }\n                if (result.length() > 0) {\n\
    \                    return \"YES\";\n                }\n                return\
    \ \"NO\";\n            } else if (interval2.getLeft() > interval2.getRight())\
    \ {\n                return \"NO\";\n            }\n            return intersection(interval1,\
    \ interval2);\n        }", "        // TODO: write your code in Java\n       \
    \ if(interval1.getLeft() > interval2.getLeft()){\n            Pair<Long, Long>\
    \ temp = interval1;\n            interval1 = interval2;\n            interval2\
    \ = temp;\n        }\n        if (interval1.getLeft() > interval2.getRight()){\n\
    \            return (\"NO\");\n        }\n        if (interval1.getRight() < interval2.getLeft()){\n\
    \            return (\"NO\");\n        }\n        Long length1 = interval1.getRight()-interval1.getLeft();\n\
    \        Long length2 = interval2.getRight()-interval2.getLeft();\n        if(length1\
    \ <= length2){\n            length2 = length1;\n            length1 = length2;\n\
    \        }\n        if(length1 >= length2){\n            return (\"NO\");\n  \
    \      }\n        Long length3 = interval1.getRight()-interval1.getLeft();\n \
    \       Long length4 = interval2.getRight()-interval2.getLeft();\n        if(length3\
    \ >= length4){\n            length4 = length3;\n            length3 = length4;\n\
    \        }\n        if(length3 > length4){\n            return (\"NO\");\n   \
    \     }\n        long product = length1*length2*length3*length4;\n        if(product\
    \ % 2 == 0){\n            return (\"YES\");\n        }\n        return (\"NO\"\
    );", "        long length1 = interval1.getLeft() - interval1.getRight();\n   \
    \     long length2 = interval2.getLeft() - interval2.getRight();\n        if (length1\
    \ == 0 || length2 == 0) {\n            return \"NO\";\n        }\n        long\
    \ longValue = length1 * length2;\n        Pair<Long, Long> biggestIntersectingInterval\
    \ = Pair.with(interval1.getLeft(), interval1.getRight());\n        if (biggestIntersectingInterval.getLeft()\
    \ < interval2.getLeft() || biggestIntersectingInterval.getRight() > interval2.getRight())\
    \ {\n            return \"NO\";\n        }\n        Pair<Long, Long> smallerInterval\
    \ = Pair.with(interval2.getLeft(), interval2.getRight());\n        if (biggestIntersectingInterval.getLeft()\
    \ <= smallerInterval.getLeft() || biggestIntersectingInterval.getRight() >= smallerInterval.getRight())\
    \ {\n            return \"NO\";\n        }\n        if (length1 > length2) {\n\
    \            Pair<Long, Long> intersection = Pair.with(interval1.getRight(), interval1.getRight()\
    \ + length2 - length1);\n            if (length1 == prime(intersection.getRight())\
    \ && length2 == prime(intersection.getRight())) {\n                return \"YES\"\
    ;\n            }\n        }\n        if (length1 < length2) {\n            Pair<Long,\
    \ Long> intersection = Pair.with(interval1.getLeft(), interval1.getLeft() + length1\
    \ - length2);\n            if (length1 == prime(intersection.getRight()) && length2\
    \ == prime(intersection.getRight())) {\n                return \"YES\";\n    \
    \        }\n        }\n        return \"NO\";", '        return primeIntervalLength(primeIntervalLength(interval1,
    interval2));', "        // check whether the two intervals intersect\n       \
    \ if (interval1.second > interval2.first) {\n            Pair<Long, Long> swap\
    \ = Pair.with(interval1.first, interval2.first);\n            interval1.first\
    \ = swap.second;\n            interval2.first = swap.first;\n        }\n     \
    \   long startInter = interval1.first + interval1.second - interval2.first;\n\
    \        long endInter = interval1.first + interval1.second - interval2.second;\n\
    \        if (startInter > endInter) {\n            return \"NO\";\n        } else\
    \ {\n            boolean isPrime = true;\n            Pair<Long, Long> swapped\
    \ = Pair.with(interval1.first, interval2.first);\n            long startInterval\
    \ = swapped.first + swapped.second - interval2.first;\n            long endInterval\
    \ = swapped.first + swapped.second - interval2.second;\n            long startPrime\
    \ = interval1.first + interval1.second - interval2.first;\n            long endPrime\
    \ = interval1.first + interval1.second - interval2.second;\n            if (startInterval\
    \ == startPrime || startInterval == endPrime) {\n                isPrime = false;\n\
    \            } else if (endInterval == startPrime || endInterval == endPrime)\
    \ {\n                isPrime = false;\n            }\n            if (isPrime)\
    \ {\n                return \"YES\";\n            }\n            return \"\";\n\
    \        }", "        Set<Pair<Long, Long>> set = new HashSet<>();\n        set.add(interval1);\n\
    \        set.add(interval2);\n        long left1 = interval1.getLeft();\n    \
    \    long right1 = interval1.getRight();\n        long left2 = interval2.getLeft();\n\
    \        long right2 = interval2.getRight();\n        long min = Math.min(left1,\
    \ left2);\n        long max = Math.max(right1, right2);\n        boolean flag\
    \ = false;\n        for (Pair<Long, Long> pair : set) {\n            long a =\
    \ pair.getLeft();\n            long b = pair.getRight();\n            long c =\
    \ (long) Math.max(Math.min(a, b), min);\n            long d = (long) Math.min(Math.max(a,\
    \ b), max);\n            flag = (d < c && a < b) || (d > c && a > b);\n      \
    \      if (!flag) {\n                break;\n            }\n        }\n      \
    \  return flag.toString() ? \"YES\" : \"NO\";", "        long start = Math.max(interval1.getLeft(),\
    \ interval2.getLeft());\n        long end = Math.min(interval1.getRight(), interval2.getRight());\n\
    \        // The length of intersection is end - start\n        long length = end\
    \ - start;\n        // If intervals are disjoint, then length is zero\n      \
    \  if (length == 0) {\n            return \"NO\";\n        }\n        // If length\
    \ of intersection is prime, then return \"YES\"\n        if (isPrime(length))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";", "      \
    \  String res = \"\";\n        if (interval1.start < interval1.end && interval2.start\
    \ < interval2.end) {\n            long x1 = interval1.start;\n            long\
    \ x2 = interval2.start;\n            if (x1 < x2 || (x1 == x2 && x2 < x1)) {\n\
    \                res = isPrime(x1) ? \"YES\" : \"NO\";\n            } else {\n\
    \                res = isPrime(x2) ? \"YES\" : \"NO\";\n            }\n      \
    \  }\n        return res;", "        Long start = interval1.first;\n        Long\
    \ end = interval1.second;\n        Long start2 = interval2.first;\n        Long\
    \ end2 = interval2.second;\n\n        Long start = Math.max(start, start2);\n\
    \        Long end = Math.min(end, end2);\n        if (start < end) {\n       \
    \     Long start3 = start2;\n            Long end3 = end2;\n            while\
    \ (start3 < end3) {\n                start = Math.max(start, start3);\n      \
    \          end3 = end3;\n                end3 = Math.min(end3, end2);\n      \
    \      }\n            if (end3 < start) {\n                return \"NO\";\n  \
    \          }\n            while (start2 < end3) {\n                start = Math.max(start,\
    \ start2);\n                end2 = end2;\n                end2 = Math.min(end2,\
    \ end3);\n            }\n            if (end2 < start) {\n                return\
    \ \"NO\";\n            }\n\n            if (start % end != 0) {\n            \
    \    return \"NO\";\n            } else {\n                return \"YES\";\n \
    \           }\n        } else {\n            return \"NO\";\n        }", "   \
    \     // Complete the code here\n        int count = 0;\n        Interval<Long>\
    \ myInterval = new Interval<>(interval1.getFirst(), interval1.getSecond());\n\
    \        Interval<Long> otherInterval = new Interval<>(interval2.getFirst(), interval2.getSecond());\n\
    \        \n        myInterval.intersect(otherInterval);\n        if(myInterval.isEmpty()){\n\
    \            return \"NO\";\n        }\n        else{\n            \n        \
    \    count = myInterval.getLength();\n            \n            if(count==2){\n\
    \                return \"YES\";\n            }\n            else{\n         \
    \       return \"NO\";\n            }\n        }", "        \n        long l1\
    \ = interval1.first();\n        long l2 = interval2.first();\n        long max\
    \ = (l1 < l2) ? l1 : l2;\n        if (max == l2 && l2 != l1) {\n            return\
    \ l1 + \" < \" + l2 + \" so intersection is \" + max;\n        } else if (l2 ==\
    \ l1) {\n            return l1 + \" < \" + l2 + \" so intersection is \" + l2;\n\
    \        } else if (l1 < l2) {\n            return intersection(interval2, interval1);\n\
    \        } else {\n            return intersection(interval1, interval2);\n  \
    \      }", "        long length1 = interval1.getValue().longValue();\n       \
    \ long length2 = interval2.getValue().longValue();\n        if (length1 == length2)\
    \ return \"YES\";\n        int lengthMin = Math.min(length1, length2);\n     \
    \   int lengthMax = Math.max(length1, length2);\n        if (lengthMin == lengthMax)\
    \ return \"NO\";\n\n        Set<Long> intersection = new HashSet<Long>();\n  \
    \      intersection.add(interval1.getValue());\n        intersection.add(interval2.getValue());\n\
    \        long lengthIntersection = intersection.stream().mapToLong(Long::longValue).sum();\n\
    \n        if (lengthIntersection == lengthMin) return \"NO\";\n\n        long\
    \ divisor = 1;\n        while (divisor < lengthIntersection) {\n            if\
    \ (lengthIntersection % divisor == 0) divisor++;\n            else return \"NO\"\
    ;\n        }\n        return \"YES\";", "        long lengthIntersection = interval1.getLeft()\
    \ + interval1.getRight();\n        long lengthInterval2 = interval2.getLeft()\
    \ + interval2.getRight();\n        long length = (lengthIntersection > lengthInterval2)\
    \ ? lengthIntersection : lengthInterval2;\n        long max = (lengthIntersection\
    \ < lengthInterval2) ? lengthIntersection : lengthInterval2;\n        for (int\
    \ i = 1; i <= max; i++) {\n            if ((lengthIntersection % i == 0) && (lengthInterval2\
    \ % i == 0)) {\n                if (lengthIntersection / i == lengthInterval2\
    \ / i) {\n                    return \"YES\";\n                }\n           \
    \ }\n        }\n        return \"NO\";", "        // TODO: Complete this function\n\
    \        if (interval1.start > interval1.end) {\n            interval1 = Pair.with(interval1.end,\
    \ interval1.start);\n        }\n        if (interval2.start > interval2.end) {\n\
    \            interval2 = Pair.with(interval2.end, interval2.start);\n        }\n\
    \        return String.valueOf((new HashSet<Pair<Long, Long>>(Arrays.asList(interval1,\
    \ interval2))).stream().anyMatch(p-> interval1.start <= p.end && p.start <= interval1.end\
    \ && p.end <= interval2.end) ? \"YES\" : \"NO\");", "        // Get their length\n\
    \        long length1 = interval1.getLeft() - interval1.getRight();\n        long\
    \ length2 = interval2.getLeft() - interval2.getRight();\n        if (length1 ==\
    \ 0 && length2 == 0) {\n            return \"NO\";\n        } else if (length1\
    \ == length2) {\n            return \"YES\";\n        }\n        long length =\
    \ 0;\n        long min = Math.min(length1, length2);\n        long max = Math.max(length1,\
    \ length2);\n        for (int i = min; i < max; i++) {\n            length = length\
    \ + i;\n        }\n        boolean isPrime = true;\n        long a = interval1.getLeft();\n\
    \        long b = interval1.getRight();\n        long c = interval2.getLeft();\n\
    \        long d = interval2.getRight();\n        long e = 0;\n        while (a\
    \ <= c) {\n            if (b > d) {\n                e = b;\n                b\
    \ = d;\n                d = e;\n                e = 0;\n            }\n      \
    \      while (d >= b) {\n                if (a > c) {\n                    e =\
    \ a;\n                    a = c;\n                    c = e;\n               \
    \     e = 0;\n                }\n                if (length == 0) {\n        \
    \            isPrime = false;\n                    break;\n                } else\
    \ {\n                    length--;\n                }\n            }\n       \
    \     long temp = a;\n            a = b;\n            b = temp;\n        }\n \
    \       while (a >= c) {\n            if (b > d) {\n                e = b;\n \
    \               b = d;\n                d = e;\n                e = 0;\n     \
    \       }\n            while (d > b) {\n                if (a > c) {\n       \
    \             e = a;\n                    a = c;\n                    c = e;\n\
    \                    e = 0;\n                }\n                if (length ==\
    \ 0) {\n                    isPrime = false;\n                    break;\n   \
    \             } else {\n                    length--;\n                }\n   \
    \         }\n            long temp = a;\n            a = b;\n            b = temp;\n\
    \        }\n        if (isPrime) {\n            return \"YES\";\n        } else\
    \ {\n            return \"NO\";\n        }", "        long start = Math.min(interval1.getLeft(),\
    \ interval2.getLeft());\n        long end = Math.max(interval1.getRight(), interval2.getRight());\n\
    \        int left = end + 1 - start;\n        int right = end - left;\n      \
    \  return left > 0 ? left <= right ? \"YES\" : \"NO\" : \"NO\";", "        long\
    \ start1, start2;\n        long end1, end2;\n        long intersectionLength;\n\
    \        List<Pair<Long, Long>> list1 = new ArrayList<Pair<Long, Long>>();\n \
    \       List<Pair<Long, Long>> list2 = new ArrayList<Pair<Long, Long>>();\n  \
    \      if (interval1.start < interval1.end) {\n            list1.add(interval1);\n\
    \        }\n        if (interval2.start < interval2.end) {\n            list2.add(interval2);\n\
    \        }\n        System.out.println(\"list1: \" + list1.size());\n        System.out.println(\"\
    list2: \" + list2.size());\n        System.out.println(\"list1\");\n        list1.stream().forEach(System.out::println);\n\
    \        System.out.println(\"list2\");\n        list2.stream().forEach(System.out::println);\n\
    \        start1 = interval1.start;\n        start2 = interval2.start;\n      \
    \  end1 = interval1.end;\n        end2 = interval2.end;\n        System.out.println(\"\
    start1: \" + start1);\n        System.out.println(\"start2: \" + start2);\n  \
    \      System.out.println(\"end1: \" + end1);\n        System.out.println(\"end2:\
    \ \" + end2);\n        System.out.println(\"end1: \" + end1);\n        System.out.println(\"\
    end2: \" + end2);\n        intersectionLength = start1 < start2 ? start1 - start2\
    \ : (start2 - start1);\n        if (end1 < end2) {\n            intersectionLength\
    \ += end1 - start2;\n        } else {\n            intersectionLength += end2\
    \ - start1;\n        }\n        if (intersectionLength > 0) {\n            System.out.println(\"\
    intersectionLength: \" + intersectionLength);\n            list1.stream().forEach(System.out::println);\n\
    \            list2.stream().forEach(System.out::println);\n            System.out.println(\"\
    list1: \" + list1.size());\n            System.out.println(\"list2: \" + list2.size());\n\
    \            System.out.println(\"list1\");\n            list1.stream().forEach(System.out::println);\n\
    \            System.out.println(\"list2\");\n            list2.stream().forEach(System.out::println);\n\
    \            if (list1.contains(interval1) || list2.contains(interval2)) {\n \
    \               return \"YES\";\n            } else {\n                return\
    \ \"NO\";\n            }\n        } else {\n            return \"NO\";\n     \
    \   }", "        // 1.\n        final String prime = \"YES\";\n        final String\
    \ no = \"NO\";\n        long long1 = interval1.getKey(), long2 = interval2.getKey();\n\
    \        if (long1 <= long2) {\n            return prime;\n        } else if (long2\
    \ <= long1) {\n            return no;\n        }\n\n        // 2.\n        long\
    \ start = interval1.getValue(), end = interval2.getValue();\n        if (end <=\
    \ start) {\n            return no;\n        }\n        boolean isIntersect = true,\
    \ start = start, end = end;\n        long longValue = start, longValue1 = 0, longValue2\
    \ = 0;\n        boolean isIntersect1 = false, isIntersect2 = false;\n        while\
    \ (isIntersect) {\n            while (longValue <= long2) {\n                longValue2++;\n\
    \                if (longValue2 == long1) {\n                    isIntersect2\
    \ = true;\n                    longValue2 = longValue;\n                }\n  \
    \          }\n            while (longValue1 <= long2) {\n                longValue1++;\n\
    \                if (longValue1 == long1) {\n                    isIntersect1\
    \ = true;\n                    longValue1 = longValue;\n                }\n  \
    \          }\n            if (isIntersect1 && isIntersect2) {\n              \
    \  isIntersect = isIntersect2;\n            } else if (isIntersect1 && !isIntersect2)\
    \ {\n                isIntersect = isIntersect1;\n            } else if (isIntersect2\
    \ && isIntersect1) {\n                isIntersect = isIntersect1;\n          \
    \  } else if (!isIntersect1 && !isIntersect2) {\n                isIntersect =\
    \ false;\n            }\n        }\n        if (isIntersect) {\n            return\
    \ prime;\n        } else {\n            return no;\n        }", "        // Write\
    \ your code here\n        int lengthOfIntersection = (interval2.getValue() - interval1.getValue());\n\
    \        if (lengthOfIntersection % 2 == 0) {\n            return \"YES\";\n \
    \       } else {\n            return \"NO\";\n        }", "        Long start1\
    \ = interval1.getKey();\n        Long end1 = interval1.getValue();\n        Long\
    \ start2 = interval2.getKey();\n        Long end2 = interval2.getValue();\n\n\
    \        long result = 0;\n        if (start1 < end2 && start2 < end1) {\n   \
    \         result = Math.max(start1, start2) + Math.min(end1, end2) - Math.max(start2,\
    \ end1);\n        } else {\n            return \"NO\";\n        }\n\n        if\
    \ (result % 2 == 0) {\n            return \"NO\";\n        } else {\n        \
    \    return \"YES\";\n        }", "        long start = interval1.getLeft();\n\
    \        long end = interval1.getRight();\n        long start2 = interval2.getLeft();\n\
    \        long end2 = interval2.getRight();\n        long length = end - start;\n\
    \        long length2 = end2 - start2;\n        if (length == length2) {\n   \
    \         String result = \"\";\n            if (length == 0) {\n            \
    \    return \"NO\";\n            } else {\n                return \"YES\";\n \
    \           }\n        } else {\n            return \"\";\n        }", "     \
    \   // write your code here\n        // if (interval1.right < interval2.left)\
    \ {\n        // interval1.left = interval1.right;\n        // interval1.right\
    \ = interval2.right;\n        // }\n        // if (interval1.left > interval2.right)\
    \ {\n        // interval1.right = interval1.left;\n        // interval1.left =\
    \ interval2.left;\n        // }\n        // if (interval1.right > interval2.left)\
    \ {\n        // interval1.left = interval1.right;\n        // interval1.right\
    \ = interval2.left;\n        // }\n        // if (interval1.left < interval2.right)\
    \ {\n        // interval1.right = interval1.left;\n        // interval1.left =\
    \ interval2.right;\n        // }\n        // return (interval1.left <= interval2.right)\
    \ ? \"YES\" : \"NO\";\n        return interval1.left <= interval2.right ? \"YES\"\
    \ : \"NO\";", "        Pair<Long, Long> interval = intersection(interval1, interval2);\n\
    \        return interval.isDefined()\n                ? \"YES\"\n            \
    \    : \"NO\";", "        long length = interval1.right.get() - interval1.left.get();\n\
    \        long length2 = interval2.right.get() - interval2.left.get();\n      \
    \  if (length2 == 0) {\n            return \"YES\";\n        }\n        if (length\
    \ == 0) {\n            return \"NO\";\n        }\n        boolean prime = true;\n\
    \        if (length >= 2) {\n            long m = length / 2;\n            long\
    \ d = (length * length) / (2 * m);\n            prime = PrimeNumberGenerator.isPrime(m);\n\
    \        }\n        if (!prime) {\n            return \"NO\";\n        }\n   \
    \     String intersection = \"NO\";\n        if (interval1.left.get() + length\
    \ >= interval1.right.get()) {\n            intersection = \"YES\";\n        }\n\
    \        return intersection;", "        // Initialize variables.\n        long\
    \ start = interval1.getKey();\n        long end = interval2.getKey();\n      \
    \  long start1 = interval1.getValue();\n        long end1 = interval1.getValue();\n\
    \        long start2 = interval2.getValue();\n        long end2 = interval2.getValue();\n\
    \n        // Calculate the length of the intersection.\n        long length_intersection\
    \ = end - start;\n        long length_intersection1 = end1 - start1;\n       \
    \ long length_intersection2 = end2 - start2;\n\n        // Return whether the\
    \ length of intersection is prime.\n        if (length_intersection == length_intersection1\
    \ && length_intersection == length_intersection2) {\n            return \"YES\"\
    ;\n        } else if (length_intersection1 == length_intersection2) {\n      \
    \      return \"NO\";\n        }\n\n        // Return whether the length of intersection\
    \ is prime.\n        if (length_intersection == length_intersection1 && length_intersection\
    \ != 1) {\n            return \"NO\";\n        } else if (length_intersection\
    \ != length_intersection1 && length_intersection1 == 1) {\n            return\
    \ \"NO\";\n        }\n\n        // Return whether the length of intersection is\
    \ prime.\n        if (length_intersection != length_intersection2 && length_intersection2\
    \ == 1) {\n            return \"NO\";\n        }\n\n        // Return whether\
    \ the length of intersection is prime.\n        if (length_intersection != length_intersection1\
    \ && length_intersection1 != length_intersection2) {\n            return \"NO\"\
    ;\n        }\n        return \"NO\";", "        double length1 = interval1.second\
    \ - interval1.first;\n        double length2 = interval2.second - interval2.first;\n\
    \        double interLength = length1 * length2;\n        double lengthOfIntersection\
    \ = interLength / 2;\n        double answer = lengthOfIntersection - Math.sqrt(lengthOfIntersection);\n\
    \        if (answer % 1 != 0) {\n            return \"NO\";\n        } else {\n\
    \            return \"YES\";\n        }", "        if(interval1.end() > interval1.start()\
    \ && interval2.end() > interval2.start()) {\n            long start = Math.min(interval1.start(),\
    \ interval2.start());\n            long end = Math.max(interval1.end(), interval2.end());\n\
    \            Pair<Long, Long> intersection = Pair.with(start, end);\n        \
    \    if(intersection.equals(Pair.with(interval1.start(), interval1.end())))\n\
    \                return \"YES\";\n            else if(intersection.equals(Pair.with(interval2.start(),\
    \ interval2.end())))\n                return \"YES\";\n            else if(intersection.equals(Pair.with(interval1.start(),\
    \ interval2.start())))\n                return \"YES\";\n            else if(intersection.equals(Pair.with(interval1.end(),\
    \ interval2.end())))\n                return \"YES\";\n            else\n    \
    \            return \"NO\";\n        }\n        else {\n            return \"\
    NO\";\n        }", "        if (interval1 == null || interval2 == null || interval1.getFirst()\
    \ < interval2.getFirst() || interval1.getFirst() > interval2.getFirst() ||\n \
    \           interval1.getSecond() < interval2.getSecond() || interval1.getSecond()\
    \ > interval2.getSecond()) {\n            return \"NO\";\n        }\n        long\
    \ common = interval1.getFirst() + (interval1.getSecond() - interval1.getFirst())\
    \ * interval2.getFirst() + (interval1.getSecond() - interval2.getFirst()) * interval2.getSecond();\n\
    \        if (common % 2 == 0) {\n            return \"NO\";\n        } else {\n\
    \            return \"YES\";\n        }", "        Pair<Long, Long> i1l = Pair.of(interval1.getKey().longValue(),\
    \ interval1.getValue().longValue());\n        Pair<Long, Long> i2l = Pair.of(interval2.getKey().longValue(),\
    \ interval2.getValue().longValue());\n        long length1 = i1l.getValue() -\
    \ i1l.getKey();\n        long length2 = i2l.getValue() - i2l.getKey();\n\n   \
    \     long max = Math.max(length1, length2);\n        long min = Math.min(length1,\
    \ length2);\n        long diff = max - min;\n\n        if (diff == 0) {\n    \
    \        Pair<Long, Long> i1 = Pair.of(i1l.getKey(), i1l.getValue());\n      \
    \      Pair<Long, Long> i2 = Pair.of(i2l.getKey(), i2l.getValue());\n\n      \
    \      long length = i1.getValue() - i1.getKey() - i2.getValue() - i2.getKey();\n\
    \            if (length == 1) {\n                return \"YES\";\n           \
    \ }\n            if (length != 0) {\n                return \"NO\";\n        \
    \    }\n            return \"NO\";\n        } else {\n            int result =\
    \ 1;\n            long num1 = (i1l.getKey() + i1l.getValue()) / 2;\n         \
    \   long num2 = (i2l.getKey() + i2l.getValue()) / 2;\n\n            while (diff\
    \ > 0) {\n                result += (diff % 2 == 0);\n                diff /=\
    \ 2;\n            }\n\n            if (result == 2) {\n                return\
    \ \"YES\";\n            } else if (result == 1) {\n                return \"NO\"\
    ;\n            }\n            return \"NO\";\n        }", "        long lengthOfIntersection\
    \ = interval1.getEnd().longValue() - interval2.getStart().longValue();\n     \
    \   if (lengthOfIntersection == 0) return \"NO\";\n        boolean isPrime = lengthOfIntersection\
    \ % 2 == 0 && (long) Math.sqrt(lengthOfIntersection) == lengthOfIntersection;\n\
    \        return isPrime ? \"YES\" : \"NO\";", "        if (interval1.getLeft().equals(interval2.getLeft()))\
    \ {\n            long start = Math.max(interval1.getLeft(), interval2.getLeft());\n\
    \            long end = Math.max(interval1.getRight(), interval2.getRight());\n\
    \            long length = end - start + 1;\n            if (length == 1) {\n\
    \                return \"YES\";\n            } else if (length == 2) {\n    \
    \            return \"NO\";\n            } else if (length == 2) {\n         \
    \       return \"YES\";\n            }\n            return \"NO\";\n        }\n\
    \        if (interval1.getRight().equals(interval2.getRight())) {\n          \
    \  long start = Math.max(interval1.getRight(), interval2.getRight());\n      \
    \      long end = Math.max(interval1.getLeft(), interval2.getLeft());\n      \
    \      long length = end - start + 1;\n            if (length == 1) {\n      \
    \          return \"YES\";\n            } else if (length == 2) {\n          \
    \      return \"NO\";\n            } else if (length == 2) {\n               \
    \ return \"YES\";\n            }\n            return \"NO\";\n        }\n    \
    \    return \"NO\";", "        long interval1start = interval1.getLeft();\n  \
    \      long interval1end = interval1.getRight();\n        long interval2start\
    \ = interval2.getLeft();\n        long interval2end = interval2.getRight();\n\n\
    \        long intersectionLength = interval1end - interval1start;\n        long\
    \ overlapLength = (interval1end - interval2start);\n\n        if (overlapLength\
    \ == 0) {\n            if (interval1start <= interval2end && interval1end >= interval2start)\
    \ {\n                return \"YES\";\n            } else if (interval2start <=\
    \ interval1end && interval2end >= interval1start) {\n                return \"\
    YES\";\n            } else if (interval1start <= interval2start && interval1end\
    \ >= interval2end) {\n                return \"YES\";\n            } else if (interval2start\
    \ <= interval1start && interval2end >= interval1end) {\n                return\
    \ \"YES\";\n            } else {\n                return \"NO\";\n           \
    \ }\n        }\n        if (overlapLength > 0) {\n            intersectionLength\
    \ = intersectionLength - overlapLength;\n            if (interval1start <= interval2start\
    \ && interval1start <= interval2end && interval1end >= interval2end) {\n     \
    \           return \"YES\";\n            } else if (interval1start <= interval2start\
    \ && interval1end <= interval2end && interval1start >= interval2start) {\n   \
    \             return \"YES\";\n            } else if (interval1start <= interval2end\
    \ && interval1end >= interval2start && interval1end <= interval2end) {\n     \
    \           return \"YES\";\n            } else if (interval2start <= interval1start\
    \ && interval2start <= interval1end && interval2end >= interval1end) {\n     \
    \           return \"YES\";\n            } else if (interval2start <= interval1start\
    \ && interval2end >= interval1start && interval2start <= interval1end && interval2end\
    \ >= interval1end) {\n                return \"YES\";\n            } else {\n\
    \                return \"NO\";\n            }\n        }\n        return \"NO\"\
    ;", "        \n        Pair<Long, Long> intersection = Pair.with(interval1.first(),\
    \ interval1.last());\n        if(interval1.isClosed && interval2.isClosed) {\n\
    \            if(intersection.first > intersection.last) {\n                return\
    \ \"NO\";\n            } \n            if(interval1.first > interval2.first &&\
    \ interval1.last < interval2.last) {\n                return \"YES\";\n      \
    \      } \n            if(interval1.first <= interval2.first && interval1.last\
    \ >= interval2.last) {\n                return \"YES\";\n            } \n    \
    \        if(intersection.first < intersection.last) {\n                return\
    \ \"YES\";\n            } \n        }\n        \n        if(interval1.isClosed\
    \ == interval2.isClosed) {\n            return \"NO\";\n        }\n        \n\
    \        boolean first = true;\n        \n        for(long i = interval1.first();\
    \ i <= interval1.last() && i < interval2.last; i++) {\n            if(interval1.first\
    \ <= i) {\n                if(!first) {\n                    if(!interval2.isClosed)\
    \ {\n                        if(intersection.first > i) {\n                  \
    \          return \"NO\";\n                        }\n                    } \n\
    \                    first = true;\n                    if(!interval1.isClosed)\
    \ {\n                        if(interval1.first < i) {\n                     \
    \       return \"NO\";\n                        }\n                    } \n  \
    \              } \n            } \n            if(interval2.first <= i) {\n  \
    \              if(!first) {\n                    if(!interval1.isClosed) {\n \
    \                       if(intersection.first > i) {\n                       \
    \     return \"NO\";\n                        }\n                    } \n    \
    \                first = true;\n                    if(!interval2.isClosed) {\n\
    \                        if(interval2.first < i) {\n                         \
    \   return \"NO\";\n                        }\n                    } \n      \
    \          } \n            } \n            intersection = Pair.with(i, interval1.last());\n\
    \        }\n        \n        return \"YES\";", "        // check whether they\
    \ intersect\n        if(interval1.end > interval2.start) {\n            System.out.println(\"\
    YES \" + interval1.end + \" \" + interval2.end);\n            return \"YES\";\n\
    \        } else if(interval1.start > interval2.end) {\n            System.out.println(\"\
    YES \" + interval1.start + \" \" + interval2.end);\n            return \"YES\"\
    ;\n        } else {\n            System.out.println(\"NO \" + interval1.end +\
    \ \" \" + interval2.end);\n            return \"NO\";\n        }", "        Pair<Long,\
    \ Long> intersection = Pair.of(interval1.getLeft() < interval2.getLeft() ? interval1.getLeft()\
    \ : interval2.getLeft(),\n                interval1.getRight() < interval2.getRight()\
    \ ? interval1.getRight() : interval2.getRight());\n\n        if(intersection.getLeft()\
    \ >= intersection.getRight()) {\n            return \"NO\";\n        }\n\n   \
    \     long lengthOfIntersection = intersection.getRight() - intersection.getLeft();\n\
    \n        if (lengthOfIntersection == (lengthOfIntersection & lengthOfIntersection))\
    \ {\n            return \"NO\";\n        }\n\n        BigInteger interval1Length\
    \ = BigInteger.valueOf(interval1.getRight() - interval1.getLeft());\n        BigInteger\
    \ interval2Length = BigInteger.valueOf(interval2.getRight() - interval2.getLeft());\n\
    \n        if(interval1Length.equals(interval2Length)) {\n            BigInteger\
    \ length = interval1Length;\n            BigInteger difference = lengthOfIntersection\
    \ - length;\n            return difference.divide(length).intValue() == 0 ? \"\
    YES\" : \"NO\";\n        }\n        return \"NO\";", "        long start1 = interval1.getLeft();\n\
    \        long end1 = interval1.getRight();\n        long start2 = interval2.getLeft();\n\
    \        long end2 = interval2.getRight();\n\n        if (start1 > end2) {\n \
    \           Pair<Long, Long> tmp = interval2;\n            interval2 = interval1;\n\
    \            interval1 = tmp;\n        }\n\n        if (start1 < start2) {\n \
    \           Pair<Long, Long> tmp = interval1;\n            interval1 = interval2;\n\
    \            interval2 = tmp;\n        }\n        if (start1 == start2) {\n  \
    \          if (end1 > end2) {\n                Pair<Long, Long> tmp = interval1;\n\
    \                interval1 = interval2;\n                interval2 = tmp;\n  \
    \          }\n            Pair<Long, Long> tmp = interval2;\n            interval2\
    \ = interval1;\n            interval1 = tmp;\n        }\n\n        long startInter\
    \ = interval1.getLeft();\n        long endInter = interval1.getRight();\n    \
    \    long startFinal = interval2.getLeft();\n        long endFinal = interval2.getRight();\n\
    \n        if (startInter < startFinal) {\n            if (endInter > endFinal)\
    \ {\n                Pair<Long, Long> tmp = interval1;\n                interval1\
    \ = interval2;\n                interval2 = tmp;\n            }\n            Pair<Long,\
    \ Long> tmp = interval2;\n            interval2 = interval1;\n            interval1\
    \ = tmp;\n        }\n\n        if (startInter > startFinal) {\n            Pair<Long,\
    \ Long> tmp = interval1;\n            interval1 = interval2;\n            interval2\
    \ = tmp;\n        }\n\n        long startInter2 = interval2.getLeft();\n     \
    \   long endInter2 = interval2.getRight();\n        long startFinal2 = interval1.getLeft();\n\
    \        long endFinal2 = interval1.getRight();\n\n        if (startInter2 < startFinal2)\
    \ {\n            if (endInter2 > endFinal2) {\n                Pair<Long, Long>\
    \ tmp = interval1;\n                interval1 = interval2;\n                interval2\
    \ = tmp;\n            }\n            Pair<Long, Long> tmp = interval2;\n     \
    \       interval2 = interval1;\n            interval1 = tmp;\n        }\n\n  \
    \      if (startInter2 > startFinal2) {\n            Pair<Long, Long> tmp = interval1;\n\
    \            interval1 = interval2;\n            interval2 = tmp;\n        }\n\
    \n        if (startInter2 == startFinal2) {\n            if (endInter2 > endFinal2)\
    \ {\n                Pair<Long, Long> tmp = interval1;\n                interval1\
    \ = interval2;\n                interval2 = tmp;\n            }\n            Pair<Long,\
    \ Long> tmp = interval2;\n            interval2 = interval", "        long length\
    \ = 0;\n        interval1.left = Math.min(interval1.left, interval2.left);\n \
    \       interval1.right = Math.max(interval1.right, interval2.right);\n      \
    \  if (interval1.left <= interval2.left && interval1.right >= interval2.right)\
    \ {\n            if (interval1.left < interval1.right) {\n                length\
    \ = interval1.right - interval1.left;\n            } else {\n                length\
    \ = interval1.left - interval1.right;\n            }\n            if (length ==\
    \ 1) {\n                return \"YES\";\n            }\n            if (PrimeNumbers.isPrime(length))\
    \ {\n                return \"YES\";\n            } else {\n                return\
    \ \"NO\";\n            }\n        } else {\n            return \"NO\";\n     \
    \   }", "        if (interval1.first.compareTo(interval2.first) < 0){\n      \
    \      return intersection(interval2, interval1);\n        }\n        if (interval1.first.compareTo(interval2.first)\
    \ > 0){\n            return intersection(interval1, interval2);\n        }\n \
    \       if (interval1.second.compareTo(interval2.second) < 0){\n            return\
    \ intersection(interval2, interval1);\n        }\n        if (interval1.second.compareTo(interval2.second)\
    \ > 0){\n            return intersection(interval1, interval2);\n        }\n\n\
    \        if (intersection(interval1, interval2).length() != 1) {\n           \
    \ return \"NO\";\n        }\n        return \"YES\";", "        List<Long> list\
    \ = new ArrayList<>();\n        list.add(interval1.getFirst());\n        list.add(interval1.getSecond());\n\
    \        list.add(interval2.getFirst());\n        list.add(interval2.getSecond());\n\
    \        list.addAll(list.stream()\n            .filter(value -> value <= interval2.getSecond())\n\
    \            .filter(value -> value <= interval1.getSecond())\n            .distinct()\n\
    \            .collect(Collectors.toList()));\n\n        return list.stream().filter(value\
    \ -> value > interval2.getSecond() && value > interval1.getSecond()).count() >\
    \ 0 ? \"YES\" : \"NO\";", "        if (interval1 == null || interval2 == null)\
    \ {\n            return \"NO\";\n        }\n        long a = interval1.getFirst();\n\
    \        long b = interval1.getSecond();\n        long c = interval2.getFirst();\n\
    \        long d = interval2.getSecond();\n        long l = Math.min(a, b);\n \
    \       long r = Math.max(a, b);\n        long m = Math.min(c, d);\n        long\
    \ n = Math.max(c, d);\n        if ((l <= r) && (m <= n)) {\n            long xl\
    \ = a - l;\n            long xr = r - m;\n            long yl = c - m;\n     \
    \       long yr = d - n;\n            if (Math.min(xl, xr) < yl || Math.max(xl,\
    \ xr) > yr) {\n                return \"NO\";\n            }\n            long\
    \ length = xl * yl + xr * yr;\n            long p = length / 2;\n            if\
    \ (p % 2 != 0) {\n                return \"NO\";\n            } else {\n     \
    \           return \"YES\";\n            }\n        } else {\n            return\
    \ \"NO\";\n        }", "        Pair<Long, Long> intersection = Pair.with(interval1.getLeft(),\
    \ interval2.getLeft());\n        if (intersection.getRight() < intersection.getLeft())\
    \ {\n            intersection = Pair.with(interval1.getRight(), interval2.getRight());\n\
    \        }\n        return intersection.equals(Pair.with(-Infinity.longValue(),\
    \ Infinity.longValue())) ? \"NO\" : \"YES\";", "        String result = \"\";\n\
    \        if (interval1.start <= interval1.end && interval2.start <= interval2.end)\
    \ {\n            long length = interval1.end - interval1.start + interval2.end\
    \ - interval2.start;\n            if (length >= 2) {\n                if (length\
    \ == 2) {\n                    if (interval1.start <= interval2.start && interval1.end\
    \ >= interval2.end) {\n                        result = \"YES\";\n           \
    \         } else if (interval2.start <= interval1.start && interval2.end >= interval1.end)\
    \ {\n                        result = \"YES\";\n                    } else if\
    \ (interval1.start <= interval2.start && interval1.end >= interval2.end) {\n \
    \                       result = \"NO\";\n                    } else if (interval2.start\
    \ <= interval1.start && interval2.end >= interval1.end) {\n                  \
    \      result = \"NO\";\n                    } else {\n                      \
    \  result = \"NO\";\n                    }\n                } else if (length\
    \ % 2 == 0) {\n                    int mid1 = interval1.start + (interval1.end\
    \ - interval1.start) / 2;\n                    int mid2 = interval2.start + (interval2.end\
    \ - interval2.start) / 2;\n                    if (interval1.start <= mid1 &&\
    \ interval2.start <= mid2) {\n                        result = \"YES\";\n    \
    \                } else if (mid1 < interval1.end && mid2 < interval2.end) {\n\
    \                        result = \"NO\";\n                    } else if (mid1\
    \ == interval1.end && mid2 == interval2.end) {\n                        result\
    \ = \"NO\";\n                    } else if (interval1.start <= mid1 && mid2 >=\
    \ interval2.end) {\n                        result = \"NO\";\n               \
    \     } else if (mid1 >= interval1.end && mid2 <= interval2.end) {\n         \
    \               result = \"NO\";\n                    } else if (interval1.start\
    \ == interval2.start && mid1 == interval1.end && mid2 == interval2.end) {\n  \
    \                      result = \"YES\";\n                    } else if (mid1\
    \ >= interval1.end && mid2 <= interval2.end) {\n                        result\
    \ = \"YES\";\n                    } else if (mid1 == interval1.end && mid2 >=\
    \ interval2.end) {\n                        result = \"YES\";\n              \
    \      } else if (mid1 <= interval1.end && mid2 >= interval2.end) {\n        \
    \                result = \"YES\";\n                    }\n                }\n\
    \            }\n        }\n        return result;", "        if (interval1.right\
    \ < interval2.left)\n            return \"NO\";\n        if (interval1.left >\
    \ interval2.right)\n            return \"NO\";\n\n        int result = 0;\n  \
    \      int len1 = interval1.right - interval1.left + 1;\n        int len2 = interval2.right\
    \ - interval2.left + 1;\n        interval1.left += 1;\n        interval2.left\
    \ += 1;\n        interval1.right -= 1;\n        interval2.right -= 1;\n\n    \
    \    for (int i = len1 - 1; i >= 0; i--) {\n            for (int j = len2 - 1;\
    \ j >= 0; j--) {\n                int x = interval1.left + i;\n              \
    \  int y = interval2.left + j;\n\n                if (x > y) {\n             \
    \       if (x % 2 != 0 && y % 2 != 0) {\n                        result += 1;\n\
    \                    }\n                    if (x == y) {\n                  \
    \      result += 1;\n                    }\n                } else {\n       \
    \             if (x % 2 != 0 && y % 2 != 0) {\n                        result\
    \ += 1;\n                    }\n                    if (x == y) {\n          \
    \              result += 1;\n                    }\n                }\n      \
    \      }\n        }\n        return result == len1 && result == len2 ? \"YES\"\
    \ : \"NO\";", "        \n        long start1 = interval1.getLeft();\n        long\
    \ end1 = interval1.getRight();\n        long start2 = interval2.getLeft();\n \
    \       long end2 = interval2.getRight();\n        \n        long intersection\
    \ = (start1+end2)-(start2-end1);\n        \n        if (intersection == 0){\n\
    \            return \"NO\";\n        }\n        \n        long length1 = end1\
    \ - start1;\n        long length2 = end2 - start2;\n        \n        if (length1\
    \ == length2){\n            return \"YES\";\n        }\n        if (length1 >\
    \ length2){\n            return intersection > 0L ? \"YES\" : \"NO\";\n      \
    \  }\n        return intersection < 0L ? \"NO\" : \"YES\";", "        if(interval1.start\
    \ <= interval1.end) {\n            if(interval2.start <= interval2.end) {\n  \
    \              long start = Math.max(interval1.start, interval2.start);\n    \
    \            long end = Math.min(interval1.end, interval2.end);\n            \
    \    long intervalLength = end - start + 1;\n                if(intervalLength\
    \ % 2 == 0)\n                    return \"NO\";\n                long num = 2;\n\
    \                while(num < intervalLength) {\n                    long curr\
    \ = num + start;\n                    if(curr == end)\n                      \
    \  return \"YES\";\n                    if(curr == (end-1)+start)\n          \
    \              return \"YES\";\n                    if(curr == end+start)\n  \
    \                      return \"YES\";\n                    if(curr == start+end)\n\
    \                        return \"YES\";\n                    num += 2;\n    \
    \            }\n                return \"NO\";\n            } else { // interval1.end\
    \ > interval2.end\n                return \"NO\";\n            }\n        } else\
    \ { // interval1.start > interval2.start\n            return \"NO\";\n       \
    \ }", "        Set<Pair<Long, Long>> set = new HashSet<>();\n        Long start\
    \ = Math.min(interval1.first, interval2.first);\n        Long end = Math.max(interval1.second,\
    \ interval2.second);\n        Pair<Long, Long> intersection = new Pair<Long, Long>(start,\
    \ end);\n        set.add(intersection);\n        while (set.size() > 1) {\n  \
    \          Set<Pair<Long, Long>> subset = new HashSet<>();\n            for (Pair<Long,\
    \ Long> element : set) {\n                if (element.second == intersection.second)\
    \ {\n                    subset.add(element);\n                }\n           \
    \ }\n            if (subset.size() < 1) {\n                return \"NO\";\n  \
    \          }\n            set.removeAll(subset);\n        }\n        long start\
    \ = set.iterator().next().first;\n        long end = set.iterator().next().second;\n\
    \        if (start == end) {\n            return \"NO\";\n        }\n        Pair<Long,\
    \ Long> intersectionWithEnd = new Pair<Long, Long>(start, end);\n        long\
    \ length = end - start;\n        if (isPrime(length)) {\n            return \"\
    YES\";\n        }\n        if (end == -1000000l) {\n            return \"YES\"\
    ;\n        }\n        return intersectionWithEnd.second == -1000000l ? \"YES\"\
    \ : \"NO\";", "        Long start1 = interval1.getLeft();\n        Long end1 =\
    \ interval1.getRight();\n        Long start2 = interval2.getLeft();\n        Long\
    \ end2 = interval2.getRight();\n        if (start1 > end2) {\n            Pair<Long,\
    \ Long> reversedInterval2 = Pair.with(reverse(start2), reverse(end2));\n     \
    \       return intersection(reversedInterval1, reversedInterval2);\n        }\
    \ else if (start1 < end2) {\n            Pair<Long, Long> reversedInterval1 =\
    \ Pair.with(reverse(start1), reverse(end1));\n            return intersection(reversedInterval1,\
    \ reversedInterval2);\n        } else if (start1 == end2 && start2 == end1) {\n\
    \            return \"YES\";\n        } else if (start1 > end1 && start2 < end1)\
    \ {\n            return intersection(Pair.with(start1, end1), Pair.with(start2,\
    \ end2));\n        } else if (start1 > end1 && start2 > end1) {\n            return\
    \ intersection(Pair.with(start1, end1), Pair.with(start2, end2));\n        } else\
    \ if (start1 < end1 && start2 < end1) {\n            return intersection(Pair.with(start1,\
    \ end1), Pair.with(start2, end2));\n        } else if (start1 == end1 && start2\
    \ == end2) {\n            return \"YES\";\n        } else if (start1 < end2 &&\
    \ start2 > end2) {\n            return intersection(Pair.with(start1, end2), Pair.with(start2,\
    \ end1));\n        } else if (start1 < end2 && start2 > end2) {\n            return\
    \ intersection(Pair.with(start1, end2), Pair.with(start2, end1));\n        } else\
    \ if (start1 < end2 && start2 == end2) {\n            return intersection(Pair.with(start1,\
    \ end1), Pair.with(start2, end2));\n        } else if (start1 == end1 && start2\
    \ == end2) {\n            return \"YES\";\n        } else if (start1 > end2 &&\
    \ start2 > end1) {\n            return intersection(Pair.with(start1, end1), Pair.with(start2,\
    \ end2));\n        } else {\n            return \"NO\";\n        }", "       \
    \ long length = (interval1.getFirst().longValue() - interval1.getSecond().longValue())\
    \ * (interval2.getFirst().longValue() - interval2.getSecond().longValue());\n\
    \        long length2 = interval2.getFirst().longValue() * (interval1.getFirst().longValue()\
    \ - interval1.getSecond().longValue());\n        long length3 = interval1.getFirst().longValue()\
    \ * (interval2.getFirst().longValue() - interval2.getSecond().longValue());\n\
    \        long length4 = interval1.getFirst().longValue() * (interval1.getSecond().longValue()\
    \ - interval1.getFirst().longValue());\n        long length5 = interval2.getFirst().longValue()\
    \ * (interval1.getFirst().longValue() - interval1.getSecond().longValue());\n\
    \        long length6 = interval2.getFirst().longValue() * (interval2.getSecond().longValue()\
    \ - interval2.getFirst().longValue());\n        long length7 = interval1.getFirst().longValue()\
    \ * (interval1.getSecond().longValue() - interval1.getFirst().longValue());\n\
    \        long length8 = interval1.getFirst().longValue() * (interval2.getSecond().longValue()\
    \ - interval2.getFirst().longValue());\n        long length9 = interval2.getFirst().longValue()\
    \ * (interval1.getSecond().longValue() - interval1.getFirst().longValue());\n\
    \        long length10 = interval2.getFirst().longValue() * (interval2.getSecond().longValue()\
    \ - interval2.getFirst().longValue());\n        if (length == length2 && length\
    \ == length3 && length == length4 && length == length5 && length == length6 &&\
    \ length == length7 && length == length8 && length == length9 && length == length10)\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }", "        /*\n         * The logic:\n         * 1. Calculate the\
    \ length\n         * 2. Check if the length is prime\n         * 3. Return YES\
    \ or NO\n         */\n\n        Pair<Long, Long> length = getLength(interval1,\
    \ interval2);\n        if (length == null || length.getFirst() == null || length.getSecond()\
    \ == null) {\n            return null;\n        }\n\n        boolean isPrime =\
    \ isPrime(length.getFirst(), length.getSecond());\n        if (isPrime) {\n  \
    \          return \"YES\";\n        } else {\n            return \"NO\";\n   \
    \     }", "        if (interval1.equals(interval2)) return \"YES\";\n        if\
    \ (interval1.getFirst() >= interval2.getFirst() && interval1.getFirst() < interval2.getSecond())\
    \ return \"YES\";\n        if (interval1.getSecond() >= interval2.getFirst() &&\
    \ interval1.getSecond() < interval2.getSecond()) return \"YES\";\n        if (interval1.getFirst()\
    \ >= interval2.getSecond() && interval1.getFirst() < interval2.getFirst()) return\
    \ \"YES\";\n        if (interval1.getSecond() >= interval2.getSecond() && interval1.getSecond()\
    \ < interval2.getFirst()) return \"YES\";\n        return \"NO\";", "        if\
    \ (interval1.equals(interval2)) {\n            return \"NO\";\n        }\n   \
    \     if (interval2.start <= interval1.end && interval1.end <= interval2.start)\
    \ {\n            return \"NO\";\n        }\n        long start = Math.min(interval1.start,\
    \ interval2.start);\n        long end = Math.max(interval1.end, interval2.end);\n\
    \        long length = end - start + 1;\n        if (length == 2 || length ==\
    \ 3) {\n            long mid = start + length / 2;\n            if (isPrime(mid))\
    \ {\n                return \"YES\";\n            }\n            if (isPrime(mid))\
    \ {\n                return \"NO\";\n            }\n        }\n        return\
    \ \"NO\";", "        List<Pair<Long, Long>> intersection = new ArrayList<>();\n\
    \        intersection.add(interval1);\n        intersection.add(interval2);\n\
    \        interval1 = interval1.getLeft();\n        interval2 = interval2.getLeft();\n\
    \n        // find if the length of intersection of interval and its opposite is\
    \ prime\n        Pair<Long, Long> interval1Opposite = new Pair<>(interval1.getRight(),\
    \ interval2.getLeft());\n        Pair<Long, Long> interval2Opposite = new Pair<>(interval2.getRight(),\
    \ interval1.getLeft());\n\n        if (interval1.getLeft() < interval2.getRight())\
    \ {\n            if (interval1.getLeft() > interval2.getLeft()) {\n          \
    \      interval1.setLeft(interval1.getLeft());\n            }\n            else\
    \ {\n                interval1.setRight(interval1.getRight());\n            }\n\
    \            interval2.setLeft(interval2.getLeft());\n            interval2.setRight(interval2.getRight());\n\
    \        }\n        if (interval1.getRight() < interval2.getLeft()) {\n      \
    \      if (interval1.getRight() > interval2.getRight()) {\n                interval2.setLeft(interval2.getLeft());\n\
    \            }\n            else {\n                interval2.setRight(interval2.getRight());\n\
    \            }\n            interval1.setLeft(interval1.getLeft());\n        \
    \    interval1.setRight(interval1.getRight());\n        }\n\n        if (interval1.getLeft()\
    \ < interval1.getRight()) {\n            if (interval2.getLeft() < interval2.getRight())\
    \ {\n                Pair<Long, Long> newInterval = new Pair<>(interval1.getRight(),\
    \ interval2.getLeft());\n                intersection.add(newInterval);\n    \
    \        }\n        }\n        if (interval1.getRight() < interval1.getLeft())\
    \ {\n            if (interval2.getLeft() < interval2.getRight()) {\n         \
    \       Pair<Long, Long> newInterval = new Pair<>(interval1.getLeft(), interval2.getRight());\n\
    \                intersection.add(newInterval);\n            }\n        }\n  \
    \      if (interval2.getLeft() < interval2.getRight()) {\n            if (interval1.getLeft()\
    \ < interval1.getRight()) {\n                Pair<Long, Long> newInterval = new\
    \ Pair<>(interval2.getLeft(), interval1.getRight());\n                intersection.add(newInterval);\n\
    \            }\n        }\n        if (interval2.getRight() < interval2.getLeft())\
    \ {\n            if (interval1.getLeft() < interval1.getRight()) {\n         \
    \       Pair<Long, Long> newInterval = new Pair<>(interval2.getRight(), interval1.getLeft());",
  "        long i1 = interval1.getLeft() + interval1.getRight();\n        long i2\
    \ = interval2.getLeft() + interval2.getRight();\n        if (i1 == i2) {\n   \
    \         return \"NO\";\n        } else {\n            long i12 = Math.min(i1,\
    \ i2);\n            long i22 = Math.max(i1, i2);\n            long s = Math.max(interval1.getLeft(),\
    \ interval2.getLeft());\n            long e = Math.min(interval1.getRight(), interval2.getRight());\n\
    \            int length = (e - s + 1) / 2;\n            if (i12 == i22) {\n  \
    \              return \"YES\";\n            }\n            long p = Math.min(i12,\
    \ i22);\n            long q = (i12 + i22) / 2;\n            while (p < q) {\n\
    \                p = p + i12;\n                if (p > q) {\n                \
    \    p = q + i12;\n                }\n                if (p == i22) {\n      \
    \              return \"YES\";\n                }\n                q = q + i22;\n\
    \            }\n            if (i12 == i22) {\n                return \"NO\";\n\
    \            }\n            int p2 = p;\n            int q2 = q;\n           \
    \ long i1Min = s - i12;\n            long i1Max = e - i12;\n            long i2Min\
    \ = s - i22;\n            long i2Max = e - i22;\n            long iMin = i12 >\
    \ i22 ? i1Min : i2Min;\n            long iMax = i12 > i22 ? i1Max : i2Max;\n \
    \           while (p < q2) {\n                if (iMin >= i2Min && iMax <= i2Max)\
    \ {\n                    long x = p + i12;\n                    long y = p2 -\
    \ i22;\n                    if ((x % i12 == 0) && (y % i22 == 0)) {\n        \
    \                String str1 = String.valueOf(p);\n                        String\
    \ str2 = String.valueOf(p2);\n                        if (length >= 2 && (str1.charAt(str1.length()\
    \ - 1) == '1') && (str2.charAt(str2.length() - 1) == '1')) {\n               \
    \             return \"YES\";\n                        }\n                   \
    \ }\n                }\n                p++;\n                p2++;\n        \
    \        q++;\n                q2++;\n                if (p > q2) {\n        \
    \            p += i12;\n                    p2 -= i22;\n                }\n  \
    \              if (p > q) {\n                    p += i12;\n                 \
    \   q += i22;\n                }\n                if (p == q2) {\n           \
    \         String str1 = String.valueOf(p);\n                    String str2 =\
    \ String.valueOf(q);\n                    if (length >= 2 && (str1.charAt(str",
  "        if (interval1 == interval2) return \"NO\";\n        if (interval1 == null\
    \ || interval2 == null) return \"NO\";\n        return intersection(interval1,\
    \ interval2, interval1.left, interval1.right);", "        // Write your code here\n\
    \        return null;", "        if (interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            if (interval1.getLeft()\
    \ <= interval1.getRight()) {\n                return \"YES\";\n            }\n\
    \            return \"NO\";\n        }\n        if (interval1.getLeft() < interval1.getRight())\
    \ {\n            Pair<Long, Long> intersection = interval1.getRight() > interval1.getLeft()\
    \ ? interval1 : interval2;\n            Pair<Long, Long> interval3 = interval1.getRight()\
    \ > interval1.getLeft() ? interval2 : interval1;\n            Pair<Long, Long>\
    \ interval4 = interval1.getRight() > interval1.getLeft() ? interval1 : interval2;\n\
    \            return intersection.getLeft() == interval3.getLeft() && intersection.getRight()\
    \ == interval4.getRight() ? \"YES\" : \"NO\";\n        }\n        Pair<Long, Long>\
    \ intersection = interval1.getLeft() > interval1.getRight() ? interval2 : interval1;\n\
    \        Pair<Long, Long> interval3 = interval1.getLeft() > interval1.getRight()\
    \ ? interval1 : interval2;\n        Pair<Long, Long> interval4 = interval1.getLeft()\
    \ > interval1.getRight() ? interval2 : interval1;\n        return intersection.getLeft()\
    \ == interval3.getLeft() && intersection.getRight() == interval4.getRight() ?\
    \ \"YES\" : \"NO\";", "        int i = 0;\n        int j = 0;\n        int length\
    \ = 0;\n        while (i<interval1.getLeft().intValue() || j<interval2.getLeft().intValue())\
    \ {\n            if (i<interval1.getLeft().intValue() && (j < interval2.getLeft().intValue()\
    \ || (j >= interval2.getLeft().intValue() && interval2.getLeft().intValue() <\
    \ interval1.getLeft().intValue()))) {\n                length = length + 1;\n\
    \            }\n            if (i>=interval1.getLeft().intValue() && (j>=interval2.getLeft().intValue()\
    \ || interval1.getLeft().intValue() < interval2.getLeft().intValue())) {\n   \
    \             length = length + 1;\n            }\n            if (i<interval1.getLeft().intValue()\
    \ && j>=interval2.getLeft().intValue()) {\n                length = length + 1;\n\
    \            }\n            if (i >= interval1.getLeft().intValue() && j < interval2.getLeft().intValue())\
    \ {\n                length = length + 1;\n            }\n            i++;\n \
    \           j++;\n        }\n        if (length == 0) {\n            return \"\
    NO\";\n        } else {\n            return \"YES\";\n        }", "        //\
    \ Write your code here\n        // Write your code here\n        return null;",
  "        Interval interval = new Interval(interval1.getLeft(), interval1.getRight());\n\
    \        Interval intersecInterval = new Interval(interval2.getLeft(), interval2.getRight());\n\
    \        if(interval.intersects(intersecInterval)) {\n            if(interval1.getLeft()\
    \ <= interval2.getRight() && interval1.getRight() >= interval2.getLeft()) {\n\
    \                return \"YES\";\n            } else {\n                return\
    \ \"NO\";\n            }\n        } else {\n            return \"NO\";\n     \
    \   }", "        if (interval1.getFirst() > interval1.getSecond()) {\n       \
    \     Pair<Long, Long> temp = interval1;\n            interval1 = interval2;\n\
    \            interval2 = temp;\n        }\n\n        boolean intersect = interval2.getFirst()\
    \ <= interval1.getSecond() && interval1.getSecond() <= interval2.getFirst();\n\
    \        if (intersect) {\n            if (interval1.getFirst() < interval2.getFirst()\
    \ || interval1.getSecond() < interval2.getSecond()) {\n                return\
    \ \"NO\";\n            }\n        }\n        return \"YES\";", "        if (interval1.getLeft()\
    \ < interval2.getLeft() || interval1.getRight() < interval2.getRight()) {\n  \
    \          return \"NO\";\n        }\n        long minMax = Long.max(interval1.getLeft(),\
    \ interval1.getRight()) + Long.min(interval2.getLeft(), interval2.getRight());\n\
    \        long maxMin = Long.min(interval1.getLeft(), interval1.getRight()) + Long.max(interval2.getLeft(),\
    \ interval2.getRight());\n        if (minMax == maxMin) {\n            return\
    \ interval1.getLeft() == interval1.getRight() ? \"YES\" : \"NO\";\n        }\n\
    \        if (interval1.getLeft() < interval2.getLeft() + 1 && interval1.getRight()\
    \ > interval2.getRight() - 1) {\n            return interval1.getLeft() == interval1.getRight()\
    \ ? \"YES\" : \"NO\";\n        }\n        if (interval1.getLeft() > interval2.getRight()\
    \ - 1 && interval1.getRight() < interval2.getLeft() + 1) {\n            return\
    \ interval1.getLeft() == interval1.getRight() ? \"YES\" : \"NO\";\n        }\n\
    \        if (interval1.getLeft() == interval1.getRight() || interval2.getLeft()\
    \ == interval2.getRight()) {\n            return \"NO\";\n        }\n        if\
    \ (interval1.getLeft() <= interval2.getLeft() && interval1.getRight() > interval2.getRight()\
    \ || interval1.getLeft() > interval2.getRight() && interval1.getRight() < interval2.getLeft())\
    \ {\n            return \"YES\";\n        }\n        if (interval1.getLeft() <=\
    \ interval2.getLeft() + 1 && interval1.getRight() > interval2.getRight() - 1 ||\
    \ interval1.getLeft() > interval2.getRight() + 1 && interval1.getRight() < interval2.getLeft()\
    \ + 1) {\n            return \"YES\";\n        }\n        long leftMax = interval1.getRight()\
    \ <= interval2.getRight() + 1 ? interval1.getRight() : interval2.getRight() +\
    \ 1;\n        long rightMin = interval1.getLeft() >= interval2.getLeft() - 1 ?\
    \ interval1.getLeft() : interval2.getLeft() - 1;\n        long minMax2 = Long.max(interval1.getLeft(),\
    \ interval1.getRight()) + Long.min(interval2.getLeft(), interval2.getRight());\n\
    \        if (minMax2 == maxMin) {\n            return \"YES\";\n        }\n  \
    \      if (leftMax >= rightMin) {\n            return intersection(Pair.with(leftMax,\
    \ interval1.getRight()), Pair.with(interval2.", "        long intersection = interval1.left\
    \ < interval2.left ? interval1.left : interval2.left;\n        long left = interval1.left\
    \ < interval2.left ? interval1.left : interval2.left;\n        long right = interval1.left\
    \ < interval2.left ? interval2.left : interval1.left;\n        long intersection1\
    \ = intersection + right;\n        long intersection2 = intersection - left;\n\
    \        if(intersection1 == intersection2){\n            return \"YES\";\n  \
    \      }else{\n            return \"NO\";\n        }", "        Pair<Long, Long>\
    \ intersection = new Pair<>();\n        intersection.start = (interval1.start\
    \ >= interval2.start) ? interval1.start : interval2.start;\n        intersection.end\
    \ = (interval1.end <= interval2.end) ? interval1.end : interval2.end;\n\n    \
    \    long lengthOfIntersection = (intersection.end - intersection.start);\n  \
    \      long factors = 2;\n        while (lengthOfIntersection != 0) {\n      \
    \      lengthOfIntersection = (lengthOfIntersection / factors);\n            factors++;\n\
    \        }\n        if (lengthOfIntersection == 2) return \"YES\";\n        if\
    \ (lengthOfIntersection == 1) return \"NO\";\n        return \"NO\";", "     \
    \   // Your code here\n        if (interval1.getValue() > interval2.getValue())\
    \ {\n            int tmp = interval1.getValue();\n            interval1.setValue(interval2.getValue());\n\
    \            interval2.setValue(tmp);\n        }\n        final int length = Math.min(interval1.getValue(),\
    \ interval2.getValue()) - Math.max(interval1.getValue(), interval2.getValue());\n\
    \        if (length == 0 || length == 1) {\n            return \"NO\";\n     \
    \   }\n        for (int i = 2; i < length; i++) {\n            if (interval1.getValue()\
    \ <= (interval2.getValue() - i) && interval2.getValue() <= (interval1.getValue()\
    \ + i)) {\n                return \"YES\";\n            }\n        }\n       \
    \ return \"NO\";", "        long start = interval1.getKey();\n        long end\
    \ = interval1.getValue();\n        long start1 = interval2.getKey();\n       \
    \ long end1 = interval2.getValue();\n\n        if (start < end) {\n          \
    \  if (start1 < end1) {\n                start = start1;\n                end\
    \ = end1;\n            }\n        } else if (start > end) {\n            if (start1\
    \ > end1) {\n                start = start1;\n                end = end1;\n  \
    \          }\n        }\n\n        if (start == end && start1 == end1) {\n   \
    \         return \"NO\";\n        }\n        long x = start;\n        long y =\
    \ end;\n        int flag = 0;\n        while (x < y) {\n            long temp1\
    \ = x;\n            long temp2 = y;\n            if (temp1 < temp2) {\n      \
    \          temp2 = temp1;\n            }\n            while (temp1 > temp2) {\n\
    \                temp1 -= temp1;\n                temp2 -= temp2;\n          \
    \  }\n            if (temp1 % temp2 == 0) {\n                flag = 1;\n     \
    \           break;\n            }\n            x++;\n            y++;\n      \
    \  }\n        if (flag == 1) {\n            return \"YES\";\n        }\n     \
    \   return \"NO\";", "        \n        long start = Math.max(interval1.first,\
    \ interval2.first);\n        long end = Math.min(interval1.second, interval2.second);\n\
    \n        if (end < start) {\n            start = end;\n            end = start;\n\
    \        }\n\n        long len = end - start;\n\n        if (len == 1) {\n   \
    \         return \"NO\";\n        }\n\n        List<Long> intersection = new ArrayList<>();\n\
    \        intersection.add(start);\n        intersection.add(end);\n\n        //\
    \ if the length of intersection is not a prime number\n        // check whether\
    \ start < end or start > end\n        // start > end means the intersection is\
    \ overlapped\n        // start < end means the intersection is adjacent\n    \
    \    // this check will help us to decide whether the length of intersection is\
    \ prime number\n        boolean overlapped = false;\n        boolean adjacent\
    \ = false;\n        boolean isPrime = false;\n\n        for (int i = 2; i < len\
    \ / 2; i++) {\n            if (isPrime) {\n                break;\n          \
    \  }\n            long half = len / 2;\n            long a = interval1.first +\
    \ half;\n            long b = interval2.first - half;\n            if (a > end\
    \ && b > end) {\n                adjacent = true;\n            } else if (a >\
    \ end && b < end) {\n                overlapped = true;\n            }\n     \
    \   }\n\n        if (overlapped && adjacent) {\n            isPrime = true;\n\
    \        }\n\n        if (overlapped) {\n            return \"NO\";\n        }\
    \ else if (adjacent) {\n            return \"YES\";\n        } else {\n      \
    \      return \"NO\";\n        }\n", "        long length1 = interval1.second\
    \ - interval1.first;\n        long length2 = interval2.second - interval2.first;\n\
    \        if (length1 != length2) {\n            return \"NO\";\n        } else\
    \ if (length1 == 0) {\n            return \"NO\";\n        }\n        List<Pair<Long,\
    \ Long>> intersection = new ArrayList<>();\n        for (int i = 0; i < interval1.first;\
    \ i++) {\n            intersection.add(interval1);\n            intersection.add(interval2);\n\
    \        }\n        long lengthIntersection = intersection.stream().mapToLong(Pair::second).sum();\n\
    \        if (lengthIntersection % 2 != 0) {\n            return \"NO\";\n    \
    \    } else {\n            return \"YES\";\n        }", '        return intersection(interval1,
    interval2, false);', "        Set<Long> set1 = new HashSet<>(interval1.begin(),\
    \ interval1.end());\n        Set<Long> set2 = new HashSet<>(interval2.begin(),\
    \ interval2.end());\n        set1.retainAll(set2);\n        set1.removeAll(set2);\n\
    \        if (set1.isEmpty()) {\n            return \"NO\";\n        }\n      \
    \  long ans = 0;\n        for (long x : set1) {\n            ans += x;\n     \
    \   }\n        return String.valueOf(isPrime(ans));", "        long a = interval1.left;\n\
    \        long b = interval1.right;\n        long c = interval2.left;\n       \
    \ long d = interval2.right;\n        long x1 = Math.min(a,c);\n        long x2\
    \ = Math.max(a,c);\n        long y1 = Math.min(b,d);\n        long y2 = Math.max(b,d);\n\
    \        if(y1<=y2){\n            long y3 = Math.min(y1, y2);\n            long\
    \ y4 = Math.max(y1, y2);\n            if(x1<=x2){\n                long x3 = Math.min(x1,\
    \ x2);\n                long x4 = Math.max(x1, x2);\n                if(x3<=x4){\n\
    \                    long length = Math.abs((x2-x1) - (y2-y1));\n            \
    \        if(length % 2 == 0){\n                        if(length % 3 == 0){\n\
    \                            return \"YES\";\n                        }\n    \
    \                    else{\n                            if(length % 5 == 0){\n\
    \                                return \"YES\";\n                           \
    \ }\n                            else{\n                                return\
    \ \"NO\";\n                            }\n                        }\n        \
    \            }\n                    else{\n                        return \"NO\"\
    ;\n                    }\n                }\n                else{\n         \
    \           return \"NO\";\n                }\n            }\n            else{\n\
    \                return \"NO\";\n            }\n        }\n        else{\n   \
    \         return \"NO\";\n        }", "        long start1 = interval1.getLeft();\n\
    \        long end1 = interval1.getRight();\n        long start2 = interval2.getLeft();\n\
    \        long end2 = interval2.getRight();\n\n        long length1 = end1 - start1;\n\
    \        long length2 = end2 - start2;\n\n        if (length1 != length2) {\n\
    \            return \"NO\";\n        }\n\n        if (start1 <= end2 && start2\
    \ <= end1) {\n            return length1 == length2 ? \"YES\" : \"NO\";\n    \
    \    }\n\n        if (start1 <= end2 || start2 <= end1) {\n            return\
    \ \"NO\";\n        }\n\n        long min1 = (start1 > end2) ? start1 : end2;\n\
    \        long max1 = (start1 < end2) ? start1 : end2;\n        long min2 = (start2\
    \ > end1) ? start2 : end1;\n        long max2 = (start2 < end1) ? start2 : end1;\n\
    \n        long len1 = max1 - min1 + 1;\n        long len2 = max2 - min2 + 1;\n\
    \n        if (len1 == 1 && len2 == 1) {\n            return length1 == length2\
    \ ? \"YES\" : \"NO\";\n        }\n\n        long result1 = (len1 == 1) ? 0 : (len1\
    \ + len2) % 2;\n        long result2 = (len2 == 1) ? 0 : (len1 + len2) % 2;\n\n\
    \        if (result1 == 0 && result2 == 0) {\n            return length1 == length2\
    \ ? \"YES\" : \"NO\";\n        }\n\n        if (result1 == 1) {\n            return\
    \ \"NO\";\n        }\n\n        if (result2 == 1) {\n            return \"NO\"\
    ;\n        }\n\n        return \"YES\";", "        // Your implementation here\n\
    \        long start1 = interval1.getLeft();\n        long end1 = interval1.getRight();\n\
    \        long start2 = interval2.getLeft();\n        long end2 = interval2.getRight();\n\
    \        int length = (int) Math.ceil((end1 - start1 + 1L) / (end2 - start2 +\
    \ 1L));\n        if (length < 2 || (start1 + end1 - 1) % (start2 + end2 - 1) !=\
    \ 0) {\n            return \"NO\";\n        } else if (length == 2) {\n      \
    \      return \"YES\";\n        } else {\n            int primeCount = 0;\n  \
    \          for (int i = 0; i < length; i++) \n                if ((start1 + end1\
    \ - 1) % start2 + end2 == 0)\n                    primeCount++;\n            if\
    \ (primeCount == length)\n                return \"YES\";\n            else\n\
    \                return \"NO\";\n        }", "        if (interval1 == null &&\
    \ interval2 == null) {\n            return \"NO\";\n        } else if (interval1\
    \ == null || interval2 == null) {\n            return \"NO\";\n        } else\
    \ if (interval1.getLeft() > interval1.getRight()) {\n            return \"NO\"\
    ;\n        } else if (interval2.getLeft() > interval2.getRight()) {\n        \
    \    return \"NO\";\n        } else if (interval1.getLeft() == interval2.getLeft()\
    \ && interval1.getRight() == interval2.getRight()) {\n            return \"YES\"\
    ;\n        } else {\n            return new StringBuilder().append(intersection(interval1.getLeft(),\
    \ interval2.getLeft()))\n                    .append(intersection(interval1.getRight(),\
    \ interval2.getRight())).toString();\n        }", "        Set<Pair<Long, Long>>\
    \ intersection = new HashSet<>();\n        intersection.add(interval1);\n    \
    \    intersection.add(interval2);\n        Long minInterval1 = interval1.getLeft();\n\
    \        Long maxInterval1 = interval1.getRight();\n        Long minInterval2\
    \ = interval2.getLeft();\n        Long maxInterval2 = interval2.getRight();\n\
    \        if (minInterval1 > maxInterval2)\n            return String.valueOf(\"\
    NO\");\n        if (minInterval2 > maxInterval1)\n            return String.valueOf(\"\
    NO\");\n        Long left = new Long(minInterval1);\n        Long right = new\
    \ Long(maxInterval2);\n        if (left < right) {\n            while (left <\
    \ right) {\n                if (left == right)\n                    return String.valueOf(\"\
    NO\");\n                Pair<Long, Long> result = new Pair<Long, Long>(left, right);\n\
    \                if (!intersection.contains(result))\n                    return\
    \ String.valueOf(\"NO\");\n                left++;\n                right--;\n\
    \            }\n        } else {\n            while (right < left) {\n       \
    \         if (right == left)\n                    return String.valueOf(\"NO\"\
    );\n                Pair<Long, Long> result = new Pair<Long, Long>(right, left);\n\
    \                if (!intersection.contains(result))\n                    return\
    \ String.valueOf(\"NO\");\n                right++;\n                left--;\n\
    \            }\n        }\n        HashSet<Pair<Long, Long>> prime = new HashSet<>();\n\
    \        HashSet<Pair<Long, Long>> primeWithIntersection = new HashSet<>();\n\
    \        for (Pair<Long, Long> intersection : intersection) {\n            primeWithIntersection.add(intersection);\n\
    \        }\n        for (Pair<Long, Long> prime : prime) {\n            primeWithIntersection.removeAll(prime);\n\
    \        }\n        primeWithIntersection.forEach(prime::add);\n        if (primeWithIntersection.size()\
    \ < 2)\n            return \"NO\";\n        Long left1 = minInterval1;\n     \
    \   Long right1 = maxInterval1;\n        Long left2 = minInterval2;\n        Long\
    \ right2 = maxInterval2;\n        Pair<Long, Long> pair1 = new Pair<Long, Long>(left1,\
    \ right1);\n        Pair<Long, Long> pair2 = new Pair<Long, Long>(left2, right2);\n\
    \        HashSet<Pair<Long, Long>> prime1 = new HashSet<>();\n        HashSet<Pair<Long,\
    \ Long>> prime2 = new HashSet<>();\n        for (Pair<Long, Long> intersection\
    \ : intersection) {\n            if (intersection.getLeft() > intersection.getRight())\n\
    \                return \"NO\";", "        long start = Math.max(interval1.getLeft()\
    \ + interval1.getRight(), interval2.getLeft() + interval2.getRight());\n     \
    \   long end = Math.min(interval1.getLeft() + interval1.getRight(), interval2.getLeft()\
    \ + interval2.getRight());\n        if (start >= end) {\n            return \"\
    NO\";\n        }\n        boolean isPrime = true;\n        for (int i = start\
    \ + 1; i <= end; i++) {\n            if (interval1.getLeft() < i && interval2.getLeft()\
    \ < i && i != interval1.getRight() && i != interval2.getRight()) {\n         \
    \       if (i % 2 == 0) {\n                    isPrime = false;\n            \
    \        break;\n                }\n            }\n            if (interval1.getLeft()\
    \ > i && interval2.getLeft() > i && i != interval1.getRight() && i != interval2.getRight())\
    \ {\n                if (i % 2 == 0) {\n                    isPrime = false;\n\
    \                    break;\n                }\n            }\n            if\
    \ (interval1.getLeft() > i && interval2.getLeft() > i && i != interval1.getRight()\
    \ && i != interval2.getRight()) {\n                if (i % 2 != 0) {\n       \
    \             isPrime = false;\n                    break;\n                }\n\
    \            }\n        }\n        if (isPrime) {\n            return \"YES\"\
    ;\n        }\n        return \"NO\";", "        long start = Math.min(interval1.first,\
    \ interval2.first);\n        long end = Math.max(interval1.second, interval2.second);\n\
    \n        if (end > start) {\n            Pair<Long, Long> middle = (Pair<Long,\
    \ Long>) new Pair<Long, Long>(\n                    (start + (end - start) / 2),\
    \ end);\n            Pair<Long, Long> intersection = intersection(interval1, middle);\n\
    \            Pair<Long, Long> complement = intersection.complement();\n      \
    \      boolean isPrime = isPrime(intersection.second);\n            boolean isConsistent\
    \ = interval1.first <= interval1.second &&\n                    interval2.first\
    \ <= interval2.second;\n            if (isConsistent && isPrime && complement.second\
    \ == interval2.second) {\n                return \"YES\";\n            } else\
    \ {\n                return \"NO\";\n            }\n        } else {\n       \
    \     return \"NO\";\n        }", '        return intersection(interval1, interval2,
    Interval::new);', "        long[] intersect = intersection(interval1.start, interval1.end,\
    \ interval2.start, interval2.end);\n        if (intersect[0] != intersect[1])\
    \ {\n            return \"NO\";\n        }\n        for (int i = 0; i <= intersect[0];\
    \ i++) {\n            if (i != intersect[0]) {\n                if (interval1.start\
    \ < interval2.start && interval1.start < i) {\n                    return \"NO\"\
    ;\n                }\n                else if (interval1.start >= i && interval1.end\
    \ < i) {\n                    return \"NO\";\n                }\n            \
    \    else if (interval1.start <= i && interval1.end >= i) {\n                \
    \    return \"YES\";\n                }\n                else if (interval1.start\
    \ <= i && interval1.end > i) {\n                    if (interval1.start < interval2.start\
    \ && interval1.end > interval2.start) {\n                        return \"YES\"\
    ;\n                    }\n                    else if (interval1.start >= interval2.end\
    \ && interval1.end < interval2.end) {\n                        return \"YES\"\
    ;\n                    }\n                    else if (interval1.start <= interval2.end\
    \ && interval1.end >= interval2.end) {\n                        if (interval1.end\
    \ < interval2.start && interval1.end < interval2.end) {\n                    \
    \        return \"NO\";\n                        }\n                        else\
    \ if (interval1.end >= interval2.start && interval1.end >= interval2.end) {\n\
    \                            return \"YES\";\n                        }\n    \
    \                    else if (interval1.end <= interval2.start && interval1.end\
    \ > interval2.start) {\n                            return \"YES\";\n        \
    \                }\n                        else if (interval1.end > interval2.end\
    \ && interval1.end <= interval2.end) {\n                            return \"\
    YES\";\n                        }\n                        else {\n          \
    \                  throw new RuntimeException(\"Unexpected problem!\");\n    \
    \                    }\n                    }\n                    else {\n  \
    \                      throw new RuntimeException(\"Unexpected problem!\");\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ \"NO\";", "        // Complete the function.\n        // Return the string \"\
    YES\" if the length of the intersection intervals is a prime number,\n       \
    \ // otherwise return \"NO\".\n        if (interval1.second > interval1.first)\
    \ {\n            if (interval2.second > interval2.first) {\n                Long\
    \ start1 = interval1.first;\n                Long end1 = interval1.second;\n \
    \               Long start2 = interval2.first;\n                Long end2 = interval2.second;\n\
    \                if (end1 < start1) {\n                    Pair<Long, Long> interval\
    \ = Pair.with(end1, start2);\n                    String result = intersection(interval,\
    \ interval1);\n                    if (result != null) {\n                   \
    \     return result;\n                    }\n                }\n             \
    \   else {\n                    Pair<Long, Long> interval = Pair.with(start1,\
    \ end2);\n                    String result = intersection(interval, interval2);\n\
    \                    if (result != null) {\n                        return result;\n\
    \                    }\n                }\n            }\n            else {\n\
    \                Long start1 = interval1.first;\n                Long end1 = interval1.second;\n\
    \                Long start2 = interval2.first;\n                Long end2 = interval2.second;\n\
    \                if (start1 < start2) {\n                    Pair<Long, Long>\
    \ interval = Pair.with(start1, end2);\n                    String result = intersection(interval,\
    \ interval2);\n                    if (result != null) {\n                   \
    \     return result;\n                    }\n                }\n             \
    \   else {\n                    Pair<Long, Long> interval = Pair.with(end1, start2);\n\
    \                    String result = intersection(interval, interval1);\n    \
    \                if (result != null) {\n                        return result;\n\
    \                    }\n                }\n            }\n        }\n        else\
    \ {\n            if (interval2.second > interval2.first) {\n                Long\
    \ start1 = interval1.first;\n                Long end1 = interval1.second;\n \
    \               Long start2 = interval2.first;\n                Long end2 = interval2.second;\n\
    \                if (end1 < start1) {\n                    Pair<Long, Long> interval\
    \ = Pair.with(start1, end2);\n                    String result = intersection(interval,\
    \ interval2);\n                    if (result != null) {\n                   \
    \     return result;\n                    }\n                }\n             \
    \   else {\n                    Pair<Long, Long> interval = Pair.with(start1,\
    \ start2);\n                    String result = intersection(interval, interval2);\n\
    \                    if (result != null) {\n                        return result;\n\
    \                    }\n                }\n            }\n            else {\n\
    \                Long start1 = interval1.first;\n                Long end1 = interval1.second;\n\
    \                Long start2 = interval2.first;\n                Long end2 = interval2.second;\n\
    \                if (start1 < start2) {\n                    Pair<Long, Long>\
    \ interval = Pair.with(start1, end2);\n                    ", "        String\
    \ str1 = \"NO\";\n        String str2 = \"NO\";\n        if (interval1.start <=\
    \ interval1.end && interval2.start <= interval2.end) {\n            if (interval1.start\
    \ <= interval2.start && interval1.end >= interval2.end) {\n                if\
    \ (interval1.start > interval2.start) {\n                    str1 = \"YES\";\n\
    \                }\n            }\n            else if (interval1.start < interval2.start\
    \ && interval1.end <= interval2.end) {\n                str1 = \"YES\";\n    \
    \        }\n            else if (interval1.start <= interval2.start && interval1.end\
    \ >= interval2.end) {\n                str1 = \"NO\";\n            }\n       \
    \ }\n        if (interval1.start <= interval1.end && interval2.start < interval2.end)\
    \ {\n            if (interval1.start > interval2.start && interval1.start < interval2.end)\
    \ {\n                str2 = \"YES\";\n            }\n        }\n        if (interval1.start\
    \ > interval1.end && interval2.start > interval2.end) {\n            if (interval1.end\
    \ < interval2.start && interval1.end <= interval2.end) {\n                str2\
    \ = \"YES\";\n            }\n        }\n        if (str1.equalsIgnoreCase(\"NO\"\
    ) && str2.equalsIgnoreCase(\"NO\")) {\n            return \"NO\";\n        }\n\
    \        if (str1.equalsIgnoreCase(\"NO\") && str2.equalsIgnoreCase(\"YES\"))\
    \ {\n            return \"NO\";\n        }\n        if (str1.equalsIgnoreCase(\"\
    YES\") && str2.equalsIgnoreCase(\"NO\")) {\n            return \"NO\";\n     \
    \   }\n        if (str1.equalsIgnoreCase(\"YES\") && str2.equalsIgnoreCase(\"\
    YES\")) {\n            return \"YES\";\n        }\n        return str1 + \"/\"\
    \ + str2;", "        if (interval1.getLeft() < interval2.getLeft() || interval1.getRight()\
    \ < interval2.getRight()) {\n            return \"NO\";\n        }\n        if\
    \ (interval1.getLeft() >= interval2.getLeft() && interval1.getRight() <= interval2.getRight())\
    \ {\n            return \"NO\";\n        }\n        if (interval1.getLeft() <=\
    \ interval2.getLeft() && interval1.getRight() > interval2.getRight()) {\n    \
    \        return \"NO\";\n        }\n        long maxIntersectionLength = 1;\n\
    \        Pair<Long, Long> intersectInterval;\n        if (interval1.getLeft()\
    \ > interval2.getLeft()) {\n            intersectInterval = new Pair<>(interval1.getLeft(),\
    \ interval2.getRight());\n        } else {\n            intersectInterval = new\
    \ Pair<>(interval1.getRight(), interval2.getLeft());\n        }\n        Long\
    \ intersectionLength = Long.MIN_VALUE;\n        Long endOfInterval = Long.MIN_VALUE;\n\
    \        Long startOfInterval = Long.MIN_VALUE;\n        for (int i = Math.max(interval1.getLeft(),\
    \ interval2.getLeft()); i >= Math.max(interval1.getRight(), interval2.getRight());\
    \ i--) {\n            Long endOfInterval = i;\n            endOfInterval = endOfInterval\
    \ + ((endOfInterval != interval1.getRight()) ? 1 : 0);\n            Long startOfInterval\
    \ = i - 1;\n            startOfInterval = startOfInterval + ((startOfInterval\
    \ != interval1.getLeft()) ? 1 : 0);\n            if (interval1.getLeft() == i\
    \ && interval2.getLeft() != i) {\n                endOfInterval = endOfInterval\
    \ + interval2.getRight();\n            } else if (interval2.getLeft() == i &&\
    \ interval1.getLeft() != i) {\n                startOfInterval = startOfInterval\
    \ + interval1.getRight();\n            }\n            if (startOfInterval > endOfInterval)\
    \ {\n                return \"NO\";\n            }\n            if (endOfInterval\
    \ - startOfInterval >= 2) {\n                Long len = endOfInterval - startOfInterval;\n\
    \                if (len > intersectionLength) {\n                    intersectionLength\
    \ = len;\n                    intersectInterval = new Pair<>(i, i);\n        \
    \        }\n            }\n        }\n        if (intersectionLength >= 2) {\n\
    \            Pair<Long, Long> intersection = new Pair<>(intersectionInterval.getLeft(),\
    \ intersectionInterval.getRight());\n            String answer = \"\";\n     \
    \       if (isPrime(intersectionLength)) {\n                answer = answer +\
    \ \"YES\";\n            } else {\n                answer = answer + \"NO\";\n\
    \            }\n            return answer;\n        }\n        return \"NO", " \
    \       \n        if (interval1.start < interval1.end || interval2.start < interval2.end)\
    \ return \"NO\";\n        \n        int i = (interval1.start < interval2.start)\
    \ ? interval1.start : interval2.start;\n        int j = (interval1.start < interval2.start)\
    \ ? interval2.start : interval1.start;\n        \n        while (i <= interval1.end\
    \ && j <= interval2.end) {\n            \n            if (interval1.getSecond()\
    \ > interval2.getSecond()) {\n                return \"NO\";\n            }\n\
    \            \n            if (interval1.getSecond() == interval2.getSecond())\
    \ {\n                if (interval1.getFirst() <= interval2.getFirst()) {\n   \
    \                 i++;\n                } else {\n                    j++;\n \
    \               }\n            } else {\n                i++;\n              \
    \  j++;\n            }\n        }\n        \n        return primeCheck(i) ? \"\
    YES\" : \"NO\";", "        long l1 = interval1.getLeft();\n        long l2 = interval2.getLeft();\n\
    \n        long l3 = Math.min(l1, l2);\n        long l4 = Math.max(l1, l2);\n \
    \       long length = l3 - l4;\n\n        if (length < 2l){\n            return\
    \ \"NO\";\n        }\n\n        int j = 0;\n        boolean checkPrime = true;\n\
    \        long i = 2l;\n        long test = 1;\n        while (i < length){\n \
    \           if (test % 2 == 0){\n                if (i % 2 == 0){\n          \
    \          i += 1;\n                }\n                else{\n               \
    \     i += 3;\n                }\n            }\n            else{\n         \
    \       if (i % 3 == 0){\n                    i += 3;\n                }\n   \
    \             else{\n                    i += 6;\n                }\n        \
    \    }\n            test = i * i;\n            j++;\n        }\n        if (j\
    \ % 2 != 0){\n            checkPrime = false;\n        }\n        if (checkPrime){\n\
    \            return \"YES\";\n        }\n        return \"NO\";", "        List<Long>\
    \ list = Arrays.asList(interval1.value, interval2.value);\n        long min =\
    \ Math.min(interval1.value, interval2.value);\n        long max = Math.max(interval1.value,\
    \ interval2.value);\n        long sum = 0;\n        for (long val : list) {\n\
    \            if (val < min) {\n                sum += (min - val);\n         \
    \   }\n            if (val > max) {\n                sum += (val - max);\n   \
    \         }\n        }\n        if (sum % 2 == 1) {\n            return \"NO\"\
    ;\n        }\n        long divisor = sum / 2;\n        long newSum = 0;\n    \
    \    for (long val : list) {\n            newSum += (val - divisor) * (val - divisor);\n\
    \        }\n        if (newSum > 2) {\n            return \"NO\";\n        }\n\
    \        if (newSum == 2) {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";", "        long start = Math.max(interval1.getKey(), interval2.getKey());\n\
    \        long end = Math.min(interval1.getValue(), interval2.getValue());\n  \
    \      long sum = end + start;\n        long length = sum - 2;\n        boolean\
    \ isPrime = true;\n        if (length == 0) {\n            return \"\";\n    \
    \    }\n        for (int i = 3; i <= length; i++) {\n            if (sum % i ==\
    \ 0) {\n                isPrime = false;\n                break;\n           \
    \ }\n        }\n        if (isPrime) {\n            return \"YES\";\n        }\n\
    \        return \"NO\";", "        long minInterval1 = Math.min(interval1.first(),\
    \ interval1.second());\n        long maxInterval2 = Math.max(interval2.first(),\
    \ interval2.second());\n        long interval1MinusMinInterval2 = minInterval1\
    \ - maxInterval2;\n        long interval1MinusMaxInterval2 = maxInterval2 - minInterval1;\n\
    \        if (interval1MinusMinInterval2 == interval1MinusMaxInterval2) {\n   \
    \         return String.valueOf(interval1MinusMinInterval2);\n        }\n    \
    \    long intersection =  (int) Math.sqrt(interval1MinusMinInterval2 * interval1MinusMinInterval2\
    \ + interval1MinusMaxInterval2 * interval1MinusMaxInterval2);\n        if (interval1MinusMinInterval2\
    \ > interval1MinusMaxInterval2) {\n            intersection *= -1;\n        }\n\
    \        if (interval1MinusMinInterval2 < 0 || interval1MinusMinInterval2 > intersection\
    \ ) {\n            return \"NO\";\n        }\n        long length = minInterval1\
    \ + maxInterval2 - intersection;\n        boolean isPrime = length == 2 || length\
    \ == 3 || length == 5 || length == 7 || length == 11 || length == 13 || length\
    \ == 17 || length == 23 || length == 31;\n        return isPrime ? \"YES\" : \"\
    NO\";", "        // Your code here\n        String result;\n        int intersect_length\
    \ = interval1.getEnd() - interval1.getStart() + interval2.getEnd() - interval2.getStart();\n\
    \        boolean isPrimeNumber = true;\n        for (int i = 2; i <= intersect_length;\
    \ i++)\n            if (intersect_length % i == 0) {\n                isPrimeNumber\
    \ = false;\n                break;\n            }\n        if (intersect_length\
    \ == 1 || isPrimeNumber) {\n            result = \"YES\";\n        } else {\n\
    \            result = \"NO\";\n        }\n        return result;", "        boolean\
    \ aisle1 = interval1.getLeft() < interval1.getRight();\n        boolean aisle2\
    \ = interval2.getLeft() < interval2.getRight();\n        boolean aisle3 = aisle1\
    \ & aisle2;\n        boolean aisle4 = !aisle1 & !aisle2;\n        boolean aisle5\
    \ = !aisle1 & aisle2;\n        if (aisle3 & aisle4)\n            return \"NO\"\
    ;\n        else if (aisle3 & aisle5)\n            return \"YES\";\n        else\n\
    \            return \"YES\";", "        long start1 = interval1.getLeft(), start2\
    \ = interval1.getRight();\n        long end1 = interval1.getLeft(), end2 = interval1.getRight();\n\
    \        long lengthOfIntersection = end1 - start1 + end2 - start2;\n        boolean\
    \ checkPrimeNumber = (lengthOfIntersection % 2 == 0);\n        if(checkPrimeNumber)\
    \ {\n            return \"YES\";\n        } else {\n            return \"NO\"\
    ;\n        }", "        List<Pair<Long, Long>> intervals = Stream.of(interval1,\
    \ interval2)\n                .filter(Pair::isNonNull)\n                .collect(Collectors.toList());\n\
    \        long start = intervals.get(0).getLeft();\n        long end = intervals.get(1).getRight();\n\
    \        if (interval1.isNonNull() && interval2.isNonNull()) {\n            if\
    \ (interval1.getLeft() == interval2.getLeft()) {\n                String answer\
    \ = (interval1.getLeft() >= end || interval1.getRight() >= end) ? \"YES\" : \"\
    NO\";\n                return answer;\n            }\n        }\n        if (start\
    \ < end) {\n            String answer = primeTest(start, end) ? \"YES\" : \"NO\"\
    ;\n            return answer;\n        }\n        return \"NO\";", "        long\
    \ inter = interval1.getStart().longValue() & interval2.getStart().longValue();\n\
    \        return ((inter == interval1.getEnd().longValue()) ? \"NO\" : \"YES\"\
    );", "        long length1 = interval1.left - interval1.right;\n        long length2\
    \ = interval2.left - interval2.right;\n        long length = Math.min(length1,\
    \ length2);\n        long start1 = interval1.left;\n        long start2 = interval2.left;\n\
    \        long end1 = interval1.right;\n        long end2 = interval2.right;\n\n\
    \        if (length1 > (length2 * 2))\n            return (\"NO\");\n        if\
    \ (length2 > (length1 * 2))\n            return (\"NO\");\n        if (start1\
    \ >= start2)\n            return (\"NO\");\n        if (end1 >= end2)\n      \
    \      return (\"NO\");\n\n        long min = Math.min(start1, start2);\n    \
    \    long max = Math.max(end1, end2);\n        Set<Long> set1 = new HashSet<>(Arrays.asList(start1,\
    \ end1, start2, end2));\n        long maxSet = max(set1, 2);\n        long minSet\
    \ = min(set1, 2);\n\n        if (maxSet != (max * 2))\n            return (\"\
    NO\");\n        if (minSet != (min * 2))\n            return (\"NO\");\n\n   \
    \     if (length != 1) {\n            long i = 1;\n            long j = 1;\n \
    \           while (i <= maxSet && j <= minSet) {\n                if (i <= j)\
    \ {\n                    if (i == j)\n                        return (\"\");\n\
    \                    if (j % i == 0) {\n                        if (j - i == 1)\n\
    \                            return (\"YES\");\n                        else\n\
    \                            return (\"NO\");\n                    }\n       \
    \         }\n                i++;\n                j++;\n            }\n     \
    \   }\n        return (\"NO\");", "        Long start = Math.min(interval1.getLeft(),\
    \ interval2.getLeft());\n        Long end = Math.max(interval1.getRight(), interval2.getRight());\n\
    \        Pair<Long, Long> intersection;\n        if (start > end) {\n        \
    \    intersection = Pair.with(0l, Long.MAX_VALUE);\n        } else if (start ==\
    \ end) {\n            intersection = Pair.with(0l, 0);\n        } else {\n   \
    \         intersection = Pair.with(Long.MAX_VALUE, Long.MAX_VALUE);\n        }\n\
    \        if (interval1.getLeft() < interval2.getLeft() && intersection.getLeft()\
    \ < interval1.getRight()) {\n            intersection.setLeft(intersection.getRight());\n\
    \        } else if (interval1.getLeft() < interval2.getLeft() && intersection.getLeft()\
    \ > interval1.getRight()) {\n            intersection.setLeft(interval1.getRight());\n\
    \        } else if (interval1.getRight() > interval2.getRight() && intersection.getRight()\
    \ < interval1.getLeft()) {\n            intersection.setRight(interval1.getLeft());\n\
    \        } else if (interval1.getRight() > interval2.getRight() && intersection.getRight()\
    \ > interval1.getLeft()) {\n            intersection.setRight(interval2.getLeft());\n\
    \        }\n        if (interval1.getLeft() < interval2.getLeft() && interval1.getRight()\
    \ > interval2.getRight()) {\n            if (intersection.getLeft() < intersection.getRight())\
    \ {\n                return \"NO\";\n            }\n            if (intersection.getLeft()\
    \ > intersection.getRight()) {\n                return \"YES\";\n            }\n\
    \        } else if (interval1.getLeft() > interval2.getLeft() && interval1.getRight()\
    \ < interval2.getRight()) {\n            if (intersection.getLeft() > intersection.getRight())\
    \ {\n                return \"YES\";\n            }\n            if (intersection.getLeft()\
    \ < intersection.getRight()) {\n                return \"NO\";\n            }\n\
    \        } else if (interval1.getLeft() == interval2.getLeft() && interval1.getRight()\
    \ == interval2.getRight()) {\n            if (intersection.getLeft() != intersection.getRight())\
    \ {\n                return \"YES\";\n            }\n        }\n        return\
    \ \"NO\";", "        long start = interval1.getFirst();\n        long end = interval2.getFirst();\n\
    \        long length = interval1.getSecond() - interval1.getFirst();\n       \
    \ long length2 = interval2.getSecond() - interval2.getFirst();\n        if (length\
    \ == length2) {\n            long a = start;\n            long b = end;\n    \
    \        long c = length * length;\n            long d = Math.pow(length, 2);\n\
    \            long e = Math.pow(length2, 2);\n            long f = Math.pow(length,\
    \ 2);\n            long g = Math.pow(length2, 2);\n            long h = 1;\n \
    \           long i = 1;\n            long j = 1;\n            long k = -1;\n \
    \           long l = -1;\n            long m = 1;\n            long n = -1;\n\
    \            long p = 1;\n            long q = 1;\n            long r = 1;\n \
    \           long s = 1;\n            long t = 1;\n            long u = 1;\n  \
    \          long v = -1;\n            long w = 1;\n            long x = -1;\n \
    \           long y = 1;\n            long z = 1;\n            long aa = -1;\n\
    \            long ab = 1;\n            long ac = 1;\n            long ad = 1;\n\
    \            long ae = 1;\n            long af = 1;\n            long ag = 1;\n\
    \            long ah = 1;\n            long ai = 1;\n            long aj = 1;\n\
    \            long ak = 1;\n            long al = -1;\n            long am = -1;\n\
    \            long an = -1;\n            long ap = -1;\n            long aq = -1;\n\
    \            long ar = -1;\n            long as = -1;\n            long at = -1;\n\
    \            long au = -1;\n            long av = -1;\n            long aw = -1;\n\
    \            long ax = -1;\n            long ay = -1;\n            long az = -1;\n\
    \            long ba = -1;\n            long bb = 1;\n            long bc = 1;\n\
    \            long bd = 1;\n            long be = 1;\n            long bf = 1;\n\
    \            long bg = 1;\n            long bh = -1;\n            long bi = -1;\n\
    \            long bj = 1;\n            long bk = -1;\n            long bl = -1;\n\
    \            long bm = -1;\n            long bn = -1;\n            long bp = 1;\n\
    \            long bq = 1;\n            long br = 1;\n            long bs = 1;\n\
    \            long bt = 1;\n            long bu = 1;\n            long bv = -1;\n\
    \            long bw = -1;\n            long bx = -1;\n            long by = -1;\n\
    \            long bz = -1;\n            long ca = -1;\n            long cb = 1;\n\
    \            long cc = 1;\n            long cd = 1;\n            long ce = 1;\n\
    \            long cf = 1;\n            long cg", "        Interval i1 = new Interval(interval1.getLeft(),\
    \ interval1.getRight());\n        Interval i2 = new Interval(interval2.getLeft(),\
    \ interval2.getRight());\n        Interval intersection = i1.getIntersection(i2);\n\
    \        int len = intersection.getLength();\n        if (len == 2 && isPrime(len))\
    \ return \"YES\";\n        return \"NO\";", "        Pair<Long, Long> intersection\
    \ = interval1.getValue().min(interval2.getValue());\n        return intersection.isPrime()\
    \ ? \"YES\" : \"NO\";", "        // Your code goes here\n        interval1.getValue().compareTo(interval2.getValue())\
    \ == -1 ? return \"NO\" : null;\n        interval1.getValue().compareTo(interval2.getValue())\
    \ == 1 ? return \"YES\" : null;\n        int count = 0;\n        for(long i =\
    \ interval1.getValue(), j = interval2.getValue(); i <= j; i += 1, j += 1){\n \
    \           if(interval1.getValue() <= j && !((j - i) % 2 == 0)){\n          \
    \      count = count + 1;\n            }\n        }\n        if(count % 2 == 0)\
    \ return \"YES\";\n        return \"NO\";", "        Set<Pair<Long, Long>> intervals\
    \ = new HashSet<>();\n        intervals.add(interval1);\n        intervals.add(interval2);\n\
    \        long l1 = interval1.getLeft();\n        long l2 = interval1.getRight();\n\
    \        long r1 = interval2.getLeft();\n        long r2 = interval2.getRight();\n\
    \        if ((l1 < r2) || (l2 < r1)) {\n            return \"NO\";\n        }\n\
    \        if (interval1.getLeft() < interval2.getRight()) {\n            intervals.add(interval2);\n\
    \            intervals.add(interval1);\n            intervals.remove(interval2);\n\
    \            intervals.remove(interval1);\n        } else {\n            intervals.add(interval1);\n\
    \            intervals.add(interval2);\n            intervals.remove(interval1);\n\
    \            intervals.remove(interval2);\n        }\n        long length = intervals.stream()\n\
    \                .map(x -> x.getLeft() < x.getRight()? r2-x.getRight(): l2-x.getLeft())\n\
    \                .sum();\n        if (length%2 == 0) {\n            return \"\
    YES\";\n        }\n        return \"NO\";", "        Long start = interval1.first;\n\
    \        Long end = interval1.second;\n        Long start2 = interval2.first;\n\
    \        Long end2 = interval2.second;\n\n        if (start > end) {\n       \
    \     if (start > start2) {\n                return \"NO\";\n            } else\
    \ {\n                return \"YES\";\n            }\n        }\n\n        if (end\
    \ > end2) {\n            return \"NO\";\n        } else {\n            long intervalLength\
    \ = end2 - start2;\n            if (intervalLength != 0) {\n                long\
    \ newIntervalLength = end - start;\n                boolean isPrimeNumber = false;\n\
    \                for (int i = 0; i < newIntervalLength; i++) {\n             \
    \       if (newIntervalLength % i == 0) {\n                        isPrimeNumber\
    \ = true;\n                    }\n                }\n                if (isPrimeNumber)\
    \ {\n                    return \"YES\";\n                } else {\n         \
    \           return \"NO\";\n                }\n            } else {\n        \
    \        return \"NO\";\n            }\n        }", "        if (interval1.getSecond()\
    \ > interval2.getSecond() || interval2.getSecond() > interval1.getSecond()) {\n\
    \            return \"NO\";\n        }\n        boolean flag = true;\n       \
    \ for (Pair<Long, Long> pair : new Pair<>(interval1, interval2)) {\n         \
    \   long start = pair.getFirst();\n            long end = pair.getSecond();\n\
    \            if (start > end) {\n                end = start;\n            }\n\
    \            long a = start;\n            long b = end;\n            while (a\
    \ < b) {\n                flag = flag ? isPrime(b) : false;\n                a++;\n\
    \                b++;\n            }\n        }\n        return \"YES\" if (flag)\
    \ ? \"YES\" : \"NO\";", "        Pair<Long, Long> left = new Pair<Long, Long>(interval1.getLeft(),\
    \ interval2.getLeft());\n        Pair<Long, Long> right = new Pair<Long, Long>(interval1.getRight(),\
    \ interval2.getRight());\n        return primeCheck(left, \"NO\") && primeCheck(right,\
    \ \"NO\") && primeCheck(intersection(left, right), \"YES\");", "        Pair<Long,\
    \ Long> p1 = Pair.of(interval1.left, interval1.right);\n        Pair<Long, Long>\
    \ p2 = Pair.of(interval2.left, interval2.right);\n        if ((p2.left < p1.left)\
    \ && (p2.right > p1.right))\n            return String.format(\"YES\");\n    \
    \    if ((p2.left > p1.left) && (p2.right < p1.right))\n            return String.format(\"\
    NO\");\n        return \"NO\";", "        Set<Long> left = new HashSet<>();\n\
    \        Set<Long> right = new HashSet<>();\n        Pair<Long, Long> intersect\
    \ = null;\n        if (interval1.getLeft() >= interval2.getLeft() && interval1.getLeft()\
    \ <= interval2.getRight()) {\n            if (interval1.getRight() > interval2.getLeft()\
    \ && interval1.getRight() < interval2.getRight()) {\n                left.add(interval1.getLeft());\n\
    \                left.add(interval1.getRight());\n                right.add(interval2.getLeft());\n\
    \                right.add(interval2.getRight());\n            }\n           \
    \ if (interval1.getLeft() > interval2.getLeft() && interval1.getLeft() < interval2.getRight())\
    \ {\n                left.add(interval1.getLeft());\n                left.add(interval1.getRight());\n\
    \                right.add(interval2.getLeft());\n                right.add(interval2.getRight());\n\
    \            }\n        }\n        if (interval1.getLeft() > interval2.getLeft()\
    \ && interval1.getLeft() <= interval2.getRight()) {\n            if (interval1.getRight()\
    \ > interval2.getLeft() && interval1.getRight() < interval2.getRight()) {\n  \
    \              left.add(interval1.getLeft());\n                left.add(interval1.getRight());\n\
    \                right.add(interval2.getLeft());\n                right.add(interval2.getRight());\n\
    \            }\n            if (interval1.getLeft() > interval2.getLeft() && interval1.getLeft()\
    \ < interval2.getRight()) {\n                left.add(interval1.getLeft());\n\
    \                left.add(interval1.getRight());\n                right.add(interval2.getLeft());\n\
    \                right.add(interval2.getRight());\n            }\n        }\n\
    \        if (interval1.getLeft() <= interval2.getLeft() && interval1.getLeft()\
    \ > interval2.getRight()) {\n            if (interval1.getRight() > interval2.getLeft()\
    \ && interval1.getRight() < interval2.getRight()) {\n                left.add(interval1.getLeft());\n\
    \                left.add(interval1.getRight());\n                right.add(interval2.getLeft());\n\
    \                right.add(interval2.getRight());\n            }\n           \
    \ if (interval1.getLeft() > interval2.getLeft() && interval1.getLeft() < interval2.getRight())\
    \ {\n                left.add(interval1.getLeft());\n                left.add(interval1.getRight());\n\
    \                right.add(interval2.getLeft());\n                right.add(interval2.getRight());\n\
    \            }\n        }\n        if (left.size() == ", "        \n        long\
    \ start = Math.min(interval1.getFirst(), interval2.getFirst());\n        long\
    \ end = Math.max(interval1.getSecond(), interval2.getSecond());\n        \n  \
    \      if (start >= end) {\n            return \"NO\";\n        }\n        \n\
    \        long intersection = (end - start);\n        \n        if (interval1.getFirst()\
    \ >= interval2.getFirst()) {\n            intersection += (interval1.getFirst()\
    \ - interval2.getFirst());\n        }\n        if (interval1.getSecond() >= interval2.getSecond())\
    \ {\n            intersection += (interval1.getSecond() - interval2.getSecond());\n\
    \        }\n        if (intersection < interval1.getSecond() + interval2.getSecond())\
    \ {\n            return \"YES\";\n        }\n        \n        return \"NO\";",
  "        long end1 = interval1.getRight();\n        long end2 = interval2.getRight();\n\
    \        long left1 = interval1.getLeft();\n        long left2 = interval2.getLeft();\n\
    \        if(left1 > left2) { \n            Pair<Long, Long> temp = interval1;\n\
    \            interval1 = interval2;\n            interval2 = temp;\n        }\n\
    \        if(left1 > end2) return \"NO\";\n        if(left2 > end1) return \"NO\"\
    ;\n        if(left2 == left1) return \"YES\";\n        long length1 = end1 - left1;\n\
    \        long length2 = end2 - left2;\n        if(length1 < (length2 - 1) || (length2\
    \ - 1) < length1) return \"NO\";\n        long length = 0;\n        long temp1\
    \ = 0;\n        long temp2 = 0;\n        while((temp1 == interval1.getRight())\
    \ && (temp2 == interval2.getRight())) { \n            if(temp2 == interval1.getRight())\
    \ temp2++;\n            if(temp2 == interval2.getRight()) temp2++;\n         \
    \   if(temp1 < interval1.getLeft()) temp1++;\n            if(temp2 < interval2.getLeft())\
    \ temp2++;\n            length++;\n        }\n        if(length == 2 || (length\
    \ == 1 && length2 > length)) return \"YES\";\n        return \"NO\";", "     \
    \   \n        long start1 = interval1.getKey();\n        long end1 = interval1.getValue();\n\
    \        long start2 = interval2.getKey();\n        long end2 = interval2.getValue();\n\
    \        \n        if(start1 >= start2 && end1 <= end2)\n            return \"\
    NO\";\n        if(start1 <= start2 && end1 >= end2)\n            return \"NO\"\
    ;\n        if(start1 < start2 && end1 >= end2)\n            return \"NO\";\n \
    \       if(start1 > start2 && end1 <= end2)\n            return \"NO\";\n    \
    \    \n        if(start1 < start2 && end1 <= end2){\n            Pair<Long, Long>\
    \ temp = new Pair<>(start1, end1);\n            Pair<Long, Long> temp2 = new Pair<>(start2,\
    \ end2);\n            Pair<Long, Long> temp3 = new Pair<>();\n            boolean\
    \ nointersected = true;\n            boolean nointersected = false;\n        \
    \    boolean nointersected = true;\n            boolean nointersected = true;\n\
    \            for(int i = 0; i < end1-start2; i++){\n                if(temp.getKey()\
    \ < temp2.getKey()){\n                    temp3 = new Pair<>(temp.getKey(), temp.getValue());\n\
    \                    temp = new Pair<>(temp.getKey()+1, temp.getValue());\n  \
    \              }\n                else if(temp.getKey() > temp2.getKey()){\n \
    \                   temp3 = new Pair<>(temp2.getKey(), temp2.getValue());\n  \
    \                  temp2 = new Pair<>(temp2.getKey()-1, temp2.getValue());\n \
    \               }\n                else if(temp.getKey() == temp2.getKey()){\n\
    \                    if(temp.getValue() <= temp2.getValue()){\n              \
    \          Pair<Long, Long> temp4 = new Pair<>(temp.getKey(), temp.getValue());\n\
    \                        Pair<Long, Long> temp5 = new Pair<>(temp2.getKey(), temp2.getValue());\n\
    \                        nointersected = true;\n                        for(int\
    \ j = 0; j < temp.getValue() - temp2.getValue(); j++){\n                     \
    \       Pair<Long, Long> temp6 = new Pair<>(temp4.getKey(), temp4.getValue());\n\
    \                            temp4 = new Pair<>(temp4.getKey()+1, temp4.getValue());\n\
    \                            nointersected = true;\n                        }\n\
    \                        for(int j = 0; j < temp2.getValue() - temp4.getValue();\
    \ j++){\n                            Pair<Long, Long> temp7 = new Pair<>(temp5.getKey(),\
    \ temp5.getValue());\n                            temp5 = new Pair<>(temp5.getKey()-1,\
    \ temp5.getValue());\n                            no", "        Set<Long> interval1Start\
    \ = new HashSet<Long>(interval1.getValue());\n        Set<Long> interval1End =\
    \ new HashSet<Long>(interval1.getValue());\n        interval1Start.add(interval1.getKey());\n\
    \        interval1End.add(interval1.getKey());\n\n        Set<Long> interval2Start\
    \ = new HashSet<Long>(interval2.getValue());\n        Set<Long> interval2End =\
    \ new HashSet<Long>(interval2.getValue());\n        interval2Start.add(interval2.getKey());\n\
    \        interval2End.add(interval2.getKey());\n\n        // Check if one of the\
    \ intervals contains the other one\n        if (interval1Start.isEmpty() || interval1End.isEmpty()\
    \ || interval2Start.isEmpty() || interval2End.isEmpty())\n            return \"\
    NO\";\n\n        //intersection\n        Set<Long> intersectionStart = new HashSet<Long>();\n\
    \        Set<Long> intersectionEnd = new HashSet<Long>();\n\n        for (Long\
    \ interval1Element:interval1Start) {\n            if (interval1Element > interval2End.get())\n\
    \                return \"NO\";\n        }\n\n        for (Long interval1Element:interval1End)\
    \ {\n            if (interval1Element < interval2Start.get())\n              \
    \  return \"NO\";\n        }\n\n        //check if intersect\n        for (Long\
    \ interval1Element:interval1Start) {\n            if (interval2Start.contains(interval1Element))\n\
    \                intersectionStart.add(interval1Element);\n        }\n\n     \
    \   for (Long interval1Element:interval1End) {\n            if (interval2End.contains(interval1Element))\n\
    \                intersectionEnd.add(interval1Element);\n        }\n\n       \
    \ //check intersection\n        if (intersectionStart.isEmpty() || intersectionEnd.isEmpty())\n\
    \            return \"NO\";\n\n        //check intersection size\n        if (intersectionStart.size()\
    \ > intersectionEnd.size())\n            return \"NO\";\n\n        //check prime\n\
    \        if (intersectionStart.size() % 2 == 0 && intersectionEnd.size() % 2 ==\
    \ 0) {\n            System.out.println(\"YES\");\n            return \"YES\";\n\
    \        }\n\n        return \"NO\";", "        long start1 = interval1.first;\n\
    \        long end1 = interval1.second;\n        long start2 = interval2.first;\n\
    \        long end2 = interval2.second;\n        // Intersection of interval 1\
    \ and interval 2.\n        long intersection = (start1 < end2 && start2 < end1)\
    \ ? end1 - start2 : start2 - start1;\n        if (intersection % 2 == 0) {\n \
    \           return \"NO\";\n        }\n        // Intersection is equal to interval1.\n\
    \        if (start1 == end1 && start2 == end2) {\n            return \"NO\";\n\
    \        }\n        long length = (start1 < end1 && start2 < end2) ? end1 - start1\
    \ : start2 - start1;\n        boolean isPrime = true;\n        for (int i = 2;\
    \ i < length && isPrime; i++) {\n            if (length % i == 0) {\n        \
    \        isPrime = false;\n            }\n        }\n        if (isPrime) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";", "        Pair<Long,\
    \ Long> intersection = interval1.intersection(interval2);\n        Long start1\
    \ = interval1.getLeft();\n        Long end1 = interval1.getRight();\n        Long\
    \ start2 = interval2.getLeft();\n        Long end2 = interval2.getRight();\n \
    \       Long startIntersection = intersection.getLeft();\n        Long endIntersection\
    \ = intersection.getRight();\n        if (start1 < start2) return \"NO\";\n  \
    \      if (start1 > start2) return \"YES\";\n        if (end1 < end2) return \"\
    NO\";\n        if (end1 > end2) return \"YES\";\n        if ((startIntersection\
    \ - start1) * (endIntersection - end1) != (endIntersection - end1))\n        \
    \    return \"NO\";\n        return \"YES\";", "        long result = 0;\n   \
    \     Long start = interval1.getValue1();\n        Long end = interval1.getValue2();\n\
    \        Long start_2 = interval2.getValue1();\n        Long end_2 = interval2.getValue2();\n\
    \        if (start > end) {\n            Long temp = start;\n            start\
    \ = end;\n            end = temp;\n        }\n        if (start_2 > end_2) {\n\
    \            Long temp_2 = start_2;\n            start_2 = end_2;\n          \
    \  end_2 = temp_2;\n        }\n        long temp = end; // save end here\n   \
    \     long temp_2 = end_2;\n        if (start >= start_2) {\n            result\
    \ = temp_2;\n        }\n        if (start <= end_2) {\n            result = temp;\n\
    \        }\n        if (result == temp) {\n            return (\"YES\");\n   \
    \     } else {\n            return (\"NO\");\n        }", "        if (interval1.getLeft()\
    \ > interval2.getRight() || interval1.getRight() < interval2.getLeft()) {\n  \
    \          return \"NO\";\n        }\n        Pair<Long, Long> temp = new Pair<>(interval1.getRight(),\
    \ interval1.getLeft());\n        if (interval1.getLeft() >= interval2.getLeft())\
    \ {\n            if (interval1.getRight() >= interval2.getRight()) {\n       \
    \         temp = Pair.with(interval1.getLeft(), interval2.getLeft());\n      \
    \      } else {\n                temp = Pair.with(interval1.getRight(), interval2.getRight());\n\
    \            }\n        }\n        Long left1 = interval1.getLeft();\n       \
    \ Long right1 = interval1.getRight();\n        Long left2 = interval2.getLeft();\n\
    \        Long right2 = interval2.getRight();\n        if (left1 > right2) {\n\
    \            return intersection(Pair.with(left2, right2), temp);\n        } else\
    \ {\n            return intersection(Pair.with(left1, right1), temp);\n      \
    \  }", "        long intersect = interval1.getStart() <= interval2.getEnd() &&\
    \ interval2.getStart() <= interval1.getEnd() ? Math.min(interval1.getEnd(), interval2.getEnd())\
    \ : Math.max(interval1.getStart(), interval2.getStart());\n        long length\
    \ = interval1.getEnd() - interval1.getStart();\n        if (length < 2) return\
    \ \"NO\";\n        if (length == 2) return \"YES\";\n        boolean isPrime =\
    \ false;\n        PrimeChecker p = new PrimeChecker();\n        if (length % 2\
    \ == 0) {\n            isPrime = p.isPrime(intersect);\n        } else if (length\
    \ % 3 == 0) {\n            isPrime = p.isPrime(intersect / 2) && p.isPrime(intersect\
    \ / 3);\n        } else if (length % 5 == 0) {\n            isPrime = p.isPrime(intersect\
    \ / 2) && p.isPrime(intersect / 3) && p.isPrime(intersect / 5);\n        } else\
    \ {\n            isPrime = p.isPrime(intersect / 3) && p.isPrime(intersect / 5);\n\
    \        }\n        if (isPrime) {\n            return \"YES\";\n        } else\
    \ {\n            return \"NO\";\n        }", "        long start = Math.min(interval1.getLeft(),\
    \ interval2.getLeft());\n        long end = Math.max(interval1.getRight(), interval2.getRight());\n\
    \        return isPrime(start, end) ? \"YES\" : \"NO\";", "        if (interval1.start\
    \ > interval2.end) {\n            Pair<Long, Long> temp = interval1;\n       \
    \     interval1 = interval2;\n            interval2 = temp;\n        }\n\n   \
    \     if (interval1.end < interval2.start) {\n            Pair<Long, Long> temp\
    \ = interval1;\n            interval1 = interval2;\n            interval2 = temp;\n\
    \        }\n\n        if (interval1.end >= interval2.start && interval1.start\
    \ <= interval2.end) {\n            Interval<Long> interval = Interval.of(interval1.start,\
    \ interval1.end);\n            Interval<Long> interval2 = Interval.of(interval2.start,\
    \ interval2.end);\n            long intersection = interval.intersection(interval2).length;\n\
    \            if (intersection == interval1.length()) return \"YES\";\n       \
    \     else return \"NO\";\n        }\n        else return \"NO\";", '        return
    intersection(interval1, interval2, (long)1, (long)1);', "        String result;\n\
    \        long length = 0;\n        if (interval1.getLeft() > interval2.getLeft())\n\
    \            length = interval1.getLeft() - interval2.getLeft();\n        else\n\
    \            length = interval2.getLeft() - interval1.getLeft();\n        if (length\
    \ == 0) {\n            if (interval1.getRight() >= interval2.getRight())\n   \
    \             result = \"NO\";\n            else\n                result = \"\
    YES\";\n        } else {\n            if (interval1.getLeft() <= interval2.getRight())\n\
    \                result = \"NO\";\n            else\n                result =\
    \ \"YES\";\n        }\n        return result;", "        int start1 = interval1.getFirst();\n\
    \        int end1 = interval1.getSecond();\n        int start2 = interval2.getFirst();\n\
    \        int end2 = interval2.getSecond();\n        long inter = interval1.getFirst()\
    \ >= interval2.getFirst()\n                ? Math.min(start1, start2) < Math.max(end1,\
    \ end2)\n                : Math.min(start1, start2) <= Math.max(end1, end2);\n\
    \n        if (inter == 0)\n            return \"NO\";\n        Pair<Long, Long>\
    \ left = new Pair<>(Math.min(start1, start2), Math.max(end1, end2));\n       \
    \ Pair<Long, Long> right = new Pair<>(Math.max(start1, start2), Math.min(end1,\
    \ end2));\n        Pair<Long, Long> left2 = new Pair<>(Math.min(start2, start1),\
    \ Math.max(end2, end1));\n        Pair<Long, Long> right2 = new Pair<>(Math.max(start2,\
    \ start1), Math.min(end2, end1));\n\n        if (inter > 0) {\n            int\
    \ mid1 = interval1.getFirst() >= interval1.getSecond() ? interval1.getFirst()\
    \ + interval1.getSecond() / 2 : interval1.getFirst();\n            int mid2 =\
    \ interval2.getFirst() >= interval2.getSecond() ? interval2.getFirst() + interval2.getSecond()\
    \ / 2 : interval2.getFirst();\n            if (start1 <= end1 && start2 <= end2)\n\
    \                return intersection(left, new Pair<>(mid1, mid2));\n        \
    \    else if (start1 <= end1 && start2 < end2)\n                return intersection(new\
    \ Pair<>(mid1, mid2), right);\n            else if (start1 < end1 && start2 <=\
    \ end2)\n                return intersection(new Pair<>(mid1, mid2), left);\n\
    \            else if (start1 < end1 && start2 < end2)\n                return\
    \ intersection(left, right);\n            else if (start1 <= end1 && start2 >\
    \ end2)\n                return intersection(left2, new Pair<>(mid1, mid2));\n\
    \            else if (start1 < end1 && start2 > end2)\n                return\
    \ intersection(right2, new Pair<>(mid1, mid2));\n            else if (start1 <=\
    \ end1 && start2 > end2)\n                return intersection(new Pair<>(mid1,\
    \ mid2), right2);\n            else if (start1 < end1 && start2 > end2)\n    \
    \            return intersection(new Pair<>(mid1, mid2), left2);\n        }\n\
    \        return \"NO\";", "        // write your code here\n        return \"\"\
    ;", "        long a = interval1.getValue();\n        long b = interval2.getValue();\n\
    \        long x = Math.min(interval1.getValue(), interval2.getValue());\n    \
    \    long y = Math.max(interval1.getValue(), interval2.getValue());\n        if\
    \ ((x == 0) || (y == 0)) {\n            return \"NO\";\n        }\n        long\
    \ product = x;\n        while (b < y) {\n            product *= b;\n         \
    \   b ++;\n        }\n        long factor = 2;\n        while (factor <= product)\
    \ {\n            if ((product % factor) == 0) {\n                long rem = product\
    \ % factor;\n                product /= factor;\n                factor ++;\n\
    \                if (rem == 0) {\n                    return \"YES\";\n      \
    \          }\n            } else {\n                factor++;\n            }\n\
    \        }\n        return \"NO\";", "        long start1 = interval1.getLeft();\n\
    \        long end1 = interval1.getRight();\n        long start2 = interval2.getLeft();\n\
    \        long end2 = interval2.getRight();\n        long intersectionStart;\n\
    \        long intersectionEnd;\n        long intersectionLength;\n        if (start2\
    \ <= end1 && start2 >= end1)\n            return intersection(start1, end1, start2,\
    \ end2);\n        if (start1 <= end2 && start1 >= end2)\n            return intersection(start1,\
    \ end1, start2, end2);\n        if (start1 > end2 && start2 > end1)\n        \
    \    return intersection(start1, end1, start2, end2);\n        if (start1 < end2\
    \ && start2 < end1)\n            return intersection(start1, end1, start2, end2);\n\
    \        if (start1 == end1 && start2 == end2)\n            return \"YES\";\n\
    \        if (start1 == end1 && start2 <= end2)\n            return \"NO\";\n \
    \       if (start1 == end1 && start2 >= end2)\n            return \"NO\";\n  \
    \      if (start2 <= end1 && start1 <= end2)\n            return \"NO\";\n   \
    \     if (start2 >= end1 && start1 >= end2)\n            return \"NO\";\n    \
    \    if (start2 < end1 && start1 > end2)\n            return \"NO\";\n       \
    \ if (start2 < end2 && start2 > end1)\n            return \"NO\";\n        if\
    \ (start1 < end2 && start2 < end1)\n            return \"NO\";\n        intersectionStart\
    \ = Math.max(start1, start2);\n        intersectionEnd = Math.min(end1, end2);\n\
    \        intersectionLength = intersectionEnd - intersectionStart + 1;\n     \
    \   if (intersectionLength == 1 || intersectionLength == 2)\n            return\
    \ \"YES\";\n        return \"NO\";", "        Set<Pair<Long, Long>> set1 = new\
    \ HashSet<>();\n        Set<Pair<Long, Long>> set2 = new HashSet<>();\n      \
    \  Set<Pair<Long, Long>> set3 = new HashSet<>();\n\n        long start = Math.min(interval1.getLeft(),\
    \ interval2.getLeft());\n        long end   = Math.max(interval1.getRight(), interval2.getRight());\n\
    \n        if (start > end) {\n            Pair<Long, Long> interval1swap = Pair.with(interval1.getRight(),\
    \ interval1.getLeft());\n            Pair<Long, Long> interval2swap = Pair.with(interval2.getRight(),\
    \ interval2.getLeft());\n            Pair<Long, Long> interval3swap = Pair.with(interval3.getRight(),\
    \ interval3.getLeft());\n            Pair<Long, Long> interval4swap = Pair.with(interval4.getRight(),\
    \ interval4.getLeft());\n            set1.add(interval1swap);\n            set2.add(interval2swap);\n\
    \            set3.add(interval3swap);\n            set4.add(interval4swap);\n\
    \            start = Math.min(interval1swap.getLeft(), interval2swap.getLeft());\n\
    \            end   = Math.max(interval1swap.getRight(), interval2swap.getRight());\n\
    \        }\n\n        if (end == start || start > end) {\n            return \"\
    NO\";\n        }\n\n        set1.add(Pair.with(start, start + 1));\n        set2.add(Pair.with(start,\
    \ start + 1));\n\n        long result = checkPrime(start, end);\n\n        if\
    \ (result != Long.MAX_VALUE) {\n            return \"YES\";\n        }\n\n   \
    \     set2.add(Pair.with(end, end + 1));\n        set3.add(Pair.with(end, end\
    \ + 1));\n\n        result = checkPrime(start, end);\n\n        if (result !=\
    \ Long.MAX_VALUE) {\n            return \"YES\";\n        }\n\n        set1.add(Pair.with(start\
    \ + 1, end));\n        set2.add(Pair.with(start + 1, end));\n        set3.add(Pair.with(start\
    \ + 1, end));\n        set4.add(Pair.with(start + 1, end));\n\n        result\
    \ = checkPrime(start, end);\n\n        if (result != Long.MAX_VALUE) {\n     \
    \       return \"YES\";\n        }\n\n        set1.add(Pair.with(start + 2, end));\n\
    \        set2.add(Pair.with(start + 2, end));\n\n        result = checkPrime(start,\
    \ end);\n\n        if (result != Long.MAX_VALUE) {\n            return \"YES\"\
    ;\n        }\n\n        set1.add(Pair.with(end, end + 1));\n        set3.add(Pair.with(end,\
    \ end + 1));\n\n        result = checkPrime(start, end);\n\n        if (result\
    \ != Long.MAX_VALUE", "        Long start = interval1.getKey();\n        Long\
    \ end = interval1.getValue();\n        Long start2 = interval2.getKey();\n   \
    \     Long end2 = interval2.getValue();\n        if (start <= end) {\n       \
    \     if (start2 <= end2) {\n                if (start > start2) start = start2;\n\
    \                if (end < end2) end = end2;\n                if (start > end)\
    \ start = end;\n                if (start > end) end = start;\n              \
    \  return \"YES\";\n            } else {\n                if (end > start2) end\
    \ = start2;\n                if (start < start2) start = start2;\n           \
    \     if (end < start2) end = start2;\n                return \"NO\";\n      \
    \      }\n        } else {\n            if (start2 > end2) start2 = end2;\n  \
    \          if (start2 < end2) start2 = end2;\n            if (start2 > end2) start2\
    \ = end;\n            if (start2 < end2) end2 = end;\n            return \"YES\"\
    ;\n        }\n        return \"NO\";", "        long start = Math.min(interval1.getKey(),\
    \ interval2.getKey());\n        long end = Math.max(interval1.getValue(), interval2.getValue());\n\
    \        long length = end - start;\n        if (length == 0)\n            return\
    \ \"NO\";\n        for (long i = start + 1; i <= end; i++) {\n            if (length\
    \ != i && length != i + 1) {\n                length = i + 1;\n              \
    \  break;\n            }\n        }\n        if (length == 2 && interval1.getKey()\
    \ < interval2.getKey()) {\n            Pair<Long, Long> temp = interval1;\n  \
    \          interval1 = interval2;\n            interval2 = temp;\n        }\n\
    \        if (length == 2 && interval1.getValue() < interval2.getValue()) {\n \
    \           Pair<Long, Long> temp = interval1;\n            interval1 = interval2;\n\
    \            interval2 = temp;\n        }\n        if (length == 2 && ((interval1.getKey()\
    \ + interval1.getValue()) <= interval2.getValue() || (interval1.getKey() + interval1.getValue())\
    \ > interval2.getValue())) {\n            Pair<Long, Long> temp = interval1;\n\
    \            interval1 = interval2;\n            interval2 = temp;\n        }\n\
    \        if (interval1.getKey() + interval1.getValue() == interval2.getKey() +\
    \ interval2.getValue()) {\n            long mid1 = (interval1.getKey() + interval1.getValue())\
    \ / 2;\n            long mid2 = (interval2.getKey() + interval2.getValue()) /\
    \ 2;\n            Pair<Long, Long> m1 = interval1, m2 = interval2;\n         \
    \   while (true) {\n                if (m1.getKey() >= m2.getKey() && m1.getKey()\
    \ <= m2.getValue()) {\n                    if (m1.getValue() >= m2.getValue()\
    \ && m2.getKey() <= m2.getValue()) {\n                        return \"YES\";\n\
    \                    }\n                    m1 = m2;\n                    m2 =\
    \ m1;\n                }\n                else if (m1.getKey() <= m2.getKey()\
    \ && m1.getKey() >= m2.getValue()) {\n                    if (m2.getKey() <= m2.getValue()\
    \ && m1.getKey() >= m1.getValue()) {\n                        return \"YES\";\n\
    \                    }\n                    m1 = m2;\n                    m2 =\
    \ m1;\n                }\n                else if (m1.getKey() >= m2.getKey()\
    \ && m1.getKey() <= m2.getValue()) {\n                    if (m1.getValue() <=\
    \ m2.getValue() && m2.getKey() >= m2.getValue()) {\n                        return\
    \ \"YES\";\n                    }\n                    m1 = m2;\n            \
    \        m2 = m1;\n                }\n                else {\n               \
    \     if (m2.getKey() <= m2.getValue() && m1.", "        long start = interval1.getLeft();\n\
    \        long end = interval1.getRight();\n        long intersected = end - start;\n\
    \        if (intersected == 0) {\n            return \"NO\";\n        }\n    \
    \    long length_intersection = intersected / 2;\n        if (length_intersection\
    \ > 2) {\n            return \"NO\";\n        }\n        long start_intersected\
    \ = start + length_intersection;\n        long end_intersected = end - length_intersection;\n\
    \        long start_intersected_2 = interval2.getLeft() + length_intersection;\n\
    \        long end_intersected_2 = interval2.getRight() - length_intersection;\n\
    \        if (start_intersected >= end_intersected) {\n            if (start_intersected\
    \ >= start_intersected_2) {\n                if (end_intersected >= end_intersected_2)\
    \ {\n                    return \"YES\";\n                }\n            } else\
    \ {\n                if (start_intersected_2 >= end_intersected_2) {\n       \
    \             return \"NO\";\n                }\n            }\n        } else\
    \ {\n            if (start_intersected <= start_intersected_2) {\n           \
    \     if (end_intersected <= end_intersected_2) {\n                    return\
    \ \"YES\";\n                }\n            } else {\n                if (start_intersected_2\
    \ <= end_intersected_2) {\n                    return \"NO\";\n              \
    \  }\n            }\n        }\n        return \"NO\";", "        if(interval1\
    \ == null || interval2 == null){\n            return \"NO\";\n        }\n    \
    \    Pair<Long, Long> intersection = new Pair<Long, Long>();\n        if(interval1.getLeft()\
    \ < interval2.getLeft()){\n            intersection.setLeft(interval1.getLeft());\n\
    \        }else{\n            intersection.setLeft(interval2.getLeft());\n    \
    \    }\n        if(interval1.getRight() < interval2.getRight()){\n           \
    \ intersection.setRight(interval1.getRight());\n        }else{\n            intersection.setRight(interval2.getRight());\n\
    \        }\n        if(intersection.getLeft() >= intersection.getRight()){\n \
    \           return \"NO\";\n        }\n        Set<Long> set = new HashSet<>();\n\
    \        for(long i = intersection.getLeft(); i <= intersection.getRight(); i++){\n\
    \            if(i == interval1.getLeft() || i == interval1.getRight() || i ==\
    \ interval2.getLeft() || i == interval2.getRight()){\n                if(i ==\
    \ interval1.getLeft() || i == interval2.getLeft()){\n                    if(i\
    \ == interval1.getRight() || i == interval2.getRight()){\n                   \
    \     //no intersection between 2 intervals\n                        continue;\n\
    \                    }else{\n                        //intersection between 2\
    \ intervals\n                        break;\n                    }\n         \
    \       }else{\n                    //no intersection between 2 intervals\n  \
    \                  continue;\n                }\n            }else{\n        \
    \        //no intersection between 2 intervals\n                continue;\n  \
    \          }\n            if(i == 1){\n                Set<Long> temp = new HashSet<>();\n\
    \                temp.add(2);\n                temp.add(3);\n                set.add(2);\n\
    \                set.add(3);\n                intersection.setLeft(2);\n     \
    \           intersection.setRight(3);\n                for(long j : temp){\n \
    \                   if(set.contains(j)){\n                        break;\n   \
    \                 }else{\n                        intersection.setLeft(j);\n \
    \                   }\n                }\n                for(long j : temp){\n\
    \                    if(set.contains(j)){\n                        break;\n  \
    \                  }else{\n                        intersection.setRight(j);\n\
    \                    }\n                }\n            }else if(i == 2){\n   \
    \             Set<Long> temp = new HashSet<>();\n                temp.add(1);\n\
    \                temp.add(3);\n                set.add(1);\n                set.add(3);\n\
    \                intersection.setLeft(1);\n                intersection.setRight(3);\n\
    \                for(long j : temp){\n                    if(set.contains(j)){\n\
    \                        break;\n                    }else{\n                \
    \        intersection.setLeft(j);\n                    }\n                }\n\
    \                for(long j", "        boolean isIntersect = interval1.getLeft()\
    \ < interval2.getLeft() && interval1.getRight() < interval2.getRight();\n    \
    \    if (isIntersect) {\n            if (interval1.getLeft() < interval2.getLeft())\
    \ {\n                isIntersect = interval1.getLeft() <= interval2.getRight()\
    \ && (interval2.getLeft() <= interval1.getRight());\n            } else {\n  \
    \              isIntersect = interval2.getLeft() <= interval1.getRight() && (interval1.getLeft()\
    \ <= interval2.getRight());\n            }\n        }\n        return isIntersect\
    \ ? \"YES\" : \"NO\";", "        long start = interval1.getLeft();\n        long\
    \ end = interval1.getRight();\n        long start = interval2.getLeft();\n   \
    \     long end = interval2.getRight();\n\n        long intersection = Long.MAX_VALUE;\n\
    \        long leftMost = Long.MAX_VALUE;\n        long rightMost = Long.MAX_VALUE;\n\
    \n        if (start <= end) {\n            while (start <= end) {\n          \
    \      leftMost = start;\n                while (leftMost <= end && start <= rightMost)\
    \ {\n                    rightMost = end;\n                    while (leftMost\
    \ <= right && start <= rightMost) {\n                        intersection = leftMost\
    \ & right;\n                        if (intersection < intersection) {\n     \
    \                       break;\n                        }\n                  \
    \      leftMost = start + 1;\n                    }\n                    start++;\n\
    \                }\n                end++;\n            }\n        } else {\n\
    \            while (start <= end) {\n                rightMost = end;\n      \
    \          while (leftMost <= end && start <= rightMost) {\n                 \
    \   rightMost = start;\n                    while (leftMost <= end && start <=\
    \ rightMost) {\n                        intersection = leftMost & right;\n   \
    \                     if (intersection < intersection) {\n                   \
    \         break;\n                        }\n                        leftMost\
    \ = start + 1;\n                    }\n                    end--;\n          \
    \      }\n                start++;\n            }\n        }\n\n        if (leftMost\
    \ > rightMost) {\n            return \"NO\";\n        }\n        if (intersection\
    \ == 1) {\n            return \"YES\";\n        }\n        return \"\";", "  \
    \      long a = interval1.getKey();\n        long b = interval2.getKey();\n  \
    \      long c = interval1.getValue();\n        long d = interval2.getValue();\n\
    \        if (c <= d) //if either start or end is out of bound, return \"NO\"\n\
    \            return \"NO\";\n        boolean isPrime = true;\n        for (int\
    \ i = 2; i < Math.min(a, b); i++) {\n            if ((a % i == 0) || (b % i ==\
    \ 0))\n                isPrime = false;\n        }\n        if (isPrime)\n   \
    \         return \"YES\";\n        else\n            return \"NO\";", "      \
    \  boolean isIntersect = false;\n        Pair<Long, Long> intersection = Pair.of(interval1.start,\
    \ interval2.start);\n        if (interval1.start < interval1.end && interval2.start\
    \ < interval2.end) {\n            if (interval1.start < interval2.start && interval1.end\
    \ > interval2.start) {\n                if (interval1.start < interval2.end &&\
    \ interval1.end > interval2.end) {\n                    isIntersect = true;\n\
    \                } else {\n                    intersection = Pair.of(interval1.end,\
    \ interval2.end);\n                    if (intersection.start < intersection.end)\
    \ {\n                        isIntersect = true;\n                    }\n    \
    \            }\n            } else {\n                intersection = Pair.of(interval1.start,\
    \ interval2.end);\n                if (intersection.start < intersection.end)\
    \ {\n                    isIntersect = true;\n                }\n            }\n\
    \        } else {\n            intersection = Pair.of(interval1.end, interval2.start);\n\
    \            if (intersection.start < intersection.end) {\n                isIntersect\
    \ = true;\n            }\n        }\n        if (isIntersect) {\n            long\
    \ interLength = 0;\n            interLength += Math.max(interval1.start, interval2.start);\n\
    \            interLength += Math.max(interval1.end, interval2.end);\n        \
    \    if (interLength == 2 || interLength == 3 || interLength == 5 || interLength\
    \ == 7 || interLength == 11 || interLength == 13 || interLength == 17 || interLength\
    \ == 19 || interLength == 23 || interLength == 29 || interLength == 37 || interLength\
    \ == 41 || interLength == 43 || interLength == 47 || interLength == 53 || interLength\
    \ == 59 || interLength == 71 || interLength == 77 || interLength == 79 || interLength\
    \ == 91 || interLength == 97) {\n                return \"YES\";\n           \
    \ } else {\n                return \"NO\";\n            }\n        } else {\n\
    \            return \"NO\";\n        }", "        if (interval1.getLeft() < interval2.getLeft())\
    \ return \"NO\";\n        if (interval1.getRight() > interval2.getRight()) return\
    \ \"NO\";\n        long start = Math.min(interval1.getLeft(), interval1.getRight());\n\
    \        long end = Math.max(interval1.getLeft(), interval1.getRight());\n   \
    \     if (start <= end) {\n            long len = 0;\n            while (start\
    \ <= end) {\n                long mid = start + (end - start) / 2;\n         \
    \       if (interval1.getLeft() <= mid && mid <= interval1.getRight()) {\n   \
    \                 len = mid - start;\n                    break;\n           \
    \     }\n                if (interval2.getLeft() <= mid && mid <= interval2.getRight())\
    \ {\n                    len = mid - start;\n                    break;\n    \
    \            }\n                start = mid + 1;\n            }\n            if\
    \ (len % 2 == 0) {\n                return \"YES\";\n            } else {\n  \
    \              return \"NO\";\n            }\n        } else {\n            return\
    \ \"NO\";\n        }", "        // Okay, now you know your input intervals\n \
    \       // So you need to check whether they are overlapping\n        // But if\
    \ the intervals intersect then the length of their intersection must be a prime\
    \ number\n        // So we can use a simple algorithm to check if they are overlapping\n\
    \        // And if they intersect then we calculate the length of the intersection\n\
    \        // And if the length of the intersection is prime then return YES\n \
    \       // Otherwise, we return NO\n        Long start = interval1.getLeft();\n\
    \        Long end = interval1.getRight();\n        Long start2 = interval2.getLeft();\n\
    \        Long end2 = interval2.getRight();\n\n        if(start.compareTo(end)\
    \ < 0 \n                && start2.compareTo(end2) < 0) {\n            return \"\
    NO\";\n        }\n\n        long intersect = end - start;\n        long intersect2\
    \ = end2 - start2;\n\n        if (intersect > intersect2) {\n            Long\
    \ temp = end;\n            end = start2;\n            start2 = temp;\n       \
    \ }\n\n        boolean prime = true;\n        if(intersect % 2 == 0 && intersect2\
    \ % 2 == 0) {\n            prime = false;\n        }\n        if(prime == true)\
    \ {\n            return \"YES\";\n        }\n\n        return \"NO\";", "    \
    \    \n        long lengthOfIntersection = interval1.right - interval1.left;\n\
    \        \n        long maxStart = Math.max(interval1.left, interval2.left);\n\
    \        long maxEnd = Math.max(interval1.right, interval2.right);\n        \n\
    \        long minStart = Math.min(interval1.left, interval2.left);\n        long\
    \ minEnd = Math.min(interval1.right, interval2.right);\n        \n        if(minStart\
    \ >= minEnd) {\n            if(maxStart >= maxEnd) {\n                if(maxStart\
    \ >= lengthOfIntersection) {\n                    return \"YES\";\n          \
    \      } else {\n                    return \"NO\";\n                }\n     \
    \       } else {\n                if(maxStart < lengthOfIntersection) {\n    \
    \                return \"YES\";\n                } else {\n                 \
    \   return \"NO\";\n                }\n            }\n        } else {\n     \
    \       if(maxStart >= maxEnd) {\n                if(maxStart >= lengthOfIntersection)\
    \ {\n                    return \"YES\";\n                } else {\n         \
    \           return \"NO\";\n                }\n            } else {\n        \
    \        if(maxStart < lengthOfIntersection) {\n                    return \"\
    YES\";\n                } else {\n                    return \"NO\";\n       \
    \         }\n            }\n        }", '        return isPrime(interval1.getFirst()
    + interval1.getSecond() + interval2.getFirst() + interval2.getSecond());', " \
    \       long start1 = interval1.getKey();\n        long end1 = interval1.getValue();\n\
    \        long start2 = interval2.getKey();\n        long end2 = interval2.getValue();\n\
    \        long intersect = start1 < end2 ? (start2 <= end1 ? start1 : end1) : (start2\
    \ <= end1 ? end1 : start1);\n        long length = end1 < end2 ? (end2 < intersect\
    \ ? end2 : intersect) : end1 < intersect ? intersect : end1;\n        if (length\
    \ == end2 && length == start2) {\n            return \"YES\";\n        }\n   \
    \     if (length != end1 && length != start1) {\n            return \"NO\";\n\
    \        }\n        long prime = 1l;\n        for (long i = start1; i <= end1;\
    \ i++) {\n            for (long j = start2; j <= end2; j++) {\n              \
    \  if (i != j && j % length == 0) {\n                    prime = false;\n    \
    \                break;\n                }\n            }\n            if (prime)\
    \ {\n                return \"YES\";\n            }\n        }\n        return\
    \ \"NO\";", "        Pair<Long, Long> intersection = interval1.intersection(interval2);\n\
    \        if (intersection == null)\n            return \"NO\";\n        if (intersection.equals(interval1))\n\
    \            return \"YES\";\n        boolean result = true;\n        for (long\
    \ i : intersection) {\n            if (!(i % 2 == 0 && i == 0 || i % 2 == 1 &&\
    \ i == 1))\n                return \"NO\";\n        }\n        return \"YES\";",
  "        // Write your code here\n        long lengthIntersection = interval1.getLeft().max(interval1.getRight())\
    \ - interval1.getLeft().min(interval1.getRight());\n        \n        if(interval1.getLeft()\
    \ == interval2.getLeft() && interval1.getRight() == interval2.getRight()){\n \
    \           return \"YES\";\n        }\n        \n        if(lengthIntersection\
    \ == 0){\n            return \"NO\";\n        }\n        \n        if(lengthIntersection\
    \ != 2 && lengthIntersection != 3 && lengthIntersection % 2 != 0){\n         \
    \   return \"NO\";\n        }\n        \n        long lengthIntersectionPrime\
    \ = lengthIntersection / 2;\n        long lengthDifference = interval1.getRight()\
    \ - interval1.getLeft();\n        \n        if(lengthDifference % 2 != 0){\n \
    \           return \"NO\";\n        }\n        \n        long lengthDifferencePrime\
    \ = lengthDifference / 2;\n        \n        if(lengthDifferencePrime != 2 &&\
    \ lengthDifferencePrime != 3){\n            return \"NO\";\n        }\n      \
    \  \n        return \"YES\";", "        Long start = interval1.getLeft();\n  \
    \      Long end = interval1.getRight();\n        Long start1 = interval2.getLeft();\n\
    \        Long end1 = interval2.getRight();\n\n        if ((start > end) || (start1\
    \ > end1)) {\n            return \"NO\";\n        }\n\n        if (start == start1)\
    \ {\n            if ((end - start) == (end1 - start1)) {\n                return\
    \ \"YES\";\n            }\n            return \"NO\";\n        }\n\n        Pair<Long,\
    \ Long> pair2 = interval2.pairWith(interval1.getLeft());\n        Long start2\
    \ = pair2.getLeft();\n        Long end2 = pair2.getRight();\n\n        List<Long>\
    \ intervalList1 = new ArrayList<>(interval1);\n        intervalList1.add(interval1);\n\
    \n        List<Pair<Long, Long>> intervalList2 = new ArrayList<>(interval2);\n\
    \        intervalList2.add(interval2);\n\n        List<Pair<Long, Long>> intervalList3\
    \ = new ArrayList<>(intervalList1);\n        intervalList3.add(intervalList1.get(1));\n\
    \n        List<Pair<Long, Long>> intervalList4 = new ArrayList<>(intervalList2);\n\
    \        intervalList4.add(intervalList2.get(1));\n\n        List<Pair<Long, Long>>\
    \ intervalList5 = new ArrayList<>(intervalList3);\n        intervalList5.add(intervalList3.get(1));\n\
    \n        List<Pair<Long, Long>> intervalList6 = new ArrayList<>(intervalList4);\n\
    \        intervalList6.add(intervalList4.get(1));\n\n        if (intervalList1.isEmpty()\
    \ || intervalList2.isEmpty() || intervalList3.isEmpty() || intervalList4.isEmpty()\
    \ || intervalList5.isEmpty() || intervalList6.isEmpty()) {\n            return\
    \ \"NO\";\n        }\n\n        Long intersectionStart = getIntersection(intervalList1,\
    \ intervalList2, intervalList3, intervalList4, intervalList5, intervalList6);\n\
    \        if (intersectionStart == null) {\n            return \"NO\";\n      \
    \  } else {\n            Long start1 = interval1.getLeft();\n            Long\
    \ end1 = interval1.getRight();\n\n            Long start2 = interval2.getLeft();\n\
    \            Long end2 = interval2.getRight();\n\n            if (start2 <= start1)\
    \ {\n                start2 = start1;\n            }\n            if (end2 <=\
    \ end1) {\n                end2 = end1;\n            }\n\n            if ((start2\
    \ - start) == (end2 - end)) {\n                return \"YES\";\n            }\
    \ else {\n                return \"NO\";\n            }\n        }"]
stop_tokens:
- "\n    }\n"
