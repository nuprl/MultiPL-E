name: HumanEval_102_choose_num
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // This function takes two positive numbers x and y and returns\
  \ the\n    // biggest even integer number that is in the range [x, y] inclusive.\
  \ If \n    // there's no such number, then the function should return -1.\n    //\
  \ For example:\n    // >>> chooseNum((12l), (15l))\n    // (14l)\n    // >>> chooseNum((13l),\
  \ (12l))\n    // (-1l)\n    public static long chooseNum(long x, long y) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(chooseNum((12l),\
  \ (15l)) == (14l));\n    assert(chooseNum((13l), (12l)) == (-1l));\n    assert(chooseNum((33l),\
  \ (12354l)) == (12354l));\n    assert(chooseNum((5234l), (5233l)) == (-1l));\n \
  \   assert(chooseNum((6l), (29l)) == (28l));\n    assert(chooseNum((27l), (10l))\
  \ == (-1l));\n    assert(chooseNum((7l), (7l)) == (-1l));\n    assert(chooseNum((546l),\
  \ (546l)) == (546l));\n    }\n\n}\n"
completions: ['        return Math.abs(x - y) >= Math.abs(x) ? x : (-1l);', "    \
    \    Set<Long> evens = IntStream.rangeClosed(x, y).filter(i -> i % 2 == 0).boxed().collect(Collectors.toSet());\n\
    \        if (evens.isEmpty()) {\n            return -1L;\n        } else {\n \
    \           return evens.iterator().next();\n        }", "        if (x < 0 ||\
    \ y < 0) {\n            return -1;\n        }\n        long even = 0;\n      \
    \  long odd = 1;\n        while (even < y) {\n            even *= 2;\n       \
    \     odd++;\n        }\n        while (odd > x) {\n            odd /= 2;\n  \
    \          even++;\n        }\n        return even;", "        BigInteger n =\
    \ new BigInteger(Long.toString(x + y));\n        if (n.divideAndRemainder(BigInteger.TEN).compareTo(0)==0)\n\
    \            return n.divideAndRemainder(BigInteger.TEN).longValue();\n      \
    \  else\n            return -1;", "        long max = x;\n        long min = y;\n\
    \        while (min > max) {\n            long mid = (max + min)/2;\n        \
    \    if (mid % 2 == 0) {\n                max = mid;\n            } else {\n \
    \               min = mid;\n            }\n        }\n        if (min <= y) {\n\
    \            return min;\n        } else if (max >= x) {\n            return max;\n\
    \        } else {\n            return -1;\n        }", "        long[] evens =\
    \ Arrays.stream(new long[] {x, y})\n            .filter(e -> e % 2 == 0)\n   \
    \         .collect(Collectors.toList()).toArray();\n        Arrays.sort(evens);\n\
    \        if (evens.length == 0) {\n            return -1;\n        }\n       \
    \ return evens[evens.length - 1];", "        long a = x;\n        long b = y;\n\
    \        long even;\n        long odd;\n        long max;\n        while ((a >=\
    \ 0) && (b >= 0)) {\n            even = a;\n            odd = b;\n           \
    \ while (even % 2 == 0) {\n                even = even / 2;\n            }\n \
    \           while (odd % 2 == 0) {\n                odd = odd / 2;\n         \
    \   }\n            if (even > odd) {\n                max = even;\n          \
    \  } else {\n                max = odd;\n            }\n            if (a > b)\
    \ {\n                a = a - max;\n                b = b - max;\n            }\
    \ else {\n                a = a - max;\n                b = b - max;\n       \
    \     }\n        }\n        if ((a == -1l) && (b == -1l)) {\n            return\
    \ -1l;\n        }\n        return max;", "        long lowNum = x;\n        long\
    \ highNum = y;\n        while (lowNum <= highNum) {\n            if (lowNum %\
    \ 2 == 0) {\n                lowNum += 2;\n            }\n            else {\n\
    \                lowNum += 1;\n            }\n            highNum += 2;\n    \
    \    }\n        while (lowNum > highNum) {\n            if (highNum % 2 == 0)\
    \ {\n                highNum += 2;\n            }\n            else {\n      \
    \          highNum += 1;\n            }\n            lowNum += 2;\n        }\n\
    \        if (lowNum == highNum) {\n            return lowNum;\n        }\n   \
    \     return -1;", "        long range = (x - y);\n        long biggest = (x +\
    \ y);\n        long evenRange = 0;\n        long oddRange = 0;\n        boolean\
    \ oddRangeFound = false;\n\n        // Find the range that divides the biggest\
    \ even number.\n        while (biggest % 2 != 0) {\n            biggest = (biggest\
    \ + 1);\n            evenRange = evenRange + 1;\n        }\n\n        // If there's\
    \ more than one even number, we find the biggest one\n        // by finding the\
    \ biggest even number that divides the biggest even \n        // number.\n   \
    \     if (evenRange > 1) {\n            while (evenRange < biggest) {\n      \
    \          biggest = (biggest + 1);\n                evenRange = evenRange + 1;\n\
    \            }\n            // Now we find the biggest even number that divides\
    \ the biggest even\n            // number.\n            while (biggest % 2 ==\
    \ 0) {\n                biggest = (biggest + 1);\n                evenRange =\
    \ evenRange + 1;\n            }\n            // We found the biggest even number\
    \ that divides the biggest even\n            // number.\n            biggest =\
    \ biggest - evenRange;\n        }\n        // If there's no even number, we return\
    \ the biggest even number. \n        if (biggest % 2 == 0) {\n            return\
    \ biggest;\n        }\n        return -1;", "        if (x > y) {\n          \
    \  long temp = x;\n            x = y;\n            y = temp;\n        }\n    \
    \    long max = (x - y) / 2;\n        if (x <= y) {\n            max = max * 2;\n\
    \        } else {\n            max = max - max;\n        }\n        if (max >\
    \ Integer.MAX_VALUE) {\n            return -1;\n        }\n        while (max\
    \ - y == 0) {\n            max = max - 1;\n        }\n        return max;", " \
    \       long max = (x + y) / 2;\n        long numEven = 1;\n        long numOdd\
    \ = (x + y) / 2;\n\n        while (max % 2 == 0) {\n            max = max / 2;\n\
    \            numEven = numEven * 2;\n        }\n\n        if (numEven * 2 <= x\
    \ && x <= numEven * 2 + numOdd) {\n            return numEven * 2;\n        }\
    \ else if (numEven * 2 + numOdd <= x && x <= numOdd * 2) {\n            return\
    \ numOdd * 2;\n        } else {\n            return -1;\n        }", "       \
    \ // We assume x is always less than y\n        while (x != 1) {\n           \
    \ if (x % 2 == 0) {\n                x = (x + y)/2;\n            } else {\n  \
    \              y = y/2;\n            }\n        }\n        return x;", "     \
    \   if ((x > y) && (x % 2 == 0)) {\n            return x;\n        } else {\n\
    \            if ((y > x) && (y % 2 == 0)) {\n                return y;\n     \
    \       } else {\n                if ((x % 2 == 0) && (y % 2 == 0)) {\n      \
    \              return x + y;\n                }\n            }\n        }\n  \
    \      return -1;", "        long smallNum = x;\n        long evenNumber = y;\n\
    \n        while ((smallNum - evenNumber % 2) == 0l)\n            evenNumber +=\
    \ 2l;\n\n        if (evenNumber < y) return -1l;\n        if (evenNumber > y)\
    \ return -1l;\n        return (evenNumber - smallNum) % 2l;", "        long even\
    \ = x % 2 == 0 ? x : x + 1;\n        while (even < y) {\n            even += 2;\n\
    \        }\n        return even;", "        if (x >= y) {\n            return\
    \ -1;\n        }\n        long m = ((x + y)/2);\n        if (m % 2 == 0) {\n \
    \           return m;\n        }\n        else {\n            long n = (m*2)-1;\n\
    \            if (n % 2 == 0) {\n                return n;\n            }\n   \
    \     }\n        return -1;", "        long evenMax = (x << 1) + y;\n        long\
    \ oddMax = x | y;\n        long evenMin = x >> 1;\n        long oddMin = x | y\
    \ >> 1;\n        long evenMaxDiv = evenMax / 2;\n        long oddMaxDiv = oddMax\
    \ / 2;\n        long evenMinDiv = evenMin / 2;\n        long oddMinDiv = oddMin\
    \ / 2;\n        if (evenMax % 2 == 1) {\n            if (evenMax > oddMax) {\n\
    \                return evenMaxDiv;\n            } else {\n                return\
    \ oddMaxDiv;\n            }\n        } else {\n            if (oddMax > evenMax)\
    \ {\n                return oddMaxDiv;\n            } else {\n               \
    \ return evenMaxDiv;\n            }\n        }", "        long m = Math.max(x,\
    \ y);\n        while (m > 1) {\n            if (m % 2 == 0) {\n              \
    \  m /= 2;\n            } else {\n                return -1;\n            }\n\
    \        }\n        return m;", "        // Write your code here\n        long\
    \ ans = -1l;\n        boolean even = false;\n        if (x >= 0 && x <= y) {\n\
    \            if (x % 2 == 0) {\n                if (y % 2 != 0)\n            \
    \        even = true;\n                ans = x;\n            } else {\n      \
    \          if (y % 2 == 0)\n                    even = true;\n               \
    \ ans = y;\n            }\n        } else if (x < 0 && y > 0) {\n            if\
    \ (y % 2 != 0) {\n                even = true;\n                ans = y;\n   \
    \         }\n        } else if (x < 0 && y < 0) {\n            if (x % 2 != 0)\
    \ {\n                even = true;\n                ans = x;\n            }\n \
    \       }\n        return even ? ans : -1l;", "        long even = 1;\n      \
    \  while (true) {\n            if (x % 2 == 0) even *= x;\n            if (y %\
    \ 2 == 0) even *= y;\n            if (even > y) break;\n            x /= 2;\n\
    \            y /= 2;\n        }\n        if (even > x) even = -1;\n        return\
    \ even;", "        long biggest = Long.MIN_VALUE;\n        if (x >= y) {\n   \
    \         throw new IllegalArgumentException(\"Cannot choose number above or equal\
    \ to\");\n        }\n        for (long i = y; i <= x; i++) {\n            if (i\
    \ % 2 == 0) {\n                if (biggest < i) {\n                    biggest\
    \ = i;\n                }\n            }\n        }\n        if (biggest == Long.MIN_VALUE)\
    \ {\n            return -1;\n        }\n        return biggest;", "        long\
    \ result = x + 1;\n        \n        while (result%2 != 0) {\n            result\
    \ = result;\n            ++x;\n        }\n        \n        result -= x;\n   \
    \     \n        if (result > y) {\n            return -1;\n        }\n       \
    \ \n        while (result%2 != 0) {\n            result = result;\n          \
    \  ++y;\n        }\n        \n        result -= y;\n        \n        if (result\
    \ >= x) {\n            return result;\n        }\n        \n        return -1;",
  "        long z = x;\n        while (z <= y) {\n            z *= 2;\n        }\n\
    \        if (z > y) {\n            return -1;\n        } else {\n            while\
    \ (z <= y) {\n                if (z % 2 == 0) {\n                    return z;\n\
    \                }\n                z++;\n            }\n        }\n        return\
    \ -1;", "        if (x > y) {\n            return -1;\n        }\n        if (x\
    \ == y) {\n            return x;\n        }\n        long a = x, b = y, x = a\
    \ - b;\n        long c = x / (b - a);\n        while (c % 2 == 0) {\n        \
    \    a = b;\n            b = x;\n            x = a - b;\n            c = x / (b\
    \ - a);\n        }\n        if (c == 0) {\n            return a;\n        }\n\
    \        long d = x - a / b * b;\n        while (d % 2 == 0) {\n            a\
    \ = b;\n            b = x;\n            x = a - b;\n            d = x - a / b\
    \ * b;\n        }\n        return d;", "        if (x <= 0 || y <= 0 || x > y)\
    \ \n            return -1;\n        for (long m = 2; m <= y / 2; m++) {\n    \
    \        if (m % 2 == 0 && x * m > y)\n                return -1;\n        }\n\
    \        return m;", "        long maxEven = -1;\n        if (x >= y) {\n    \
    \        long tempX = x;\n            long tempY = y;\n            while (tempX\
    \ < y) {\n                tempX = tempX + tempX;\n            }\n            while\
    \ (tempX < tempY) {\n                maxEven = maxEven + tempX;\n            \
    \    tempY = tempY + tempY;\n            }\n            maxEven = maxEven + tempY;\n\
    \        } else {\n            long tempX = x;\n            long tempY = y;\n\
    \            while (tempX < y) {\n                tempY = tempY + tempY;\n   \
    \         }\n            while (tempX < tempY) {\n                maxEven = maxEven\
    \ + tempY;\n                tempX = tempX + tempX;\n            }\n          \
    \  maxEven = maxEven + tempX;\n        }\n        if (maxEven != -1) {\n     \
    \       return maxEven;\n        }\n        return -1;", "        long[] range\
    \ = new long[] { x, y };\n        Arrays.sort(range);\n        Arrays.stream(range).filter(i\
    \ -> i % 2 == 0).findFirst();\n        return range[0];", "        long result\
    \ = 0;\n        long x_even = x/2;\n        long x_odd = x/2 + 1;\n        long\
    \ y_even = y/2;\n        long y_odd = y/2 + 1;\n        for(long i = x_even; i<=\
    \ x_odd; i++){\n            if(i % 2 == 1){\n                result += i;\n  \
    \              if(result>=y){\n                    result-=y;\n              \
    \      break;\n                }\n            }\n        }\n        for(long i\
    \ = y_even; i<= y_odd; i++){\n            if(i % 2 == 0){\n                result\
    \ += i;\n                if(result>=x){\n                    result-=x;\n    \
    \                break;\n                }\n            }\n        }\n       \
    \ return result;", "        if (x >= y) \n            return -1l;\n        if\
    \ (x <= y) \n            return -1l;\n        if (y % 2 == 0) {\n            return\
    \ x;\n        }\n        // Even y means we should add 2 \n        return (x +\
    \ 2L) % y;", "        long high = x;\n        long low = y;\n\n        if (high\
    \ < low) {\n            while (high < low) {\n                low = low * 2;\n\
    \                if (low >= y) {\n                    low = y;\n             \
    \       high = high * 2;\n                    while (high < low) {\n         \
    \               low = low * 2;\n                        high = high * 2;\n   \
    \                 }\n                    break;\n                }\n         \
    \   }\n        }\n        if (high == low) {\n            low = low * 2;\n   \
    \         while (high < low) {\n                low = low * 2;\n             \
    \   high = high * 2;\n            }\n            high = high * 2;\n        }\n\
    \n        long sum = 0;\n        for (int i = 0; i < high; i++) {\n          \
    \  sum += i;\n        }\n\n        if (sum >= y) {\n            return -1;\n \
    \       }\n\n        for (int i = 0; i < low; i++) {\n            sum += i;\n\
    \        }\n\n        if (sum >= x) {\n            return -1;\n        }\n\n \
    \       return sum;", "        Set<Long> evens = new HashSet<>();\n\n        while(x\
    \ <= y) {\n            evens.add(x%2l);\n            x=x/2l;\n        }\n    \
    \    evens.add(y%2l);\n\n        if(evens.isEmpty())\n            return -1l;\n\
    \n        long[] evensArray = evens.stream().toArray();\n        int evensArrayLength\
    \ = evensArray.length;\n        for(int i=0; i < evensArrayLength; i++) {\n  \
    \          if((evensArray[i] % 2) == 0) {\n                evensArray[i]=evensArray[i]*2l;\n\
    \            }\n        }\n        long answer = 0;\n        for(int i=0; i <\
    \ evensArrayLength; i++) {\n            answer = Math.max(answer, evensArray[i]+1);\n\
    \        }\n\n        return answer;", "        final int range = (int) Math.pow(2,\
    \ (int)(Math.log(x) - Math.log(y) + 1));\n        if (range == 0) return -1;\n\
    \        long p = x + y;\n        if (p <= range) return x;\n        else if (p\
    \ >= range * 2) return -1;\n        else return (p - range) / 2;", "        long\
    \ max = Long.MIN_VALUE;\n        for (int i = x; i <= y; i++) {\n            if\
    \ (i % 2 == 0) {\n                if (max < i)\n                    max = i;\n\
    \            } else {\n                if (max > i)\n                    return\
    \ -1;\n            }\n        }\n        return max;", "        long maxNum =\
    \ -1;\n        long currNum = x;\n\n        if (currNum >= 0 && currNum < y) {\n\
    \            while (currNum < y) {\n                currNum += y;\n          \
    \  }\n            maxNum = currNum;\n        }\n\n        if (maxNum == -1) {\n\
    \            currNum = y;\n            while (currNum > x) {\n               \
    \ currNum -= y;\n            }\n            maxNum = currNum;\n        }\n\n \
    \       return maxNum;", "        if ((x <= y) && (x % 2 == 0)) {\n          \
    \  return x;\n        } else if (y <= x && y % 2 == 0) {\n            return y;\n\
    \        } else {\n            return -1;\n        }", "        long even;\n \
    \       if (x < y) {\n            if (x == 0) {\n                return y;\n \
    \           } else {\n                even = x % 2 == 0;\n                if (even)\
    \ {\n                    return -1;\n                }\n                long x\
    \ = y;\n                long y = x;\n            }\n        } else {\n       \
    \     even = y % 2 == 0;\n            if (even) {\n                return -1;\n\
    \            }\n            long x = x;\n            long y = y;\n        }\n\
    \        while (true) {\n            long x = y;\n            long y = x % 2;\n\
    \            if (y == 0 && x >= y) {\n                return x;\n            }\
    \ else if (y != 0) {\n                return -1;\n            }\n        }", " \
    \       long n = y;\n        while (x > 0 && n <= x) {\n            n += y;\n\
    \            x -= y;\n        }\n        if (n < x) {\n            return -1;\n\
    \        }\n        return n;", "        long result = -1;\n        // If both\
    \ numbers are the same, then return -1.\n        if (x == y) return -1;\n    \
    \    // If x is even, then return x.\n        if (x % 2 == 0) return x;\n    \
    \    // If y is even, then return y.\n        if (y % 2 == 0) return y;\n    \
    \    // If x is larger than y, then swap their values.\n        if (x > y) { long\
    \ temp = x; x = y; y = temp; }\n        // Calculate difference between x and\
    \ y\n        long difference = y - x;\n        // If the difference is even, then\
    \ return x minus the difference divided by 2.\n        if (difference % 2 == 0)\
    \ { result = x - difference / 2; }\n        // If x is smaller than y, then return\
    \ x minus the difference divided by 2.\n        else { result = x - difference\
    \ / 2 + y; }\n        // If result is negative, return -1.\n        if (result\
    \ < 0) return -1;\n        return result;", "        if (x >= y || x <= 0 || y\
    \ <= 0)\n            return -1;\n        long result = x;\n        long temp;\n\
    \        long remainder;\n        while (result < y) {\n            temp = (result\
    \ + y) / 2;\n            remainder = result % 2;\n            if (remainder ==\
    \ 0)\n                return temp;\n            result = temp;\n        }\n  \
    \      return -1;", "        // Get the range between x and y\n        long range\
    \ = (long)Math.max(Math.abs(x), Math.abs(y));\n        // Initialize a boolean\
    \ variable to indicate whether x or y has \n        // already been chosen as\
    \ an even number\n        boolean isEven = false;\n\n        // Loop from 0 to\
    \ range and check if the current number is even\n        // If so, then set isEven\
    \ to true and return the result\n        for (long i = 0; i < range; i++) {\n\
    \            if (i % 2 == 0) {\n                isEven = true;\n            }\n\
    \        }\n        // If isEven == true, then we have found an even number within\
    \ the \n        // range [x, y]. Return the result\n        if (isEven) {\n  \
    \          return x;\n        } else {\n            return -1;\n        }", " \
    \       long n = x - y;\n        long k = 1;\n        while ((n % k) != 0) {\n\
    \            k = k * 2 + 1;\n        }\n        return k - 1;", "        long\
    \ biggest = -1;\n        long cur = x;\n        for(long i = x; i <= y; i+=2)\
    \ {\n            if(cur%2 == 0 && cur > biggest) {\n                biggest =\
    \ cur;\n            }\n            cur = i + 1;\n        }\n        return biggest;",
  "        if (x > y) {\n            return -1;\n        }\n\n        long[] a = {x};\n\
    \        a[0] += y;\n\n        long curr = a[0];\n        Arrays.sort(a);\n\n\
    \        if (curr != a[0]) {\n            return -1;\n        }\n\n        while\
    \ (curr != a[0]) {\n            if (curr == a[1]) {\n                return -1;\n\
    \            }\n\n            curr += a[1];\n        }\n\n        return a[0];",
  "        long z = Math.max(x, y);\n        z = z - x;\n        z = z / x;\n    \
    \    z = z % y;\n        return z;", "        long result = -1;\n        for (int\
    \ i = Math.max(x, y); i >= Math.min(x, y); i--)\n            if (i % 2 == 0)\n\
    \                result = i;\n        return result;", "        if (x < 0 || y\
    \ < 0) {\n            return -1l;\n        }\n\n        long max;\n        if\
    \ (x < y) {\n            max = x;\n        } else {\n            max = y;\n  \
    \      }\n\n        for (long i = max; i > max/2; i--) {\n            if (x %\
    \ i == 0) {\n                if (y % i == 0) {\n                    return i;\n\
    \                }\n            }\n        }\n\n        return -1l;", "      \
    \  // Implement here\n        return -1;", "        if ((x - y) % (y - x) == 0)\n\
    \            return -1;\n        return Math.max(Math.min(x + 1, y), x - y);",
  "        if (x < y) {\n            return -1;\n        }\n        if (x == y) {\n\
    \            return x;\n        }\n        return (int) Math.ceil((double) x /\
    \ y);", "        long max = Math.max(x, y);\n        long min = Math.min(x, y);\n\
    \        if (max % 2 == 0) {\n            return max;\n        }\n        long\
    \ maxDiv = max / 2;\n        long minDiv = min / 2;\n        if (maxDiv >= minDiv)\
    \ {\n            while (maxDiv >= minDiv) {\n                maxDiv--;\n     \
    \           if (maxDiv & 1 == 0) {\n                    return maxDiv;\n     \
    \           }\n            }\n            return -1;\n        }\n        return\
    \ -1;", "        if (x >= 0 && y >= 0) {\n            if (x < y) {\n         \
    \       long xx = x;\n                long yy = y;\n                while (xx\
    \ < yy) {\n                    xx = xx * 2 + 1;\n                    yy = yy *\
    \ 2 + 1;\n                }\n                return xx;\n            }\n     \
    \       else {\n                long xx = x;\n                long yy = y;\n \
    \               while (xx >= yy) {\n                    xx = xx / 2;\n       \
    \             yy = yy / 2;\n                }\n                return xx;\n  \
    \          }\n        }\n        return -1;", "        // write your code here\n\
    \        long maxnum = (x + y);\n        boolean evennum = false;\n        while(maxnum\
    \ != 0){\n            if(maxnum % 2 != 0){\n                evennum = true;\n\
    \            }\n            maxnum -= 1;\n        }\n        if(evennum == false){\n\
    \            return -1;\n        }\n        return maxnum;", "        if (x >\
    \ y) {\n            long temp = x;\n            x = y;\n            y = temp;\n\
    \        }\n        long maxEven = x - 1;\n        long even = 1;\n        while(even*2\
    \ <= y) {\n            maxEven++;\n            even++;\n        }\n        while\
    \ (even*2 > y) {\n            maxEven--;\n            even--;\n        }\n   \
    \     return maxEven;", "        if (x > y) {\n            long temp = x;\n  \
    \          x = y;\n            y = temp;\n        }\n        int xMod = x % 2;\n\
    \        long ansNum = -1;\n        if (yMod == 0) {\n            ansNum = x;\n\
    \        } else if (xMod != 0) {\n            if (x > y) {\n                long\
    \ temp = x;\n                x = y;\n                y = temp;\n            }\n\
    \            long xNum = x;\n            long yNum = y;\n            x = (long)(xNum\
    \ / 2);\n            y = (long)(yNum / 2);\n            if (x == 0 || y == 0)\
    \ {\n                ansNum = -1;\n            } else {\n                ansNum\
    \ = x % 2 + y % 2;\n            }\n        } else {\n            ansNum = -1;\n\
    \        }\n        return ansNum;", "        long xRange = x - 1;\n        long\
    \ yRange = y - 1;\n\n        long lowRange = Math.min(xRange, yRange);\n     \
    \   long highRange = Math.max(xRange, yRange);\n\n        long lowEven = lowRange\
    \ % 2 == 0 ? lowRange / 2 : 0;\n        long highEven = highRange % 2 == 0 ? highRange\
    \ / 2 : 0;\n\n        long evenMax = lowEven + highEven;\n        long evenMin\
    \ = lowRange - highRange;\n        long evenRange = evenMax - evenMin;\n\n   \
    \     long evenMax2 = (long) (Math.pow(evenRange, 2) % 2 == 0 ? evenRange : -1);\n\
    \        long evenMin2 = (long) (Math.pow(evenRange, 2) % 2 == 0 ? evenRange :\
    \ -1);\n        long evenRange2 = evenMax2 - evenMin2;\n\n        long evenMax3\
    \ = (long) (Math.pow(evenRange, 3) % 2 == 0 ? evenRange : -1);\n        long evenMin3\
    \ = (long) (Math.pow(evenRange, 3) % 2 == 0 ? evenRange : -1);\n        long evenRange3\
    \ = evenMax3 - evenMin3;\n\n        long evenMax4 = (long) (Math.pow(evenRange,\
    \ 4) % 2 == 0 ? evenRange : -1);\n        long evenMin4 = (long) (Math.pow(evenRange,\
    \ 4) % 2 == 0 ? evenRange : -1);\n        long evenRange4 = evenMax4 - evenMin4;\n\
    \n        long evenMax5 = (long) (Math.pow(evenRange, 5) % 2 == 0 ? evenRange\
    \ : -1);\n        long evenMin5 = (long) (Math.pow(evenRange, 5) % 2 == 0 ? evenRange\
    \ : -1);\n        long evenRange5 = evenMax5 - evenMin5;\n\n        long evenMax6\
    \ = (long) (Math.pow(evenRange, 6) % 2 == 0 ? evenRange : -1);\n        long evenMin6\
    \ = (long) (Math.pow(evenRange, 6) % 2 == 0 ? evenRange : -1);\n        long evenRange6\
    \ = evenMax6 - evenMin6;\n\n        long evenMax7 = (long) (Math.pow(evenRange,\
    \ 7) % 2 == 0 ? evenRange : -1);\n        long evenMin7 = (long) (Math.pow(evenRange,\
    \ 7) % 2 == 0 ? evenRange : -1);\n        long evenRange7 = evenMax7 - evenMin7;\n\
    \n        long evenMax8 = (long) (Math.pow(evenRange, 8) % 2 == 0 ? evenRange\
    \ : -1);\n        long evenMin8 = (long) (Math.pow(evenRange, 8) % 2 == 0 ? evenRange\
    \ : -1);\n        long evenRange8 = evenMax8 - evenMin8;\n\n        long evenMax9\
    \ = (long) (Math.pow(", "        long biggestEvenNumber = 0;\n        long currentEvenNumber\
    \ = 0;\n        for (long i = x; i <= y; i++) {\n            if (i % 2 == 0) {\n\
    \                currentEvenNumber = i;\n            } else {\n              \
    \  if (currentEvenNumber > biggestEvenNumber) {\n                    biggestEvenNumber\
    \ = currentEvenNumber;\n                }\n                currentEvenNumber =\
    \ 0;\n            }\n        }\n        return biggestEvenNumber;", "        if\
    \ (x >= y) {\n            return -1;\n        }\n        long res = 0;\n     \
    \   while (x<y) {\n            if (x%2==0 && y%2==0) {\n                res+=x;\n\
    \            }\n            x-=2;\n            y-=2;\n        }\n        if (res%2==0\
    \ && y%2==0) {\n            return res;\n        }\n        return -1;", "   \
    \     // Write your code here\n        long min = (x < y) ? x : y;\n        long\
    \ max = (x < y) ? y : x;\n        long number = min + (max - min) / 2;\n     \
    \   long result = (int) Math.ceil(x * Math.pow(10, x) - y * Math.pow(10, y));\n\
    \        if (result == 0) {\n            result = -1;\n        }\n        return\
    \ result;", "        if (x <= y && y <= x * y) {\n            int range = (int)\
    \ (x - y);\n            if (range % 2 == 1) {\n                return y;\n   \
    \         }\n            else if (range > 1) {\n                int mid = (int)\
    \ Math.floor((range - 1) / 2);\n                long mid2 = mid * mid;\n     \
    \           return mid2 % x == 0 ? mid : -1;\n            }\n            else\
    \ {\n                return -1;\n            }\n        }\n        return -1;",
  "        if (x > y) {\n            int temp = x;\n            x = y;\n         \
    \   y = temp;\n        }\n        while (x <= y) {\n            if (x % 2 == 0)\
    \ {\n                return x;\n            }\n            x += 2;\n        }\n\
    \        return -1;", "        // Write your code here\n        if (x < y) return\
    \ -1;\n        if (x > y && x <= 0) return -1;\n        long even = 1, odd = 0;\n\
    \        while (even < y) {\n            even = even + (x % 2 == 0 ? 1 : 0);\n\
    \            x /= 2;\n        }\n        while (odd < y) {\n            odd =\
    \ odd + (x % 2 == 0 ? 1 : 0);\n            x /= 2;\n        }\n        return\
    \ even * 2;", "        // Your code here\n        if(x >= y || x == y)\n     \
    \       return -1;\n        long num = x-y;\n        while(num % 2 == 0) {\n \
    \           num /= 2;\n        }\n        return num;", "        if (x > y)\n\
    \            return -1;\n        long z = 0;\n        for (int i = x; i <= y;\
    \ i += 2) {\n            z = i;\n        }\n        return z;", "        long\
    \ max = -1;\n        long min = x;\n\n        for (long i = x; i <= y; i++) {\n\
    \            if (max == -1 || (x & 1) == (i & 1)) {\n                max = i;\n\
    \            }\n        }\n\n        return max;", "        if((x < 0 && y < 0)\
    \ || (x > 0 && y > 0)) {\n            System.out.println(\"Error, invalid numbers.\
    \ Try again. Exiting\");\n            System.exit(1);\n        }\n        long\
    \ result = -1;\n        // If x < y, then return x even number that is in range\
    \ [x, y] inclusive\n        // If x > y, then return x odd number that is in range\
    \ [x, y] inclusive\n        // If x == y, then return -1\n        if(x == y) {\n\
    \            result = x;\n        }\n        else {\n            for(long num\
    \ = x; num < y; num++) {\n                // If even number, add it to the result\n\
    \                if(num % 2 == 0) {\n                    result = result + num;\n\
    \                }\n                // If odd number, subtract it from the result\n\
    \                else {\n                    result = result - num;\n        \
    \        }\n            }\n        }\n        return result;", "        long maxEven\
    \ = 0;\n        while (x < y) {\n            long currentNum = x;\n          \
    \  long currentEven = 0;\n            long currentMin = 0;\n            long currentMax\
    \ = 0;\n            while (currentNum < y) {\n                long num = currentNum;\n\
    \                int even = 0;\n                if (num % 2 == 0) {\n        \
    \            even = 1;\n                }\n                if (even != 0 && num\
    \ > maxEven) {\n                    maxEven = num;\n                    currentEven\
    \ = even;\n                    currentMin = num;\n                    currentMax\
    \ = num;\n                }\n                currentNum += 2;\n            }\n\
    \            if (currentEven != 0) {\n                if (currentMin == 0 || currentMin\
    \ > maxEven) {\n                    maxEven = currentMin;\n                  \
    \  currentMin = currentMax;\n                    currentMax = currentEven;\n \
    \               }\n                else {\n                    if (currentMin\
    \ > currentMax) {\n                        maxEven = currentMin;\n           \
    \             currentMin = currentMax;\n                        currentMax = currentEven;\n\
    \                    }\n                    else {\n                        currentMax\
    \ = currentEven;\n                    }\n                }\n            }\n  \
    \          x += 2;\n        }\n        return maxEven;", "        BigInteger xnum\
    \ = new BigInteger(x);\n        BigInteger ynum = new BigInteger(y);\n       \
    \ BigInteger result = xnum.multiply(ynum);\n        while (result.equals(xnum))\
    \ {\n            result = result.add(1);\n        }\n        if (result.mod(xnum).equals(BigInteger.ZERO))\
    \ {\n            return result.mod(xnum).longValue();\n        }\n        return\
    \ -1l;", "        long result = Long.MIN_VALUE;\n        for(long i = x; i <=\
    \ y; i++) {\n            if (isEven(i)) {\n                result = i;\n     \
    \           break;\n            }\n        }\n        return result;", "     \
    \   long result = -1;\n        long x1 = x - 1;\n        long y1 = y - 1;\n  \
    \      long a = Math.min(x1, y1);\n        long b = Math.max(x1, y1);\n      \
    \  long c;\n        \n        for (long d = 0; d <= a; d++) {\n            c =\
    \ b;\n            while ((b - d) % 2 != 0) {\n                c += 1;\n      \
    \      }\n            if (d < c) {\n                result = d;\n            \
    \    break;\n            }\n        }\n        return result;", "        if (x\
    \ >= y) {\n            return -1;\n        }\n        long max = (long) Math.ceil((x\
    \ - y) / 2);\n        if (max == x) {\n            return max;\n        } else\
    \ if (max % 2 == 0) {\n            return x + max - 1;\n        } else {\n   \
    \         max = max - 1;\n            return x - max;\n        }", "        //\
    \ Write your code here.\n        long result=1;\n        int i=0;\n        while(true){\n\
    \            if((result+i)%2==0){\n                result=result+i;\n        \
    \    }\n            i=i+1;\n            if(i>y){\n                break;\n   \
    \         }\n        }\n        return result;", "        long result = -1;\n\
    \        if (x >= y) {\n            long temp1 = x;\n            long temp2 =\
    \ y;\n            x = temp2;\n            y = temp1;\n        }\n        while\
    \ (true) {\n            long mid = (x + y) / 2;\n            if (mid >= y) {\n\
    \                x = mid;\n            } else if (mid < y) {\n               \
    \ y = mid;\n            } else {\n                result = mid;\n            }\n\
    \            if (x == y) break;\n        }\n        return result;", "       \
    \ // A pair of numbers (x, y) will be considered as \"even\" if the sum of\n \
    \       // the two numbers is divisible by 2\n        if (x - y == 0) {\n    \
    \        return x;\n        }\n\n        // Otherwise, if the sum of two numbers\
    \ is divisible by 4, then we \n        // need to add 5 to the sum\n        long\
    \ evenSum = x + y;\n        long oddSum = x + y + 1;\n        return (evenSum\
    \ / evenSum % 2 == 0) ? evenSum : oddSum;", "        if (x == y || x == 0l ||\
    \ y == 0l)\n            return -1l;\n        if ((x > 0l) && (y > 0l)) {\n   \
    \         if (isEven(x) && isEven(y)) {\n                if (x <= y)\n       \
    \             return x;\n                return y;\n            }\n          \
    \  if ((x > 0l) && (y < 0l))\n                return chooseNum(y - 1l, x);\n \
    \           if ((y > 0l) && (x < 0l))\n                return chooseNum(y, x -\
    \ 1l);\n        }\n        if ((x < 0l) && (y > 0l)) {\n            if (isEven(x)\
    \ && isEven(y)) {\n                if (x >= y)\n                    return x;\n\
    \                return y;\n            }\n            if ((x < 0l) && (y < 0l))\n\
    \                return chooseNum(y - 1l, x);\n            if ((y > 0l) && (x\
    \ < 0l))\n                return chooseNum(y, x - 1l);\n        }\n        if\
    \ ((x > 0l) && (y < 0l)) {\n            if (isEven(x) && isEven(y)) {\n      \
    \          if (x >= y)\n                    return x;\n                return\
    \ y;\n            }\n            if ((x > 0l) && (y < 0l))\n                return\
    \ chooseNum(y - 1l, x);\n            if ((y < 0l) && (x < 0l))\n             \
    \   return chooseNum(y, x - 1l);\n        }\n        if ((x < 0l) && (y < 0l))\
    \ {\n            if (isEven(x) && isEven(y)) {\n                if (x <= y)\n\
    \                    return x;\n                return y;\n            }\n   \
    \         if ((x < 0l) && (y < 0l))\n                return chooseNum(y - 1l,\
    \ x);\n            if ((y < 0l) && (x < 0l))\n                return chooseNum(y,\
    \ x - 1l);\n        }\n        if ((x >= 0l) && (y > 0l)) {\n            if (isEven(x)\
    \ && isEven(y)) {\n                if (x >= y)\n                    return x;\n\
    \                return y;\n            }\n            if ((x >= 0l) && (y < 0l))\n\
    \                return chooseNum(y, x - 1l);\n            if ((y > 0l) && (x\
    \ < 0l))\n                return chooseNum(y, x - 1l);\n        }\n        if\
    \ ((x >= 0l) && (y < 0l)) {\n            if (isEven(x) && isEven(y)) {\n     \
    \           if (x >= y)\n                    return x;\n                return\
    \ y;\n            }\n            if ((x >= 0l) && (y < 0l))\n                return\
    \ chooseNum(y, x - 1l);\n            if ((y < 0l) && (x < 0l))\n             \
    \   return chooseNum(y, x - 1l);\n        }\n        if ((x < 0l) && (y > 0l))\
    \ {\n            if (isEven(x) && isEven(y)) {\n                if (x >= y)\n\
    \                    return x;\n                return y;\n            }\n   \
    \         if ((x < 0l) && (y < 0l))\n                return chooseNum(y - 1l,\
    \ x);\n", "        long start = x;\n        long end = y;\n        long even =\
    \ start;\n        while (even < end) {\n            even *= 2;\n            if\
    \ (even > end) {\n                even = end;\n            }\n        }\n    \
    \    long end = even;\n        while (even > start) {\n            even *= 2;\n\
    \            if (even > start) {\n                even = start;\n            }\n\
    \        }\n        if (even < x) {\n            end = even;\n        }\n    \
    \    while (even > y) {\n            even *= 2;\n            if (even > y) {\n\
    \                even = y;\n            }\n        }\n        return even;", " \
    \       long min = (x == y ? x : y);\n        long max = (x == y ? x : y) + 1;\n\
    \        int n = max;\n        while ((n % 2) != 0) {\n            n = n * 2;\n\
    \        }\n        int c = n - min;\n        if (c > 0) {\n            return\
    \ c;\n        } else {\n            return -1;\n        }", "        // TODO Auto-generated\
    \ method stub\n        long even = 0;\n        long odd = 0;\n        long result\
    \ = 0;\n        long min = 1;\n\n        if (x > y) {\n            min = x;\n\
    \            max = y;\n        } else {\n            min = y;\n            max\
    \ = x;\n        }\n\n        for (long i = 1l + 1l; i <= max; i++) {\n       \
    \     if (i % 2l == 0l) {\n                even = even * i;\n            } else\
    \ {\n                odd = odd * i;\n            }\n        }\n\n        if (even\
    \ % 2l == 0l) {\n            result = even;\n        } else {\n            result\
    \ = odd;\n        }\n        return result;", "        // Your code here!\n  \
    \      long z = 0;\n        int count = 0;\n        for (int i = x; i <= y; i++)\
    \ {\n            if (i%2 == 0) {\n                if (z < i) {\n             \
    \       z = i;\n                    count++;\n                }\n            }\n\
    \        }\n        if (count > 0) {\n            return z;\n        } else {\n\
    \            return -1;\n        }", "        if (x < y && x > 1) {\n        \
    \    long even;\n            do {\n                even = (x + y);\n         \
    \       System.out.println(even);\n            }\n            while (even % 2\
    \ == 0);\n            return even;\n        } else if (x == 1) {\n           \
    \ return y;\n        } else {\n            return -1;\n        }", "        if\
    \ (x > y) {\n            return -1l;\n        }\n        long result = x; // start\
    \ with x = 1\n        long min = (long) Math.pow(2, x);\n        long max = (long)\
    \ Math.pow(2, y);\n        // Keep dividing until reaching max or reaching min.\n\
    \        while (max > min) {\n            if (result % 2 == 0) {\n           \
    \     return result;\n            }\n            min = min * 2;\n            max\
    \ /= 2;\n        }\n        return -1l;", "        if (x > y) \n            return\
    \ -1;\n        if (x < y)\n            return 0;\n        if (x % 2 == 0 && y\
    \ % 2 == 0) {\n            int even = x % 2;\n            int remainder = y %\
    \ 2;\n            if (even == remainder) {\n                return x;\n      \
    \      } else {\n                return -1;\n            }\n        } else {\n\
    \            return -1;\n        }", "        long low = x;\n        long high\
    \ = y;\n\n        // The algorithm uses two pointers to iterate over the range.\n\
    \        // The second pointer is initialized to the first element of the\n  \
    \      // range.\n        while (low <= high) {\n            long mid = (low +\
    \ high) / 2;\n            if (isEven(mid)) {\n                low = mid + 1;\n\
    \            } else {\n                high = mid - 1;\n            }\n      \
    \  }\n        return low;", "        long ans = -1;\n        if ((x >= 0) && (y\
    \ >= 0)) {\n            boolean even = true;\n            boolean inRange = true;\n\
    \            while (even) {\n                ans += y;\n                even =\
    \ (ans % 2L == 0L);\n                if (!even)\n                    inRange =\
    \ inRange && (ans >= x) && (ans <= y);\n                ans += x;\n          \
    \      even = (ans % 2L == 0L);\n                if (!even)\n                \
    \    inRange = inRange && (ans >= x) && (ans <= y);\n            }\n         \
    \   if (inRange)\n                ans = -1;\n        }\n        return ans;",
  "        long num1 = x-y;\n        long num2 = y-1;\n        long num3 = y-1;\n\
    \        long num4 = y-1;\n        long num5 = y-1;\n        long num6 = y-1;\n\
    \        long num7 = y-1;\n        long num8 = y-1;\n        long num9 = y-1;\n\
    \        long num10 = y-1;\n        long num11 = y-1;\n        long num12 = y-1;\n\
    \        long num13 = y-1;\n        long num14 = y-1;\n        long num15 = y-1;\n\
    \        long num16 = y-1;\n        long num17 = y-1;\n        long num18 = y-1;\n\
    \        long num19 = y-1;\n        long num20 = y-1;\n        long num21 = y-1;\n\
    \        long num22 = y-1;\n        long num23 = y-1;\n        long num24 = y-1;\n\
    \        long num25 = y-1;\n        long num26 = y-1;\n        long num27 = y-1;\n\
    \        long num28 = y-1;\n        long num29 = y-1;\n        long num30 = y-1;\n\
    \        long num31 = y-1;\n        long num32 = y-1;\n        long num33 = y-1;\n\
    \        long num34 = y-1;\n        long num35 = y-1;\n        long num36 = y-1;\n\
    \        long num37 = y-1;\n        long num38 = y-1;\n        long num39 = y-1;\n\
    \        long num40 = y-1;\n        long num41 = y-1;\n        long num42 = y-1;\n\
    \        long num43 = y-1;\n        long num44 = y-1;\n        long num45 = y-1;\n\
    \        long num46 = y-1;\n        long num47 = y-1;\n        long num48 = y-1;\n\
    \        long num49 = y-1;\n        long num50 = y-1;\n        long num51 = y-1;\n\
    \        long num52 = y-1;\n        long num53 = y-1;\n        long num54 = y-1;\n\
    \        long num55 = y-1;\n        long num56 = y-1;\n        long num57 = y-1;\n\
    \        long num58 = y-1;\n        long num59 = y-1;\n        long num60 = y-1;\n\
    \        long num61 = y-1;\n        long num62 = y-1;\n        long num63 = y-1;\n\
    \        long num64 = y-1;\n        long num65 = y-1;\n        long num66", " \
    \       if (x <= y && x >= 0) {\n            long z = (x + y) % 2;\n         \
    \   if (z == 0) {\n                return z;\n            }\n            while\
    \ (z > 0) {\n                x = z % x;\n                z = z / 2;\n        \
    \    }\n            while (z < y) {\n                y = z % y;\n            \
    \    z = z / 2;\n            }\n            return z;\n        }\n        return\
    \ -1;", "        // Write your code here.\n        long ans = 0;\n        if(x>=y)\n\
    \            return -1;\n        for(long i = 0; i<x; i++){\n            if(i\
    \ % 2 == 0){\n                if(i>=y)\n                    ans = i;\n       \
    \     }\n        }\n        return ans;", "        long maxEval = -1;\n      \
    \  long low = x;\n        long high = y;\n        boolean even = true;\n     \
    \   while (true) {\n            long mid = (low + high) / 2;\n            if (mid\
    \ < low) {\n                low = mid;\n            } else if (mid > high) {\n\
    \                high = mid;\n            } else {\n                even = mid\
    \ % 2 == 0;\n                if (even) {\n                    if (maxEval < mid)\
    \ {\n                        maxEval = mid;\n                    }\n         \
    \           break;\n                } else {\n                    low = mid;\n\
    \                }\n            }\n        }\n        if (even && maxEval == -1)\
    \ {\n            maxEval = -1;\n        }\n        return maxEval;", "       \
    \ long m = ((x + y) / 2) * 2;\n        long r = x + y;\n        boolean even =\
    \ false;\n        long l = m;\n        do {\n            if (r - l % 2 == 0) {\n\
    \                even = true;\n            }\n            l++;\n        } while\
    \ (l <= m);\n        if (even == false) {\n            return -1;\n        }\n\
    \        return l;", "        long biggest = Long.MIN_VALUE;\n        long middle\
    \ = (x + y) / 2;\n        // Handle corner cases first\n        if (x <= 1 ||\
    \ y <= 1 || middle == 1) {\n            return biggest;\n        }\n        long\
    \ rangeStart = (middle / 2l) + 1l;\n        long rangeEnd = (middle / 2l) - 1l;\n\
    \        // If x is even, then\n        if (rangeStart % 2 == 0) {\n         \
    \   if (rangeStart > y) {\n                rangeStart = y; // start range at higher\
    \ end of range\n            }\n            long nextRangeStart = (rangeStart +\
    \ 1l) / 2;\n            // If x is even, then\n            if (rangeStart % 2\
    \ == 0) {\n                biggest = rangeStart;\n                return biggest;\n\
    \            }\n            // If x is odd, then\n            if (nextRangeStart\
    \ % 2 != 0) {\n                biggest = rangeStart;\n                return biggest;\n\
    \            }\n            // If x is odd, then\n            else {\n       \
    \         // If next range is larger, then\n                if (nextRangeStart\
    \ > rangeEnd) {\n                    biggest = rangeStart;\n                 \
    \   return biggest;\n                }\n                // If next range is smaller,\
    \ then\n                else {\n                    // If biggest is still possible,\
    \ then\n                    if (biggest < rangeEnd) {\n                      \
    \  biggest = rangeEnd;\n                    }\n                    // Otherwise\
    \ biggest cannot be reached\n                    return biggest;\n           \
    \     }\n            }\n        }\n        // If x is odd, then\n        else\
    \ {\n            if (rangeStart > y) {\n                rangeStart = y; // start\
    \ range at higher end of range\n            }\n            long nextRangeStart\
    \ = (rangeStart + 1l) / 2;\n            // If x is even, then\n            if\
    \ (rangeStart % 2 == 0) {\n                if (nextRangeStart % 2 != 0) {\n  \
    \                  biggest = rangeStart;\n                    return biggest;\n\
    \                }\n                // If x is odd, then\n                else\
    \ {\n                    // If biggest is still possible, then\n             \
    \       if (biggest < rangeEnd) {\n                        biggest = rangeEnd;\n\
    \                    }\n                    // Otherwise biggest cannot be reached\n\
    \                    return biggest;\n                }\n            }\n     \
    \       // If x is odd, then\n            else {\n                // If next range\
    \ is larger, then\n                if (nextRangeStart > rangeEnd) {\n        \
    \            biggest = rangeStart;\n                    return biggest;\n    \
    \            }\n                // If next range is smaller, then\n          \
    \      else {\n                    // If biggest is still possible, then\n   \
    \                 if (biggest < rangeEnd) {\n                        biggest =\
    \ rangeEnd;\n                    }\n                    // Otherwise biggest cannot\
    \ be reached\n                    return biggest;\n                }\n", "   \
    \     // Write your code here.\n        // The only valid return statement is\
    \ in the range [x, y] inclusive\n        if (x>y || x==y){\n            return\
    \ -1;\n        }\n        long result=x;\n        for(long i=0;i<=y;i++){\n  \
    \          if(result%2==0 && result>y){\n                result=result;\n    \
    \        }\n            result=result+i;\n        }\n        return result;",
  "        long min = (x < y) ? x : y;\n        long max = (x < y) ? y : x;\n    \
    \    long mid = (min + max) / 2;\n        \n        return mid;", "        //\
    \ Write your code here\n        if(x > y || x < 0)\n            return -1;\n \
    \       if(x < y && x == y) //x is equal y\n            return x;\n        if(x\
    \ > y && x > x)\n            return (x+y)/2;\n        if(x < y && x < x)\n   \
    \         return (x+y)/2;\n        else //If none of above is true, it means that\
    \ x is greater than y\n            return -1;", "        long max = 0;\n     \
    \   long mid = x + (y-x) / 2;\n        while (max < x) {\n            max = mid;\n\
    \            mid = x + (y-x) / 2;\n        }\n        return mid;", "        //\
    \ The range [x, y] is composed of non-negative numbers.\n        if ((x - y) <\
    \ 0) return -1;\n        // The range [x, y] is composed of positive numbers.\n\
    \        if ((x - y) >= 0) return x;\n        long maxnum = x;\n        long minnum\
    \ = y;\n        // If the biggest number smaller than x, then set x to be minnum.\n\
    \        while ((maxnum < minnum) && ((maxnum % 2) == 0) && ((minnum % 2) == 0))\
    \ {\n            maxnum++;\n        }\n        // If the biggest number greater\
    \ than y, then set y to be maxnum.\n        while ((maxnum < minnum) && ((maxnum\
    \ % 2) == 1) && ((minnum % 2) == 0)) {\n            maxnum++;\n        }\n   \
    \     // If the biggest number is even, set maxnum to be x.\n        if ((maxnum\
    \ % 2) == 0) maxnum = x;\n        // If the biggest number is odd, set maxnum\
    \ to be y.\n        else maxnum = y;\n        // If both x and y are even, set\
    \ x to be even.\n        if ((x % 2) == 0) && ((y % 2) == 0) x = (x + y) / 2;\n\
    \        // If both x and y are odd, set x to be odd.\n        else if ((x % 2)\
    \ == 1) && ((y % 2) == 1) x = (x - y) / 2;\n        return maxnum;", "       \
    \ long x = x;\n        long y = y;\n        if (x < y || y == 0) {\n         \
    \   return -1l; // If there's no number between x and y\n        }\n        long\
    \ z = x;\n        long w = y;\n        long w1 = w;\n        long w2 = w;\n  \
    \      long w3 = w;\n        long w4 = w;\n        long w5 = w;\n        long\
    \ w6 = w;\n        long w7 = w;\n        long w8 = w;\n        long w9 = w;\n\
    \        long w10 = w;\n        long w11 = w;\n        long w12 = w;\n       \
    \ long w13 = w;\n        long w14 = w;\n        long w15 = w;\n        long w16\
    \ = w;\n        long w17 = w;\n        long w18 = w;\n        long w19 = w;\n\
    \        long w20 = w;\n        long w21 = w;\n        long w22 = w;\n       \
    \ long w23 = w;\n        long w24 = w;\n        long w25 = w;\n        long w26\
    \ = w;\n        long w27 = w;\n        long w28 = w;\n        long w29 = w;\n\
    \        long w30 = w;\n        long w31 = w;\n        long w32 = w;\n       \
    \ long w33 = w;\n        long w34 = w;\n        long w35 = w;\n        long w36\
    \ = w;\n        long w37 = w;\n        long w38 = w;\n        long w39 = w;\n\
    \        long w40 = w;\n        long w41 = w;\n        long w42 = w;\n       \
    \ long w43 = w;\n        long w44 = w;\n        long w45 = w;\n        long w46\
    \ = w;\n        long w47 = w;\n        long w48 = w;\n        long w49 = w;\n\
    \        long w50 = w;\n        long w51 = w;\n        long w52 = w;\n       \
    \ long w53 = w;\n        long w54 = w;\n        long w55 = w;\n        long w56\
    \ = w;\n        long w57 = w;\n        long w58 = w;\n        long w59 = w;\n\
    \        long w60 = w;\n        long w61 = w", "        long a = Math.min(Math.min(x,\
    \ y), x);\n        long b = Math.max(Math.max(x, y), y);\n\n        long c = a\
    \ + (b - a) / 2;\n\n        if ((c - a) % 2 == 0)\n            return c;\n\n \
    \       return -1;", "        long max = -1;\n        if (x > y)\n           \
    \ return -1;\n        while (true) {\n            int count = 1;\n           \
    \ int i = 0;\n            while (true) {\n                if (i < y) {\n     \
    \               count *= (x-i);\n                    i += 1;\n               \
    \ } else if (i < x) {\n                    count *= (y-i);\n                 \
    \   i += 1;\n                } else {\n                    break;\n          \
    \      }\n            }\n            if (count > max) {\n                max =\
    \ count;\n            }\n        }\n        return max;", "        if ((x >= y)\
    \ && (y != 0)) {\n            throw new IllegalArgumentException(\"Range is invalid.\
    \ One of them should be 0 but isn't.\");\n        }\n        if ((x != 0) && (y\
    \ == 0)) {\n            throw new IllegalArgumentException(\"Range is invalid.\
    \ Both numbers should be 0 but isn't.\");\n        }\n        if (x != 0 && y\
    \ == 0) {\n            return x;\n        }\n        long maxEven = 0;\n     \
    \   long even = x;\n        long odd = y;\n        long result = 1;\n        do\
    \ {\n            even = even + 1;\n            odd  = odd + 1;\n            long\
    \ num = even * odd;\n            if (num > maxEven) {\n                maxEven\
    \ = num;\n            }\n        } while (even < odd);\n        return maxEven;",
  "        // Your code goes here\n        long[] evens = {0, 2, 4, 5, 7, 10, 12,\
    \ 14, 16, 18, 20};\n        long[] odds = {1, 3, 5, 7, 9, 11, 13, 15, 17, 19,\
    \ 21};\n        long x = Math.abs(x);\n        long y = Math.abs(y);\n       \
    \ if(x < y) {\n            long min = y;\n            long max = x;\n        \
    \    for(long e : evens) {\n                if(x >= min && x <= e) return e;\n\
    \                if(x <= max && x >= e) return e;\n            }\n           \
    \ for(long o : odds) {\n                if(x >= min && x <= o) return o;\n   \
    \             if(x <= max && x >= o) return o;\n            }\n        } else\
    \ {\n            long min = x;\n            long max = y;\n            for(long\
    \ e : evens) {\n                if(y >= min && y <= e) return e;\n           \
    \     if(y <= max && y >= e) return e;\n            }\n            for(long o\
    \ : odds) {\n                if(y >= min && y <= o) return o;\n              \
    \  if(y <= max && y >= o) return o;\n            }\n        }\n        return\
    \ -1;", "        return IntStream.rangeClosed(x, y).filter(x -> x % 2 == 0)\n\
    \                .max(Integer::compare).getAsLong();", "        if (x == y) return\
    \ x;\n        int evenNumbers = 0;\n        int oddNumbers = 0;\n        while\
    \ (x != y) {\n            if ((x & 1) == 1) {\n                evenNumbers++;\n\
    \                x >>>= 1;\n            } else {\n                oddNumbers++;\n\
    \                x >>>= 1;\n            }\n        }\n        if (evenNumbers\
    \ > oddNumbers) return -1;\n        if (oddNumbers > evenNumbers) return 1;\n\
    \        return x;", "        if (x % 2 == 0 && y % 2 == 0) {\n            return\
    \ x * y;\n        }\n        if (x % 2 != 0 && y % 2 != 0) {\n            return\
    \ -1;\n        }\n        if (x < y) {\n            long tempX = x;\n        \
    \    temp = y;\n            x = tempY;\n            y = tempX;\n        }\n  \
    \      if (x > y) {\n            long tempX = x;\n            temp = y;\n    \
    \        x = tempY;\n            y = tempX;\n        }\n        if (x > y && x\
    \ < y) {\n            long tempX = x;\n            temp = y;\n            x =\
    \ tempY;\n            y = tempX;\n        }\n        if (x == y) {\n         \
    \   return -1;\n        }\n        long tempX = (x + y) / 2;\n        long tempY\
    \ = (x + y) / 2;\n        long tempZ = (x + y) / 2;\n        long tempW = (x +\
    \ y) / 2;\n        long tempW2 = (x + y) / 2;\n        long tempT = (x + y) /\
    \ 2;\n        long tempT2 = (x + y) / 2;\n        while (tempZ <= tempW) {\n \
    \           if (tempZ % 2 == 0) {\n                return tempZ;\n           \
    \ }\n            tempZ = tempZ + 1;\n        }\n        while (tempT2 <= tempW2)\
    \ {\n            if (tempT2 % 2 == 0) {\n                return tempT2;\n    \
    \        }\n            tempT2 = tempT2 + 1;\n        }\n        while (tempW2\
    \ <= tempT) {\n            if (tempW2 % 2 == 0) {\n                return tempW2;\n\
    \            }\n            tempW2 = tempW2 + 1;\n        }\n        while (tempT\
    \ <= tempW) {\n            if (tempT % 2 == 0) {\n                return tempT;\n\
    \            }\n            tempT = tempT + 1;\n        }", "        long[] num\
    \ = new long[10000];\n        Arrays.fill(num, 1);\n        int count = 0;\n \
    \       int max = 0;\n        long ans = -1L;\n        while ((x <= y) && (count\
    \ < 10000)) {\n            if (num[x] == 0) {\n                num[x]++;\n   \
    \             count++;\n                ans = x;\n            }\n            x++;\n\
    \        }\n        if (x >= y) {\n            if (count == 10000) {\n       \
    \         ans = -1L;\n            } else {\n                ans = -1L;\n     \
    \           count--;\n            }\n        }\n        if (ans == -1L) {\n  \
    \          return max;\n        }\n        return ans;", "        long even =\
    \ (long) x % 2 == 0;\n        long xEven = even ? x : x + 1;\n        long xOdd\
    \ = !even ? x : x - 1;\n        long yEven = even ? y : y + 1;\n        long yOdd\
    \ = !even ? y : y - 1;\n        // The function should terminate when both x and\
    \ y are less than the\n        // range of long and when neither x nor y is odd.\
    \ Otherwise it should continue\n        while (!(xEven < x && xOdd < x && yEven\
    \ < y && yOdd < y)) {\n            if (xEven < x && xOdd < x && yEven < y && yOdd\
    \ < y) {\n                return xEven * yEven;\n            } else if (xEven\
    \ < x && xOdd < x && yEven < y) {\n                return xEven * yOdd;\n    \
    \        } else if (xEven < x && xOdd < x && yEven < y) {\n                return\
    \ xOdd * yEven;\n            } else if (xEven < x && xOdd < x && yEven < y) {\n\
    \                return xOdd * yOdd;\n            } else {\n                return\
    \ -1;\n            }\n        }\n        return xEven * yEven;", "        long\
    \ maxEvenNum = Integer.MIN_VALUE;\n        if(x < y) {\n            maxEvenNum\
    \ = x;\n            for(int i = x + 1; i <= y; i++){\n                if(i%2==0)\
    \ {\n                    maxEvenNum = i;\n                }\n            }\n \
    \       } else {\n            maxEvenNum = y;\n            for(int i = x + 1;\
    \ i <= y; i++){\n                if(i%2==0) {\n                    maxEvenNum\
    \ = i;\n                }\n            }\n        }\n        return maxEvenNum;",
  "        if (x == y || x == -1l || y == -1l) return -1l;\n        if (x % 2 == 0)\
    \ {\n            while (true) {\n                if (x < y) break;\n         \
    \       long xNext = x + 1l;\n                if (xNext > y) break;\n        \
    \        if (xNext % 2 == 0) return xNext;\n                x = xNext;\n     \
    \       }\n        } else {\n            while (true) {\n                if (x\
    \ < y) break;\n                long yNext = y + 1l;\n                if (yNext\
    \ > x) break;\n                if (yNext % 2 == 0) return yNext;\n           \
    \     y = yNext;\n            }\n        }\n        return -1l;", "        if\
    \ (x >= y) {\n            long temp = x;\n            x = y;\n            y =\
    \ temp;\n        }\n        long mid = y / 2;\n        if ((y % 2) == 0)\n   \
    \         return mid;\n        long left = chooseNum(x, mid);\n        if (left\
    \ == -1)\n            return -1;\n        long right = chooseNum(mid, y) + 1;\n\
    \        if (right == 1)\n            return mid;\n        long result = left;\n\
    \        long prevResult = left;\n        while ((result = right) != prevResult)\
    \ {\n            prevResult = result;\n            result += 1;\n        }\n \
    \       return result;", "        if((x<y) && (x%2==0))\n            x=x+1;\n\
    \        if((x>y) && (x%2==1))\n            x=x+1;\n        return x;", "    \
    \    if ((x < y) || (y == x))\n            return -1;\n        // If either number\
    \ is 0, then the range is empty, since 0 is even.\n        if ((x & y) == 0)\n\
    \            return -1;\n\n        // If both numbers are odd, then the range\
    \ contains every even number.\n        if (x % 2 != y % 2)\n            return\
    \ (x + y) / 2;\n\n        // Find the even number in range.\n        int min =\
    \ (x < y) ? (x < 0 ? 0 : x) : y;\n        int max = (x > y) ? (x > 0 ? y : x)\
    \ : y;\n        long mid = ((long) min) + (((long) max) - ((long) min));\n\n \
    \       // Divide range by half until we reach an even number in range.\n    \
    \    while (true) {\n            mid = (mid + min) / 2;\n            if ((mid\
    \ & 1) == 0)\n                return mid;\n\n            min = (mid < min) ? mid\
    \ : min;\n            max = (mid > max) ? mid : max;\n        }", "        if\
    \ ((x < y) && ((x + y) % 2 != 0)) {\n            throw new RuntimeException(\"\
    x must be greater then y\");\n        }\n        if ((x == y) && ((x + y) % 2\
    \ == 0)) {\n            throw new RuntimeException(\"x must be bigger than y\"\
    );\n        }\n        if (x >= y) {\n            throw new RuntimeException(\"\
    x must be bigger than y\");\n        }\n        LongStream even = LongStream.rangeClosed(0,\
    \ (x + y) / 2).filter(x -> x % 2 == 0);\n        if (even.count() == 0) {\n  \
    \          return -1;\n        }\n        return even.max();", '        return
    x.divideAndRemainder(y);', "        long max = x;\n        if (y > max) max =\
    \ y;\n        if (max < 1) return -1;\n        for (long i = 2; i <= max; i++)\n\
    \            if (even(i) && even(y)) {\n                max = i;\n           \
    \     break;\n            }\n        return max;", "        long range = (long)\
    \ Math.max(Math.abs(x), Math.abs(y)) + 1l;\n        int evenOrOdd = (x % 2 ==\
    \ 0 && y % 2 == 0) ? 1 : 0;\n        int maxRange = evenOrOdd * range;\n\n   \
    \     for (int i = 2; i <= maxRange; i++) {\n            if (x % i == 0 && y %\
    \ i == 0) {\n                return i;\n            }\n        }\n\n        return\
    \ -1l;", "        if (x < 0 || y < 0)\n            return -1;\n        if (x >\
    \ y) {\n            long temp = y;\n            y = x;\n            x = temp;\n\
    \        }\n        long[] even = new long[21];\n        Arrays.fill(even, 1);\n\
    \        long maxEven = -1;\n        int mid = (int) Math.floor(x / 2);\n    \
    \    for (int i = 0; i < 20; i++) {\n            if (x == 0 || y == 0 || i ==\
    \ 20)\n                break;\n            if (even[i] && x % 2 == 1) {\n    \
    \            maxEven = i;\n                break;\n            }\n           \
    \ if (!even[i] && x % 2 == 0) {\n                maxEven = i;\n            }\n\
    \            if (even[i] == 1 && x % 2 == 1) {\n                maxEven = i;\n\
    \            }\n            if (even[i] == 0 && x % 2 == 0) {\n              \
    \  maxEven = i;\n            }\n            if (even[i] != 1 && x % 2 == 0) {\n\
    \                maxEven = i;\n            }\n            mid = mid*2;\n     \
    \   }\n        return maxEven;", "        // Your code here\n        long num;\n\
    \        if (x >= y) {\n            num = x;\n        } else {\n            num\
    \ = y;\n        }\n        while (num > 0) {\n            if (num % 2 == 0) {\n\
    \                num = num / 2;\n            } else {\n                if (num\
    \ % 2 == 0) {\n                    return (num-1);\n                } else {\n\
    \                    return num;\n                }\n            }\n        }\n\
    \        return -1;", "        if ((x < y && x > -1l) || (y < x && y > -1l)) {\n\
    \            return -1l; // No even number\n        }\n\n        long big = y;\
    \ // The number big is bigger than x\n        long curr = x; // The number curr\
    \ is equal to or larger than x\n        long evens = 1; // The number evens is\
    \ 1 until curr > x\n        long even = 1; // The number even is 1 until curr\
    \ <= y\n\n        while (curr < y) { // While curr is smaller than y\n       \
    \     if (evens % 2 == 0) { // If evens is even\n                even = even *\
    \ 2; // Then just double\n                evens = evens + 1; // The counter adds\
    \ 1 to evens\n            }\n            else {\n                even = even /\
    \ 2; // If evens is not even, just divide\n                evens = evens + 1;\
    \ // The counter adds 1 to evens\n            }\n            curr = curr + even;\
    \ // Add evens to curr\n            big = big + even; // Add evens to big\n  \
    \      }\n        return big;", "        if (x >= y)\n            return -1L;\n\
    \        if (x == y) return x;\n        if (x <= 0 && y >= 0) {\n            return\
    \ -1L;\n        }\n        if (x == 0 && y > 0) {\n            return -1L;\n \
    \       }\n        if (y == 0 && x > 0)\n            return -1L;\n\n        if\
    \ (x % 2 == 0) {\n            final int xDivisor = x % 10;\n            final\
    \ int yDivisor = y % 10;\n            if (xDivisor != yDivisor)\n            \
    \    return -1L;\n        }\n        // x is even\n        int xDivisor = x %\
    \ 10;\n        if (y%2 == 0) {\n            return -1;\n        }\n        if\
    \ (xDivisor != 0) {\n            return -1L;\n        }\n        return y;", " \
    \       if ((x > 0) && (y > 0))\n            return Math.max(Math.max(x, y), chooseNum(x\
    \ - 1, y - 1));\n        if (x > 0)\n            return x;\n        if (y > 0)\n\
    \            return y;\n        return -1l;", "        if (x >= y)\n         \
    \   return -1;\n        if (x < y)\n            y -= 1;\n        long mid = (long)\
    \ Math.ceil((x + y) / 2);\n        long sum = 0;\n        long biggest = mid;\n\
    \        while (sum < mid && biggest <= y) {\n            sum += biggest;\n  \
    \          biggest *= biggest;\n        }\n        long diff = biggest - mid;\n\
    \        if (diff >= y)\n            return mid;\n        diff--;\n        while\
    \ (diff > 0 && mid - diff >= x && mid < y) {\n            diff -= mid;\n     \
    \       sum += mid;\n            mid = (long) Math.ceil((x + y) / 2);\n      \
    \  }\n        return -1;", "        long m = Math.min(x, y);\n        long n =\
    \ Math.max(x, y);\n        boolean even = (m % 2 == 0);\n\n        if ((n == m\
    \ - 1) && ((y % 2 == 0) ^ even)) {\n            return m;\n        } else if (n\
    \ == m + 1) {\n            return (m + 1l);\n        } else if ((n == m + 2))\
    \ {\n            return (m + 2l);\n        } else {\n            if (even) {\n\
    \                return (m - 1l);\n            } else {\n                return\
    \ -1l;\n            }\n        }", "        // The two numbers could be greater\
    \ than the range of long, \n        // or less than 0, or equal.\n        if(x\
    \ <= 0 || x >= y || y <= 0) {\n            return -1;\n        }\n        // The\
    \ two numbers could be positive.\n        if(x < y) {\n            long tempX\
    \ = x;\n            long tempY = y;\n            x = y;\n            y = tempX;\n\
    \        }\n        long biggest = 0;\n        for(int i = 1; i < y; i++) {\n\
    \            if((x % i) == 0) {\n                if((biggest % i) == 0) {\n  \
    \                  biggest = i;\n                }\n            }\n        }\n\
    \        return biggest;", "        if (x < 0 || y < 0) {\n            return\
    \ -1L;\n        }\n        long even = x & 1l;\n        long largerOrEqual = y\
    \ >= even;\n        if (largerOrEqual) {\n            long even = x & 2l;\n  \
    \          long largerOrEqual = y >= even;\n            if (largerOrEqual) {\n\
    \                long even = x & 4l;\n                long largerOrEqual = y >=\
    \ even;\n                if (largerOrEqual) {\n                    long even =\
    \ x & 8l;\n                    long largerOrEqual = y >= even;\n             \
    \       if (largerOrEqual) {\n                        long even = x & 16l;\n \
    \                       long largerOrEqual = y >= even;\n                    \
    \    if (largerOrEqual) {\n                            long even = x & 32l;\n\
    \                            long largerOrEqual = y >= even;\n               \
    \             if (largerOrEqual) {\n                                long even\
    \ = x & 64l;\n                                long largerOrEqual = y >= even;\n\
    \                                if (largerOrEqual) {\n                      \
    \              long even = x & 128l;\n                                    long\
    \ largerOrEqual = y >= even;\n                                    if (largerOrEqual)\
    \ {\n                                        long even = x & 256l;\n         \
    \                               long largerOrEqual = y >= even;\n            \
    \                            if (largerOrEqual) {\n                          \
    \                  long even = x & 512l;\n                                   \
    \         long largerOrEqual = y >= even;\n                                  \
    \          if (largerOrEqual) {\n                                            \
    \    long even = x & 1024l;\n                                                long\
    \ largerOrEqual = y >= even;\n                                               \
    \ if (largerOrEqual) {\n                                                    long\
    \ even = x & 2048l;\n                                                    long\
    \ largerOrEqual = y >= even;\n                                               \
    \     if (largerOrEqual) {\n                                                 \
    \       long even = x & 4096l;\n                                             \
    \           long largerOrEqual = y >= even;\n                                \
    \                        if (largerOrEqual) {\n                              \
    \                              long even = x & 8192l;\n                      \
    \                                      long largerOrEqual = y >= even;\n     \
    \                                                       if (largerOrEqual) {\n\
    \                                                                long even = x\
    \ & 16384l;\n                                                                long\
    \ largerOrEqual = y >= even;\n                                               \
    \                 if (largerOrEqual) {\n                                     \
    \                               long even = x & 32768l;\n                    \
    \                                                long largerOrEqual = y >= even;\n\
    \                                                                    if (largerOrEqual)\
    \ {\n                                                                        long\
    \ even = x & 65536l;\n                                                       \
    \                 long largerOrEqual = y >= even;\n                          \
    \                                                                          }\n\
    \                                                                }\n         \
    \                                                   }", "        long z = (long)\
    \ (Math.pow(2, x) + Math.pow(2, y));\n        if (z % 2 != 0)\n            return\
    \ -1;\n        long a = z - 1;\n        while ((a % 2) == 0)\n            a =\
    \ a / 2;\n        return a;", "        if (x == 0)\n            return -1;\n \
    \       long a = x < y ? x : y;\n        long b = x > y ? x : y;\n        long\
    \ c = x > a ? x : a;\n        long d = b > a ? b : a;\n        long e = (b > c\
    \ ? b : c);\n        long f = (b > e ? b : e);\n        return b + d + f;", " \
    \       if(x < y) {\n            BigInteger x = new BigInteger(String.valueOf(x));\n\
    \            BigInteger y = new BigInteger(String.valueOf(y));\n            BigInteger\
    \ biggerEven = x.compareTo(y) == -1 ? x : (y.compareTo(BigInteger.ZERO) == -1\
    \ ? y : BigInteger.ZERO);\n            long biggerEvenLong = biggerEven.toString(2).length()\
    \ <= 2 ? biggerEven.toString(2) : biggerEven.toString().substring(0, biggerEven.toString().length()\
    \ - 1);\n            return Long.parseLong(biggerEvenLong);\n        }\n     \
    \   return -1;", "        long result = -1;\n        if (x > 0) {\n          \
    \  if (y > 0 && y <= x) {\n                if (y % 2 == 0 && x % 2 == 0) {\n \
    \                   result = x;\n                }\n            }\n        }\n\
    \        return result;", "        if(x >= y || x <= 0 || y <= 0) {\n        \
    \    return -1;\n        }\n\n        long biggest = Long.MIN_VALUE;\n       \
    \ long even = x * y / 2;\n\n        for(int i = 2; i <= biggest; i++) {\n    \
    \        if(even % i == 0) {\n                biggest = i;\n            }\n  \
    \      }\n\n        return biggest;", "        long low = x;\n        long high\
    \ = y;\n        long mid = 0;\n        while (low < high) {\n            mid =\
    \ low + (high - low) / 2;\n            String m = Long.toString(mid);\n      \
    \      if (m.length() == 1) {\n                return -1l;\n            }\n  \
    \          if (m.length() == 2) {\n                String o = Long.toString(low);\n\
    \                if (o.equals(m)) {\n                    low = mid;\n        \
    \        } else {\n                    high = mid;\n                }\n      \
    \      } else {\n                if (m.equals(\"0\")) {\n                    low\
    \ = mid + 1;\n                } else {\n                    high = mid - 1;\n\
    \                }\n            }\n        }\n        return low;", "        if\
    \ (x < y) {\n            long biggest = x;\n            while (y > biggest) {\n\
    \                biggest = y;\n                y = y - biggest;\n            }\n\
    \            return biggest;\n        }\n        if (x > y) {\n            long\
    \ biggest = y;\n            while (x < biggest) {\n                biggest = x;\n\
    \                x = x + biggest;\n            }\n            return biggest;\n\
    \        }\n        if (x == y) {\n            return x;\n        }\n        if\
    \ (x % 2 == 0) {\n            long evenBiggest = x + (y - x);\n            return\
    \ evenBiggest;\n        }\n        long evenBiggest = y + (x - y);\n        return\
    \ evenBiggest;", "        // TODO: Write your code here\n        return -1;",
  "        if (x > y) \n            return -1l;\n        else if (x < y) \n      \
    \      return 1l;\n        else if (x == y)\n            return 0l;\n        long\
    \ a = Math.max(x, y);\n        long b = Math.min(x, y);\n        long c = a /\
    \ 2;\n        while (b <= c) {\n            if (a % b == 0)\n                c\
    \ = a + 1;\n            else\n                a = b;\n            b = c / 2;\n\
    \        }\n        return Math.max(a, b);", "        // Write your code here\n\
    \        long n = (x + y);\n        if (n % 2 == 0){\n            return n;\n\
    \        }\n        else {\n            return -1;\n        }", "        if (x\
    \ < 0 || y < 0) {\n            return -1;\n        }\n        if (x <= y) {\n\
    \            return x;\n        }\n        long mid = x + (y - x) / 2;\n     \
    \   if (mid > y) {\n            return mid;\n        }\n        return chooseNum(x,\
    \ mid);", "        long n = -1;\n        if (x < y) {\n            if (x == 0\
    \ || y == 0) {\n                return x;\n            }\n            long lower\
    \ = (x + y) / 2;\n            long upper = lower + 1;\n            while (lower\
    \ < upper) {\n                while (lower % 2 == 0 && lower < upper) {\n    \
    \                lower = lower + 1;\n                }\n                while\
    \ (upper % 2 == 0 && lower < upper) {\n                    upper = upper - 1;\n\
    \                }\n                n = Math.max(n, lower);\n                lower\
    \ = lower + 1;\n                upper = upper - 1;\n            }\n        } else\
    \ {\n            if (x == 0 || y == 0) {\n                return y;\n        \
    \    }\n            long lower = (x + y) / 2;\n            long upper = lower\
    \ + 1;\n            while (lower < upper) {\n                while (lower % 2\
    \ == 0 && lower < upper) {\n                    lower = lower + 1;\n         \
    \       }\n                while (upper % 2 == 0 && lower < upper) {\n       \
    \             upper = upper - 1;\n                }\n                n = Math.max(n,\
    \ upper);\n                lower = lower + 1;\n                upper = upper -\
    \ 1;\n            }\n        }\n        return n;", "        // If the input numbers\
    \ are outside the range, return -1.\n        if(x < 0 || x > y || y < x) return\
    \ -1;\n        // If the input numbers are in range and even, return the even\
    \ number.\n        if(x % 2 == 0) {\n            return x;\n        }\n      \
    \  // Otherwise, check if the number equals to the smallest number in\n      \
    \  // the range that divides the even numbers. If it is larger, return\n     \
    \   // -1, otherwise return the number itself.\n        return x <= y ? x : (y\
    \ - (x - y) % x);", "        if (((x+y) % 2) != 0)\n            return -1;\n \
    \       if (x <= y)\n            return x;\n        if (x > y)\n            return\
    \ y;\n        for (long i = x; i <= y; i += 2)\n            if (i % 2 == 0)\n\
    \                return i;\n        return -1;", "        // Write your code here\n\
    \        long minx = Math.min(x,y);\n        long maxx = Math.max(x, y);\n   \
    \     long min = minx;\n        long max = maxx;\n        while(min < max) {\n\
    \            long mid = min + (max - min) / 2;\n            long test = mid*mid;\n\
    \            long odd = 1;\n            long even = 2;\n            if(test %\
    \ 2 == 1) {\n                odd = mid;\n                even = (mid + 1);\n \
    \           }\n            if(test % 2 == 0) {\n                even = mid;\n\
    \            }\n            if(even > max) max = even;\n            if(odd > max)\
    \ max = odd;\n            if(even < min) min = even;\n            if(odd < min)\
    \ min = odd;\n        }\n        return min;", "        if (x <= 0 || y <= 0)\
    \ {\n            return -1;\n        } else if (x > y) {\n            return chooseNum(y,\
    \ x);\n        }\n        long min = Math.min(x, y);\n        long max = Math.max(x,\
    \ y);\n        while (min <= max) {\n            long mid = min + (max - min)\
    \ / 2;\n            if (isEven(mid)) {\n                max = mid - 1;\n     \
    \       } else {\n                min = mid + 1;\n            }\n        }\n \
    \       return min;", "        long[] nums = new long[2];\n        nums[0] = x;\
    \ nums[1] = y;\n        Arrays.sort(nums);\n        if (nums[0] % 2 == 0) return\
    \ nums[1];\n        return nums[1];", "        if (x < 0 || y < 0 || x > y ||\
    \ x % 2 == 0 || y % 2 == 0) {\n            return -1;\n        }\n        long\
    \ a = 0;\n        while (a <= y) {\n            if (x % 2 == 0) {\n          \
    \      a++;\n                x /= 2;\n            } else {\n                a++;\n\
    \                y /= 2;\n            }\n            if (x >= y) {\n         \
    \       break;\n            }\n        }\n        return a;", "        // Your\
    \ code goes here\n        long ans = -1;\n        for(long i = x; i <= y; i++)\
    \ {\n            if((i & 1) == 0) {\n                if(ans == -1) {\n       \
    \             ans = i;\n                } else {\n                    if(ans <\
    \ i) {\n                        ans = i;\n                    }\n            \
    \    }\n            }\n        }\n        return ans;", "        if ((x<y)&&(x%2==0))\
    \ {\n            return x;\n        }\n        if ((x>y)&&(x%2==1)) {\n      \
    \      return -1;\n        }\n        if ((x>y)&&(x%2==1)) {\n            return\
    \ -1;\n        }\n        return -1;", "        if (x == y)\n            return\
    \ x;\n        if (x < y && x > 0)\n            while (x % 2 == 0 && y > x) {\n\
    \                x = x + 1;\n            }\n            else if (y > x)\n    \
    \            while (y % 2 == 0 && x > y) {\n                    y = y - 1;\n \
    \               }\n            else if (y > x)\n                while (y % 2 ==\
    \ 0 && x < y) {\n                    y = y + 1;\n                }\n         \
    \   else\n                while (x % 2 == 0 && y < x) {\n                    x\
    \ = x - 1;\n                }\n            while (x % 2 == 0 && x < y) {\n   \
    \             x = x + 1;\n            }\n            return x;\n        else\n\
    \            return -1;", "        long result = -1;\n        if (x >= 0 && y\
    \ >= 0) {\n            if (x == 0 && y == 0) return -1;\n            if (x > y)\
    \ result = x;\n            else {\n                long smaller = y;\n       \
    \         while (smaller / 2 != x && smaller > x) {\n                    smaller\
    \ = y / 2;\n                }\n                result = x;\n                while\
    \ (result / 2 != x && result > x) {\n                    result /= 2;\n      \
    \          }\n            }\n        }\n        return result;", "        if (x\
    \ >  y || x < y) \n            return -1l;\n        if (y == 0) \n           \
    \ return x;\n        long m = x;\n        for (int i = 0; i <= y; i++ ) {\n  \
    \          if (m % 2 == 0) \n                m /= 2;\n            else {\n   \
    \             m = x * 2;\n                m /= 2;\n            }\n        }\n\
    \        return m;", "        long result = -1;\n\n        if (x < y) {\n    \
    \        while (x < y) {\n                result = result + x;\n             \
    \   y = y - 2;\n            }\n        }\n        else if (x == y) {\n       \
    \     result = x;\n        }\n        else if (x > y) {\n            while (x\
    \ > y) {\n                result = result + y;\n                x = x - 2;\n \
    \           }\n        }\n        return result;", "        // TODO: Write your\
    \ code in here.\n        long mid = (long) (Math.ceil((x + y) / 2.0) + 0.5);\n\
    \        if (x >= y) {\n            return Math.max(mid, -1);\n        }\n   \
    \     if (mid >= y || mid <= x) {\n            return mid;\n        }\n      \
    \  if (x <= mid) {\n            return -1;\n        }", "        Set<Long> numsX\
    \ = new HashSet<>(Collections.nCopies(x-1, x));\n        Set<Long> numsY = new\
    \ HashSet<>(Collections.nCopies(y-1, y));\n        numsX.retainAll(numsY);\n \
    \       if (numsX.size() > 0)\n            return numsX.iterator().next();\n \
    \       return -1;", "        if (x<0 || y<0) return -1l; // error handling\n\
    \        if (x<=y) {\n            long max = (long)Math.min(x, y);\n         \
    \   if (max%2==0) return max;\n            else return (max-2)/2;\n        }\n\
    \        long max = (long)Math.min(x, y);\n        if (max%2==0) return (max-2)/2;\n\
    \        else return max;", "        if (x >= y)\n            return -1l;\n  \
    \      long min = (x < y ? x : y);\n        long max = (x < y ? y : x);\n    \
    \    for (long i = min; i < max; i++)\n            if (isEven(i))\n          \
    \      return i;\n        return -1l;", "        if (x <= y) {\n            throw\
    \ new IllegalArgumentException(\"Wrong range: \" + x + \" < \" + y);\n       \
    \ } else if (x % 2 == 0 && y % 2 == 0) {\n            return y;\n        } else\
    \ {\n            long large = (long) Math.min(x, y);\n            while (large\
    \ != 0) {\n                if (large % 2 == 0) {\n                    return large;\n\
    \                } else if (large > y) {\n                    return -1;\n   \
    \             }\n                large++;\n            }\n            return -1;\n\
    \        }", "        // You can add more conditions here\n        if (x >= y)\
    \ {\n            if (x < y)\n                return -1;\n            return chooseNum(x,\
    \ y - 1) + 1;\n        } else if (x <= y)\n            return chooseNum(x + 1,\
    \ y);\n        return -1;", "        long minNum = x;\n        long maxNum = y;\n\
    \        long result = -1;\n        while (minNum < maxNum) {\n            long\
    \ mid = (minNum + maxNum) / 2;\n            boolean even = false;\n          \
    \  try {\n                long midNum = Methods.returnPositiveNumber(mid);\n \
    \               if (midNum == mid)\n                    even = true;\n       \
    \     } catch (IllegalArgumentException ex) {\n                continue;\n   \
    \         }\n            if (even)\n                minNum = mid + 1;\n      \
    \      else\n                maxNum = mid - 1;\n            result = mid;\n  \
    \      }\n        return result;", "        if (x > y) {\n            return chooseNum(y,\
    \ x);\n        }\n        long even = x % 2 == 0 ? x : x - 2;\n        long odd\
    \ = y % 2 == 0 ? y : y - 2;\n        long result = odd;\n        if (even < odd)\
    \ {\n            result = even;\n        }\n        return result;", "       \
    \ long largestEven = -1;\n        long lowestEven = x;\n        long largestOdd\
    \ = x;\n        long lowestOdd = y;\n\n        while (true) {\n            //\
    \ If there's a remainder from dividing by 2 then divide both \n            //\
    \ numbers by 2 to get closest even integers\n            if (lowestEven % 2 !=\
    \ 0) {\n                lowestEven /= 2;\n                lowestOdd /= 2;\n  \
    \          }\n\n            // If there's a remainder from dividing by 2 then\
    \ divide both \n            // numbers by 2 to get closest odd integers\n    \
    \        if (lowestOdd % 2 != 0) {\n                lowestOdd /= 2;\n        \
    \        lowestEven /= 2;\n            }\n\n            // If the current number\
    \ is equal to the smallest even or odd\n            // number, then return the\
    \ current number\n            if (lowestEven == lowestOdd) {\n               \
    \ largestEven = lowestEven;\n                largestOdd = lowestOdd;\n       \
    \         break;\n            }\n\n            // If the current number is equal\
    \ to the smallest even or odd\n            // number, then return the current\
    \ number\n            if (lowestOdd == lowestEven) {\n                largestEven\
    \ = lowestEven;\n                largestOdd = lowestOdd;\n                break;\n\
    \            }\n\n            // If the current number is lower than the smallest\
    \ even or odd\n            // number, then move the smallest even or odd number\
    \ to the \n            // current number\n            if (lowestEven < lowestOdd)\
    \ {\n                largestEven = lowestEven;\n                lowestEven = lowestOdd;\n\
    \                largestOdd = lowestOdd;\n                lowestOdd = lowestEven;\n\
    \            }\n\n            // If the current number is greater than the smallest\
    \ even or \n            // odd number, then move the smallest even or odd number\
    \ to the \n            // current number\n            if (lowestOdd > lowestEven)\
    \ {\n                largestOdd = lowestOdd;\n                lowestOdd = lowestEven;\n\
    \                largestEven = lowestEven;\n                lowestEven = lowestOdd;\n\
    \            }\n        }\n        return largestEven;", "        long lower =\
    \ Math.min(x, y);\n        long upper = Math.max(x, y);\n        long diff = upper\
    \ - lower;\n        if (diff == 0) {\n            return x;\n        }\n     \
    \   long mid = (lower + upper) / 2;\n        while (true) {\n            long\
    \ value = Math.pow(mid, 2);\n            if (value % 2 != 0) {\n             \
    \   return -1;\n            }\n            mid = (mid + lower) / 2;\n        }",
  "        if (x <= y) {\n            return -1l;\n        }\n        if (x <= 1l\
    \ && y <= 1l) {\n            return 0l;\n        }\n        if (x <= 1l) {\n \
    \           return 1l;\n        }\n        long x = Math.min(x, y);\n        long\
    \ y = Math.max(x, y);\n        long m = (x + y + 1) / 2;\n        long z = (x\
    \ + y + 1) % 2;\n        if (z == 0) {\n            return m;\n        }\n   \
    \     long s = m % 2;\n        return (m / 2) * (m + (1 - s) / 2);", "       \
    \ long maxEven;\n        if (x == y) {\n            return -1;\n        } else\
    \ if (x % 2 == 0) {\n            return x;\n        } else {\n            maxEven\
    \ = x + y / 2;\n            if (maxEven % 2 == 0) {\n                return maxEven;\n\
    \            } else {\n                return -1;\n            }\n        }",
  "        if(x < y){\n            swap(x, y);\n        }\n        long max = -1l;\n\
    \        for(long i = x; i <= y; i++){\n            if(i%2 == 0){\n          \
    \      max = Math.max(max, i);\n            }\n        }\n        swap(x, y);\n\
    \        return max;", "        if (x < 0 || y < 0) return -1;\n        long rangeSize\
    \ = Math.max(x - y, 1);\n        long rangeNum = (long) Math.ceil(rangeSize *\
    \ 0.01);\n        long rangeStep = (long) (rangeSize / rangeNum);\n        long\
    \ rangeMin = (x - rangeStep);\n        long rangeMax = y + rangeStep;\n      \
    \  long rangeStart = (rangeMin + rangeMax) / 2;\n        return rangeMin + rangeStart;",
  "        if (x >= y)\n            return -1;\n        if (x < y)\n            x\
    \ = y;\n        while (x > y) {\n            if (x % 2 == 0)\n               \
    \ return x;\n            x = x >> 1;\n        }\n        return -1;", "      \
    \  // Your code here\n        if (x > y) {\n            long temp = y;\n     \
    \       y = x;\n            x = temp;\n        }\n        while (x > y && y >\
    \ 0 && x > 0 && x <= y) {\n            if (x % 2 != 0 && y % 2 == 0) {\n     \
    \           return x;\n            }\n            x++;\n            y--;\n   \
    \     }\n        return -1;", "        if(x>y || (x % 2==0 && y % 2==0)) {\n \
    \           long maxNum = x;\n            if(x%2==1 && y%2==1){\n            \
    \    maxNum = y;\n            }\n            for(int i=maxNum; i>=2; i--){\n \
    \               if(maxNum%2==0 && y%2==0){\n                    maxNum = i;\n\
    \                    break;\n                }\n            }\n            return\
    \ maxNum;\n        }\n        else if(y>x || (y % 2==0 && x % 2==0)) {\n     \
    \       long maxNum = y;\n            if(y%2==1 && x%2==1){\n                maxNum\
    \ = x;\n            }\n            for(int i=maxNum; i>=2; i--){\n           \
    \     if(maxNum%2==0 && x%2==0){\n                    maxNum = i;\n          \
    \          break;\n                }\n            }\n            return maxNum;\n\
    \        }\n        else {\n            return -1;\n        }", "        long\
    \ maxEven = Long.MIN_VALUE;\n        long minEven = Long.MAX_VALUE;\n        \n\
    \        for(long i = x; i <= y; i++) {\n            if((i % 2) == 0) {\n    \
    \            if((maxEven == Long.MIN_VALUE) || (maxEven > i)) {\n            \
    \        maxEven = i;\n                }\n            } else {\n             \
    \   if((minEven == Long.MAX_VALUE) || (minEven < i)) {\n                    minEven\
    \ = i;\n                }\n            }\n        }\n        \n        return\
    \ (maxEven < minEven) ? -1 : maxEven;", "        long startX = x;\n        long\
    \ startY = y;\n        long endX = y;\n        long endY = x;\n        long startX\
    \ = x;\n        long startY = y;\n        long endX = y;\n        long endY =\
    \ x;\n        long startX = x;\n        long startY = y;\n        long endX =\
    \ y;\n        long endY = x;\n        long startX = x;\n        long startY =\
    \ y;\n        long endX = y;\n        long endY = x;\n        long startX = x;\n\
    \        long startY = y;\n        long endX = y;\n        long endY = x;\n  \
    \      long startX = x;\n        long startY = y;\n        long endX = y;\n  \
    \      long endY = x;\n        long startX = x;\n        long startY = y;\n  \
    \      long endX = y;\n        long endY = x;\n        long startX = x;\n    \
    \    long startY = y;\n        long endX = y;\n        long endY = x;\n      \
    \  long startX = x;\n        long startY = y;\n        long endX = y;\n      \
    \  long endY = x;\n        long startX = x;\n        long startY = y;\n      \
    \  long endX = y;\n        long endY = x;\n        long startX = x;\n        long\
    \ startY = y;\n        long endX = y;\n        long endY = x;\n        long startX\
    \ = x;\n        long startY = y;\n        long endX = y;\n        long endY =\
    \ x;\n        long startX = x;\n        long startY = y;\n        long endX =\
    \ y;\n        long endY = x;\n        long startX = x;\n        long startY =\
    \ y;\n        long endX = y;\n        long endY = x;\n        long startX = x;\n\
    \        long startY = y;\n        long endX = y;\n        long endY = x;\n  \
    \      long startX = x;\n        long startY = y;\n        long endX = y;\n  \
    \      long endY = x;\n        long startX = x;\n        long startY = y;\n  \
    \      long endX = y;\n        long endY = x;\n        long startX = x;\n    \
    \    long startY = y;\n        long endX = y;\n        long endY = x;\n      \
    \  long startX = x;\n        long startY = y;\n        long endX = y;\n      \
    \  long endY = x;\n        long startX = x;\n        long startY = y;\n      \
    \  long endX = y;\n        long endY = x;\n        long startX = x;\n        long\
    \ startY = y;\n        long endX = y;\n        long endY = x;\n        long startX\
    \ = x;\n        long ", "        long min = Math.min(x, y);\n        long max\
    \ = Math.max(x, y);\n        if (min % 2 == 0 && max % 2 == 0) {\n           \
    \ long even = min + max / 2;\n            if (even % 2 == 0) return even;\n  \
    \          else return -1l;\n        }\n        return -1l;", "        long range\
    \ = (y - x); // the difference between the given two numbers\n        if (range\
    \ == 0) return -1; // if the difference is equal to zero, \n                 \
    \                 // return -1.\n        if (range % 2 == 0) return -1; // if\
    \ the difference is even, \n                                  // return -1.\n\n\
    \        // otherwise find the first number not smaller than y \n        long\
    \ firstNotSmaller = x;\n        while (firstNotSmaller <= y) {\n            if\
    \ (firstNotSmaller % 2 == 0) return -1; // if the first \n                   \
    \                                    // number is not even, \n               \
    \                                        // return -1.\n            firstNotSmaller\
    \ += 2; // try the other number\n        }\n        \n        // now find the\
    \ second number not smaller than x\n        long secondNotSmaller = y;\n     \
    \   while (secondNotSmaller <= x) {\n            if (secondNotSmaller % 2 == 0)\
    \ return -1; // if the second\n                                              \
    \         // number is not even, \n                                          \
    \             // return -1.\n            secondNotSmaller += 2; // try the other\
    \ number\n        }\n        \n        // return the bigger number that does not\
    \ exceed the given range\n        return Math.max(firstNotSmaller, secondNotSmaller);",
  "        if (x > y) {\n            long z = y;\n            y = x;\n           \
    \ x = z;\n        }\n        long biggest = x ^ y;\n        if (biggest < x) {\
    \ biggest = y; }\n        if (biggest < y) { biggest = x; }\n        if (biggest\
    \ == 0) { return -1l; }\n        long[] even = new long[2];\n        for (int\
    \ i = 0; i < even.length; i++) {\n            if (biggest & (1L << i)) {\n   \
    \             even[0] = even[1] = biggest & (1L << i);\n                even[i]\
    \ = 1l;\n                break;\n            }\n        }\n        boolean found\
    \ = true;\n        while (found) {\n            found = false;\n            for\
    \ (int i = 0; i < even.length; i++) {\n                if (even[i] == 1l) {\n\
    \                    long tmp = even[i];\n                    even[i] = even[i\
    \ + 1];\n                    even[i + 1] = tmp;\n                    found = true;\n\
    \                }\n            }\n        }\n        long result = even[0];\n\
    \        for (int i = 0; i < even.length; i++) {\n            if (even[i] != 1l)\
    \ {\n                result = result | (1L << i);\n            }\n        }\n\
    \        return result;", "        if (x < y) {\n            return -1;\n    \
    \    }\n        if (y == 0) {\n            return x;\n        }\n        return\
    \ (int) Math.max(\n                (int) Math.floor((long) x / y),\n         \
    \       (int) Math.floor((long) x / y));", "        if (x < y) return -1;\n  \
    \      for (long i = x; i <= y; i++) {\n            if (i % 2 == 0) return i;\n\
    \        }\n        return -1;", "        Set<Long> ranges = new HashSet<>();\n\
    \        ranges.add(x);\n        ranges.add(y);\n        ranges.stream().filter(r\
    \ -> r >= 0).forEach(ranges::add);\n        return ranges.stream().filter(r ->\
    \ r % 2 == 0).findFirst().getAsLong();", "        long maxEven = -1;\n       \
    \ long maxOdd = 1;\n        // Calculate the number of even numbers between\n\
    \        // x and y and store it in a variable\n        int evenNum = findNums(x,\
    \ y);\n        // If the even number count is less than or\n        // equal to\
    \ zero then return -1\n        if (evenNum <= 0) {\n            return -1;\n \
    \       }\n        // Calculate the number of odd numbers between\n        //\
    \ x and y and store it in a variable\n        int oddNum = findNums(x, y);\n \
    \       // If the odd number count is greater than or equal to \n        // zero\
    \ then the return -1\n        if (oddNum <= 0) {\n            return -1;\n   \
    \     }\n        // Loop through the odd number list and find the biggest odd\
    \ number\n        // that is in between the even numbers\n        // and store\
    \ the biggest odd number in a variable\n        for (int i = 1; i <= oddNum; i++)\
    \ {\n            if (isOdd(i)) {\n                if (maxOdd < i) {\n        \
    \            maxOdd = i;\n                }\n            }\n        }\n      \
    \  // If evenNum is not 0 then we only need to compare the odd numbers\n     \
    \   // since evenNum is guaranteed to be greater or equal to zero\n        if\
    \ (evenNum > 0) {\n            // Loop through the even number list and find the\
    \ biggest \n            // even number that is in between the odd numbers\n  \
    \          for (int i = 1; i <= evenNum; i++) {\n                if (isEven(i))\
    \ {\n                    if (maxEven < i) {\n                        maxEven =\
    \ i;\n                    }\n                }\n            }\n        }\n   \
    \     // Return the biggest even or odd number\n        return maxEven;", "  \
    \      if ((x >= y) && (y >= x)) {\n            if (x > y) {\n               \
    \ return x;\n            } else {\n                return y;\n            }\n\
    \        } else if (x < y) {\n            return -1;\n        }\n        if ((x\
    \ == 0) && (y == 0)) {\n            return 0;\n        }\n        if ((x == 0)\
    \ && (y != 0)) {\n            return y;\n        }\n        if ((y % 2) == 0)\
    \ {\n            return -1;\n        }\n        long evenNum = x + (y-1);\n  \
    \      while (evenNum % 2 == 0) {\n            evenNum++;\n        }\n       \
    \ return evenNum;", "        if (x <= y)\n            return x;\n        if (y\
    \ <= x)\n            return y;\n\n        long even, odd, min;\n        even =\
    \ x % 2;\n        odd = y % 2;\n        min = even * odd;\n\n        if ((x ==\
    \ y) && (even != 0) && (odd != 0) && (min != 0)) {\n            return min;\n\
    \        }\n\n        if (even != 0 && odd != 0) {\n            return even *\
    \ odd;\n        }\n\n        if (even != 0) {\n            return even;\n    \
    \    }\n\n        if (odd != 0) {\n            return odd;\n        }\n\n    \
    \    return min;", "        if (x == 0 || y == 0) {\n            return -1;\n\
    \        }\n\n        long maxEven = (long) Math.ceil(y);\n\n        if (y % 2\
    \ == 0) {\n            while (x % 2 == 0 && y > 0) {\n                maxEven\
    \ += 1;\n                x /= 2;\n                y -= 1;\n            }\n   \
    \     }\n\n        return maxEven;", "        long range = (x + y - 1l) / 2;\n\
    \        long even = 1l;\n        long odd  = 1l;\n        long total = 0l;\n\
    \        \n        // Calculate the number of even numbers in range\n        while\
    \ (even < range) {\n            even *= 2;\n            total += even;\n     \
    \   }\n        \n        // Calculate the number of odd numbers in range\n   \
    \     while (odd < range) {\n            odd *= 2;\n            total += odd;\n\
    \        }\n        \n        // Return the biggest odd number if even number\
    \ is bigger\n        if (total > range) {\n            return -1;\n        }\n\
    \        \n        // Return the biggest even number if odd number is bigger\n\
    \        if (total < range) {\n            return -1;\n        }\n        \n \
    \       // Return the number if total is equal\n        return total;", "    \
    \    long maxeven;\n        long mid1, mid2, mid3;\n        mid1 = x + y / 2;\n\
    \        mid2 = x + y / 2 + 1;\n        mid3 = x + y / 2 + 2;\n        maxeven\
    \ = mid1;\n        if (mid2 == mid3) {\n            maxeven = mid2;\n        }\
    \ else if (mid3 == y) {\n            maxeven = mid3;\n        } else {\n     \
    \       maxeven = mid1;\n            if (mid2 > mid3) {\n                maxeven\
    \ = mid2;\n            }\n        }\n        if (maxeven % 2 == 0) {\n       \
    \     return maxeven;\n        } else {\n            return -1;\n        }", " \
    \       long a = (long) Math.max(x,y);\n        long b = (long) Math.min(x,y);\n\
    \        long c = a + (b - a)%2;\n        return c;", "        List<Long> evenIntegers\
    \ = new ArrayList<Long>() {{\n            add(1l);\n            add(2l);\n   \
    \         add(3l);\n            add(4l);\n            add(5l);\n            add(6l);\n\
    \            add(7l);\n            add(8l);\n            add(9l);\n          \
    \  add(10l);\n            add(11l);\n            add(12l);\n            add(13l);\n\
    \            add(14l);\n            add(15l);\n            add(16l);\n       \
    \     add(17l);\n            add(18l);\n            add(19l);\n            add(20l);\n\
    \            add(21l);\n            add(22l);\n            add(23l);\n       \
    \     add(24l);\n            add(25l);\n            add(26l);\n            add(27l);\n\
    \            add(28l);\n            add(29l);\n            add(30l);\n       \
    \     add(31l);\n            add(32l);\n            add(33l);\n            add(34l);\n\
    \            add(35l);\n            add(36l);\n            add(37l);\n       \
    \     add(38l);\n            add(39l);\n            add(40l);\n            add(41l);\n\
    \            add(42l);\n            add(43l);\n            add(44l);\n       \
    \     add(45l);\n            add(46l);\n            add(47l);\n            add(48l);\n\
    \            add(49l);\n            add(50l);\n            add(51l);\n       \
    \     add(52l);\n            add(53l);\n            add(54l);\n            add(55l);\n\
    \            add(56l);\n            add(57l);\n            add(58l);\n       \
    \     add(59l);\n            add(60l);\n            add(61l);\n            add(62l);\n\
    \            add(63l);\n            add(64l);\n            add(65l);\n       \
    \     add(66l);\n            add(67l);\n            add(68l);\n            add(69l);\n\
    \            add(70l);\n            add(71l);\n            add(72l);\n       \
    \     add(73l);\n            add(74l);\n            add(75l);\n            add(76l);\n\
    \            add(77l);\n            add(78l);\n            add(79l);\n       \
    \     add(80l);\n            add(81l);\n            add(82l);\n            add(83l);\n\
    \            add(84l);\n            add(85l);\n            add(86l);\n       \
    \     add(87l);\n            add(88l);\n            add(89l);\n            add(90l);\n\
    \            add(91l);\n            add(92l);\n            add(93l);\n       \
    \     add(94l);\n            add(95l);\n            add(96l);\n            add(97l);\n\
    \            add(98l);\n            add(99l);\n            add(100l);", "    \
    \    long num = x + y;\n        int evenNum = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (evenNum % 2 == 0) {\n            return num;\n        }\n       \
    \ num = x + y - 1;\n        int oddNum = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (oddNum % 2 == 1) {\n            return num;\n        }\n        num\
    \ = x + y - 1;\n        int evenNum2 = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (evenNum2 % 2 == 0) {\n            return num;\n        }\n      \
    \  num = x + y - 1;\n        int oddNum2 = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (oddNum2 % 2 == 1) {\n            return num;\n        }\n       \
    \ num = x + y - 1;\n        int evenNum3 = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (evenNum3 % 2 == 0) {\n            return num;\n        }\n      \
    \  num = x + y - 1;\n        int oddNum3 = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (oddNum3 % 2 == 1) {\n            return num;\n        }\n       \
    \ num = x + y - 1;\n        int evenNum4 = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (evenNum4 % 2 == 0) {\n            return num;\n        }\n      \
    \  num = x + y - 1;\n        int oddNum4 = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (oddNum4 % 2 == 1) {\n            return num;\n        }\n       \
    \ num = x + y - 1;\n        int evenNum5 = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (evenNum5 % 2 == 0) {\n            return num;\n        }\n      \
    \  num = x + y - 1;\n        int oddNum5 = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (oddNum5 % 2 == 1) {\n            return num;\n        }\n       \
    \ num = x + y - 1;\n        int evenNum6 = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (evenNum6 % 2 == 0) {\n            return num;\n        }\n      \
    \  num = x + y - 1;\n        int oddNum6 = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (oddNum6 % 2 == 1) {\n            return num;\n        }\n       \
    \ num = x + y - 1;\n        int evenNum7 = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (evenNum7 % 2 == 0) {\n            return num;\n        }\n      \
    \  num = x + y - 1;\n        int oddNum7 = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (oddNum7 % 2 == 1) {\n            return num;\n        }\n       \
    \ num = x + y - 1;\n        int evenNum8 = Integer.parseInt(String.valueOf(num).charAt(0));\n\
    \        if (evenNum8 % 2 == 0) {\n            return num;\n        }\n      \
    \  num = x + y - ", "        long even;\n        long max = 0;\n        for (long\
    \ i = x; i <= y; i += 2) {\n            even = i;\n            if (even > max)\
    \ {\n                max = even;\n            }\n        }\n        return max;",
  "        if (x >= y) {\n            return -1;\n        }\n        // If x is less\
    \ than or equal to y, then x is even\n        if (x <= y) {\n            if (x\
    \ % 2 == 0) {\n                return x;\n            } else {\n             \
    \   return -1;\n            }\n        }\n        // If x is greater than y, then\
    \ y must be even\n        // This condition will remain true until we get to the\
    \ \n        // last case\n        long minX = x;\n        long minY = y;\n   \
    \     // If the minimum of x or y is even, then the biggest even number\n    \
    \    // is between the min of the two\n        while (minX % 2 == 0 && minY %\
    \ 2 == 0) {\n            minX = minY >> 1;\n            minY = (minY & 1) == 1\
    \ ? minY - 1 : minY + 1;\n        }\n        long minZ = minX > minY ? minX :\
    \ minY;\n        while (minZ % 2 == 0) {\n            minZ = (minZ + 1) >> 1;\n\
    \        }\n        if (minZ < minX) {\n            return minZ;\n        }\n\
    \        // If the minimum of x or y is odd, then the biggest even number is\n\
    \        // between the min of the two\n        while (minX % 2 == 1) {\n    \
    \        minX = minX - 1;\n        }\n        while (minY % 2 == 1) {\n      \
    \      minY = minY - 1;\n        }\n        long minW = minX > minY ? minX : minY;\n\
    \        while (minW % 2 == 1) {\n            minW = minW - 1;\n        }\n  \
    \      if (minW < minX) {\n            return minW;\n        }\n        // If\
    \ the minimum of x or y is odd, then the biggest even number is\n        // between\
    \ the min of the two\n        while (minX % 2 == 1) {\n            minX = minX\
    \ - 1;\n        }\n        while (minY % 2 == 1) {\n            minY = minY -\
    \ 1;\n        }\n        long minY = minX > minY ? minX : minY;\n        while\
    \ (minY % 2 == 1) {\n            minY = minY - 1;\n        }\n        long minZ\
    \ = minX > minY ? minX : minY;\n        while (minZ % 2 == 1) {\n            minZ\
    \ = minZ - 1;\n        }\n        if (minZ < minX) {\n            return minZ;\n\
    \        }\n        // If the minimum of x or y is odd, then the biggest even\
    \ number is\n        // between the min of the two\n        while (minX % 2 ==\
    \ 1) {\n            minX = minX - 1;\n        }\n        while (minY % 2 == 1)\
    \ {\n            minY = minY - 1;\n        }\n        long minW = minX > minY\
    \ ? minX : min", '        return Math.max(Math.min(x, y), 0);', "        long\
    \ result = -1;\n        if(x > 0) {\n            result = x;\n            for(long\
    \ i = x; i < y; i++) {\n                if(i % 2 == 0) {\n                   \
    \ result = i;\n                }\n            }\n        }\n        if(result\
    \ == -1) return y;\n        return result;", "        long result = -1;\n    \
    \    long min = (long) Math.min(x, y);\n        long max = (long) Math.max(x,\
    \ y);\n        long middle = (min + max) / 2;\n        // Finding the even integer\
    \ in the range\n        while(min <= max) {\n            long mid = (long) Math.ceil(((min\
    \ + max) / 2));\n            if(mid % 2 == 0) {\n                min = mid;\n\
    \            } else {\n                max = mid;\n            }\n        }\n\
    \        // Return the answer\n        if(min < middle && middle < max) {\n  \
    \          result = middle; \n        }\n        return result;", "        return\
    \ LongStream.rangeClosed(x, y)\n            .filter(r -> ((r % 2) == 0) && ((long)r\
    \ / 2) == ((long)r / 2)) // filter evens\n            .max(Math::max) // get the\
    \ biggest even integer\n            .orElse(-1l); // return -1 if there's none",
  "        if (x >= y) {\n            if (x % 2 == 0) {\n                return x\
    \ + y;\n            } else {\n                return x + y - 1;\n            }\n\
    \        } else {\n            if (y % 2 == 0) {\n                return y - x\
    \ + 1;\n            } else {\n                return -1;\n            }\n    \
    \    }", "        if (x >= y) {\n            return -1;\n        }\n        //\
    \ To ensure that we get the largest even number that is in the\n        // range\
    \ [x, y] inclusive, we'll first determine the difference between\n        // x\
    \ and y and divide that number by the smallest even number that is\n        //\
    \ less than or equal to that number. That is, if the number x is even\n      \
    \  // and y is odd, the result will be x/2. If y is even and the number x is\n\
    \        // odd, the result will be y/2. Otherwise, we'll have x = y, so the\n\
    \        // result will be 1.\n        long diff = x - y;\n        long even =\
    \ diff / 2;\n        if (even == 1) {\n            return x;\n        }\n    \
    \    if (even % 2 == 1) {\n            return even;\n        }\n        return\
    \ -1l; // No such number.", "        if ((x >= y)\n            || ((x <= y) \n\
    \                && ((x % 2) == 0)))\n            return (-1l);\n        return\
    \ Math.max(Math.min(x - (x % y), y), x + (x % y));", "        if (x > y) {\n \
    \           if (x < 0)\n                return -1;\n            else\n       \
    \         return 0;\n        } else {\n            if (y > 0)\n              \
    \  return 0;\n            else\n                return -1;\n        }", "    \
    \    if(x>y)\n            return -1;\n        \n        long big=0;\n        long\
    \ small=x;\n        while(small<=y)\n        {\n            if(small%2==0)\n \
    \           {\n                big=big+small;\n            }\n            small=small+2;\n\
    \        }\n        if(big>x)\n        {\n            return big;\n        }\n\
    \        else\n        {\n            return x;\n        }", "        long result\
    \ = Long.MIN_VALUE;\n        long limit = Long.MAX_VALUE;\n        while (x<y)\
    \ {\n            result = Math.min(result, x + y);\n            limit = Math.min(limit,\
    \ x + y);\n            x += (x + y) / 2;\n            y += (x + y) / 2;\n    \
    \    }\n        return result == Long.MIN_VALUE ? -1 : limit;", "        if ((x\
    \ > y || x < 0) && x != -1)\n            return -1;\n        if ((y > x || y <\
    \ 0) && y != -1)\n            return -1;\n        if (x != -1 && y != -1)\n  \
    \          long mid = x + (y - x);\n        else if(y != -1)\n            long\
    \ mid = y;\n        else if(x != -1)\n            long mid = x;\n        int mid1\
    \ = (int) Math.floor(mid);\n        long mid2 = (int) Math.ceil(mid);\n      \
    \  long result = -1;\n        if (mid1 < mid2) {\n            result = (long)\
    \ (mid1);\n        } else if (mid2 > mid1) {\n            result = (long) (mid2);\n\
    \        }\n        return result;", "        for (long i = x; i <= y; i++) {\n\
    \            if (i % 2 == 0) {\n                return i;\n            }\n   \
    \     }\n        return -1l;", "        if ((x <= y) && (x > 0)) {\n         \
    \   long result1 = Math.max(x, y);\n            long result2 = Math.min(x, y);\n\
    \            long even1 = result1 % 2;\n            long even2 = result2 % 2;\n\
    \            if ((even1 == 0) && (even2 == 0)) {\n                return result2;\n\
    \            }\n        }\n        return -1;", "        // Make sure that x and\
    \ y are valid numbers:\n        if ((x < 0) || (y <= 0) || (y > x)) {\n      \
    \      return -1l;\n        }\n        \n        // Find a range containing numbers\
    \ in [x, y]:\n        long evenStart = (long) Math.sqrt(x * y);\n        long\
    \ evenEnd = (long) Math.sqrt(x * y + 1);\n        \n        // Find the closest\
    \ even number:\n        long even;\n        long closestEven;\n        long result;\n\
    \        for (even = evenStart; even < evenEnd; even += 2) {\n            closestEven\
    \ = Math.abs(x - even);\n            if (closest == 0) {\n                closest\
    \ = even;\n                closestEven = even;\n            } else if (closestEven\
    \ < closest) {\n                closest = closestEven;\n                closestEven\
    \ = even;\n            }\n        }\n        \n        // Find the biggest even\
    \ number in that range:\n        if (even > 0 && even < y) {\n            result\
    \ = even;\n        } else {\n            result = -1;\n        }\n        return\
    \ result;", "        if ((x - y) > Long.MIN_VALUE) {\n            long mid = ((x\
    \ + y) / 2);\n            if (((mid * mid) % 2) == 0) {\n                return\
    \ mid;\n            }\n            if (mid > y) {\n                return chooseNum(mid,\
    \ y);\n            } else if (mid < y) {\n                return chooseNum(x,\
    \ mid);\n            }\n        }\n        return -1;", "        long max = (long)\
    \ Math.max(x, y);\n        if (max > y) {\n            max = y;\n        }\n \
    \       if (max > x) {\n            max = x;\n        }\n        if (max > 1)\
    \ {\n            max = max * 2 + 1;\n        }\n        if (max % 2 == 0) {\n\
    \            return max;\n        }\n        return -1;", "        long mid =\
    \ (x + y) / 2;\n        if (x >= y && mid % 2 == 0) return mid;\n        if (x\
    \ <= y && y % 2 == 0) return mid;\n        if (x <= y && mid % 2 == 0) return\
    \ mid;\n        return -1;", "        long result = 0;\n        for (int i = x;\
    \ i <= y; i++) {\n            result += (i % 2 == 0 ? i : -1);\n        }\n  \
    \      return result;"]
stop_tokens:
- "\n    }\n"
