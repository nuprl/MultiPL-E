name: HumanEval_68_pluck
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // \"Given an array array list representing a branch of a tree\
  \ that has non-negative integer nodes\n    // your task is to pluck one of the nodes\
  \ and return it.\n    // The plucked node should be the node with the smallest even\
  \ value.\n    // If multiple nodes with the same smallest even value are found return\
  \ the node that has smallest index.\n    // The plucked node should be returned\
  \ in an array array list, [ smalest_value, its index ],\n    // If there are no\
  \ even values or the given array array list is empty, return [].\n    // Example\
  \ 1:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l))))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example 2:\n\
  \    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l))))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))\n    // Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index.\n    // Example 3:\n\
  \    // >>> pluck((new ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
  \    // Example 4:\n    // >>> pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)0l, (long)3l, (long)0l, (long)4l, (long)2l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l)))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static ArrayList<Long> pluck(ArrayList<Long> arr) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(pluck((new\
  \ ArrayList<Long>(Arrays.asList((long)4l, (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))));\n\
  \    assert(pluck((new ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l, (long)0l, (long)3l,\
  \ (long)0l, (long)4l, (long)2l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l, (long)3l, (long)0l, (long)5l, (long)3l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)3l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)5l,\
  \ (long)4l, (long)8l, (long)4l, (long)8l)))).equals((new ArrayList<Long>(Arrays.asList((long)4l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)6l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l,\
  \ (long)1l)))));\n    assert(pluck((new ArrayList<Long>(Arrays.asList((long)7l,\
  \ (long)9l, (long)7l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    }\n\n}\n"
completions: ["        // write your code here\n        List<Long> ls = new ArrayList<>();\n\
    \        long smallestValue = arr.get(0);\n        long minIndex = -1;\n     \
    \   for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 ==\
    \ 0 && arr.get(i) < smallestValue && minIndex == -1) {\n                minIndex\
    \ = i;\n                smallestValue = arr.get(i);\n            } else if (arr.get(i)\
    \ % 2 != 0 && arr.get(i) == smallestValue && minIndex != -1) {\n             \
    \   minIndex = i;\n                smallestValue = arr.get(i);\n            }\n\
    \        }\n        ls.add(smallestValue);\n        ls.add(minIndex);\n      \
    \  return ls;", "        ArrayList<Long> arr = new ArrayList<Long>();\n      \
    \  ArrayList<Long> result = new ArrayList<Long>();\n        ArrayList<Long> evenNodes\
    \ = new ArrayList<Long>();\n\n        for (Long n : arr) {\n            if (n\
    \ % 2 == 0) {\n                evenNodes.add(n);\n            } else {\n     \
    \           result.add(n);\n            }\n        }\n\n        if (result.isEmpty())\
    \ {\n            return new ArrayList<Long>();\n        }\n\n        Collections.sort(result);\n\
    \n        Long n = result.get(0);\n\n        if (n == 0) {\n            return\
    \ evenNodes;\n        }\n\n        if (result.size() == 1) {\n            Long\
    \ temp = new Long(result.get(0));\n            evenNodes.add(temp);\n        \
    \    return evenNodes;\n        }\n\n        Arrays.sort(result);\n        result.add(n);\n\
    \n        while (result.size() > 1) {\n            Long temp = new Long(result.get(0));\n\
    \            evenNodes.add(temp);\n            result.remove(0);\n        }\n\n\
    \        return evenNodes;", "        if(arr.isEmpty()){\n            return new\
    \ ArrayList<>();\n        }\n        ArrayList<Long> arr = new ArrayList<>();\n\
    \        long max = 0;\n        int minIndex = 0;\n        boolean isEven = false;\n\
    \        for(Long node: arr){\n            if(node % 2 == 0){\n              \
    \  isEven = true;\n            }\n            if(isEven){\n                min\
    \ = node;\n                minIndex = arr.indexOf(node);\n                isEven\
    \ = false;\n            }\n            if(node > max){\n                max =\
    \ node;\n            }\n        }\n        arr.add(min);\n        return arr;",
  "        int min = arr.size() - 1;\n        for (int i = min; i >= 0; i--) {\n \
    \           if (isEven(arr.get(i))) {\n                min = i;\n            \
    \    break;\n            }\n        }\n        if (min > 0) {\n            ArrayList<Long>\
    \ smalest_value = new ArrayList<>();\n            for (int i = 0; i < min; i++)\
    \ {\n                if (arr.get(i) < arr.get(min - 1)) {\n                  \
    \  smalest_value.add(arr.get(i));\n                    smalest_value.add(min -\
    \ 1);\n                }\n            }\n            return smalest_value;\n \
    \       }\n        return null;", "        ArrayList<Long> vals = new ArrayList<>();\n\
    \        HashMap<Long, Integer> map = new HashMap<>();\n        long min = Long.MAX_VALUE;\n\
    \        int index = 0;\n        for(Long val : arr) {\n            map.put(val,\
    \ index);\n            if(val < min) {\n                min = val;\n         \
    \       index = map.get(min);\n            }\n            vals.add(val);\n   \
    \     }\n        if(vals.isEmpty()) {\n            return new ArrayList<>();\n\
    \        }\n        for(Long val : vals) {\n            if(val % 2 == 0) {\n \
    \               return new ArrayList<>();\n            }\n        }\n        HashMap<Long,\
    \ Integer> map2 = new HashMap<>();\n        for(Long val : vals) {\n         \
    \   Integer curIndex = map.get(val);\n            if(curIndex == map.get(val))\
    \ {\n                map2.put(val, curIndex);\n            }\n        }\n    \
    \    ArrayList<Long> newArray = new ArrayList<>();\n        for(Long val : vals)\
    \ {\n            if(map2.get(val) == null) {\n                newArray.add(val);\n\
    \            }\n        }\n        return new ArrayList<>(newArray);", "     \
    \   ArrayList<Long> ret = new ArrayList<>();\n        if (arr.size() == 0) {\n\
    \            return ret;\n        }\n        long largestEvenValue = 0;\n    \
    \    long smallestEvenIndex = -1;\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            if (arr.get(i) % 2 == 0) {\n                largestEvenValue\
    \ = Math.max(largestEvenValue, arr.get(i));\n                if (smallestEvenIndex\
    \ == -1 || smallestEvenIndex < arr.get(i)) {\n                    smallestEvenIndex\
    \ = arr.get(i);\n                }\n            }\n        }\n        if (smallestEvenIndex\
    \ == -1) {\n            return ret;\n        }\n        ret.add(smallestEvenIndex);\n\
    \        ret.add(largestEvenValue);\n        return ret;", "        if (arr.isEmpty()\
    \ || arr.size() == 1)\n            return arr;\n        ArrayList<Long> evens\
    \ = new ArrayList<>();\n        int max_idx = 0;\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) > max_idx)\
    \ {\n                evens = new ArrayList<>();\n                max_idx = i;\n\
    \            }\n            evens.add(arr.get(i));\n        }\n        if (evens.isEmpty()\
    \ || evens.size() == 1)\n            return evens;\n        Comparator<Long> c\
    \ = Comparator.comparingLong(l -> l);\n        Long smalest_value = evens.stream().sorted(c).min(Comparator.comparingLong(l\
    \ -> l)).orElse(null);\n        int min_idx = Collections.binarySearch(evens,\
    \ smalest_value);\n        if (min_idx == -1 || min_idx > max_idx)\n         \
    \   return evens;\n        ArrayList<Long> ans = new ArrayList<>();\n        ans.add(smalest_value);\n\
    \        for (int i = max_idx; i > min_idx; i--)\n            ans.add(evens.get(i));\n\
    \        return ans;", "        long minIndex = getMinIndex(arr);\n        if\
    \ (minIndex == 0) {\n            return arr;\n        }\n        long minValue\
    \ = arr.get(minIndex);\n        ArrayList<Long> nodes = new ArrayList<>();\n \
    \       for (long value : arr) {\n            if (value % 2 == 0 && value <= minValue)\
    \ {\n                nodes.add(value);\n            }\n        }\n        if (nodes.isEmpty())\
    \ {\n            return arr;\n        } else {\n            arr.add(minIndex,\
    \ minValue);\n            return nodes;\n        }", "        if (arr.isEmpty()\
    \ || arr.size() == 1)\n            return arr;\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Long node = Collections.min(arr, new Comparator<Long>()\
    \ {\n            public int compare(Long o1, Long o2) {\n                return\
    \ Long.compare(o1, o2);\n            }\n        });\n        ArrayList<Long> curr\
    \ = arr;\n        while (!curr.isEmpty() && curr.contains(node)) {\n         \
    \   Long val = Collections.min(curr, new Comparator<Long>() {\n              \
    \  public int compare(Long o1, Long o2) {\n                    return Long.compare(o1,\
    \ o2);\n                }\n            });\n            int idx = curr.indexOf(val);\n\
    \            result.add(val);\n            curr.remove(val);\n        }\n    \
    \    if (curr.isEmpty())\n            return result;\n        Integer intIndex\
    \ = curr.indexOf(node);\n        result.add(node, intIndex);\n        return result;",
  "        final ArrayList<Long> result = new ArrayList<>();\n        final int len\
    \ = arr.size();\n        if (len == 0) {\n            return result;\n       \
    \ }\n        Map<Long, Long> map = new HashMap<>();\n        for (int i = 0; i\
    \ < len; i++) {\n            final long value = arr.get(i);\n            final\
    \ Long value1 = map.get(value);\n            if (value1 == null) {\n         \
    \       map.put(value, Long.valueOf(i));\n            } else if (value1.intValue()\
    \ >= i) {\n                result.add((Long) value1);\n                map.put(value,\
    \ Long.valueOf(i));\n            }\n        }\n        return result;", "    \
    \    if (arr.isEmpty()) {\n            return new ArrayList<Long>();\n       \
    \ }\n        ArrayList<Long> ret = new ArrayList<Long>();\n        BigInteger\
    \ value = new BigInteger(\"0\");\n        BigInteger first = new BigInteger(\"\
    0\");\n        for (int i = 0; i < arr.size(); i++) {\n            BigInteger\
    \ current = arr.get(i);\n            if (current.equals(BigInteger.ZERO)) {\n\
    \                continue;\n            }\n            value = current.add(BigInteger.ONE);\n\
    \            first = current.compareTo(first) > 0 ? current : first;\n       \
    \ }\n        ret.add(first);\n        ret.add(BigInteger.ZERO);\n        ret.add(BigInteger.ZERO);\n\
    \        return ret;", "        int size = arr.size();\n        if (size <= 0\
    \ || size == 1) {\n            return new ArrayList<Long>(arr);\n        }\n \
    \       // The map stores every node that has even value\n        Map<Long, Integer>\
    \ map = new HashMap<Long, Integer>();\n        // The list stores every node that\
    \ has the smallest even value.\n        List<Long> list = new ArrayList<Long>(arr);\n\
    \        // For each element in list with even value\n        for (int i = 0;\
    \ i < list.size(); i++) {\n            Long curr = list.get(i);\n            if\
    \ (map.containsKey(curr)) {\n                map.put(curr, map.get(curr) + 1);\n\
    \            } else {\n                map.put(curr, 1);\n            }\n    \
    \    }\n        // If the size of map is 1\n        if (map.size() == 1) {\n \
    \           Long value = map.keySet().iterator().next();\n            list.remove(value);\n\
    \            list.add(value);\n        }\n        // Find out the smallest even\
    \ number\n        long min = list.get(0);\n        for (int i = 1; i < list.size();\
    \ i++) {\n            long curr = list.get(i);\n            if (curr % 2 == 0\
    \ && (curr > min || min == 0)) {\n                min = curr;\n            }\n\
    \        }\n        // Remove smallest even number\n        list.remove(min);\n\
    \        // Find the smallest index\n        int curr = -1;\n        for (int\
    \ i = 0; i < list.size(); i++) {\n            long curr = list.get(i);\n     \
    \       if (curr % 2 == 0 && (curr > min || min == 0)) {\n                curr\
    \ = i;\n            }\n        }\n        return new ArrayList<Long>(list);",
  "        Arrays.sort(arr);\n        int n = arr.size();\n        ArrayList<Long>\
    \ result = new ArrayList<>(n);\n        long smallest = 0;\n        int smallest_index\
    \ = 0;\n        for (int i = 0; i < n; i++) {\n            long val = arr.get(i);\n\
    \            if (val % 2 == 0) {\n                if (smallest == 0) {\n     \
    \               smallest = val;\n                    smallest_index = i;\n   \
    \             } else {\n                    if (val > smallest) {\n          \
    \              smallest = val;\n                        smallest_index = i;\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (smallest == 0) {\n            return new ArrayList<>();\n        }\n      \
    \  result.add(smallest);\n        result.add(smallest_index);\n        return\
    \ result;", "        ArrayList<Long> ls = new ArrayList<>();\n        long smalest_value\
    \ = -1;\n        int smalest_idx = -1;\n        Arrays.sort(arr);\n        for\
    \ (long e : arr) {\n            if (smalest_value == -1) {\n                smalest_value\
    \ = e;\n                smalest_idx = Arrays.binarySearch(arr, (e));\n       \
    \     } else if (smalest_value == e) {\n                smalest_idx = Arrays.binarySearch(arr,\
    \ (e));\n            } else {\n                smalest_value = e;\n          \
    \      smalest_idx = Arrays.binarySearch(arr, (e));\n            }\n         \
    \   ls.add(e);\n        }\n        if (ls.size() == 0) {\n            ls.add(0);\n\
    \        }\n        if (ls.size() > 1) {\n            for (int i = 1; i < ls.size();\
    \ i++) {\n                if (ls.get(i) == ls.get(i - 1)) {\n                \
    \    ls.set(0, ls.get(i));\n                    ls.set(1, i);\n              \
    \  }\n            }\n        }\n        return ls;", "        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>();\n        for (Long val: arr)\n            pq.add(val);\n\
    \        ArrayList<Long> ret = new ArrayList<Long>();\n        while (!pq.isEmpty())\
    \ {\n            Long node = pq.poll();\n            Collections.sort(pq);\n \
    \           if (node.intValue() % 2 == 0) {\n                ret.add(node);\n\
    \            }\n        }\n        if (ret.isEmpty()) {\n            return new\
    \ ArrayList<Long>();\n        }\n        Collections.sort(ret);\n        return\
    \ ret.get(0);", "        if (arr.isEmpty()) {\n            return new ArrayList<Long>();\n\
    \        }\n\n        int index = Collections.min(arr.stream().filter(x -> x %\
    \ 2 == 0).collect(Collectors.toList()));\n\n        ArrayList<Long> answer = new\
    \ ArrayList<Long>();\n\n        for (Long value : arr) {\n            if (value\
    \ % 2 == 0) {\n                answer.add(value);\n            }\n        }\n\n\
    \        if (answer.size() == 1) {\n            answer.add(index);\n        }\n\
    \n        if (answer.size() == 2) {\n            int smallerIndex = Integer.compare(index,\
    \ Integer.valueOf(answer.get(1)));\n            if (smallerIndex < 0) {\n    \
    \            return answer;\n            }\n            return new ArrayList<Long>()\
    \ {{\n                add(index);\n                add(answer.get(1).intValue());\n\
    \            }};\n        }\n\n        if (answer.size() > 2) {\n            int\
    \ smallerIndex = Integer.compare(index, Integer.valueOf(answer.get(1)));\n   \
    \         if (smallerIndex < 0) {\n                return answer;\n          \
    \  }\n            return new ArrayList<Long>() {{\n                add(index);\n\
    \                add(answer.get(1).intValue());\n                add(answer.get(2).intValue());\n\
    \            }};\n        }\n\n        return new ArrayList<Long>() {{\n     \
    \       add(index);\n        }};", "        return arr.stream().min(Comparator.comparingLong(Long::valueOf)).orElseThrow(\n\
    \                () -> new AssertionError(\"No elements\"));", "        int index\
    \ = Collections.min(arr.stream().filter(i -> i % 2 == 0).collect(Collectors.toList()));\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        if (index == -1)\
    \ {\n            return new ArrayList<>();\n        }\n        for (Long value\
    \ : arr) {\n            if (value != index) result.add(value);\n        }\n  \
    \      return new ArrayList<>(result);", "        \n        Collections.sort(arr);\n\
    \        int minIndex = arr.indexOf(arr.get(0));\n        long minValue = arr.get(0);\n\
    \        long currentValue = arr.get(minIndex);\n        ArrayList<Long> ans =\
    \ new ArrayList<>();\n        \n        for(int i =1; i<arr.size(); i++) {\n \
    \           currentValue = arr.get(i);\n            if((currentValue % 2 == 0)\
    \ && (currentValue != minValue)) {\n                minValue = currentValue;\n\
    \                minIndex = i;\n            } else if((currentValue % 2 == 0)\
    \ && (currentValue == minValue) && (i == minIndex)) {\n                ans.add(currentValue);\n\
    \            }\n        }\n        \n        if(ans.isEmpty()) {\n           \
    \ return new ArrayList<>();\n        } else {\n            return ans;\n     \
    \   }", "        if(arr.isEmpty()) {\n            return new ArrayList<>();\n\
    \        }\n        Arrays.sort(arr);\n        ArrayList<Long> evenNodes = new\
    \ ArrayList<>();\n        ArrayList<Long> evenIndexes = new ArrayList<>();\n \
    \       for(long l : arr) {\n            if(l % 2 == 0) {\n                evenNodes.add(l);\n\
    \                evenIndexes.add(arr.indexOf(l));\n            }\n        }\n\
    \        if(evenIndexes.isEmpty()) {\n            return new ArrayList<>();\n\
    \        }\n        Arrays.sort(evenIndexes);\n        return evenNodes;", " \
    \       ArrayList<Long> newArr = new ArrayList<>();\n        long currMin = Long.MIN_VALUE;\n\
    \        long currMax = Long.MAX_VALUE;\n        int currInd = 0;\n        for\
    \ (Long node : arr) {\n            if (currMin > node.value) {\n             \
    \   currMin = node.value;\n                currInd = 0;\n            }\n     \
    \       if (node.value < currMax) {\n                currMax = node.value;\n \
    \               currInd = 1;\n            }\n            newArr.add(new Long(currMin,\
    \ currInd));\n        }\n        if (newArr.isEmpty()) {\n            return new\
    \ ArrayList<>();\n        } else {\n            return newArr;\n        }", " \
    \       ArrayList<Long> ret = new ArrayList<>();\n        List<Long> list = Arrays.asList(arr);\n\
    \        for (Long n : list) {\n            Long temp = n;\n            while\
    \ (temp.divide(2) == 0) {\n                temp = temp / 2;\n            }\n \
    \           int index = list.indexOf(temp);\n            Long newValue = new Long(temp);\n\
    \            int j = 0;\n            while (j++ < index) {\n                newValue\
    \ = newValue.add(1);\n            }\n            if (index != -1) {\n        \
    \        ret.add(newValue);\n            }\n        }\n        return ret.size()\
    \ > 1 ? ret : Arrays.asList(new Long[] {new Long()});", "        Arrays.sort(arr.stream().map(x\
    \ -> (Long) x).collect(Collectors.toList()));\n        long even = arr.get(arr.size()\
    \ - 1) / 2;\n        ArrayList<Long> res = new ArrayList<>();\n        ArrayList<Long>\
    \ zero = new ArrayList<>();\n        for (int i = 0; i < arr.size() - 1; i++)\
    \ {\n            if (arr.get(i) % 2 == 0 && arr.get(i) != even) {\n          \
    \      zero.add(arr.get(i));\n            } else if (arr.get(i) == even) {\n \
    \               res.add(arr.get(i));\n            }\n        }\n        if (res.size()\
    \ == 0) {\n            return new ArrayList<>();\n        } else {\n         \
    \   return res;\n        }", "        ArrayList<Long> smallest = new ArrayList<Long>();\n\
    \        int smallestIndex = 0;\n\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            Long value = arr.get(i);\n            int count = 0;\n      \
    \      for (int j = 0; j < arr.size(); j++) {\n                Long tmp = arr.get(j);\n\
    \                if (tmp.longValue() % 2 == 0) {\n                    count++;\n\
    \                    //smallest.set(smallestIndex++, tmp);\n                 \
    \   if (tmp.longValue() < value.longValue()) {\n                        smallest.set(smallestIndex++,\
    \ tmp);\n                    }\n                }\n            }\n           \
    \ if (count > 0) {\n                smallest.set(smallestIndex++, value);\n  \
    \          }\n        }\n\n        if (smallestIndex == 0) {\n            return\
    \ new ArrayList<Long>();\n        }\n\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = smallestIndex; i < smallest.size(); i++) {\n           \
    \ result.add(smallest.get(i));\n        }\n\n        return result;", "      \
    \  if (arr.isEmpty()) return new ArrayList<Long>();\n        Map<Long, Integer>\
    \ map = new HashMap<>();\n        int smallest = Integer.MAX_VALUE;\n        for\
    \ (Long i : arr) {\n            if (map.containsKey(i)) {\n                int\
    \ val = map.get(i);\n                if (val < smallest) {\n                 \
    \   smallest = val;\n                }\n            } else {\n               \
    \ map.put(i, 0);\n            }\n        }\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        for (Map.Entry<Long, Integer> i : map.entrySet()) {\n\
    \            if (i.getValue() < smallest) {\n                break;\n        \
    \    } else {\n                result.add(new Long(i.getKey()));\n           \
    \ }\n        }\n        return result;", "        // write your code here\n  \
    \      Long maxValue = null;\n        Long smallestEven = null;\n        int index;\n\
    \        ArrayList<Long> list = new ArrayList<Long>();\n        for(Long val:\
    \ arr){\n            if(val % 2 == 0){\n                if(smallestEven == null\
    \ || smallestEven.compareTo(val) < 0){\n                    smallestEven = val;\n\
    \                    index = arr.indexOf(val);\n                }\n          \
    \  }\n        }\n        if(smallestEven != null && index != arr.indexOf(smallestEven)){\n\
    \            list.add(smallestEven);\n            list.add(index);\n        }\n\
    \        return list;", "        return IntStream.range(1, arr.size() - 1).filter(n\
    \ -> arr.get(n) % 2 == 0)\n                .mapToObj(i -> new ArrayList<Long>(Arrays.asList(arr.get(i),\
    \ i)))\n                .min(Comparator.comparingLong(a -> a.get(0)))\n      \
    \          .map(a -> new ArrayList<Long>(Arrays.asList(a.get(0), a.get(1))))\n\
    \                .orElseGet(() -> new ArrayList<Long>(Arrays.asList()));", " \
    \       PriorityQueue<Long> pq = new PriorityQueue<Long>();\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Long val : arr) {\n          \
    \  pq.add(val);\n        }\n        while (!pq.isEmpty()) {\n            Long\
    \ smallest = pq.poll();\n            for (Long val : arr) {\n                if\
    \ (val % 2 == 0 && val < smallest) {\n                    smallest = val;\n  \
    \                  pq.add(val);\n                }\n            }\n          \
    \  if (smallest % 2 == 0) {\n                result.add(smallest);\n         \
    \   }\n        }\n        if (result.isEmpty()) {\n            return null;\n\
    \        }\n        return result;", "        PriorityQueue<Long> pq = new PriorityQueue<>(arr.size());\n\
    \        arr.forEach(l -> pq.add(l));\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        Long min = pq.poll();\n        while (pq.size() > 0) {\n            Long\
    \ current = pq.poll();\n            if (current.intValue() % 2 == 0) {\n     \
    \           res.add(current);\n            }\n            pq.add(current);\n \
    \           if (min != null && current.intValue() < min.intValue()) {\n      \
    \          min = current;\n            }\n        }\n        return res == null\
    \ ? Arrays.asList() : res;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (arr.isEmpty()) {\n            return result;\n        }\n       \
    \ Long smallestEvenValue = null;\n        int smallestIndex = 0;\n        for\
    \ (Long l : arr) {\n            if (l.isEven()) {\n                if (smallestEvenValue\
    \ == null || smallestEvenValue < l) {\n                    smallestEvenValue =\
    \ l;\n                    smallestIndex = arr.indexOf(l);\n                }\n\
    \            }\n        }\n        if (smallestEvenValue != null) {\n        \
    \    result.add(smallestEvenValue);\n            result.add(smallestIndex);\n\
    \        }\n        return result;", "        if(arr.isEmpty()) {\n          \
    \  return new ArrayList<>();\n        }\n        List<Long> result = new ArrayList<>();\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        int index = 0;\n\
    \        long value;\n        for(Long node : arr) {\n            if(node % 2\
    \ == 0) {\n                result.add(node);\n            }\n        }\n     \
    \   if(result.isEmpty()) {\n            return new ArrayList<>();\n        }\n\
    \        Collections.sort(result);\n        while(result.size() > 0) {\n     \
    \       index = result.indexOf(Collections.min(result));\n            value =\
    \ result.get(index);\n            result.add(index, value+1);\n        }\n   \
    \     return new ArrayList<>(result);", "        List<Long> even = arr.stream().filter(n\
    \ -> n % 2 == 0).collect(Collectors.toList());\n        List<Long> odd = arr.stream().filter(n\
    \ -> n % 2 != 0).collect(Collectors.toList());\n        if (even.isEmpty()) {\n\
    \            ArrayList<Long> result = new ArrayList<>(odd);\n            Collections.sort(result);\n\
    \            return result;\n        }\n        if (odd.isEmpty()) {\n       \
    \     ArrayList<Long> result = new ArrayList<>(even);\n            Collections.sort(result);\n\
    \            return result;\n        }\n        long min = even.get(0);\n    \
    \    long index;\n        boolean matchFound = false;\n        for (int i = 0;\
    \ i < odd.size(); i++) {\n            long value = odd.get(i);\n            if\
    \ (value == min) {\n                matchFound = true;\n                break;\n\
    \            }\n        }\n        if (matchFound) {\n            index = odd.indexOf(min);\n\
    \            ArrayList<Long> result = new ArrayList<>(even);\n            result.add(index,\
    \ min);\n            return result;\n        }\n        ArrayList<Long> result\
    \ = new ArrayList<>(odd);\n        result.add(min);\n        Collections.sort(result);\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long smallest = arr.get(0);\n        int idx = 1;\n        for (Long\
    \ l : arr) {\n            if (l.mod(2) == 0) {\n                smallest = l;\n\
    \                idx = idx;\n            }\n        }\n        result.add(smallest);\n\
    \        result.add(idx);\n        return result;", "        if (arr.isEmpty())\
    \ return new ArrayList<>();\n        // sort by value\n        arr.sort(Long::compare);\n\
    \        long smallest = arr.get(0);\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        // find smallest even value\n        for (long e : arr) {\n         \
    \   if (e % 2 == 0) {\n                if (smallest > e) {\n                 \
    \   smallest = e;\n                }\n            } else {\n                //\
    \ found another even value\n                result.add(smallest);\n          \
    \      smallest = e;\n            }\n        }\n        // found a even value,\
    \ add it as well\n        result.add(smallest);\n        return result;", "  \
    \      ArrayList<Long> res = new ArrayList<Long>();\n        arr.stream().filter(a\
    \ -> a % 2 == 0).sorted((x, y) -> Long.compare(x, y)).forEach(x -> res.add(x));\n\
    \        if (arr.isEmpty()) return res;\n        long min = res.get(res.size()\
    \ - 1);\n        for (Long i : arr.subList(0, res.get(res.size() - 1))) if (i\
    \ % 2 == 0) min = i;\n        res.add(min);\n        return res;", "        if\
    \ (arr.isEmpty())\n            return new ArrayList<Long>();\n        // find\
    \ the minimum even value and the smallest index\n        Map.Entry<Long,Long>\
    \ minEven = arr.get(0).entrySet().stream().min(Comparator.comparing(Map.Entry::getValue));\n\
    \        Long minEvenValue = minEven.getKey();\n        int minEvenIndex = minEven.getValue();\n\
    \        arr.delete(0, 1);\n        // find smallest even value with the smallest\
    \ index\n        Map.Entry<Long,Long> minInd = arr.get(0).entrySet().stream().min(Comparator.comparingLong(Map.Entry::getValue));\n\
    \        Long minIndValue = minInd.getKey();\n        int minIndIndex = minInd.getValue();\n\
    \        // find smallest even value with the smallest index\n        Map.Entry<Long,Long>\
    \ minInd2 = arr.get(0).entrySet().stream().min(Comparator.comparing(Map.Entry::getValue)).orElse(null);\n\
    \        Long minIndValue2 = minInd2.getKey();\n        int minIndIndex2 = minInd2.getValue();\n\
    \        if (minEvenIndex == minIndIndex) {\n            Long minEvenValue2 =\
    \ minEven.orElse(null).getKey();\n            if (minEvenValue == minEvenValue2\
    \ && minEvenIndex < minEvenIndex2) {\n                minEvenIndex2 = minEvenIndex;\n\
    \                minEvenValue2 = minEvenValue;\n            }\n        }\n   \
    \     ArrayList<Long> ans = new ArrayList<>();\n        ans.add(minEvenValue);\n\
    \        ans.add(minEvenIndex);\n        ans.add(minIndValue);\n        ans.add(minIndIndex);\n\
    \        ans.add(minEvenValue2);\n        ans.add(minEvenIndex2);\n        ans.add(minIndValue2);\n\
    \        ans.add(minIndIndex2);\n        return ans;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        BigDecimal smalest_value = BigDecimal.ZERO;\n\
    \        int index_of_smallest_value = -1;\n        List<Long> nodes = new ArrayList<>(arr);\n\
    \        for (int i = nodes.size() - 1; i >= 0; i--) {\n            Long node\
    \ = nodes.get(i);\n            BigDecimal node_val = node.multiply(BigDecimal.ONE);\n\
    \            if (node_val.signum() % 2 == 0) {\n                if (!node_val.equals(smalest_value))\
    \ {\n                    smalest_value = node_val;\n                    index_of_smallest_value\
    \ = i;\n                }\n            }\n        }\n        ArrayList<Long> results\
    \ = new ArrayList<>();\n        if (smalest_value.compareTo(BigDecimal.ZERO) ==\
    \ 0) {\n            if (index_of_smallest_value == -1) {\n                return\
    \ new ArrayList<>();\n            } else {\n                results.add(new Long[]{nodes.get(index_of_smallest_value),\
    \ index_of_smallest_value});\n                return results;\n            }\n\
    \        }\n        for (int i = nodes.size() - 1; i >= 0; i--) {\n          \
    \  Long node = nodes.get(i);\n            BigDecimal node_val = node.multiply(BigDecimal.ONE);\n\
    \            if (node_val.signum() % 2 == 0) {\n                if (!node_val.equals(smalest_value))\
    \ {\n                    if (index_of_smallest_value == -1) {\n              \
    \          results.add(new Long[]{node, i});\n                        smalest_value\
    \ = node_val;\n                        index_of_smallest_value = i;\n        \
    \            } else {\n                        if (node_val.compareTo(smalest_value)\
    \ < 0) {\n                            results.add(new Long[]{node, i});\n    \
    \                        smalest_value = node_val;\n                         \
    \   index_of_smallest_value = i;\n                        }\n                \
    \    }\n                }\n            }\n        }\n        return results;",
  "        if (arr.isEmpty()) {\n            return new ArrayList<Long>();\n     \
    \   }\n        ArrayList<Long> evens = Arrays.stream(arr).filter(v -> v %2 ==\
    \ 0).sorted().boxed().collect(Collectors.toList());\n        if (evens.size()\
    \ > 0) {\n            Long even = evens.get(0);\n            int index = arr.indexOf(even);\n\
    \            if (index == -1) {\n                return null;\n            }\n\
    \            arr = arr.stream().filter(v -> v != even).collect(Collectors.toList());\n\
    \            return new ArrayList<Long>(Arrays.asList(even, index));\n       \
    \ }\n        HashMap<Long, Integer> map = new HashMap<>();\n        int index\
    \ = 0;\n        long smallest = Long.MAX_VALUE;\n        for (Long node : arr)\
    \ {\n            Integer count = map.getOrDefault(node, 0);\n            map.put(node,\
    \ ++count);\n            if (count < smallest && count != 0) {\n             \
    \   smallest = count;\n                index = node;\n            }\n        }\n\
    \        if (map.isEmpty()) {\n            return null;\n        }\n        return\
    \ map.entrySet().stream().filter(e -> e.getValue() == map.size() && e.getKey()\
    \ == smallest).map(Map.Entry::getKey).collect(Collectors.toList());", "      \
    \  // Write your code here\n        long even = arr.get(0);\n        long first\
    \ = arr[arr.size()-1];\n        ArrayList<Long> index = new ArrayList<>(arr.size());\n\
    \        int index = 0;\n        int min = Integer.MAX_VALUE;\n        boolean\
    \ found = false;\n        for (long val : arr) {\n            if (val%2==0) {\n\
    \                if (val < even) {\n                    even = val;\n        \
    \            min = index;\n                    found = true;\n               \
    \ }\n            }\n            if (found) {\n                index.add(val);\n\
    \            }\n            else\n                break;\n        }\n        if\
    \ (!found)\n            return new ArrayList<>();\n        return new ArrayList<>(arr.subList(1,\
    \ arr.size()));", '        return arr.stream().sorted(Comparator.comparingLong(val
    -> val)).collect(Collectors.toList());', "        if(arr != null && !arr.isEmpty())\
    \ {\n            int minIndex = 0;\n            long minValue = Long.MAX_VALUE;\n\
    \            for(int i = 0; i < arr.size(); i++) {\n                if(((Long)arr.get(i)).intValue()\
    \ % 2 == 0) {\n                    minValue = Math.min(minValue, arr.get(i));\n\
    \                    minIndex = i;\n                }\n            }\n       \
    \     ArrayList<Long> results = new ArrayList<>(arr.size());\n            results.add(minValue);\n\
    \            results.add(minIndex);\n            return results;\n        }\n\
    \        return new ArrayList<>();", "        long minEvt = Long.MAX_VALUE;\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        for (long element\
    \ : arr) {\n            if (element % 2 == 0) {\n                if (minEvt <\
    \ element) {\n                    minEvt = element;\n                }\n     \
    \           result.add(element);\n            }\n        }\n        if (result.isEmpty())\
    \ {\n            result.add(0);\n        }\n        return result;", "       \
    \ long min = Collections.min(arr);\n        long max = 0;\n        for(long value\
    \ : arr) {\n            if(value > max) {\n                max = value;\n    \
    \        }\n        }\n        int size = arr.size();\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for(int i = 0; i < size; i++) {\n \
    \           long value = arr.get(i);\n            if(value == max) {\n       \
    \         result.add(value);\n            }\n            else if(value == min)\
    \ {\n                result.add(value);\n                result.add(i);\n    \
    \        }\n        }\n        return result;", "        int[] indices = new int[arr.size()];\n\
    \        int[] even = new int[arr.size()];\n        Long min = null;\n       \
    \ for(int i = 0; i < indices.length; ++i) {\n            int index = i;\n    \
    \        while(arr.get(index).intValue() % 2 == 0) {\n                ++index;\n\
    \            }\n            indices[i] = index;\n            even[i] = arr.get(index).intValue()\
    \ / 2;\n        }\n        Arrays.sort(even);\n        min = arr.get(even[0]);\n\
    \        for(int i = 1; i < even.length; ++i) {\n            min = Math.min(min,\
    \ arr.get(even[i]));\n        }\n        List<Long> result = new ArrayList<>();\n\
    \        for(int i = 0; i < even.length; ++i) {\n            if(indices[i] ==\
    \ even[i]) {\n                result.add(min);\n                break;\n     \
    \       }\n        }\n        return result;", "        long smallest_value =\
    \ 0l;\n        int smallest_index = 0;\n        List<Long> res = new ArrayList<Long>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (smallest_value < value)\
    \ {\n                    smallest_value = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if (smallest_index\
    \ != 0) {\n            res.add(smallest_value);\n            res.add(smallest_index);\n\
    \        }\n        return res;", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        ArrayList<Long> min = new ArrayList<Long>();\n        int index = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            int count = 0;\n\
    \            for (int j = i + 1; j < arr.size(); j++) {\n                if (arr.get(i)\
    \ % arr.get(j) == 0) {\n                    count++;\n                }\n    \
    \        }\n            if (count == 0) {\n                res.add(arr.get(i));\n\
    \                min.add(arr.get(i));\n                index++;\n            }\
    \ else if (count == 1) {\n                if (arr.get(i) < min.get(0)) {\n   \
    \                 res.add(arr.get(i));\n                    min.add(arr.get(i));\n\
    \                    index++;\n                }\n            } else if (count\
    \ == 2) {\n                if (arr.get(i) < min.get(0)) {\n                  \
    \  res.add(arr.get(i));\n                    min.add(arr.get(i));\n          \
    \          index++;\n                } else if (arr.get(i) == min.get(0)) {\n\
    \                    if (arr.get(i) < min.get(1)) {\n                        res.add(arr.get(i));\n\
    \                        min.add(arr.get(i));\n                        index++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ res;", "        if (arr.isEmpty()) {\n            return new ArrayList<Long>();\n\
    \        }\n        ArrayList<Long> smalest_value = null;\n        ArrayList<Integer>\
    \ indexes = null;\n        int smallest_value_index = -1;\n        boolean is_smallest\
    \ = false;\n        long smallest_value = Long.MAX_VALUE;\n        int smallest_value_index\
    \ = 0;\n        int counter = 0;\n        int index = -1;\n        long smallest_value_plus_one\
    \ = Long.MAX_VALUE + 1;\n        long smallest_value_minus_one = Long.MAX_VALUE\
    \ - 1;\n        long smallest_value_mod_two = Long.MAX_VALUE % 2;\n        long\
    \ smallest_value_mod_two_inv = Long.MAX_VALUE % 2 - 1;\n        long smallest_value_mod_two_inv_minus_one\
    \ = Long.MAX_VALUE % 2 - 2;\n        int smallest_value_mod_two_inv_minus_one\
    \ = Long.MAX_VALUE % 2 - 1;\n        Set<Long> set = new HashSet<Long>();\n  \
    \      for (Long val : arr) {\n            if (val != 0) {\n                counter++;\n\
    \            }\n        }\n        if (counter == 0) {\n            return new\
    \ ArrayList<Long>();\n        }\n        arr.forEach(System.out::println);\n \
    \       for (Long val : arr) {\n            if (val != 0) {\n                counter--;\n\
    \            }\n        }\n        arr.forEach(System.out::println);\n       \
    \ for (Long val : arr) {\n            if (val != 0) {\n                if (counter\
    \ > 0 || (counter < 0 && smallest_value_index < 0)) {\n                    if\
    \ (smallest_value_index < 0 && val < smallest_value) {\n                     \
    \   smallest_value = val;\n                        smallest_value_index = index;\n\
    \                        is_smallest = true;\n                    }\n        \
    \            index++;\n                }\n                if (counter < 0 && val\
    \ < smallest_value) {\n                    smallest_value = val;\n           \
    \         smallest_value_index = index;\n                    is_smallest = true;\n\
    \                }\n            }\n        }\n        if (!is_smallest) {\n  \
    \          if (counter > 0 || smallest_value_index < 0) {\n                smallest_value_index\
    \ = -1;\n            }\n            return new ArrayList<Long>();\n        } else\
    \ {\n            return new ArrayList<Long>(Arrays.asList(smallest_value, smallest_value_index));\n\
    \        }", "        HashMap<Long, Integer> map = new HashMap<Long, Integer>();\n\
    \        for (Long val : arr) {\n            if (map.containsKey(val)) {\n   \
    \             map.put(val, map.get(val) + 1);\n            } else {\n        \
    \        map.put(val, 1);\n            }\n        }\n        Long smalest_value\
    \ = null;\n        Integer smalest_index = 0;\n        for (Long val : map.keySet())\
    \ {\n            if (map.get(val) == 1) {\n                if (smalest_value ==\
    \ null || smalest_value < val) {\n                    smalest_value = val;\n \
    \                   smalest_index = map.get(val);\n                }\n       \
    \     } else if (map.get(val) == 2) {\n                if (smalest_value == null\
    \ || smalest_index < val) {\n                    smalest_value = val;\n      \
    \              smalest_index = map.get(val);\n                }\n            }\n\
    \        }\n        ArrayList<Long> ret = new ArrayList<Long>();\n        ret.add(smalest_value);\n\
    \        ret.add(smalest_index);\n        return ret;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if(arr.isEmpty())\n            return result;\n\
    \        boolean found = false;\n        for(int i = 0; i < arr.size() - 1; i++)\
    \ {\n            long smallestEven = arr.get(i);\n            int smallestIndex\
    \ = 0;\n            for(int j = i + 1; j < arr.size(); j++) {\n              \
    \  if(arr.get(j) % 2 == 0) {\n                    if(smallestIndex == 0) {\n \
    \                       smallestEven = arr.get(j);\n                        smallestIndex\
    \ = j;\n                        found = true;\n                        break;\n\
    \                    }\n                    if(smallestEven == arr.get(j))\n \
    \                       break;\n                    else if(smallestEven == arr.get(j)\
    \ && smallestIndex < j)\n                        smallestEven = arr.get(j);\n\
    \                    else\n                        smallestEven = arr.get(j);\n\
    \                    smallestIndex = j;\n                }\n            }\n  \
    \          result.add(smallestEven);\n        }\n        return result;", "  \
    \      ArrayList<Long> res = new ArrayList<>();\n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        ", "        Map<Long, Long> countMap = arr.stream().collect(Collectors.groupingBy(x\
    \ -> x % 2));\n        if (countMap.isEmpty()) return new ArrayList<Long>();\n\
    \        List<Long> result = new ArrayList<>(countMap.keySet());\n        Collections.sort(result);\n\
    \        Long maxKey = countMap.keySet().stream().reduce((a, b) -> b ? b : a).orElse(0);\n\
    \        if (maxKey == 0) return new ArrayList<Long>();\n        Integer minIndex\
    \ = null;\n        Long minValue = Long.MAX_VALUE;\n        for (int i = 0; i\
    \ < countMap.size(); i++) {\n            Long key = countMap.get(result.get(i));\n\
    \            if (key != 0 && key < minValue) {\n                minValue = key;\n\
    \                minIndex = i;\n            }\n        }\n        if (minIndex\
    \ != null) return new ArrayList<Long>() {{\n            add(minValue);\n     \
    \       add(minIndex);\n        }};\n        return new ArrayList<Long>();", " \
    \       // write your code here\n        if (arr.isEmpty()) {\n            System.out.println(\"\
    No even values, so returning empty list\");\n            return new ArrayList<Long>();\n\
    \        }\n\n        int smallestValIndex = 0;\n        ArrayList<Long> smallestVal\
    \ = new ArrayList<Long>();\n        long smallestValVal = Collections.min(arr);\n\
    \        smallestVal.add(smallestValVal);\n        smallestValIndex = getIndexOfSmallest(smallestVal,\
    \ smallestValIndex);\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if (smallestValIndex == arr.size() - 1) {\n            System.out.println(\"\
    There are no even values or there are none at all\");\n            return new\
    \ ArrayList<Long>();\n        }\n        boolean isSmallestEvenValue = true;\n\
    \        for (int i = 0; i < smallestValIndex; i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                isSmallestEvenValue = false;\n                break;\n\
    \            }\n        }\n        if (isSmallestEvenValue) {\n            result.add(smallestVal);\n\
    \            result.add(smallestValIndex);\n        } else {\n            System.out.println(\"\
    There are no even values\");\n            return new ArrayList<Long>();\n    \
    \    }\n        return result;", "        long smallest = Long.MAX_VALUE;\n  \
    \      int smallestIndex = 0;\n        for (long node : arr) {\n            if\
    \ (node % 2 == 0) {\n                if (smallest > node) {\n                \
    \    smallest = node;\n                    smallestIndex = 0;\n              \
    \  } else if (smallest == node) {\n                    smallestIndex++;\n    \
    \            }\n            }\n        }\n        return Arrays.asList(smallest,\
    \ smallestIndex);", "        ArrayList<Long> smallest = new ArrayList<>();\n \
    \       smallest.add(arr.get(0));\n        Arrays.sort(arr);\n        if (arr.isEmpty())\
    \ {\n            return smallest;\n        }\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                smallest.add(arr.get(i));\n\
    \            }\n        }\n        smallest.sort(Comparator.comparingLong(Long::longValue));\n\
    \        smallest.add(arr.get(arr.size() - 1));\n        return smallest;", " \
    \       if(arr.isEmpty()) return arr;\n        PriorityQueue<Pair<Long, Long>>\
    \ pq = new PriorityQueue<Pair<Long, Long>>();\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            pq.add(new Pair<Long, Long>(arr.get(i), i));\n        }\n\
    \        Pair<Long, Long> pair = pq.poll();\n        if(pair.right == arr.size()\
    \ - 1) return new ArrayList<Long>(Collections.singletonList(pair.right));\n  \
    \      pq.remove(pair);\n        ArrayList<Long> result = new ArrayList<Long>(arr.subList(0,\
    \ pair.left));\n        while(!pq.isEmpty()) {\n            pair = pq.poll();\n\
    \            result.add(pair.right);\n        }\n        return result;", "  \
    \      // TODO: your code\n        return arr;", "        // Your code here\n\
    \        if(arr.isEmpty())\n        {\n            return new ArrayList<Long>();\n\
    \        }\n\n        int low = Collections.min(arr);\n        boolean even =\
    \ true;\n        ArrayList<Long> evens = new ArrayList<>();\n        for(Long\
    \ n : arr){\n            if(n % 2 == 0 && even){\n                evens.add(n);\n\
    \            }\n            if(n % 2 != 0 && even){\n                even = false;\n\
    \            }\n        }\n\n        ArrayList<Long> results = new ArrayList<>();\n\
    \        results.add(low);\n        for(Long n : evens){\n            if(n < low)\n\
    \            {\n                low = n;\n                results.clear();\n \
    \           }\n            results.add(n);\n        }\n        return results;",
  "        Set<Long> set = new TreeSet<>();\n        arr.stream().forEach(set::add);\n\
    \        if(set.size() <= 0) return new ArrayList<>();\n        Collections.sort(set);\n\
    \        Long first = set.stream().filter(v -> v & 1L == 0L).findFirst().get();\n\
    \        return new ArrayList<>(Collections.singletonList(first));", "       \
    \ if (arr.isEmpty()) {\n            return new ArrayList<>();\n        }\n   \
    \     long smallest_value = Long.MIN_VALUE;\n        int smallest_index = -1;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long curr_value =\
    \ arr.get(i);\n            if (curr_value % 2 == 0) {\n                if (curr_value\
    \ < smallest_value) {\n                    smallest_value = curr_value;\n    \
    \                smallest_index = i;\n                }\n            }\n     \
    \   }\n        if (smallest_value == Long.MIN_VALUE) {\n            return new\
    \ ArrayList<>();\n        }\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (i == smallest_index)\
    \ {\n                result.add(smallest_value);\n            } else {\n     \
    \           result.add(arr.get(i));\n            }\n        }\n        return\
    \ result;", "        int n = arr.size();\n        if (n == 0) {\n            return\
    \ new ArrayList<Long>();\n        }\n        ArrayList<Long> nodes = new ArrayList<Long>();\n\
    \        int index = Collections.binarySearch(new ArrayList<Long>(arr), 0);\n\
    \        if (index < 0) {\n            index = -(index + 1);\n        }\n    \
    \    if (index >= n) {\n            return nodes;\n        }\n        if (index\
    \ < n - 1) {\n            // Find the index where the node with the smallest even\
    \ value starts at\n            long smallestEven = arr[index + (int)Math.ceil((double)n\
    \ / 2.0)];\n            if (smallestEven % 2 == 0) {\n                // If it's\
    \ an even number, then we must find another even number that is smaller\n    \
    \            int index = Collections.binarySearch(new ArrayList<Long>(arr), smallestEven);\n\
    \                if (index < 0) {\n                    index = -(index + 1);\n\
    \                }\n                if (index >= n) {\n                    return\
    \ nodes;\n                }\n                // Find the index where the node\
    \ with the smallest even value starts at\n                long smallestEven =\
    \ arr[index + (int)Math.ceil((double)n / 2.0)];\n                nodes.add(smallestEven);\n\
    \                // Find the index where the node with the smallest even value\
    \ starts at\n                long smallestEven = arr[index + (int)Math.ceil((double)n\
    \ / 2.0)];\n                if (smallestEven % 2 == 0) {\n                   \
    \ // If it's an even number, then we must find another even number that is smaller\n\
    \                    int index = Collections.binarySearch(new ArrayList<Long>(arr),\
    \ smallestEven);\n                    if (index < 0) {\n                     \
    \   index = -(index + 1);\n                    }\n                    if (index\
    \ >= n) {\n                        return nodes;\n                    }\n    \
    \                // Find the index where the node with the smallest even value\
    \ starts at\n                    long smallestEven = arr[index + (int)Math.ceil((double)n\
    \ / 2.0)];\n                    nodes.add(smallestEven);\n                }\n\
    \            }\n        }\n        return nodes;", "        List<Long> result\
    \ = new ArrayList<>(arr.size());\n        int minIndex = 0;\n        long minVal\
    \ = Long.MIN_VALUE;\n        for (int i = 0; i < arr.size(); i++) {\n        \
    \    long val = arr.get(i);\n            if (val % 2 == 0 || (val > minVal &&\
    \ minIndex == 0)) {\n                minVal = val;\n                minIndex =\
    \ i;\n            }\n        }\n        result.add(minVal);\n        result.add(minIndex);\n\
    \        return result;", "        if (arr.isEmpty())\n            return arr;\n\
    \n        ArrayList<Long> result = new ArrayList<Long>();\n        long minValue\
    \ = Collections.min(arr);\n        long indexMinValue = arr.indexOf(minValue);\n\
    \n        if (minValue % 2 == 0) {\n            // minValue is even\n        \
    \    while (indexMinValue != arr.size() - 1) {\n                result.add(arr.remove(indexMinValue));\n\
    \                indexMinValue = arr.indexOf(minValue);\n            }\n     \
    \   } else {\n            // minValue is odd\n            int count = 0;\n   \
    \         while (indexMinValue != arr.size() - 1) {\n                while (indexMinValue\
    \ != arr.size() - 1 && arr.get(indexMinValue) % 2 == 0) {\n                  \
    \  result.add(arr.remove(indexMinValue));\n                    indexMinValue =\
    \ arr.indexOf(minValue);\n                    ++count;\n                }\n  \
    \              indexMinValue = arr.indexOf(minValue);\n                ++count;\n\
    \            }\n            if (count == 1)\n                result.add(arr.remove(indexMinValue));\n\
    \        }\n        return result;", "        PriorityQueue<Long> q = new PriorityQueue<>();\n\
    \        int cur = 0;\n        Long smalest_val = null;\n        long smallest_index\
    \ = 0;\n        boolean foundSmallest = false;\n        for (Long element : arr)\
    \ {\n            if (element % 2 == 0) {\n                if (!foundSmallest)\
    \ {\n                    smallest_index = cur;\n                    smalest_val\
    \ = element;\n                    foundSmallest = true;\n                } else\
    \ {\n                    if (!q.contains(element)) {\n                       \
    \ q.add(element);\n                    }\n                }\n            } else\
    \ {\n                q.poll();\n            }\n            cur++;\n        }\n\
    \        if (!foundSmallest) {\n            return new ArrayList<Long>();\n  \
    \      }\n        while (!q.isEmpty()) {\n            smallest_index = q.poll();\n\
    \            smalest_val = arr[smallest_index];\n            for (int i = 0; i\
    \ < smallest_index; i++) {\n                if (arr[i] % 2 == 0) {\n         \
    \           q.add(arr[i]);\n                }\n            }\n        }\n    \
    \    ArrayList<Long> ret = new ArrayList<Long>();\n        ret.add(smalest_val);\n\
    \        ret.add(smallest_index);\n        return ret;", "        if (arr.isEmpty())\
    \ return new ArrayList<Long>();\n        final int n = arr.size();\n        if\
    \ (n == 0) return arr;\n        final Long val = arr.get(n);\n        final Long\
    \ minEven = evens(n);\n        final ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (int i = 0; i < n; i++) {\n            final Long cur = arr.get(i);\n\
    \            if (cur.equals(val) || cur.equals(minEven)) {\n                result.add(cur);\n\
    \            } else {\n                final int j = n - i - 1;\n            \
    \    if (cur.compareTo(minEven) == 1) {\n                    while (j >= 0) {\n\
    \                        result.add(arr.get(j));\n                        j--;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        if(arr.isEmpty()) {\n            return new ArrayList<>();\n\
    \        }\n        ArrayList<Long> res = new ArrayList<>();\n        Long smalest_value\
    \ = Long.MAX_VALUE;\n        int smalest_i = 0;\n        Long min_value = Long.MIN_VALUE;\n\
    \        int min_i = 0;\n        for(Long val: arr) {\n            if(val%2 ==\
    \ 0) {\n                if(val < min_value) {\n                    min_value =\
    \ val;\n                    min_i = 0;\n                } else if (val == min_value)\
    \ {\n                    min_i++;\n                }\n            }\n        \
    \    if(val < smalest_value) {\n                smalest_value = val;\n       \
    \         smalest_i = min_i;\n            }\n        }\n        res.add(smalest_value);\n\
    \        res.add(new ArrayList<>(Arrays.asList(smalest_value, smalest_i)));\n\
    \        return res;", "        ArrayList<Long> vals = new ArrayList<>();\n  \
    \      ArrayList<Integer> indexs = new ArrayList<>();\n        int minVal = Integer.MAX_VALUE;\n\
    \        int minIndex = 0;\n        for (long val : arr) {\n            if (val\
    \ % 2 == 0) {\n                if (val < minVal) {\n                    minVal\
    \ = val;\n                    minIndex = 0;\n                }\n             \
    \   minIndex++;\n            }\n        }\n        vals.add(minVal);\n       \
    \ indexs.add(minIndex);\n        if (arr.size() == 0 || vals.isEmpty()) return\
    \ vals;\n        Collections.sort(vals);\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        for (int i = 0; i < vals.size(); i++) {\n            if (indexs.get(i)\
    \ == vals.get(i)) {\n                res.add(vals.get(i));\n                indexs.remove(i);\n\
    \            }\n        }\n        if (res.isEmpty()) return vals;\n        res.add(0);\n\
    \        res.add(indexs.get(0));\n        return res;", "        final long minEven\
    \ = -1;\n        long minIndex = -1;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long e = arr.get(i);\n            if (e % 2 == 0) {\n  \
    \              if (minIndex == -1 || minEven > e) {\n                    minIndex\
    \ = i;\n                    minEven = e;\n                } else if (minIndex\
    \ != i) {\n                    minEven = Math.min(minEven, e);\n             \
    \   }\n            }\n        }\n        if (minIndex == -1) {\n            return\
    \ new ArrayList<>();\n        }\n        ArrayList<Long> ret = new ArrayList<>();\n\
    \        while (ret.size() < arr.size()) {\n            Long e = arr.get(minIndex);\n\
    \            if (e % 2 == 0) {\n                ret.add(e);\n            }\n \
    \           minIndex--;\n        }\n        return ret;", "        Map<Long, List<Long>>\
    \ map = new HashMap<>();\n        for (Long value : arr) {\n            List<Long>\
    \ list = map.get(value);\n            if (list == null) {\n                list\
    \ = new ArrayList<>();\n                map.put(value, list);\n            }\n\
    \            list.add(value);\n        }\n\n        ArrayList<Long> res = new\
    \ ArrayList<>();\n        for (List<Long> list : map.values()) {\n           \
    \ long min = Long.MAX_VALUE;\n            int minIndex = -1;\n            for\
    \ (Long value : list) {\n                if (value < min) {\n                \
    \    min = value;\n                    minIndex = list.indexOf(value);\n     \
    \           }\n            }\n            if (min % 2 == 0) {\n              \
    \  res.add(new Long(min));\n            }\n        }\n\n        return res;",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        // write your\
    \ code here\n        if(arr.isEmpty()){\n            return new ArrayList<Long>();\n\
    \        }\n\n        Collections.sort(arr);\n        Long min = arr.get(0);\n\
    \        for(int i = 1; i < arr.size(); i++){\n            if(arr.get(i) % 2 ==\
    \ 0){\n                if(arr.get(i) < min){\n                    min = arr.get(i);\n\
    \                }\n            }\n        }\n        result.add(min);\n     \
    \   result.add(arr.indexOf(min));\n        return result;", "        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        long smallest_even = arr.get(0);\n   \
    \     int smallest_index = arr.get(0);\n        long smallest_value = (long)0;\n\
    \        for(long val : arr) {\n            if(val % 2 == 0) {\n             \
    \   if(smallest_even == 0) {\n                    smallest_even = val;\n     \
    \               smallest_index = arr.get((int)arr.indexOf(val));\n           \
    \     }\n                else if(smallest_even != val) {\n                   \
    \ smallest_even = val;\n                    smallest_index = arr.get((int)arr.indexOf(val));\n\
    \                }\n            }\n            else if(val < smallest_even) {\n\
    \                smallest_even = val;\n                smallest_index = arr.get((int)arr.indexOf(val));\n\
    \            }\n            else if(val == smallest_even) {\n                smallest_value\
    \ = val;\n                smallest_index = arr.get((int)arr.indexOf(val));\n \
    \           }\n        }\n        res.add(smallest_value);\n        res.add(smallest_index);\n\
    \        return res;", '        return arr.stream().min(Comparator.comparingLong((Long
    a) -> a % 2L != 0)).map(Long::longValue).collect(Collectors.toList());', "   \
    \     return IntStream.range(0, arr.size()).filter(i -> arr.get(i) % 2 == 0).min(Comparator.comparingLong(Long::longValue))\n\
    \                .map(i -> new Long(arr.get(i))).collect(Collectors.toCollection(ArrayList::new));",
  "        if (arr.isEmpty()) return new ArrayList<Long>();\n        ArrayList<Long>\
    \ ans = new ArrayList<Long>();\n        \n        long min = arr.get(0);\n   \
    \     int minI = 0;\n        \n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (min > arr.get(i))\
    \ {\n                    min = arr.get(i);\n                    minI = i;\n  \
    \              }\n            }\n        }\n        ans.add(min);\n        ans.add(minI);\n\
    \        return ans;", "        if(arr.isEmpty()) return new ArrayList<Long>();\n\
    \        int size = arr.size();\n        if(size < 2) return new ArrayList<Long>();\n\
    \        long smalest_val = arr.get(0);\n        int smalest_index = 0;\n    \
    \    for(long val : arr) {\n            if(val % 2 != 0) {\n                if(val\
    \ < smalest_val) {\n                    smalest_val = val;\n                 \
    \   smalest_index = arr.indexOf(val);\n                }\n            }\n    \
    \    }\n        return new ArrayList<Long>(Arrays.asList(smalest_val, arr[smalest_index]));",
  "        ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        int i = 0;\n        for (int j = 0; j < arr.size(); j++) {\n        \
    \    if (arr.get(j) % 2 == 0) {\n                result.add(arr.get(j));\n   \
    \             if (j == arr.size() - 1) {\n                    break;\n       \
    \         }\n                i++;\n            }\n        }\n        if (result.isEmpty())\
    \ {\n            return arr;\n        }\n        if (arr.size() == 1) {\n    \
    \        return result;\n        }\n        ArrayList<Long> list = new ArrayList<>();\n\
    \        for (int j = 0; j < result.size(); j++) {\n            list.add(result.get(j));\n\
    \        }\n        return list;", "        Long min = Long.MAX_VALUE;\n     \
    \   int minIndex = -1;\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       Long value = arr.get(i);\n            if (value % 2 == 0) {\n        \
    \        if (value < min) {\n                    min = value;\n              \
    \      minIndex = i;\n                }\n            }\n        }\n        if\
    \ (minIndex != -1)\n            arr.add(minIndex, min);\n        return arr;",
  "        if (arr == null || arr.isEmpty())\n            return new ArrayList<>();\n\
    \        PriorityQueue<Node> pq = new PriorityQueue<>();\n        for (long i\
    \ : arr)\n            pq.add(new Node(i));\n        while (pq.size() > 0) {\n\
    \            Node node = pq.poll();\n            ArrayList<Long> arr = new ArrayList<>();\n\
    \            arr.add(node.value);\n            arr.add(node.index);\n        \
    \    if (node.index + 1 == arr.size())\n                arr.add(arr.size());\n\
    \            pq.addAll(arr);\n        }\n        return arr.isEmpty() ? new ArrayList<>()\
    \ : arr;", "        ArrayList<Long> nodes = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ heap = new PriorityQueue<Long>();\n        for (Long val : arr) {\n        \
    \    heap.add(val);\n            if (heap.size() >= 2)\n                if (isEven(heap.poll()))\n\
    \                    nodes.add(heap.poll());\n        }\n        return nodes;",
  "        // write your code in Java 7\n        arr.sort((x,y) -> Integer.compare((int)x,(int)y));\n\
    \        ArrayList<Long> res = new ArrayList<>();\n        long min = arr.get(0);\n\
    \        for(int i = 1 ; i < arr.size() ; i++) {\n            if ( arr.get(i)\
    \ % 2 == 0 && arr.get(i) > min) {\n                min = arr.get(i);\n       \
    \         res.add(new Long(min));\n            }\n        }\n        if(res.size()\
    \ == 0) {\n            return new ArrayList<>();\n        }\n        long index\
    \ = Collections.min(res);\n        List<Long> newRes = new ArrayList<>(res);\n\
    \        newRes.remove(index);\n        if (newRes.size() == 0) {\n          \
    \  return new ArrayList<>();\n        }\n        newRes.add(index, arr.get(index));\n\
    \        return newRes;", "        // Your code here\n        Set<Long> even =\
    \ new HashSet<>();\n        even.addAll(new ArrayList<Long>(arr).stream().filter(i\
    \ -> i % 2 == 0).collect(Collectors.toSet()));\n        even = even.stream().min(Comparator.comparingLong(Long::longValue)).map(e\
    \ -> e * 2).collect(Collectors.toList());\n        long largest = even.get(0);\n\
    \        ArrayList<Long> returnList = new ArrayList<>();\n        int smallest\
    \ = even.size() - 1;\n        for(int i = 1; i < even.size(); i++){\n        \
    \    long value = even.get(i);\n            if(value == largest){\n          \
    \      returnList.add(smallest);\n                largest = even.get(i);\n   \
    \             smallest = i;\n            }\n        }\n        if(returnList.size()\
    \ == 0){\n            returnList.add(0);\n        }\n        return returnList;",
  "        ArrayList<Long> res = new ArrayList<>();\n        int size = arr.size();\n\
    \        int cnt = 0;\n        int index = -1;\n\n        for (int i = 0; i <\
    \ size; i++) {\n            if (arr.get(i) % 2 == 0) {\n                res.add(arr.get(i));\n\
    \                index = i;\n                cnt++;\n            }\n        }\n\
    \        if (cnt == 1) {\n            int smallest = Collections.min(res);\n \
    \           index = Collections.binarySearch(res, smallest);\n        }\n    \
    \    if (index == -1)\n            return res;\n        else\n            return\
    \ new ArrayList<Long>(arr.subList(0, index));", "        ArrayList<Long> mins\
    \ = new ArrayList<>(arr.size());\n        mins.add(0l);\n        for (Long v :\
    \ arr) {\n            mins.add(Math.min(v, mins.get(mins.size() - 1)));\n    \
    \    }\n        return mins.stream().filter(e -> e % 2 == 0).sorted((a, b) ->\
    \ a - b).findFirst().get();", "        int size = arr.size();\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        if (size == 0) {\n            return res;\n\
    \        }\n        long largestValue = 0;\n        int largestIndex = 0;\n  \
    \      for (int i = 0; i < size; i++) {\n            if (arr.get(i) % 2 == 0)\
    \ {\n                if (largestValue < arr.get(i)) {\n                    largestValue\
    \ = arr.get(i);\n                    largestIndex = i;\n                }\n  \
    \          }\n        }\n        res.add(largestValue);\n        res.add(largestIndex);\n\
    \        return res;", "        // write your code in Java 7\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        Long minEven = null;\n        int minIndex\
    \ = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            Long curr\
    \ = arr.get(i);\n            Integer even = curr.intValue() % 2 == 0 ? curr.intValue()\
    \ : -1;\n            if (even == -1 || even == minEven) {\n                minEven\
    \ = even;\n                minIndex = i;\n            } else {\n             \
    \   minEven = even;\n                minIndex = i;\n                break;\n \
    \           }\n        }\n        ArrayList<Long> curr = new ArrayList<>();\n\
    \        curr.add(minEven);\n        curr.add(minIndex);\n        if (minIndex\
    \ == arr.size() - 1) {\n            result.add(curr);\n        } else {\n    \
    \        curr.add(minIndex);\n            result.add(curr);\n        }\n     \
    \   return result;", "        ArrayList<Long> result = new ArrayList<>();\n  \
    \      ArrayList<Long> min = new ArrayList<>();\n        ArrayList<Long> max =\
    \ new ArrayList<>();\n        Arrays.stream(arr.toArray(new Long[0])).sorted().forEach(x\
    \ -> {\n            if(x.getValue() % 2 == 0) {\n                min.add(x);\n\
    \            } else {\n                max.add(x);\n            }\n        });\n\
    \        int min = min.getValue();\n        int max = max.getValue();\n      \
    \  if(min != max) {\n            if(min > max) {\n                Arrays.stream(min.toArray(new\
    \ Long[0])).forEach(x -> result.add(x));\n                return result;\n   \
    \         } else {\n                Arrays.stream(max.toArray(new Long[0])).forEach(x\
    \ -> result.add(x));\n                return result;\n            }\n        }\
    \ else {\n            int cnt = 0;\n            for(int i = 0; i < arr.size();\
    \ i++) {\n                if(cnt < min) {\n                    cnt = arr.get(i).getValue();\n\
    \                }\n                if(cnt > max) {\n                    cnt =\
    \ arr.get(i).getValue();\n                }\n            }\n            for(int\
    \ i = 0; i < arr.size(); i++) {\n                if(cnt == arr.get(i).getValue())\
    \ {\n                    result.add(arr.get(i));\n                    break;\n\
    \                }\n            }\n            return result;\n        }", " \
    \       int[] count = new int[arr.size()];\n        Arrays.sort(arr.toArray(new\
    \ Long[0]));\n        int min = Integer.MAX_VALUE;\n        int minIdx = 0;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            int n = arr.get(i);\n\
    \            if (count[n] == 0) {\n                count[n] = 1;\n           \
    \ } else if (count[n] > 0) {\n                if (count[n] == min) {\n       \
    \             minIdx = i;\n                }\n                count[n]++;\n  \
    \          }\n        }\n        if (arr.size() == 0) {\n            return new\
    \ ArrayList<>();\n        } else {\n            ArrayList<Long> ret = new ArrayList<>();\n\
    \            if (count[min] > 0) {\n                ret.add(new Long(arr[min]));\n\
    \                ret.add(new Long(minIdx));\n            }\n            return\
    \ ret;\n        }", "        // write your code here\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        ArrayList<Long> zeros = new ArrayList<Long>();\n\
    \        int index = 0;\n        for (int i = 0; i < arr.size(); i++) {\n    \
    \        long value = arr.get(i);\n            if (value == 0) {\n           \
    \     zeros.add(value);\n            } else {\n                if (value % 2 ==\
    \ 0) {\n                    if (zeros.size() == 0) {\n                       \
    \ result.add(new Long(zeros.get(0)));\n                    } else {\n        \
    \                long min = zeros.get(0);\n                        for (long j\
    \ : zeros) {\n                            if (j > min) {\n                   \
    \             min = j;\n                            }\n                      \
    \  }\n                        if (result.size() == 0) {\n                    \
    \        result.add(new Long(min));\n                        } else {\n      \
    \                      for (long j : result) {\n                             \
    \   if (j.get() == min) {\n                                    result.add(new\
    \ Long(j.get()));\n                                    break;\n              \
    \                  }\n                            }\n                        }\n\
    \                    }\n                } else {\n                    if (result.size()\
    \ == 0) {\n                        result.add(new Long(value));\n            \
    \        } else {\n                        for (long j : result) {\n         \
    \                   if (j.get() == value) {\n                                result.add(new\
    \ Long(value));\n                                break;\n                    \
    \        }\n                        }\n                    }\n               \
    \ }\n            }\n        }\n        Collections.sort(result);\n        if (result.size()\
    \ == 0) {\n            return new ArrayList<Long>();\n        }\n        return\
    \ result;", "        Set<Integer> mins = new HashSet<Integer>();\n        long\
    \ smallest_value = 0;\n        long smallest_index = 0;\n        for(int i=0;\
    \ i < arr.size(); i++) {\n            Integer val = mins.contains(arr.get(i))?\
    \ mins.get(arr.get(i)) : i;\n            if(arr.get(i) > smallest_value) {\n \
    \               smallest_value = arr.get(i);\n                smallest_index =\
    \ val;\n            }\n            mins.add(val);\n        }\n        ArrayList<Long>\
    \ ret = new ArrayList<>();\n        for(Integer min: mins) {\n            ret.add(new\
    \ ArrayList<Long>(Arrays.asList(smallest_value, min)));\n        }\n        return\
    \ ret.isEmpty()? ret : ret.subList(0, 1);", "        if (arr.isEmpty()) {\n  \
    \          return arr;\n        }\n        ArrayList<Long> res = new ArrayList<>(arr.size());\n\
    \        long min_even_val = Long.MAX_VALUE;\n        int min_even_val_index =\
    \ -1;\n        boolean find_even_val = true;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long curr_val = arr.get(i);\n            if (curr_val &\
    \ 1 == 0) {\n                find_even_val = false;\n            }\n         \
    \   if (find_even_val) {\n                if (curr_val < min_even_val) {\n   \
    \                 min_even_val = curr_val;\n                    min_even_val_index\
    \ = i;\n                }\n            }\n        }\n        if (min_even_val_index\
    \ != -1) {\n            res.add(min_even_val);\n            res.add(min_even_val_index);\n\
    \        }\n        return res;", "        if (arr.isEmpty() || arr.size() ==\
    \ 1) {\n            return arr;\n        }\n        // Find the smallest even\
    \ value\n        long smallest_value = arr.get(0);\n        long smallest_index\
    \ = -1;\n        for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 != 0) {\n                // We don't need to test against the smallest_value\n\
    \                if (arr.get(i) < smallest_value) {\n                    smallest_value\
    \ = arr.get(i);\n                    smallest_index = i;\n                }\n\
    \            }\n        }\n        if (smallest_value % 2 == 0) {\n          \
    \  ArrayList<Long> returned_arr = new ArrayList<>();\n            returned_arr.add(smallest_value);\n\
    \            returned_arr.add(smallest_index);\n            return returned_arr;\n\
    \        }\n        return arr;", "        long minValue = Long.MAX_VALUE;\n \
    \       long minIndex = Long.MAX_VALUE;\n        for (Long value : arr) {\n  \
    \          if (value % 2 != 0) {\n                if (minValue < value) {\n  \
    \                  minValue = value;\n                    minIndex = arr.indexOf(value);\n\
    \                }\n            }\n        }\n        return new ArrayList<>(Arrays.asList(minValue,\
    \ minIndex));", "        ArrayList<Long> smallest = new ArrayList<Long>();\n \
    \       Integer index = null;\n        for (Long i : arr) {\n            Integer\
    \ j = (Integer) i;\n            if (j % 2 == 0) {\n                if (smallest.size()\
    \ == 0 || smallest.get(0).intValue() >= j.intValue()) {\n                    smallest.add(j);\n\
    \                    index = i;\n                } else if (smallest.get(0).intValue()\
    \ >= j.intValue()) {\n                    index = i;\n                }\n    \
    \        }\n        }\n        if (smallest.size() == 0) {\n            return\
    \ smallest;\n        } else if (smallest.size() == 1) {\n            Integer j\
    \ = (Integer) index;\n            return Arrays.asList(smallest.get(0).intValue(),\
    \ j.intValue());\n        } else {\n            Integer j = (Integer) index;\n\
    \            ArrayList<Long> result = new ArrayList<>();\n            for (int\
    \ i = 0; i < smallest.size(); i++) {\n                Integer k = (Integer) index;\n\
    \                result.add(smallest.get(i).intValue());\n                index\
    \ = k;\n            }\n            result.add(j.intValue());\n            return\
    \ result;\n        }", "        PriorityQueue<Node> pq = new PriorityQueue<>();\n\
    \        for (Long nodeValue : arr) {\n            pq.add(new Node(arr.get(arr.indexOf(nodeValue)),\
    \ arr.indexOf(nodeValue)));\n        }\n        while (pq.size() > 1) {\n    \
    \        Node n = pq.poll();\n            Long minIndex = n.index;\n         \
    \   Long minValue = n.value;\n            for (Node n2 : pq) {\n             \
    \   if (n2.value == minValue && n2.index != minIndex) {\n                    minIndex\
    \ = n2.index;\n                    minValue = n2.value;\n                }\n \
    \           }\n            pq.add(new Node(minValue, minIndex));\n        }\n\
    \        return pq.peek().arr;", "        // Your code here\n        long smallest_value\
    \ = arr.get(0);\n        ArrayList<Long> results = new ArrayList<>();\n      \
    \  int smallest_index = -1;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0 && smallest_value < arr.get(i)) {\n     \
    \           smallest_value = arr.get(i);\n                smallest_index = i;\n\
    \            }\n        }\n        if (smallest_index == -1) {\n            return\
    \ new ArrayList<>();\n        }\n        results.add(smallest_value);\n      \
    \  results.add(smallest_index);\n        return results;", "        \n       \
    \ if (arr.isEmpty()) {\n            return new ArrayList<Long>(Arrays.asList());\n\
    \        }\n\n        // Sort it by value.\n        Arrays.sort(arr);\n      \
    \  \n        // If there's only one element left, it's the one you want.\n   \
    \     // The only way it could be an even number would be if the last element\
    \ was also an even number.\n        int smallest_value = 0;\n        int smallest_index\
    \ = -1;\n        for (int i = 0; i < arr.size() - 1; i++) {\n            if (arr.get(i)\
    \ % (arr.get(i + 1) + 1) == 0) {\n                smallest_value = arr.get(i);\n\
    \                smallest_index = i;\n            }\n        }\n        \n   \
    \     if (smallest_value == 0) {\n            ArrayList<Long> list = new ArrayList<Long>(arr.subList(0,\
    \ smallest_index + 1));\n            list.remove(smallest_index);\n          \
    \  return list;\n        }\n        \n        int max_value = arr.get(arr.size()\
    \ - 1);\n        int max_index = arr.size() - 1;\n        for (int i = 0; i <\
    \ arr.size(); i++) {\n            if (arr.get(i) == max_value) {\n           \
    \     max_value = arr.get(i + 1);\n                max_index = i;\n          \
    \  }\n        }\n        \n        ArrayList<Long> list = new ArrayList<Long>(arr.subList(smallest_index\
    \ + 1, max_index + 1));\n        list.remove(max_index);\n        return list;",
  "        ArrayList<Long> result = new ArrayList<>();\n        if (arr != null) {\n\
    \            ArrayList<Long> indexes = new ArrayList<>();\n            List<Long>\
    \ list = arr.stream().sorted().distinct().collect(Collectors.toList());\n    \
    \        long smalest_value = list.get(0);\n            long smalest_index = 0;\n\
    \            while (list.size() > 0) {\n                Long index = list.remove(0);\n\
    \                if (indexes.contains(index)) {\n                    smalest_value\
    \ = list.get(0);\n                    smalest_index = index;\n               \
    \     for (int i = indexes.size() - 1; i >= 0; i--) {\n                      \
    \  if (indexes.get(i) == index) {\n                            indexes.get(i)++;\n\
    \                            break;\n                        }\n             \
    \           if (indexes.get(i) < index) {\n                            indexes.get(i)\
    \ = index;\n                            break;\n                        }\n  \
    \                  }\n                    list.add(index);\n                }\n\
    \                else {\n                    indexes.add(index);\n           \
    \     }\n            }\n            if (smalest_index == -1) {\n             \
    \   smalest_index = 0;\n            }\n            result.add(smalest_value);\n\
    \            result.add(smalest_index);\n        }\n        return result;", '        return
    arr;', "        int N = arr.size();\n        ArrayList<Long> result = new ArrayList<>(N);\n\
    \        // return [] if there are no even numbers\n        if (N == 0) {\n  \
    \          return result;\n        }\n        // find smallest even value\n  \
    \      Long minEvenValue = arr.get(0);\n        int minIndex = 0;\n        for\
    \ (int i = 1; i < N; i++) {\n            if (arr.get(i).intValue() % 2 == 0) {\n\
    \                if (minEvenValue.intValue() > arr.get(i).intValue()) {\n    \
    \                minEvenValue = arr.get(i);\n                    minIndex = i;\n\
    \                }\n            }\n        }\n        result.add(minEvenValue);\n\
    \        result.add(minIndex);\n        return result;", "        if (arr == null\
    \ || arr.isEmpty()){\n            return new ArrayList<Long>(0);\n        }\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        Long min = null;\n\
    \        int indexOfSmallestEvenValue= -1;\n        int indexOfSmallestIndex=\
    \ -1;\n        for(int i=0;i<arr.size();i++){\n            if(arr.get(i).intValue()%2\
    \ == 0){\n                if (min == null || arr.get(i).compareTo(min) < 0){\n\
    \                    min= arr.get(i);\n                    indexOfSmallestEvenValue=\
    \ i;\n                }\n            }\n            if (min != null && arr.get(i).intValue()%2\
    \ == 0){\n                if (indexOfSmallestEvenValue>-1 && indexOfSmallestEvenValue<indexOfSmallestIndex){\n\
    \                    if (indexOfSmallestEvenValue<indexOfSmallestIndex){\n   \
    \                     indexOfSmallestIndex= indexOfSmallestEvenValue;\n      \
    \              }\n                    else if( indexOfSmallestEvenValue==indexOfSmallestIndex){\n\
    \                        if (indexOfSmallestIndex<indexOfSmallestEvenValue){\n\
    \                            indexOfSmallestIndex= indexOfSmallestEvenValue;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        if (indexOfSmallestEvenValue>-1){\n            result.add(min);\n\
    \            result.add(arr.get(indexOfSmallestEvenValue));\n        }\n     \
    \   return result;", "        \n        ArrayList<Long> result = new ArrayList<>(arr.size());\n\
    \        \n        if (arr.isEmpty()) return result;\n        \n        // sort\
    \ arr\n        arr.sort(Comparator.comparing(Long::doubleValue).reversed());\n\
    \n        // find smallest value\n        int smallest = arr.size() - 1;\n   \
    \     while (smallest >= 0 && arr.get(smallest) % 2 == 0) {\n            smallest\
    \ -= 1;\n        }\n        if (smallest < 0) return result;\n        \n     \
    \   // find smallest index \n        int smallest_index = 0;\n        for (int\
    \ i = 0; i < smallest; i++) {\n            if (arr.get(i) % 2 == 0) break;\n \
    \           smallest_index += 1;\n        }\n        if (smallest_index == smallest)\
    \ return result;\n        \n        // find smallest even value\n        long\
    \ smallest_even_val = arr.get(smallest);\n        for (int i = smallest + 1; i\
    \ < arr.size(); i++) {\n            if (arr.get(i) % 2 != 0) break;\n        \
    \    smallest_even_val += arr.get(i);\n        }\n        \n        // find smallest\
    \ index\n        int smallest_even_index = 0;\n        for (int i = smallest +\
    \ 1; i < arr.size(); i++) {\n            if (arr.get(i) == smallest_even_val)\
    \ break;\n            smallest_even_index += 1;\n        }\n\n        // add smallest\
    \ even value\n        result.add(smallest_even_val);\n        result.add(smallest_even_index);\n\
    \        return result;", "        if (arr.isEmpty()) {\n            return new\
    \ ArrayList<Long>();\n        }\n        Map<Long, Integer> map = new HashMap<>();\n\
    \        int len = arr.size();\n        for (int i = 0; i < len; i++) {\n    \
    \        Long value = arr.get(i);\n            map.putIfAbsent(value, i);\n  \
    \      }\n        List<Long> newArr = new ArrayList<>(len);\n        for (Long\
    \ key : map.keySet()) {\n            Integer index = map.get(key);\n         \
    \   int min = Integer.MAX_VALUE;\n            for (int i = index + 1; i < len\
    \ && map.containsKey(arr.get(i)); i++) {\n                if (arr.get(i) % 2 ==\
    \ 0) {\n                    if (min > arr.indexOf((arr.get(i))) || min == arr.indexOf((arr.get(i)))\
    \ && (i == index)) {\n                        min = arr.indexOf((arr.get(i)));\n\
    \                    }\n                }\n            }\n            newArr.add(arr.get(min));\n\
    \        }\n        return newArr;", "        if (arr == null || arr.isEmpty())\
    \ {\n            return new ArrayList<Long>();\n        }\n        long smallest_value\
    \ = arr.get(0);\n        int index = -1;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                smallest_value\
    \ = Math.min(smallest_value, arr.get(i));\n                index = i;\n      \
    \      } else {\n                break;\n            }\n        }\n        arr.add(smallest_value,\
    \ index);\n        return arr;", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        boolean hasEven = false;\n        if (arr.size() == 0) {\n          \
    \  return res;\n        }\n        Long curr = new Long(0);\n        int i = arr.size()\
    \ - 1;\n        while (i>0) {\n            if (arr.get(i).intValue() % 2 == 0)\
    \ {\n                if (hasEven) {\n                    if (arr.get(i).intValue()\
    \ >= curr) {\n                        res.add(curr);\n                       \
    \ res.add(i); \n                    }\n                } else {\n            \
    \        hasEven = true;\n                    curr = arr.get(i);\n           \
    \         i = i - 1;\n                }\n            } else {\n              \
    \  hasEven = false;\n                i = i - 1;\n            }\n        }\n  \
    \      return res;", "        ArrayList<Long> evens = arr.stream().filter(l ->\
    \ l.intValue() % 2 == 0).boxed().collect(Collectors.toList());\n        if(evens.isEmpty())\
    \ {\n            return new ArrayList<>();\n        }\n        TreeMap<Long, Long>\
    \ evenMap = new TreeMap<Long, Long>();\n        for(Long ev : evens) {\n     \
    \       evenMap.merge(ev, Long.MAX_VALUE, (v1, v2) -> v1 < v2 ? v1 : v2);\n  \
    \      }\n        Iterator<Map.Entry<Long, Long>> itr = evenMap.entrySet().iterator();\n\
    \        Map.Entry<Long, Long> minEntry;\n        ArrayList<Long> sortedEvens\
    \ = new ArrayList<>();\n        while(itr.hasNext()) {\n            minEntry =\
    \ itr.next();\n            sortedEvens.add(minEntry.getValue());\n        }\n\
    \        sortedEvens.sort((n1, n2) -> n1.compareTo(n2));\n        \n        if(sortedEvens.size()\
    \ == 1) {\n            return new ArrayList<>(Collections.singletonList(sortedEvens.get(0)));\n\
    \        }\n        return sortedEvens;", "        PriorityQueue<Long> pq = new\
    \ PriorityQueue<>((l, r) -> {\n            if (l == null || r == null)\n     \
    \           return l == null ? r : l;\n            else if (l == r)\n        \
    \        return l;\n            else\n                return l < r ? -1 : (l >\
    \ r ? 1 : 0);\n        });\n\n        int count = 0;\n        int index = 0;\n\
    \        for (Long val : arr) {\n            pq.add(val);\n            count++;\n\
    \            if (count == arr.size())\n                break;\n        }\n\n \
    \       ArrayList<Long> result = new ArrayList<>();\n        while (!pq.isEmpty())\
    \ {\n            Long node = pq.poll();\n            if (node.intValue() % 2 ==\
    \ 0) {\n                result.add(node);\n            }\n            count--;\n\
    \            if (count == 0)\n                break;\n        }\n        return\
    \ result;", "        // your code here\n        ArrayList<Long> newArray = new\
    \ ArrayList<>();\n        Collections.sort(arr);\n        long min = Long.MAX_VALUE;\n\
    \        long index = -1;\n        for(long i=0;i<arr.size();i++){\n         \
    \   if((arr.get(i)%2)==0){\n                if(min>arr.get(i)){\n            \
    \        min= arr.get(i);\n                    index = i;\n                }\n\
    \            }\n        }\n        newArray.add(min);\n        newArray.add(index);\n\
    \        return newArray;", "        if (arr == null) return new ArrayList<Long>();\n\
    \        if (arr.isEmpty()) return new ArrayList<Long>();\n        // If all the\
    \ values are even or if the array is empty, return an empty array array list\n\
    \        if (arr.stream().allMatch(el -> el % 2 == 0) || arr.isEmpty()) return\
    \ new ArrayList<Long>();\n\n        // Sort the array list by value\n        arr.sort(Comparator.comparing(el\
    \ -> el).reversed());\n        // Iterate over the array, pluck values and find\
    \ the smallest one\n        ArrayList<Long> even = new ArrayList<Long>();\n  \
    \      even.add(arr.get(0));\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (even.size() > 0)\
    \ even.add(arr.get(i));\n            }\n        }\n\n        // Return the smallest\
    \ value in the even list\n        return even;", "        // write your code here\n\
    \        return arr;", "        if (arr.isEmpty()) {\n            return new ArrayList<Long>();\n\
    \        }\n        final int nodeSize = arr.size();\n        final List<Long>\
    \ even = new ArrayList<Long>();\n        final List<Long> lesserEven = new ArrayList<Long>();\n\
    \        final Map<Long, Integer> evenIndex = new HashMap<Long, Integer>();\n\
    \        evenIndex.put(arr.get(0), 0);\n        even.add(arr.get(0));\n      \
    \  int index = 0;\n        Iterator<Long> iterator = arr.iterator();\n       \
    \ while (iterator.hasNext()) {\n            Long value = iterator.next();\n  \
    \          if (!evenIndex.containsKey(value)) {\n                lesserEven.add(value);\n\
    \                evenIndex.put(value, index);\n                index++;\n    \
    \        } else {\n                evenIndex.put(value);\n                index\
    \ = evenIndex.get(value);\n            }\n        }\n        // sort the lesser\
    \ even values, and get their index\n        lesserEven.sort(new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long a, Long b) {\n\
    \                return (int) (a - b);\n            }\n        });\n        final\
    \ ArrayList<Long> smalest_value = new ArrayList<Long>();\n        int k = 0;\n\
    \        for (Long value : lesserEven) {\n            if (k == 0) {\n        \
    \        smalest_value.add(value);\n                k++;\n            } else {\n\
    \                final int index = evenIndex.get(value);\n                if (index\
    \ == 0) {\n                    smalest_value.add(value);\n                }\n\
    \                k = index;\n            }\n        }\n        // sort the smalest\
    \ value and get its index\n        smalest_value.sort(new Comparator<Long>() {\n\
    \            @Override\n            public int compare(Long a, Long b) {\n   \
    \             return (int) (a - b);\n            }\n        });\n        return\
    \ smalest_value;", "        if (arr.isEmpty()) return new ArrayList<Long>();\n\
    \        Arrays.sort(arr);\n        int n = arr.size();\n        int idx = 1;\n\
    \        while ((n-1) % 2 == 0) {\n            idx = idx * 2;\n            n--;\n\
    \        }\n        if (n == 1) return new ArrayList<Long>(Arrays.asList(arr.get(0),\
    \ idx));\n        if (n == 0) return new ArrayList<Long>();\n        ArrayList<Long>\
    \ ret = new ArrayList<Long>(arr);\n        while (idx < arr.size()) {\n      \
    \      if (arr.get(idx) % 2 == 0) ret.remove(0);\n            else idx++;\n  \
    \      }\n        return ret;", "        // Your code goes here\n        long\
    \ smallest = 1;\n        long index = 0;\n        for(Long value : arr){\n   \
    \         if(value%2 == 0){\n                if(value < smallest){\n         \
    \           smallest = value;\n                    index = arr.indexOf(value);\n\
    \                }\n            }\n        }\n        ArrayList<Long> result =\
    \ new ArrayList<>();\n        result.add(smallest);\n        result.add(index);\n\
    \        return result;", "        Map<Long, Integer> map = new HashMap<>();\n\
    \        List<Long> result = new ArrayList<>();\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            map.put(arr.get(i), i);\n        }\n        for (Map.Entry<Long,\
    \ Integer> entry : map.entrySet()) {\n            int min = entry.getValue();\n\
    \            int index = entry.getKey();\n            Long value = new Long(index);\n\
    \            if (min != 0) {\n                result.add(value);\n           \
    \ }\n        }\n        return result;", "        return arr.stream().sorted(Comparator.comparingLong(Long::longValue).reversed())\n\
    \                .distinct().collect(Collectors.toList());", "        if(arr.isEmpty())\
    \ {\n            return new ArrayList<>();\n        }\n        \n        // sort\
    \ arr\n        Collections.sort(arr);\n        \n        // find min value\n \
    \       int i = arr.size() - 1;\n        long min = arr.get(i);\n        \n  \
    \      // find min even value\n        while(i >= 0) {\n            if(arr.get(i)\
    \ % 2 == 0) {\n                min = arr.get(i);\n            }\n            i--;\n\
    \        }\n        \n        // return value and the index\n        ArrayList<Long>\
    \ ret = new ArrayList<>();\n        \n        // remove min even value\n     \
    \   int j = arr.size() - 1;\n        while(j >= 0) {\n            if(arr.get(j)\
    \ == min) {\n                arr.remove(j);\n            }\n            j--;\n\
    \        }\n        \n        // add min value\n        ret.add(min);\n      \
    \  ret.add(0);\n        \n        return ret;", "        int size = arr.size();\n\
    \        ArrayList<Long> result = new ArrayList<>(size);\n        Collections.sort(arr);\n\
    \        ArrayList<Long> subarr1 = new ArrayList<>();\n        ArrayList<Long>\
    \ subarr2 = new ArrayList<>();\n        ArrayList<Long> subarr3 = new ArrayList<>();\n\
    \        ArrayList<Long> subarr4 = new ArrayList<>();\n        for(int i = 0;\
    \ i < size; i++){\n            if(i == 0){\n                subarr1.add(arr.get(i));\n\
    \                subarr2.add(new ArrayList<>());\n                subarr3.add(new\
    \ ArrayList<>());\n                subarr4.add(new ArrayList<>());\n         \
    \   }\n            if(arr.get(i) == 0){\n                subarr2.get(arr.get(i)).add(arr.get(i));\n\
    \                subarr2.get(arr.get(i)).add(1);\n            }\n            if(arr.get(i)\
    \ == 1){\n                subarr3.get(arr.get(i)).add(arr.get(i));\n         \
    \       subarr3.get(arr.get(i)).add(0);\n            }\n            if(arr.get(i)\
    \ == 2){\n                subarr4.get(arr.get(i)).add(arr.get(i));\n         \
    \       subarr4.get(arr.get(i)).add(2);\n            }\n        }\n        int\
    \ biggestIndex = 0;\n        for(int i = 0; i < size; i++){\n            if(i\
    \ == 0){\n                biggestIndex = subarr1.get(i).get(1);\n            }\n\
    \            if(subarr1.get(i).get(1) == biggestIndex){\n                subarr1.get(i).get(1)\
    \ += subarr2.get(i).get(1);\n            }\n            if(subarr1.get(i).get(1)\
    \ > biggestIndex){\n                biggestIndex = subarr1.get(i).get(1);\n  \
    \          }\n            if(subarr1.get(i).get(1) == biggestIndex){\n       \
    \         subarr1.get(i).get(1) += subarr3.get(i).get(1);\n            }\n   \
    \         if(subarr1.get(i).get(1) > biggestIndex){\n                biggestIndex\
    \ = subarr1.get(i).get(1);\n            }\n            if(subarr1.get(i).get(1)\
    \ == biggestIndex){\n                subarr1.get(i).get(1) += subarr4.get(i).get(1);\n\
    \            }\n            if(subarr1.get(i).get(1) > biggestIndex){\n      \
    \          biggestIndex = subarr1.get(i).get(1);\n            }\n        }\n \
    \       for(int i = 0; i < size; i++){\n            if(subarr1.get(i).get(1) ==\
    \ biggestIndex){\n                result.add((subarr1.get(i).get(1)));\n     \
    \       }\n        }\n        return result;", "        List<Long> newList = new\
    \ ArrayList<>();\n        int index = 0;\n        long minEvenValue = 0;\n   \
    \     boolean evenFound = false;\n\n        for (Long each : arr) {\n        \
    \    System.out.println(each);\n            if (even > minEvenValue) {\n     \
    \           newList.add(each);\n            }\n\n            if (evenFound) {\n\
    \                index++;\n            }\n\n            if (each % 2 == 0) {\n\
    \                minEvenValue = each;\n                evenFound = true;\n   \
    \         }\n        }\n\n        return newList;", "        ArrayList<Long> pick\
    \ = new ArrayList<>();\n        if (arr.isEmpty()) return new ArrayList<Long>();\n\
    \        if (arr.size() == 1) return pick;\n        Integer count = 0;\n     \
    \   Long max = arr.get(0);\n        int min = 0, index = 0, maxIndex = -1;\n \
    \       for (int i = 0; i < arr.size(); i++) {\n            Long curr = arr.get(i);\n\
    \            if (curr < max) {\n                pick.add(curr);\n            }\n\
    \            if (curr == max) {\n                pick.add(curr);\n           \
    \     count++;\n            }\n            if (curr > max) {\n               \
    \ max = curr;\n                maxIndex = i;\n                if (curr < min)\
    \ min = curr;\n            }\n            if (curr == min && curr > max) {\n \
    \               index = i;\n            }\n        }\n        if (count == arr.size()\
    \ - 1) {\n            return pick;\n        }\n        if (count > arr.size()\
    \ - 1) {\n            return new ArrayList<Long>();\n        }\n        int index2\
    \ = maxIndex;\n        Long max2 = pick.get(maxIndex);\n        for (int i = maxIndex\
    \ + 1; i < arr.size(); i++) {\n            Long curr = arr.get(i);\n         \
    \   if (curr > max2) {\n                max2 = curr;\n                index2 =\
    \ i;\n            }\n        }\n        pick.add(max2);\n        pick.add(maxIndex);\n\
    \        pick.add(index);\n        return pick;", "        PriorityQueue<Long>\
    \ pq = new PriorityQueue<>();\n        for(int i = 0;i < arr.size();i++){\n  \
    \          pq.add(arr.get(i));\n        }\n        List<Long> arr = new ArrayList<>();\n\
    \        while(!pq.isEmpty()){\n            long tmp = pq.poll();\n          \
    \  if(tmp % 2 == 0){\n                arr.add(tmp);\n            }\n        }\n\
    \        Collections.sort(arr);\n        long min = arr.get(0);\n        long\
    \ idx = -1;\n        for(int i = 0;i < arr.size();i++){\n            if(arr.get(i)\
    \ == min){\n                idx = i;\n            }\n        }\n        if(arr.size()\
    \ == 0){\n            return new ArrayList<>();\n        }\n        ArrayList<Long>\
    \ anss = new ArrayList<>();\n        anss.add(min);\n        anss.add(idx);\n\
    \        return anss.stream().toArray((Long[]) new Object[anss.size()]);", " \
    \       ArrayList<Long> result = new ArrayList<>();\n        if (arr.isEmpty())\n\
    \            return result;\n        // Find the smallest even value.\n      \
    \  long min = arr.get(0);\n        int index = -1;\n        for (int i = 1; i\
    \ < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0 && arr.get(i) < min)\n\
    \                min = arr.get(i);\n            if (arr.get(i) == min)\n     \
    \           index = i;\n        }\n        result.add(min);\n        if (index\
    \ == -1)\n            return result;\n        // Find the smallest even value\
    \ index based on the smallest even value.\n        int min = arr.get(0);\n   \
    \     for (int i = 1; i < arr.size(); i++) {\n            if (arr.get(i) % 2 ==\
    \ 0 && arr.get(i) < min) {\n                min = arr.get(i);\n              \
    \  index = i;\n            }\n        }\n        result.add(min, index);\n   \
    \     return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (arr.isEmpty()) {\n            return result;\n        }\n       \
    \ Long largestEvenValue = Collections.max(arr);\n        int largestIndex = 0;\n\
    \        for (long i = 0; i < arr.size(); i++) {\n            if (arr.get(i) ==\
    \ largestEvenValue) {\n                result.add(largestEvenValue);\n       \
    \         result.add(largestIndex);\n                return result;\n        \
    \    }\n            if (arr.get(i) < largestEvenValue && arr.get(i) != 0) {\n\
    \                largestEvenValue = arr.get(i);\n                largestIndex\
    \ = i;\n            }\n        }\n        ArrayList<Long> result2 = new ArrayList<>();\n\
    \        result2.add(largestEvenValue);\n        result2.add(largestIndex);\n\
    \        return pluck(result);", "        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        final int len = arr.size();\n        if(len==0){\n            return\
    \ res;\n        }\n        if(len==1){\n            int val = 0;\n           \
    \ try {\n                val = (int) arr.get(0);\n            } catch (ClassCastException\
    \ e) {\n                System.out.println(\"Not an Integer\");\n            }\n\
    \            for(long e : arr) {\n                if(e%2==0){\n              \
    \      if(val<e){\n                        res.add(e);\n                    }\n\
    \                }\n            }\n            if(res.isEmpty()){\n          \
    \      return res;\n            }\n            int index = Collections.binarySearch(arr,res);\n\
    \            return Collections.singletonList(res,index);\n        }\n       \
    \ int minIndex = -1;\n        long min = Long.MAX_VALUE;\n        for(long e:\
    \ arr){\n            long m=0;\n            try{\n                m = (long)e;\n\
    \            }catch(ClassCastException e){\n                System.out.println(\"\
    Not an Integer\");\n            }\n            if(m%2==0){\n                if(minIndex==-1){\n\
    \                    minIndex = Collections.binarySearch(arr,e);\n           \
    \         min = m;\n                }else if(m<min){\n                    minIndex\
    \ = Collections.binarySearch(arr,e);\n                    min = m;\n         \
    \       }\n            }\n        }\n        if(minIndex<0){\n            return\
    \ res;\n        }\n        for(long e : arr){\n            long m=0;\n       \
    \     try{\n                m = (long)e;\n            }catch(ClassCastException\
    \ e){\n                System.out.println(\"Not an Integer\");\n            }\n\
    \            if(m%2==0){\n                if(minIndex==0){\n                 \
    \   res.add(e);\n                }else{\n                    res.add(e);\n   \
    \             }\n            }\n        }\n        return res;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long smalest_value = 0;\n        int smallest_index\
    \ = -1;\n\n        if (arr.isEmpty()) {\n            return result;\n        }\n\
    \n        for (Long value : arr) {\n            if (value % 2 == 0) {\n      \
    \          smalest_value = value;\n                smallest_index = arr.indexOf(value);\n\
    \                break;\n            }\n        }\n\n        if (smalest_value\
    \ != 0) {\n            result.add(smalest_value);\n            result.add(smallest_index);\n\
    \        }\n\n        if (result.isEmpty()) {\n            return new ArrayList<>();\n\
    \        }\n\n        return result;", "        if (arr == null || arr.isEmpty())\
    \ return new ArrayList<Long>();\n        // Create a map with index as key, value\
    \ as the node itself\n        Map<Integer, Long> map = new HashMap<>();\n    \
    \    for (int i = 0; i < arr.size(); i++) {\n            Long value = arr.get(i);\n\
    \            if (map.containsKey(value)) {\n                Long existing = map.get(value);\n\
    \                if (existing.isEven()) {\n                    ArrayList<Long>\
    \ arr2 = new ArrayList<>();\n                    arr2.add(existing);\n       \
    \             arr2.add(i);\n                    return arr2;\n               \
    \ } else {\n                    map.put(value, new Long(i, value));\n        \
    \        }\n            } else {\n                map.put(value, new Long(i, value));\n\
    \            }\n        }\n        // no even values\n        return new ArrayList<>();",
  "        PriorityQueue<Long> pq = new PriorityQueue<>();\n        arr.stream().forEach(node\
    \ -> {\n            if (node.value % 2 == 0) {\n                pq.add(node.value);\n\
    \            }\n        });\n        pq.stream().forEach(node -> {\n         \
    \   Collections.sort(pq, (node1, node2) -> (int) node1.compareTo(node2));\n  \
    \          if (pq.poll().value % 2 == 0) {\n                return new ArrayList<>(Arrays.asList(new\
    \ Long[] {\n                    pq.poll().value,\n                    (int) pq.poll().value\
    \ - 1,\n                    pq.poll()\n                }));\n            }\n \
    \       });\n        if (pq.size() == 0) {\n            return new ArrayList<>();\n\
    \        }\n        return null;", "        // write your code in Java 7\n   \
    \     return arr.stream().map(e -> {\n            while (e % 2 == 0) {\n     \
    \           e = e / 2;\n            }\n            return e;\n        }).sorted().collect(Collectors.toList());",
  "        ArrayList<Long> result = new ArrayList<Long>();\n        if (arr.isEmpty())\
    \ return result;\n        Long smalest_value= Collections.min(arr);\n        Collections.sort(arr);\n\
    \        for (Long value: arr)\n            if (value.intValue() % 2 == 0 && value.intValue()\
    \ != smalest_value.intValue())\n                result.add(value);\n        if\
    \ (result.isEmpty())\n            return new ArrayList<Long>();\n        return\
    \ result;", "        if (arr == null || arr.isEmpty()) {\n            return new\
    \ ArrayList<Long>();\n        }\n        TreeMap<Long, Integer> map = new TreeMap<>();\n\
    \        arr.stream().map(val -> val).forEach(val -> map.put(val, map.getOrDefault(val,\
    \ 0L) + 1));\n        \n        ArrayList<Long> result = new ArrayList<>();\n\
    \        \n        int smallestValue = 1;\n        int smallestIndex = -1;\n \
    \       \n        for (Integer val : map.values()) {\n            if (smallestValue\
    \ == 0 || val < smallestValue) {\n                smallestValue = val;\n     \
    \           smallestIndex = map.get(val);\n            }\n        }\n        \n\
    \        if (smallestIndex != -1) {\n            for (int i = smallestIndex; i\
    \ <= map.size(); i++) {\n                result.add(map.get(smallestIndex));\n\
    \                \n            }\n        }\n        \n        return result;",
  "        ArrayList<Long> nodes = new ArrayList<>();\n        ArrayList<Long> resultNodes\
    \ = new ArrayList<>();\n\n        Long largestEven = Long.MIN_VALUE;\n       \
    \ Long largestIndex = Long.MIN_VALUE;\n        int smallestIndex = -1;\n\n   \
    \     for (long node : arr) {\n            if (node % 2 == 0) {\n            \
    \    if (largestEven < node) {\n                    largestEven = node;\n    \
    \            }\n\n                if (largestIndex < smallestIndex) {\n      \
    \              largestIndex = node;\n                    smallestIndex = -1;\n\
    \                } else if (largestIndex == largestEven) {\n                 \
    \   if (smallestIndex == -1) {\n                        smallestIndex = node;\n\
    \                    } else {\n                        if (node < smallestIndex)\
    \ {\n                            smallestIndex = node;\n                     \
    \   }\n                    }\n                }\n            }\n            nodes.add(node);\n\
    \        }\n\n        if (nodes.size() == 0) {\n            return new ArrayList<>();\n\
    \        }\n\n        Long smalest_value = largestEven;\n        Long smalest_index\
    \ = largestIndex;\n        if (nodes.size() > 1) {\n            for (int i = 1;\
    \ i < nodes.size(); i++) {\n                Long curr_value = nodes.get(i);\n\
    \                Long curr_index = i;\n\n                if (curr_value % 2 ==\
    \ 0) {\n                    if (curr_index < smallestIndex) {\n              \
    \          smallestIndex = curr_index;\n                    }\n              \
    \      curr_index--;\n                }\n\n                if (curr_value < smalest_value)\
    \ {\n                    smalest_value = curr_value;\n                    smalest_index\
    \ = curr_index;\n                }\n            }\n        }\n\n        resultNodes.add(smalest_value);\n\
    \        resultNodes.add(smalest_index);\n\n        return resultNodes;", "  \
    \      boolean hasEven = arr.stream().anyMatch(n -> n % 2 == 0);\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        if (hasEven) {\n            long smalest_value\
    \ = arr.stream().min(n -> n % 2).getAsLong();\n            ArrayList<Long> indexes\
    \ = new ArrayList<>();\n            for (int i = 0; i < arr.size(); i++) {\n \
    \               if (arr.get(i) == smalest_value) {\n                    indexes.add(i);\n\
    \                }\n            }\n            if (indexes.isEmpty()) {\n    \
    \            return new ArrayList<>();\n            } else {\n               \
    \ long min_val = indexes.stream().min().getAsLong();\n                result.add(smalest_value);\n\
    \                result.add(min_val);\n                return result;\n      \
    \      }\n        } else {\n            return arr;\n        }", "        return\
    \ arr.stream()\n                .sorted(Comparator.comparingLong(node -> node.value).thenComparingLong(node\
    \ -> node.index))\n                .filter(node -> node.value % 2 == 0)\n    \
    \            .collect(Collectors.toList());", "        int min = Integer.MAX_VALUE;\n\
    \        int index = -1;\n        for (Long node : arr) {\n            int cur\
    \ = node.intValue();\n            if (cur > min) {\n                min = cur;\n\
    \                index = node.intValue();\n            }\n        }\n        if\
    \ (min == Integer.MAX_VALUE) {\n            return Collections.emptyList();\n\
    \        }\n        ArrayList<Long> res = new ArrayList<>();\n        int cur\
    \ = arr.indexOf(new Long(index));\n        while (cur != -1) {\n            res.add(new\
    \ Long(cur));\n            cur = arr.indexOf(new Long(index), cur + 1);\n    \
    \    }\n        return res;", "        boolean hasSmallestEvenValue;\n       \
    \ ArrayList<Long> result;\n        for(Long l : arr) {\n            boolean evenValue\
    \ = l % 2 == 0;\n            boolean isSmallestEvenValue = evenValue && l == Collections.min(arr);\n\
    \            if(!hasSmallestEvenValue || isSmallestEvenValue) {\n            \
    \    result = new ArrayList<Long>(Arrays.asList(l, Collections.binarySearch(arr)));\n\
    \                hasSmallestEvenValue = evenValue;\n            } else result.add(l);\n\
    \        }\n        if(result.size() == 0) return new ArrayList<Long>();\n   \
    \     else return result;", "        // write your code in Java 7\n        //\
    \ return null;\n        ArrayList<Long> result = new ArrayList<>();\n        int\
    \ min = Collections.min(arr);\n        int max = Collections.max(arr);\n     \
    \   for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == min\
    \ || arr.get(i) == max) {\n                continue;\n            }\n        \
    \    if (arr.get(i) % 2 == 0) {\n                if (result.size() == 0) {\n \
    \                   result.add(arr.get(i));\n                }\n             \
    \   else if (result.get(0).equals(arr.get(i))) {\n                    result.add(arr.get(i));\n\
    \                }\n                else {\n                    for (int j = 0;\
    \ j < result.size(); j++) {\n                        long currentValue = result.get(j);\n\
    \                        if (currentValue == arr.get(i)) {\n                 \
    \           if (result.size() <= j) {\n                                result.add(arr.get(i));\n\
    \                                break;\n                            }\n     \
    \                       else {\n                                if (arr.get(j)\
    \ < arr.get(i)) {\n                                    result.add(arr.get(i));\n\
    \                                    break;\n                                }\n\
    \                                else if (arr.get(j) > arr.get(i)) {\n       \
    \                             result.add(arr.get(j));\n                      \
    \              break;\n                                }\n                   \
    \         }\n                        }\n                    }\n              \
    \  }\n            }\n        }\n        return result;", "        int size = arr.size();\n\
    \        ArrayList<Long> arr = new ArrayList<>();\n        Arrays.sort(arr);\n\
    \        for (int i = 0; i < size; i++) {\n            long index = i;\n     \
    \       while (index >= 0 && ((arr[index] % 2) == 0L)) {\n                index--;\n\
    \            }\n            arr.add(index, arr.get(index));\n        }\n     \
    \   return arr;", "        Arrays.sort(arr);\n        int len = arr.size();\n\
    \        if (len <= 0) return new ArrayList<>();\n        long first = arr.get(0);\n\
    \        long second = arr.get(1);\n        if (arr.size() % 2 == 0) {\n     \
    \       int count = 0;\n            for (int i = 2; i < len; i++) {\n        \
    \        if (arr.get(i) % 2 == 0 && arr.get(i) < second) {\n                 \
    \   second = arr.get(i);\n                    count++;\n                }\n  \
    \          }\n            if (count == len) return new ArrayList<>();\n      \
    \      if (count == 1) return new ArrayList<>(Arrays.asList((Long)first, (long)0));\n\
    \            return new ArrayList<>(Arrays.asList((Long)first, (long)count));\n\
    \        } else {\n            long third = arr.get(2);\n            for (int\
    \ i = 3; i < len; i++) {\n                if (arr.get(i) % 2 == 0 && arr.get(i)\
    \ < third) {\n                    third = arr.get(i);\n                }\n   \
    \         }\n            return new ArrayList<>(Arrays.asList((Long)first, (long)second,\
    \ (long)third));\n        }", "        if (arr.isEmpty()) {\n            return\
    \ new ArrayList<Long>();\n        }\n        int size = arr.size();\n        if\
    \ (size == 1) {\n            Long v = arr.get(0);\n            if (v % 2 == 0)\
    \ {\n                return new ArrayList<Long>() {{\n                    add(v);\n\
    \                }};\n            } else {\n                return new ArrayList<Long>()\
    \ {{\n                    add(v);\n                    add(0);\n             \
    \   }};\n            }\n        }\n        List<Long> minNodes = arr.stream().min(Comparator.comparingLong(n\
    \ -> n % 2))\n                .filter(n -> n % 2 == 0).mapToLong(Long::longValue).toList();\n\
    \        Long smallest = minNodes.get(0);\n        int smallIndex = minNodes.get(1);\n\
    \        ArrayList<Long> newArr = new ArrayList<Long>();\n        for (int i =\
    \ 0; i < size; i++) {\n            Long v = arr.get(i);\n            if (v % 2\
    \ == 0) {\n                newArr.add(v);\n            } else {\n            \
    \    newArr.add(v);\n                newArr.add(0);\n            }\n        }\n\
    \        for (int i = 0; i < newArr.size(); i++) {\n            if (newArr.get(i)\
    \ == smallest) {\n                return new ArrayList<Long>() {{\n          \
    \          add(newArr.get(i));\n                    add(smallIndex);\n       \
    \         }};\n            }\n        }\n        return new ArrayList<Long>();",
  "        Map<Long, ArrayList<Long>> map = new HashMap<>();\n        for(Long v :\
    \ arr) {\n            if(map.getOrDefault(v, new ArrayList<>()).get(0).get() %\
    \ 2 == 0) {\n                map.get(v).add(v);\n            } else {\n      \
    \          map.put(v, new ArrayList<>());\n                map.get(v).add(v);\n\
    \            }\n        }\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        for(Long v : map.keySet()) {\n            if((map.get(v).get(0).get()\
    \ % 2 == 0) && ((map.get(v).get(0) % 2) == 0)) {\n                res.add(new\
    \ ArrayList<Long>());\n                res.add(map.get(v).get(0));\n         \
    \   } else {\n                res.add(map.get(v).get(0));\n            }\n   \
    \     }\n        return res;", "        ArrayList<Long> vals = new ArrayList<>();\n\
    \        Arrays.sort(arr);\n        for (int i = 0; i < arr.size(); i++) {\n \
    \           long curr = arr.get(i);\n            if (curr % 2 == 0) {\n      \
    \          vals.add(curr);\n            }\n        }\n        if (vals.size()\
    \ == 0) {\n            return new ArrayList<>();\n        }\n        long smalest_val\
    \ = vals.get(0);\n        ArrayList<Long> res = new ArrayList<>(vals.size());\n\
    \        int j = 0;\n        for (int i = 0; i < vals.size(); i++) {\n       \
    \     if (vals.get(i) == smalest_val) {\n                res.add(smalest_val);\n\
    \                res.add(i);\n                j++;\n            }\n        }\n\
    \        if (j == 0) {\n            return new ArrayList<>();\n        }\n   \
    \     while (j < vals.size()) {\n            if (vals.get(j) == smalest_val) {\n\
    \                res.add(smalest_val);\n                res.add(j);\n        \
    \        j++;\n            } else {\n                res.add(vals.get(j));\n \
    \               j++;\n            }\n        }\n        return res;", "      \
    \  if (arr.isEmpty()) {\n            return new ArrayList<Long>();\n        }\n\
    \        arr.sort(Comparator.comparing(Long::intValue).thenComparing(Comparator.naturalOrder()));\n\
    \        ArrayList<Long> res = new ArrayList<>();\n        int idx = 1;\n    \
    \    Long smallest = arr.get(0);\n        for (int i = 1; i < arr.size(); i++)\
    \ {\n            long val = arr.get(i);\n            if (val % 2 == 0) {\n   \
    \             smallest = val;\n                idx = i;\n            }\n     \
    \       if (val < smallest) {\n                smallest = val;\n             \
    \   idx = i;\n            }\n        }\n        ArrayList<Long> evens = new ArrayList<>();\n\
    \        Long lastEven = null;\n        for (int i = 1; i < arr.size(); i++) {\n\
    \            if (arr.get(i) % 2 == 0) {\n                if (lastEven == null)\
    \ {\n                    lastEven = arr.get(i);\n                } else {\n  \
    \                  evens.add(lastEven);\n                    lastEven = arr.get(i);\n\
    \                }\n            }\n        }\n        if (!evens.isEmpty()) {\n\
    \            evens.add(lastEven);\n            evens.add(smallest);\n        }\
    \ else {\n            evens.add(smallest);\n        }\n        res.add(evens);\n\
    \        return res;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (arr.isEmpty()) {\n            return result;\n        }\n       \
    \ long minValue = Collections.min(arr);\n        long minIndex = -1;\n       \
    \ boolean even = true;\n        for (Long value : arr) {\n            if (value\
    \ % 2 == 0) {\n                even = false;\n            }\n            if (value\
    \ == minValue && even) {\n                minIndex = arr.indexOf(value);\n   \
    \         }\n        }\n        result.add(minValue);\n        if (minIndex >=\
    \ 0) {\n            result.add(minIndex);\n        }\n        return result;",
  "        long smallest = Long.MAX_VALUE;\n        int smallestIndex = 0;\n     \
    \   ArrayList<Long> res = new ArrayList<Long>();\n        if (arr.isEmpty()) return\
    \ res;\n        for (Long node : arr) {\n            if (node % 2 == 0) {\n  \
    \              if (smallest > node) smallest = node;\n                if (smallest\
    \ != Long.MAX_VALUE && node < smallest) smallestIndex = arr.indexOf(node);\n \
    \           }\n        }\n        if (smallest == Long.MAX_VALUE) return res;\n\
    \        smallest = smallest % 2 == 0 ? smallest : smallest + 1;\n        res.add(smallest);\n\
    \        res.add(smallestIndex);\n        return res;", "        if(arr.isEmpty())\
    \ return arr;\n        int nodeIndex = -1;\n        long smalest_value = 0;\n\
    \        for(Long node : arr) {\n            if(node.value % 2 == 0) {\n     \
    \           smalest_value = node.value;\n                nodeIndex = arr.indexOf(node);\n\
    \                break;\n            }\n        }\n        if(nodeIndex == -1)\
    \ return new ArrayList<>();\n        ArrayList<Long> newArr = new ArrayList<>();\n\
    \        for(int i = 0; i < nodeIndex; i++) {\n            newArr.add(arr.get(i));\n\
    \        }\n        newArr.add(smalest_value);\n        newArr.add(nodeIndex);\n\
    \        return newArr;", "        // Complete the pluck function below.\n   \
    \     \n        ArrayList<Long> evenNode = new ArrayList<Long>();\n        \n\
    \        \n        \n        int numEven = 1;\n        \n        int index = 0;\n\
    \        \n        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i)\
    \ % 2 == 0) {\n                \n                evenNode.add(arr.get(i));\n \
    \               \n                numEven++;\n                \n            }\n\
    \        }\n        \n        \n        if (numEven != 1) {\n            \n  \
    \          int index = 0;\n            \n            for (int i = 0; i < arr.size();\
    \ i++) {\n                if (arr.get(i) % 2 == 0) {\n                    \n \
    \                   if (evenNode.size() > index) {\n                        \n\
    \                        if (evenNode.get(index) > arr.get(i)) {\n           \
    \                 \n                            index = i;\n                 \
    \           \n                        }\n                        \n          \
    \          }\n                    \n                    \n                }\n\
    \            }\n            \n            \n            if (index != arr.size()\
    \ - 1) {\n                \n                return evenNode;\n               \
    \ \n            }\n            \n        }\n        \n        \n        \n   \
    \     \n        \n        \n        \n        return evenNode;", "        long\
    \ sum = 0;\n        long min = Long.MAX_VALUE;\n        for (Long v : arr) {\n\
    \            sum += v;\n            if (sum < min) {\n                min = sum;\n\
    \            }\n        }\n        ArrayList<Long> res = new ArrayList<>(arr.size());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long value = arr.get(i);\n\
    \            if (value % 2 == 0) {\n                if (value < min) {\n     \
    \               res.add(value);\n                }\n            }\n        }\n\
    \        return res;", "        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        ArrayList<Long> results = new ArrayList<>();\n        for(int\
    \ i = 0; i < arr.size(); i++){\n            if( arr.get(i) % 2 == 0 && arr.get(i)\
    \ < smallest_value){\n                smallest_value = arr.get(i);\n         \
    \       smallest_index = i;\n            }\n            else if (arr.get(i) %\
    \ 2 == 0 && arr.get(i) == smallest_value) {\n                if (i < smallest_index){\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \           results.add(arr.get(i));\n        }\n        return results;", " \
    \       if(arr.isEmpty()){\n            return new ArrayList<>();\n        }\n\
    \        Arrays.sort(arr);\n        ArrayList<Long> list = new ArrayList<>();\n\
    \        for(int i = 0; i < arr.size() - 1; i++){\n            if(arr.get(i) %\
    \ 2 == 0){\n                list.add(arr.get(i));\n                if(i == arr.size()\
    \ - 2){\n                    break;\n                }\n            }\n      \
    \  }\n        ArrayList<Long> result = new ArrayList<>();\n        for(Long e\
    \ : list){\n            int index = arr.indexOf(e);\n            if(index >= 0){\n\
    \                result.add(e, index);\n            }\n        }\n        return\
    \ result;", "        List<Integer> evenNums = new ArrayList<Integer>();\n    \
    \    ArrayList<Long> evenNumsSorted = new ArrayList<Long>();\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2 == 0) {\n    \
    \            evenNums.add(arr.get(i));\n                evenNumsSorted.add(arr.get(i));\n\
    \            }\n        }\n        Collections.sort(evenNums);\n        evenNumsSorted.sort(Comparator.comparingLong(a\
    \ -> a));\n        ArrayList<Long> result = new ArrayList<Long>();\n        int\
    \ minIndex = -1;\n        int minVal = evenNums.get(0);\n        for (int i =\
    \ 1; i < evenNums.size(); i++) {\n            if (evenNums.get(i) == minVal) {\n\
    \                result.add(minVal);\n                minIndex = i;\n        \
    \    } else {\n                if (minIndex >= 0) {\n                    if (minVal\
    \ < evenNums.get(i)) {\n                        minVal = evenNums.get(i);\n  \
    \                      minIndex = i;\n                    }\n                }\n\
    \            }\n        }\n        if (minIndex >= 0) {\n            result.add(minVal);\n\
    \            result.add(minIndex);\n        }\n        return result;", "    \
    \    // TODO Auto-generated method stub\n        ArrayList<Long> ret = new ArrayList<Long>();\n\
    \        int n = arr.size();\n        int smallest_index = 0;\n        long smallest_value\
    \ = arr.get(smallest_index);\n        Iterator<Long> it = arr.iterator();\n  \
    \      while (it.hasNext()) {\n            long value = it.next();\n         \
    \   if (value % 2 == 0) {\n                if (smallest_value % 2 == 0) {\n  \
    \                  if (value < smallest_value) {\n                        smallest_value\
    \ = value;\n                        smallest_index = it.nextIndex();\n       \
    \             }\n                } else {\n                    if (value < smallest_value)\
    \ {\n                        smallest_value = value;\n                       \
    \ smallest_index = it.nextIndex();\n                    }\n                }\n\
    \            }\n        }\n        ret.add(smallest_value, smallest_index);\n\
    \        return ret;", "        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        Arrays.sort(arr);\n        boolean flag = false;\n        int size =\
    \ arr.size();\n        int i;\n        for (i = 0; i < size; i++) {\n        \
    \    while (arr.get(i) % 2 == 0) {\n                flag = true;\n           \
    \     break;\n            }\n            if (flag) {\n                temp.clear();\n\
    \                break;\n            }\n            temp.add(arr.get(i));\n  \
    \      }\n        if (size == 0) {\n            temp = new ArrayList<Long>();\n\
    \        }\n        return temp;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        Arrays.sort(arr);\n        int smallestValueIndex = arr.indexOf(arr.stream().min());\n\
    \        long smallestValue = arr.stream().min().getAsLong();\n        long smallestIndex\
    \ = 0;\n        for (int i = 0; i < smallestValueIndex; i++) {\n            smallestIndex\
    \ = i;\n        }\n        result.add(smallestValue);\n        result.add(smallestIndex);\n\
    \        return result;", "        // Your code here\n        HashMap<Long,ArrayList<Long>>\
    \ hs = new HashMap<>();\n        for (Long i: arr)\n        {\n            if\
    \ (hs.containsKey(i)) {\n                hs.get(i).add(i);\n            }\n  \
    \          else {\n                hs.put(i,new ArrayList<Long>());\n        \
    \        hs.get(i).add(i);\n            }\n        }\n        ArrayList<Long>\
    \ output = new ArrayList<Long>();\n        for (ArrayList<Long> v: hs.values())\
    \ {\n            int min = Collections.min(v);\n            for (Long i: v) {\n\
    \                if (i.intValue() == min) {\n                    output.add(i);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return output;", "        ArrayList<Long> list = new ArrayList<>();\n  \
    \      if (arr.isEmpty()) {\n            return list;\n        }\n        long\
    \ evenMin = arr.get(0);\n        int index = 0;\n        for (Long item : arr)\
    \ {\n            if (item % 2 == 0) {\n                if (item > evenMin) {\n\
    \                    evenMin = item;\n                    index = arr.indexOf(item);\n\
    \                }\n            }\n        }\n        if (evenMin == arr.get(0))\
    \ {\n            list.add(evenMin, index);\n            return list;\n       \
    \ } else {\n            return pluck(arr.subList(1, arr.size()), list);\n    \
    \    }", "        if (arr.isEmpty()) {\n            return new ArrayList<Long>(arr);\n\
    \        }\n        ArrayList<Long> index = new ArrayList<Long>();\n        int\
    \ indexMax = -1;\n        long maxEvenValue = arr.get(0);\n        index.add(maxEvenValue);\n\
    \        int count = 1;\n        for (int i = 1; i < arr.size(); i++) {\n    \
    \        if (arr.get(i) == maxEvenValue) {\n                count++;\n       \
    \     } else {\n                count = 0;\n            }\n            if (count\
    \ > indexMax) {\n                indexMax = count;\n                maxEvenValue\
    \ = arr.get(i);\n                index.add(maxEvenValue);\n            }\n   \
    \     }\n        return index;", "        if (arr.isEmpty())\n            return\
    \ new ArrayList<Long>();\n\n        ArrayList<Long> results = new ArrayList<Long>();\n\
    \n        if (arr.size() > 1) {\n            // sort the array list\n        \
    \    Collections.sort(arr);\n\n            // find smallest even number\n    \
    \        long smallest = arr.get(0);\n            int smallest_index = 0;\n  \
    \          for (int i = 1; i < arr.size(); i++) {\n                if (arr.get(i)\
    \ % 2 == 0) {\n                    if (smallest > arr.get(i)) {\n            \
    \            smallest = arr.get(i);\n                        smallest_index =\
    \ i;\n                    }\n                }\n            }\n            //\
    \ add smallest even number to results\n            results.add(smallest);\n  \
    \          results.add(smallest_index);\n        }\n        return results; //\
    \ return results", "        ArrayList<Long> result = new ArrayList<>();\n    \
    \    Set<Long> even = new HashSet<>();\n\n        Collections.sort(arr);\n\n \
    \       for (Long val : arr) {\n            if (val % 2 == 0) {\n            \
    \    even.add(val);\n            } else {\n                result.add(val);\n\
    \            }\n        }\n\n        if (even.contains(\"*\")) {\n           \
    \ Set<Long> min = even.stream().filter(v -> v % 2 == 0).collect(Collectors.toSet());\n\
    \            int index = min.stream().filter(v -> v % 2 == 1).count();\n     \
    \       even.remove(\"*\");\n            even.add(index);\n            return\
    \ result.stream().filter(v -> v % 2 == 0).collect(Collectors.toList());\n    \
    \    }\n        return result;", "        List<Long> result = new ArrayList<>();\n\
    \        if (arr.isEmpty()) {\n            return result;\n        }\n\n     \
    \   // Sort the given array array list using value as a comparator.\n        //\
    \ If two values with same index are found, compare their value.\n        arr.sort(Comparator.comparingLong(l\
    \ -> l));\n\n        // Find the smallest even value.\n        Long smallest =\
    \ arr.get(0);\n        Long index = 0;\n\n        // Find the node with the smallest\
    \ even value.\n        for (Long val : arr) {\n            if (val % 2 == 0) {\n\
    \                if (smallest == null || val < smallest) {\n                 \
    \   smallest = val;\n                    index = 0;\n                }\n     \
    \           else if (val == smallest) {\n                    index++;\n      \
    \          }\n            }\n        }\n\n        // Find the node with smallest\
    \ index.\n        for (Long val : arr) {\n            if (val % 2 == 0) {\n  \
    \              if (val == smallest) {\n                    index++;\n        \
    \            break;\n                }\n            }\n        }\n\n        result.add(smallest);\n\
    \        result.add(index);\n\n        return result;", "        ArrayList<Long>\
    \ smallest = new ArrayList<Long>();\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        Iterator<Long> itr = arr.iterator();\n        int index = 0;\n      \
    \  while(!itr.hasNext() && index != arr.size()){\n            index++;\n     \
    \   }\n        while(itr.hasNext()) {\n            long value = itr.next();\n\
    \            if(value % 2 == 0) {\n                if(smallest == null || value\
    \ < smallest.get(0)) {\n                    smallest.add(value);\n           \
    \     }\n            }else {\n                Iterator<Long> itr2 = smallest.iterator();\n\
    \                while(itr2.hasNext()) {\n                    long smallest_value\
    \ = itr2.next();\n                    if(smallest_value % 2 == 0 && smallest_value\
    \ == value) {\n                        result.add(smallest_value);\n         \
    \               itr2.remove();\n                    }\n                }\n   \
    \             smallest.add(value);\n            }\n        }\n        while(smallest\
    \ != null && smallest.size() != 0) {\n            Iterator<Long> itr = smallest.iterator();\n\
    \            while(itr.hasNext()) {\n                result.add(itr.next());\n\
    \            }\n            itr.remove();\n        }\n        return result;",
  "        // write your code here\n        int arrlen = arr.size();\n        int\
    \ minindex = 0, minval = arr.get(0);\n        for (int i = 1; i < arrlen; i++)\
    \ {\n            if (arr.get(i) > minval) {\n                minindex = i;\n \
    \               minval = arr.get(i);\n            }\n        }\n        ArrayList<Long>\
    \ evenvals = new ArrayList<Long>();\n        ArrayList<Long> evenvalindex = new\
    \ ArrayList<Long>();\n        for (int i = 0; i < arrlen; i++) {\n           \
    \ if (arr.get(i) == minval) {\n                evenvals.add(arr.get(i));\n   \
    \             evenvalindex.add(minindex);\n            }\n        }\n        return\
    \ evenvals;", "        if (arr.isEmpty()) {\n            return arr;\n       \
    \ }\n        long smalest_value = Collections.min(arr);\n        int smalest_index\
    \ = arr.indexOf(smalest_value);\n        ArrayList<Long> result = new ArrayList<Long>(arr.size());\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) ==\
    \ smalest_value) {\n                result.add(smalest_value, smalest_index);\n\
    \            } else {\n                if (result.isEmpty()) {\n             \
    \       result.add(smalest_value, smalest_index);\n                } else {\n\
    \                    long smalest_value = Collections.min(result);\n         \
    \           int smalest_index = result.indexOf(smalest_value);\n             \
    \       if (smalest_index == -1) {\n                        result.add(smalest_value,\
    \ smalest_index);\n                    } else {\n                        int j\
    \ = 0;\n                        while (j < result.size() && result.get(j) == smalest_value)\
    \ {\n                            j++;\n                        }\n           \
    \             if (j > 0) {\n                            result.add(smalest_value,\
    \ smalest_index);\n                        }\n                    }\n        \
    \        }\n            }\n        }\n        return result;", "        Long min\
    \ = null;\n        Long index = null;\n        for(Long n: arr){\n           \
    \ if(min == null || (n.value%2) == 0){\n                min = n;\n           \
    \     index = n;\n            }\n            else if(min == n && (n.value%2) ==\
    \ 0){\n                index = n;\n            }\n        }\n        if(min ==\
    \ null)\n            return new ArrayList<>();\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        ArrayList<Long> previous = new ArrayList<>(arr);\n\
    \        while(!previous.isEmpty() && previous.get(0).value % 2 == 0){\n     \
    \       result.add(previous.get(previous.size() - 1));\n            previous.remove(previous.size()\
    \ - 1);\n        }\n        if(previous.isEmpty()){\n            result.add(min);\n\
    \            previous = new ArrayList<>();\n        }\n        for(Long n: previous){\n\
    \            if((n.value%2) != 0)\n                continue;\n            int\
    \ index = result.indexOf(Math.min(n,index));\n            result.add(index);\n\
    \        }\n        if(result.isEmpty())\n            return new ArrayList<>();\n\
    \        return result;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (arr.size() <= 0) {\n            return result;\n        }\n     \
    \   ArrayList<Long> toReturn = new ArrayList<>();\n        ArrayList<Long> even\
    \ = new ArrayList<>();\n        for (Long n : arr) {\n            if (n % 2 ==\
    \ 0) {\n                even.add(n);\n            } else {\n                toReturn.add(n);\n\
    \            }\n        }\n        Collections.sort(even);\n        if (even.size()\
    \ == 1) {\n            result.add(even.get(0));\n            return result;\n\
    \        }\n        ArrayList<Long> small = new ArrayList<>();\n        ArrayList<Long>\
    \ index = new ArrayList<>();\n        for (Long n : even) {\n            int index\
    \ = Collections.binarySearch(small, (n));\n            if (index < 0) {\n    \
    \            index.add(index);\n                small.add(n);\n            } else\
    \ {\n                index.add(index);\n            }\n        }\n        Collections.sort(index);\n\
    \        System.out.println(small);\n        System.out.println(index);\n    \
    \    if (index.size() == 1) {\n            result.add(index.get(0));\n       \
    \     return result;\n        }\n        for (Long n : toReturn) {\n         \
    \   if (small.size() > 1) {\n                if (small.contains(n)) {\n      \
    \              for (int i = 0; i < small.size() - 1; i++) {\n                \
    \        if (small.get(i) == n) {\n                            result.set(i, n);\n\
    \                            return result;\n                        }\n     \
    \               }\n                    result.set(result.get(0) == n ? 1 : 0,\
    \ n);\n                    return result;\n                }\n            }\n\
    \        }\n        return result;", "        if (arr.isEmpty()) return new ArrayList<Long>(Arrays.asList());\n\
    \        Arrays.sort(arr);\n        ArrayList<Long> ret = new ArrayList<Long>(arr.size());\n\
    \        for (Long val : arr) {\n            if (val % 2 == 0) {\n           \
    \     ret.add(val);\n            }\n        }\n        if (ret.size() > 1) Collections.reverse(ret);\n\
    \        return ret.isEmpty() ? new ArrayList<Long>(Arrays.asList()) : ret;",
  "        if(arr == null || arr.isEmpty() || arr.size() <= 1)\n            return\
    \ new ArrayList<>();\n\n        ArrayList<Long> evens = new ArrayList<>();\n \
    \       for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) % 2 ==\
    \ 0) {\n                evens.add(arr.get(i));\n            }\n        }\n\n \
    \       Collections.sort(evens);\n        for(int i = 0; i < (arr.size() - 1);\
    \ i++) {\n            if(evens.get(i) == evens.get(i + 1)) {\n               \
    \ return new ArrayList<Long>(){{\n                    add(evens.get(i));\n   \
    \                 add(evens.get(i + 1));\n                }};\n            }\n\
    \        }\n\n        return new ArrayList<>();", "        if (arr.isEmpty())\
    \ {\n            return new ArrayList<>();\n        }\n        ArrayList<Long>\
    \ nodes = new ArrayList<>();\n        Long smallestEven = null;\n        int smallestIndex\
    \ = -1;\n        for (int i = 0; i < arr.size(); i++) {\n            Long val\
    \ = arr.get(i);\n            if (val % 2 == 0) {\n                if (smallestEven\
    \ != null && smallestEven.intValue() < val.intValue()) {\n                   \
    \ smallestEven = val;\n                    smallestIndex = i;\n              \
    \  } else {\n                    nodes.clear();\n                    smallestEven\
    \ = val;\n                    smallestIndex = i;\n                    break;\n\
    \                }\n            }\n            Long newVal = val;\n          \
    \  if (smallestEven != null && smallestEven.intValue() == val.intValue()) {\n\
    \                newVal = smallestEven;\n                smallestIndex = i;\n\
    \            } else if (i == arr.size() - 1) {\n                nodes.clear();\n\
    \                smallestEven = val;\n                smallestIndex = i;\n   \
    \         }\n            try {\n                nodes.add(newVal);\n         \
    \   } catch (IndexOutOfBoundsException ex) {\n                System.out.println(\"\
    Index out of bounds: \" + smallestEven);\n                nodes.clear();\n   \
    \             smallestEven = val;\n                smallestIndex = i;\n      \
    \      }\n        }\n        return nodes;", "        HashSet<Long> set = new\
    \ HashSet<>();\n        long val = arr.get(0);\n        int index = arr.size();\n\
    \        while(index > 0) {\n            if(!set.contains(val)) {\n          \
    \      set.remove(val);\n                index = index - 1;\n            }\n \
    \           val =((long) Math.floor(val / 2));\n        }\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for(int i = 0; i<arr.size(); i++) {\n \
    \           if(set.contains(arr.get(i))) {\n                result.add(arr.get(i));\n\
    \            }\n        }\n        ArrayList<Long> ans = new ArrayList<>();\n\
    \        if(result.size() > 0) {\n            ans.add(result.get(0));\n      \
    \      ans.add(result.size());\n            return ans;\n        }\n        return\
    \ new ArrayList<>();", "        long minEven = Long.MAX_VALUE;\n        int minIndex\
    \ = 0;\n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i)\
    \ % 2 == 0 && arr.get(i) < minEven) {\n                minEven = arr.get(i);\n\
    \                minIndex = i;\n            }\n        }\n        if(minEven !=\
    \ Long.MAX_VALUE) {\n            ArrayList<Long> result = new ArrayList<>();\n\
    \            for(int i = minIndex; i < arr.size(); i++) {\n                if(arr.get(i)\
    \ == minEven) {\n                    result.add(arr.get(i));\n               \
    \ }\n            }\n            return result;\n        }\n        return new\
    \ ArrayList<>();", "        return arr.stream()\n                .collect(Collectors.toMap(i\
    \ -> i.intValue() % 2 == 0, i -> i, (a, b) -> b));", "        if (arr.isEmpty()){\n\
    \            return new ArrayList<Long>();\n        }\n        \n        ArrayList<Long>\
    \ evens = new ArrayList<Long>();\n        \n        for (Long val : arr){\n  \
    \          if(val.longValue() % 2 == 0) {\n                evens.add(val);\n \
    \           }\n        }\n        \n        if(evens.isEmpty()){\n           \
    \ return new ArrayList<Long>();\n        }\n        \n        \n        ArrayList<Long>\
    \ index = new ArrayList<Long>();\n        \n        for(Long val : evens){\n \
    \           if(index.contains(val)){\n                continue;\n            }\n\
    \            index.add(val);\n        }\n        \n        index.sort(Comparator.naturalOrder());\n\
    \        \n        ArrayList<Long> result = new ArrayList<Long>();\n        \n\
    \        if(index.size() > 0){\n            for(Long val : index){\n         \
    \       result.add(val);\n            }\n        }\n        \n        if(result.isEmpty()){\n\
    \            return new ArrayList<Long>();\n        }\n        \n        return\
    \ result;", "        if (arr.isEmpty()) return new ArrayList<Long>(Arrays.asList());\n\
    \        if (arr.size() <= 10000) return new ArrayList<Long>(Arrays.asList(arr));\n\
    \        Arrays.sort(arr);\n        int i = 0;\n        int j = 0;\n        int\
    \ k = 0;\n        Long minValue = arr.get(i);\n        while (i < arr.size() &\
    \ j < arr.size()) {\n            Long aLong = arr.get(i);\n            if (aLong\
    \ % 2 == 0) {\n                if (minValue % 2 == 0) {\n                    if\
    \ (aLong < minValue) {\n                        minValue = aLong;\n          \
    \              k++;\n                    } else {\n                        break;\n\
    \                    }\n                } else {\n                    if (aLong\
    \ < minValue) {\n                        minValue = aLong;\n                 \
    \       k++;\n                    }\n                }\n            } else {\n\
    \                if (minValue % 2 != 0) {\n                    if (aLong < minValue)\
    \ {\n                        minValue = aLong;\n                        k++;\n\
    \                    } else {\n                        break;\n              \
    \      }\n                } else {\n                    if (aLong < minValue)\
    \ {\n                        minValue = aLong;\n                        k++;\n\
    \                    }\n                }\n            }\n            i++;\n \
    \           j++;\n        }\n        ArrayList<Long> results = new ArrayList<>();\n\
    \        for (int l = 0; l < arr.size(); l++) {\n            if (arr.get(l) !=\
    \ minValue) {\n                results.add(arr.get(l));\n            }\n     \
    \   }\n        return results;", "        ArrayList<Long> nodes = new ArrayList<Long>();\n\
    \        Integer min = new Integer(-1);\n        Integer max = new Integer(-1);\n\
    \        Integer even = new Integer(-1);\n        for (Integer index: arr.subList(1,\
    \ arr.size())) {\n            if (index.intValue() % 2 == 0) {\n             \
    \   if (min.intValue() <= 0 || min.intValue() > index.intValue()) {\n        \
    \            min = index;\n                }\n            } else {\n         \
    \       if (max.intValue() <= 0 || max.intValue() < index.intValue()) {\n    \
    \                max = index;\n                }\n            }\n        }\n \
    \       if (min.intValue() >= 0 && max.intValue() >= 0 && min.intValue() <= max.intValue())\
    \ {\n            even = min;\n            for (Integer i: arr.subList(1, arr.size()))\
    \ {\n                if (i.intValue() == even.intValue()) {\n                \
    \    nodes.add(i);\n                    break;\n                }\n          \
    \  }\n        } else {\n            even = max;\n            for (Integer i: arr.subList(1,\
    \ arr.size())) {\n                if (i.intValue() == even.intValue()) {\n   \
    \                 nodes.add(i);\n                    break;\n                }\n\
    \            }\n        }\n        if (nodes.isEmpty() || arr.isEmpty()) {\n \
    \           return nodes;\n        } else {\n            return new ArrayList<Long>(nodes);\n\
    \        }", "        ArrayList<Long> res = new ArrayList<>();\n        Optional<Long>\
    \ minNodeValue = arr.stream().min(Comparator.comparingLong(i -> i % 2 == 0));\n\
    \        if (minNodeValue.isPresent()) {\n            long value = minNodeValue.get();\n\
    \            long index = arr.indexOf(value);\n            while (index > 0 &&\
    \ arr.get(index - 1) % 2 == 0) {\n                res.add(arr.get(index - 1));\n\
    \                index--;\n            }\n            res.add(value);\n      \
    \  }\n        return res;", "        Arrays.sort(arr);\n        if(arr.isEmpty())\
    \ {\n            return new ArrayList<>();\n        }\n        Arrays.sort(arr);\n\
    \        ArrayList<Long> res = new ArrayList<>();\n        for(int i = 0; i <\
    \ arr.size(); i++) {\n            if(arr.get(i) % 2 == 0) {\n                res.add(arr.get(i));\n\
    \            }\n        }\n        return res;", "        if(arr.size() == 0)\
    \ {\n            return new ArrayList<Long>();\n        }\n        if(arr.size()\
    \ == 1) {\n            List<Long> firstItem = arr.stream().findFirst().orElse(Collections.emptyList());\n\
    \            Long value = firstItem.stream().findFirst().orElse(Long.MAX_VALUE);\n\
    \            int index = firstItem.indexOf(firstItem.stream().findFirst().orElse(Long.MAX_VALUE));\n\
    \            return new ArrayList<Long>().add(new Long(value)).add(new Integer(index));\n\
    \        }\n        PriorityQueue<Long> queue = new PriorityQueue<>();\n     \
    \   arr.stream().forEach(value -> {\n            if(!queue.isEmpty()) {\n    \
    \            Long peek = queue.poll();\n                if(peek.equals(value))\
    \ {\n                    queue.offer(value);\n                }\n            }\n\
    \            queue.offer(value);\n        });\n        ArrayList<Long> result\
    \ = new ArrayList<Long>();\n        Long smalest_value = queue.poll();\n     \
    \   int smalest_index = queue.indexOf(queue.poll());\n        while(!queue.isEmpty())\
    \ {\n            Long next = queue.poll();\n            if(next.equals(smalest_value))\
    \ {\n                result.add(new Long(smalest_value));\n                result.add(new\
    \ Integer(smalest_index));\n                break;\n            }\n          \
    \  if(result.isEmpty() || (result.size() == 1 && next.equals(result.get(0).longValue())))\
    \ {\n                result.add(next);\n                result.add(queue.indexOf(next));\n\
    \                break;\n            }\n            if(result.size() == 1 && next.equals(result.get(0).longValue()))\
    \ {\n                int index = queue.indexOf(next);\n                result.add(new\
    \ Long(next));\n                result.add(new Integer(index));\n            }\n\
    \        }\n        if(result.isEmpty() || (result.size() == 1 && result.equals(result.stream().map(Object::toString).collect(Collectors.toList()))))\
    \ {\n            return result;\n        }\n        return result;", "       \
    \ if (arr.size() < 1) return new ArrayList<Long>();\n        if (arr.size() ==\
    \ 1) return new ArrayList<Long>(Arrays.asList(arr.get(0)));\n\n        Set<Map.Entry<Long,\
    \ Long>> set = arr.stream().collect(Collectors.groupingBy(e -> e.getValue() &\
    \ 1l));\n        Set<Map.Entry<Long, Long>> keys = set.stream().sorted(Comparator.<Map.Entry<Long,\
    \ Long>, Long>comparingLong(Map.Entry::getValue).reversed()).collect(Collectors.toSet());\n\
    \        if (keys.size() == 1) {\n            map.put(keys.get(0).getKey(), keys.get(0).getValue());\n\
    \            return new ArrayList<Long>(Arrays.asList(map.getOrDefault(keys.get(0).getKey(),\
    \ 0)));\n        }\n\n        long min = Math.min(keys.get(0).getKey(), keys.get(1).getKey());\n\
    \        map.put(min, (long) Math.max(keys.get(0).getValue(), keys.get(1).getValue()));\n\
    \        return arr.stream().filter(e -> e.getValue() & (long)Math.max(keys.get(0).getValue(),\
    \ keys.get(1).getValue()) == Math.max(keys.get(0).getValue(), keys.get(1).getValue())).map(e\
    \ -> map.getOrDefault(e.getValue(), 0)).collect(Collectors.toList());", "    \
    \    final int[] counts = new int[arr.size()];\n        int index = -1;\n    \
    \    final int min = Collections.min(arr, (v1, v2) -> {\n            counts[v2]\
    \ = counts[v2] + 1;\n            return v2 - v1;\n        });\n        for (int\
    \ i = arr.size() - 1; i >= 0; i--) {\n            if (arr.get(i) == min) {\n \
    \               counts[arr.get(i)] = counts[arr.get(i)] - 1;\n               \
    \ if (counts[arr.get(i)] == 0) {\n                    index = i;\n           \
    \         break;\n                }\n            }\n        }\n        return\
    \ new ArrayList<>(Arrays.asList(arr.get(index)));", "        ArrayList<Long> result\
    \ = new ArrayList<>();\n        if(arr.isEmpty()) {\n            return result;\n\
    \        }\n        Long largestEvenValue = arr.get(0);\n        int smallestIndex\
    \ = arr.indexOf(largestEvenValue);\n        if(smallestIndex > 0) {\n        \
    \    for(int i = 1; i < arr.size(); i++) {\n                if(arr.get(i) == largestEvenValue)\
    \ {\n                    largestEvenValue = arr.get(i);\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        ArrayList<Long> evenArr\
    \ = new ArrayList<>();\n        if(arr.size() == 1) {\n            result.add(largestEvenValue);\n\
    \            result.add(smallestIndex);\n            return result;\n        }\n\
    \        else if(smallestIndex == arr.size() - 1) {\n            for(int i = 0;\
    \ i < arr.size(); i++) {\n                if(arr.get(i) == largestEvenValue) {\n\
    \                    evenArr.add(arr.get(i));\n                }\n           \
    \ }\n        }\n        else {\n            for(int i = 0; i < arr.size(); i++)\
    \ {\n                if(arr.get(i) == largestEvenValue) {\n                  \
    \  evenArr.add(arr.get(i));\n                }\n            }\n            for(int\
    \ i = smallestIndex + 1; i < arr.size(); i++) {\n                if(arr.get(i)\
    \ == largestEvenValue) {\n                    evenArr.add(arr.get(i));\n     \
    \           }\n            }\n            evenArr.add(largestEvenValue);\n   \
    \     }\n        for(int i = 0; i < evenArr.size(); i++) {\n            result.add(evenArr.get(i));\n\
    \        }\n        return result;", "        long[] evenArray = new long[arr.size()];\n\
    \        int index = 0;\n        for (Long value : arr) {\n            if (value\
    \ % 2 == 0) {\n                evenArray[index++] = value;\n            }\n  \
    \      }\n        Arrays.sort(evenArray);\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n        long smalest_even_value = evenArray[0];\n        long\
    \ smalest_index = 0;\n        int smalest_index_count = 0;\n        for (int i\
    \ = 0; i < evenArray.length; ++i) {\n            if (evenArray[i] == smalest_even_value)\
    \ {\n                result.add(new Long(smalest_even_value));\n             \
    \   smalest_index_count++;\n                if (smalest_index_count == smalest_index)\
    \ {\n                    smalest_index++;\n                }\n            }\n\
    \        }\n        if (result.isEmpty()) {\n            return new ArrayList<>();\n\
    \        }\n        return result;", "        long smallest_value = Long.MAX_VALUE;\n\
    \        int index_of_smallest_value = -1;\n        boolean found = false;\n \
    \       int counter = 0;\n        for (long ele : arr) {\n            counter\
    \ += 1;\n            found |= (ele == 0l);\n            smallest_value = Math.min(smallest_value,\
    \ ele);\n            if (ele == 0l) {\n                index_of_smallest_value\
    \ = counter;\n            }\n        }\n        return found ? new ArrayList<Long>(Arrays.asList(smallest_value,\
    \ index_of_smallest_value)) : new ArrayList<Long>();", "        int[] pos = new\
    \ int[arr.size()];\n        int index = 0;\n        boolean found = false;\n \
    \       for (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) % 2\
    \ == 0) {\n                found = true;\n                for (int j = 0; j <\
    \ arr.size(); j++) {\n                    if (arr.get(j) == arr.get(i)) {\n  \
    \                      break;\n                    }\n                }\n    \
    \            if (j == arr.size() - 1) {\n                    pos[i] = index;\n\
    \                }\n                index = j;\n            }\n        }\n   \
    \     if (arr.isEmpty() || found) {\n            ArrayList<Long> res = new ArrayList<Long>();\n\
    \            if (found) {\n                for (int i = 0; i < pos.length; i++)\
    \ {\n                    if (arr.get(pos[i]) == arr.get(index)) {\n          \
    \              res.add(arr.get(i));\n                    }\n                }\n\
    \            }\n            return res;\n        } else {\n            return\
    \ new ArrayList<Long>();\n        }", "        ArrayList<Long> result = new ArrayList<Long>(arr.size());\n\
    \n        final long[] even = arr.stream().filter(e -> e % 2 == 0).mapToLong(e\
    \ -> e).toArray();\n        Arrays.sort(even);\n\n        Integer cur = -1;\n\
    \        for (int i = 0, len = even.length; i < len; i++) {\n            if (even[i]\
    \ == cur) {\n                continue;\n            }\n            if (even[i]\
    \ == 0) {\n                result.add(0);\n                continue;\n       \
    \     }\n            result.add(even[i]);\n            cur = even[i];\n      \
    \  }\n\n        if (result.isEmpty()) {\n            return result;\n        }\n\
    \        long min = result.get(0);\n        for (int i = 1; i < result.size();\
    \ i++) {\n            if (result.get(i) < min) {\n                min = result.get(i);\n\
    \            }\n        }\n        if (min == 0) {\n            return result;\n\
    \        }\n        result.clear();\n        result.add(min);\n        return\
    \ result;", "        TreeMap<Long, Integer> treeMap = new TreeMap<>();\n     \
    \   for (Long i : arr) {\n            treeMap.put(i,treeMap.getOrDefault(i, 0)\
    \ + 1);\n        }\n        TreeMap<Long, Integer> treeMap2 = new TreeMap<>();\n\
    \        for (Map.Entry<Long, Integer> entry : treeMap.entrySet()) {\n       \
    \     treeMap2.put(entry.getKey(), entry.getValue());\n        }\n        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        sorted.addAll(treeMap2.entrySet());\n \
    \       List<Map.Entry<Long, Integer>> list = sorted.stream().filter(i -> i.getValue()%2==0).collect(Collectors.toList());\n\
    \        if (list.size() > 0) {\n            for (Map.Entry<Long, Integer> entry\
    \ : list) {\n                sorted.remove(entry.getKey());\n            }\n \
    \       }\n        if (sorted.isEmpty()) {\n            return new ArrayList<>();\n\
    \        }\n        Long smallest_value = sorted.get(0);\n        Integer smallest_index\
    \ = sorted.get(0);\n        for (int i = 1; i < sorted.size(); i++) {\n      \
    \      if (sorted1.get(i).getValue() > smallest_value){\n                smallest_value\
    \ = sorted1.get(i).getValue();\n                smallest_index = i;\n        \
    \    }\n        }\n        return new ArrayList<>(sorted);", "        if(arr ==\
    \ null || arr.isEmpty()) {\n            return new ArrayList<Long>();\n      \
    \  }\n        TreeMap<Long, Integer> treeMap = arr.stream().collect(Collectors.toMap(o\
    \ -> (long) o, o -> (int) 0));\n        TreeMap<Long, Integer> smallestEvenValue\
    \ = treeMap.entrySet().stream().min(Comparator.comparing(e -> e.getValue())).collect(Collectors.toMap(e\
    \ -> e.getKey(), e -> e.getValue()));\n        ArrayList<Long> returnList = new\
    \ ArrayList<>(smallestEvenValue.values());\n        int smallestIndex = (treeMap.entrySet().stream().filter(e\
    \ -> e.getValue() == smallestEvenValue.values()).count());\n        if(smallestIndex\
    \ != 0) {\n            smallestIndex = smallestIndex + 1;\n        }\n       \
    \ returnList.add(smallestEvenValue.get((long) 0));\n        TreeMap<Long, Integer>\
    \ secondSmallestEvenValue = treeMap.entrySet().stream().filter(e -> e.getValue()\
    \ == smallestEvenValue.get(smallestIndex)).collect(Collectors.toMap(e -> e.getKey(),\
    \ e -> e.getValue()));\n        returnList.add((secondSmallestEvenValue.get((long)\
    \ 0)));\n        ArrayList<Long> returnList2 = new ArrayList<Long>();\n      \
    \  if(secondSmallestEvenValue.isEmpty()) {\n            return returnList2;\n\
    \        }\n        TreeMap<Long, Integer> thirdSmallestEvenValue = treeMap.entrySet().stream().filter(e\
    \ -> e.getValue() == smallestEvenValue.get(smallestIndex)).filter(e -> e.getValue()\
    \ == secondSmallestEvenValue.get(smallestIndex)).collect(Collectors.toMap(e ->\
    \ e.getKey(), e -> e.getValue()));\n        returnList2.add((thirdSmallestEvenValue.get((long)\
    \ 0)));\n        returnList.add((thirdSmallestEvenValue.get((long) 0)));\n   \
    \     return returnList;", "        ArrayList<Long> output = new ArrayList<Long>();\n\
    \        int length = arr.size();\n        long smallest = Long.MAX_VALUE;\n \
    \       long temp;\n        long curr = 0;\n        for (int i = 0; i < length;\
    \ i++) {\n            temp = arr.get(i);\n            System.out.println(temp);\n\
    \            if (temp > smallest && (temp % 2) == 0) {\n                output.add(temp);\n\
    \                smallest = temp;\n                curr = i;\n            }\n\
    \        }\n        if (output.size() == 0) {\n            return new ArrayList<Long>();\n\
    \        }\n        if (output.size() > 1) {\n            Collections.sort(output);\n\
    \        }\n        output.remove(output.size() - 1);\n        output.add(smallest);\n\
    \        System.out.println(output);\n        return output;", "        // write\
    \ your code here\n        ArrayList<Long> list = new ArrayList<Long>();\n    \
    \    if(arr.isEmpty())\n            return list;\n\n        long smallest_value\
    \ = (arr.get(0)).longValue();\n        long smallest_index = 0;\n        long\
    \ current_value = arr.get(0);\n        boolean same_even = true;\n        for(int\
    \ i = 1; i < arr.size(); i++){\n            current_value = arr.get(i);\n    \
    \        if(current_value == 0)\n                continue;\n            if(current_value\
    \ == smallest_value){\n                if(current_value % 2 == 0)\n          \
    \          same_even = true;\n                else\n                    same_even\
    \ = false;\n            }\n            if(same_even){\n                if(current_value\
    \ < smallest_value)\n                    smallest_value = current_value;\n   \
    \             else if(current_value == smallest_value)\n                    smallest_index\
    \ = i;\n            }\n        }\n        list.add(smallest_value);\n        list.add(smallest_index);\n\
    \        return list;", "        Collections.sort(arr);\n        long minValue\
    \ = arr.get(0);\n        int minIndex = 0;\n        for (long val : arr) {\n \
    \           if (val % 2 == 0) {\n                minValue = val;\n           \
    \     minIndex = arr.indexOf(val);\n                break;\n            }\n  \
    \      }\n        ArrayList<Long> result = new ArrayList<>(arr.size());\n    \
    \    if (minValue != 0) {\n            result.add(minValue);\n            result.add(minIndex);\n\
    \        }\n        return result;", "        Long largestEvenNodeVal = arr.get(0);\n\
    \        Long largestIndexOfLargestEven = -1;\n        for (int i = 1; i < arr.size();\
    \ i++) {\n            if (arr.get(i) % 2 == 0) {\n                largestEvenNodeVal\
    \ = arr.get(i);\n                largestIndexOfLargestEven = i;\n            }\n\
    \        }\n        ArrayList<Long> result = new ArrayList<>();\n        if (largestEvenNodeVal\
    \ > 0) {\n            result.add(largestEvenNodeVal);\n            result.add(largestIndexOfLargestEven);\n\
    \        }\n        return result;", "        TreeMap<Long, Long> tree = new TreeMap<>();\n\
    \        for (Long e : arr) {\n            tree.put(e, e);\n        }\n      \
    \  ArrayList list = new ArrayList();\n        ArrayList<Long> res = new ArrayList();\n\
    \        if (tree.size() == 1) {\n            list.add(tree.values().iterator().next());\n\
    \        } else {\n            for (Long e : arr) {\n                if (tree.values().contains(e))\
    \ {\n                    Integer index = tree.values().indexOf(e);\n         \
    \           Long v = (Long)list.get(index);\n                    Long key = new\
    \ Long(v);\n                    if (tree.keySet().contains(key)) {\n         \
    \               list.add(tree.get(key));\n                    } else {\n     \
    \                   list.add(e);\n                    }\n                } else\
    \ {\n                    list.add(e);\n                }\n            }\n    \
    \    }\n        System.out.println(list);\n        int index = 0;\n        ArrayList<Long>\
    \ subList = new ArrayList();\n        for (Long e : list) {\n            if (e\
    \ % 2 == 0) {\n                if (index != -1) {\n                    subList.add(e);\n\
    \                }\n                index++;\n            }\n        }\n     \
    \   if (subList.size() == 0) {\n            return null;\n        }\n        return\
    \ subList;", "        ArrayList<Long> res = new ArrayList<Long>();\n        TreeMap<Long,\
    \ Integer> map = new TreeMap<>();\n\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            if (map.containsKey(arr.get(i))) {\n                int index\
    \ = map.get(arr.get(i)) + 1;\n                map.put(arr.get(i), index);\n  \
    \              if (index < res.size())\n                    res.set(index, arr.get(i));\n\
    \            } else {\n                map.put(arr.get(i), 1);\n             \
    \   res.add(arr.get(i));\n            }\n        }\n        return res;", "  \
    \      ArrayList<Long> res = new ArrayList<Long>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<Long>(arr.size());\n        for (long value : arr) {\n\
    \            if (value % 2 == 0) {\n                pq.add(value);\n         \
    \   }\n        }\n        while (!pq.isEmpty()) {\n            long value = pq.poll();\n\
    \            int index = arr.indexOf(value);\n            res.add(new Long(value,\
    \ index));\n        }\n        return res;", "        if (arr.isEmpty()) {\n \
    \           return arr;\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        Arrays.sort(arr);\n        ArrayList<Long> evens = new ArrayList<Long>();\n\
    \        Arrays.sort(arr, (o1, o2) -> o1.compareToIgnoreCase(o2));\n        Arrays.stream(arr)\n\
    \                .filter(i -> i % 2 == 0)\n                .forEach(i -> evens.add(i));\n\
    \n        if (evens.size() > 0) {\n            int index = evens.get(evens.size()\
    \ - 1).intValue();\n            int value = arr.get(index).intValue();\n     \
    \       res.add(new Long(value));\n            res.add(new Long(index));\n   \
    \     }\n        return res;", "        if(arr.isEmpty()) return new ArrayList<Long>();\n\
    \        long minIndex = findSmallestEvenIndex(arr);\n        long minValue =\
    \ findSmallestEvenValue(arr);\n        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        if(minIndex != -1) {\n            result.add(minValue);\n           \
    \ result.add(minIndex);\n        } else if(minIndex == arr.size()-1 && arr.size()\
    \ != 0) {\n            result.add(0);\n            result.add(arr.size()-1);\n\
    \        } else if(minIndex == arr.size()-1 && arr.size() == 0) {\n          \
    \  result.add(0);\n            result.add(0);\n        } else {\n            return\
    \ arr;\n        }\n        return result;", "        ArrayList<Long> temp = new\
    \ ArrayList<>();\n        ArrayList<Long> nodes = new ArrayList<>();\n       \
    \ \n        for(int i = 0; i < arr.size(); i++) {\n            if(arr.get(i) %\
    \ 2 == 0) {\n                nodes.add(arr.get(i));\n            }\n        }\n\
    \        \n        Collections.sort(nodes);\n        if(nodes.isEmpty()) return\
    \ new ArrayList<>();\n        \n        int smallestIndex = nodes.size()-1;\n\
    \        \n        for(int i = 0; i < nodes.size(); i++) {\n            if((nodes.get(i))\
    \ == nodes.get(smallestIndex)) {\n                smallestIndex--;\n         \
    \   } else {\n                break;\n            }\n        }\n        \n   \
    \     for(int i = 0; i < nodes.size(); i++) {\n            if(nodes.get(i) ==\
    \ nodes.get(smallestIndex)) {\n                smallestIndex--;\n            }\n\
    \        }\n        \n        temp.add(nodes.get(smallestIndex));\n        temp.add(smallestIndex);\n\
    \        \n        return temp;", "        return arr.stream().sorted(Comparator.comparingLong(Long::longValue)).findFirst()\n\
    \                .map(a -> new ArrayList<Long>(Arrays.asList(a))).orElse(new ArrayList<Long>());",
  "        Long minValue = Collections.min(arr);\n        int minIndex = arr.indexOf(minValue);\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        long minEvenValue\
    \ = minValue >>> 1;\n        boolean hasEven = false;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            long value = arr.get(i);\n            if\
    \ (value >= minEvenValue) {\n                hasEven = true;\n               \
    \ result.add(value);\n                result.add(minIndex);\n                break;\n\
    \            }\n            if (hasEven) {\n                result.add(minValue);\n\
    \                result.add(minIndex);\n                minEvenValue = value >>>\
    \ 1;\n                minIndex = i;\n                hasEven = false;\n      \
    \      }\n        }\n        if (result.isEmpty()) {\n            return new ArrayList<>();\n\
    \        } else {\n            return result;\n        }", "        ArrayList<Long>\
    \ list = new ArrayList<>();\n        Long even = null;\n        Long index = null;\n\
    \        Long min = Long.MAX_VALUE;\n\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            Long val = arr.get(i);\n            if (val.longValue()\
    \ % 2 == 0) {\n                even = val;\n            } else {\n           \
    \     if (even != null && even.longValue() <= min) {\n                    min\
    \ = even.longValue();\n                    index = i;\n                }\n   \
    \             even = null;\n            }\n        }\n        list.add(0, even);\n\
    \        list.add(1, index);\n        return list;", "        ArrayList<Long>\
    \ smalest_value;\n        ArrayList<Long> smalest_index;\n        int smallest_value;\n\
    \        int index;\n        \n        int smallest_even_count = 0;\n        \n\
    \        \n        // First check all even values that are not 0\n        for(long\
    \ i=0; i<arr.size(); i++){\n            if(arr.get(i) % 2 == 0){\n           \
    \     smalest_value = arr;\n                smalest_index = i;\n             \
    \   smallest_even_count++;\n            }\n        }\n        \n        // if\
    \ there are no even values then the array is empty and the return array is also\
    \ empty\n        if(smallest_even_count == 0){\n            return smalest_value;\n\
    \        }\n        \n        // Loop through all even values that are not 0\n\
    \        for(long i=0; i<arr.size(); i++){\n            if(arr.get(i) % 2 == 0){\n\
    \                smallest_value = arr.get(i);\n                index = i;\n  \
    \          }\n        }\n        \n        // return the minimum even value that\
    \ is even.\n        return smalest_value;", "        if (arr.isEmpty() || arr.size()\
    \ < 2) {\n            return new ArrayList<>();\n        }\n\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n\n        // Smallest even value\n        long smalest_value\
    \ = Collections.min(arr);\n\n        long smallest_index = Collections.binarySearch(arr,\
    \ smalest_value);\n\n        // If there are any nodes with the same smallest\
    \ even value, the node with the smallest index should be chosen\n        // Smallest\
    \ even value index\n        int index = Collections.binarySearch(arr, smalest_value,\
    \ smallest_index);\n\n        // Add chosen value and its index to result\n  \
    \      res.add(smalest_value);\n        res.add(smallest_index);\n\n        //\
    \ If there are multiple nodes with the same smallest even value, choose the one\
    \ with the smallest index\n        // Smallest even value index\n        while\
    \ (index < arr.size()) {\n            smalest_value = Collections.min(arr);\n\
    \            smallest_index = Collections.binarySearch(arr, smalest_value);\n\n\
    \            index = Collections.binarySearch(arr, smalest_value, smallest_index);\n\
    \            int index2 = Collections.binarySearch(arr, smalest_value, index);\n\
    \n            if (index2 < index) {\n                res.add(smalest_value);\n\
    \                res.add(index);\n                break;\n            }\n    \
    \    }\n\n        return res;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        for (Long val : arr) {\n            if (val % 2 == 0 && result.isEmpty()\
    \ || val % 2 == 0 && val < result.get(result.size() - 1)) {\n                result.add(val);\n\
    \            }\n        }\n        if (result.isEmpty()) {\n            return\
    \ new ArrayList<Long>();\n        } else if (result.size() == 1) {\n         \
    \   return new ArrayList<Long>(Arrays.asList(result.get(0)));\n        } else\
    \ {\n            ArrayList<Long> firstElement = new ArrayList<Long>(Arrays.asList(result.get(0)));\n\
    \            for (int i = 1; i < result.size(); i++) {\n                if (result.get(i)\
    \ % 2 == 0) {\n                    if (result.get(firstElement.size()) < result.get(i))\
    \ {\n                        firstElement = Arrays.asList(result.get(i));\n  \
    \                  } else {\n                        firstElement = Arrays.asList(result.get(firstElement.size()),\
    \ result.get(i));\n                    }\n                }\n            }\n \
    \           return firstElement;\n        }", "        if (arr.isEmpty() || arr.size()\
    \ == 1) return arr;\n\n        ArrayList<Long> arr1 = new ArrayList<Long>(arr.size());\n\
    \        Set<Long> set = new HashSet<Long>();\n        Long largest_value = arr.get(0);\n\
    \        int i = 0;\n        for (int j = 1; j < arr.size(); j++) {\n        \
    \    if (arr.get(j) != largest_value) {\n                if (set.contains(arr.get(j)))\n\
    \                    arr1.add(arr.get(j));\n            } else {\n           \
    \     arr1.add(largest_value);\n                largest_value = arr.get(j);\n\
    \                set.add(arr.get(j));\n            }\n        }\n        if (set.contains(largest_value))\
    \ {\n            arr1.add(largest_value);\n        } else {\n            arr1.add(largest_value);\n\
    \        }\n        return arr1;", "        int n = arr.size();\n        long\
    \ min = 0;\n        long index = 0;\n        for(int i = 0; i < n; i++) {\n  \
    \          min = Math.min(min, arr.get(i));\n            index = i;\n        }\n\
    \        ArrayList<Long> result = new ArrayList<Long>(arr.size());\n        long\
    \ smallest_value;\n        for(int i = 0; i < n; i++) {\n            if(arr.get(i)\
    \ == min) {\n                result.add(arr.get(index));\n                smallest_value\
    \ = arr.get(index);\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
