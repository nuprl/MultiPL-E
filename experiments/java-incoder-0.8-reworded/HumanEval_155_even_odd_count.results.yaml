language: java
name: HumanEval_155_even_odd_count
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ sum = 0;\n        while (num > 0) {\n            sum = sum + num % 10;\n   \
    \         num = num / 10;\n        }\n        sum = (sum % 2 == 0 ? sum : -sum);\n\
    \        num = sum / 2;\n        sum = sum - num;\n        long even = sum / 10;\n\
    \        long odd = sum - even * 10;\n        return Pair.of(even, odd);\n   \
    \ }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpccqfpup3.java:26: error: cannot find symbol\n        return Pair.of(even,\
    \ odd);\n                   ^\n  symbol:   method of(long,long)\n  location: class\
    \ Pair\n1 error\n"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ odd = 0, even = 0;\n        long temp;\n        temp = num;\n\n        while\
    \ (temp != 0) {\n            if (temp & 1 == 1) {\n                even++;\n \
    \           }\n            odd = (odd << 1) + 1;\n            temp >>>= 1;\n \
    \       }\n\n        return Pair.with(even, odd);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n\
    \    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcfus51gm.java:21: error: bad operand types for binary operator\
    \ '&'\n            if (temp & 1 == 1) {\n                     ^\n  first type:\
    \  long\n  second type: boolean\n1 error\n"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ count = 0;\n        if (num < 0) {\n            num = -num;\n        }\n   \
    \     while (num != 0) {\n            count++;\n            num = num / 10;\n\
    \        }\n        return Pair.with(1, count);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n\
    \    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdudxr1yv.java:24: error: incompatible types: inference variable\
    \ A has incompatible bounds\n        return Pair.with(1, count);\n           \
    \             ^\n    equality constraints: Long\n    lower bounds: Integer\n \
    \ where A,B are type-variables:\n    A extends Object declared in method <A,B>with(A,B)\n\
    \    B extends Object declared in method <A,B>with(A,B)\n1 error\n"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if(num\
    \ == 0)\n            return Pair.of(1l, 1l);\n        long evenDigits = 0l; //\
    \ number of even digits (can be 0l but that's ok)\n        long oddDigits = 0l;\
    \ // number of odd digits (can be 0l but that's ok)\n\n        long digit = num\
    \ % 10; // get the last digit\n        if(digit == 0) // only odd digits are even\n\
    \            return Pair.of(1l, 1l);\n        while(num > 0) {\n            digit\
    \ = num % 10; // get the last digit\n            oddDigits += digit == 0 ? 1 :\
    \ 0; // increment the odd digits\n            num /= 10; // move to the last digit\n\
    \        }\n\n        // if the last digit is even, there are an even number of\
    \ digits (1l)\n        // otherwise, there are an odd number of digits (2l)\n\
    \        evenDigits += digit == 0 ? 1l : 0l; // increment the even digits\n\n\
    \        // return the pair\n        return Pair.of(evenDigits, oddDigits);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9q5pqb4j.java:17: error: cannot find symbol\n            return\
    \ Pair.of(1l, 1l);\n                       ^\n  symbol:   method of(long,long)\n\
    \  location: class Pair\n/tmp/tmp9q5pqb4j.java:23: error: cannot find symbol\n\
    \            return Pair.of(1l, 1l);\n                       ^\n  symbol:   method\
    \ of(long,long)\n  location: class Pair\n/tmp/tmp9q5pqb4j.java:35: error: cannot\
    \ find symbol\n        return Pair.of(evenDigits, oddDigits);\n              \
    \     ^\n  symbol:   method of(long,long)\n  location: class Pair\n3 errors\n"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ len = 0;\n        while (num /= 10l) ++len;\n        int count = 0;\n      \
    \  for (int i = len-1; i >= 0; --i) {\n            long digit = num % 10;\n  \
    \          if (digit % 2 == 0)\n                ++count;\n            num = num\
    \ / 10;\n        }\n        return Pair.with(0, count);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbv9342um.java:17: error: incompatible types: long cannot be converted\
    \ to boolean\n        while (num /= 10l) ++len;\n                   ^\n/tmp/tmpbv9342um.java:25:\
    \ error: incompatible types: inference variable A has incompatible bounds\n  \
    \      return Pair.with(0, count);\n                        ^\n    equality constraints:\
    \ Long\n    lower bounds: Integer\n  where A,B are type-variables:\n    A extends\
    \ Object declared in method <A,B>with(A,B)\n    B extends Object declared in method\
    \ <A,B>with(A,B)\n2 errors\n"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        //\
    \ Write your code here.\n    }\n    public static void main(String[] args) {\n\
    \    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6bqtdsyv.java:17: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976204
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0)\n            throw new IllegalArgumentException();\n        long digitSum\
    \ = num;\n        long evenCount = 0;\n        long oddCount = 0;\n        while\
    \ (num != 0) {\n            digitSum /= 10;\n            if (digitSum == 0) {\n\
    \                evenCount++;\n                digitSum = 1;\n            } else\
    \ {\n                digitSum -= digitSum / 10;\n                digitSum -= digitSum\
    \ / 10;\n                digitSum -= digitSum / 10;\n                digitSum\
    \ -= digitSum / 10;\n                digitSum -= digitSum / 10;\n            \
    \    digitSum -= digitSum / 10;\n                digitSum -= digitSum / 10;\n\
    \                digitSum -= digitSum / 10;\n                digitSum -= digitSum\
    \ / 10;\n                digitSum -= digitSum / 10;\n                digitSum\
    \ -= digitSum / 10;\n                digitSum -= digitSum / 10;\n            \
    \    digitSum -= digitSum / 10;\n                digitSum -= digitSum / 10;\n\
    \                digitSum -= digitSum / 10;\n                digitSum -= digitSum\
    \ / 10;\n                digitSum -= digitSum / 10;\n                digitSum\
    \ -= digitSum / 10;\n                digitSum -= digitSum / 10;\n            \
    \    digitSum -= digitSum / 10;\n                digitSum -= digitSum / 10;\n\
    \                digitSum -= digitSum / 10;\n                digitSum -= digitSum\
    \ / 10;\n                digitSum -= digitSum / 10;\n                digitSum\
    \ -= digitSum / 10;\n                digitSum -= digitSum / 10;\n            \
    \    digitSum -= digitSum / 10;\n                digitSum -= digitSum / 10;\n\
    \                digitSum -= digitSum / 10;\n                digitSum -= digitSum\
    \ / 10;\n                digitSum -= digitSum / 10;\n                digitSum\
    \ -= digitSum / 10;\n                digitSum -= digitSum / 10;\n            \
    \    digitSum -= digitSum / 10;\n                digitSum -= digitSum / 10;\n\
    \                digitSum -= digitSum / 10;\n                digitSum -= digitSum\
    \ / 10;\n                digitSum -= digitSum / 10;\n                digitSum\
    \ -= digitSum / 10;\n                digitSum -= digitSum / 10;\n            \
    \    digitSum -= digitSum / 10;\n                digitSum -= digitSum / 10;\n\
    \                digitSum -= digitSum / 10;\n                digitSum -= digitSum\
    \ / 10;\n                digitSum -= digitSum / 10;\n                digitSum\
    \ -= digitSum / 10;\n                digitSum -= digitSum / 10;\n            \
    \    digitSum -= digitSum / 10;\n                digitSum -= digitSum / 10;\n\
    \                digitSum -= digitSum / 10;\n\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ozvtf56.java:79: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1659976292
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ count = 0;\n        int evenDigits = 0;\n        int oddDigits = 0;\n      \
    \  long temp;\n        int remainder;\n        while (count < num) {\n       \
    \     temp = num % 10;\n            num = num / 10;\n            if (temp % 2\
    \ == 0) {\n                evenDigits++;\n            } else {\n             \
    \   oddDigits++;\n            }\n            count++;\n        }\n        temp\
    \ = num;\n        num = num % 10;\n        if (temp % 2 == 0) {\n            evenDigits++;\n\
    \        } else {\n            oddDigits++;\n        }\n        return Pair.with(evenDigits,\
    \ oddDigits);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd88c_3ax.java:38: error: incompatible types: inference variable\
    \ A has incompatible bounds\n        return Pair.with(evenDigits, oddDigits);\n\
    \                        ^\n    equality constraints: Long\n    lower bounds:\
    \ Integer\n  where A,B are type-variables:\n    A extends Object declared in method\
    \ <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n1 error\n"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ evenDigit = 0, oddDigit = 0;\n        long countEven = 0, countOdd = 0;\n  \
    \      while(num != 0) {\n            if (num % 2 == 0) {\n                evenDigit\
    \ = num;\n                countEven++;\n            }\n            else {\n  \
    \              oddDigit = num;\n                countOdd++;\n            }\n \
    \           num = num / 10;\n        }\n        return Pair.of(countEven, countOdd);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6smvvuvs.java:29: error: cannot find symbol\n        return Pair.of(countEven,\
    \ countOdd);\n                   ^\n  symbol:   method of(long,long)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num == 0) {\n            return Pair.with(0l, 0l);\n        }\n        Pair<Long,\
    \ Long> evenEvenPair = evenOdd(num, true);\n        Pair<Long, Long> evenOddPair\
    \ = evenOdd(num, false);\n        return Pair.with(evenEvenPair.getLeft(), evenEvenPair.getRight())\
    \ +\n                Pair.with(evenOddPair.getLeft(), evenOddPair.getRight());\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppjrxqirb.java:19: error: cannot find symbol\n        Pair<Long,\
    \ Long> evenEvenPair = evenOdd(num, true);\n                                 \
    \       ^\n  symbol:   method evenOdd(long,boolean)\n  location: class Problem\n\
    /tmp/tmppjrxqirb.java:20: error: cannot find symbol\n        Pair<Long, Long>\
    \ evenOddPair = evenOdd(num, false);\n                                       ^\n\
    \  symbol:   method evenOdd(long,boolean)\n  location: class Problem\n/tmp/tmppjrxqirb.java:21:\
    \ error: cannot find symbol\n        return Pair.with(evenEvenPair.getLeft(),\
    \ evenEvenPair.getRight()) +\n                                     ^\n  symbol:\
    \   method getLeft()\n  location: variable evenEvenPair of type Pair<Long,Long>\n\
    /tmp/tmppjrxqirb.java:21: error: cannot find symbol\n        return Pair.with(evenEvenPair.getLeft(),\
    \ evenEvenPair.getRight()) +\n                                               \
    \              ^\n  symbol:   method getRight()\n  location: variable evenEvenPair\
    \ of type Pair<Long,Long>\n/tmp/tmppjrxqirb.java:22: error: cannot find symbol\n\
    \                Pair.with(evenOddPair.getLeft(), evenOddPair.getRight());\n \
    \                                    ^\n  symbol:   method getLeft()\n  location:\
    \ variable evenOddPair of type Pair<Long,Long>\n/tmp/tmppjrxqirb.java:22: error:\
    \ cannot find symbol\n                Pair.with(evenOddPair.getLeft(), evenOddPair.getRight());\n\
    \                                                            ^\n  symbol:   method\
    \ getRight()\n  location: variable evenOddPair of type Pair<Long,Long>\n6 errors\n"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        List<Long>\
    \ even = new ArrayList<>();\n        List<Long> odd = new ArrayList<>();\n\n \
    \       // Even\n        int countEven = 0;\n        while(num != 0) {\n     \
    \       long tempNum = num;\n            while(tempNum > 0) {\n              \
    \  countEven++;\n                tempNum /= 10;\n            }\n            even.add(countEven);\n\
    \            num /= 10;\n        }\n\n        // Odd\n        int countOdd = 0;\n\
    \        while(num != 0) {\n            long tempNum = num;\n            while(tempNum\
    \ > 0) {\n                countOdd++;\n                tempNum /= 10;\n      \
    \      }\n            odd.add(countOdd);\n            num /= 10;\n        }\n\n\
    \        return Pair.with(even.get(0), odd.get(0));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcc570nux.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n            even.add(countEven);\n                     ^\n/tmp/tmpcc570nux.java:39:\
    \ error: incompatible types: int cannot be converted to Long\n            odd.add(countOdd);\n\
    \                    ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ count = 0;\n        long oddCount = 0;\n        boolean oddFound = false;\n\
    \        long evenCount = 0;\n        for (int i = 0; i < num; i++) {\n      \
    \      int remainder = num % 10;\n            if (i % 2 == 0) {\n            \
    \    evenCount += 1;\n            }\n            if (i % 2 == 0 && remainder ==\
    \ 0) {\n                oddCount += 1;\n            }\n            num = num /\
    \ 10;\n        }\n        return Pair.with((long) evenCount,\n               \
    \          (long) oddCount);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp21inmjnt.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int remainder = num % 10;\n                  \
    \              ^\n1 error\n"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ count = 0;\n        long even = 0;\n        long odd = 0;\n        while (true)\
    \ {\n            if (num < 0) {\n                break;\n            } else if\
    \ (num % 10 == 0) {\n                even++;\n            } else {\n         \
    \       odd++;\n            }\n            num = num / (int) 10;\n           \
    \ count++;\n        }\n        return new Pair<>(even, odd);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        List<Integer>\
    \ digits = Arrays.stream(new int[num / 10 + 1]).filter(i -> (i % 10) != 0).collect(Collectors.toList());\n\
    \        if (digits.size() % 2 != 0)\n            return Pair.with((long) digits.size()\
    \ / 2, (long) digits.size() / 2);\n        if (digits.size() % 2 == 0)\n     \
    \       return Pair.with((long) digits.size() / 2, (long) digits.size() / 2);\n\
    \        return Pair.with((long) digits.size() / 2, digits.size() / 2);\n    }\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5yva5w4o.java:16: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> digits = Arrays.stream(new int[num /\
    \ 10 + 1]).filter(i -> (i % 10) != 0).collect(Collectors.toList());\n        \
    \                                                      ^\n/tmp/tmp5yva5w4o.java:16:\
    \ error: method collect in interface IntStream cannot be applied to given types;\n\
    \        List<Integer> digits = Arrays.stream(new int[num / 10 + 1]).filter(i\
    \ -> (i % 10) != 0).collect(Collectors.toList());\n                          \
    \                                                                    ^\n  required:\
    \ Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>\n  found:    Collector<Object,CAP#1,List<Object>>\n\
    \  reason: cannot infer type-variable(s) R\n    (actual and formal argument lists\
    \ differ in length)\n  where R is a type-variable:\n    R extends Object declared\
    \ in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n  where\
    \ CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture of ?\n\
    /tmp/tmp5yva5w4o.java:16: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        List<Integer> digits = Arrays.stream(new int[num / 10 + 1]).filter(i\
    \ -> (i % 10) != 0).collect(Collectors.toList());\n                          \
    \                                                                            ^\n\
    \    (argument mismatch; no instance(s) of type variable(s) CAP#1,T exist so that\
    \ Collector<T,?,List<T>> conforms to Supplier<R>)\n  where R,T are type-variables:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T>toList()\n  where CAP#1 is a fresh\
    \ type-variable:\n    CAP#1 extends Object from capture of ?\n/tmp/tmp5yva5w4o.java:21:\
    \ error: incompatible types: inference variable B has incompatible bounds\n  \
    \      return Pair.with((long) digits.size() / 2, digits.size() / 2);\n      \
    \                  ^\n    equality constraints: Long\n    lower bounds: Integer\n\
    \  where B,A are type-variables:\n    B extends Object declared"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num <= 0) {\n            throw new IllegalArgumentException(\"Invalid input\"\
    );\n        }\n        long remainder;\n        long even = 0;\n        long odd\
    \ = 0;\n        while (num > 0) {\n            remainder = num % 10;\n       \
    \     if (remainder == 0) {\n                even++;\n            }\n        \
    \    if (remainder % 2 == 1) {\n                odd++;\n            }\n      \
    \      num = num / 10;\n        }\n        return Pair.with(even, odd);\n    }\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        //\
    \ count number of even and odd digits\n        long countEven = 0;\n        long\
    \ countOdd = 0;\n        long digit = num % 10;\n        while (digit != 0) {\n\
    \            if (digit % 2 == 0)\n                countEven++;\n            else\n\
    \                countOdd++;\n            digit = num / 10;\n        }\n     \
    \   Pair<Long, Long> evenOdd = Pair.with(countEven, countOdd);\n        return\
    \ evenOdd;\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        List<Integer>\
    \ digits = new ArrayList<>();\n        while (num > 0) {\n            digits.add(num\
    \ % 10);\n            num /= 10;\n        }\n        Pair<Long, Long> odd = Pair.of(0l,\
    \ digits.size());\n        List<Integer> even = new ArrayList<>();\n        for\
    \ (Integer i : digits) {\n            if (i % 2 == 0) {\n                even.add(i);\n\
    \            }\n        }\n        Pair<Long, Long> evenPair = Pair.with(even.size(),\
    \ even.size());\n        if (odd.getFirst() > odd.getSecond()) {\n           \
    \ return odd;\n        } else {\n            return evenPair;\n        }\n   \
    \ }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_e1a6qy.java:18: error: incompatible types: long cannot be converted\
    \ to Integer\n            digits.add(num % 10);\n                           ^\n\
    /tmp/tmpd_e1a6qy.java:21: error: cannot find symbol\n        Pair<Long, Long>\
    \ odd = Pair.of(0l, digits.size());\n                                   ^\n  symbol:\
    \   method of(long,int)\n  location: class Pair\n/tmp/tmpd_e1a6qy.java:28: error:\
    \ incompatible types: inference variable A has incompatible bounds\n        Pair<Long,\
    \ Long> evenPair = Pair.with(even.size(), even.size());\n                    \
    \                         ^\n    equality constraints: Long\n    lower bounds:\
    \ Integer\n  where A,B are type-variables:\n    A extends Object declared in method\
    \ <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n/tmp/tmpd_e1a6qy.java:29:\
    \ error: cannot find symbol\n        if (odd.getFirst() > odd.getSecond()) {\n\
    \               ^\n  symbol:   method getFirst()\n  location: variable odd of\
    \ type Pair<Long,Long>\n/tmp/tmpd_e1a6qy.java:29: error: cannot find symbol\n\
    \        if (odd.getFirst() > odd.getSecond()) {\n                           \
    \     ^\n  symbol:   method getSecond()\n  location: variable odd of type Pair<Long,Long>\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n5 errors\n"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0) {\n            throw new IllegalArgumentException(\"The number shouldn't\
    \ be less than zero\");\n        }\n        List<String> evens = new ArrayList<>();\n\
    \        List<String> odds = new ArrayList<>();\n        // if number is positive\
    \ then it have only even and odd digits. so just find the count of even and odd\
    \ digits\n        if (num > 0) {\n            for (int i = Integer.MIN_VALUE;\
    \ i <= Integer.MAX_VALUE; i++) {\n                long testNum = num % i;\n  \
    \              if (testNum == 0) {\n                    evens.add(Long.toString(i));\n\
    \                }\n                if (testNum != 0) {\n                    odds.add(Long.toString(i));\n\
    \                }\n            }\n        }\n        Pair<Long, Long> result\
    \ = new Pair<>();\n        result.setFirst(Long.parseLong(evens.toString()));\n\
    \        result.setSecond(Long.parseLong(odds.toString()));\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxgqpegp1.java:33: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Long, Long> result = new Pair<>();\n                           \
    \       ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and formal\
    \ argument lists differ in length)\n  where A,B are type-variables:\n    A extends\
    \ Object declared in class Pair\n    B extends Object declared in class Pair\n\
    /tmp/tmpxgqpegp1.java:34: error: cannot find symbol\n        result.setFirst(Long.parseLong(evens.toString()));\n\
    \              ^\n  symbol:   method setFirst(long)\n  location: variable result\
    \ of type Pair<Long,Long>\n/tmp/tmpxgqpegp1.java:35: error: cannot find symbol\n\
    \        result.setSecond(Long.parseLong(odds.toString()));\n              ^\n\
    \  symbol:   method setSecond(long)\n  location: variable result of type Pair<Long,Long>\n\
    3 errors\n"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0)\n            return Pair.with(0l, 0l);\n        if (num < 10)\n  \
    \          return Pair.with(0l, 1l);\n        if (num % 2 == 0) {\n          \
    \  if (num % 4 != 0)\n                return Pair.with(0l, 1l);\n            return\
    \ Pair.with(0l, 2l);\n        }\n        long a = num;\n        while (a > 0)\
    \ {\n            if ((a % 2 == 0) && (a % 4 != 0))\n                return Pair.with(0l,\
    \ 1l);\n            a /= 2;\n        }\n        return Pair.with(0l, 2l);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ oddCount = 0;\n        long evenCount = 0;\n        while (num > 0) {\n    \
    \        int digit = (int) num % 10;\n            if (digit % 2 == 1) {\n    \
    \            oddCount++;\n            } else {\n                evenCount++;\n\
    \            }\n            num = num / 10;\n        }\n        return Pair.with(oddCount,\
    \ evenCount);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        LongStream\
    \ numStream = Stream.of(num);\n        long evens = 0;\n        long odds = 0;\n\
    \        int evenCount = 0;\n        int oddCount = 0;\n        for (int i = 0;\
    \ i < numStream.count(); i++) {\n            int digit = numStream.skip(1).reduce((a,\
    \ b) -> a | b);\n            if (digit % 2 == 0) {\n                evenCount++;\n\
    \            }\n            else {\n                oddCount++;\n            }\n\
    \        }\n        return Pair.of(evens, odds);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n\
    \    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7bj6tuuf.java:16: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that Stream<T> conforms to LongStream\n        LongStream\
    \ numStream = Stream.of(num);\n                                        ^\n  where\
    \ T is a type-variable:\n    T extends Object declared in method <T>of(T)\n/tmp/tmp7bj6tuuf.java:22:\
    \ error: incompatible types: OptionalLong cannot be converted to int\n       \
    \     int digit = numStream.skip(1).reduce((a, b) -> a | b);\n               \
    \                                 ^\n/tmp/tmp7bj6tuuf.java:30: error: cannot find\
    \ symbol\n        return Pair.of(evens, odds);\n                   ^\n  symbol:\
    \   method of(long,long)\n  location: class Pair\n3 errors\n"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ count = 0;\n        long odd = 0;\n        long even = 0;\n        while (num\
    \ > 0) {\n            long current = num % 10;\n            num = (long) num /\
    \ 10;\n            if (current % 2 == 0) {\n                even++;\n        \
    \    } else {\n                odd++;\n            }\n            count++;\n \
    \       }\n        return new Pair<>(even, odd);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n\
    \    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> odd = Pair.with(Long.valueOf((long) Math.floor(Math.log10(Math.abs(num)))),\
    \ Long.valueOf((long) Math.floor(Math.log10(Math.abs(num) * 10))));\n        Pair<Long,\
    \ Long> even = Pair.with(Long.valueOf((long) Math.floor(Math.log10(Math.abs(num)\
    \ / 10))), Long.valueOf((long) Math.floor(Math.log10(Math.abs(num)))));\n    \
    \    if (num < 0) {\n            odd = Pair.with(-Long.valueOf((long) Math.floor(Math.log10(Math.abs(num)))),\
    \ -Long.valueOf((long) Math.floor(Math.log10(Math.abs(num) * 10))));\n       \
    \     even = Pair.with(-Long.valueOf((long) Math.floor(Math.log10(Math.abs(num)\
    \ / 10))), -Long.valueOf((long) Math.floor(Math.log10(Math.abs(num)))));\n   \
    \     }\n        if (num == 0) {\n            return Pair.with(odd.getSecond(),\
    \ even.getSecond());\n        }\n        if (num < 0)\n            return Pair.with(odd.getFirst(),\
    \ even.getFirst());\n        Pair<Long, Long> result = Pair.with(odd.getSecond(),\
    \ even.getSecond());\n        if (num % 2 == 0) {\n            Pair<Long, Long>\
    \ evenOddNum = Pair.with(odd.getFirst() + 1, even.getFirst() + 1);\n         \
    \   result = Pair.with(result.getFirst() + 1, result.getSecond() - 1);\n     \
    \       return evenOddNum;\n        } else {\n            Pair<Long, Long> evenOddNum\
    \ = Pair.with(odd.getFirst() - 1, even.getFirst() - 1);\n            result =\
    \ Pair.with(result.getFirst() - 1, result.getSecond() - 1);\n            return\
    \ evenOddNum;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6ypnben.java:23: error: cannot find symbol\n            return\
    \ Pair.with(odd.getSecond(), even.getSecond());\n                            \
    \    ^\n  symbol:   method getSecond()\n  location: variable odd of type Pair<Long,Long>\n\
    /tmp/tmp_6ypnben.java:23: error: cannot find symbol\n            return Pair.with(odd.getSecond(),\
    \ even.getSecond());\n                                                  ^\n  symbol:\
    \   method getSecond()\n  location: variable even of type Pair<Long,Long>\n/tmp/tmp_6ypnben.java:26:\
    \ error: cannot find symbol\n            return Pair.with(odd.getFirst(), even.getFirst());\n\
    \                                ^\n  symbol:   method getFirst()\n  location:\
    \ variable odd of type Pair<Long,Long>\n/tmp/tmp_6ypnben.java:26: error: cannot\
    \ find symbol\n            return Pair.with(odd.getFirst(), even.getFirst());\n\
    \                                                 ^\n  symbol:   method getFirst()\n\
    \  location: variable even of type Pair<Long,Long>\n/tmp/tmp_6ypnben.java:27:\
    \ error: cannot find symbol\n        Pair<Long, Long> result = Pair.with(odd.getSecond(),\
    \ even.getSecond());\n                                               ^\n  symbol:\
    \   method getSecond()\n  location: variable odd of type Pair<Long,Long>\n/tmp/tmp_6ypnben.java:27:\
    \ error: cannot find symbol\n        Pair<Long, Long> result = Pair.with(odd.getSecond(),\
    \ even.getSecond());\n                                                       \
    \          ^\n  symbol:   method getSecond()\n  location: variable even of type\
    \ Pair<Long,Long>\n/tmp/tmp_6ypnben.java:29: error: cannot find symbol\n     \
    \       Pair<Long, Long> evenOddNum = Pair.with(odd.getFirst() + 1, even.getFirst()\
    \ + 1);\n                                                       ^\n  symbol: \
    \  method getFirst()\n  location: variable odd of type Pair<Long,Long>\n/tmp/tmp_6ypnben.java:29:\
    \ error: cannot find symbol\n            Pair<Long, Long> evenOddNum = Pair.with(odd.getFirst()\
    \ + 1, even.getFirst() + 1);\n                                               \
    \                             ^\n  symbol:   method getFirst()\n  location: vari"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        List<Integer>\
    \ oddDigits = num % 10 == 0 ? Collections.nCopies((int)num/10, (int)num%10) :\
    \ Collections.nCopies(num/10, 10);\n        List<Integer> evenDigits = num % 2\
    \ == 0 ? Collections.nCopies((int)num/2, (int)num%2) : Collections.nCopies(num/2,\
    \ 2);\n        long oddSum = 0;\n        long evenSum = 0;\n        for(Integer\
    \ oddDigit : oddDigits){\n            oddSum += oddDigit;\n        }\n       \
    \ for(Integer evenDigit : evenDigits){\n            evenSum += evenDigit;\n  \
    \      }\n        return Pair.with(oddSum, evenSum);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi7q975_t.java:16: error: incompatible types: possible lossy conversion\
    \ from long to int\n        List<Integer> oddDigits = num % 10 == 0 ? Collections.nCopies((int)num/10,\
    \ (int)num%10) : Collections.nCopies(num/10, 10);\n                          \
    \                                                                            \
    \                   ^\n/tmp/tmpi7q975_t.java:17: error: incompatible types: possible\
    \ lossy conversion from long to int\n        List<Integer> evenDigits = num %\
    \ 2 == 0 ? Collections.nCopies((int)num/2, (int)num%2) : Collections.nCopies(num/2,\
    \ 2);\n                                                                      \
    \                                                 ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659976293
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> even = new Pair<>();\n        Pair<Long, Long> odd = new Pair<>();\n \
    \       long n = Math.abs(num);\n        long x = 1;\n        long y = 1;\n  \
    \      long z = 1;\n        long x2;\n        if (n <= 1) {\n            even\
    \ = Pair.of(n, 0);\n            odd = Pair.of(n, 0);\n        }\n        else\
    \ {\n            while (n > 0) {\n                if (n % 2 == 0) {\n        \
    \            even += Pair.of(x, n);\n                    x++;\n              \
    \      n /= 2;\n                }\n                else {\n                  \
    \  odd += Pair.of(y, n);\n                    y++;\n                    n /= 2;\n\
    \                }\n            }\n        }\n        return Pair.of(even, odd);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3qfall5q.java:16: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Long, Long> even = new Pair<>();\n                             \
    \   ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and formal argument\
    \ lists differ in length)\n  where A,B are type-variables:\n    A extends Object\
    \ declared in class Pair\n    B extends Object declared in class Pair\n/tmp/tmp3qfall5q.java:17:\
    \ error: cannot infer type arguments for Pair<>\n        Pair<Long, Long> odd\
    \ = new Pair<>();\n                               ^\n  reason: cannot infer type-variable(s)\
    \ A,B\n    (actual and formal argument lists differ in length)\n  where A,B are\
    \ type-variables:\n    A extends Object declared in class Pair\n    B extends\
    \ Object declared in class Pair\n/tmp/tmp3qfall5q.java:24: error: cannot find\
    \ symbol\n            even = Pair.of(n, 0);\n                       ^\n  symbol:\
    \   method of(long,int)\n  location: class Pair\n/tmp/tmp3qfall5q.java:25: error:\
    \ cannot find symbol\n            odd = Pair.of(n, 0);\n                     \
    \ ^\n  symbol:   method of(long,int)\n  location: class Pair\n/tmp/tmp3qfall5q.java:30:\
    \ error: cannot find symbol\n                    even += Pair.of(x, n);\n    \
    \                            ^\n  symbol:   method of(long,long)\n  location:\
    \ class Pair\n/tmp/tmp3qfall5q.java:35: error: cannot find symbol\n          \
    \          odd += Pair.of(y, n);\n                               ^\n  symbol:\
    \   method of(long,long)\n  location: class Pair\n/tmp/tmp3qfall5q.java:41: error:\
    \ cannot find symbol\n        return Pair.of(even, odd);\n                   ^\n\
    \  symbol:   method of(Pair<Long,Long>,Pair<Long,Long>)\n  location: class Pair\n\
    7 errors\n"
  stdout: ''
  timestamp: 1659976294
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        BigInteger\
    \ bi = new BigInteger(String.valueOf(num), 2);\n        // TODO: remove if using\
    \ java 8\n        BigInteger oddCount = bi.subtract(bi.mod(BigInteger.TWO));\n\
    \        BigInteger evenCount = bi.subtract(evenCount);\n        return new Pair<>(evenCount,\
    \ oddCount);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpto4xtvsx.java:20: error: incompatible types: cannot infer type\
    \ arguments for Pair<>\n        return new Pair<>(evenCount, oddCount);\n    \
    \                   ^\n    reason: inference variable A has incompatible bounds\n\
    \      equality constraints: Long\n      lower bounds: BigInteger\n  where A is\
    \ a type-variable:\n    A extends Object declared in class Pair\n1 error\n"
  stdout: ''
  timestamp: 1659976294
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0) {\n            throw new RuntimeException(\"Argument 'num' should\
    \ be non-negative.\");\n        }\n        Pair<Long, Long> pair = new Pair<Long,\
    \ Long>(0L, 0L);\n        long oddCount = 0, evenCount = 0;\n        // Get odd\
    \ digits and count them up\n        while (num >= 10) {\n            oddCount\
    \ += num % 10;\n            num /= 10;\n        }\n        // Get even digits\
    \ and count them up\n        while (num <= 0) {\n            evenCount += num\
    \ % 10;\n            num /= 10;\n        }\n        // Return result\n       \
    \ return Pair.of(oddCount, evenCount);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2zq1eo64.java:32: error: cannot find symbol\n        return Pair.of(oddCount,\
    \ evenCount);\n                   ^\n  symbol:   method of(long,long)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1659976294
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        //\
    \ Complete the implementation of this method!\n        if (num == 0)\n       \
    \     return Pair.with(0, 0);\n        int evenCount = 0;\n        int oddCount\
    \ = 0;\n        while (num /= 10) {\n            oddCount += 1;\n            num\
    \ %= 10;\n        }\n        while (num != 0) {\n            evenCount += 1;\n\
    \            num /= 10;\n        }\n        return Pair.with(evenCount, oddCount);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpehdem9aw.java:18: error: incompatible types: inference variable\
    \ A has incompatible bounds\n            return Pair.with(0, 0);\n           \
    \                 ^\n    equality constraints: Long\n    lower bounds: Integer\n\
    \  where A,B are type-variables:\n    A extends Object declared in method <A,B>with(A,B)\n\
    \    B extends Object declared in method <A,B>with(A,B)\n/tmp/tmpehdem9aw.java:21:\
    \ error: incompatible types: long cannot be converted to boolean\n        while\
    \ (num /= 10) {\n                   ^\n/tmp/tmpehdem9aw.java:29: error: incompatible\
    \ types: inference variable A has incompatible bounds\n        return Pair.with(evenCount,\
    \ oddCount);\n                        ^\n    equality constraints: Long\n    lower\
    \ bounds: Integer\n  where A,B are type-variables:\n    A extends Object declared\
    \ in method <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n\
    3 errors\n"
  stdout: ''
  timestamp: 1659976294
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ odds = 0;\n        int evens = 0;\n\n        if (num < 0) {\n            throw\
    \ new IllegalArgumentException(\"negative value\");\n        }\n\n        if (num\
    \ == 0) {\n            return Pair.with(1l, 1l);\n        }\n\n        long remainder\
    \ = num;\n        long temp = num;\n\n        while (remainder > 0) {\n      \
    \      if (remainder % 2 == 0) {\n                evens++;\n            } else\
    \ {\n                odds++;\n            }\n            remainder = remainder\
    \ / 2;\n        }\n\n        return Pair.with(odds, evens);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbid11cvm.java:39: error: incompatible types: inference variable\
    \ A has incompatible bounds\n        return Pair.with(odds, evens);\n        \
    \                ^\n    equality constraints: Long\n    lower bounds: Integer\n\
    \  where A,B are type-variables:\n    A extends Object declared in method <A,B>with(A,B)\n\
    \    B extends Object declared in method <A,B>with(A,B)\n1 error\n"
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> even = new Pair<Long, Long>(1l, 0l);\n        Pair<Long, Long> odd = new\
    \ Pair<Long, Long>(1l, 0l);\n\n        boolean isEven = false;\n\n        if (num\
    \ >= 0) {\n            num = Math.abs(num);\n            if (num % 2 == 0) {\n\
    \                isEven = true;\n            }\n        }\n\n        num = Math.abs(num);\n\
    \        if (num % 2 == 0) {\n            even.second = 1l;\n        } else {\n\
    \            even.second = 2l;\n        }\n        if (num != 0) {\n         \
    \   int i = 0;\n            while (num != 0) {\n                if (i % 2 == 0)\
    \ {\n                    odd.second = odd.second + 1;\n                } else\
    \ {\n                    even.second = even.second + 1;\n                }\n \
    \               num = num / 2;\n                i++;\n            }\n        }\n\
    \n        if (isEven) {\n            even.first *= -1;\n        }\n        return\
    \ Pair.of(even.first, odd.first);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp13q_rfck.java:30: error: cannot find symbol\n            even.second\
    \ = 1l;\n                ^\n  symbol:   variable second\n  location: variable\
    \ even of type Pair<Long,Long>\n/tmp/tmp13q_rfck.java:32: error: cannot find symbol\n\
    \            even.second = 2l;\n                ^\n  symbol:   variable second\n\
    \  location: variable even of type Pair<Long,Long>\n/tmp/tmp13q_rfck.java:38:\
    \ error: cannot find symbol\n                    odd.second = odd.second + 1;\n\
    \                       ^\n  symbol:   variable second\n  location: variable odd\
    \ of type Pair<Long,Long>\n/tmp/tmp13q_rfck.java:38: error: cannot find symbol\n\
    \                    odd.second = odd.second + 1;\n                          \
    \          ^\n  symbol:   variable second\n  location: variable odd of type Pair<Long,Long>\n\
    /tmp/tmp13q_rfck.java:40: error: cannot find symbol\n                    even.second\
    \ = even.second + 1;\n                        ^\n  symbol:   variable second\n\
    \  location: variable even of type Pair<Long,Long>\n/tmp/tmp13q_rfck.java:40:\
    \ error: cannot find symbol\n                    even.second = even.second + 1;\n\
    \                                      ^\n  symbol:   variable second\n  location:\
    \ variable even of type Pair<Long,Long>\n/tmp/tmp13q_rfck.java:48: error: cannot\
    \ find symbol\n            even.first *= -1;\n                ^\n  symbol:   variable\
    \ first\n  location: variable even of type Pair<Long,Long>\n/tmp/tmp13q_rfck.java:50:\
    \ error: cannot find symbol\n        return Pair.of(even.first, odd.first);\n\
    \                           ^\n  symbol:   variable first\n  location: variable\
    \ even of type Pair<Long,Long>\n/tmp/tmp13q_rfck.java:50: error: cannot find symbol\n\
    \        return Pair.of(even.first, odd.first);\n                            \
    \          ^\n  symbol:   variable first\n  location: variable odd of type Pair<Long,Long>\n\
    9 errors\n"
  stdout: ''
  timestamp: 1659976294
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        return\
    \ num % 2 == 0 ? (Pair.<Long, Long>of(num / 2, num / 2)) : (Pair.<Long, Long>of(num\
    \ / 2, num / 2 + 1));\n    }\n    public static void main(String[] args) {\n \
    \   assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxkptmp79.java:16: error: cannot find symbol\n        return num\
    \ % 2 == 0 ? (Pair.<Long, Long>of(num / 2, num / 2)) : (Pair.<Long, Long>of(num\
    \ / 2, num / 2 + 1));\n                                   ^\n  symbol:   method\
    \ <Long,Long>of(long,long)\n  location: class Pair\n/tmp/tmpxkptmp79.java:16:\
    \ error: cannot find symbol\n        return num % 2 == 0 ? (Pair.<Long, Long>of(num\
    \ / 2, num / 2)) : (Pair.<Long, Long>of(num / 2, num / 2 + 1));\n            \
    \                                                                 ^\n  symbol:\
    \   method <Long,Long>of(long,long)\n  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1659976294
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Set<Long>\
    \ even = new HashSet<>();\n        Set<Long> odd = new HashSet<>();\n        for\
    \ (long i = num; i > 0; i/= 10) {\n            long digit = i % 10;\n        \
    \    if (even.contains(digit)) {\n                even.remove(digit);\n      \
    \      } else {\n                even.add(digit);\n            }\n           \
    \ if (odd.contains(digit)) {\n                odd.remove(digit);\n           \
    \ } else {\n                odd.add(digit);\n            }\n        }\n      \
    \  return Pair.with(Math.max(even.size()), Math.max(odd.size()));\n    }\n   \
    \ public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphwvknyfk.java:31: error: no suitable method found for max(int)\n\
    \        return Pair.with(Math.max(even.size()), Math.max(odd.size()));\n    \
    \                         ^\n    method Math.max(int,int) is not applicable\n\
    \      (actual and formal argument lists differ in length)\n    method Math.max(long,long)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method Math.max(float,float) is not applicable\n      (actual and formal\
    \ argument lists differ in length)\n    method Math.max(double,double) is not\
    \ applicable\n      (actual and formal argument lists differ in length)\n/tmp/tmphwvknyfk.java:31:\
    \ error: no suitable method found for max(int)\n        return Pair.with(Math.max(even.size()),\
    \ Math.max(odd.size()));\n                                                   \
    \ ^\n    method Math.max(int,int) is not applicable\n      (actual and formal\
    \ argument lists differ in length)\n    method Math.max(long,long) is not applicable\n\
    \      (actual and formal argument lists differ in length)\n    method Math.max(float,float)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method Math.max(double,double) is not applicable\n      (actual and formal\
    \ argument lists differ in length)\n2 errors\n"
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        //\
    \ Return pair with even digits and odd digits\n        long evenDigit, oddDigit;\n\
    \        evenDigit = num / 10;\n        oddDigit = num % 10;\n        return Pair.with(evenDigit,\
    \ oddDigit);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ oddSum = 0;\n        long evenSum = 0;\n\n        while (num > 0) {\n      \
    \      long digit = num % 10;\n\n            if (digit % 2 == 0) {\n         \
    \       evenSum = evenSum + digit;\n            }\n            else {\n      \
    \          oddSum = oddSum + digit;\n            }\n\n            num = num /\
    \ 10;\n        }\n\n        return new Pair<>(evenSum, oddSum);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0) {\n            throw new RuntimeException(\"Positive value is not\
    \ allowed!\");\n        }\n        Pair<Long, Long> pair = null;\n        final\
    \ long digit = num % 10;\n        pair = Pair.with(digit, digit);\n        num\
    \ = num / 10;\n        while (num > 0) {\n            final long digit = num %\
    \ 10;\n            if (digit % 2 == 0) {\n                pair.second = pair.second\
    \ + digit;\n            }\n            num = num / 10;\n        }\n        return\
    \ pair;\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxswqf7dn.java:24: error: variable digit is already defined in method\
    \ evenOddCount(long)\n            final long digit = num % 10;\n             \
    \          ^\n/tmp/tmpxswqf7dn.java:26: error: cannot find symbol\n          \
    \      pair.second = pair.second + digit;\n                    ^\n  symbol:  \
    \ variable second\n  location: variable pair of type Pair<Long,Long>\n/tmp/tmpxswqf7dn.java:26:\
    \ error: cannot find symbol\n                pair.second = pair.second + digit;\n\
    \                                  ^\n  symbol:   variable second\n  location:\
    \ variable pair of type Pair<Long,Long>\n3 errors\n"
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> even = Pair.<Long, Long>with(1l, 0l);\n        Pair<Long, Long> odd =\
    \ Pair.<Long, Long>with(1l, 0l);\n        long n = Math.abs(num);\n\n        if\
    \ (n < 0l) {\n            throw new ArithmeticException(\"negative numbers are\
    \ not allowed\");\n        }\n\n        int count = 0;\n        while (n != 0l)\
    \ {\n            count++;\n            n /= 10;\n        }\n\n        // For odd,\
    \ we add 1 even digit and 1 odd digit in each iteration.\n        for (int i =\
    \ 1; i <= count; i++) {\n            odd = Pair.with((n / 10l) + even.first, (n\
    \ / 10l) + odd.first);\n            n %= 10;\n        }\n\n        // For even,\
    \ we subtract 1 even digit and 1 odd digit in each iteration.\n        for (int\
    \ i = 1; i <= count; i++) {\n            even = Pair.with((n / 10l) - even.first,\
    \ (n / 10l) - odd.first);\n            n %= 10;\n        }\n\n        return Pair.with(even.second,\
    \ odd.second);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5pvb90ah.java:32: error: cannot find symbol\n            odd =\
    \ Pair.with((n / 10l) + even.first, (n / 10l) + odd.first);\n                \
    \                            ^\n  symbol:   variable first\n  location: variable\
    \ even of type Pair<Long,Long>\n/tmp/tmp5pvb90ah.java:32: error: cannot find symbol\n\
    \            odd = Pair.with((n / 10l) + even.first, (n / 10l) + odd.first);\n\
    \                                                                   ^\n  symbol:\
    \   variable first\n  location: variable odd of type Pair<Long,Long>\n/tmp/tmp5pvb90ah.java:38:\
    \ error: cannot find symbol\n            even = Pair.with((n / 10l) - even.first,\
    \ (n / 10l) - odd.first);\n                                             ^\n  symbol:\
    \   variable first\n  location: variable even of type Pair<Long,Long>\n/tmp/tmp5pvb90ah.java:38:\
    \ error: cannot find symbol\n            even = Pair.with((n / 10l) - even.first,\
    \ (n / 10l) - odd.first);\n                                                  \
    \                  ^\n  symbol:   variable first\n  location: variable odd of\
    \ type Pair<Long,Long>\n/tmp/tmp5pvb90ah.java:42: error: cannot find symbol\n\
    \        return Pair.with(even.second, odd.second);\n                        \
    \     ^\n  symbol:   variable second\n  location: variable even of type Pair<Long,Long>\n\
    /tmp/tmp5pvb90ah.java:42: error: cannot find symbol\n        return Pair.with(even.second,\
    \ odd.second);\n                                         ^\n  symbol:   variable\
    \ second\n  location: variable odd of type Pair<Long,Long>\n6 errors\n"
  stdout: ''
  timestamp: 1659976294
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> p = Pair.<Long, Long>with(0l, 0l);\n        // First get the odd number\
    \ count\n        long odd = 0;\n        while (num % 2 == 1) {\n            odd\
    \ += 2;\n            num /= 2;\n        }\n        // Then get even number count\n\
    \        long even = 0;\n        while (num % 2 == 0) {\n            even += 2;\n\
    \            num /= 2;\n        }\n        // Then combine them\n        p.left\
    \ = odd;\n        p.right = even;\n        return p;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphxambl0h.java:30: error: cannot find symbol\n        p.left = odd;\n\
    \         ^\n  symbol:   variable left\n  location: variable p of type Pair<Long,Long>\n\
    /tmp/tmphxambl0h.java:31: error: cannot find symbol\n        p.right = even;\n\
    \         ^\n  symbol:   variable right\n  location: variable p of type Pair<Long,Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> ret = new Pair<>();\n        if (num < 0) {\n            return Pair.<Long,\
    \ Long>with(Long.MIN_VALUE, Long.MIN_VALUE);\n        }\n        long sum = 0;\n\
    \        long odd = 1, even = 1;\n        int i = 0;\n        long tmp = num;\n\
    \        while (tmp != 0) {\n            long digit = tmp % 10;\n            if\
    \ (i % 2 == 0 && digit % 2 == 0) {\n                even++;\n            } else\
    \ if (i % 2 != 0 && digit % 2 != 0) {\n                odd++;\n            }\n\
    \            sum += digit;\n            tmp = tmp / 10;\n            i++;\n  \
    \      }\n        ret.first = sum;\n        ret.second = odd;\n        return\
    \ ret;\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjlg664em.java:16: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Long, Long> ret = new Pair<>();\n                              \
    \ ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and formal argument\
    \ lists differ in length)\n  where A,B are type-variables:\n    A extends Object\
    \ declared in class Pair\n    B extends Object declared in class Pair\n/tmp/tmpjlg664em.java:35:\
    \ error: cannot find symbol\n        ret.first = sum;\n           ^\n  symbol:\
    \   variable first\n  location: variable ret of type Pair<Long,Long>\n/tmp/tmpjlg664em.java:36:\
    \ error: cannot find symbol\n        ret.second = odd;\n           ^\n  symbol:\
    \   variable second\n  location: variable ret of type Pair<Long,Long>\n3 errors\n"
  stdout: ''
  timestamp: 1659976294
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        num\
    \ = Math.abs(num);\n        long even = num / 10000;\n        long odd = (num\
    \ - even) * 10000;\n        if (even > odd)\n            return Pair.with(even,\
    \ odd);\n        return Pair.with(odd, even);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if(num\
    \ > 0) {\n            long oddCount = 1;\n            long evenCount = 1;\n  \
    \          while(num > 0) {\n                evenCount += num % 10;\n        \
    \        oddCount += num / 10;\n                num /= 10;\n            }\n  \
    \          return Pair.with(evenCount, oddCount);\n        } else {\n        \
    \    return Pair.with(-1l, -1l);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ digit1 = num / 1000000000000l;\n        long digit2 = num % 1000000000000l;\n\
    \        return new Pair<>(digit1, digit2);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0)\n            return null;\n        int[] digits = intDigits(num);\n\
    \        if (digits.length < 2)\n            return null;\n        int evenCount\
    \ = 0;\n        int oddCount = 0;\n        for (int i = 0; i < digits.length;\
    \ i++) {\n            int digit = digits[i];\n            if (digit % 2 == 0)\n\
    \                evenCount++;\n            else\n                oddCount++;\n\
    \        }\n        return Pair.with(evenCount, oddCount);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqq11blje.java:18: error: cannot find symbol\n        int[] digits\
    \ = intDigits(num);\n                       ^\n  symbol:   method intDigits(long)\n\
    \  location: class Problem\n/tmp/tmpqq11blje.java:30: error: incompatible types:\
    \ inference variable A has incompatible bounds\n        return Pair.with(evenCount,\
    \ oddCount);\n                        ^\n    equality constraints: Long\n    lower\
    \ bounds: Integer\n  where A,B are type-variables:\n    A extends Object declared\
    \ in method <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> result = new Pair<>();\n        long countOdd = 0, countEven = 0;\n  \
    \      while (num > 0) {\n            long digit = num % 10;\n            countOdd\
    \ += digit != 0 ? 1 : 0;\n            countEven++;\n            num = num / 10;\n\
    \        }\n        result.first = countEven;\n        result.second = countOdd;\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_984nb1c.java:16: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Long, Long> result = new Pair<>();\n                           \
    \       ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and formal\
    \ argument lists differ in length)\n  where A,B are type-variables:\n    A extends\
    \ Object declared in class Pair\n    B extends Object declared in class Pair\n\
    /tmp/tmp_984nb1c.java:24: error: cannot find symbol\n        result.first = countEven;\n\
    \              ^\n  symbol:   variable first\n  location: variable result of type\
    \ Pair<Long,Long>\n/tmp/tmp_984nb1c.java:25: error: cannot find symbol\n     \
    \   result.second = countOdd;\n              ^\n  symbol:   variable second\n\
    \  location: variable result of type Pair<Long,Long>\n3 errors\n"
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Long[]\
    \ ns = String.valueOf(num).chars().filter(x -> x == '0').map(x -> x - '0').toArray(Long[]::new);\n\
    \        Long[] es = ns;\n        Long[] os = ns;\n\n        // count odd and\
    \ even digits\n        Arrays.sort(es);\n        Arrays.sort(os);\n        int\
    \ odd = es.length - 1;\n        int even = os.length - 1;\n\n        // return\
    \ pair\n        if (es[odd] % 2 == 0 && os[even] % 2 != 0) {\n            return\
    \ Pair.with(es[odd], os[even]);\n        } else {\n            return Pair.with(1l,\
    \ 1l);\n        }\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbqcsnm_7.java:16: error: method toArray in interface IntStream\
    \ cannot be applied to given types;\n        Long[] ns = String.valueOf(num).chars().filter(x\
    \ -> x == '0').map(x -> x - '0').toArray(Long[]::new);\n                     \
    \                                                                  ^\n  required:\
    \ no arguments\n  found:    Long[]::new\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ oddSum = 0;\n        long evenSum = 0;\n        if (num == 0) {\n          \
    \  return Pair.with(0l, 0l);\n        }\n        while (num != 0) {\n        \
    \    if (num % 2 == 0) {\n                evenSum += num;\n            } else\
    \ {\n                oddSum += num;\n            }\n            num = num / 10;\n\
    \        }\n        return Pair.with(evenSum, oddSum);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        List<Integer>\
    \ even = IntStream.range(0, (int) Math.ceil(Math.log10(num))).filter((i) -> {\n\
    \            long digit = num / Math.pow(10, i);\n            num %= digit;\n\
    \            return digit % 2 == 0;\n        }).boxed().collect(Collectors.toList());\n\
    \        List<Integer> odd = IntStream.range(0, (int) Math.ceil(Math.log10(num))).filter((i)\
    \ -> {\n            long digit = num / Math.pow(10, i);\n            num %= digit;\n\
    \            return digit % 2 != 0;\n        }).boxed().collect(Collectors.toList());\n\
    \        Pair<Long, Long> pair = new Pair<>(odd.size(), even.size());\n      \
    \  return pair;\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbyld47j5.java:17: error: incompatible types: possible lossy conversion\
    \ from double to long\n            long digit = num / Math.pow(10, i);\n     \
    \                        ^\n/tmp/tmpbyld47j5.java:22: error: incompatible types:\
    \ possible lossy conversion from double to long\n            long digit = num\
    \ / Math.pow(10, i);\n                             ^\n/tmp/tmpbyld47j5.java:26:\
    \ error: incompatible types: cannot infer type arguments for Pair<>\n        Pair<Long,\
    \ Long> pair = new Pair<>(odd.size(), even.size());\n                        \
    \                ^\n    reason: inference variable A has incompatible bounds\n\
    \      equality constraints: Long\n      lower bounds: Integer\n  where A is a\
    \ type-variable:\n    A extends Object declared in class Pair\n3 errors\n"
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ digits = num / 10000000000000l; // 10 ^ 9\n        long remainder = num % 10000000000000l;\
    \ // 10 ^ 8\n        long evenDigits = remainder / 100000000000l; // 10 ^ 6\n\
    \        long oddDigits = remainder % 100000000000l; // 10 ^ 0\n        return\
    \ new Pair<Long, Long>(evenDigits, oddDigits);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n\
    \    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        return\
    \ Pair.with(evenOddCount(num), odd(num));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpevdby_s6.java:16: error: cannot find symbol\n        return Pair.with(evenOddCount(num),\
    \ odd(num));\n                                            ^\n  symbol:   method\
    \ odd(long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        //\
    \ 1. Get a BigInteger from long\n        BigInteger bi = new BigInteger(String.valueOf(num),\
    \ 10);\n        // 2. Find even digits count\n        int evenCount = bi.divideAndRemainder(BigInteger.TEN).compareTo(BigInteger.ZERO)\
    \ > 0 ? 1 : 0;\n        // 3. Find odd digits count\n        int oddCount = bi.divideAndRemainder(BigInteger.TEN).compareTo(BigInteger.ZERO)\
    \ < 0 ? 1 : 0;\n        // 4. Make pair\n        return Pair.with(evenCount, oddCount);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphta78pqp.java:19: error: cannot find symbol\n        int evenCount\
    \ = bi.divideAndRemainder(BigInteger.TEN).compareTo(BigInteger.ZERO) > 0 ? 1 :\
    \ 0;\n                                                             ^\n  symbol:\
    \   method compareTo(BigInteger)\n  location: class BigInteger[]\n/tmp/tmphta78pqp.java:21:\
    \ error: cannot find symbol\n        int oddCount = bi.divideAndRemainder(BigInteger.TEN).compareTo(BigInteger.ZERO)\
    \ < 0 ? 1 : 0;\n                                                            ^\n\
    \  symbol:   method compareTo(BigInteger)\n  location: class BigInteger[]\n/tmp/tmphta78pqp.java:23:\
    \ error: incompatible types: inference variable A has incompatible bounds\n  \
    \      return Pair.with(evenCount, oddCount);\n                        ^\n   \
    \ equality constraints: Long\n    lower bounds: Integer\n  where A,B are type-variables:\n\
    \    A extends Object declared in method <A,B>with(A,B)\n    B extends Object\
    \ declared in method <A,B>with(A,B)\n3 errors\n"
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ countEven = 0;\n        long countOdd = 0;\n        while (num > 0) {\n    \
    \        int digit = num % 10;\n            countEven = (digit%2 == 0 ? countEven\
    \ + 1 : countEven);\n            countOdd = (digit%2 != 0 ? countOdd + 1 : countOdd);\n\
    \            num = num / 10;\n        }\n        return Pair.with(countEven, countOdd);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc6nqtm17.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = num % 10;\n                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> pair = Pair.with(num, num);\n        long even = 0, odd = 0;\n       \
    \ int sign = num >= 0 ? 1 : -1;\n        long n = Math.abs(num);\n        long\
    \ m = Math.abs(n);\n        long count = 1;\n        for(;;) {\n            long\
    \ temp = n;\n            n = Math.abs(temp);\n            if (n == 0) {\n    \
    \            long temp = m;\n                m = Math.abs(temp);\n           \
    \     if (temp == 0) {\n                    pair.second = pair.first == 0 ? 0\
    \ : 1;\n                    return pair;\n                }\n                return\
    \ pair;\n            }\n            if (temp % 2 == 0) {\n                even++;\n\
    \            } else {\n                odd++;\n            }\n            count\
    \ *= 2;\n        }\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyp2rp9vd.java:26: error: variable temp is already defined in method\
    \ evenOddCount(long)\n                long temp = m;\n                     ^\n\
    /tmp/tmpyp2rp9vd.java:29: error: cannot find symbol\n                    pair.second\
    \ = pair.first == 0 ? 0 : 1;\n                        ^\n  symbol:   variable\
    \ second\n  location: variable pair of type Pair<Long,Long>\n/tmp/tmpyp2rp9vd.java:29:\
    \ error: cannot find symbol\n                    pair.second = pair.first == 0\
    \ ? 0 : 1;\n                                      ^\n  symbol:   variable first\n\
    \  location: variable pair of type Pair<Long,Long>\n3 errors\n"
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ sum = 0;\n        long odd = 0;\n        long even = 0;\n\n        int length\
    \ = (int) (Math.log10(num) + 1);\n\n        for(int i = 0; i < length; i++) {\n\
    \            int d = (int) (num / Math.pow(10, length - 1 - i));\n\n         \
    \   if((d % 2) == 0) {\n                even = even + d;\n            } else {\n\
    \                odd = odd + d;\n            }\n\n            sum = sum + d;\n\
    \        }\n        // pair with two long values\n        return new Pair<>(even,\
    \ odd);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ odd = num % 10;\n        long even = 0;\n        long total = 0;\n        for(long\
    \ i = num; i > 0; i /= 10) {\n            total += (i * i);\n            if (total\
    \ % 2 != 0)\n                even++;\n        }\n        return Pair.of(even,\
    \ odd);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzz8_zvit.java:24: error: cannot find symbol\n        return Pair.of(even,\
    \ odd);\n                   ^\n  symbol:   method of(long,long)\n  location: class\
    \ Pair\n1 error\n"
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> even = new Pair<>();\n        Pair<Long, Long> odd = new Pair<>();\n\n\
    \        if (num <= 0)\n            return even;\n        long remain = num %\
    \ 2;\n        long temp;\n        long evenCount = 0;\n        long oddCount =\
    \ 0;\n\n        while (num > 0) {\n            temp = num % 10;\n            if\
    \ (temp == remain) {\n                evenCount++;\n                num /= 10;\n\
    \            }\n            else if (temp != remain) {\n                oddCount++;\n\
    \                num -= temp * 10;\n            }\n        }\n        even.first\
    \ = evenCount;\n        even.second = oddCount;\n\n        if (num > 0)\n    \
    \        odd.first = evenCount - 1;\n        else\n            odd.first = evenCount;\n\
    \        return odd;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpna5tdc1x.java:16: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Long, Long> even = new Pair<>();\n                             \
    \   ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and formal argument\
    \ lists differ in length)\n  where A,B are type-variables:\n    A extends Object\
    \ declared in class Pair\n    B extends Object declared in class Pair\n/tmp/tmpna5tdc1x.java:17:\
    \ error: cannot infer type arguments for Pair<>\n        Pair<Long, Long> odd\
    \ = new Pair<>();\n                               ^\n  reason: cannot infer type-variable(s)\
    \ A,B\n    (actual and formal argument lists differ in length)\n  where A,B are\
    \ type-variables:\n    A extends Object declared in class Pair\n    B extends\
    \ Object declared in class Pair\n/tmp/tmpna5tdc1x.java:37: error: cannot find\
    \ symbol\n        even.first = evenCount;\n            ^\n  symbol:   variable\
    \ first\n  location: variable even of type Pair<Long,Long>\n/tmp/tmpna5tdc1x.java:38:\
    \ error: cannot find symbol\n        even.second = oddCount;\n            ^\n\
    \  symbol:   variable second\n  location: variable even of type Pair<Long,Long>\n\
    /tmp/tmpna5tdc1x.java:41: error: cannot find symbol\n            odd.first = evenCount\
    \ - 1;\n               ^\n  symbol:   variable first\n  location: variable odd\
    \ of type Pair<Long,Long>\n/tmp/tmpna5tdc1x.java:43: error: cannot find symbol\n\
    \            odd.first = evenCount;\n               ^\n  symbol:   variable first\n\
    \  location: variable odd of type Pair<Long,Long>\n6 errors\n"
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        return\
    \ num % 2 == 0 ? (Pair.with(num, num / 2)) : Pair.with(num / 2, num % 2);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Set<Integer>\
    \ set = new HashSet<Integer>();\n        long[] numArray = new long[(int)Math.log10(num)\
    \ + 1];\n        while (num /= 10)\n            set.add(num % 10);\n        for(long\
    \ i : set)\n            numArray[(int)Math.log10(i)] += num == i ? 1 : 0;\n  \
    \      long[] evenNums = new long[set.size()];\n        long[] oddNums = new long[set.size()];\n\
    \        for (int i = 0; i < set.size(); i++) {\n            evenNums[i] = numArray[set.size()\
    \ - i - 2];\n            oddNums[i] = numArray[set.size() - i - 1];\n        }\n\
    \        Pair<Long, Long> pair = Pair.with(evenNums, oddNums);\n        return\
    \ pair;\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr4m9m5zr.java:18: error: incompatible types: long cannot be converted\
    \ to boolean\n        while (num /= 10)\n                   ^\n/tmp/tmpr4m9m5zr.java:19:\
    \ error: incompatible types: long cannot be converted to Integer\n           \
    \ set.add(num % 10);\n                        ^\n/tmp/tmpr4m9m5zr.java:28: error:\
    \ incompatible types: inference variable A has incompatible bounds\n        Pair<Long,\
    \ Long> pair = Pair.with(evenNums, oddNums);\n                               \
    \          ^\n    equality constraints: Long\n    lower bounds: long[]\n  where\
    \ A,B are type-variables:\n    A extends Object declared in method <A,B>with(A,B)\n\
    \    B extends Object declared in method <A,B>with(A,B)\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0)\n            return new Pair<>(-1l, -1l);\n        num = Math.abs(num);\n\
    \        long odds = 0;\n        long evens = 0;\n        while (num /= 10)\n\
    \            evens += num % 10;\n        while (num /= 10)\n            odds +=\
    \ num % 10;\n        if (evens == 0)\n            return new Pair<>(1l, 1l);\n\
    \        if (odds == 0)\n            return new Pair<>(1l, -1l);\n        return\
    \ new Pair<>(evens, odds);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfin5b8_.java:21: error: incompatible types: long cannot be converted\
    \ to boolean\n        while (num /= 10)\n                   ^\n/tmp/tmpzfin5b8_.java:23:\
    \ error: incompatible types: long cannot be converted to boolean\n        while\
    \ (num /= 10)\n                   ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ count = 0;\n        long temp = 0;\n        long first = 1;\n        long last\
    \ = 0;\n        while (num > 0) {\n            last = num % 10;\n            num\
    \ = num / 10;\n            temp = temp * 10 + last;\n            count = count\
    \ + 1;\n        }\n        // System.out.println(\"count: \" + count);\n     \
    \   first = temp / 100;\n        last = temp % 100;\n        // System.out.println(\"\
    first: \" + first);\n        // System.out.println(\"last: \" + last);\n     \
    \   Pair<Long, Long> result = Pair.with(first, last);\n        // System.out.println(\"\
    result: \" + result);\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ even = num / 10000000000000000000L;\n        long odd = num - even * 10000000000000000000L;\n\
    \        return Pair.with(even, odd);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp41hpwx4b.java:16: error: integer number too large\n        long\
    \ even = num / 10000000000000000000L;\n                          ^\n/tmp/tmp41hpwx4b.java:17:\
    \ error: integer number too large\n        long odd = num - even * 10000000000000000000L;\n\
    \                                ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976295
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ even = 0, odd = 0;\n        while (num != 0) {\n            long digit = num\
    \ % 10;\n            num = (num - (digit)) / 10;\n            if (digit % 2 ==\
    \ 0) {\n                even += digit;\n            } else {\n               \
    \ odd += digit;\n            }\n        }\n        return Pair.with(even, odd);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ oddCount = 0;\n        int evenCount = 0;\n        while(num > 0) {\n      \
    \      int digit = num % 10;\n            num /= 10;\n            if(digit % 2\
    \ == 0) {\n                evenCount += digit;\n            }\n            else\
    \ {\n                oddCount += digit;\n            }\n        }\n        return\
    \ Pair.with(oddCount, evenCount);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyvcox52f.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = num % 10;\n                      \
    \      ^\n/tmp/tmpyvcox52f.java:28: error: incompatible types: inference variable\
    \ A has incompatible bounds\n        return Pair.with(oddCount, evenCount);\n\
    \                        ^\n    equality constraints: Long\n    lower bounds:\
    \ Integer\n  where A,B are type-variables:\n    A extends Object declared in method\
    \ <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n2 errors\n"
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ longNum = num;\n        long longEvenEvenDigits = 0;\n        long longEvenOddDigits\
    \ = 0;\n        long longOddEvenDigits = 0;\n        long longOddOddDigits = 0;\n\
    \        while (longNum > 0) {\n            long longDigit = longNum % 10;\n \
    \           longNum /= 10;\n            if (longDigit % 2 == 0) {\n          \
    \      long longEvenEvenDigits++;\n            } else {\n                long\
    \ longEvenOddDigits++;\n            }\n            if (longDigit % 2 == 1) {\n\
    \                long longOddEvenDigits++;\n            } else {\n           \
    \     long longOddOddDigits++;\n            }\n        }\n        return Pair.<Long,\
    \ Long>of(\n                longEvenEvenDigits, longEvenOddDigits);\n    }\n \
    \   public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp41h8d6qh.java:25: error: ';' expected\n                long longEvenEvenDigits++;\n\
    \                                       ^\n/tmp/tmp41h8d6qh.java:27: error: ';'\
    \ expected\n                long longEvenOddDigits++;\n                      \
    \                ^\n/tmp/tmp41h8d6qh.java:30: error: ';' expected\n          \
    \      long longOddEvenDigits++;\n                                      ^\n/tmp/tmp41h8d6qh.java:32:\
    \ error: ';' expected\n                long longOddOddDigits++;\n            \
    \                         ^\n4 errors\n"
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> ret = new Pair<>();\n\n        long evenCount = 0;\n        long oddCount\
    \ = 0;\n\n        if (num < 0) {\n            num = -num;\n            ret.first\
    \ = new Long(-num);\n            ret.second = new Long(-num);\n            return\
    \ ret;\n        }\n\n        long currentNum = num;\n        while (currentNum\
    \ != 0) {\n            currentNum = currentNum / 10;\n            if (currentNum\
    \ % 2 == 0) {\n                evenCount++;\n            } else {\n          \
    \      oddCount++;\n            }\n        }\n        ret.first = new Long(evenCount);\n\
    \        ret.second = new Long(oddCount);\n        return ret;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzxhs6o5q.java:16: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Long, Long> ret = new Pair<>();\n                              \
    \ ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and formal argument\
    \ lists differ in length)\n  where A,B are type-variables:\n    A extends Object\
    \ declared in class Pair\n    B extends Object declared in class Pair\n/tmp/tmpzxhs6o5q.java:23:\
    \ error: cannot find symbol\n            ret.first = new Long(-num);\n       \
    \        ^\n  symbol:   variable first\n  location: variable ret of type Pair<Long,Long>\n\
    /tmp/tmpzxhs6o5q.java:23: warning: [removal] Long(long) in Long has been deprecated\
    \ and marked for removal\n            ret.first = new Long(-num);\n          \
    \              ^\n/tmp/tmpzxhs6o5q.java:24: error: cannot find symbol\n      \
    \      ret.second = new Long(-num);\n               ^\n  symbol:   variable second\n\
    \  location: variable ret of type Pair<Long,Long>\n/tmp/tmpzxhs6o5q.java:24: warning:\
    \ [removal] Long(long) in Long has been deprecated and marked for removal\n  \
    \          ret.second = new Long(-num);\n                         ^\n/tmp/tmpzxhs6o5q.java:37:\
    \ error: cannot find symbol\n        ret.first = new Long(evenCount);\n      \
    \     ^\n  symbol:   variable first\n  location: variable ret of type Pair<Long,Long>\n\
    /tmp/tmpzxhs6o5q.java:37: warning: [removal] Long(long) in Long has been deprecated\
    \ and marked for removal\n        ret.first = new Long(evenCount);\n         \
    \           ^\n/tmp/tmpzxhs6o5q.java:38: error: cannot find symbol\n        ret.second\
    \ = new Long(oddCount);\n           ^\n  symbol:   variable second\n  location:\
    \ variable ret of type Pair<Long,Long>\n/tmp/tmpzxhs6o5q.java:38: warning: [removal]\
    \ Long(long) in Long has been deprecated and marked for removal\n        ret.second\
    \ = new Long(oddCount);\n                     ^\n5 errors\n4 warnings\n"
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ evenCount = 0;\n        long oddCount = 0;\n        while (num > 0) {\n    \
    \        int digit = num % 10;\n            num = (int) Math.floor(num / 10);\n\
    \            if (digit % 2 == 0)\n                evenCount++;\n            else\n\
    \                oddCount++;\n        }\n        return Pair.with((long) evenCount,\
    \ (long) oddCount);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ftvt71v.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = num % 10;\n                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> pair = null;\n        long evenDigits = 0;\n        long oddDigits = 0;\n\
    \        if (num < 0) {\n            num = -num;\n        }\n        int len =\
    \ (int) Math.ceil(Math.log10(num));\n        // System.out.println(len);\n   \
    \     if (len == 0) {\n            return null;\n        }\n        Long digit\
    \ = num;\n        for (int i = 1; i < len; i++) {\n            digit = num / 10l;\n\
    \            oddDigits += (int) Math.ceil(digit);\n            digit = num % 10l;\n\
    \            evenDigits += (int) Math.ceil(digit);\n            num = num / 10;\n\
    \        }\n        if (len > 0) {\n            if (num == 1) {\n            \
    \    digit = num;\n                oddDigits += (int) Math.ceil(digit);\n    \
    \            digit = num % 10l;\n                evenDigits += (int) Math.ceil(digit);\n\
    \            }\n        }\n        pair = Pair.with(evenDigits, oddDigits);\n\
    \        return pair;\n    }\n    public static void main(String[] args) {\n \
    \   assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0 ) {\n            throw new IllegalArgumentException(\"invalid number:\
    \ \" + num);\n        }\n        long tens  = num / 10l;\n        long ones  =\
    \ num % 10;\n        return new Pair<>(Long.valueOf(ones), Long.valueOf(tens));\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> pair = Pair.with(1l, 1l);\n        if (num == 0) {\n            return\
    \ pair;\n        }\n        if (num < 0) {\n            return pair;\n       \
    \ }\n        if (num % 2 == 0) {\n            pair = Pair.with(1l, 1l);\n    \
    \    } else {\n            pair = Pair.with(2l, 1l);\n        }\n        while\
    \ (num > 0) {\n            long digit = num % 10;\n            if (digit % 2 ==\
    \ 0) {\n                pair = Pair.with(pair.getLeft() + 1, pair.getRight() +\
    \ 1);\n            }\n            num = num / 10;\n        }\n        return pair;\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0tgdag6a.java:31: error: cannot find symbol\n                pair\
    \ = Pair.with(pair.getLeft() + 1, pair.getRight() + 1);\n                    \
    \                 ^\n  symbol:   method getLeft()\n  location: variable pair of\
    \ type Pair<Long,Long>\n/tmp/tmp0tgdag6a.java:31: error: cannot find symbol\n\
    \                pair = Pair.with(pair.getLeft() + 1, pair.getRight() + 1);\n\
    \                                                         ^\n  symbol:   method\
    \ getRight()\n  location: variable pair of type Pair<Long,Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> evenCountPair = Pair.of(0l, 0l);\n        Pair<Long, Long> oddCountPair\
    \ = Pair.of(0l, 0l);\n        long numLong = num;\n        long lastNum = num;\n\
    \        while (numLong > 0) {\n            lastNum = numLong;\n            numLong\
    \ = numLong / 10;\n            if (numLong % 2 != 0) {\n                oddCountPair\
    \ = Pair.of(oddCountPair.getFirst() + 1, oddCountPair.getSecond() + 1);\n    \
    \        } else {\n                evenCountPair = Pair.of(evenCountPair.getFirst()\
    \ + 1, evenCountPair.getSecond() + 1);\n            }\n        }\n        return\
    \ Pair.with(evenCountPair.getFirst(), oddCountPair.getFirst());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwzh3odop.java:16: error: cannot find symbol\n        Pair<Long,\
    \ Long> evenCountPair = Pair.of(0l, 0l);\n                                   \
    \          ^\n  symbol:   method of(long,long)\n  location: class Pair\n/tmp/tmpwzh3odop.java:17:\
    \ error: cannot find symbol\n        Pair<Long, Long> oddCountPair = Pair.of(0l,\
    \ 0l);\n                                            ^\n  symbol:   method of(long,long)\n\
    \  location: class Pair\n/tmp/tmpwzh3odop.java:24: error: cannot find symbol\n\
    \                oddCountPair = Pair.of(oddCountPair.getFirst() + 1, oddCountPair.getSecond()\
    \ + 1);\n                                                   ^\n  symbol:   method\
    \ getFirst()\n  location: variable oddCountPair of type Pair<Long,Long>\n/tmp/tmpwzh3odop.java:24:\
    \ error: cannot find symbol\n                oddCountPair = Pair.of(oddCountPair.getFirst()\
    \ + 1, oddCountPair.getSecond() + 1);\n                                      \
    \                                          ^\n  symbol:   method getSecond()\n\
    \  location: variable oddCountPair of type Pair<Long,Long>\n/tmp/tmpwzh3odop.java:26:\
    \ error: cannot find symbol\n                evenCountPair = Pair.of(evenCountPair.getFirst()\
    \ + 1, evenCountPair.getSecond() + 1);\n                                     \
    \                ^\n  symbol:   method getFirst()\n  location: variable evenCountPair\
    \ of type Pair<Long,Long>\n/tmp/tmpwzh3odop.java:26: error: cannot find symbol\n\
    \                evenCountPair = Pair.of(evenCountPair.getFirst() + 1, evenCountPair.getSecond()\
    \ + 1);\n                                                                    \
    \               ^\n  symbol:   method getSecond()\n  location: variable evenCountPair\
    \ of type Pair<Long,Long>\n/tmp/tmpwzh3odop.java:29: error: cannot find symbol\n\
    \        return Pair.with(evenCountPair.getFirst(), oddCountPair.getFirst());\n\
    \                                      ^\n  symbol:   method getFirst()\n  location:\
    \ variable evenCountPair of type Pair<Long,Long>\n/tmp/tmpwzh3odop.java:29: error:\
    \ cannot find symbol\n        return Pair.with(evenCountPair.getFirst(), oddCountPair.getFirst("
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0) {\n            throw new IllegalArgumentException(\"Negative numbers\
    \ not allowed\");\n        }\n        long even = 0, odd = 0;\n        while (num\
    \ > 0) {\n            long mod = num % (10l); // get the last digit from the right\
    \ hand side of the number in modulus 10\n            if (mod == 0) {\n       \
    \         even++; // if the last digit of the number is 0, then it is even\n \
    \           } else if (mod != 0) {\n                odd++; // if it's not 0, then\
    \ it is odd\n            }\n            num /= 10l; // remove the last digit\n\
    \        }\n        return new Pair<Long, Long>(even, odd);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ count = 0L;\n        long evenCount = 0L;\n        long oddCount = 0L;\n   \
    \     while (num >= 0) {\n            long digit = num % 10;\n            count\
    \ += digit;\n            if (digit % 2 == 0) {\n                evenCount += digit;\n\
    \            } else {\n                oddCount += digit;\n            }\n   \
    \         num /= 10;\n        }\n        return Pair.with((long) evenCount, (long)\
    \ oddCount);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ count = 0;\n        if (num < 0) {\n            num = -num;\n        }\n   \
    \     long remain = num;\n        while (remain > 0){\n            count = (int)\
    \ (remain % 10);\n            remain = remain / 10;\n            if (remain %\
    \ 2 != 0 && count != 0) {\n                return new Pair<Long, Long>(count,\
    \ remain);\n            }\n        }\n        return Pair.with(1, 1);\n    }\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkxh6i_wr.java:25: error: incompatible types: int cannot be converted\
    \ to Long\n                return new Pair<Long, Long>(count, remain);\n     \
    \                                       ^\n/tmp/tmpkxh6i_wr.java:28: error: incompatible\
    \ types: inference variable A has incompatible bounds\n        return Pair.with(1,\
    \ 1);\n                        ^\n    equality constraints: Long\n    lower bounds:\
    \ Integer\n  where A,B are type-variables:\n    A extends Object declared in method\
    \ <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1659976296
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ digit = num;\n        Long even = 0l, odd = 0l;\n        while (num > 0) {\n\
    \            digit = num % 10;\n            if (digit % 2 == 0) {\n          \
    \      even++;\n            }\n            else {\n                odd++;\n  \
    \          }\n            num /= 10;\n        }\n        return Pair.with(odd,\
    \ even);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Long\
    \ result = new Long(0);\n        Long even = new Long(0);\n        Long odd =\
    \ new Long(0);\n\n        if (num < 0)\n            throw new IllegalArgumentException(\"\
    Negative number cannot be processed.\");\n        if (num == 0) {\n          \
    \  return Pair.of(0, 0);\n        }\n        long tmp = num;\n        do {\n \
    \           tmp = tmp * 10l;\n            result += tmp;\n            long i =\
    \ 1l << 30;\n            while ((i--) != 0) {\n                if (tmp & i)\n\
    \                    even++;\n                else\n                    odd++;\n\
    \            }\n        } while ((tmp = tmp >> 30) != 0);\n        return Pair.of(even,\
    \ odd);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpovsnwka9.java:16: warning: [removal] Long(long) in Long has been\
    \ deprecated and marked for removal\n        Long result = new Long(0);\n    \
    \                  ^\n/tmp/tmpovsnwka9.java:17: warning: [removal] Long(long)\
    \ in Long has been deprecated and marked for removal\n        Long even = new\
    \ Long(0);\n                    ^\n/tmp/tmpovsnwka9.java:18: warning: [removal]\
    \ Long(long) in Long has been deprecated and marked for removal\n        Long\
    \ odd = new Long(0);\n                   ^\n/tmp/tmpovsnwka9.java:23: error: cannot\
    \ find symbol\n            return Pair.of(0, 0);\n                       ^\n \
    \ symbol:   method of(int,int)\n  location: class Pair\n/tmp/tmpovsnwka9.java:31:\
    \ error: incompatible types: long cannot be converted to boolean\n           \
    \     if (tmp & i)\n                        ^\n/tmp/tmpovsnwka9.java:37: error:\
    \ cannot find symbol\n        return Pair.of(even, odd);\n                   ^\n\
    \  symbol:   method of(Long,Long)\n  location: class Pair\n3 errors\n3 warnings\n"
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ longNum = num;\n        List<Integer> oddNums = IntStream.rangeClosed(1, (int)\
    \ Math.ceil(Math.log10(longNum)) + 1)\n            .filter(i -> longNum % Math.pow(10,\
    \ i) == 0)\n            .boxed()\n            .collect(Collectors.toList());\n\
    \        List<Integer> evenNums = IntStream.rangeClosed(1, (int) Math.ceil(Math.log10(longNum))\
    \ + 1)\n            .filter(i -> longNum % Math.pow(10, i) != 0)\n           \
    \ .boxed()\n            .collect(Collectors.toList());\n        Long evenNumCount\
    \ = (long) Math.pow(10, evenNums.size());\n        Long oddNumCount = (long) Math.pow(10,\
    \ oddNums.size());\n        return Pair.with(evenNumCount, oddNumCount);\n   \
    \ }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ count = 0;\n        long evenCount = 0;\n        long oddCount = 0;\n\n    \
    \    long temp = num;\n        while (temp != 0) {\n            count++;\n   \
    \         temp /= 10;\n        }\n\n        temp = num;\n        while (temp !=\
    \ 0) {\n            evenCount++;\n            temp /= 10;\n        }\n       \
    \ if (evenCount % 2 == 0) {\n            oddCount++;\n        }\n\n        return\
    \ Pair.with(evenCount, oddCount);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        return\
    \ num % 2 == 0 ? Pair.<Long, Long>of(1L, num / 2) : Pair.<Long, Long>of(1L, num);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmzml06q4.java:16: error: cannot find symbol\n        return num\
    \ % 2 == 0 ? Pair.<Long, Long>of(1L, num / 2) : Pair.<Long, Long>of(1L, num);\n\
    \                                  ^\n  symbol:   method <Long,Long>of(long,long)\n\
    \  location: class Pair\n/tmp/tmpmzml06q4.java:16: error: cannot find symbol\n\
    \        return num % 2 == 0 ? Pair.<Long, Long>of(1L, num / 2) : Pair.<Long,\
    \ Long>of(1L, num);\n                                                        \
    \             ^\n  symbol:   method <Long,Long>of(long,long)\n  location: class\
    \ Pair\n2 errors\n"
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ oddDigits = 0;\n        int evenDigits = 0;\n        long tempNum = num;\n \
    \       while(tempNum != 0) {\n            int remainder = tempNum % 10;\n   \
    \         tempNum /= 10;\n            evenDigits++;\n            if (remainder\
    \ % 2 == 1) {\n                oddDigits++;\n            }\n        }\n      \
    \  return Pair.with(oddDigits, evenDigits);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgk6ldd1n.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int remainder = tempNum % 10;\n              \
    \                      ^\n/tmp/tmpgk6ldd1n.java:27: error: incompatible types:\
    \ inference variable A has incompatible bounds\n        return Pair.with(oddDigits,\
    \ evenDigits);\n                        ^\n    equality constraints: Long\n  \
    \  lower bounds: Integer\n  where A,B are type-variables:\n    A extends Object\
    \ declared in method <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ count = 0;\n        long oddSum = 0;\n        while (num /= 10) {\n        \
    \    count++;\n            num = num % 10;\n        }\n        while (num /= 10)\
    \ {\n            oddSum += (num % 10);\n            num = num / 10;\n        }\n\
    \        return Pair.with(count, oddSum);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp107a3ndc.java:18: error: incompatible types: long cannot be converted\
    \ to boolean\n        while (num /= 10) {\n                   ^\n/tmp/tmp107a3ndc.java:22:\
    \ error: incompatible types: long cannot be converted to boolean\n        while\
    \ (num /= 10) {\n                   ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        num\
    \ = Math.abs(num);\n        long even = 0, odd = 0;\n        if (num < 0)\n  \
    \          num = -num;\n        StringTokenizer st = new StringTokenizer(Long.toString(num),\
    \ \"\");\n        while (st.hasMoreTokens()) {\n            String s = st.nextToken();\n\
    \            if (s.charAt(0) == '0')\n                even += s.length() - 1;\n\
    \            else\n                odd += s.length() - 1;\n        }\n       \
    \ return new Pair<>(even, odd);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ even = 0;\n        long odd = 0;\n        long numDig = Math.abs(num);\n\n \
    \       boolean sign = true;\n        if (num < 0)\n            sign = false;\n\
    \n        long i = 1;\n        long temp;\n        while (true) {\n          \
    \  temp = num % 10;\n            if (temp == 0)\n                break;\n    \
    \        i++;\n        }\n\n        num = num / 10;\n        temp = num % 10;\n\
    \        if (temp == 0) {\n            even++;\n            temp = num % 10;\n\
    \        }\n        odd = temp;\n        if (sign) {\n            even--;\n  \
    \      }\n        return new Pair<>(even, odd);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n\
    \    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        //\
    \ your code\n        return new Pair<>(1l, 1l);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n\
    \    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ count = 0;\n        int remainder = 0;\n        while (num /= 10) {\n      \
    \      count++;\n            remainder = num % 10;\n            num = (num - remainder)\
    \ / 10;\n        }\n        return Pair.with(count, remainder);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0u93ibl2.java:18: error: incompatible types: long cannot be converted\
    \ to boolean\n        while (num /= 10) {\n                   ^\n/tmp/tmp0u93ibl2.java:20:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        remainder = num % 10;\n                            ^\n/tmp/tmp0u93ibl2.java:23:\
    \ error: incompatible types: inference variable A has incompatible bounds\n  \
    \      return Pair.with(count, remainder);\n                        ^\n    equality\
    \ constraints: Long\n    lower bounds: Integer\n  where A,B are type-variables:\n\
    \    A extends Object declared in method <A,B>with(A,B)\n    B extends Object\
    \ declared in method <A,B>with(A,B)\n3 errors\n"
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> pair = Pair.with(1L, 1L);\n        long base = Math.abs(num);\n      \
    \  long remainder = num % base;\n        int count = 0;\n        while (remainder\
    \ > 0) {\n            count += (remainder % 2) == 0 ? 1 : 0;\n            remainder\
    \ = remainder / 2;\n        }\n        pair.evenOdd = Pair.of(count, base - count);\n\
    \        return pair;\n    }\n    public static void main(String[] args) {\n \
    \   assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp07baebhe.java:24: error: cannot find symbol\n        pair.evenOdd\
    \ = Pair.of(count, base - count);\n            ^\n  symbol:   variable evenOdd\n\
    \  location: variable pair of type Pair<Long,Long>\n/tmp/tmp07baebhe.java:24:\
    \ error: cannot find symbol\n        pair.evenOdd = Pair.of(count, base - count);\n\
    \                           ^\n  symbol:   method of(int,long)\n  location: class\
    \ Pair\n2 errors\n"
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ evenDig = 0, oddDig = 0;\n        long sumOfEven = 0, sumOfOdd = 0, sumOfEvenAndOdd\
    \ = 0, sumOfEvenAndOdd = 0;\n        for (int i = Integer.MIN_VALUE; i < num;\
    \ ++i) {\n            int rem = 0;\n            while (num % 10 == 0) {\n    \
    \            rem += num % 10;\n                num /= 10;\n            }\n   \
    \         if (rem % 2 == 0) {\n                evenDig += rem;\n             \
    \   sumOfEven += rem;\n            } else {\n                oddDig += rem;\n\
    \                sumOfOdd += rem;\n            }\n        }\n        sumOfEvenAndOdd\
    \ = (evenDig + oddDig) / 2;\n        sumOfEvenAndOdd = sumOfEvenAndOdd * 2;\n\
    \        sumOfEvenAndOdd += evenDig * 2;\n        sumOfEvenAndOdd += oddDig;\n\
    \        sumOfEvenAndOdd += evenDig + oddDig;\n        return Pair.of(sumOfEven,\
    \ sumOfOdd);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ib29c_t.java:17: error: variable sumOfEvenAndOdd is already defined\
    \ in method evenOddCount(long)\n        long sumOfEven = 0, sumOfOdd = 0, sumOfEvenAndOdd\
    \ = 0, sumOfEvenAndOdd = 0;\n                                                \
    \               ^\n/tmp/tmp5ib29c_t.java:37: error: cannot find symbol\n     \
    \   return Pair.of(sumOfEven, sumOfOdd);\n                   ^\n  symbol:   method\
    \ of(long,long)\n  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ sum = 0;\n        long countEven = 0;\n        long countOdd = 0;\n        while\
    \ (true) {\n            int num = num / 10;\n            if (num == 0) {\n   \
    \             break;\n            } else {\n                if (num % 2 == 0)\
    \ {\n                    countEven++;\n                } else {\n            \
    \        countOdd++;\n                }\n            }\n            sum += num;\n\
    \        }\n        if (num > 0) {\n            countEven += num / 2;\n      \
    \  }\n        return new Pair<>(sum, sum - (countEven * 2));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_xeopq9v.java:20: error: variable num is already defined in method\
    \ evenOddCount(long)\n            int num = num / 10;\n                ^\n1 error\n"
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ zero = 0;\n        long one = 1;\n        long two = 2;\n        long three\
    \ = 3;\n        long four = 4;\n        long five = 5;\n        long six = 6;\n\
    \        long seven = 7;\n        long eight = 8;\n        long nine = 9;\n  \
    \      long ten = 10;\n        long hundred = 100;\n        long thousand = 1000;\n\
    \        long million = 1000000;\n        long billion = 100000000;\n        long\
    \ trillion = 1000000000;\n        long quadrillion = 1000000000000;\n        long\
    \ quintillion = 1000000000000000;\n        long sextillion = 100000000000000000;\n\
    \        long septillion = 1000000000000000000;\n        long octillion = 10000000000000000000;\n\
    \        long nonillion = 1000000000000000000000;\n        long decillion = 1000000000000000000000;\n\
    \        long undecillion = 10000000000000000000000;\n        long duodecillion\
    \ = 100000000000000000000000;\n        long tredecillion = 10000000000000000000000000;\n\
    \        long quattuordecillion = 1000000000000000000000000000;\n        long\
    \ cindecillion = 10000000000000000000000000000;\n        long sexdecillion = 10000000000000000000000000000000;\n\
    \        long septendecillion = 1000000000000000000000000000000000;\n        long\
    \ octodecillion = 100000000000000000000000000000000000;\n        long novemdecillion\
    \ = 1000000000000000000000000000000000000;\n        long vigintillion = 1000000000000000000000000000000000;\
    \ // a billion is just 10^10\n        long quadrillionillion = 10000000000000000000000000000000000;\
    \ // a trillion is just 10^10\n        long quintillionillion = 100000000000000000000000000000000000;\n\
    \        long sextillionillion = 1000000000000000000000000000000000000;\n    \
    \    long septillionillion = 10000000000000000000000000000000000000; // a million\
    \ is just 10^10\n        long octillionillion = 100000000000000000000000000000000000000;\n\
    \        long nonillionillion = 1000000000000000000000000000000000000000;\n  \
    \      long decillionillion = 100000000000000000000000000000000000000000;\n  \
    \      long undecillionillion = 100000000000000000000000000000000000000000; //\
    \ a billion is just 10^10\n        long duodecillionillion = 10000000000000000000000000000000000000000000;\n\
    \        long tredecillionillion = 100000000000000000000000000000000000000000000;\n\
    \        long quattuordecillionillion = 10000000000000000000000000000000000000000000000;\n\
    \        long cindecillionillion = 100000000000000000000000000000000000000000000000;\n\
    \        long sexdecillionillion = 10000000000000000000000000000000000000000000000000;\n\
    \        long septendecillionillion = \n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdqpi4wfp.java:32: error: integer number too large\n        long\
    \ quadrillion = 1000000000000;\n                           ^\n/tmp/tmpdqpi4wfp.java:33:\
    \ error: integer number too large\n        long quintillion = 1000000000000000;\n\
    \                           ^\n/tmp/tmpdqpi4wfp.java:34: error: integer number\
    \ too large\n        long sextillion = 100000000000000000;\n                 \
    \         ^\n/tmp/tmpdqpi4wfp.java:35: error: integer number too large\n     \
    \   long septillion = 1000000000000000000;\n                          ^\n/tmp/tmpdqpi4wfp.java:36:\
    \ error: integer number too large\n        long octillion = 10000000000000000000;\n\
    \                         ^\n/tmp/tmpdqpi4wfp.java:37: error: integer number too\
    \ large\n        long nonillion = 1000000000000000000000;\n                  \
    \       ^\n/tmp/tmpdqpi4wfp.java:38: error: integer number too large\n       \
    \ long decillion = 1000000000000000000000;\n                         ^\n/tmp/tmpdqpi4wfp.java:39:\
    \ error: integer number too large\n        long undecillion = 10000000000000000000000;\n\
    \                           ^\n/tmp/tmpdqpi4wfp.java:40: error: integer number\
    \ too large\n        long duodecillion = 100000000000000000000000;\n         \
    \                   ^\n/tmp/tmpdqpi4wfp.java:41: error: integer number too large\n\
    \        long tredecillion = 10000000000000000000000000;\n                   \
    \         ^\n/tmp/tmpdqpi4wfp.java:42: error: integer number too large\n     \
    \   long quattuordecillion = 1000000000000000000000000000;\n                 \
    \                ^\n/tmp/tmpdqpi4wfp.java:43: error: integer number too large\n\
    \        long cindecillion = 10000000000000000000000000000;\n                \
    \            ^\n/tmp/tmpdqpi4wfp.java:44: error: integer number too large\n  \
    \      long sexdecillion = 10000000000000000000000000000000;\n               \
    \             ^\n/tmp/tmpdqpi4wfp.java:45: error: integer number too large\n \
    \       long septendecillion = 1000000000000000000000000000000000;\n         \
    \                      ^\n/tmp/tmpdqpi4wfp.java:46: error: integer number too\
    \ large\n        long octodecillion ="
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long[]\
    \ digits = new long[(int) Math.ceil(Math.log10(num)) + 1];\n        int i = 0;\n\
    \        while (num > 0) {\n            digits[i++] = num % 10;\n            num\
    \ /= 10;\n        }\n        Arrays.sort(digits);\n\n        int odd = 0;\n  \
    \      int even = 0;\n        for (int i = 0; i < digits.length; ++i) {\n    \
    \        if (digits[i] % 2 == 1) {\n                ++odd;\n            } else\
    \ {\n                ++even;\n            }\n        }\n\n        return Pair.with(odd,\
    \ even);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9trreimi.java:26: error: variable i is already defined in method\
    \ evenOddCount(long)\n        for (int i = 0; i < digits.length; ++i) {\n    \
    \             ^\n/tmp/tmp9trreimi.java:34: error: incompatible types: inference\
    \ variable A has incompatible bounds\n        return Pair.with(odd, even);\n \
    \                       ^\n    equality constraints: Long\n    lower bounds: Integer\n\
    \  where A,B are type-variables:\n    A extends Object declared in method <A,B>with(A,B)\n\
    \    B extends Object declared in method <A,B>with(A,B)\n2 errors\n"
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        num\
    \ = Math.abs(num);\n        int evens = 0;\n        int odds = 0;\n        int\
    \ nDigits = (int)Math.log10(num) + 1;\n        for (int d = nDigits - 1; d >=\
    \ 0; d--) {\n            if (num / Math.pow(10, d) % 2 == 0)\n               \
    \ evens++;\n            else\n                odds++;\n        }\n        return\
    \ Pair.with((long)evens, (long) odds);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        final\
    \ AtomicLong even = new AtomicLong();\n        final AtomicLong odd = new AtomicLong();\n\
    \        long counter = 0;\n        do {\n            long n = num % 10;\n   \
    \         counter++;\n            num = num / 10;\n            if (n != 0) {\n\
    \                if (n % 2 == 0) {\n                    even.add(n);\n       \
    \         } else {\n                    odd.add(n);\n                }\n     \
    \       }\n        } while (num > 0);\n        return new Pair<>(even.get(), odd.get());\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9b75y2aw.java:16: error: cannot find symbol\n        final AtomicLong\
    \ even = new AtomicLong();\n              ^\n  symbol:   class AtomicLong\n  location:\
    \ class Problem\n/tmp/tmp9b75y2aw.java:16: error: cannot find symbol\n       \
    \ final AtomicLong even = new AtomicLong();\n                                \
    \    ^\n  symbol:   class AtomicLong\n  location: class Problem\n/tmp/tmp9b75y2aw.java:17:\
    \ error: cannot find symbol\n        final AtomicLong odd = new AtomicLong();\n\
    \              ^\n  symbol:   class AtomicLong\n  location: class Problem\n/tmp/tmp9b75y2aw.java:17:\
    \ error: cannot find symbol\n        final AtomicLong odd = new AtomicLong();\n\
    \                                   ^\n  symbol:   class AtomicLong\n  location:\
    \ class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1659976297
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ count = 0;\n        long even = 0;\n        long odd = 0;\n        long temp\
    \ = num;\n        while (temp != 0) {\n            if (temp % 2 == 0) {\n    \
    \            even++;\n            }\n            temp = temp / 2;\n        }\n\
    \        while (temp != 0) {\n            if (temp % 2 != 0) {\n             \
    \   odd++;\n            }\n            temp = temp / 2;\n        }\n        return\
    \ Pair.with(even, odd);\n    }\n    public static void main(String[] args) {\n\
    \    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> evenPair = new Pair<>(0L, 0L);\n        Pair<Long, Long> oddPair = new\
    \ Pair<>(0L, 0L);\n        int count = 0;\n        do {\n            int rem =\
    \ num % 10;\n            if (rem % 2 == 0) {\n                evenPair.first++;\n\
    \                evenPair.second++;\n            }\n            if (rem % 2 !=\
    \ 0) {\n                oddPair.first++;\n                oddPair.second++;\n\
    \            }\n            num/=10;\n            count++;\n        } while (num\
    \ > 0L);\n        Pair<Long, Long> result = Pair.with(evenPair.first, evenPair.second);\n\
    \        return Pair.with(oddPair.first, oddPair.second);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo0wq2xdq.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int rem = num % 10;\n                        \
    \  ^\n/tmp/tmpo0wq2xdq.java:22: error: cannot find symbol\n                evenPair.first++;\n\
    \                        ^\n  symbol:   variable first\n  location: variable evenPair\
    \ of type Pair<Long,Long>\n/tmp/tmpo0wq2xdq.java:23: error: cannot find symbol\n\
    \                evenPair.second++;\n                        ^\n  symbol:   variable\
    \ second\n  location: variable evenPair of type Pair<Long,Long>\n/tmp/tmpo0wq2xdq.java:26:\
    \ error: cannot find symbol\n                oddPair.first++;\n              \
    \         ^\n  symbol:   variable first\n  location: variable oddPair of type\
    \ Pair<Long,Long>\n/tmp/tmpo0wq2xdq.java:27: error: cannot find symbol\n     \
    \           oddPair.second++;\n                       ^\n  symbol:   variable\
    \ second\n  location: variable oddPair of type Pair<Long,Long>\n/tmp/tmpo0wq2xdq.java:32:\
    \ error: cannot find symbol\n        Pair<Long, Long> result = Pair.with(evenPair.first,\
    \ evenPair.second);\n                                                    ^\n \
    \ symbol:   variable first\n  location: variable evenPair of type Pair<Long,Long>\n\
    /tmp/tmpo0wq2xdq.java:32: error: cannot find symbol\n        Pair<Long, Long>\
    \ result = Pair.with(evenPair.first, evenPair.second);\n                     \
    \                                               ^\n  symbol:   variable second\n\
    \  location: variable evenPair of type Pair<Long,Long>\n/tmp/tmpo0wq2xdq.java:33:\
    \ error: cannot find symbol\n        return Pair.with(oddPair.first, oddPair.second);\n\
    \                                ^\n  symbol:   variable first\n  location: variable\
    \ oddPair of type Pair<Long,Long>\n/tmp/tmpo0wq2xdq.java:33: error: cannot find\
    \ symbol\n        return Pair.with(oddPair.first, oddPair.second);\n         \
    \                                      ^\n  symbol:   variable second\n  location:\
    \ variable oddPair of type Pair<Long,Long>\n9 errors\n"
  stdout: ''
  timestamp: 1659976298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        final\
    \ long digit = num % 10;\n        final long evenNum = num / 10;\n        final\
    \ long oddNum = num / 100;\n        return Pair.of(digit * 10l, evenNum * 10l\
    \ + digit);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmploy1l7av.java:19: error: cannot find symbol\n        return Pair.of(digit\
    \ * 10l, evenNum * 10l + digit);\n                   ^\n  symbol:   method of(long,long)\n\
    \  location: class Pair\n1 error\n"
  stdout: ''
  timestamp: 1659976298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        return\
    \ Pair.with(evenDigits(num), oddDigits(num));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphl8t047v.java:16: error: cannot find symbol\n        return Pair.with(evenDigits(num),\
    \ oddDigits(num));\n                         ^\n  symbol:   method evenDigits(long)\n\
    \  location: class Problem\n/tmp/tmphl8t047v.java:16: error: cannot find symbol\n\
    \        return Pair.with(evenDigits(num), oddDigits(num));\n                \
    \                          ^\n  symbol:   method oddDigits(long)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> even = Pair.with(0l, num);\n        long n = Math.abs(num);\n        Pair<Long,\
    \ Long> odd = Pair.with(0l, n);\n        for (int i = 2; i <= n; i++) {\n    \
    \        long c = num / i;\n            if (c % 2 == 0) {\n                even\
    \ = Pair.with(even.getLeft() + c, even.getRight());\n            } else {\n  \
    \              odd = Pair.with(odd.getLeft() + c, odd.getRight());\n         \
    \   }\n        }\n        return Pair.with(even, odd);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps3jwig3_.java:22: error: cannot find symbol\n                even\
    \ = Pair.with(even.getLeft() + c, even.getRight());\n                        \
    \             ^\n  symbol:   method getLeft()\n  location: variable even of type\
    \ Pair<Long,Long>\n/tmp/tmps3jwig3_.java:22: error: cannot find symbol\n     \
    \           even = Pair.with(even.getLeft() + c, even.getRight());\n         \
    \                                                ^\n  symbol:   method getRight()\n\
    \  location: variable even of type Pair<Long,Long>\n/tmp/tmps3jwig3_.java:24:\
    \ error: cannot find symbol\n                odd = Pair.with(odd.getLeft() + c,\
    \ odd.getRight());\n                                   ^\n  symbol:   method getLeft()\n\
    \  location: variable odd of type Pair<Long,Long>\n/tmp/tmps3jwig3_.java:24: error:\
    \ cannot find symbol\n                odd = Pair.with(odd.getLeft() + c, odd.getRight());\n\
    \                                                      ^\n  symbol:   method getRight()\n\
    \  location: variable odd of type Pair<Long,Long>\n/tmp/tmps3jwig3_.java:27: error:\
    \ incompatible types: inference variable A has incompatible bounds\n        return\
    \ Pair.with(even, odd);\n                        ^\n    equality constraints:\
    \ Long\n    lower bounds: Pair<Long,Long>\n  where A,B are type-variables:\n \
    \   A extends Object declared in method <A,B>with(A,B)\n    B extends Object declared\
    \ in method <A,B>with(A,B)\n5 errors\n"
  stdout: ''
  timestamp: 1659976298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        final\
    \ long base10 = num;\n        // 1. convert to string -> remove all even and odd\
    \ digit\n        // 2. convert to int -> remove all even and odd digit\n     \
    \   // 3. check if int is odd or even\n        // 4. convert to long -> return\
    \ as Pair\n\n        final StringBuilder sb = new StringBuilder();\n        String\
    \ number = String.valueOf(num);\n        char[] chars = number.toCharArray();\n\
    \        int evenCount = 0;\n        int oddCount = 0;\n        for (char c :\
    \ chars) {\n            int digit = (int) c;\n            if (digit % 2 == 0)\
    \ {\n                evenCount++;\n            } else {\n                oddCount++;\n\
    \            }\n            sb.append(digit);\n        }\n\n        // check number\
    \ if odd or even\n        long number = Long.parseLong(sb.toString());\n     \
    \   if ((number % 2) == 0) {\n            return Pair.with(sb.length(), sb.length());\n\
    \        } else {\n            return Pair.with(sb.length(), sb.length());\n \
    \       }\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4gp9n0vb.java:38: error: variable number is already defined in\
    \ method evenOddCount(long)\n        long number = Long.parseLong(sb.toString());\n\
    \             ^\n/tmp/tmp4gp9n0vb.java:40: error: incompatible types: inference\
    \ variable A has incompatible bounds\n            return Pair.with(sb.length(),\
    \ sb.length());\n                            ^\n    equality constraints: Long\n\
    \    lower bounds: Integer\n  where A,B are type-variables:\n    A extends Object\
    \ declared in method <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n\
    /tmp/tmp4gp9n0vb.java:42: error: incompatible types: inference variable A has\
    \ incompatible bounds\n            return Pair.with(sb.length(), sb.length());\n\
    \                            ^\n    equality constraints: Long\n    lower bounds:\
    \ Integer\n  where A,B are type-variables:\n    A extends Object declared in method\
    \ <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n3 errors\n"
  stdout: ''
  timestamp: 1659976298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        boolean\
    \ isEven = false;\n        boolean isOdd = true;\n        int evenCount = 0;\n\
    \        int oddCount = 0;\n        long odd = 0;\n        long even = 0;\n  \
    \      while (true) {\n            if (isEven && (num / 10) % 2 == 0) {\n    \
    \            evenCount++;\n            }\n            if (isOdd && (num / 10)\
    \ % 2 == 1) {\n                oddCount++;\n            }\n            if (num\
    \ / 10 == 0) {\n                break;\n            }\n            isEven = num\
    \ % 10 == 0;\n            isOdd = num % 10 == 1;\n            odd = num % 10;\n\
    \            num = num / 10;\n        }\n        return Pair.with(evenCount, oddCount);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpai4gpo3m.java:37: error: incompatible types: inference variable\
    \ A has incompatible bounds\n        return Pair.with(evenCount, oddCount);\n\
    \                        ^\n    equality constraints: Long\n    lower bounds:\
    \ Integer\n  where A,B are type-variables:\n    A extends Object declared in method\
    \ <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n1 error\n"
  stdout: ''
  timestamp: 1659976298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ n = Math.abs(num);\n        int n1 = n / 2;\n        long n2 = n % 2;\n    \
    \    return new Pair<>(n1, n2);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc2c877b5.java:16: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int n = Math.abs(num);\n                        ^\n\
    /tmp/tmpc2c877b5.java:19: error: incompatible types: cannot infer type arguments\
    \ for Pair<>\n        return new Pair<>(n1, n2);\n                       ^\n \
    \   reason: inference variable A has incompatible bounds\n      equality constraints:\
    \ Long\n      lower bounds: Integer\n  where A is a type-variable:\n    A extends\
    \ Object declared in class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1659976298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ evenCount = 0, oddCount = 0;\n        long temp = num;\n        while (temp\
    \ != 0) {\n            long digit = temp % 10;\n            if (digit % 2 == 0)\n\
    \                evenCount++;\n            else\n                oddCount++;\n\
    \            temp = temp / 10;\n        }\n        return Pair.with(evenCount,\
    \ oddCount);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmporx__how.java:26: error: incompatible types: inference variable\
    \ A has incompatible bounds\n        return Pair.with(evenCount, oddCount);\n\
    \                        ^\n    equality constraints: Long\n    lower bounds:\
    \ Integer\n  where A,B are type-variables:\n    A extends Object declared in method\
    \ <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n1 error\n"
  stdout: ''
  timestamp: 1659976298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        final\
    \ Pair<Long, Long> result = Pair.with(Long.MAX_VALUE, Long.MIN_VALUE);\n     \
    \   final long n = num;\n\n        long even = 0, odd = 0;\n\n        while (n\
    \ > 0) {\n            final long lastDigit = n % (10d);\n            if (lastDigit\
    \ % 2 == 0) {\n                even += lastDigit;\n            }\n           \
    \ else {\n                odd += lastDigit;\n            }\n            n /= 10d;\n\
    \        }\n\n        result.left = even;\n        result.right = odd;\n\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj1ltz_q4.java:22: error: incompatible types: possible lossy conversion\
    \ from double to long\n            final long lastDigit = n % (10d);\n       \
    \                              ^\n/tmp/tmpj1ltz_q4.java:29: error: cannot assign\
    \ a value to final variable n\n            n /= 10d;\n            ^\n/tmp/tmpj1ltz_q4.java:32:\
    \ error: cannot find symbol\n        result.left = even;\n              ^\n  symbol:\
    \   variable left\n  location: variable result of type Pair<Long,Long>\n/tmp/tmpj1ltz_q4.java:33:\
    \ error: cannot find symbol\n        result.right = odd;\n              ^\n  symbol:\
    \   variable right\n  location: variable result of type Pair<Long,Long>\n4 errors\n"
  stdout: ''
  timestamp: 1659976298
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ evenCount = 0;\n        long oddCount = 0;\n        \n        long digit = 0;\n\
    \        while (num > 0) {\n            digit = num % 10;\n            if (digit\
    \ % 2 == 0) {\n                evenCount += digit;\n            } else {\n   \
    \             oddCount += digit;\n            }\n            num /= 10;\n    \
    \    }\n        \n        return Pair.with(evenCount, oddCount);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        BigInteger\
    \ d = BigInteger.valueOf(num);\n        BigInteger odd = d.mod(new BigInteger(\"\
    2\")).multiply(new BigInteger(\"3\"));\n        BigInteger even = d.subtract(odd);\n\
    \        return Pair.with(odd, even);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprr7muuxg.java:19: error: incompatible types: inference variable\
    \ A has incompatible bounds\n        return Pair.with(odd, even);\n          \
    \              ^\n    equality constraints: Long\n    lower bounds: BigInteger\n\
    \  where A,B are type-variables:\n    A extends Object declared in method <A,B>with(A,B)\n\
    \    B extends Object declared in method <A,B>with(A,B)\n1 error\n"
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ odd = num / 10;\n        int even = num % 10;\n        int digitEven = 1;\n\
    \        int digitOdd = 0;\n        while (even > 0) {\n            digitEven\
    \ *= 10;\n            even -= even * 10;\n        }\n        while (odd > 0) {\n\
    \            digitOdd *= 10;\n            odd -= odd * 10;\n        }\n      \
    \  return Pair.with(digitEven, digitOdd);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi3xiw7sg.java:16: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int odd = num / 10;\n                      ^\n/tmp/tmpi3xiw7sg.java:17:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    int even = num % 10;\n                       ^\n/tmp/tmpi3xiw7sg.java:28:\
    \ error: incompatible types: inference variable A has incompatible bounds\n  \
    \      return Pair.with(digitEven, digitOdd);\n                        ^\n   \
    \ equality constraints: Long\n    lower bounds: Integer\n  where A,B are type-variables:\n\
    \    A extends Object declared in method <A,B>with(A,B)\n    B extends Object\
    \ declared in method <A,B>with(A,B)\n3 errors\n"
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> even = new Pair<>();\n        Pair<Long, Long> odd = new Pair<>();\n \
    \       long remainder = num;\n\n        while (true) {\n            int digit\
    \ = remainder % 10;\n            if (remainder == 0) {\n                break;\n\
    \            }\n            if (digit % 2 == 0) {\n                even.update(digit);\n\
    \            } else {\n                odd.update(digit);\n            }\n   \
    \         remainder = remainder / 10;\n        }\n        return Pair.with(even.sum(),\
    \ odd.sum());\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpah38yxyo.java:16: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Long, Long> even = new Pair<>();\n                             \
    \   ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and formal argument\
    \ lists differ in length)\n  where A,B are type-variables:\n    A extends Object\
    \ declared in class Pair\n    B extends Object declared in class Pair\n/tmp/tmpah38yxyo.java:17:\
    \ error: cannot infer type arguments for Pair<>\n        Pair<Long, Long> odd\
    \ = new Pair<>();\n                               ^\n  reason: cannot infer type-variable(s)\
    \ A,B\n    (actual and formal argument lists differ in length)\n  where A,B are\
    \ type-variables:\n    A extends Object declared in class Pair\n    B extends\
    \ Object declared in class Pair\n/tmp/tmpah38yxyo.java:21: error: incompatible\
    \ types: possible lossy conversion from long to int\n            int digit = remainder\
    \ % 10;\n                                  ^\n/tmp/tmpah38yxyo.java:26: error:\
    \ cannot find symbol\n                even.update(digit);\n                  \
    \  ^\n  symbol:   method update(int)\n  location: variable even of type Pair<Long,Long>\n\
    /tmp/tmpah38yxyo.java:28: error: cannot find symbol\n                odd.update(digit);\n\
    \                   ^\n  symbol:   method update(int)\n  location: variable odd\
    \ of type Pair<Long,Long>\n/tmp/tmpah38yxyo.java:32: error: cannot find symbol\n\
    \        return Pair.with(even.sum(), odd.sum());\n                          \
    \   ^\n  symbol:   method sum()\n  location: variable even of type Pair<Long,Long>\n\
    /tmp/tmpah38yxyo.java:32: error: cannot find symbol\n        return Pair.with(even.sum(),\
    \ odd.sum());\n                                        ^\n  symbol:   method sum()\n\
    \  location: variable odd of type Pair<Long,Long>\n7 errors\n"
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        BigInteger\
    \ bi = new BigInteger(String.valueOf(num), 10);\n        Long even = bi.divide(BigInteger.valueOf(10)).longValue();\n\
    \        Long odd = bi.mod(BigInteger.valueOf(10)).longValue();\n        return\
    \ Pair.with(even, odd);\n    }\n    public static void main(String[] args) {\n\
    \    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ evenCount = 0, oddCount = 0, temp = 0;\n        while (num != 0) {\n       \
    \     temp = num % 10;\n            if (temp % 2 == 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n          \
    \  num /= 10;\n        }\n        return Pair.with(evenCount, oddCount);\n   \
    \ }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        LongStream\
    \ numStream = LongStream.range(2, num / 2);\n        return numStream.map(n ->\
    \ new Pair<>(n, num - (n * 2l)))\n                .filter(Pair::isEven)\n    \
    \            .collect(Collectors.toList())\n                .stream()\n      \
    \          .collect(Collectors.toMap(Pair::getFirst,\n                       \
    \ pair -> pair.getSecond(),\n                        (l, r) -> new Pair<>(l, r)));\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpikv7ge84.java:17: error: incompatible types: bad return type in\
    \ lambda expression\n        return numStream.map(n -> new Pair<>(n, num - (n\
    \ * 2l)))\n                                          ^\n    cannot infer type\
    \ arguments for Pair<>\n      reason: no instance(s) of type variable(s) A,B exist\
    \ so that Pair<A,B> conforms to long\n  where A,B are type-variables:\n    A extends\
    \ Object declared in class Pair\n    B extends Object declared in class Pair\n\
    /tmp/tmpikv7ge84.java:18: error: invalid method reference\n                .filter(Pair::isEven)\n\
    \                        ^\n  cannot find symbol\n    symbol:   method isEven()\n\
    \    location: class Pair\n/tmp/tmpikv7ge84.java:21: error: invalid method reference\n\
    \                .collect(Collectors.toMap(Pair::getFirst,\n                 \
    \                         ^\n  cannot find symbol\n    symbol:   method getFirst()\n\
    \    location: class Pair\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        boolean\
    \ even = true;\n        boolean odd = true;\n        long remainder = 0;\n   \
    \     long result = 0;\n        while (true) {\n            remainder = num %\
    \ 10;\n            if (even) {\n                even = false;\n              \
    \  if (remainder % 2 == 0) {\n                    result += remainder;\n     \
    \           }\n            } else {\n                odd = true;\n           \
    \     if (remainder % 2 != 0) {\n                    result += remainder;\n  \
    \              }\n            }\n            num = (long) num / 10;\n        \
    \    if (num == 0) {\n                break;\n            }\n        }\n     \
    \   if (remainder % 2 != 0) {\n            result += remainder;\n        }\n \
    \       return Pair.with(result, result);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        final\
    \ List<Long> even = new ArrayList<>();\n        final List<Long> odd = new ArrayList<>();\n\
    \        while (num != 0) {\n            final int digit = (int) (num % 10);\n\
    \            even.add(digit);\n            odd.remove(digit);\n            num\
    \ = num / 10;\n        }\n        if (even.isEmpty() && odd.isEmpty()) {\n   \
    \         return Pair.with(1l, 1l);\n        }\n        final int nEl = even.size();\n\
    \        final int nOd = odd.size();\n        if (nEl == 0) {\n            return\
    \ Pair.with(1l, 1l);\n        }\n        if (nOd == 0) {\n            return Pair.with(1l,\
    \ 2l);\n        }\n        if (nEl > nOd) {\n            final int nEl = even.size();\n\
    \            for (int i = 0; i < nEl; i++) {\n                final int nOd =\
    \ odd.size();\n                final int index = nEl - nOd + i;\n            \
    \    odd.add(index, even.get(i));\n                even.remove(index);\n     \
    \       }\n            return Pair.with(1l, nEl);\n        } else {\n        \
    \    final int nOd = odd.size();\n            for (int i = 0; i < nOd; i++) {\n\
    \                final int nEl = even.size();\n                final int index\
    \ = nOd - nEl + i;\n                even.add(index, odd.get(i));\n           \
    \     odd.remove(index);\n            }\n            return Pair.with(1l, nOd);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsz5kmmb5.java:20: error: incompatible types: int cannot be converted\
    \ to Long\n            even.add(digit);\n                     ^\n/tmp/tmpsz5kmmb5.java:36:\
    \ error: variable nEl is already defined in method evenOddCount(long)\n      \
    \      final int nEl = even.size();\n                      ^\n/tmp/tmpsz5kmmb5.java:38:\
    \ error: variable nOd is already defined in method evenOddCount(long)\n      \
    \          final int nOd = odd.size();\n                          ^\n/tmp/tmpsz5kmmb5.java:43:\
    \ error: incompatible types: inference variable B has incompatible bounds\n  \
    \          return Pair.with(1l, nEl);\n                            ^\n    equality\
    \ constraints: Long\n    lower bounds: Integer\n  where B,A are type-variables:\n\
    \    B extends Object declared in method <A,B>with(A,B)\n    A extends Object\
    \ declared in method <A,B>with(A,B)\n/tmp/tmpsz5kmmb5.java:45: error: variable\
    \ nOd is already defined in method evenOddCount(long)\n            final int nOd\
    \ = odd.size();\n                      ^\n/tmp/tmpsz5kmmb5.java:47: error: variable\
    \ nEl is already defined in method evenOddCount(long)\n                final int\
    \ nEl = even.size();\n                          ^\n/tmp/tmpsz5kmmb5.java:52: error:\
    \ incompatible types: inference variable B has incompatible bounds\n         \
    \   return Pair.with(1l, nOd);\n                            ^\n    equality constraints:\
    \ Long\n    lower bounds: Integer\n  where B,A are type-variables:\n    B extends\
    \ Object declared in method <A,B>with(A,B)\n    A extends Object declared in method\
    \ <A,B>with(A,B)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n7 errors\n"
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ evenCount = 0;\n        long oddCount = 0;\n        if (num < 0) {\n       \
    \     num = -num;\n            evenCount = oddCount = num;\n        } else {\n\
    \            while (num != 0) {\n                num /= 10;\n                evenCount++;\n\
    \            }\n            while (num != 0) {\n                num /= 10;\n \
    \               oddCount++;\n            }\n        }\n        return new Pair<Long,\
    \ Long>(evenCount, oddCount);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ count = 0;\n        int oddCount = 0;\n\n        // Count the number of even\n\
    \        while (num > 0) {\n            if (num % 2 == 0) count++;\n         \
    \   num/=2;\n        }\n        // Count the number of odd\n        while (num\
    \ > 0) {\n            if (num % 2 == 1) oddCount++;\n            num/=2;\n   \
    \     }\n\n        return Pair.of(count, oddCount);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptjt20sq9.java:30: error: cannot find symbol\n        return Pair.of(count,\
    \ oddCount);\n                   ^\n  symbol:   method of(int,int)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ sumOdd = 0, sumEven = 0;\n        for (long i = num; i > 0; i /= 10) {\n   \
    \         int digit = num % 10;\n            if (digit % 2 == 0) {\n         \
    \       sumEven += digit;\n            } else {\n                sumOdd += digit;\n\
    \            }\n        }\n        return new Pair<>(sumEven, sumOdd);\n    }\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfzvx1oa5.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = num % 10;\n                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> evenCountPair = new Pair<>(0l, 0l);\n        Pair<Long, Long> oddCountPair\
    \ = new Pair<>(0l, 0l);\n\n        // Use a loop to get the even and odd digit\n\
    \        BigInteger b = BigInteger.valueOf(num);\n\n        int i = 1;\n     \
    \   while(b.divide(BigInteger.valueOf(i)).intValue() > 0) {\n            evenCountPair\
    \ = evenCountPair.with(new Long(b.divide(BigInteger.valueOf(i)).intValue()), new\
    \ Long(i));\n            i = i * 10;\n        }\n        i = 1;\n        while(b.divide(BigInteger.valueOf(i)).intValue()\
    \ > 0) {\n            oddCountPair = oddCountPair.with(new Long(b.divide(BigInteger.valueOf(i)).intValue()),\
    \ new Long(i));\n            i = i * 10;\n        }\n\n        return new Pair<>(evenCountPair,\
    \ oddCountPair);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg3jsq_kr.java:24: warning: [removal] Long(long) in Long has been\
    \ deprecated and marked for removal\n            evenCountPair = evenCountPair.with(new\
    \ Long(b.divide(BigInteger.valueOf(i)).intValue()), new Long(i));\n          \
    \                                     ^\n/tmp/tmpg3jsq_kr.java:24: warning: [removal]\
    \ Long(long) in Long has been deprecated and marked for removal\n            evenCountPair\
    \ = evenCountPair.with(new Long(b.divide(BigInteger.valueOf(i)).intValue()), new\
    \ Long(i));\n                                                                \
    \                                     ^\n/tmp/tmpg3jsq_kr.java:29: warning: [removal]\
    \ Long(long) in Long has been deprecated and marked for removal\n            oddCountPair\
    \ = oddCountPair.with(new Long(b.divide(BigInteger.valueOf(i)).intValue()), new\
    \ Long(i));\n                                             ^\n/tmp/tmpg3jsq_kr.java:29:\
    \ warning: [removal] Long(long) in Long has been deprecated and marked for removal\n\
    \            oddCountPair = oddCountPair.with(new Long(b.divide(BigInteger.valueOf(i)).intValue()),\
    \ new Long(i));\n                                                            \
    \                                       ^\n/tmp/tmpg3jsq_kr.java:33: error: incompatible\
    \ types: cannot infer type arguments for Pair<>\n        return new Pair<>(evenCountPair,\
    \ oddCountPair);\n                       ^\n    reason: inference variable A has\
    \ incompatible bounds\n      equality constraints: Long\n      lower bounds: Pair<Long,Long>\n\
    \  where A is a type-variable:\n    A extends Object declared in class Pair\n\
    1 error\n4 warnings\n"
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        \n\
    \        if(num == 0)\n            return Pair.with(1l, 1l);\n        \n     \
    \   Pair<Long, Long> evenCount = Pair.with(1l, 0l);\n        Pair<Long, Long>\
    \ oddCount = Pair.with(1l, 0l);\n        \n        if(num < 0)\n            num\
    \ = -num;\n        \n        long count = 0;\n        \n        while(num > 0){\n\
    \            long remainder = num % 10;\n            if(remainder % 2 == 0){\n\
    \                evenCount.first = evenCount.first + remainder;\n            \
    \    evenCount.second = evenCount.second + 1;\n                count++;\n    \
    \        }\n            else{\n                oddCount.first = oddCount.first\
    \ + remainder;\n                oddCount.second = oddCount.second + 1;\n     \
    \           count++;\n            }\n            num /= 10;\n        }\n     \
    \   \n        return Pair.with(evenCount, oddCount);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6zymbjxo.java:31: error: cannot find symbol\n                evenCount.first\
    \ = evenCount.first + remainder;\n                         ^\n  symbol:   variable\
    \ first\n  location: variable evenCount of type Pair<Long,Long>\n/tmp/tmp6zymbjxo.java:31:\
    \ error: cannot find symbol\n                evenCount.first = evenCount.first\
    \ + remainder;\n                                           ^\n  symbol:   variable\
    \ first\n  location: variable evenCount of type Pair<Long,Long>\n/tmp/tmp6zymbjxo.java:32:\
    \ error: cannot find symbol\n                evenCount.second = evenCount.second\
    \ + 1;\n                         ^\n  symbol:   variable second\n  location: variable\
    \ evenCount of type Pair<Long,Long>\n/tmp/tmp6zymbjxo.java:32: error: cannot find\
    \ symbol\n                evenCount.second = evenCount.second + 1;\n         \
    \                                   ^\n  symbol:   variable second\n  location:\
    \ variable evenCount of type Pair<Long,Long>\n/tmp/tmp6zymbjxo.java:36: error:\
    \ cannot find symbol\n                oddCount.first = oddCount.first + remainder;\n\
    \                        ^\n  symbol:   variable first\n  location: variable oddCount\
    \ of type Pair<Long,Long>\n/tmp/tmp6zymbjxo.java:36: error: cannot find symbol\n\
    \                oddCount.first = oddCount.first + remainder;\n              \
    \                           ^\n  symbol:   variable first\n  location: variable\
    \ oddCount of type Pair<Long,Long>\n/tmp/tmp6zymbjxo.java:37: error: cannot find\
    \ symbol\n                oddCount.second = oddCount.second + 1;\n           \
    \             ^\n  symbol:   variable second\n  location: variable oddCount of\
    \ type Pair<Long,Long>\n/tmp/tmp6zymbjxo.java:37: error: cannot find symbol\n\
    \                oddCount.second = oddCount.second + 1;\n                    \
    \                      ^\n  symbol:   variable second\n  location: variable oddCount\
    \ of type Pair<Long,Long>\n/tmp/tmp6zymbjxo.java:43: error: incompatible types:\
    \ inference variable A has incompatible bounds\n        return Pair.with(evenCount,\
    \ oddCount);\n                        ^\n    equality constraints: Long\n    lower\
    \ bounds: "
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0) {\n            return Pair.<Long, Long>.with(-1l, -1l);\n        }\n\
    \n        // Convert to an int to handle negative numbers\n        int intNum\
    \ = num;\n\n        // Compute the number of even and odd digits in num\n    \
    \    int evenDigitsCount = 0;\n        int oddDigitsCount = 0;\n\n        while\
    \ (true) {\n            // Count the number of digits before reaching a non zero\
    \ digit\n            int digit = intNum % 10;\n            intNum = intNum / 10;\n\
    \            evenDigitsCount += digit;\n            oddDigitsCount++;\n      \
    \      if (intNum == 0) break;\n        }\n\n        // Compute the number of\
    \ digits in negative numbers\n        intNum = num;\n        evenDigitsCount +=\
    \ (intNum > 0) ? intNum % 10 : (intNum == 0 ? 0 : 1);\n        oddDigitsCount++;\n\
    \n        // Return the pair\n        return Pair.<Long, Long>.with(longNum(evenDigitsCount),\
    \ longNum(oddDigitsCount));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp55q2zfhe.java:17: error: <identifier> expected\n            return\
    \ Pair.<Long, Long>.with(-1l, -1l);\n                                    ^\n/tmp/tmp55q2zfhe.java:17:\
    \ error: illegal start of expression\n            return Pair.<Long, Long>.with(-1l,\
    \ -1l);\n                                     ^\n/tmp/tmp55q2zfhe.java:42: error:\
    \ <identifier> expected\n        return Pair.<Long, Long>.with(longNum(evenDigitsCount),\
    \ longNum(oddDigitsCount));\n                                ^\n/tmp/tmp55q2zfhe.java:42:\
    \ error: illegal start of expression\n        return Pair.<Long, Long>.with(longNum(evenDigitsCount),\
    \ longNum(oddDigitsCount));\n                                 ^\n4 errors\n"
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ counter = 0;\n        while (num != 0) {\n            num = num / 10;\n    \
    \        ++counter;\n        }\n        long evenCount = 0;\n        long oddCount\
    \ = 0;\n        if (counter % 2 == 0) {\n            evenCount = counter;\n  \
    \      }\n        else {\n            oddCount = counter;\n        }\n       \
    \ return Pair.with(oddCount, evenCount);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> pair = Pair.with(1l, 1l);\n        if (num < 0) {\n            pair =\
    \ Pair.with(1l, 0l);\n        } else if (num <= 10) {\n            pair = Pair.with(1l,\
    \ 1l);\n        } else {\n            pair = Pair.with(1l, 0l);\n            long\
    \ divRem = num / 10;\n            for (int i = 1; i < 10; i++) {\n           \
    \     long rem = num % 10;\n                if (rem == 0) {\n                \
    \    pair.first = i;\n                    pair.second = 0;\n                }\
    \ else {\n                    pair.first = i;\n                    pair.second\
    \ = 1;\n                }\n                num = divRem;\n                divRem\
    \ = rem;\n            }\n        }\n        return pair;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphzo5c67t.java:27: error: cannot find symbol\n                 \
    \   pair.first = i;\n                        ^\n  symbol:   variable first\n \
    \ location: variable pair of type Pair<Long,Long>\n/tmp/tmphzo5c67t.java:28: error:\
    \ cannot find symbol\n                    pair.second = 0;\n                 \
    \       ^\n  symbol:   variable second\n  location: variable pair of type Pair<Long,Long>\n\
    /tmp/tmphzo5c67t.java:30: error: cannot find symbol\n                    pair.first\
    \ = i;\n                        ^\n  symbol:   variable first\n  location: variable\
    \ pair of type Pair<Long,Long>\n/tmp/tmphzo5c67t.java:31: error: cannot find symbol\n\
    \                    pair.second = 1;\n                        ^\n  symbol:  \
    \ variable second\n  location: variable pair of type Pair<Long,Long>\n4 errors\n"
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Map<Integer,\
    \ Integer> digits = numToDigitMap(num);\n        long evenCount = 0;\n       \
    \ long oddCount = 0;\n        for (int d : digits.keySet()) {\n            if\
    \ (digits.get(d) % 2 == 0) {\n                evenCount++;\n            } else\
    \ {\n                oddCount++;\n            }\n        }\n        return new\
    \ Pair<>(evenCount, oddCount);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp481gx697.java:16: error: cannot find symbol\n        Map<Integer,\
    \ Integer> digits = numToDigitMap(num);\n                                    \
    \   ^\n  symbol:   method numToDigitMap(long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976299
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        BigInteger\
    \ biNum = new BigInteger(String.valueOf(num));\n        long digit = biNum.mod(BigInteger.TEN).longValue();\n\
    \        long evenDigits = biNum.divide(BigInteger.TEN).longValue();\n       \
    \ long oddDigits = biNum.mod(BigInteger.TEN).longValue();\n        return new\
    \ Pair<>(digit, oddDigits);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ result1 = 0; long result2 = 0;\n        long evenDigit = 0, oddDigit = 0;\n\
    \        for(int i=2; i<=num; i++){\n            if((num % i) == 0){\n       \
    \         result1++;\n                num/=i;\n                evenDigit += i;\n\
    \            }else{\n                result2++;\n                num/=i;\n   \
    \             oddDigit += i;\n            }\n        }\n        return Pair.with(evenDigit,\
    \ oddDigit);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num <= 0) {\n            return Pair.with(0l, 0l);\n        }\n        if (num\
    \ <= 9) {\n            return Pair.with(0l, 1l);\n        }\n        if (num >\
    \ 9) {\n            int countEven = 0, countOdd = 0;\n            int remainder\
    \ = num % 10;\n            num = num / 10;\n            while (num > 0) {\n  \
    \              if (num % 2 == 0) {\n                    countEven++;\n       \
    \         } else {\n                    countOdd++;\n                }\n     \
    \           num = num / 10;\n            }\n            Pair<Long, Long> ret =\
    \ Pair.with(countEven, countOdd);\n            ret = Pair.with(ret.first + remainder,\
    \ ret.second);\n            return ret;\n        }\n        return Pair.with(0l,\
    \ 0l);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvu_qgq59.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int remainder = num % 10;\n                  \
    \              ^\n/tmp/tmpvu_qgq59.java:34: error: incompatible types: inference\
    \ variable A has incompatible bounds\n            Pair<Long, Long> ret = Pair.with(countEven,\
    \ countOdd);\n                                            ^\n    equality constraints:\
    \ Long\n    lower bounds: Integer\n  where A,B are type-variables:\n    A extends\
    \ Object declared in method <A,B>with(A,B)\n    B extends Object declared in method\
    \ <A,B>with(A,B)\n/tmp/tmpvu_qgq59.java:35: error: cannot find symbol\n      \
    \      ret = Pair.with(ret.first + remainder, ret.second);\n                 \
    \              ^\n  symbol:   variable first\n  location: variable ret of type\
    \ Pair<Long,Long>\n/tmp/tmpvu_qgq59.java:35: error: cannot find symbol\n     \
    \       ret = Pair.with(ret.first + remainder, ret.second);\n                \
    \                                      ^\n  symbol:   variable second\n  location:\
    \ variable ret of type Pair<Long,Long>\n4 errors\n"
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ rem = num % 10; // remainder of num % 10\n        num = num / 10; // quotient\
    \ of num / 10\n        long even = num % 10; // remainder of num % 10\n      \
    \  num = num / 10; // quotient of num / 10\n        long odd = num % 10; // remainder\
    \ of num % 10\n        return new Pair<>(even, odd);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        List<Integer>\
    \ digits = numToDigits(num);\n        int oddDigits = 0, evenDigits = 0;\n\n \
    \       for (int i = 0; i < digits.size() - 1; i++) {\n            if (digits.get(i)\
    \ % 2 == 0) {\n                evenDigits++;\n            } else {\n         \
    \       oddDigits++;\n            }\n        }\n\n        return Pair.with(oddDigits,\
    \ evenDigits);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw5lvpob.java:16: error: cannot find symbol\n        List<Integer>\
    \ digits = numToDigits(num);\n                               ^\n  symbol:   method\
    \ numToDigits(long)\n  location: class Problem\n/tmp/tmpgw5lvpob.java:27: error:\
    \ incompatible types: inference variable A has incompatible bounds\n        return\
    \ Pair.with(oddDigits, evenDigits);\n                        ^\n    equality constraints:\
    \ Long\n    lower bounds: Integer\n  where A,B are type-variables:\n    A extends\
    \ Object declared in method <A,B>with(A,B)\n    B extends Object declared in method\
    \ <A,B>with(A,B)\n2 errors\n"
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 10) {\n            return Pair.of(1, 0);\n        }\n\n        int odd\
    \ = 0;\n        int even = 0;\n        long remainder = 0;\n        long result\
    \ = 1;\n\n        for (int i = 0; i <= num / 10; i++) {\n            int digit\
    \ = (int) ((num % 10) / i);\n            if (num % 10 < i) {\n               \
    \ remainder = num % 10;\n            }\n            if (digit > 1) {\n       \
    \         even += digit;\n            } else if (digit == 1) {\n             \
    \   odd = (odd > 0) ? odd : 1;\n                even += digit;\n            }\n\
    \        }\n\n        return Pair.of(even, odd);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n\
    \    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjndb1rdn.java:17: error: cannot find symbol\n            return\
    \ Pair.of(1, 0);\n                       ^\n  symbol:   method of(int,int)\n \
    \ location: class Pair\n/tmp/tmpjndb1rdn.java:38: error: cannot find symbol\n\
    \        return Pair.of(even, odd);\n                   ^\n  symbol:   method\
    \ of(int,int)\n  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ even = 0, odd = 0;\n        long count = 0;\n\n        do {\n            long\
    \ tmpEven = num / 10;\n            long tmpOdd = (num % 10) * 1;\n\n         \
    \   if (tmpEven % 2 == 0) {\n                even++;\n            }\n        \
    \    if (tmpOdd % 2 == 0) {\n                odd++;\n            }\n         \
    \   num /= 10;\n            count++;\n        } while (num > 0);\n\n        return\
    \ Pair.with(even, odd);\n    }\n    public static void main(String[] args) {\n\
    \    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0) {\n            return null;\n        }\n\n        long numDigits =\
    \ digits(num);\n        Pair<Long, Long> evenOdd = null;\n        Long odd = 0;\n\
    \        Long even = 0;\n\n        if (numDigits == 0) {\n            evenOdd\
    \ = Pair.with(1l, 1l);\n        } else if (numDigits % 2 == 0) {\n           \
    \ evenOdd = Pair.with(1l, numDigits / 2);\n        } else {\n            even\
    \ = num / 2;\n            while (num > 0) {\n                odd += num % 10;\n\
    \                num = num / 10;\n            }\n\n            while (num != 0)\
    \ {\n                even += num % 10;\n                num = num / 10;\n    \
    \        }\n\n            evenOdd = Pair.with(even, odd);\n        }\n\n     \
    \   return evenOdd;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpml_ipy_o.java:20: error: cannot find symbol\n        long numDigits\
    \ = digits(num);\n                         ^\n  symbol:   method digits(long)\n\
    \  location: class Problem\n/tmp/tmpml_ipy_o.java:22: error: incompatible types:\
    \ int cannot be converted to Long\n        Long odd = 0;\n                   ^\n\
    /tmp/tmpml_ipy_o.java:23: error: incompatible types: int cannot be converted to\
    \ Long\n        Long even = 0;\n                    ^\n3 errors\n"
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> pair = new Pair<>();\n        num = Math.abs(num);\n        int evenCount\
    \ = 0;\n        int oddCount = 0;\n        if (num < 0) {\n            pair =\
    \ Pair.with(0l, 0l);\n        } else {\n            int i = 1;\n            while\
    \ (num > 0) {\n                evenCount = (evenCount << 1) + i % 2;\n       \
    \         oddCount++;\n                num -= i;\n                i = i * 10;\n\
    \            }\n            pair = Pair.with(evenCount, oddCount);\n        }\n\
    \        return pair;\n    }\n    public static void main(String[] args) {\n \
    \   assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcwxvjdpx.java:16: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Long, Long> pair = new Pair<>();\n                             \
    \   ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and formal argument\
    \ lists differ in length)\n  where A,B are type-variables:\n    A extends Object\
    \ declared in class Pair\n    B extends Object declared in class Pair\n/tmp/tmpcwxvjdpx.java:30:\
    \ error: incompatible types: inference variable A has incompatible bounds\n  \
    \          pair = Pair.with(evenCount, oddCount);\n                          \
    \  ^\n    equality constraints: Long\n    lower bounds: Integer\n  where A,B are\
    \ type-variables:\n    A extends Object declared in method <A,B>with(A,B)\n  \
    \  B extends Object declared in method <A,B>with(A,B)\n2 errors\n"
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        return\
    \ Pair.with(countEvens(num), countOdds(num));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe0xprs3e.java:16: error: cannot find symbol\n        return Pair.with(countEvens(num),\
    \ countOdds(num));\n                         ^\n  symbol:   method countEvens(long)\n\
    \  location: class Problem\n/tmp/tmpe0xprs3e.java:16: error: cannot find symbol\n\
    \        return Pair.with(countEvens(num), countOdds(num));\n                \
    \                          ^\n  symbol:   method countOdds(long)\n  location:\
    \ class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ count = 0l;\n        long ev = 0l;\n        long od = 0l;\n        while (num\
    \ > 0) {\n            if (num % 2 == 0) {\n                ev++;\n           \
    \ }\n            else {\n                od++;\n            }\n            num\
    \ = num >>> 1;\n        }\n        Pair<Long, Long> evenOdd = Pair.with(od, ev);\n\
    \        return evenOdd;\n    }\n    public static void main(String[] args) {\n\
    \    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ odd = 0;\n        long even = 0;\n        if (num < 0 ) {\n            odd +=\
    \ Math.abs(num);\n            num = 0l;\n        } else {\n            while (num\
    \ > 0) {\n                long digit = num % 10;\n                if (digit %\
    \ 2 != 0) {\n                    even += digit;\n                } else {\n  \
    \                  odd += digit;\n                }\n                num = (num\
    \ - digit) / 10L;\n            }\n        }\n        return new Pair<>(even, odd);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        List<Long>\
    \ even = new ArrayList<>();\n        List<Long> odd = new ArrayList<>();\n   \
    \     while (num > 0) {\n            odd.add(num % 10);\n            num = num\
    \ / 10;\n        }\n        odd.remove(0);\n        if (even.isEmpty())\n    \
    \        return Pair.of(odd.size(), odd.get(0));\n        odd.remove(0);\n   \
    \     odd.forEach(num -> {\n            if (num % 2 == 0)\n                even.add(num);\n\
    \        });\n        return Pair.of(odd.size(), odd.get(0));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw52xca8.java:24: error: cannot find symbol\n            return\
    \ Pair.of(odd.size(), odd.get(0));\n                       ^\n  symbol:   method\
    \ of(int,Long)\n  location: class Pair\n/tmp/tmpkw52xca8.java:26: error: variable\
    \ num is already defined in method evenOddCount(long)\n        odd.forEach(num\
    \ -> {\n                    ^\n/tmp/tmpkw52xca8.java:30: error: cannot find symbol\n\
    \        return Pair.of(odd.size(), odd.get(0));\n                   ^\n  symbol:\
    \   method of(int,Long)\n  location: class Pair\n3 errors\n"
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        num\
    \ = Math.abs(num);\n        long[] digits = new long[(int) Math.ceil(Math.log10(num)\
    \ + 1)];\n        int index = 0;\n        while (num > 0) {\n            digits[index++]\
    \ = num % 10;\n            num /= 10;\n        }\n        long evenCount = 0;\n\
    \        long oddCount = 0;\n        for (int i = 0; i < digits.length; i++) {\n\
    \            if (digits[i] % 2 == 0) {\n                evenCount++;\n       \
    \     } else {\n                oddCount++;\n            }\n        }\n      \
    \  return Pair.with((long) evenCount, (long) oddCount);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num == 0)\n            return Pair.with(Long.MIN_VALUE, Long.MIN_VALUE);\n\
    \        long[] arr = new long[32];\n        long digits = num;\n        int evenCount\
    \ = 0, oddCount = 0;\n        while (digits > 0) {\n            arr[digits % 10]++;\n\
    \            digits /= 10;\n        }\n        for (int i = 0; i < arr.length;\
    \ i++) {\n            long evens = arr[i] % 2 == 0 ? evenCount : evenCount + 1;\n\
    \            long odds = arr[i] % 2 == 1 ? oddCount : oddCount + 1;\n        \
    \    Pair<Long, Long> evenOddPair = Pair.with(evens, odds);\n            if (evenOddPair.first\
    \ == Long.MIN_VALUE) evenOddPair.first = evenOddPair.second;\n            if (evenOddPair.second\
    \ == Long.MIN_VALUE) evenOddPair.second = evenOddPair.first;\n            Pair<Long,\
    \ Long> pair = Pair.with(num, digits);\n            Pair<Long, Long> newPair =\
    \ Pair.with(pair.first, pair.second);\n            pair = newPair;\n        }\n\
    \        return pair;\n    }\n    public static void main(String[] args) {\n \
    \   assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzi32k6hf.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            arr[digits % 10]++;\n                       ^\n\
    /tmp/tmpzi32k6hf.java:29: error: cannot find symbol\n            if (evenOddPair.first\
    \ == Long.MIN_VALUE) evenOddPair.first = evenOddPair.second;\n               \
    \            ^\n  symbol:   variable first\n  location: variable evenOddPair of\
    \ type Pair<Long,Long>\n/tmp/tmpzi32k6hf.java:29: error: cannot find symbol\n\
    \            if (evenOddPair.first == Long.MIN_VALUE) evenOddPair.first = evenOddPair.second;\n\
    \                                                                ^\n  symbol:\
    \   variable first\n  location: variable evenOddPair of type Pair<Long,Long>\n\
    /tmp/tmpzi32k6hf.java:29: error: cannot find symbol\n            if (evenOddPair.first\
    \ == Long.MIN_VALUE) evenOddPair.first = evenOddPair.second;\n               \
    \                                                                     ^\n  symbol:\
    \   variable second\n  location: variable evenOddPair of type Pair<Long,Long>\n\
    /tmp/tmpzi32k6hf.java:30: error: cannot find symbol\n            if (evenOddPair.second\
    \ == Long.MIN_VALUE) evenOddPair.second = evenOddPair.first;\n               \
    \            ^\n  symbol:   variable second\n  location: variable evenOddPair\
    \ of type Pair<Long,Long>\n/tmp/tmpzi32k6hf.java:30: error: cannot find symbol\n\
    \            if (evenOddPair.second == Long.MIN_VALUE) evenOddPair.second = evenOddPair.first;\n\
    \                                                                 ^\n  symbol:\
    \   variable second\n  location: variable evenOddPair of type Pair<Long,Long>\n\
    /tmp/tmpzi32k6hf.java:30: error: cannot find symbol\n            if (evenOddPair.second\
    \ == Long.MIN_VALUE) evenOddPair.second = evenOddPair.first;\n               \
    \                                                                       ^\n  symbol:\
    \   variable first\n  location: variable evenOddPair of type Pair<Long,Long>\n\
    /tmp/tmpzi32k6hf.java:32: error: cannot find symbol\n            Pair<Long, Long>\
    \ newPair = Pair.with(pair.first, pair.second);\n                       "
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        num\
    \ = Math.abs(num);\n        long evenCount = 0, oddCount = 0;\n        StringBuffer\
    \ str = new StringBuffer();\n        for (int i = num; i > 0; i--) {\n       \
    \     str.append((int) i);\n            if (i % 2 == 0) {\n                evenCount++;\n\
    \            } else {\n                oddCount++;\n            }\n        }\n\
    \        return Pair.with(long.parseLong(str.toString()), evenCount);\n    }\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoi40xj4w.java:27: error: class expected\n        return Pair.with(long.parseLong(str.toString()),\
    \ evenCount);\n                              ^\n/tmp/tmpoi40xj4w.java:27: error:\
    \ ')' expected\n        return Pair.with(long.parseLong(str.toString()), evenCount);\n\
    \                                       ^\n/tmp/tmpoi40xj4w.java:27: error: ';'\
    \ expected\n        return Pair.with(long.parseLong(str.toString()), evenCount);\n\
    \                                                      ^\n/tmp/tmpoi40xj4w.java:27:\
    \ error: not a statement\n        return Pair.with(long.parseLong(str.toString()),\
    \ evenCount);\n                                                         ^\n/tmp/tmpoi40xj4w.java:27:\
    \ error: ';' expected\n        return Pair.with(long.parseLong(str.toString()),\
    \ evenCount);\n                                                              \
    \    ^\n5 errors\n"
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> pair = new Pair<Long, Long>(1l, 0l);\n        long rem = num;\n      \
    \  while (true) { // this loop terminates when the number is not divisible by\
    \ 2\n            pair = evenOddCount(rem);\n            if (pair.left.longValue()\
    \ % 2 == 0l && pair.left.longValue() % 10 != 0l) {\n                return pair;\n\
    \            }\n            rem = pair.left.longValue();\n        }\n    }\n \
    \   public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf4e65vqi.java:20: error: cannot find symbol\n            if (pair.left.longValue()\
    \ % 2 == 0l && pair.left.longValue() % 10 != 0l) {\n                    ^\n  symbol:\
    \   variable left\n  location: variable pair of type Pair<Long,Long>\n/tmp/tmpf4e65vqi.java:20:\
    \ error: cannot find symbol\n            if (pair.left.longValue() % 2 == 0l &&\
    \ pair.left.longValue() % 10 != 0l) {\n                                      \
    \                 ^\n  symbol:   variable left\n  location: variable pair of type\
    \ Pair<Long,Long>\n/tmp/tmpf4e65vqi.java:23: error: cannot find symbol\n     \
    \       rem = pair.left.longValue();\n                      ^\n  symbol:   variable\
    \ left\n  location: variable pair of type Pair<Long,Long>\n3 errors\n"
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ evenDigitCount = 0, oddDigitCount = 0, factor = 0;\n        while (num > 0)\
    \ {\n            factor = num % 10;\n            if (factor % 2 == 0) {\n    \
    \            evenDigitCount++;\n            } else {\n                oddDigitCount++;\n\
    \            }\n            num = (long) (num / 10);\n        }\n        return\
    \ Pair.with(evenDigitCount, oddDigitCount);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf2_94fd5.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n            factor = num % 10;\n                         ^\n\
    /tmp/tmpf2_94fd5.java:26: error: incompatible types: inference variable A has\
    \ incompatible bounds\n        return Pair.with(evenDigitCount, oddDigitCount);\n\
    \                        ^\n    equality constraints: Long\n    lower bounds:\
    \ Integer\n  where A,B are type-variables:\n    A extends Object declared in method\
    \ <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n2 errors\n"
  stdout: ''
  timestamp: 1659976300
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        //\
    \ return Pair.<Long, Long>with(1l, 2l);\n        List<Long> oddDigits = Arrays.stream(num.toString().split(\"\
    \")).filter(v -> {\n            return v != '-' && v != '+';\n        }).map(String::valueOf).collect(Collectors.toList());\n\
    \        List<Long> evenDigits = Arrays.stream(num.toString().split(\"\")).filter(v\
    \ -> {\n            return v == '-' || v == '+';\n        }).map(String::valueOf).collect(Collectors.toList());\n\
    \        Pair<Long, Long> pair = Pair.of(oddDigits.size(), evenDigits.size());\n\
    \        return pair;\n    }\n    public static void main(String[] args) {\n \
    \   assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfqn0ltcc.java:17: error: long cannot be dereferenced\n        List<Long>\
    \ oddDigits = Arrays.stream(num.toString().split(\"\")).filter(v -> {\n      \
    \                                          ^\n/tmp/tmpfqn0ltcc.java:20: error:\
    \ long cannot be dereferenced\n        List<Long> evenDigits = Arrays.stream(num.toString().split(\"\
    \")).filter(v -> {\n                                                 ^\n/tmp/tmpfqn0ltcc.java:23:\
    \ error: cannot find symbol\n        Pair<Long, Long> pair = Pair.of(oddDigits.size(),\
    \ evenDigits.size());\n                                    ^\n  symbol:   method\
    \ of(int,int)\n  location: class Pair\n3 errors\n"
  stdout: ''
  timestamp: 1659976301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ oddSum = 0;\n        long evenSum = 0;\n        long totalDigits = (int) (Math.log10(num));\n\
    \        long digits = 0;\n        while (digits < totalDigits) {\n          \
    \  long d = (int) (num / Math.pow(10, digits));\n            oddSum = oddSum +\
    \ d;\n            evenSum = evenSum + 2 * d;\n            digits++;\n        }\n\
    \        return Pair.with(oddSum, evenSum);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> evenOdd = Pair.with(1l, 1l);\n        int count = 0;\n        while (num\
    \ /= 10l) {\n            count++;\n        }\n        long prev = 0;\n       \
    \ evenOdd = Pair.with(evenOdd.first(), evenOdd.second());\n        for (int i\
    \ = 0; i < count; i++) {\n            long n = num % 10;\n            int d =\
    \ (n % 2);\n            evenOdd = Pair.with(evenOdd.first(), evenOdd.second());\n\
    \            num = num / 10;\n            evenOdd = Pair.with(evenOdd.first()\
    \ + d, evenOdd.second() + d);\n        }\n        return evenOdd;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1i6eq2i2.java:18: error: incompatible types: long cannot be converted\
    \ to boolean\n        while (num /= 10l) {\n                   ^\n/tmp/tmp1i6eq2i2.java:22:\
    \ error: cannot find symbol\n        evenOdd = Pair.with(evenOdd.first(), evenOdd.second());\n\
    \                                   ^\n  symbol:   method first()\n  location:\
    \ variable evenOdd of type Pair<Long,Long>\n/tmp/tmp1i6eq2i2.java:22: error: cannot\
    \ find symbol\n        evenOdd = Pair.with(evenOdd.first(), evenOdd.second());\n\
    \                                                    ^\n  symbol:   method second()\n\
    \  location: variable evenOdd of type Pair<Long,Long>\n/tmp/tmp1i6eq2i2.java:25:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        int d = (n % 2);\n                       ^\n/tmp/tmp1i6eq2i2.java:26:\
    \ error: cannot find symbol\n            evenOdd = Pair.with(evenOdd.first(),\
    \ evenOdd.second());\n                                       ^\n  symbol:   method\
    \ first()\n  location: variable evenOdd of type Pair<Long,Long>\n/tmp/tmp1i6eq2i2.java:26:\
    \ error: cannot find symbol\n            evenOdd = Pair.with(evenOdd.first(),\
    \ evenOdd.second());\n                                                       \
    \ ^\n  symbol:   method second()\n  location: variable evenOdd of type Pair<Long,Long>\n\
    /tmp/tmp1i6eq2i2.java:28: error: cannot find symbol\n            evenOdd = Pair.with(evenOdd.first()\
    \ + d, evenOdd.second() + d);\n                                       ^\n  symbol:\
    \   method first()\n  location: variable evenOdd of type Pair<Long,Long>\n/tmp/tmp1i6eq2i2.java:28:\
    \ error: cannot find symbol\n            evenOdd = Pair.with(evenOdd.first() +\
    \ d, evenOdd.second() + d);\n                                                \
    \            ^\n  symbol:   method second()\n  location: variable evenOdd of type\
    \ Pair<Long,Long>\n8 errors\n"
  stdout: ''
  timestamp: 1659976301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0) {\n            throw new IllegalArgumentException(\"num must be positive\"\
    );\n        }\n        int digitCountEven = 0;\n        int digitCountOdd = 0;\n\
    \        int digitCountTotal = 0;\n        while (num > 0) {\n            int\
    \ remainder = num % 10;\n            digitCountTotal++;\n            if (remainder\
    \ % 2 == 0) {\n                digitCountEven++;\n            }\n            else\
    \ {\n                digitCountOdd++;\n            }\n            num /= 10;\n\
    \        }\n        return new Pair<>(digitCountEven, digitCountOdd);\n    }\n\
    \    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsqjtw8t_.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int remainder = num % 10;\n                  \
    \              ^\n/tmp/tmpsqjtw8t_.java:33: error: incompatible types: cannot\
    \ infer type arguments for Pair<>\n        return new Pair<>(digitCountEven, digitCountOdd);\n\
    \                       ^\n    reason: inference variable A has incompatible bounds\n\
    \      equality constraints: Long\n      lower bounds: Integer\n  where A is a\
    \ type-variable:\n    A extends Object declared in class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1659976301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num == 0) {\n            return Pair.with(1l, 1l);\n        }\n        List<Integer>\
    \ evenDigitsList = new ArrayList<>();\n        List<Integer> oddDigitsList = new\
    \ ArrayList<>();\n        while (num > 0) {\n            if (num % 2 == 0) {\n\
    \                evenDigitsList.add(num % 10);\n                num /= 10;\n \
    \           } else {\n                oddDigitsList.add(num % 10);\n         \
    \       num /= 10;\n            }\n        }\n\n        return Pair.with(Math.max(evenDigitsList.size(),\
    \ oddDigitsList.size()), Math.max(evenDigitsList.size(), oddDigitsList.size()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppqped09w.java:23: error: incompatible types: long cannot be converted\
    \ to Integer\n                evenDigitsList.add(num % 10);\n                \
    \                       ^\n/tmp/tmppqped09w.java:26: error: incompatible types:\
    \ long cannot be converted to Integer\n                oddDigitsList.add(num %\
    \ 10);\n                                      ^\n/tmp/tmppqped09w.java:31: error:\
    \ incompatible types: inference variable A has incompatible bounds\n        return\
    \ Pair.with(Math.max(evenDigitsList.size(), oddDigitsList.size()), Math.max(evenDigitsList.size(),\
    \ oddDigitsList.size()));\n                        ^\n    equality constraints:\
    \ Long\n    lower bounds: Integer\n  where A,B are type-variables:\n    A extends\
    \ Object declared in method <A,B>with(A,B)\n    B extends Object declared in method\
    \ <A,B>with(A,B)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659976301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ evenCount = 0;\n        long oddCount = 0;\n        if(num < 0)\n          \
    \  throw new IllegalArgumentException(\"Invalid Long Number\");\n        num =\
    \ Math.abs(num);\n        if(num > Integer.MAX_VALUE)\n            throw new IllegalArgumentException(\"\
    Invalid Long Number\");\n\n        long remainder;\n        while(num > 0) {\n\
    \            remainder = num % 10;\n            num = num / 10;\n            if((remainder\
    \ % 2) == 0)\n                evenCount++;\n            else \n              \
    \  oddCount++;\n        }\n        return new Pair<Long, Long>(evenCount, oddCount);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0) return Pair.with(0l, 0l);\n        long even = 0, odd = 0;\n     \
    \   long digit;\n        do {\n            digit = num % 10;\n            num\
    \ /= 10;\n            if (digit % 2 == 0) {\n                even += digit;\n\
    \            } else {\n                odd += digit;\n            }\n        }\
    \ while (num != 0);\n        return Pair.with(even, odd);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        List<Long>\
    \ list = new ArrayList<>();\n        while (num > 0) {\n            list.add((int)\
    \ (num % 10l));\n            num /= 10l;\n        }\n        list.sort((a, b)\
    \ -> a - b);\n        Pair<Long, Long> p = new Pair<>();\n        long even =\
    \ 0, odd = 0, countEven = 0, countOdd = 0, digit;\n        for (long val : list)\
    \ {\n            digit = (long) (val % 10l);\n            if (digit % 2 == 0)\
    \ {\n                countEven++;\n            } else {\n                countOdd++;\n\
    \            }\n            p.with1(even).with2(odd);\n        }\n        p.with1(countEven).with2(countOdd);\n\
    \        return p;\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxnh3db5w.java:18: error: incompatible types: int cannot be converted\
    \ to Long\n            list.add((int) (num % 10l));\n                     ^\n\
    /tmp/tmpxnh3db5w.java:21: error: incompatible types: bad return type in lambda\
    \ expression\n        list.sort((a, b) -> a - b);\n                          \
    \    ^\n    possible lossy conversion from long to int\n/tmp/tmpxnh3db5w.java:22:\
    \ error: cannot infer type arguments for Pair<>\n        Pair<Long, Long> p =\
    \ new Pair<>();\n                             ^\n  reason: cannot infer type-variable(s)\
    \ A,B\n    (actual and formal argument lists differ in length)\n  where A,B are\
    \ type-variables:\n    A extends Object declared in class Pair\n    B extends\
    \ Object declared in class Pair\n/tmp/tmpxnh3db5w.java:31: error: cannot find\
    \ symbol\n            p.with1(even).with2(odd);\n             ^\n  symbol:   method\
    \ with1(long)\n  location: variable p of type Pair<Long,Long>\n/tmp/tmpxnh3db5w.java:33:\
    \ error: cannot find symbol\n        p.with1(countEven).with2(countOdd);\n   \
    \      ^\n  symbol:   method with1(long)\n  location: variable p of type Pair<Long,Long>\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n5 errors\n"
  stdout: ''
  timestamp: 1659976301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        return\
    \ Pair.with(countEven(Long.toString(num)), countOdd(Long.toString(num)));\n  \
    \  }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbwhgjj6p.java:16: error: cannot find symbol\n        return Pair.with(countEven(Long.toString(num)),\
    \ countOdd(Long.toString(num)));\n                         ^\n  symbol:   method\
    \ countEven(String)\n  location: class Problem\n/tmp/tmpbwhgjj6p.java:16: error:\
    \ cannot find symbol\n        return Pair.with(countEven(Long.toString(num)),\
    \ countOdd(Long.toString(num)));\n                                           \
    \             ^\n  symbol:   method countOdd(String)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        BigInteger\
    \ evenDigitsNumber = BigInteger.ZERO;\n        BigInteger oddDigitsNumber = BigInteger.ZERO;\n\
    \        for (BigInteger numDigit : toDigits(num)) {\n            if (numDigit.testBit(0))\
    \ {\n                evenDigitsNumber = evenDigitsNumber.add(numDigit);\n    \
    \        } else {\n                oddDigitsNumber = oddDigitsNumber.add(numDigit);\n\
    \            }\n        }\n        return Pair.with(evenDigitsNumber.longValue(),\
    \ oddDigitsNumber.longValue());\n    }\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw8s5qlek.java:18: error: cannot find symbol\n        for (BigInteger\
    \ numDigit : toDigits(num)) {\n                                   ^\n  symbol:\
    \   method toDigits(long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> pair = new Pair<>();\n        int count = 0;\n        int digit = 0;\n\
    \        while (num > 0) {\n            count++;\n            digit = num % 10;\n\
    \            num = num / 10;\n        }\n        pair.first = new Long(digit);\n\
    \        pair.second = new Long(count);\n        return pair;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpte8wzl2b.java:16: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Long, Long> pair = new Pair<>();\n                             \
    \   ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and formal argument\
    \ lists differ in length)\n  where A,B are type-variables:\n    A extends Object\
    \ declared in class Pair\n    B extends Object declared in class Pair\n/tmp/tmpte8wzl2b.java:21:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        digit = num % 10;\n                        ^\n/tmp/tmpte8wzl2b.java:24:\
    \ error: cannot find symbol\n        pair.first = new Long(digit);\n         \
    \   ^\n  symbol:   variable first\n  location: variable pair of type Pair<Long,Long>\n\
    /tmp/tmpte8wzl2b.java:24: warning: [removal] Long(long) in Long has been deprecated\
    \ and marked for removal\n        pair.first = new Long(digit);\n            \
    \         ^\n/tmp/tmpte8wzl2b.java:25: error: cannot find symbol\n        pair.second\
    \ = new Long(count);\n            ^\n  symbol:   variable second\n  location:\
    \ variable pair of type Pair<Long,Long>\n/tmp/tmpte8wzl2b.java:25: warning: [removal]\
    \ Long(long) in Long has been deprecated and marked for removal\n        pair.second\
    \ = new Long(count);\n                      ^\n4 errors\n2 warnings\n"
  stdout: ''
  timestamp: 1659976301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> evenOdd = null;\n        long count = 0;\n        long oddCount = 0;\n\
    \        if (num < 0) {\n            num = -num;\n            evenOdd = Pair.with(-num,\
    \ -num);\n            count = -count;\n            oddCount = -oddCount;\n   \
    \     }\n        long rem = 0;\n        while (num /= 10) {\n            count++;\n\
    \            if (num % 2 == 0) {\n                evenOdd = Pair.with(evenOdd.second,\
    \ evenOdd.first);\n                evenOdd = Pair.with(evenOdd.second, evenOdd.first\
    \ + 1);\n            } else {\n                oddCount++;\n            }\n  \
    \      }\n        if (count == 0) {\n            evenOdd = Pair.with(evenOdd.second,\
    \ evenOdd.first);\n        }\n        return Pair.of(oddCount, evenOdd.first);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi56wqb8z.java:26: error: incompatible types: long cannot be converted\
    \ to boolean\n        while (num /= 10) {\n                   ^\n/tmp/tmpi56wqb8z.java:29:\
    \ error: cannot find symbol\n                evenOdd = Pair.with(evenOdd.second,\
    \ evenOdd.first);\n                                           ^\n  symbol:   variable\
    \ second\n  location: variable evenOdd of type Pair<Long,Long>\n/tmp/tmpi56wqb8z.java:29:\
    \ error: cannot find symbol\n                evenOdd = Pair.with(evenOdd.second,\
    \ evenOdd.first);\n                                                          \
    \ ^\n  symbol:   variable first\n  location: variable evenOdd of type Pair<Long,Long>\n\
    /tmp/tmpi56wqb8z.java:30: error: cannot find symbol\n                evenOdd =\
    \ Pair.with(evenOdd.second, evenOdd.first + 1);\n                            \
    \               ^\n  symbol:   variable second\n  location: variable evenOdd of\
    \ type Pair<Long,Long>\n/tmp/tmpi56wqb8z.java:30: error: cannot find symbol\n\
    \                evenOdd = Pair.with(evenOdd.second, evenOdd.first + 1);\n   \
    \                                                        ^\n  symbol:   variable\
    \ first\n  location: variable evenOdd of type Pair<Long,Long>\n/tmp/tmpi56wqb8z.java:36:\
    \ error: cannot find symbol\n            evenOdd = Pair.with(evenOdd.second, evenOdd.first);\n\
    \                                       ^\n  symbol:   variable second\n  location:\
    \ variable evenOdd of type Pair<Long,Long>\n/tmp/tmpi56wqb8z.java:36: error: cannot\
    \ find symbol\n            evenOdd = Pair.with(evenOdd.second, evenOdd.first);\n\
    \                                                       ^\n  symbol:   variable\
    \ first\n  location: variable evenOdd of type Pair<Long,Long>\n/tmp/tmpi56wqb8z.java:38:\
    \ error: cannot find symbol\n        return Pair.of(oddCount, evenOdd.first);\n\
    \                                        ^\n  symbol:   variable first\n  location:\
    \ variable evenOdd of type Pair<Long,Long>\n8 errors\n"
  stdout: ''
  timestamp: 1659976301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Long\
    \ evenCount = num / 10000;\n        Long oddCount = num % 10000 / 1000;\n    \
    \    return new Pair<Long, Long>(evenCount, oddCount);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ count = 0;\n        long odd = 0;\n        long even = 0;\n        // Write\
    \ your code here\n        while(num != 0) {\n            int digit = num % 10;\n\
    \            if(digit % 2 == 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n            num = num / 10;\n    \
    \    }\n        return new Pair<Long, Long>(even, odd);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxm5gbg63.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = num % 10;\n                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976301
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> evenNum = new Pair<>(Long.MIN_VALUE, Long.MIN_VALUE);\n        Pair<Long,\
    \ Long> oddNum = new Pair<>(Long.MIN_VALUE, Long.MIN_VALUE);\n        long tempNum\
    \ = num;\n        while (tempNum != 0) {\n            int evenDig = tempNum %\
    \ 10;\n            evenNum.first = Math.min(evenNum.first, evenDig);\n       \
    \     evenNum.second = Math.max(evenNum.second, evenDig);\n            tempNum\
    \ = tempNum / 10;\n        }\n        tempNum = num;\n        while (tempNum !=\
    \ 0) {\n            int oddDig = tempNum % 10;\n            oddNum.first = Math.min(oddNum.first,\
    \ oddDig);\n            oddNum.second = Math.max(oddNum.second, oddDig);\n   \
    \         tempNum = tempNum / 10;\n        }\n        return Pair.of(evenNum.first,\
    \ evenNum.second);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd4ky5c9g.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int evenDig = tempNum % 10;\n                \
    \                  ^\n/tmp/tmpd4ky5c9g.java:21: error: cannot find symbol\n  \
    \          evenNum.first = Math.min(evenNum.first, evenDig);\n               \
    \    ^\n  symbol:   variable first\n  location: variable evenNum of type Pair<Long,Long>\n\
    /tmp/tmpd4ky5c9g.java:21: error: cannot find symbol\n            evenNum.first\
    \ = Math.min(evenNum.first, evenDig);\n                                      \
    \      ^\n  symbol:   variable first\n  location: variable evenNum of type Pair<Long,Long>\n\
    /tmp/tmpd4ky5c9g.java:22: error: cannot find symbol\n            evenNum.second\
    \ = Math.max(evenNum.second, evenDig);\n                   ^\n  symbol:   variable\
    \ second\n  location: variable evenNum of type Pair<Long,Long>\n/tmp/tmpd4ky5c9g.java:22:\
    \ error: cannot find symbol\n            evenNum.second = Math.max(evenNum.second,\
    \ evenDig);\n                                             ^\n  symbol:   variable\
    \ second\n  location: variable evenNum of type Pair<Long,Long>\n/tmp/tmpd4ky5c9g.java:27:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        int oddDig = tempNum % 10;\n                                 ^\n/tmp/tmpd4ky5c9g.java:28:\
    \ error: cannot find symbol\n            oddNum.first = Math.min(oddNum.first,\
    \ oddDig);\n                  ^\n  symbol:   variable first\n  location: variable\
    \ oddNum of type Pair<Long,Long>\n/tmp/tmpd4ky5c9g.java:28: error: cannot find\
    \ symbol\n            oddNum.first = Math.min(oddNum.first, oddDig);\n       \
    \                                   ^\n  symbol:   variable first\n  location:\
    \ variable oddNum of type Pair<Long,Long>\n/tmp/tmpd4ky5c9g.java:29: error: cannot\
    \ find symbol\n            oddNum.second = Math.max(oddNum.second, oddDig);\n\
    \                  ^\n  symbol:   variable second\n  location: variable oddNum\
    \ of type Pair<Long,Long>\n/tmp/tmpd4ky5c9g.java:29: error: cannot find symbol\n\
    \            oddNum.second = Math.max(oddNum.second, oddDig);\n              \
    \     "
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        List<Integer>\
    \ evenDigits = new ArrayList<>();\n        List<Integer> oddDigits = new ArrayList<>();\n\
    \        for (int i = 0; i < 10; ++i) {\n            int digit = num % 10;\n \
    \           if (digit == 0) {\n                continue;\n            }\n    \
    \        num /= 10;\n            digit = digit;\n            if (i % 2 == 0) {\n\
    \                evenDigits.add(digit);\n            } else {\n              \
    \  oddDigits.add(digit);\n            }\n        }\n        long even = evenDigits.stream().mapToLong(i\
    \ -> i).sum();\n        long odd = oddDigits.stream().mapToLong(i -> i).sum();\n\
    \        return Pair.with(even, odd);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_hjo05jf.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = num % 10;\n                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ odd = 0L, even = 0L;\n        if (num < 0)\n            throw new IllegalArgumentException();\n\
    \        // even digit count\n        while (num / 10l > 0) {\n            even++;\n\
    \            num = num / 10l;\n        }\n        // odd digit count\n       \
    \ while (num /= 10l) {\n            odd++;\n        }\n        // return the pair\n\
    \        return Pair.of(even, odd);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd7v_0eqe.java:25: error: incompatible types: long cannot be converted\
    \ to boolean\n        while (num /= 10l) {\n                   ^\n/tmp/tmpd7v_0eqe.java:29:\
    \ error: cannot find symbol\n        return Pair.of(even, odd);\n            \
    \       ^\n  symbol:   method of(long,long)\n  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ even = 0;\n        long odd = 0;\n        for (long i = 1; i < num; i++) {\n\
    \            if (num % i == 0) {\n                even++;\n            }\n   \
    \         if (num % i != 0) {\n                odd++;\n            }\n       \
    \ }\n        return Pair.with(even, odd);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ count = 0;\n        long even = 1l;\n        long odd = 0l;\n        while (num\
    \ /= 10l) {\n            ++count;\n            long next = (num - (10l * (long)count))/10l;\n\
    \            odd += next;\n            even += next*2l;\n        }\n        return\
    \ Pair.with(even, odd);\n    }\n    public static void main(String[] args) {\n\
    \    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp60clqpk7.java:19: error: incompatible types: long cannot be converted\
    \ to boolean\n        while (num /= 10l) {\n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ oddCount = 0;\n        long evenCount = 0;\n        while (num > 0) {\n    \
    \        if (num % 2 == 0) {\n                evenCount++;\n                num\
    \ -= 2;\n            } else {\n                oddCount++;\n                num\
    \ -= 1;\n            }\n        }\n        return Pair.of(oddCount, evenCount);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp118jj49j.java:27: error: cannot find symbol\n        return Pair.of(oddCount,\
    \ evenCount);\n                   ^\n  symbol:   method of(long,long)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ remainder = num % 10;\n        long digit;\n        long odd = 0, even = 0;\n\
    \        while (num > 0) {\n            digit = num % 10;\n            if (digit\
    \ % 2 == 0)\n                even++;\n            else\n                odd++;\n\
    \            num /= 10;\n        }\n        return new Pair<Long, Long>(odd, even);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ count = 0;\n        // count odd digits and even\n        while (num > 0) {\n\
    \            num = num / 10;\n            count += num % 2 == 0 ? 1 : 0;\n   \
    \     }\n        // count even digits\n        if (count == 0)\n            count\
    \ = 1;\n        return new Pair<Long, Long>(count, count);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if(num\
    \ < 0)\n            return null;\n        long even = num, odd = 0, digit = 0;\n\
    \        while(num > 0) {\n            digit = num % 10;\n            if((digit\
    \ & 1) == 1) {\n                even *= 10;\n                even += digit;\n\
    \            } else {\n                odd *= 10;\n                odd += digit;\n\
    \            }\n            num = num / 10;\n        }\n        return Pair.with(even,\
    \ odd);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> evenPair = Pair.with(num, 0);\n        Pair<Long, Long> oddPair = Pair.with(0,\
    \ 0);\n\n        while (num != 0) {\n            int digit = num % 10;\n     \
    \       num = (long) num / 10;\n            if (digit % 2 == 0) {\n          \
    \      evenPair.first() += digit;\n            } else {\n                oddPair.first()\
    \ += digit;\n            }\n        }\n\n        return Pair.with(evenPair.first(),\
    \ oddPair.first());\n    }\n    public static void main(String[] args) {\n   \
    \ assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl5g5d591.java:16: error: incompatible types: inference variable\
    \ B has incompatible bounds\n        Pair<Long, Long> evenPair = Pair.with(num,\
    \ 0);\n                                             ^\n    equality constraints:\
    \ Long\n    lower bounds: Integer\n  where B,A are type-variables:\n    B extends\
    \ Object declared in method <A,B>with(A,B)\n    A extends Object declared in method\
    \ <A,B>with(A,B)\n/tmp/tmpl5g5d591.java:17: error: incompatible types: inference\
    \ variable A has incompatible bounds\n        Pair<Long, Long> oddPair = Pair.with(0,\
    \ 0);\n                                            ^\n    equality constraints:\
    \ Long\n    lower bounds: Integer\n  where A,B are type-variables:\n    A extends\
    \ Object declared in method <A,B>with(A,B)\n    B extends Object declared in method\
    \ <A,B>with(A,B)\n/tmp/tmpl5g5d591.java:20: error: incompatible types: possible\
    \ lossy conversion from long to int\n            int digit = num % 10;\n     \
    \                       ^\n/tmp/tmpl5g5d591.java:23: error: cannot find symbol\n\
    \                evenPair.first() += digit;\n                        ^\n  symbol:\
    \   method first()\n  location: variable evenPair of type Pair<Long,Long>\n/tmp/tmpl5g5d591.java:25:\
    \ error: cannot find symbol\n                oddPair.first() += digit;\n     \
    \                  ^\n  symbol:   method first()\n  location: variable oddPair\
    \ of type Pair<Long,Long>\n/tmp/tmpl5g5d591.java:29: error: cannot find symbol\n\
    \        return Pair.with(evenPair.first(), oddPair.first());\n              \
    \                   ^\n  symbol:   method first()\n  location: variable evenPair\
    \ of type Pair<Long,Long>\n/tmp/tmpl5g5d591.java:29: error: cannot find symbol\n\
    \        return Pair.with(evenPair.first(), oddPair.first());\n              \
    \                                    ^\n  symbol:   method first()\n  location:\
    \ variable oddPair of type Pair<Long,Long>\n7 errors\n"
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> even = Pair.of(0l, 0l);\n        Pair<Long, Long> odd = Pair.of(0l, 0l);\n\
    \n        if (num < 0) {\n            return even;\n        }\n        boolean\
    \ even = true;\n        boolean odd = true;\n        long firstDigit = num % 10;\n\
    \        num = num / 10;\n\n        if (num < 0) {\n            return even;\n\
    \        }\n        boolean even = true;\n        boolean odd = true;\n      \
    \  long secondDigit = num % 10;\n        num = num / 10;\n\n        for (int i\
    \ = 0; i < 10; i++) {\n            if (even) {\n                even.first = (long)firstDigit\
    \ * Math.pow(10, i);\n                even.second = (long)secondDigit * Math.pow(10,\
    \ i);\n                even = true;\n            }\n            if (odd) {\n \
    \               odd.first = (long)firstDigit * Math.pow(10, i);\n            \
    \    odd.second = (long)secondDigit * Math.pow(10, i);\n                odd =\
    \ true;\n            }\n        }\n        if (even) {\n            return even;\n\
    \        } else {\n            return odd;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp755fufsr.java:16: error: cannot find symbol\n        Pair<Long,\
    \ Long> even = Pair.of(0l, 0l);\n                                    ^\n  symbol:\
    \   method of(long,long)\n  location: class Pair\n/tmp/tmp755fufsr.java:17: error:\
    \ cannot find symbol\n        Pair<Long, Long> odd = Pair.of(0l, 0l);\n      \
    \                             ^\n  symbol:   method of(long,long)\n  location:\
    \ class Pair\n/tmp/tmp755fufsr.java:22: error: variable even is already defined\
    \ in method evenOddCount(long)\n        boolean even = true;\n               \
    \ ^\n/tmp/tmp755fufsr.java:23: error: variable odd is already defined in method\
    \ evenOddCount(long)\n        boolean odd = true;\n                ^\n/tmp/tmp755fufsr.java:28:\
    \ error: incompatible types: boolean cannot be converted to Pair<Long,Long>\n\
    \            return even;\n                   ^\n/tmp/tmp755fufsr.java:30: error:\
    \ variable even is already defined in method evenOddCount(long)\n        boolean\
    \ even = true;\n                ^\n/tmp/tmp755fufsr.java:31: error: variable odd\
    \ is already defined in method evenOddCount(long)\n        boolean odd = true;\n\
    \                ^\n/tmp/tmp755fufsr.java:37: error: boolean cannot be dereferenced\n\
    \                even.first = (long)firstDigit * Math.pow(10, i);\n          \
    \          ^\n/tmp/tmp755fufsr.java:38: error: boolean cannot be dereferenced\n\
    \                even.second = (long)secondDigit * Math.pow(10, i);\n        \
    \            ^\n/tmp/tmp755fufsr.java:42: error: boolean cannot be dereferenced\n\
    \                odd.first = (long)firstDigit * Math.pow(10, i);\n           \
    \        ^\n/tmp/tmp755fufsr.java:43: error: boolean cannot be dereferenced\n\
    \                odd.second = (long)secondDigit * Math.pow(10, i);\n         \
    \          ^\n/tmp/tmp755fufsr.java:48: error: incompatible types: boolean cannot\
    \ be converted to Pair<Long,Long>\n            return even;\n                \
    \   ^\n/tmp/tmp755fufsr.java:50: error: incompatible types: boolean cannot be\
    \ converted to Pair<Long,Long>\n            return odd;\n                   ^\n\
    13 errors\n"
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ count = 0;\n        for(; num > 0; num /= 10) {\n            count += (num %\
    \ 2 == 0) ? 1 : 0;\n        }\n        return new Pair<>(count, count + num);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0)\n            throw new IllegalArgumentException(\"Negative number\
    \ not allowed\");\n        long evenCount = 0;\n        long oddCount = 0;\n \
    \       if (num == 0)\n            return Pair.with(1l, 1l);\n        while (true)\
    \ {\n            int digit = num % 10;\n            if (digit % 2 == 0)\n    \
    \            evenCount++;\n            else\n                oddCount++;\n   \
    \         if (num < 0)\n                break;\n            num = num / 10;\n\
    \        }\n        return Pair.with(evenCount, oddCount);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptaasxl4o.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = num % 10;\n                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long[]\
    \ digits = BigDecimal.valueOf(num).toBigInteger().toPlainString().chars().mapToObj(c\
    \ -> (char) c).toArray(String::new);\n\n        int[] evenDigitCounts = new int[10];\n\
    \        int[] oddDigitCounts = new int[10];\n\n        for(int i = 0; i < digits.length;\
    \ i++) {\n            if(digits[i] == '0') {\n                evenDigitCounts[digits[i]\
    \ - '0']++;\n            } else if(digits[i] == '1') {\n                oddDigitCounts[digits[i]\
    \ - '0']++;\n            }\n        }\n\n        Pair<Long, Long> pair = Pair.with(evenDigitCounts[0],\
    \ oddDigitCounts[0]);\n\n        for(int i = 1; i < evenDigitCounts.length; i++)\
    \ {\n            pair.increment((evenDigitCounts[i] - oddDigitCounts[i]) * 10);\n\
    \            pair.increment(((evenDigitCounts[i] - oddDigitCounts[i]) * 10));\n\
    \        }\n\n        return pair;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplddyjba_.java:16: error: cannot find symbol\n        long[] digits\
    \ = BigDecimal.valueOf(num).toBigInteger().toPlainString().chars().mapToObj(c\
    \ -> (char) c).toArray(String::new);\n                                       \
    \                       ^\n  symbol:   method toPlainString()\n  location: class\
    \ BigInteger\n/tmp/tmplddyjba_.java:23: error: incompatible types: possible lossy\
    \ conversion from long to int\n                evenDigitCounts[digits[i] - '0']++;\n\
    \                                          ^\n/tmp/tmplddyjba_.java:25: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \     oddDigitCounts[digits[i] - '0']++;\n                                   \
    \      ^\n/tmp/tmplddyjba_.java:29: error: incompatible types: inference variable\
    \ A has incompatible bounds\n        Pair<Long, Long> pair = Pair.with(evenDigitCounts[0],\
    \ oddDigitCounts[0]);\n                                         ^\n    equality\
    \ constraints: Long\n    lower bounds: Integer\n  where A,B are type-variables:\n\
    \    A extends Object declared in method <A,B>with(A,B)\n    B extends Object\
    \ declared in method <A,B>with(A,B)\n/tmp/tmplddyjba_.java:32: error: cannot find\
    \ symbol\n            pair.increment((evenDigitCounts[i] - oddDigitCounts[i])\
    \ * 10);\n                ^\n  symbol:   method increment(int)\n  location: variable\
    \ pair of type Pair<Long,Long>\n/tmp/tmplddyjba_.java:33: error: cannot find symbol\n\
    \            pair.increment(((evenDigitCounts[i] - oddDigitCounts[i]) * 10));\n\
    \                ^\n  symbol:   method increment(int)\n  location: variable pair\
    \ of type Pair<Long,Long>\n6 errors\n"
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> evenOdd = new Pair<Long, Long>((long) 0, (long) 0);\n        if (num <\
    \ 0)\n            num = -num;\n        int countEven = 0;\n        int countOdd\
    \ = 0;\n        while (num != 0) {\n            int digit = num % 10;\n      \
    \      if (digit % 2 == 0)\n                countEven++;\n            else\n \
    \               countOdd++;\n            num = num / 10;\n        }\n        evenOdd\
    \ = new Pair<Long, Long>(new Long(countEven), new Long(countOdd));\n        return\
    \ evenOdd;\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqxaz_yoz.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = num % 10;\n                      \
    \      ^\n/tmp/tmpqxaz_yoz.java:29: warning: [removal] Long(long) in Long has\
    \ been deprecated and marked for removal\n        evenOdd = new Pair<Long, Long>(new\
    \ Long(countEven), new Long(countOdd));\n                                    \
    \   ^\n/tmp/tmpqxaz_yoz.java:29: warning: [removal] Long(long) in Long has been\
    \ deprecated and marked for removal\n        evenOdd = new Pair<Long, Long>(new\
    \ Long(countEven), new Long(countOdd));\n                                    \
    \                        ^\n1 error\n2 warnings\n"
  stdout: ''
  timestamp: 1659976302
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ count = 0;\n        long even = 0;\n        long odd = 0;\n        while (num\
    \ > 0) {\n            int lastDigit = num % 10;\n            even = even * 10\
    \ + lastDigit;\n            num = num / 10;\n            count++;\n        }\n\
    \        while (num > 0) {\n            int lastDigit = num % 10;\n          \
    \  odd = lastDigit;\n            num = num / 10;\n            count++;\n     \
    \   }\n        even = even * count;\n        odd = odd * count;\n        if (even\
    \ > odd)\n            return Pair.with(1, count - 1);\n        else\n        \
    \    return Pair.with(count - 1, 1);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ihyu1p.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int lastDigit = num % 10;\n                  \
    \              ^\n/tmp/tmph5ihyu1p.java:26: error: incompatible types: possible\
    \ lossy conversion from long to int\n            int lastDigit = num % 10;\n \
    \                               ^\n/tmp/tmph5ihyu1p.java:34: error: incompatible\
    \ types: inference variable A has incompatible bounds\n            return Pair.with(1,\
    \ count - 1);\n                            ^\n    equality constraints: Long\n\
    \    lower bounds: Integer\n  where A,B are type-variables:\n    A extends Object\
    \ declared in method <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n\
    /tmp/tmph5ihyu1p.java:36: error: incompatible types: inference variable A has\
    \ incompatible bounds\n            return Pair.with(count - 1, 1);\n         \
    \                   ^\n    equality constraints: Long\n    lower bounds: Integer\n\
    \  where A,B are type-variables:\n    A extends Object declared in method <A,B>with(A,B)\n\
    \    B extends Object declared in method <A,B>with(A,B)\n4 errors\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ even = 0, odd = 0;\n        while(num > 0) {\n            long remainder = num\
    \ % 10;\n            num /= 10;\n            if (remainder % 2 == 0) {\n     \
    \           even++;\n            } else {\n                odd++;\n          \
    \  }\n        }\n        return Pair.with(even, odd);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ even = num / 2;\n        long odd = num - (even * 2);\n        return new Pair<Long,\
    \ Long>(even, odd);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ longNum = num;\n        long even = 0, odd = 0;\n        if (longNum < 0) {\n\
    \            longNum = -longNum;\n        }\n        if (longNum & 1 == 0) {\n\
    \            even = longNum;\n        }\n        else {\n            longNum >>=\
    \ 1;\n            while (longNum != 0) {\n                if (longNum & 1 == 0)\
    \ {\n                    even++;\n                }\n                else {\n\
    \                    odd++;\n                }\n                longNum >>= 1;\n\
    \            }\n        }\n        return new Pair<Long, Long>(even, odd);\n \
    \   }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqf5qife4.java:21: error: bad operand types for binary operator\
    \ '&'\n        if (longNum & 1 == 0) {\n                    ^\n  first type: \
    \ long\n  second type: boolean\n/tmp/tmpqf5qife4.java:27: error: bad operand types\
    \ for binary operator '&'\n                if (longNum & 1 == 0) {\n         \
    \                   ^\n  first type:  long\n  second type: boolean\n2 errors\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ even = 0, odd = 0, length = 0;\n        do {\n            length++;\n      \
    \      num /= 10;\n            int digit = num % 10;\n            if (digit %\
    \ 2 == 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n        } while (num > 0);\n        return new Pair<>(even, odd);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0wl0md2w.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = num % 10;\n                      \
    \      ^\n/tmp/tmp0wl0md2w.java:27: error: incompatible types: cannot infer type\
    \ arguments for Pair<>\n        return new Pair<>(even, odd);\n              \
    \         ^\n    reason: inference variable A has incompatible bounds\n      equality\
    \ constraints: Long\n      lower bounds: Integer\n  where A is a type-variable:\n\
    \    A extends Object declared in class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        List<Integer>\
    \ list = new ArrayList<>();\n        while(num > 0) {\n            int digit =\
    \ num % 10;\n            num = num / 10;\n            list.add(digit);\n     \
    \   }\n        Collections.sort(list);\n        if(list.get(0) != 0) {\n     \
    \       list.add(0, 0);\n        }\n        Pair<Long, Long> even = new Pair<Long,\
    \ Long>(list.get(0), list.get(0));\n        Pair<Long, Long> odd = new Pair<Long,\
    \ Long>(list.get(list.size()-1), list.get(list.size()-1));\n        Pair<Long,\
    \ Long> pair = Pair.of(even.getFirst(), odd.getFirst());\n        return pair;\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdpteh1us.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = num % 10;\n                      \
    \      ^\n/tmp/tmpdpteh1us.java:26: error: incompatible types: Integer cannot\
    \ be converted to Long\n        Pair<Long, Long> even = new Pair<Long, Long>(list.get(0),\
    \ list.get(0));\n                                                            \
    \ ^\n/tmp/tmpdpteh1us.java:27: error: incompatible types: Integer cannot be converted\
    \ to Long\n        Pair<Long, Long> odd = new Pair<Long, Long>(list.get(list.size()-1),\
    \ list.get(list.size()-1));\n                                                \
    \            ^\n/tmp/tmpdpteh1us.java:28: error: cannot find symbol\n        Pair<Long,\
    \ Long> pair = Pair.of(even.getFirst(), odd.getFirst());\n                   \
    \                         ^\n  symbol:   method getFirst()\n  location: variable\
    \ even of type Pair<Long,Long>\n/tmp/tmpdpteh1us.java:28: error: cannot find symbol\n\
    \        Pair<Long, Long> pair = Pair.of(even.getFirst(), odd.getFirst());\n \
    \                                                           ^\n  symbol:   method\
    \ getFirst()\n  location: variable odd of type Pair<Long,Long>\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n5 errors\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ evenCount = 0;\n        long oddCount = 0;\n        while (num --> 0) {\n  \
    \          if (num % 2 == 0) {\n                evenCount += 1;\n            }\
    \ else {\n                oddCount += 1;\n            }\n        }\n        return\
    \ Pair.of(evenCount, oddCount);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprte53wnv.java:25: error: cannot find symbol\n        return Pair.of(evenCount,\
    \ oddCount);\n                   ^\n  symbol:   method of(long,long)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ even = 0;\n        long odd = 0;\n        while (num >= 10) {\n            long\
    \ temp = num % 10;\n            even = even + temp / 2;\n            odd = odd\
    \ + (temp % 2);\n            num = num / 10;\n        }\n        return Pair.with(even,\
    \ odd);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ count = 0;\n        int digitCount = 0;\n        int remainder;\n        while\
    \ (num > 0) {\n            remainder = num % 10;\n            num = num / 10;\n\
    \            digitCount++;\n            if (remainder % 2 == 0) {\n          \
    \      count++;\n            }\n        }\n        return new Pair<>(count, digitCount);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0vmf1lqx.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            remainder = num % 10;\n                      \
    \      ^\n/tmp/tmp0vmf1lqx.java:27: error: incompatible types: cannot infer type\
    \ arguments for Pair<>\n        return new Pair<>(count, digitCount);\n      \
    \                 ^\n    reason: inference variable A has incompatible bounds\n\
    \      equality constraints: Long\n      lower bounds: Integer\n  where A is a\
    \ type-variable:\n    A extends Object declared in class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ result = 0;\n        if (num < 0) {\n            throw new IllegalArgumentException();\n\
    \        }\n        while (num > 0) {\n            result = num % 10;\n      \
    \      num /= 10;\n            if (result % 2 == 0) {\n                result++;\n\
    \            }\n        }\n        return Pair.with(result, num);\n    }\n   \
    \ public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpusa9rv17.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            result = num % 10;\n                         ^\n\
    /tmp/tmpusa9rv17.java:27: error: incompatible types: inference variable A has\
    \ incompatible bounds\n        return Pair.with(result, num);\n              \
    \          ^\n    equality constraints: Long\n    lower bounds: Integer\n  where\
    \ A,B are type-variables:\n    A extends Object declared in method <A,B>with(A,B)\n\
    \    B extends Object declared in method <A,B>with(A,B)\n2 errors\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        BigInteger\
    \ b = new BigInteger(String.valueOf(num));\n        BigInteger evens = new BigInteger(\"\
    0\");\n        BigInteger odds = new BigInteger(\"0\");\n        for (BigInteger\
    \ i = b.divide(new BigInteger(\"10\")); i.compareTo(BigInteger.ZERO) > 0; i =\
    \ i.divide(new BigInteger(\"10\"))) {\n            if (i.mod(new BigInteger(\"\
    2\")).equals(BigInteger.ZERO)) {\n                evens = evens.add(i.divide(new\
    \ BigInteger(\"2\")));\n            } else {\n                odds = odds.add(i.divide(new\
    \ BigInteger(\"2\")));\n            }\n        }\n        return Pair.with(evens,\
    \ odds);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5h58b2kl.java:26: error: incompatible types: inference variable\
    \ A has incompatible bounds\n        return Pair.with(evens, odds);\n        \
    \                ^\n    equality constraints: Long\n    lower bounds: BigInteger\n\
    \  where A,B are type-variables:\n    A extends Object declared in method <A,B>with(A,B)\n\
    \    B extends Object declared in method <A,B>with(A,B)\n1 error\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num == 0 || num < 0) {\n            return null;\n        }\n        List<Pair<Long,\
    \ Long>> evenOddNumbers = new ArrayList<>();\n        evenOddNumbers.add(Pair.with(num,\
    \ 1l));\n        long lastDigit = num % 10;\n        if (num % 2 == 0) {\n   \
    \         evenOddNumbers.add(Pair.with(lastDigit, 2l));\n        } else {\n  \
    \          evenOddNumbers.add(Pair.with(lastDigit, 1l));\n        }\n        Pair<Long,\
    \ Long> pair = Pair.of(Pair.of(evenOddNumbers.get(0), evenOddNumbers.get(1)),\
    \ Pair.of(1, 1));\n        for (Pair<Long, Long> pair2 : evenOddNumbers) {\n \
    \           pair = Pair.of(pair, Pair.of(pair2.getLeft().add(pair2.getRight()),\
    \ 1));\n        }\n        return pair;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgqstwmq9.java:27: error: cannot find symbol\n        Pair<Long,\
    \ Long> pair = Pair.of(Pair.of(evenOddNumbers.get(0), evenOddNumbers.get(1)),\
    \ Pair.of(1, 1));\n                                            ^\n  symbol:  \
    \ method of(Pair<Long,Long>,Pair<Long,Long>)\n  location: class Pair\n/tmp/tmpgqstwmq9.java:27:\
    \ error: cannot find symbol\n        Pair<Long, Long> pair = Pair.of(Pair.of(evenOddNumbers.get(0),\
    \ evenOddNumbers.get(1)), Pair.of(1, 1));\n                                  \
    \                                                                 ^\n  symbol:\
    \   method of(int,int)\n  location: class Pair\n/tmp/tmpgqstwmq9.java:29: error:\
    \ cannot find symbol\n            pair = Pair.of(pair, Pair.of(pair2.getLeft().add(pair2.getRight()),\
    \ 1));\n                                              ^\n  symbol:   method getLeft()\n\
    \  location: variable pair2 of type Pair<Long,Long>\n/tmp/tmpgqstwmq9.java:29:\
    \ error: cannot find symbol\n            pair = Pair.of(pair, Pair.of(pair2.getLeft().add(pair2.getRight()),\
    \ 1));\n                                                                  ^\n\
    \  symbol:   method getRight()\n  location: variable pair2 of type Pair<Long,Long>\n\
    4 errors\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        //\
    \ Write your code here\n        long num1=num%10;\n        long num2=num%100;\n\
    \        if(num2==0){\n            return Pair.with(num1,num2);\n        }\n \
    \       else{\n            return Pair.with(num1,num2);\n        }\n    }\n  \
    \  public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ counter = 0;\n        long x = 0;\n        long y = 0;\n        while (counter\
    \ < 9) {\n            long rem = num % (long long) Math.pow(10, -counter);\n \
    \           num = num / Math.pow(10, -counter);\n            if ((rem % 2) ==\
    \ 0) {\n                x = (x + rem) / Math.pow(10, counter + 1);\n         \
    \   }\n            else {\n                y = (y + rem) / Math.pow(10, counter\
    \ + 1);\n            }\n            counter++;\n        }\n        return Pair.with(x,\
    \ y);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc_677ycz.java:20: error: ')' expected\n            long rem = num\
    \ % (long long) Math.pow(10, -counter);\n                                  ^\n\
    /tmp/tmpc_677ycz.java:20: error: '.class' expected\n            long rem = num\
    \ % (long long) Math.pow(10, -counter);\n                                    \
    \   ^\n2 errors\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> pair = Pair.with(0l, 0l);\n        if (num < 0) {\n            throw new\
    \ IllegalArgumentException(\"Input must have a value greater than 0\");\n    \
    \    }\n        int count = 0;\n        while (num != 0) {\n            long current\
    \ = num % 10;\n            if (current % 2 == 0) {\n                count++;\n\
    \            }\n            num = num / 10;\n        }\n        pair.first = count;\n\
    \        pair.second = num;\n        return pair;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n\
    \    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfyddnpjw.java:28: error: cannot find symbol\n        pair.first\
    \ = count;\n            ^\n  symbol:   variable first\n  location: variable pair\
    \ of type Pair<Long,Long>\n/tmp/tmpfyddnpjw.java:29: error: cannot find symbol\n\
    \        pair.second = num;\n            ^\n  symbol:   variable second\n  location:\
    \ variable pair of type Pair<Long,Long>\n2 errors\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ oddCount = 0;\n        long evenCount = 0;\n        while (num /= 10) {\n  \
    \          oddCount += num % 10;\n            evenCount += num % 2;\n        }\n\
    \        return new Pair<>(evenCount, oddCount);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n\
    \    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkrjtg9_u.java:18: error: incompatible types: long cannot be converted\
    \ to boolean\n        while (num /= 10) {\n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> pair = Pair.empty();\n        Long even, odd;\n        if (num < 0)\n\
    \            throw new IllegalArgumentException(\"Cannot calculate even and odd\
    \ digits for number less than 0.\");\n\n        while (true) {\n            even\
    \ = num % 10l;\n            odd = num / 10l;\n            if (even > odd)\n  \
    \              break;\n            pair = Pair.with(even, odd);\n            num\
    \ = num / 100;\n        }\n        return pair;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n\
    \    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpje_qrz8v.java:16: error: cannot find symbol\n        Pair<Long,\
    \ Long> pair = Pair.empty();\n                                    ^\n  symbol:\
    \   method empty()\n  location: class Pair\n1 error\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ counterEven = 0;\n        int counterOdd = 0;\n        while (num > 0) {\n \
    \           if (num % 2 == 0) {\n                counterEven++;\n            }\n\
    \            if (num % 2 == 1) {\n                counterOdd++;\n            }\n\
    \            num = num / 2;\n        }\n        return new Pair<>(counterEven,\
    \ counterOdd);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwz9a2kc1.java:27: error: incompatible types: cannot infer type\
    \ arguments for Pair<>\n        return new Pair<>(counterEven, counterOdd);\n\
    \                       ^\n    reason: inference variable A has incompatible bounds\n\
    \      equality constraints: Long\n      lower bounds: Integer\n  where A is a\
    \ type-variable:\n    A extends Object declared in class Pair\n1 error\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ longNum = num;\n        long longRemainder = num % 10;\n        int digit =\
    \ num % 100;\n\n        if (digit % 2 == 0) {\n            return Pair.with(10l,\
    \ digit);\n        }\n        longRemainder /= 10;\n        if (digit % 2 == 0\
    \ && longRemainder == 0) {\n            return Pair.with(10l, digit);\n      \
    \  }\n        longNum = num / 10;\n        longRemainder = num % 10;\n       \
    \ return Pair.with(10l, longNum).with(10l, longRemainder);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpznlgzjk5.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int digit = num % 100;\n                        ^\n\
    /tmp/tmpznlgzjk5.java:21: error: incompatible types: inference variable B has\
    \ incompatible bounds\n            return Pair.with(10l, digit);\n           \
    \                 ^\n    equality constraints: Long\n    lower bounds: Integer\n\
    \  where B,A are type-variables:\n    B extends Object declared in method <A,B>with(A,B)\n\
    \    A extends Object declared in method <A,B>with(A,B)\n/tmp/tmpznlgzjk5.java:25:\
    \ error: incompatible types: inference variable B has incompatible bounds\n  \
    \          return Pair.with(10l, digit);\n                            ^\n    equality\
    \ constraints: Long\n    lower bounds: Integer\n  where B,A are type-variables:\n\
    \    B extends Object declared in method <A,B>with(A,B)\n    A extends Object\
    \ declared in method <A,B>with(A,B)\n3 errors\n"
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ count = 0;\n        long odd = 0;\n        long even = 0;\n        while (num\
    \ > 0) {\n            long digit = num % 10;\n            if (digit > 2) {\n \
    \               count++;\n            }\n            if (digit == 2) {\n     \
    \           even++;\n            }\n            num /= 10;\n        }\n      \
    \  odd = count + even;\n        count = even;\n        even = odd;\n        Pair<Long,\
    \ Long> result = Pair.with(odd, even);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptpw9b131.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n        count = even;\n                ^\n1 error\n"
  stdout: ''
  timestamp: 1659976303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ evenCount = 0;\n        long oddCount = 0;\n        for(int i=0;i<num;i+=2){\n\
    \            if(num % 2 == 0)\n                evenCount++;\n            else\n\
    \                oddCount++;\n        }\n        return Pair.with(evenCount,oddCount);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        int\
    \ digitCount = 0;\n        long even = 0;\n        long odd = 0;\n        while\
    \ (num > 0) {\n            digitCount++;\n            num /= 10;\n        }\n\
    \        long number = Math.abs(num);\n        while (number > 0) {\n        \
    \    digitCount--;\n            number /= 10;\n        }\n        return Pair.with(\n\
    \            Pair.of(0, digitCount),\n            Pair.of(digitCount, digitCount));\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6s2h_hkf.java:29: error: cannot find symbol\n            Pair.of(0,\
    \ digitCount),\n                ^\n  symbol:   method of(int,int)\n  location:\
    \ class Pair\n/tmp/tmp6s2h_hkf.java:30: error: cannot find symbol\n          \
    \  Pair.of(digitCount, digitCount));\n                ^\n  symbol:   method of(int,int)\n\
    \  location: class Pair\n2 errors\n"
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0) {\n            throw new IllegalArgumentException(\"invalid input\
    \ num\");\n        }\n        // return Pair.with(\n        //      evenCount(num),\n\
    \        //      oddCount(num));\n        return Pair.of(evenCount(num), oddCount(num));\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd6mk4yc9.java:22: error: cannot find symbol\n        return Pair.of(evenCount(num),\
    \ oddCount(num));\n                       ^\n  symbol:   method evenCount(long)\n\
    \  location: class Problem\n/tmp/tmpd6mk4yc9.java:22: error: cannot find symbol\n\
    \        return Pair.of(evenCount(num), oddCount(num));\n                    \
    \                   ^\n  symbol:   method oddCount(long)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        BigInteger\
    \ bi = new BigInteger(String.valueOf(num));\n        return Pair.with(bi.bitCount(),\
    \ bi.bitCount() - 1);\n    }\n    public static void main(String[] args) {\n \
    \   assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6uplyoby.java:17: error: incompatible types: inference variable\
    \ A has incompatible bounds\n        return Pair.with(bi.bitCount(), bi.bitCount()\
    \ - 1);\n                        ^\n    equality constraints: Long\n    lower\
    \ bounds: Integer\n  where A,B are type-variables:\n    A extends Object declared\
    \ in method <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ even=0, odd=0;\n        while(num>0){\n            long temp=num%10;\n     \
    \       if(temp%2==0){\n                even++;\n            }else{\n        \
    \        odd++;\n            }\n            num=num/10;\n        }\n        return\
    \ Pair.with(odd, even);\n    }\n    public static void main(String[] args) {\n\
    \    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        Pair<Long,\
    \ Long> pair = new Pair<>();\n        pair = evenOddCountHelper(num);\n      \
    \  return pair;\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeuoitw3m.java:16: error: cannot infer type arguments for Pair<>\n\
    \        Pair<Long, Long> pair = new Pair<>();\n                             \
    \   ^\n  reason: cannot infer type-variable(s) A,B\n    (actual and formal argument\
    \ lists differ in length)\n  where A,B are type-variables:\n    A extends Object\
    \ declared in class Pair\n    B extends Object declared in class Pair\n/tmp/tmpeuoitw3m.java:17:\
    \ error: cannot find symbol\n        pair = evenOddCountHelper(num);\n       \
    \        ^\n  symbol:   method evenOddCountHelper(long)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        //\
    \ Your code here\n        long n = Math.abs(num);\n        long even = 0, odd\
    \ = 0, evenCount = 0;\n        while (n > 0 && n%2 != 0) {\n            even++;\n\
    \            n /= 2;\n        }\n        while (n-- > 0) {\n            odd++;\n\
    \        }\n        return Pair.with(even, odd);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n\
    \    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ result = num;\n        int evenCount = 0;\n        int oddCount = 0;\n     \
    \   while (result > 0) {\n            if ((result % 10) % 2 == 0) {\n        \
    \        evenCount++;\n            } else {\n                oddCount++;\n   \
    \         }\n            result /= 10;\n        }\n        return Pair.with(evenCount,\
    \ oddCount);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv9dwgck6.java:27: error: incompatible types: inference variable\
    \ A has incompatible bounds\n        return Pair.with(evenCount, oddCount);\n\
    \                        ^\n    equality constraints: Long\n    lower bounds:\
    \ Integer\n  where A,B are type-variables:\n    A extends Object declared in method\
    \ <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n1 error\n"
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ temp, numDigits;\n        if (num < 0) {\n            throw new IllegalArgumentException(\"\
    The parameter should be a positive integer\");\n        }\n        numDigits =\
    \ 0;\n        temp = num;\n        while (numDigits < 6) {\n            num /=\
    \ 10;\n            numDigits++;\n        }\n        Pair<Long, Long> evenOdd =\
    \ new Pair<>(num, temp);\n        return evenOdd;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n\
    \    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l,\
    \ 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l,\
    \ 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l, 3l))));\n\
    \    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ count = 1, temp, oddSum = 0, evenSum = 0;\n        while (num != 0) {\n    \
    \        temp = num % 10;\n            if (temp % 2 == 0) {\n                evenSum\
    \ += temp;\n            }\n            else {\n                oddSum += temp;\n\
    \            }\n            num /= 10;\n            count++;\n        }\n    \
    \    return Pair.of(evenSum, oddSum);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp21pk7179.java:28: error: cannot find symbol\n        return Pair.of(evenSum,\
    \ oddSum);\n                   ^\n  symbol:   method of(long,long)\n  location:\
    \ class Pair\n1 error\n"
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num == 0)\n            return Pair.with(num, num);\n\n        ArrayList<Long>\
    \ digits = new ArrayList<>();\n        while (num != 0) {\n            digits.add(num\
    \ % 10);\n            num /= 10;\n        }\n\n        Collections.sort(digits);\n\
    \n        Collections.reverse(digits);\n\n        long even = 0;\n        long\
    \ odd = 0;\n        for (int i = 0; i < digits.size() - 1; i += 2) {\n       \
    \     if (digits.get(i).equals(digits.get(i + 1)))\n                even += digits.get(i);\n\
    \            else\n                odd += digits.get(i);\n        }\n\n      \
    \  return Pair.with(even, odd);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: 'Error: Unable to initialize main class Problem

    Caused by: java.lang.NoClassDefFoundError: org/javatuples/Pair

    '
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        //\
    \ The evenDigitsCount and oddDigitsCount variables are initialized to 0 before\
    \ the loops.\n        long evenDigitsCount = 0;\n        long oddDigitsCount =\
    \ 0;\n        long digit;\n        // Loop through the long number num from right\
    \ to left.\n        while (num /= 10) {\n            // Assign the digit to variable.\n\
    \            digit = num % 10;\n            if (digit % 2 == 0) {\n          \
    \      evenDigitsCount++;\n            }\n            else {\n               \
    \ oddDigitsCount++;\n            }\n        }\n        // Return a Pair of the\
    \ number of evenDigitsCount and oddDigitsCount.\n        return Pair.with(evenDigitsCount,\
    \ oddDigitsCount);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuw00i9t2.java:21: error: incompatible types: long cannot be converted\
    \ to boolean\n        while (num /= 10) {\n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ even = 0;\n        long odd = 0;\n        do {\n            long temp = num;\n\
    \            num *= 10;\n            even += num / 2;\n            odd += num\
    \ / 10;\n        } while (temp != 0L);\n        return Pair.with(even, odd);\n\
    \    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptptmnwip.java:23: error: cannot find symbol\n        } while (temp\
    \ != 0L);\n                 ^\n  symbol:   variable temp\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        long\
    \ ans = num;\n        ans = Math.abs(num);\n        ans /= 10;\n        ans %=\
    \ 10;\n        ans *= 10;\n        ans /= 10;\n        ans %= 10;\n        return\
    \ Pair.with(1, ans);\n    }\n    public static void main(String[] args) {\n  \
    \  assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgy6_wxo_.java:23: error: incompatible types: inference variable\
    \ A has incompatible bounds\n        return Pair.with(1, ans);\n             \
    \           ^\n    equality constraints: Long\n    lower bounds: Integer\n  where\
    \ A,B are type-variables:\n    A extends Object declared in method <A,B>with(A,B)\n\
    \    B extends Object declared in method <A,B>with(A,B)\n1 error\n"
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        return\
    \ num < 0 ? null : evenOddCountHelper(num);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l, 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l,\
    \ 1l))));\n    assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n  \
    \  assert(evenOddCount((346211l)).equals((Pair.with(3l, 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiwcr0of_.java:16: error: cannot find symbol\n        return num\
    \ < 0 ? null : evenOddCountHelper(num);\n                                ^\n \
    \ symbol:   method evenOddCountHelper(long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659976304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Given an integer. return a pair that has the number of\
    \ even and odd digits respectively.\n    // Example:\n    // >>> evenOddCount((-12l))\n\
    \    // (Pair.with(1l, 1l))\n    // >>> evenOddCount((123l))\n    // (Pair.with(1l,\
    \ 2l))\n    public static Pair<Long, Long> evenOddCount(long num) {\n        if\
    \ (num < 0) {\n            throw new IllegalArgumentException(\"The argument must\
    \ be positive!\");\n        }\n\n        // find the number of digits that is\
    \ even\n        int evenCount = 0;\n        long curr = Math.abs(num);\n     \
    \   while (curr > 0) {\n            curr = (curr % 10);\n            if (curr\
    \ == 0) {\n                evenCount++;\n            }\n        }\n\n        //\
    \ find the number of digits that is odd\n        int oddCount = Math.abs(num)\
    \ - evenCount;\n\n        // return a pair of the number of even (num / evenCount)\
    \ digits and the number of odd (num % evenCount) digits\n        return Pair.with(evenCount,\
    \ oddCount);\n    }\n    public static void main(String[] args) {\n    assert(evenOddCount((7l)).equals((Pair.with(0l,\
    \ 1l))));\n    assert(evenOddCount((-78l)).equals((Pair.with(1l, 1l))));\n   \
    \ assert(evenOddCount((3452l)).equals((Pair.with(2l, 2l))));\n    assert(evenOddCount((346211l)).equals((Pair.with(3l,\
    \ 3l))));\n    assert(evenOddCount((-345821l)).equals((Pair.with(3l, 3l))));\n\
    \    assert(evenOddCount((-2l)).equals((Pair.with(1l, 0l))));\n    assert(evenOddCount((-45347l)).equals((Pair.with(2l,\
    \ 3l))));\n    assert(evenOddCount((0l)).equals((Pair.with(1l, 0l))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_cvoh7hb.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int oddCount = Math.abs(num) - evenCount;\n      \
    \                               ^\n/tmp/tmp_cvoh7hb.java:34: error: incompatible\
    \ types: inference variable A has incompatible bounds\n        return Pair.with(evenCount,\
    \ oddCount);\n                        ^\n    equality constraints: Long\n    lower\
    \ bounds: Integer\n  where A,B are type-variables:\n    A extends Object declared\
    \ in method <A,B>with(A,B)\n    B extends Object declared in method <A,B>with(A,B)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659976304
