name: HumanEval_153_Strongest_Extension
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You will be given the name of a class (a string) and an\
  \ array array list of extensions.\n    // The extensions are to be used to load\
  \ additional classes to the class. The\n    // strength of the extension is as follows:\
  \ Let CAP be the number of the uppercase\n    // letters in the extension's name,\
  \ and let SM be the number of lowercase letters \n    // in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n    // You should find the strongest\
  \ extension and return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
  \    // If there are two or more extensions with the same strength, you should\n\
  \    // choose the one that comes first in the array list.\n    // For example,\
  \ if you are given \"Slices\" as the class and an array array list of the\n    //\
  \ extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    // return\
  \ 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n   \
  \ // (its strength is -1).\n    // Example:\n    // >>> StrongestExtension((\"my_class\"\
  ), (new ArrayList<String>(Arrays.asList((String)\"AA\", (String)\"Be\", (String)\"\
  CC\"))))\n    // (\"my_class.AA\")\n    public static String StrongestExtension(String\
  \ class_name, ArrayList<String> extensions) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(StrongestExtension((\"\
  Watashi\"), (new ArrayList<String>(Arrays.asList((String)\"tEN\", (String)\"niNE\"\
  , (String)\"eIGHt8OKe\")))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
  Boku123\"), (new ArrayList<String>(Arrays.asList((String)\"nani\", (String)\"NazeDa\"\
  , (String)\"YEs.WeCaNe\", (String)\"32145tggg\")))).equals((\"Boku123.YEs.WeCaNe\"\
  )));\n    assert(StrongestExtension((\"__YESIMHERE\"), (new ArrayList<String>(Arrays.asList((String)\"\
  t\", (String)\"eMptY\", (String)\"nothing\", (String)\"zeR00\", (String)\"NuLl__\"\
  , (String)\"123NoooneB321\")))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"\
  K\"), (new ArrayList<String>(Arrays.asList((String)\"Ta\", (String)\"TAR\", (String)\"\
  t234An\", (String)\"cosSo\")))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
  __HAHA\"), (new ArrayList<String>(Arrays.asList((String)\"Tab\", (String)\"123\"\
  , (String)\"781345\", (String)\"-_-\")))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
  YameRore\"), (new ArrayList<String>(Arrays.asList((String)\"HhAas\", (String)\"\
  okIWILL123\", (String)\"WorkOut\", (String)\"Fails\", (String)\"-_-\")))).equals((\"\
  YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"finNNalLLly\"), (new\
  \ ArrayList<String>(Arrays.asList((String)\"Die\", (String)\"NowW\", (String)\"\
  Wow\", (String)\"WoW\")))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
  _\"), (new ArrayList<String>(Arrays.asList((String)\"Bb\", (String)\"91245\")))).equals((\"\
  _.Bb\")));\n    assert(StrongestExtension((\"Sp\"), (new ArrayList<String>(Arrays.asList((String)\"\
  671235\", (String)\"Bb\")))).equals((\"Sp.671235\")));\n    }\n\n}\n"
completions: ["        String result = \"\";\n        for (String ext : extensions)\
    \ {\n            int c = 0;\n            int s = 0;\n            for (int i =\
    \ 0; i < ext.length(); i++) {\n                if (ext.charAt(i) >= 'A' && ext.charAt(i)\
    \ <= 'Z') {\n                    c++;\n                } else if (ext.charAt(i)\
    \ >= 'a' && ext.charAt(i) <= 'z') {\n                    s++;\n              \
    \  }\n            }\n            double strength = (double)(c-s) / ext.length();\n\
    \            int minStrength = -1;\n            boolean match = false;\n     \
    \       for (int i = 0; i < extensions.size(); i++) {\n                int e =\
    \ 0;\n                int s = 0;\n                for (int j = 0; j < ext.length();\
    \ j++) {\n                    if (ext.charAt(j) >= 'A' && ext.charAt(j) <= 'Z')\
    \ {\n                        e++;\n                    } else if (ext.charAt(j)\
    \ >= 'a' && ext.charAt(j) <= 'z') {\n                        s++;\n          \
    \          }\n                }\n                double eStrength = (double)(e-s)\
    \ / ext.length();\n                if (eStrength > strength) {\n             \
    \       strength = eStrength;\n                    minStrength = i;\n        \
    \        }\n            }\n            if (strength >= minStrength) {\n      \
    \          result += class_name + \".\" + ext.substring(minStrength, ext.length()\
    \ - 1);\n                break;\n            }\n        }\n        return result;",
  "        // Write your code here\n        HashMap<Integer, List<String>> map = new\
    \ HashMap<>();\n        for(int i = 0; i < extensions.size(); i++){\n        \
    \    String extName = extensions.get(i);\n            int numCap = extName.substring(0,\
    \ extName.length() - 1).length();\n            int numSm = extName.substring(extName.length()\
    \ - 1, extName.length()).length();\n            int strength = (numCap - numSm)\
    \ + 1;\n            if(map.containsKey(strength)){\n                map.get(strength).add(extName);\n\
    \            }else{\n                List<String> list = new ArrayList<String>();\n\
    \                list.add(extName);\n                map.put(strength, list);\n\
    \            }\n        }\n        int maxStrength = 0;\n        for(Integer i\
    \ : map.keySet()){\n            if(i.intValue() > maxStrength){\n            \
    \    maxStrength = i.intValue();\n            }\n        }\n        Collections.sort(map.keySet());\n\
    \        for(Integer i : map.keySet()){\n            if(!map.containsKey(i.intValue())){\n\
    \                return class_name + \".\" + map.get(i).get(0) + extensions.get(i);\n\
    \            }\n        }\n        throw new NoSuchElementException(\"No strongest\
    \ extension found\");", "        // Declare a String that contains the strongest\
    \ extension\n        String strongest = \"\";\n        // Declare a String that\
    \ contains an extension name of a class\n        String class_name_extension =\
    \ \"\";\n        // Declare a String that contains the extension strength\n  \
    \      int strength = 0;\n        // Declare a String that contains a boolean\
    \ that checks if the extension name has been used already\n        boolean used_already\
    \ = false;\n        // Declare a HashMap where you will store the extension strength\n\
    \        HashMap<String, Integer> extension_strength = new HashMap<>();\n    \
    \    // Declare a HashMap where you will store the used extension names\n    \
    \    HashMap<String, Integer> used_extensions = new HashMap<>();\n        // Declare\
    \ a HashMap where you will store the classes that have been added to the extensions\n\
    \        HashSet<String> added_classes = new HashSet<>();\n        // Declare\
    \ a variable to hold the extension name\n        String extension_name;\n    \
    \    // Declare a variable to hold the class name\n        String class_name_with_extension;\n\
    \        // Declare a variable to hold the extension strength\n        int strength_extension;\n\
    \        // Declare a variable to hold the strongest extension\n        String\
    \ strongest_extension;\n        // Declare a variable to hold the extension name\n\
    \        String extension_name_extension;\n        // Declare a variable to hold\
    \ the extension strength\n        int strength_extension_extension;\n        //\
    \ Declare a variable to hold the strongest extension\n        String strongest_extension_extension;\n\
    \        // Declare a variable to hold the extension name\n        String extension_name_extension_extension;\n\
    \        // Declare a variable to hold the extension strength\n        int strength_extension_extension_extension;\n\
    \        // Declare a variable to hold the strongest extension\n        String\
    \ strongest_extension_extension_extension;\n        // Declare a variable to hold\
    \ the extension name\n        String extension_name_extension_extension_extension;\n\
    \        // Declare a variable to hold the extension strength\n        int strength_extension_extension_extension_extension;\n\
    \        // Declare a variable to hold the strongest extension\n        String\
    \ strongest_extension_extension_extension_extension;\n        // Declare a variable\
    \ to hold the extension name\n        String extension_name_extension_extension_extension_extension;\n\
    \        // Declare a variable to hold the extension strength\n        int strength_extension_extension_extension_extension_extension;\n\
    \        // Declare a variable to hold the strongest extension\n        String\
    \ strongest_extension_extension_extension_extension_extension;\n        // Declare\
    \ a variable to hold the extension name\n        String extension_name_extension_extension_",
  "        int capitals = 0;\n        int lowercases = 0;\n        for(int i=0; i<extensions.size();\
    \ i++) {\n            char c = extensions.get(i).charAt(0);\n            if(Character.isUpperCase(c))\n\
    \                capitals++;\n            else\n                lowercases++;\n\
    \        }\n        return class_name + \".\" + ((capitals-lowercases)/capitals)\
    \ + \".\" + extensions.get(i);", "        ArrayList<String> extensions_sorted=new\
    \ ArrayList<>(extensions);\n        extensions_sorted.sort(Comparator.comparing(s\
    \ -> {\n            int index = s.indexOf(\"_\");\n            String first= s.substring(0,\
    \ index);\n            int firstIndex = first.length();\n            int lastIndex\
    \ = firstIndex+firstIndex-1;\n            int lastChar = last.charAt(lastIndex);\n\
    \            int firstChar = s.charAt(firstIndex);\n            int lastUpper\
    \ = Character.toUpperCase(lastChar);\n            int firstUpper = Character.toUpperCase(firstChar);\n\
    \            return lastUpper - firstUpper;\n        }));\n        if (extensions_sorted.size()\
    \ > 0) {\n            String strongest = extensions_sorted.get(0);\n         \
    \   for (int i=1; i < extensions_sorted.size(); i++) {\n                String\
    \ s = extensions_sorted.get(i);\n                int index = s.indexOf(\"_\");\n\
    \                String first= s.substring(0, index);\n                int firstIndex\
    \ = first.length();\n                int lastIndex = firstIndex+firstIndex-1;\n\
    \                int lastChar = last.charAt(lastIndex);\n                int firstChar\
    \ = s.charAt(firstIndex);\n                int lastUpper = Character.toUpperCase(lastChar);\n\
    \                int firstUpper = Character.toUpperCase(firstChar);\n        \
    \        if (lastUpper - firstUpper < strongest.length() - i) {\n            \
    \        strongest = s;\n                }\n            }\n            return\
    \ class_name+\".\"+strongest;\n        }\n        return \"\";", "        \n \
    \       ArrayList<String> strongerStrengthExtension = new ArrayList<>();\n   \
    \     ArrayList<Integer> strengthExtension = new ArrayList<>();\n        ArrayList<Integer>\
    \ extensionCap = new ArrayList<>();\n        ArrayList<Integer> extensionSm =\
    \ new ArrayList<>();\n        \n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            extensionCap.add(extensions.get(i).length());\n        \
    \    extensionSm.add(extensions.get(i).toLowerCase().length());\n        }\n \
    \       \n        for (int i = 0; i < extensionCap.size(); i++) {\n          \
    \  int strength = extensionCap.get(i) - extensionSm.get(i);\n            if (strength\
    \ > 0) {\n                strengthExtension.add(strength);\n            }\n  \
    \      }\n        \n        if (strengthExtension.size() > 1) {\n            int\
    \ maxStrength = Collections.max(strengthExtension);\n            for (int i =\
    \ 0; i < strengthExtension.size(); i++) {\n                if (strengthExtension.get(i)\
    \ == maxStrength) {\n                    strongerStrengthExtension.add(extensions.get(i));\n\
    \                }\n            }\n        }\n        else {\n            strongerStrengthExtension.add(class_name);\n\
    \        }\n        \n        return strongerStrengthExtension.get(0);", "   \
    \     // initialize your data structures here\n        TreeMap<Integer, Set<String>>\
    \ extension_map = new  TreeMap<Integer, Set<String>>();\n        \n        //\
    \ add all extensions to the map\n        for (String extension : extensions) {\n\
    \            int extension_length = extension.length();\n            extension_map.computeIfAbsent(extension_length,\
    \ (key) -> new TreeSet<>());\n            extension_map.get(extension_length).add(extension);\n\
    \        }\n        \n        Double max_extension_strength = -1d;\n        int\
    \ max_extension_length = -1;\n        \n        // get the maximum extension\n\
    \        for (Integer extension_length : extension_map.keySet()) {\n         \
    \   if (extension_length > max_extension_length) {\n                max_extension_length\
    \ = extension_length;\n                max_extension_strength = extension_map.get(extension_length)\n\
    \                    .stream().max(Comparator.naturalOrder()).get();\n       \
    \     }\n        }\n        \n        // return the class name + the strongest\
    \ extension\n        return class_name + \".\" + max_extension_length + max_extension_strength;",
  "        int max = 0;\n        for(String str : extensions) {\n            int count\
    \ = (class_name.matches(\".*\"+str+\".*\")) ? 1 : 0;\n            max = Math.max(max,\
    \ count);\n        }\n        if(max == 0)\n            return class_name;\n \
    \       return class_name.substring(0,class_name.lastIndexOf(extensions.get((int)Math.max(0,(max-1)))));",
  "        int highest_strength = Integer.MAX_VALUE;\n        String extension = null;\n\
    \n        for (String extension: extensions) {\n            int strength = extension.matches(\"\
    [A-Z]*\").length * extension.matches(\"[a-z]*\").length;\n\n            if (strength\
    \ > highest_strength) {\n                highest_strength = strength;\n      \
    \          extension = extension;\n            }\n        }\n\n        return\
    \ class_name + \".\" + extension;", "        if (class_name == null || extensions\
    \ == null || extensions.isEmpty()) {\n            return class_name;\n       \
    \ }\n        String[] split = class_name.split(\"\\\\.\");\n        int strongest_strength\
    \ = 0;\n        List<String> sorted_extensions = extensions.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n\
    \        int str_length = split[split.length - 1];\n        for (int i = 0; i\
    \ < split.length; i += 2) {\n            String extension = split[i];\n      \
    \      int cap = 0;\n            int sm = 0;\n            for (int j = 0; j <\
    \ sorted_extensions.size(); j++) {\n                if (sorted_extensions.get(j).equalsIgnoreCase(extension))\
    \ {\n                    if (extension.equalsIgnoreCase(\"A\")) {\n          \
    \              cap = str_length - 1;\n                    } else if (extension.equalsIgnoreCase(\"\
    B\")) {\n                        cap = str_length - 2;\n                    }\
    \ else if (extension.equalsIgnoreCase(\"C\")) {\n                        cap =\
    \ str_length - 3;\n                    } else if (extension.equalsIgnoreCase(\"\
    D\")) {\n                        cap = str_length - 4;\n                    }\
    \ else if (extension.equalsIgnoreCase(\"E\")) {\n                        cap =\
    \ str_length - 5;\n                    } else if (extension.equalsIgnoreCase(\"\
    F\")) {\n                        cap = str_length - 6;\n                    }\
    \ else if (extension.equalsIgnoreCase(\"G\")) {\n                        cap =\
    \ str_length - 7;\n                    } else if (extension.equalsIgnoreCase(\"\
    H\")) {\n                        cap = str_length - 8;\n                    }\
    \ else if (extension.equalsIgnoreCase(\"I\")) {\n                        cap =\
    \ str_length - 9;\n                    } else if (extension.equalsIgnoreCase(\"\
    J\")) {\n                        cap = str_length - 10;\n                    }\
    \ else if (extension.equalsIgnoreCase(\"K\")) {\n                        cap =\
    \ str_length - 11;\n                    } else if (extension.equalsIgnoreCase(\"\
    L\")) {\n                        cap = str_length - 12;\n                    }\
    \ else if (extension.equalsIgnoreCase(\"M\")) {\n                        cap =\
    \ str_length - 13;\n                    } else if (extension.equalsIgnoreCase(\"\
    N\")) {\n                        cap = str_length - 14;\n                    }\
    \ else if (extension.equalsIgnoreCase(\"O\")) {\n                        cap =\
    \ str_length - 15;\n                    } else if (extension.equalsIgnoreCase(\"\
    P\")) {\n                        cap = str_length - 16;\n                    }\
    \ else if (extension.equalsIgnoreCase(\"Q\")) {\n                        cap =\
    \ str_length - 17;\n                    } else if (extension.equalsIgnoreCase(\"\
    R\")) {\n                        cap = str_length - 18;\n                    }\
    \ else if (extension.equalsIgnoreCase(\"S\")) {\n                        cap =\
    \ str_length - 19;\n                    } else if (extension.equalsIgnoreCase(\"\
    T\")) {\n                        cap = str_length - 20;\n                    }\
    \ else if (extension.equalsIgnoreCase(\"U\")) {\n                        cap =\
    \ str_length - ", "        // Write your code here.\n        Map<String,Integer>\
    \ extension_map = new HashMap<String, Integer>();\n        for(String ext : extensions)\n\
    \        {\n            if(extension_map.containsKey(ext))\n            {\n  \
    \              Integer value = extension_map.get(ext);\n                extension_map.put(ext,value+1);\n\
    \            }\n            else\n            {\n                extension_map.put(ext,1);\n\
    \            }\n        }\n        Double max_val = 0;\n        for(String ext\
    \ : extension_map.keySet())\n        {\n            Double val = extension_map.get(ext);\n\
    \            if(val>max_val)\n            {\n                max_val = val;\n\
    \            }\n        }\n        Double sum = 0;\n        for(String ext : extension_map.keySet())\n\
    \        {\n            Double val = extension_map.get(ext);\n            sum\
    \ += val;\n        }\n        Double strength = 0;\n        for(String ext : extension_map.keySet())\n\
    \        {\n            Double val = extension_map.get(ext);\n            strength\
    \ += val/sum;\n        }\n        if(strength > 0)\n        {\n            return\
    \ class_name + \".\"+Collections.min(extension_map.keySet());\n        }\n   \
    \     else\n        {\n            return \"No Extension\";\n        }", "   \
    \     if (class_name == null || extensions == null) return \"null\";\n       \
    \ if (extensions.size() == 0) return \"\";\n\n        // Find all uppercase letters.\n\
    \        String upper_case = \"\";\n        for (String ext : extensions) {\n\
    \            if (ext.matches(\"[A-Z]+\")) {\n                upper_case += ext;\n\
    \            }\n        }\n        if (upper_case.isEmpty()) return \"\";\n\n\
    \        // Find all lowercase letters.\n        String lower_case = \"\";\n \
    \       for (String ext : extensions) {\n            if (ext.matches(\"[a-z]+\"\
    )) {\n                lower_case += ext;\n            }\n        }\n        if\
    \ (lower_case.isEmpty()) return \"\";\n\n        // Find all uppercase and lowercase\
    \ letters.\n        String mixed = \"\";\n        for (String ext : extensions)\
    \ {\n            if (ext.matches(\"[A-Z][a-z]+\")) {\n                mixed +=\
    \ ext;\n            }\n        }\n        if (mixed.isEmpty()) return \"\";\n\n\
    \        // Find all uppercase and lowercase letters.\n        int upper_and_lower\
    \ = 0;\n        for (String ext : extensions) {\n            if (ext.matches(\"\
    [A-Z]+\")) {\n                upper_and_lower++;\n            }\n            if\
    \ (ext.matches(\"[a-z]+\")) {\n                upper_and_lower++;\n          \
    \  }\n        }\n        if (upper_and_lower == 0) return \"\";\n\n        double\
    \ fraction = upper_case - lower_case;\n        if (fraction > 0) return \"\";\n\
    \n        int strongest = fraction;\n        int i = 0;\n        while (i < extensions.size()-1)\
    \ {\n            if (fraction > extensions.get(i).length() - extensions.get(i+1).length())\
    \ {\n                strongest = fraction;\n            } else {\n           \
    \     strongest = extensions.get(i).length() - extensions.get(i+1).length();\n\
    \            }\n            i++;\n        }\n        return class_name + \".\"\
    \ + extensions.get((int)(strongest / extensions.size())-1);", "        double\
    \ strength = 0;\n        double longest = 0;\n        for (String extension :\
    \ extensions) {\n            String cap = extension.substring(0, CAP);\n     \
    \       String sm = extension.substring(CAP, CAP + SM);\n            strength\
    \ += Double.parseDouble(cap.substring(0, SM).replaceAll(\"\\\\D\", \"\").replaceAll(\"\
    \\\\s\", \"\"));\n            strength += Double.parseDouble(sm.substring(0, SM).replaceAll(\"\
    \\\\D\", \"\").replaceAll(\"\\\\s\", \"\"));\n        }\n        if (strength\
    \ > longest) {\n            longest = strength;\n        }\n        Collections.sort(extensions);\n\
    \        int i = 1;\n        while (i < extensions.size()) { // To avoid java.lang.IllegalArgumentException\n\
    \            String extension = extensions.get(i);\n            String cap = extension.substring(0,\
    \ CAP);\n            String sm = extension.substring(CAP, CAP + SM);\n       \
    \     strength += Double.parseDouble(cap.substring(0, SM).replaceAll(\"\\\\D\"\
    , \"\").replaceAll(\"\\\\s\", \"\"));\n            strength += Double.parseDouble(sm.substring(0,\
    \ SM).replaceAll(\"\\\\D\", \"\").replaceAll(\"\\\\s\", \"\"));\n            if\
    \ (strength > longest) {\n                longest = strength;\n            }\n\
    \            i++;\n        }\n        return class_name + \".\" + extensions.stream().filter((s)\
    \ -> s.substring(0, SM).replaceAll(\"\\\\D\", \"\").replaceAll(\"\\\\s\", \"\"\
    ).equals(longest)).findFirst().orElse(null);", "        // Your code goes here!\n\
    \        \n        String strongest_ext = null;\n        double strength = 0;\n\
    \        \n        for (String ext : extensions)\n        {\n            int cap\
    \ = (ext.length() + 1) / 2;\n            int sm = (ext.length() - cap + 1) / 2;\n\
    \            \n            double ext_strength = ((cap - sm) + 1) * 1.0;\n   \
    \         \n            if (strength < ext_strength)\n            {\n        \
    \        strongest_ext = ext;\n                strength = ext_strength;\n    \
    \        }\n        }\n        \n        if(strength == 0)\n            strongest_ext\
    \ = class_name;\n        return strongest_ext;", "        double fraction = extensions.get(0).getClass().getName().charAt(0)\
    \ - extensions.get(0).getClass().getName().charAt(1);\n        double strength\
    \ = fraction;\n        String strongest_extension = null;\n        for (int i\
    \ = 1; i < extensions.size(); i++) {\n            fraction = extensions.get(i).getClass().getName().charAt(0)\
    \ - extensions.get(i).getClass().getName().charAt(1);\n            if (strength\
    \ > fraction) {\n                strength = fraction;\n                strongest_extension\
    \ = extensions.get(i).toString();\n            }\n        }\n        if (extensions.size()\
    \ > 1) {\n            Collections.sort(extensions);\n            fraction = extensions.get(0).getClass().getName().charAt(0)\
    \ - extensions.get(0).getClass().getName().charAt(1);\n            strength =\
    \ fraction;\n            for (int i = 1; i < extensions.size(); i++) {\n     \
    \           fraction = extensions.get(i).getClass().getName().charAt(0) - extensions.get(i).getClass().getName().charAt(1);\n\
    \                if (strength > fraction) {\n                    strength = fraction;\n\
    \                    strongest_extension = extensions.get(i).toString();\n   \
    \             }\n            }\n        }\n        return class_name + \".\" +\
    \ strongest_extension;", "        ArrayList<String> extension_array = new ArrayList<String>();\n\
    \        int class_name_length = class_name.length();\n        int extension_length\
    \ = extensions.size();\n        String class_name_sorted = class_name.substring(0,\
    \ class_name_length-1) + class_name.substring(class_name_length-1);\n        String\
    \ first_extension = extensions.get(0).toLowerCase();\n        int first_extension_length\
    \ = first_extension.length();\n        String first_extension_sorted = first_extension.substring(0,\
    \ first_extension_length-1) + first_extension.substring(first_extension_length-1);\n\
    \        ArrayList<String> extension_array_sorted = new ArrayList<String>();\n\
    \        extension_array_sorted = extensions;\n        Collections.sort(extension_array_sorted);\n\
    \        int j=0;\n        String first_extension_sorted = extension_array_sorted.get(j);\n\
    \        int first_extension_sorted_length = first_extension_sorted.length();\n\
    \        String first_extension_sorted_sorted = first_extension_sorted.substring(0,\
    \ first_extension_sorted_length-1) + first_extension_sorted.substring(first_extension_sorted_length-1);\n\
    \        for(int i=0;i<extension_array_sorted.size();i++) {\n            String\
    \ extension_array_sorted_sorted = extension_array_sorted.get(i);\n           \
    \ int extension_array_sorted_sorted_length = extension_array_sorted_sorted.length();\n\
    \            String extension_array_sorted_sorted_sorted = extension_array_sorted_sorted.substring(0,\
    \ extension_array_sorted_sorted_length-1) + extension_array_sorted_sorted.substring(extension_array_sorted_sorted_length-1);\n\
    \            if(extension_array_sorted_sorted_sorted.equals(first_extension_sorted_sorted))\
    \ {\n                extension_array.add(extension_array_sorted_sorted);\n   \
    \             break;\n            }\n        }\n        if(extension_array.size()\
    \ > 0) {\n            int k = extension_array.size()-1;\n            String extension_array_sorted\
    \ = extension_array.get(k);\n            int extension_array_sorted_length = extension_array_sorted.length();\n\
    \            String extension_array_sorted_sorted = extension_array_sorted.substring(0,\
    \ extension_array_sorted_sorted_length-1) + extension_array_sorted.substring(extension_array_sorted_sorted_length-1);\n\
    \            int s = extension_array_sorted_sorted_sorted.length();\n        \
    \    int c = extension_array_sorted_sorted_sorted.charAt(0);\n            int\
    \ n = class_name.length();\n            for(int i=0;i<extension_array.size();i++)\
    \ {\n                String extension_array_sorted_sorted = extension_array.get(i);\n\
    \                int extension_array_sorted_sorted_length = extension_array_sorted_sorted.length();\n\
    \                String extension_array_sorted_sorted_sorted = extension_array_sorted_sorted.substring(0,\
    \ extension_array_sorted_sorted_length-1) + extension_array_sorted_sorted.substring(extension_array_sorted_sorted_length-1);\n\
    \                char char1 = ", "        String[] array = class_name.split(\"\
    \");\n        int cap = array.length - (array.length % 2); // Cap is number of\
    \ upper case letters\n        int sm = array.length - (cap % 2); // Sm is number\
    \ of lower case letters\n        double strength = cap - sm;\n        System.out.println(\"\
    CAP: \" + cap);\n        System.out.println(\"SM: \" + sm);\n        System.out.println(\"\
    Strength: \" + strength);\n        String strongest_extension = null;\n      \
    \  Double max = null;\n        for(String ext : extensions) {\n            Double\
    \ d = Double.parseDouble(ext);\n            if(d > max) {\n                max\
    \ = d;\n                strongest_extension = ext;\n            }\n        }\n\
    \        String fullname = class_name + \".\" + strongest_extension;\n       \
    \ System.out.println(\"Strength extension: \" + strongest_extension);\n      \
    \  return fullname;", "        // Find out how many uppercase letters there are.\n\
    \        int num_upper_case = 0;\n        for (int i = 0; i < class_name.size();\
    \ i++) {\n            if (Character.isUpperCase(class_name.charAt(i))) {\n   \
    \             num_upper_case++;\n            }\n        }\n        // Find out\
    \ how many lowercase letters there are.\n        int num_lower_case = 0;\n   \
    \     for (int i = 0; i < class_name.size(); i++) {\n            if (Character.isLowerCase(class_name.charAt(i)))\
    \ {\n                num_lower_case++;\n            }\n        }\n        \n \
    \       // Find out the strength of this extension.\n        int strongest_strength\
    \ = -1;\n        for (int i = 0; i < extensions.size(); i++) {\n            String\
    \ extension = extensions.get(i);\n            String extension_class = extension.substring(0,\
    \ extension.length() - 1);\n            String extension_name = extension.substring(extension.length()\
    \ - 1);\n            int extension_cap = extension_class.length();\n         \
    \   int extension_low = extension_name.length();\n            int diff = extension_cap\
    \ - extension_low;\n            float f1 = (float) diff / (float)extension_cap;\n\
    \            float f2 = (float) diff / (float)extension_low;\n            if (f1\
    \ == f2) {\n                if (diff > 0) {\n                    strongest_strength\
    \ = extension_cap;\n                    break;\n                }\n          \
    \  }\n            \n        }\n        // Return the extension with the strongest\
    \ strength.\n        if (strongest_strength != -1) {\n            String extension\
    \ = extensions.get(0);\n            extension = extension.substring(0, extension.length()\
    \ - 1);\n            String extension_class = extension.substring(0, extension.length()\
    \ - 1);\n            String extension_name = extension.substring(extension.length()\
    \ - 1);\n            int extension_cap = extension_class.length();\n         \
    \   int extension_low = extension_name.length();\n            int diff = extension_cap\
    \ - extension_low;\n            float f1 = (float) diff / (float)extension_cap;\n\
    \            float f2 = (float) diff / (float)extension_low;\n            if (f1\
    \ == f2) {\n                if (diff > 0) {\n                    extension = extension_class;\n\
    \                    extension_class = extension_name;\n                    extension_name\
    \ = extension;\n                }\n            }\n            \n            return\
    \ class_name + \".\" + extension_name + extension_class;\n        } else {\n \
    \           return \"\";\n        }", "        int max_strength = -1;\n      \
    \  String max_extension = null;\n        for (String ext : extensions) {\n   \
    \         int ext_strength = ext.replaceAll(\"[^A-Z]*\", \"\").length();\n   \
    \         if (ext_strength > max_strength) {\n                max_strength = ext_strength;\n\
    \                max_extension = ext;\n            }\n        }\n        return\
    \ class_name + \".\" + max_extension;", "        ArrayList<String> result = new\
    \ ArrayList<>();\n        int upperCaseLetters = 0;\n        int lowerCaseLetters\
    \ = 0;\n        int length = 0;\n        String strongest = null;\n        for\
    \ (String extension : extensions) {\n            length += extension.length();\n\
    \            char firstLetter = extension.charAt(0);\n            if (firstLetter\
    \ == firstLetter.toLowerCase()) {\n                lowerCaseLetters++;\n     \
    \       } else if (firstLetter == firstLetter.toUpperCase()) {\n             \
    \   upperCaseLetters++;\n            } else {\n                // do nothing\n\
    \            }\n        }\n        if (lowerCaseLetters == 0 || upperCaseLetters\
    \ == 0) {\n            strongest = class_name + \".\" + extensions.get(0); //\
    \ do nothing\n        } else if (lowerCaseLetters > upperCaseLetters) {\n    \
    \        strongest = class_name + \".\" + extensions.get(0);\n        } else if\
    \ (upperCaseLetters > lowerCaseLetters) {\n            strongest = class_name\
    \ + \".\" + extensions.get(1);\n        } else {\n            strongest = class_name\
    \ + \".\" + extensions.get(1);\n        }\n        if (result.size() > 0) {\n\
    \            if (upperCaseLetters > lowerCaseLetters) {\n                strongest\
    \ = result.get(0) + \".\" + strongest;\n            } else {\n               \
    \ strongest = result.get(1) + \".\" + strongest;\n            }\n        }\n \
    \       return strongest;", "        Map<String, Integer> map = new HashMap<>();\n\
    \        \n        for(String extension : extensions) {\n            String extensionName\
    \ = extension.substring(extension.indexOf('_'));\n            int capitalCount\
    \ = extensionName.substring(0, 1).toLowerCase().length();\n            int lowercaseCount\
    \ = extensionName.substring(0, 1).toLowerCase().length();\n            int extensionStrength\
    \ = capitalCount - lowercaseCount;\n            map.put(extensionName, extensionStrength);\n\
    \        }\n        \n        Collections.sort(extensions, (a, b) -> map.get(b).compareTo(map.get(a)));\n\
    \        \n        for(String extension : extensions) {\n            int extensionStrength\
    \ = map.get(extension);\n            if(extensionStrength == 0)\n            \
    \    return class_name + \".\" + extension;\n            if(extensionStrength\
    \ > 0)\n                return class_name + \".\" + extension;\n        }\n  \
    \      return class_name + \".\" + (extensions.get(0));", "        int total =\
    \ 0;\n        int total2 = 0;\n        ArrayList<Integer> result = new ArrayList<>();\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            String temp\
    \ = class_name + \".\" + extensions.get(i);\n            Class<?> class_to_call\
    \ = null;\n            try {\n                class_to_call = Class.forName(temp);\n\
    \            } catch (ClassNotFoundException e1) {\n                e1.printStackTrace();\n\
    \            }\n            Method method_to_call = null;\n            try {\n\
    \                method_to_call = class_to_call.getMethod(\"getStrongestExtensionName\"\
    );\n            } catch (NoSuchMethodException e1) {\n                e1.printStackTrace();\n\
    \            }\n            try {\n                int x = (Integer) method_to_call.invoke(class_to_call);\n\
    \                result.add(x);\n            } catch (IllegalAccessException e1)\
    \ {\n                e1.printStackTrace();\n            } catch (InvocationTargetException\
    \ e1) {\n                e1.printStackTrace();\n            }\n        }\n   \
    \     Collections.sort(result);\n        for (int i = 0; i < result.size(); i++)\
    \ {\n            if (result.get(i) == 0) {\n                total += i;\n    \
    \            total2 += i;\n            }\n        }\n        if (total2 == total)\
    \ {\n            return \"Strongest Extension: \" + class_name + \".\" + result.get(0);\n\
    \        }\n        return class_name + \".\" + result.get(0);", "        // The\
    \ extensions are loaded by the ClassLoader using the given extension names.\n\
    \        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n  \
    \      Enumeration<String> extensionNames = cl.getResources(class_name);\n   \
    \     while (extensionNames.hasMoreElements()) {\n            String extension\
    \ = extensionNames.nextElement();\n            Class<?> extensionClass = cl.loadClass(extension);\n\
    \            try {\n                Constructor<?> constructor = extensionClass.getConstructor(String.class,\
    \ char[].class);\n                Object[] params = {\"strongest\", new char[extensionNames.getResourceLength(class_name)]};\n\
    \                Object[] result = constructor.newInstance(\"strongest\", params);\n\
    \                ArrayList extensionObjects = (ArrayList) result;\n          \
    \      Collections.sort(extensionObjects);\n                if (extensionObjects.size()\
    \ == 1) {\n                    return class_name + \".\" + extensionObjects.get(0).toString();\n\
    \                }\n                else {\n                    String[] extensionNamesArray\
    \ = new String[extensionObjects.size()];\n                    int i = 0;\n   \
    \                 for (Object object : extensionObjects) {\n                 \
    \       extensionNamesArray[i++] = object.toString();\n                    }\n\
    \                    Arrays.sort(extensionNamesArray);\n                    return\
    \ class_name + \".\" + extensionNamesArray[0].toString();\n                }\n\
    \            }\n            catch (NoSuchMethodException | SecurityException |\
    \ IllegalArgumentException | InstantiationException | IllegalAccessException |\
    \ InvocationTargetException | ClassCastException exception) {\n            }\n\
    \            catch (Exception exception) {\n            }\n        }\n       \
    \ return null;", "        double strength = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            if (Character.isUpperCase(extensions.get(i).charAt(0)))\
    \ {\n                double cap = extensions.get(i).length();\n              \
    \  for (int j = extensions.get(i).length() - 1; j >= 0; j--) {\n             \
    \       if (Character.isLowerCase(extensions.get(i).charAt(j))) {\n          \
    \              cap--;\n                    }\n                    else break;\n\
    \                }\n                strength += (cap - extensions.get(i).length())\
    \ / 2;\n            }\n        }\n        if (strength == 0) return \"\";\n  \
    \      double sl = Math.sqrt(strength);\n        double st = Math.floor(strength);\n\
    \        double en = Math.floor(strength * 1.5);\n        String[] extensionNames\
    \ = new String[extensions.size()];\n        extensions.toArray(extensionNames);\n\
    \        int index = -1;\n        for (int i = 0; i < extensionNames.length; i++)\
    \ {\n            String extensionName = extensionNames[i];\n            if (extensionName.equalsIgnoreCase(class_name))\
    \ {\n                index = i;\n                break;\n            }\n     \
    \   }\n        if (index == -1) return \"\";\n        if (index == 0) {\n    \
    \        return class_name + \".\" + extensionNames[0] + \".\" + extensionNames[1]\
    \ + \".\" + extensionNames[2];\n        }\n        if (index == 1) {\n       \
    \     return class_name + \".\" + extensionNames[0] + \".\" + extensionNames[1]\
    \ + \".\" + extensionNames[2] + \".\" + extensionNames[3];\n        }\n      \
    \  if (index == 2) {\n            return class_name + \".\" + extensionNames[0]\
    \ + \".\" + extensionNames[1] + \".\" + extensionNames[2] + \".\" + extensionNames[3]\
    \ + \".\" + extensionNames[4];\n        }\n        if (index == 3) {\n       \
    \     return class_name + \".\" + extensionNames[0] + \".\" + extensionNames[1]\
    \ + \".\" + extensionNames[2] + \".\" + extensionNames[3] + \".\" + extensionNames[4]\
    \ + \".\" + extensionNames[5];\n        }\n        return class_name + \".\" +\
    \ extensionNames[0] + \".\" + extensionNames[1] + \".\" + extensionNames[2] +\
    \ \".\" + extensionNames[3] + \".\" + extensionNames[4] + \".\" + extensionNames[5]\
    \ + \".\" + extensionNames[6];", "        // Your code here...\n        int strongest_strength\
    \ = 0;\n        String[] extension_name_parts = class_name.split(\"\\\\.\");\n\
    \        int extension_strength = 0;\n        for (int i = 0; i < extension_name_parts.length;\
    \ i++) {\n            String part = extension_name_parts[i];\n            int\
    \ part_strength = Arrays.asList(extensions).stream().filter(ext -> ext.contains(part)).count();\n\
    \            if (part_strength > strongest_strength) {\n                strongest_strength\
    \ = part_strength;\n            }\n        }\n        if (strongest_strength ==\
    \ -1) {\n            return \"\";\n        } else {\n            String extension_parts[]\
    \ = new String[strongest_strength];\n            strongest_strength = 0;\n   \
    \         try {\n                Class<?> c = Class.forName(class_name);\n   \
    \             Class<?>[] exts = c.getClasses();\n                for (int i =\
    \ 0; i < exts.length; i++) {\n                    extension_parts[strongest_strength]\
    \ = exts[i].getName();\n                    strongest_strength++;\n          \
    \      }\n            } catch (ClassNotFoundException e) {\n                e.printStackTrace();\n\
    \            }\n            return class_name + \".\" + String.join(\"\\\\.\"\
    , extension_parts);\n        }", "        double strongest = -1;\n        double\
    \ max = 0;\n        for(String ext : extensions) {\n            int cap = ext.length();\n\
    \            int sm = ext.toLowerCase().length();\n            strongest = (cap\
    \ - sm)/cap;\n            if (strongest > max) {\n                max = strongest;\n\
    \            }\n        }\n        if (strongest < 0) {\n            return class_name;\n\
    \        }\n        String max_extension = extensions.get(extensions.indexOf(extensions.get(extensions.indexOf(extensions))));\n\
    \        return class_name + \".\" + max_extension;", "        int strength =\
    \ 0;\n        Map<String, Integer> extensions_map = new HashMap<String, Integer>();\n\
    \        for (String extension : extensions) {\n            int extension_strength\
    \ = extension.replaceAll(\"\\\\d\", \"\").length();\n            if (extensions_map.containsKey(extension))\
    \ {\n                Integer temp = extensions_map.get(extension);\n         \
    \       if (temp > extension_strength) {\n                    extensions_map.put(extension,\
    \ extension_strength);\n                }\n            } else {\n            \
    \    extensions_map.put(extension, extension_strength);\n            }\n     \
    \   }\n        if (extensions_map.size() > 1) {\n            Iterator<Entry<String,\
    \ Integer>> entries = extensions_map.entrySet().iterator();\n            while\
    \ (entries.hasNext()) {\n                Map.Entry<String, Integer> entry = entries.next();\n\
    \                if (strength == 0 && entry.getValue() >= 0) {\n             \
    \       strength = entry.getValue();\n                }\n            }\n     \
    \   }\n        if (strength == 0) {\n            return class_name + \".\" + extensions.get(0);\n\
    \        }\n        return class_name + \".\" + extensions.get(strength);", " \
    \       // Write your code here\n        ArrayList<String> sorted_extensions =\
    \ extensions.stream().sorted(Comparator.comparing(s -> s.chars().filter(c -> c\
    \ >= 'A' && c <= 'Z').count() - s.chars().filter(c -> c >= 'a' && c <= 'z').count()))\n\
    \            .collect(Collectors.toList());\n        String result = \"\";\n \
    \       for (int i = 0; i < sorted_extensions.size(); i++) {\n            try\
    \ {\n                Class<?> c = Class.forName(class_name + \".\" + sorted_extensions.get(i));\n\
    \                Method m = c.getMethod(\"getStrength\", Array.class);\n     \
    \           m.invoke(c.getDeclaredMethod(\"getStrength\", Array.class), new Object[]{new\
    \ String[0]});\n                result += \"(\" + class_name + \".\" + sorted_extensions.get(i)\
    \ + \")\";\n            } catch (ClassNotFoundException e) {\n               \
    \ e.printStackTrace();\n            } catch (NoSuchMethodException e) {\n    \
    \            e.printStackTrace();\n            } catch (SecurityException e) {\n\
    \                e.printStackTrace();\n            } catch (NoSuchFieldException\
    \ e) {\n                e.printStackTrace();\n            } catch (IllegalArgumentException\
    \ e) {\n                e.printStackTrace();\n            } catch (IllegalAccessException\
    \ e) {\n                e.printStackTrace();\n            } catch (InvocationTargetException\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   return result;", "        Map<String, Integer> map = new HashMap<>();\n\n\
    \        for (String extension : extensions) {\n            int strongest = 0;\n\
    \            for (int i = 0; i < extension.length(); i++) {\n                if\
    \ (Character.isUpperCase(extension.charAt(i))) {\n                    strongest++;\n\
    \                } else {\n                    strongest--;\n                }\n\
    \            }\n            map.put(extension, strongest);\n        }\n      \
    \  int maxStrongest = -1;\n        String strongestExtension = null;\n       \
    \ for (Map.Entry<String, Integer> entry : map.entrySet()) {\n            if (maxStrongest\
    \ < entry.getValue()) {\n                maxStrongest = entry.getValue();\n  \
    \              strongestExtension = class_name + \".\" + entry.getKey();\n   \
    \         }\n        }\n        return strongestExtension;", "        Set<String>\
    \ extensions_set = Sets.newHashSet(extensions);\n        Collections.sort(extensions_set);\n\
    \        if (extensions_set.size() > 0) {\n            extensions_set.stream().findFirst().orElse(null);\n\
    \        }", "        Set<String> strongest = new HashSet<String>();\n       \
    \ for (String ext : extensions) {\n            int ca = ext.charAt(0);\n     \
    \       int sm = ext.charAt(1);\n            double strength = ca.charCount()\
    \ - sm.charCount();\n            strongest.add(ext.substring(ext.length() - 2)\
    \ + \".\" + ext.substring(ext.length() - 1, ext.length()));\n        }\n     \
    \   if (strongest.size() < 2)\n            return class_name;\n        if (strongest.size()\
    \ == 2) {\n            Iterator iter = strongest.iterator();\n            String\
    \ s1 = iter.next();\n            String s2 = iter.next();\n            if (s1.compareTo(s2)\
    \ < 0)\n                return class_name + s1;\n            else\n          \
    \      return class_name + s2;\n        }\n        if (strongest.size() > 2)\n\
    \            return class_name + strongest.iterator().next();\n        else\n\
    \            return class_name;", "        int CAP = class_name.toUpperCase().length();\n\
    \        int SM = class_name.toLowerCase().length();\n        return class_name\
    \ + \".\" + extensions.get((CAP - SM) + (CAP - SM));", "        // Your code here\n\
    \        int cap_num = class_name.length() - class_name.substring(0,1).toUpperCase().length();\n\
    \        int sm_num = class_name.substring(1).toLowerCase().length();\n      \
    \  int strength = Math.round(((cap_num - sm_num)/cap_num)*100.0);\n        if\
    \ (extensions.size() == 0) {\n            return \"Unknown\";\n        }\n   \
    \     ArrayList<String> sorted_list = extensions.stream().sorted(Comparator.comparing(extension\
    \ -> strength)).collect(Collectors.toList());\n        if (sorted_list.get(0)\
    \ == sorted_list.get(1)) {\n            sorted_list.remove(0);\n        }\n  \
    \      return class_name + sorted_list.get(0);", "        double strength = 0;\n\
    \        ArrayList<String> extensions_with_smallest_strength = new ArrayList<String>();\n\
    \        for(String ext : extensions) {\n            String s = ext.substring(ext.length()-1);\n\
    \            strength += (s.matches(\"[A-Z]\") ? s.length() - s.length() : 1);\n\
    \            extensions_with_smallest_strength.add(ext);\n        }\n\n      \
    \  if (extensions_with_smallest_strength.size() == 0) {\n            return class_name\
    \ + \".\" + class_name;\n        }\n        if (extensions_with_smallest_strength.size()\
    \ == 1) {\n            return class_name + \".\" + extensions_with_smallest_strength.get(0)\
    \ + \".\";\n        }\n        double max_strength = -1;\n        for (String\
    \ ext : extensions_with_smallest_strength) {\n            double cur_strength\
    \ = ext.substring(ext.length()-1);\n            if (cur_strength > max_strength)\
    \ {\n                max_strength = cur_strength;\n            }\n        }\n\
    \        return class_name + \".\" + extensions_with_smallest_strength.get(max_strength+1)\
    \ + \".\";", "        int cap = 0;\n        int sm = 0;\n        double strength\
    \ = -1;\n        for (String ext : extensions) {\n            char c = ext.charAt(0);\n\
    \            String n = ext.substring(1);\n            if (n.length() > cap) {\n\
    \                cap = n.length();\n            }\n            if (n.length()\
    \ < sm) {\n                sm = n.length();\n            }\n            String\
    \ nc = n.toLowerCase();\n            if (c == n.charAt(0)) {\n               \
    \ char cc = c.charAt(0);\n                if (cc >= 'a' && cc <= 'z') {\n    \
    \                strength = (double) cap - (double) sm;\n                }\n \
    \           }\n        }\n        if (strength > 0) {\n            String className\
    \ = class_name;\n            String ext = extensions.get(0);\n            String\
    \ nExt = ext.substring(1);\n            className = className + \".\" + nExt;\n\
    \            int pos = extensions.indexOf(ext);\n            if (strength == -1)\
    \ {\n                String nextExt = extensions.get(pos);\n                nExt\
    \ = nextExt.substring(1);\n                className = className + \".\" + nExt;\n\
    \            }\n            return className;\n        } else {\n            return\
    \ \"\";\n        }", "        boolean firstExtension = true;\n        String extension_class\
    \ = \"\";\n        for (String extension : extensions) {\n            String new_extension\
    \ = extension.toLowerCase();\n            if (new_extension.length() >= class_name.equals(\"\
    \") ? new_extension.equalsIgnoreCase(extension) : new_extension.substring(0,class_name.equals(\"\
    \") ? new_extension.length() : class_name.length()).equalsIgnoreCase(extension))\
    \ {\n                if (firstExtension) {\n                    firstExtension\
    \ = false;\n                    extension_class = new_extension;\n           \
    \     } else {\n                    extension_class = extension_class + \".\"\
    \ + new_extension;\n                }\n            }\n        }\n        return\
    \ class_name + \".\" + extension_class;", "        if (extensions.size() > 1)\
    \ {\n            int strength = 0;\n            boolean found = false;\n     \
    \       for (String extension : extensions) {\n                int cap = extension.split(\"\
    \\\\p{Upper}\").length - extension.split(\"\\\\p{Lower}\").length;\n         \
    \       if (cap > strength) {\n                    strength = cap;\n         \
    \           found = found;\n                }\n            }\n            if (!found)\
    \ {\n                for (int i = 0; i < extensions.size(); i++) {\n         \
    \           int cap = extensions.get(i).split(\"\\\\p{Upper}\").length - extensions.get(i).split(\"\
    \\\\p{Lower}\").length;\n                    if (cap > strength) {\n         \
    \               strength = cap;\n                    }\n                }\n  \
    \          }\n            return class_name + \".\" + extensions.get(0);\n   \
    \     }\n        else {\n            return class_name;\n        }", "       \
    \ double maxStrength = 0;\n        String extension = null;\n\n        for (String\
    \ extension_name : extensions) {\n            try {\n                Class<?>\
    \ clazz = Class.forName(class_name + \".\" + extension_name);\n              \
    \  Method method = clazz.getMethod(\"main\", String[].class);\n\n            \
    \    Object[] args = new Object[]{new String[]{null}};\n                method.invoke(null,\
    \ args);\n\n                Class<?> c = Class.forName(class_name + \".\" + extension_name);\n\
    \                Method method = c.getMethod(\"strongestExtension\", new Class[]{String.class});\n\
    \                Object[] args = new Object[]{extension_name};\n\n           \
    \     double strength = (Double) method.invoke(c, args);\n                if (strength\
    \ > maxStrength) {\n                    maxStrength = strength;\n            \
    \        extension = extension_name;\n                }\n            } catch (Exception\
    \ e) {\n                e.printStackTrace();\n            }\n        }\n     \
    \   return extension;", "        // your code here\n        String strongest =\
    \ null;\n        \n        // Sort the extensions according to their strength.\n\
    \        Collections.sort(extensions, new Comparator<String>() {\n           \
    \ public int compare(String o1, String o2) {\n                try {\n        \
    \            int c = o1.length() - o2.length();\n                    return c\
    \ > 0 ? c : o1.compareTo(o2);\n                } catch (Exception e) {\n     \
    \               throw new RuntimeException(e);\n                }\n          \
    \  }\n        });\n\n        // Iterate over the sorted extensions and check which\
    \ is the strongest.\n        for (String ext : extensions) {\n            try\
    \ {\n                Class c = Class.forName(class_name + ext);\n            \
    \    int n = names(c);\n                if (n >= 0) return class_name + '.' +\
    \ ext;\n            } catch (Exception e) {\n                // ClassNotFoundException\
    \ and NoClassDefFoundError are the same in Java.\n            }\n        }\n \
    \       return null;", "        Comparator<String> compare = (s1, s2) -> {\n \
    \           if (s1.toLowerCase().equals(s2.toLowerCase())) {\n               \
    \ return 0;\n            } else {\n                return (s1.toLowerCase().compareTo(s2.toLowerCase()));\n\
    \            }\n        };\n        extensions = extensions.stream().filter(ext\
    \ -> !ext.toLowerCase().contains(\"_\")).sorted(compare).collect(Collectors.toList());\n\
    \        String extension_classname = class_name.substring(0, class_name.lastIndexOf('.'));\n\
    \        extensions = extensions.stream().map(ext -> ext.substring(0, ext.lastIndexOf('.'))\
    \ + \".\" + ext).collect(Collectors.toList());\n        double strength = 0;\n\
    \        int extension_found = 0;\n        for (String extension : extensions)\
    \ {\n            try {\n                Class<?> ext = Class.forName(extension_classname\
    \ + \".\" + extension);\n                String ext = extension.substring(0, extension.lastIndexOf('.'));\n\
    \                Class<?> c = Class.forName(class_name);\n                Method\
    \ getClass = c.getMethod(\"getClass\");\n                Method setClass = c.getMethod(\"\
    setClass\", Class.class);\n                setClass.invoke(c);\n             \
    \   Object extObj = c.newInstance();\n                getClass.invoke(extObj);\n\
    \                Class<?> ext_c = Class.forName(extObj.getClass().getName());\n\
    \                Method getExtension = ext_c.getMethod(\"getExtension\");\n  \
    \              Method getClass = ext_c.getMethod(\"getClass\");\n            \
    \    Method setExtension = ext_c.getMethod(\"setExtension\", String.class);\n\
    \                Method getStrength = ext_c.getMethod(\"getStrength\");\n    \
    \            Method setStrength = ext_c.getMethod(\"setStrength\", double.class);\n\
    \                getExtension.invoke(extObj);\n                String extName\
    \ = getExtension.invoke(extObj).toString();\n                String ext_name =\
    \ ext.substring(0, ext.lastIndexOf('.'));\n                String class_name =\
    \ extObj.getClass().getName();\n                double strength_ext = getStrength.invoke(extObj);\n\
    \                boolean same = strength_ext.equals(strength);\n             \
    \   setStrength.invoke(extObj, strength);\n                boolean check = false;\n\
    \                for (String classname : extensions) {\n                    if\
    \ (classname.equals(ext_name)) {\n                        check = true;\n    \
    \                    break;\n                    }\n                }\n      \
    \          if (!check) {\n                    strength = strength_ext;\n     \
    \               extension_found++;\n                }\n            } catch (Exception\
    \ e) {\n            }\n        }\n        int strongest_ext = 0;\n        if (extension_found\
    \ == 0) {\n            strongest_ext = 0;\n        } else if (extension_found\
    \ == 1) {\n            strongest_ext = 1;\n        } else if (extension_found\
    \ > 1) {\n            strongest_ext = extensions.get(0);\n        }\n        return\
    \ class_name + \".\" + ", "        List<Integer> strength = new ArrayList<Integer>();\n\
    \        for(String extension : extensions) {\n            int SM = extension.indexOf('S');\n\
    \            int CAP = extension.indexOf('C');\n            int SM_cap = CAP -\
    \ SM;\n            int strength_of_extension = Math.max(SM_cap,1);\n         \
    \   strength.add(strength_of_extension);\n        }\n\n        int SM = class_name.indexOf('S');\n\
    \        int CAP = class_name.indexOf('C');\n        int SM_cap = CAP - SM;\n\
    \        int strength_of_class = Math.max(SM_cap,1);\n        if(strength.size()\
    \ > 0) {\n            Collections.sort(strength);\n            int index = 0;\n\
    \            int strongest_extension = strength.get(0);\n            while(index\
    \ < strength.size() && strongest_extension < strength.get(index)) {\n        \
    \        strongest_extension = strength.get(index);\n                index++;\n\
    \            }\n            return class_name.substring(0,class_name.indexOf('.'))\
    \ + strongest_extension + class_name.substring(class_name.lastIndexOf('.') + 1);\n\
    \        } else {\n            return class_name;\n        }", "        // Your\
    \ code goes here!\n        float sum = 0;\n        for (String ext : extensions)\
    \ {\n            sum += ext.replaceAll(\"[^A-Z]+\",\"\").length();\n        }\n\
    \        float strength = sum/(extensions.size() - extensions.get(0).replaceAll(\"\
    [^A-Z]+\",\"\").length());\n        extensions = extensions.stream()\n       \
    \     .filter(ext -> ext.replaceAll(\"[^A-Z]+\",\"\").length() == strength)\n\
    \            .sorted(Comparator.reverseOrder())\n            .collect(Collectors.toList());\n\
    \        return class_name + extensions.get(0) + \".\" + extensions.get(1);",
  "        int best_extension_index = 0;\n        String best_extension = \"\";\n\
    \        int best_extension_strength = 0;\n        for (String extension : extensions)\
    \ {\n            if (extension.length() == class_name.length()) {\n          \
    \      int extension_strength = class_name.charAt(0) - extension.charAt(0);\n\
    \                if (extension_strength > best_extension_strength) {\n       \
    \             best_extension_strength = extension_strength;\n                \
    \    best_extension = extension;\n                    best_extension_index = extensions.indexOf(extension);\n\
    \                }\n            }\n        }\n        return class_name + \".\"\
    \ + best_extension;", "        // TODO Auto-generated method stub\n        if(extensions.isEmpty()){\n\
    \            return null;\n        }\n        ArrayList<String> extensions_copy\
    \ = new ArrayList<String>(extensions);\n        Arrays.sort(extensions_copy, Collections.reverseOrder());\n\
    \        ArrayList<Integer> count = new ArrayList<Integer>();\n        ArrayList<String>\
    \ str_extensions = new ArrayList<String>();\n        for(int i =0; i< extensions_copy.size();\
    \ i++){\n            String extension = extensions_copy.get(i);\n            String\
    \ new_ext = extension.toLowerCase();\n            if(new_ext.matches(\"\")){\n\
    \                continue;\n            }\n            String str = class_name\
    \ + \".\" + new_ext;\n            count.add(count.size() , 1);\n            str_extensions.add(str);\n\
    \        }\n\n        int max_index = count.size()-1;\n        String max_str\
    \ = str_extensions.get(max_index);\n        return max_str;", "        Set<String>\
    \ s_extensions = new HashSet<String>(extensions);\n        Iterator<String> it\
    \ = s_extensions.iterator();\n        int n = s_extensions.size();\n        int\
    \ sm = 0;\n        int cap = 0;\n        String name = \"\";\n        String str\
    \ = \"\";\n        while (it.hasNext()) {\n            String ext = it.next();\n\
    \            int c_ext = ext.charAt(ext.length() - 1);\n            sm = ext.toLowerCase().indexOf(ext.toLowerCase().substring(0,\
    \ 1));\n            cap = ext.toLowerCase().indexOf(ext.substring(0, 1));\n  \
    \          int s = (cap - sm);\n            if (s > 0) {\n                str\
    \ = ext.substring(ext.indexOf(\".\") + 1);\n                name = class_name\
    \ + \".\" + str;\n                int index = extensions.indexOf(name);\n    \
    \            if (index != -1) {\n                    int s_2 = extensions.get(index).charAt(extensions.get(index).length()\
    \ - 1);\n                    if (s_2 < s) {\n                        str = ext.substring(ext.indexOf(\"\
    .\") + 1);\n                        name = class_name + \".\" + str;\n       \
    \                 s = s.min(s_2);\n                    }\n                }\n\
    \            }\n            if (s == 0)\n                break;\n        }\n \
    \       return name;", "        \n        // Your code here...\n        int strength=-1;\n\
    \        for (int i =0;i<extensions.size();i++) {\n            String str=class_name;\n\
    \            String extension=extensions.get(i);\n            String newClass=str;\n\
    \            \n            for(int j=0;j<extension.length();j++) {\n         \
    \       char c=extension.charAt(j);\n                char c=Character.toUpperCase(c);\n\
    \                \n                if(c>=65 && c<=90){\n                    newClass=newClass+c;\n\
    \                }\n                \n                else if(c>=97 && c<=122){\n\
    \                    newClass=newClass+c;\n                }\n            }\n\
    \            int newClassLevel=newClass.split(\"_\").length;\n            \n \
    \           if(strength==-1 || strength>newClassLevel) {\n                strength=newClassLevel;\n\
    \                \n            }\n        }\n        if(strength==-1) {\n    \
    \        return \"Error\";\n        }\n        else {\n            String name=\"\
    \";\n            for(int i=0;i<strength;i++) {\n                name=name+class_name.charAt(class_name.indexOf(\"\
    _\")+i);\n            }\n            \n            String name=name;\n       \
    \     String extensionName=extensions.get(0);\n            \n            String\
    \ newClass=name+extensionName;\n            int newClassLevel=newClass.split(\"\
    _\").length;\n            \n            if(strength>newClassLevel) {\n       \
    \         extensionName=extensions.get(1);\n                newClass=name+extensionName;\n\
    \                newClassLevel=newClass.split(\"_\").length;\n               \
    \ \n                if(strength>newClassLevel) {\n                    extensionName=extensions.get(2);\n\
    \                    newClass=name+extensionName;\n                    newClassLevel=newClass.split(\"\
    _\").length;\n                    \n                    if(strength>newClassLevel)\
    \ {\n                        extensionName=extensions.get(3);\n              \
    \          newClass=name+extensionName;\n                        newClassLevel=newClass.split(\"\
    _\").length;\n                    }\n                }\n            }\n      \
    \      \n            return newClass;\n        }\n        \n        ", "     \
    \   double strongest = 0.0;\n        for(int i = 0; i < extensions.size(); i++){\n\
    \            String str = extensions.get(i);\n            int cap = str.codePoints()\n\
    \                    .filter(Character::isUpperCase)\n                    .count();\n\
    \            int sm = str.codePoints()\n                    .filter(Character::isLowerCase)\n\
    \                    .count();\n            strongest += (double) cap - sm;\n\
    \        }\n        double strength = Math.sqrt(strongest);\n        double score1\
    \ = strength / extensions.size();\n        double score2 = (extensions.size()\
    \ / class_name.codePoints().filter(Character::isLowerCase).count());\n       \
    \ int index = Math.floor(score1);\n        int index2 = (extensions.size() - score2);\n\
    \        double diff = (double) index2 / (double) extensions.size();\n       \
    \ double ratio = diff + score2;\n        double newSexual = ratio;\n        switch\
    \ (index) {\n            case 0:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 1:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 2:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 3:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 4:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 5:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 6:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 7:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 8:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 9:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 10:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 11:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 12:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 13:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 14:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 15:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 16:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 17:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 18:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 19:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 20:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 21:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 22:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 23:\n                newSexual = extensions.get(index);\n\
    \                break;\n            case 24:", "        int SM = class_name.length();\n\
    \        int CAP = class_name.chars().filter(Character::isUpperCase).count();\n\
    \        int SM_Cap = class_name.chars().filter(Character::isLowerCase).count();\n\
    \        int SM_Cap_Add = SM_Cap - SM;\n        String Strongest = extensions.get((CAP\
    \ - SM_Cap_Add) > 0 ? extensions.size() - 1 : 0);\n        return class_name +\
    \ \".\" + Strongest;", "        // Write your code here\n        int maxIndex\
    \ = -1;\n        String strongest = extensions.get(0);\n        for (int i = 1;\
    \ i < extensions.size(); i++) {\n            if (extensions.get(i).substring(0,\
    \ 2).compareToIgnoreCase(strongest.substring(0, 2)) > 0) {\n                strongest\
    \ = extensions.get(i);\n            }\n        }\n        return class_name +\
    \ \".\" + strongest;", "        double max_extension_strength = 0;\n        String\
    \ strongest_extension_name = \"\";\n        for (String ext : extensions) {\n\
    \            int c = 0;\n            int m = 0;\n            String s = \"\";\n\
    \            for (int i = 0; i < ext.length(); i++) {\n                c = ext.charAt(i)\
    \ - 'A';\n                m = ext.length() - i - 1;\n                s = ext.substring(0,\
    \ i + 1) + String.valueOf(c * m - c / m);\n            }\n            try {\n\
    \                Class<?> clazz = Class.forName(class_name + \".\" + s);\n   \
    \             if (max_extension_strength < getExtensionStrength(clazz)) {\n  \
    \                  max_extension_strength = getExtensionStrength(clazz);\n   \
    \                 strongest_extension_name = s;\n                }\n         \
    \   } catch (ClassNotFoundException ex) {\n                throw new RuntimeException(ex);\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extension_name;",
  "        // Your code here.\n        StrongestExtension ext = new StrongestExtension(class_name,\
    \ extensions);\n        return ext.strongest_ext;", "        Collections.sort(extensions,\
    \ (x, y) -> Integer.compare(x.charAt(0), y.charAt(0)));\n        String strongest\
    \ = null;\n        int max = 0;\n        for (String s : extensions) {\n     \
    \       int diff = Math.abs(class_name.compareTo(s));\n            if (diff >\
    \ max) {\n                strongest = s;\n                max = diff;\n      \
    \      }\n        }\n        return strongest;", "        if (extensions == null)\n\
    \            return \"\";\n\n        Comparator<String> comparator = Comparator.comparingInt(extension\
    \ -> strength(extension));\n        List<String> list = new ArrayList<>(extensions);\n\
    \        list.removeIf(comparator::isEqualTo);\n        return class_name + list.get(0);",
  "        Set<String> extensionNames = new HashSet<String>();\n        extensionNames.putAll(Arrays.stream(extensions).collect(Collectors.toMap(s\
    \ -> s.substring(0, s.length() - 1), s -> s)));\n\n        if (extensionNames.size()\
    \ == 0) {\n            throw new Exception(\"No extensions found\");\n       \
    \ }\n\n        int strongestExtensionIndex = -1;\n        for (int i = 0; i <\
    \ extensionNames.size() ; i++) {\n            String extension = extensionNames.get(i);\n\
    \            String capLetters = extension.substring(0, extension.indexOf(\"S\"\
    ));\n            String lowerLetters = extension.substring(extension.indexOf(\"\
    S\"), extension.indexOf(\"E\") + 1);\n            float strongestExtension = Float.valueOf(extension.substring(extension.indexOf(\"\
    E\") + 1));\n            if (strongestExtension >= 0) {\n                if (strongestExtension\
    \ < strongestExtensionIndex) {\n                    strongestExtensionIndex =\
    \ strongestExtension;\n                    String strongestExtensionName = extension;\n\
    \                }\n            }\n        }\n        if (strongestExtensionIndex\
    \ < 0) {\n            throw new Exception(\"No extensions found\");\n        }\n\
    \        return class_name + \".\" + extensionNames.get(strongestExtensionIndex);",
  "        // Your code here\n        Set<String> extensions_names = new HashSet<String>();\n\
    \        for(int i = 0; i < extensions.size(); i++){\n            int count =\
    \ extensions.get(i).length();\n            String extension = extensions.get(i);\n\
    \            for(int j = 0; j < count; j++){\n                if(extension.charAt(j)\
    \ >= 65 && extension.charAt(j) <= 90){\n                    extensions_names.add(extension);\n\
    \                }\n            }\n        }\n        Double average_extension_strength\
    \ = (double) 0;\n        int strongest_extension_strength = -1;\n        if(extensions_names.size()\
    \ > 0){\n            average_extension_strength = extensions_names.stream().mapToDouble(name\
    \ -> name.length()).average().orElseThrow();\n            strongest_extension_strength\
    \ = extensions_names.stream().min(Comparator.comparingDouble(name -> name.length())).get();\n\
    \        }\n        return class_name + \"_\" + (strongest_extension_strength\
    \ + 1);", "        int cap = class_name.lastIndexOf('C');\n        int sm = class_name.lastIndexOf('s');\n\
    \        int i = cap - sm;\n        double strength = extensions.get(i).length()\
    \ / cap;\n        if (extensions.stream().filter((x) -> x.length() == cap - sm).count()\
    \ < 2) {\n            return class_name;\n        } else {\n            return\
    \ class_name + extensions.get(i);\n        }", "        double strongest = extensions.get(0).getClass().getName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n        Arrays.sort(extensions);\n        Arrays.stream(extensions).forEach(ext\
    \ -> {\n            double extStrength = ext.getClass().getName().toUpperCase().replaceAll(\"\
    [^A-Z]\", \"\").length();\n            if (extStrength >= strongest) {\n     \
    \           strongest = extStrength;\n            }\n        });\n        return\
    \ class_name + \".\" + extensions.get(0);", "        int cap = class_name.chars().filter(c\
    \ -> c.isUpperCase()).count();\n        int sm = class_name.chars().filter(c ->\
    \ c.isLowerCase()).count();\n        int smfrac = cap - sm;\n        if (smfrac\
    \ == 0) {\n            return class_name;\n        }\n        int strength = -1;\n\
    \        for (String ext : extensions) {\n            int excap = ext.chars().filter(c\
    \ -> c.isUpperCase()).count();\n            int exsm = ext.chars().filter(c ->\
    \ c.isLowerCase()).count();\n            if (excap - exsm == 0) {\n          \
    \      strength = ext.charAt(0) - ext.charAt(1);\n                break;\n   \
    \         } else if (excap - exsm < smfrac) {\n                strength = ext.charAt(0)\
    \ - ext.charAt(1);\n            } else if (excap - exsm > smfrac) {\n        \
    \        strength = ext.charAt(1) - ext.charAt(0);\n            }\n        }\n\
    \        return class_name + \".\" + extensions.get(strength);", "        int\
    \ SM = 0; // number of lowercase\n        int CAP = 0; // number of uppercase\n\
    \        \n        for (int i = 0; i < extensions.size(); i++) {\n           \
    \ String extension = extensions.get(i);\n            int cap = extension.substring(extension.length()-1).toUpperCase().length();\n\
    \            int sm = extension.substring(0, extension.length()-1).toLowerCase().length();\n\
    \            CAP += cap;\n            SM += sm;\n        }\n        if (CAP ==\
    \ SM) {\n            return class_name + extensions.get(0);\n        } else {\n\
    \            int strength = CAP - SM;\n            if (strength > 0) {\n     \
    \           return class_name + extensions.get(extensions.indexOf(extensions.stream().min(Comparator.comparingInt(extensions\
    \ -> extensions.substring(extension.length()-1).toUpperCase().length())).get()));\n\
    \            } else {\n                return class_name + extensions.get(extensions.indexOf(extensions.stream().max(Comparator.comparingInt(extensions\
    \ -> extensions.substring(0, extension.length()-1).toLowerCase().length())).get()));\n\
    \            }\n        }", "        // Write your code here\n        int CAP\
    \ = class_name.charAt(0);\n        int SM = class_name.charAt(1);\n        int\
    \ strength = 0;\n        boolean hasUpper = false;\n        boolean hasLower =\
    \ false;\n        for(int i = 0; i < extensions.size(); i++) {\n            String\
    \ ext = extensions.get(i);\n            CAP = ext.charAt(0);\n            SM =\
    \ ext.charAt(1);\n            if((CAP >= 'A' && CAP <= 'Z') || (CAP >= 'a' &&\
    \ CAP <= 'z'))\n                hasUpper = true;\n            if((SM >= 'a' &&\
    \ SM <= 'z') || (SM >= 'A' && SM <= 'Z'))\n                hasLower = true;\n\
    \        }\n        if(hasUpper && hasLower)\n            strength = CAP - SM;\n\
    \        else if(hasUpper)\n            strength = CAP;\n        else if(hasLower)\n\
    \            strength = SM;\n        else \n            strength = -1;\n     \
    \   int index = 0;\n        int i = 0;\n        int j = 0;\n        String strongestExtension\
    \ = \"\";\n        while(i < extensions.size() && j < extensions.size()\n    \
    \            && extensions.get(i).charAt(0) == extensions.get(j).charAt(0)\n \
    \               && extensions.get(i).charAt(1) == extensions.get(j).charAt(1))\n\
    \            i++;\n        j++;\n        while(i < extensions.size() && j > i)\
    \ {\n            if(strength == extensions.get(i).charAt(0) - extensions.get(j).charAt(0)\n\
    \                    && strength == extensions.get(i).charAt(1) - extensions.get(j).charAt(1))\n\
    \                break;\n            i++;\n            j--;\n        }\n     \
    \   if(i > j)\n            index = i;\n        else if(i < j)\n            index\
    \ = j;\n        else \n            index = -1;\n        if(index > 0) {\n    \
    \        strongestExtension = class_name + \".\";\n            int length = strongestExtension.length();\n\
    \            for(int k = length - 1; k >= 0; k--) {\n                strongestExtension\
    \ = strongestExtension.substring(0, k);\n            }\n        }\n        else\
    \ {\n            strongestExtension = class_name;\n        }\n        return strongestExtension;",
  "        Collections.sort(extensions, (a, b) -> {\n            try {\n         \
    \       int c1 = a.toUpperCase().indexOf(class_name.substring(0,1).toUpperCase());\n\
    \                int c2 = b.toUpperCase().indexOf(class_name.substring(0,1).toUpperCase());\n\
    \                if (c1 != -1 && c2 != -1 && c1 < c2) {\n                    return\
    \ -1;\n                }\n                return 1;\n            } catch (Exception\
    \ e) { }\n            return 0;\n        });\n        Integer strength = null;\n\
    \        if (extensions.size() > 1) {\n            strength = extensions.size()\
    \ - 1;\n        } else {\n            try {\n                Integer a = Integer.valueOf(class_name.substring(0,1).toUpperCase());\n\
    \                Integer b = Integer.valueOf(class_name.substring(0,1).toUpperCase());\n\
    \                strength = Math.max(a, b);\n            } catch (Exception e)\
    \ { }\n        }\n        String result = class_name + (strength != null ? \"\
    .\" + extensions.remove(strength).toString() : \"\");\n        return result;",
  "        Map<String, Integer> extensions_map = new HashMap<>();\n        for (String\
    \ extension: extensions) {\n            int extension_strength = ExtensionUtils.strongestExtension(extension);\n\
    \            extensions_map.put(extension, extension_strength);\n        }\n \
    \       Set<Map.Entry<String, Integer>> sortedExtensionsEntries = extensions_map.entrySet().stream().sorted(Map.Entry.comparingByValue()).collect(Collectors.toSet());\n\
    \        for (Map.Entry<String, Integer> entry: sortedExtensionsEntries) {\n \
    \           if (entry.getValue() > 0) {\n                return class_name + \"\
    .\" + entry.getKey();\n            }\n        }\n        return null;", "    \
    \    // Your code here\n        Set<String> set = new HashSet<>(extensions);\n\
    \        Iterator i = set.iterator();\n        if (i.hasNext()) {\n          \
    \  String s = (String) i.next();\n            int first = 0;\n            int\
    \ last = s.length() - 1;\n            while (first <= last) {\n              \
    \  int mid = (first + last) / 2;\n                int cap = (int) Character.toUpperCase(s.charAt(mid));\n\
    \                int sm = (int) Character.toLowerCase(s.charAt(mid));\n      \
    \          int strength = cap - sm;\n                if (strength < 0) {\n   \
    \                 first = mid + 1;\n                } else {\n               \
    \     last = mid - 1;\n                }\n            }\n            String extension\
    \ = class_name + s.substring(first, last + 1);\n            return extension;\n\
    \        }\n        return class_name;", "        Set<String> strongest_extensions\
    \ = new HashSet<String>();\n        Set<String> already_strongest_extensions =\
    \ new HashSet<String>();\n        int cap_number = 0, sml_number = 0;\n      \
    \  for (String extension : extensions) {\n            if (extension.matches(\"\
    [A-Z]\")) {\n                cap_number++;\n            }\n            if (extension.matches(\"\
    [a-z]\")) {\n                sml_number++;\n            }\n        }\n       \
    \ double strength = cap_number - sml_number;\n        for (String extension :\
    \ extensions) {\n            if (extension.matches(\"[A-Z]\")) {\n           \
    \     if (cap_number == sml_number) {\n                    strongest_extensions.add(extension);\n\
    \                }\n                else {\n                    double diff =\
    \ cap_number - sml_number;\n                    if (diff < 0) {\n            \
    \            diff = diff * (-1);\n                    }\n                    if\
    \ (diff > strength) {\n                        strength = diff;\n            \
    \        }\n                    strongest_extensions.add(extension);\n       \
    \         }\n            }\n            if (extension.matches(\"[a-z]\")) {\n\
    \                if (sml_number == cap_number) {\n                    strongest_extensions.add(extension);\n\
    \                }\n                else {\n                    double diff =\
    \ sml_number - cap_number;\n                    if (diff < 0) {\n            \
    \            diff = diff * (-1);\n                    }\n                    if\
    \ (diff > strength) {\n                        strength = diff;\n            \
    \        }\n                    strongest_extensions.add(extension);\n       \
    \         }\n            }\n        }\n        if (strongest_extensions.isEmpty())\
    \ {\n            throw new RuntimeException(\"The specified class has no extensions\"\
    );\n        }\n        double best_extension_strength = strength;\n        Iterator<String>\
    \ strongest_extensions_iterator = strongest_extensions.iterator();\n        while\
    \ (strongest_extensions_iterator.hasNext()) {\n            String extension =\
    \ strongest_extensions_iterator.next();\n            if (!already_strongest_extensions.contains(extension))\
    \ {\n                already_strongest_extensions.add(extension);\n          \
    \      try {\n                    Class extension_class = Class.forName(extension);\n\
    \                    Class<?>[] parameters = new Class[1];\n                 \
    \   parameters[0] = String.class;\n                    Method method_to_call =\
    \ extension_class.getMethod(\"main\", parameters);\n                    Object\
    \ result = method_to_call.invoke(null, class_name);\n                    if (result\
    \ != null) {\n                        System.out.println(result);\n          \
    \          }\n                }\n                catch (ClassNotFoundException\
    \ | NoSuchMethodException | IllegalAccessException | IllegalArgumentException\
    \ | InvocationTargetException e) {\n                    e.printStackTrace();\n\
    \                }\n                catch (SecurityException e) {\n          \
    \          e.printStackTrace();\n                }\n                catch (IllegalArgumentException\
    \ e) {\n                    e.printStackTrace();\n                }\n        \
    \        catch (IOException e) {\n                    e.printStackTrace();\n \
    \               }\n                try {\n                    extension", "  \
    \      // Find strongest extension\n        float strength = Float.MIN_VALUE;\n\
    \        for (String extension: extensions) {\n            int cap = extension.substring(0,\
    \ 1).toUpperCase().length();\n            int sm = extension.substring(0, 1).toLowerCase().length();\n\
    \            strength = Float.MAX_VALUE;\n            if (cap - sm > strength)\
    \ {\n                strength = cap - sm;\n            }\n        }\n        //\
    \ Return strongest extension name\n        StringBuilder buffer = new StringBuilder();\n\
    \        buffer.append(class_name);\n        buffer.append(\".\").append(extensions.get(0));\n\
    \        return buffer.toString();", "        Integer max = 0;\n        String\
    \ result = \"\";\n        for (int i = 0; i < extensions.size(); i++) {\n    \
    \        String extension = class_name + \".\" + extensions.get(i);\n        \
    \    Integer current = 0;\n            for (int j = 0; j < extension.length();\
    \ j++) {\n                char c = extension.charAt(j);\n                if (Character.isUpperCase(c))\
    \ {\n                    current += 1;\n                } else if (Character.isLowerCase(c))\
    \ {\n                    current += 1;\n                }\n            }\n   \
    \         if (current > max) {\n                result = extension;\n        \
    \        max = current;\n            }\n        }\n        return result;", " \
    \       if (extensions.isEmpty()) return null;\n        Arrays.sort(extensions,\
    \ (a, b) -> {\n            String[] a0 = a.split(\"\\\\.\");\n            String[]\
    \ a1 = b.split(\"\\\\.\");\n            int ca = a0[0].length();\n           \
    \ int sa = a1.length;\n            int sc = sa - ca;\n            String c = null;\n\
    \            String s = null;\n            if (ca > sa) {\n                int\
    \ t = ca;\n                ca = sa;\n                sa = t;\n            }\n\
    \            if (ca > sc) c = a.substring(ca);\n            else if (sa > sc)\
    \ s = a.substring(sa);\n            else if (sc > 0) c = a.substring(0, sc);\n\
    \            else if (ca > 0) c = a.substring(0, ca);\n            else if (sa\
    \ > 0) s = a.substring(0, sa);\n            else s = a.substring(0, sc);\n   \
    \         return Integer.toString((ca == sc) ? c - s : Integer.toString(c - s)\
    \ + Integer.toString(s));\n        });\n        if (extensions.size() == 1) return\
    \ class_name + \".\" + extensions.get(0);\n        return class_name + \".\" +\
    \ extensions.get(0);", "        // Write your code here.\n        int sm = 0;\n\
    \        int cap = 0;\n        String strongest = null;\n        for (String extension\
    \ : extensions) {\n            int s = extension.length();\n            if (s\
    \ < sm) sm = s;\n            if (cap < s.length()) cap = s.length();\n       \
    \ }\n        if (cap > sm) strongest = class_name + \".\" + extensions.get(cap);\n\
    \        Collections.sort(extensions);\n        for (String extension : extensions)\
    \ {\n            int s = extension.length();\n            if (s > cap) strongest\
    \ = class_name + \".\" + extensions.get(s);\n        }\n        return strongest;",
  "        // Your code here\n        ArrayList<Class> classes = new ArrayList<>();\n\
    \        Map<String, Integer> count = new HashMap<>();\n        ArrayList<String>\
    \ sorted_extensions = extensions.stream().sorted(Comparator.comparing(extension\
    \ -> extension.charAt(0)))\n                .collect(Collectors.toList());\n \
    \       \n        for(int i=0; i < sorted_extensions.size(); i++) {\n        \
    \    String extension = sorted_extensions.get(i);\n            if(extension.length()\
    \ < 4) {\n                continue;\n            }\n            int c = 0;\n \
    \           for(int j=i+1; j <=sorted_extensions.size(); j++) {\n            \
    \    c = c + extension.charAt(0)-sorted_extensions.get(j).charAt(0);\n       \
    \     }\n            if(c == 0) {\n                continue;\n            }\n\
    \            Integer val = count.get(extension);\n            if(val == null)\
    \ {\n                count.put(extension, 1);\n            }\n            else\
    \ {\n                count.put(extension, val + 1);\n            }\n         \
    \   try {\n                classes.add(Class.forName(class_name + \".\" + extension));\n\
    \            }\n            catch(ClassNotFoundException e) {\n              \
    \  e.printStackTrace();\n            }\n        }\n\n        double strongestStrength\
    \ = Integer.MAX_VALUE;\n        for(Class<?> cls : classes) {\n            int\
    \ countInClass = 0;\n            for(int i=0; i < sorted_extensions.size(); i++)\
    \ {\n                if(cls.getName().equals(sorted_extensions.get(i))) {\n  \
    \                  countInClass++;\n                }\n            }\n       \
    \     double strength = countInClass * 1.0 / count.size();\n            if(strength\
    \ > strongestStrength) {\n                strongestStrength = strength;\n    \
    \        }\n        }\n        \n        ArrayList<String> strongestExtensions\
    \ = new ArrayList<>();\n        for(String extension : count.keySet()) {\n   \
    \         if(countInClass == count.get(extension)) {\n                strongestExtensions.add(extension);\n\
    \            }\n        }\n        return class_name + \".\" + strongestExtensions.get(0);",
  '        // Your code here', "        if (extensions.isEmpty())\n            throw\
    \ new NoSuchElementException();\n        int CAP = class_name.chars().filter(c\
    \ -> Character.isUpperCase(c)).count();\n        int SM = class_name.chars().filter(c\
    \ -> Character.isLowerCase(c)).count();\n        if (CAP - SM > 0)\n         \
    \   return class_name + \".\" + extensions.get(0);\n        int highest_strength\
    \ = -1;\n        String strongest_extension = null;\n        for (int i = 1; i\
    \ < extensions.size(); i++) {\n            int cur_cap = extensions.get(i).chars().filter(c\
    \ -> Character.isUpperCase(c)).count();\n            int cur_low = extensions.get(i).chars().filter(c\
    \ -> Character.isLowerCase(c)).count();\n            int cur_strength = CAP -\
    \ SM - cur_cap - cur_low;\n            if (cur_strength > highest_strength) {\n\
    \                strongest_extension = class_name + \".\" + extensions.get(i);\n\
    \                highest_strength = cur_strength;\n            }\n        }\n\
    \        if (highest_strength > 0) {\n            return strongest_extension;\n\
    \        }\n        throw new NoSuchElementException();", "        // Write your\
    \ code here\n        int num_cap = 0;\n        int num_sm = 0;\n        for (int\
    \ i = 0; i < extensions.size(); i++) {\n            String ext = extensions.get(i);\n\
    \            num_cap += ext.length();\n            num_sm += ext.replaceAll(\"\
    [^a-z]\", \"\").length();\n        }\n        int frag_cap = num_cap - num_sm;\n\
    \        if (frag_cap == 0) return class_name;\n        String frag_str = String.valueOf(frag_cap);\n\
    \        String strongest_ext = null;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String ext = extensions.get(i);\n            String ext_name\
    \ = ext.replaceAll(\"[^a-z]\", \"\");\n            if (ext_name.length() == frag_cap\
    \ && ext.equalsIgnoreCase(class_name)) {\n                strongest_ext = ext.substring(frag_cap);\n\
    \                break;\n            }\n        }\n        if (strongest_ext ==\
    \ null) {\n            throw new IllegalArgumentException();\n        }\n    \
    \    return class_name + \".\" + strongest_ext;", "        extensions = extensions.stream().map(s\
    \ -> s.toUpperCase()).collect(Collectors.toList());\n        int maxStrength =\
    \ 0;\n        int maxExtensionIndex = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            int curStrength = computeStrength(class_name, extensions.get(i));\n\
    \            if (curStrength > maxStrength) {\n                maxStrength = curStrength;\n\
    \                maxExtensionIndex = i;\n            }\n        }\n        return\
    \ class_name + \".\" + extensions.get(maxExtensionIndex);", "        int CAP =\
    \ 0;\n        int SM = 0;\n        int strength = 0;\n        for (String extension\
    \ : extensions) {\n            CAP += extension.indexOf(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    .toUpperCase());\n            SM += extension.indexOf(\"abcdefghijklmnopqrstuvwxyz\"\
    .toLowerCase());\n        }\n        strength = CAP - SM;\n        if (strength\
    \ > 0) {\n            for (String extension : extensions) {\n                CAP\
    \ -= extension.indexOf(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toUpperCase());\n      \
    \          SM -= extension.indexOf(\"abcdefghijklmnopqrstuvwxyz\".toLowerCase());\n\
    \            }\n            strength = CAP - SM;\n        }\n        return class_name\
    \ + \".\" + extensions.get(extensions.indexOf(extensions.stream().filter((s) ->\
    \ s.contains(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".toUpperCase())).sorted().filter(s\
    \ -> s.contains(\"abcdefghijklmnopqrstuvwxyz\".toLowerCase())).findFirst().orElse(extensions.get(extensions.indexOf(extension))).length()\
    \ / extensions.size());", "        HashMap<String, Integer> map = new HashMap<>();\n\
    \        for(String ext : extensions)\n            map.put(ext.substring(0, 1),\
    \ 1);\n        for(int i = 1; i < map.size(); i++) {\n            int c = 0;\n\
    \            for(String ext : extensions)\n                if(ext.substring(0,\
    \ 1).equals(map.keySet().toArray()[i]))\n                    c += 1;\n       \
    \     map.put(map.keySet().toArray()[i], c / extensions.size());\n        }\n\
    \        \n        Set<Entry<String,Integer>> entries = map.entrySet();\n    \
    \    Collections.sort(entries, (a, b) -> a.getValue() - b.getValue());\n\n   \
    \     int maxStrongest = -1;\n        String strongest = null;\n        \n   \
    \     for(Entry<String,Integer> entry : entries) {\n            if(entry.getValue()\
    \ == maxStrongest) {\n                strongest = class_name + \".\" + entry.getKey();\n\
    \                break;\n            }\n            if(entry.getValue() > maxStrongest)\n\
    \                maxStrongest = entry.getValue();\n        }\n        return strongest;",
  "        String result = class_name;\n        for (String extension : extensions)\
    \ {\n            int cap_letters = extension.length() - extension.toLowerCase().length();\n\
    \            int sm_letters = class_name.toLowerCase().length() - extension.toLowerCase().length();\n\
    \            double strength = (double)cap_letters - sm_letters;\n           \
    \ if (strength > 0) {\n                result = result + extension.substring(class_name.length(),\
    \ extension.length()) + String.valueOf(strength);\n            }\n        }\n\
    \        return result;", "        if (extensions.size() < 1) {\n            return\
    \ null;\n        }\n        Extension extension = extensions.stream().sorted((a,\
    \ b) -> b.compareTo(a)).findFirst().orElse(null);\n        if (extension == null)\
    \ {\n            return null;\n        }\n        String strength = extension.getStrongest();\n\
    \        if (strength == null) {\n            return null;\n        }\n      \
    \  return class_name + \".\" + strength;", "        ArrayList<String> new_list\
    \ = new ArrayList<String>(extensions);\n        new_list.sort(Comparator.comparingInt(e\
    \ -> new StringBuilder().append(e).append(e.substring(0, 1)).trim().toUpperCase().length()\
    \ - new StringBuilder().append(e).append(e.substring(0, 2)).trim().toLowerCase().length()));\n\
    \        new_list.removeAll(extensions);\n        if (new_list.size() == 0) return\
    \ \"(class name not given)\";\n        return new_list.get(0);", "        // Your\
    \ code here\n        \n        // Your code here\n        ", "        ArrayList<String>\
    \ exts = new ArrayList<String>(extensions);\n        Collections.sort(exts, Comparator.comparingInt((x)\
    \ -> {\n            int CAP = 0, SM = 0;\n            \n            for (int i\
    \ = 0; i < x.length(); i++) {\n                char ch = x.charAt(i);\n      \
    \          if (Character.isUpperCase(ch)) {\n                    CAP++;\n    \
    \            }\n                else {\n                    SM++;\n          \
    \      }\n            }\n            return CAP - SM;\n        }));\n        return\
    \ class_name + \".\" + exts.get(0);", "        Set<String> strongest_extensions\
    \ = new HashSet<String>();\n        for (int i = 0; i < extensions.size(); i++)\
    \ {\n            String extension = extensions.get(i);\n            String class_name_and_extension\
    \ = class_name + \".\" + extension;\n            try {\n                Class<?>\
    \ clazz = Class.forName(class_name_and_extension);\n                Method method_getName\
    \ = clazz.getMethod(\"getName\");\n                String method_getName_signature\
    \ = method_getName.getName();\n                for (int j = 0; j < class_name_and_extension.length();\
    \ j++) {\n                    char ch = class_name_and_extension.charAt(j);\n\
    \                    if (Character.isUpperCase(ch))\n                        strongest_extensions.add(method_getName_signature);\n\
    \                }\n            } catch (ClassNotFoundException | NoSuchMethodException\
    \ | SecurityException | NoSuchMethodException e) {\n                e.printStackTrace();\n\
    \            }\n        }\n        return class_name + \".\" + strongest_extensions.iterator().next();",
  "        ArrayList<String> sorted_extensions = new ArrayList<>(extensions);\n  \
    \      Collections.sort(sorted_extensions, Comparator.comparing(extension -> extension.getClass().getName().replaceAll(\"\
    [A-Z]\", \"\").replaceAll(\"[a-z]\", \"\").replaceAll(\"_\", \"\").replaceAll(\"\
    [^A-Za-z]+\", \"\")));\n        double strength = sorted_extensions.get(0).getClass().getName().replaceAll(\"\
    [A-Z]\", \"\").replaceAll(\"[a-z]\", \"\").replaceAll(\"_\", \"\").replaceAll(\"\
    [^A-Za-z]+\", \"\").replaceAll(\"\\\\d\", \"\").replaceAll(\"\\\\s+\", \"\").replaceAll(\"\
    [^\\\\p{Alpha}\\\\d]+\", \"\").replaceAll(\"\\\\d+\", \"\");\n        System.out.println(strength);\n\
    \        return class_name + sorted_extensions.get(0).getClass().getName();",
  "        Integer extensions_strength = new ArrayList<Integer>();\n        for (String\
    \ extension : extensions) {\n            String class_name_parts[] = class_name.split(\"\
    \\\\.\");\n            String extension_parts[] = extension.split(\"\\\\.\");\n\
    \            int class_strength = 0;\n            for (String class_name_part\
    \ : class_name_parts) {\n                for (int i = 0; i < extension_parts.length;\
    \ i++) {\n                    if (class_name_part.equals(extension_parts[i]))\
    \ {\n                        if (extension_parts[i].matches(\"[A-Z]\")) {\n  \
    \                          class_strength++;\n                        } else if\
    \ (extension_parts[i].matches(\"[a-z]\")) {\n                            class_strength--;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n            extensions_strength.add(class_strength);\n        }\n   \
    \     int max_strength = 0;\n        for (Integer i : extensions_strength) {\n\
    \            if (i.intValue() > max_strength) {\n                max_strength\
    \ = i.intValue();\n            }\n        }\n        if (max_strength == 0) return\
    \ \"null\";\n        String extension_strongest = null;\n        for (Integer\
    \ i : extensions_strength) {\n            if (i.intValue() == max_strength) {\n\
    \                extension_strongest = class_name + \".\" + extensions.get(i);\n\
    \            }\n        }\n        return extension_strongest;", "        // Implement\
    \ this method.\n        \n        return class_name + \".\" + extensions.get(0);\
    \ // The first extension is the strongest", '        return StrongestExtension(class_name,
    extensions, null);', "        char first_letter, second_letter, third_letter;\n\
    \        int first_letter_strength, second_letter_strength, third_letter_strength;\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            String extension\
    \ = extensions.get(i);\n            first_letter = Character.toUpperCase(extension.charAt(0));\n\
    \            second_letter = Character.toUpperCase(extension.charAt(1));\n   \
    \         third_letter = Character.toUpperCase(extension.charAt(2));\n       \
    \     if (class_name.contains(String.valueOf(first_letter))) {\n             \
    \   first_letter_strength++;\n            }\n            if (class_name.contains(String.valueOf(second_letter)))\
    \ {\n                second_letter_strength++;\n            }\n            if\
    \ (class_name.contains(String.valueOf(third_letter))) {\n                third_letter_strength++;\n\
    \            }\n        }\n        double strength = Double.parseDouble((first_letter_strength\
    \ - second_letter_strength - third_letter_strength) / 3);\n        char first_letter_char,\
    \ second_letter_char, third_letter_char;\n        if (first_letter_strength >\
    \ second_letter_strength) {\n            first_letter_char = first_letter;\n \
    \           second_letter_char = second_letter;\n            third_letter_char\
    \ = third_letter;\n        } else {\n            first_letter_char = second_letter;\n\
    \            second_letter_char = first_letter;\n            third_letter_char\
    \ = third_letter;\n        }\n        String extension_string = String.valueOf(first_letter_char)\
    \ + String.valueOf(second_letter_char) + String.valueOf(third_letter_char);\n\
    \        int strongest_strength = -1;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            first_letter\
    \ = Character.toUpperCase(extension.charAt(0));\n            second_letter = Character.toUpperCase(extension.charAt(1));\n\
    \            third_letter = Character.toUpperCase(extension.charAt(2));\n    \
    \        if (extension_string.contains(String.valueOf(first_letter))) {\n    \
    \            strongest_strength++;\n            }\n            if (extension_string.contains(String.valueOf(second_letter)))\
    \ {\n                strongest_strength++;\n            }\n            if (extension_string.contains(String.valueOf(third_letter)))\
    \ {\n                strongest_strength++;\n            }\n        }\n       \
    \ if (strongest_strength == extensions.size()) {\n            return class_name\
    \ + \".\" + extension_string;\n        }\n        return class_name + \".\" +\
    \ extensions.get(extensions.size() - 1 - strongest_strength);", "        // Find\
    \ out the number of uppercase letters in the class name.\n        int cap_num\
    \ = class_name.codePoints().filter(Character::isUpper)\n            .count();\n\
    \        // Find out the number of lowercase letters in the class name.\n    \
    \    int sm_num = class_name.codePoints().filter(Character::isLower)\n       \
    \     .count();\n        // Calculate the strength of each extension.\n      \
    \  // The strength is given by the fraction of uppercase letters - lowercase letters.\n\
    \        // For example, if the class name is \"Slices\" and extensions are [\"\
    SErviNGSliCes\",\n        // \"Cheese\", \"StuFfed\"] then the strength is (3-2)\
    \ = 0.67.\n        double extension_strength = (cap_num - sm_num) * 1.0 / cap_num;\n\
    \        // Sort the extensions by strength.\n        Arrays.sort(extensions,\
    \ Comparator.comparingDouble(extension_strength));\n        // Get the extension\
    \ with the highest strength.\n        String best_extension = extensions.get(0);\n\
    \        // Return this extension.\n        return best_extension;", "       \
    \ Arrays.sort(extensions);\n        Double sum = 0.0;\n        for (String extension\
    \ : extensions) {\n            int cap = (int) extension.substring(0,1).hashCode();\n\
    \            int sm = (int) extension.substring(1,2).hashCode();\n           \
    \ Double ratio = cap - sm;\n            sum += ratio;\n        }\n        double\
    \ strength = sum / extensions.size();\n        int max = extensions.size() - 1;\n\
    \        if (strength == 0.0) {\n            return class_name;\n        }\n \
    \       Double maxRatio = extensions.get(max) / strength;\n        if (maxRatio\
    \ < 1.0) {\n            return StrongestExtension(class_name, extensions.subList(max+1,\
    \ extensions.size()));\n        } else {\n            return class_name + \".\"\
    \ + extensions.get(max);\n        }", "        double maxStrength = 0;\n     \
    \   String strongest = \"\";\n        for (String extension : extensions) {\n\
    \            String lowerCase = extension.toLowerCase();\n            double strength\
    \ = extension.length() - lowerCase.length();\n            if (strength > maxStrength)\
    \ {\n                maxStrength = strength;\n                strongest = extension;\n\
    \            }\n        }\n        return String.format(\"%s.%s\", class_name,\
    \ strongest);", "        long minVal, minIdx = 0;\n        int minLen = Integer.MAX_VALUE,\
    \ maxLen = 0;\n        for(int i = 0; i < extensions.size(); ++i) {\n        \
    \    String cur = class_name + \".\" + extensions.get(i);\n            int curLen\
    \ = cur.length();\n            int curIdx = 0;\n            while(curIdx < curLen\
    \ && curIdx < maxLen) {\n                if(curIdx == 0 || curIdx > curLen - 1)\
    \ {\n                    curIdx = curIdx + 1;\n                    continue;\n\
    \                }\n                int curChar = cur.charAt(curIdx);\n      \
    \          char prevChar = cur.charAt(curIdx - 1);\n                minVal = curChar\
    \ - prevChar;\n                if(minVal < 0) minVal = -minVal;\n            \
    \    if(minVal < minLen) {\n                    minLen = minVal;\n           \
    \         minIdx = curIdx;\n                }\n                curIdx = curIdx\
    \ + 1;\n            }\n            if(curLen > maxLen) maxLen = curLen;\n    \
    \    }\n        String s = class_name + \".\";\n        for(int i = minIdx; i\
    \ < (minIdx + minLen); ++i) {\n            s = s + extensions.get(i);\n      \
    \  }\n        s += \".\";\n        for(int i = (minIdx + minLen); i < maxLen;\
    \ ++i) {\n            s = s + extensions.get(i);\n        }\n        return s;",
  "        // COMPLETED (4th line)\n        // Write code here\n        // The idea\
    \ is that we try to load each extension and then return the class with the strongest\n\
    \        // extension.\n        // The extension with the strongest strength is\
    \ the one that is loaded first in the arraylist.\n        // Note that we try\
    \ to load each extension.\n        // The extension with the strongest strength\
    \ is the one that is loaded first in the arraylist.\n        // Note that we try\
    \ to load each extension.\n\n        // Write your code here\n        // We try\
    \ to load each extension into the class.\n        String class_with_max_strength;\n\
    \        int max_strength = -1;\n\n        for(String ext : extensions) {\n  \
    \          try {\n                class_with_max_strength = class_name + ext;\n\
    \                Class<?> c = Class.forName(class_with_max_strength);\n      \
    \          // get the extension's name\n                String extension_name\
    \ = c.getName().substring(c.getName().lastIndexOf(\".\"));\n                int\
    \ strength = extension_name.length() - extension_name.toLowerCase().length();\n\
    \                System.out.println(extension_name + \" = \" + strength);\n\n\
    \                if (strength > max_strength) {\n                    class_with_max_strength\
    \ = class_name + ext;\n                    max_strength = strength;\n        \
    \        }\n            } catch (ClassNotFoundException ex) {\n              \
    \  ex.printStackTrace();\n            }\n        }\n        return class_with_max_strength;",
  "        \n        // Find the extension with the greatest number\n        double\
    \ max = -1;\n        for(String ext : extensions)\n        {\n            int\
    \ count = 1;\n            for(int c = 0; c < ext.length(); ++c)\n            {\n\
    \                if(ext.substring(c - 1, c).equalsIgnoreCase(ext.substring(c +\
    \ 1, c + ext.length())))\n                {\n                    count++;\n  \
    \              }\n            }\n            if(max < count)\n            {\n\
    \                max = count;\n            }\n        }\n        \n        //\
    \ Return the class name plus the extension\n        return class_name + \".\"\
    \ + extensions.get(extensions.indexOf(String.valueOf(max)));", "        Set<String>\
    \ names = new HashSet<>();\n        for (String name : extensions) {\n       \
    \     names.add(name);\n        }\n        Comparator<String> cmp = Comparator.comparing(s\
    \ -> names.get(s.substring(0, 1).toUpperCase() + s.substring(1, s.length()).toUpperCase()));\n\
    \        return class_name + \".\" + extensions.get(cmp.max(extensions).toLowerCase());",
  "        double strength = 0.0;\n        double sum = 0.0;\n        for (String\
    \ extension : extensions) {\n            int cap = extension.substring(0,1).toUpperCase().length();\n\
    \            int sm = extension.substring(0,1).toLowerCase().length();\n     \
    \       int fraction = cap - sm;\n            strength = strength + (fraction\
    \ * fraction);\n            sum = sum + (fraction * fraction);\n        }\n  \
    \      if (strength != 0) {\n            double strength_sum = sum / strength;\n\
    \            int index = Collections.max(extensions.stream().mapToInt(extensions\
    \ -> {\n                double f = 0.0;\n                for (String extension\
    \ : extensions) {\n                    int cap = extension.substring(0,1).toUpperCase().length();\n\
    \                    int sm = extension.substring(0,1).toLowerCase().length();\n\
    \                    int fraction = cap - sm;\n                    f = f + (fraction\
    \ * fraction);\n                }\n                return (int) f;\n         \
    \   }).filter(strengths -> strengths == strength_sum).findFirst());\n        \
    \    return class_name + \".\" + extensions.get(index);\n        }\n        else\
    \ {\n            return class_name;\n        }", "        // Initialize variables\n\
    \        int cap_ext = 0;\n        int sm_ext = 0;\n        int strength = 0;\n\
    \        int index = 0;\n        // Loop through the array\n        for (String\
    \ extension : extensions) {\n            // Check if the extension is uppercase\
    \ letter\n            if (Character.isUpperCase(extension.charAt(0))) {\n    \
    \            cap_ext++;\n            }\n            // Check if the extension\
    \ is lowercase letter\n            if (Character.isLowerCase(extension.charAt(0)))\
    \ {\n                sm_ext++;\n            }\n        }\n        // Calculate\
    \ strength\n        strength = cap_ext - sm_ext;\n        // Return the extension\n\
    \        return class_name + \".\" + extensions.get(index++);", "        String\
    \ className = (String) class_name.clone();\n        String strongest = extensions.get(0).clone();\n\
    \        int numberOfLowerCase = 0;\n        for (int i = 1; i < extensions.size();\
    \ i++) {\n            String ext = (String) extensions.get(i).clone();\n     \
    \       int upperCase = ext.toUpperCase().length();\n            int lowerCase\
    \ = ext.toLowerCase().length();\n            numberOfLowerCase += lowerCase;\n\
    \            double strength = ((double) upperCase - lowerCase) / ext.length();\n\
    \            if (strength > strongest.length()) {\n                strongest =\
    \ ext;\n            }\n        }\n        if (numberOfLowerCase == 0) {\n    \
    \        return className + strongest;\n        } else {\n            return className\
    \ + strongest + \"(\" + numberOfLowerCase + \")\";\n        }", "        boolean\
    \ found = true;\n        for(int i = 0;i < extensions.size(); i++) {\n       \
    \     String[] parts = extensions.get(i).split(\"\\\\.\");\n            int CAP\
    \ = parts[0].length();\n            int SM = parts[1].length();\n            int\
    \ strength = CAP - SM;\n            System.out.println(\"strength: \" + strength);\n\
    \            if((class_name == parts[0] + \".\" + parts[1]) &&\n             \
    \       (strength < 0)) {\n                found = false;\n            }\n   \
    \         else if(strength > 0) {\n                break;\n            }\n   \
    \     }\n        if(found) {\n            return class_name + \".\" + extensions.get(0);\n\
    \        }\n        return \"\";", "        Comparator<String> sMAlphabetic =\
    \ Comparator.comparing(s -> s.toLowerCase().length());\n        Comparator<String>\
    \ capAlphabetic = Comparator.comparing(s -> s.toUpperCase().length());\n     \
    \   Collections.sort(extensions, sMAlphabetic);\n        Collections.sort(extensions,\
    \ capAlphabetic);\n        int SM = (int) Math.max(extensions.get(0).length(),\
    \ extensions.get(0).length()) - extensions.get(0).replaceAll(\"[^A-Z]\", \"\"\
    ).length();\n        int CAP = (int) Math.max(extensions.get(1).length(), extensions.get(1).length())\
    \ - extensions.get(1).replaceAll(\"[^a-z]\", \"\").length();\n        int strength\
    \ = 0;\n        for(int i = 0; i<extensions.size(); i++)\n            strength\
    \ += (extensions.get(i).length() - extensions.get(i).replaceAll(\"[^A-Z]\", \"\
    \").length()) / CAP - SM;\n        if(strength > 0)\n            return class_name\
    \ + \".\" + extensions.get(0) + \".\" + extensions.get(1); \n        else\n  \
    \          return class_name + \".\" + extensions.get(0); ", "        // Initialize\
    \ variables \n        String resulting_class = class_name;\n        int max_str_num\
    \ = 0;\n        String strongest_extension = \"\";\n\n        // Go through all\
    \ the extensions and find the strongest extension\n        for(String extension\
    \ : extensions) {\n            // Find the number of uppercase letters in the\
    \ extension\n            int num_upper_cases = extension.length() - extension.replaceAll(\"\
    [^A-Z]\", \"\").length();\n            // Find the number of lowercase letters\
    \ in the extension\n            int num_lower_cases = extension.length() - extension.replaceAll(\"\
    [^a-z]\", \"\").length();\n\n            // Find the strength of the extension\n\
    \            double strongest_extension_strength = Math.round(Math.sqrt((Math.pow(class_name.length(),\
    \ 2) + Math.pow(num_upper_cases, 2) + Math.pow(num_lower_cases, 2))/2));\n\n \
    \           // If the strongest extension strength is greater than the current\
    \ strength\n            if (strongest_extension_strength > strongest_extension_strength)\
    \ {\n                strongest_extension_strength = strongest_extension_strength;\n\
    \                strongest_extension = extension;\n                max_str_num\
    \ = strongest_extension_strength;\n            }\n        }\n\n        // If no\
    \ extensions found, return class_name + \".\" + strongest_extension\n        if\
    \ (strongest_extension.length() == 0) {\n            return class_name + \".\"\
    \ + strongest_extension;\n        }\n\n        // Otherwise, if there is more\
    \ than one strongest extension, choose the one that comes first\n        if (strongest_extension_strength\
    \ > 1) {\n            for(int i = 1; i < strongest_extension_strength; i++) {\n\
    \                String extension_name = strongest_extension + i;\n          \
    \      if (!extension_name.isEmpty()) {\n                    int extension_num_upper_cases\
    \ = extension_name.length() - extension_name.replaceAll(\"[^A-Z]\", \"\").length();\n\
    \                    int extension_num_lower_cases = extension_name.length() -\
    \ extension_name.replaceAll(\"[^a-z]\", \"\").length();\n                    if\
    \ (extension_num_upper_cases > num_upper_cases) {\n                        strongest_extension\
    \ = extension_name;\n                        max_str_num = extension_num_upper_cases;\n\
    \                        break;\n                    } else if (extension_num_lower_cases\
    \ > num_lower_cases) {\n                        strongest_extension = extension_name;\n\
    \                        max_str_num = extension_num_lower_cases;\n          \
    \              break;\n                    }\n                }\n            }\n\
    \        }\n\n        // Finally, return the class_name + \".\" + strongest_extension\n\
    \        return resulting_class + \".\" + strongest_extension;", "        ArrayList<String>\
    \ strongest = new ArrayList<>();\n        for(String s: extensions) {\n      \
    \      String extensionName = s.substring(s.lastIndexOf(\"_\")+1);\n         \
    \   int numUpper = 0;\n            int numLower = 0;\n            for(int i =\
    \ 0; i < extensionName.length(); i++) {\n                char c = extensionName.charAt(i);\n\
    \                if('A'<=c && c<='Z')\n                    numUpper += (int)Math.pow(26,\
    \ extensionName.length()-i-1);\n                else if('a' <= c && c <= 'z')\n\
    \                    numLower += (int)Math.pow(26, extensionName.length()-i-1);\n\
    \            }\n            double strength = numUpper-numLower;\n           \
    \ if(!strongest.contains(extensionName)) {\n                strongest.add(extensionName);\n\
    \                if(strength > 0) return class_name + \".\" + extensionName;\n\
    \                else return class_name + \".\" + extensionName;\n           \
    \ }\n        }\n        strongest.add(class_name + \".A\");\n        strongest.add(class_name\
    \ + \".B\");\n        strongest.add(class_name + \".C\");\n        strongest.add(class_name\
    \ + \".D\");\n        strongest.add(class_name + \".E\");\n        strongest.add(class_name\
    \ + \".F\");\n        strongest.add(class_name + \".G\");\n        strongest.add(class_name\
    \ + \".H\");\n        strongest.add(class_name + \".I\");\n        strongest.add(class_name\
    \ + \".J\");\n        strongest.add(class_name + \".K\");\n        strongest.add(class_name\
    \ + \".L\");\n        strongest.add(class_name + \".M\");\n        strongest.add(class_name\
    \ + \".N\");\n        strongest.add(class_name + \".O\");\n        strongest.add(class_name\
    \ + \".p\");\n        strongest.add(class_name + \".q\");\n        strongest.add(class_name\
    \ + \".r\");\n        strongest.add(class_name + \".s\");\n        strongest.add(class_name\
    \ + \".t\");\n        strongest.add(class_name + \".u\");\n        strongest.add(class_name\
    \ + \".v\");\n        strongest.add(class_name + \".w\");\n        strongest.add(class_name\
    \ + \".x\");\n        strongest.add(class_name + \".y\");\n        strongest.add(class_name\
    \ + \".z\");\n        strongest.add(class_name + \".Aa\");\n        strongest.add(class_name\
    \ + \".Ba\");\n        strongest.add(class_name + \".Ca\");\n        strongest.add(class_name\
    \ + \".Da\");\n        strongest.add(class_name + \".Ea\");\n        strongest.add(class_name\
    \ + \".Fa\");\n        strongest.add(class_name + \".Ga\");\n        strongest.add(class_name\
    \ + \".H", "        // Initialize maximum strength and current index.\n      \
    \  int max_strength = -1;\n        int cur_index = 0;\n        // Iterate through\
    \ extensions and increment strength for each \n        // extension whose name\
    \ contains current letter of the alphabet.\n        for (String ext : extensions)\
    \ {\n            // Extract first letter of the extension name.\n            char\
    \ letter = ext.charAt(0);\n            if (letter == 'Z') {\n                cur_index\
    \ += 1;\n            } else if (letter == 'Y') {\n                cur_index +=\
    \ 2;\n            } else if (letter == 'X') {\n                cur_index += 3;\n\
    \            } else if (letter == 'W') {\n                cur_index += 4;\n  \
    \          } else if (letter == 'V') {\n                cur_index += 5;\n    \
    \        } else if (letter == 'U') {\n                cur_index += 6;\n      \
    \      } else if (letter == 'T') {\n                cur_index += 7;\n        \
    \    } else if (letter == 'S') {\n                cur_index += 8;\n          \
    \  } else if (letter == 'R') {\n                cur_index += 9;\n            }\
    \ else if (letter == 'Q') {\n                cur_index += 10;\n            } else\
    \ if (letter == 'P') {\n                cur_index += 11;\n            } else if\
    \ (letter == 'O') {\n                cur_index += 12;\n            } else if (letter\
    \ == 'N') {\n                cur_index += 13;\n            } else if (letter ==\
    \ 'M') {\n                cur_index += 14;\n            } else if (letter == 'L')\
    \ {\n                cur_index += 15;\n            } else if (letter == 'K') {\n\
    \                cur_index += 16;\n            } else if (letter == 'J') {\n \
    \               cur_index += 17;\n            } else if (letter == 'H') {\n  \
    \              cur_index += 18;\n            } else if (letter == 'G') {\n   \
    \             cur_index += 19;\n            } else if (letter == 'F') {\n    \
    \            cur_index += 20;\n            } else if (letter == 'E') {\n     \
    \           cur_index += 21;\n            } else if (letter == 'D') {\n      \
    \          cur_index += 22;\n            } else if (letter == 'C') {\n       \
    \         cur_index += 23;\n            } else if (letter == 'A') {\n        \
    \        cur_index += 24;\n            } else {\n                cur_index +=\
    \ 25;\n            }\n            // If the current letter is found higher strength\
    \ than maximum \n            // strength, then reset the maximum strength to current\
    \ strength \n            // and set current index to the index of the extension.\n\
    \            if (ext.contains(String.valueOf(letter))) {\n                max_strength\
    \ = cur_index;\n            }\n        }\n        // If the maximum strength is\
    \ not -1, then return its extension\n        // name.\n        return class_name\
    \ + \".\" + ((max_strength > -1) ? extensions.get(max_strength) : \"\");", " \
    \       Map<String, Integer> map = new HashMap<String, Integer>();\n        Set<String>\
    \ strongest = new HashSet<String>();\n\n        for (String extension : extensions)\
    \ {\n            int strongestStrength = 0;\n            int charsCount = 0;\n\
    \            int lowerCount = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                char c = extension.charAt(i);\n                if (Character.isUpperCase(c))\
    \ {\n                    lowerCount++;\n                }\n                charsCount++;\n\
    \                if (Character.isLowerCase(c)) {\n                    lowerCount++;\n\
    \                }\n            }\n            if (lowerCount > strongestStrength)\
    \ {\n                strongestStrength = lowerCount;\n                strongest.add(extension);\n\
    \            }\n        }\n\n        for (String strongestStrength : strongest)\
    \ {\n            map.put(strongestStrength, map.get(strongestStrength) + 1);\n\
    \        }\n        Double maxValue = Collections.max(map.values());\n       \
    \ String strongestStrengthStr = \"-1\";\n        if (maxValue != 0) {\n      \
    \      strongestStrengthStr = maxValue.intValue() + \".\";\n        }\n      \
    \  for (String strongestStrength : strongest) {\n            double totalValue\
    \ = 0;\n            int totalChars = 0;\n            int totalLower = 0;\n   \
    \         for (String strongestStrength : strongest) {\n                totalChars\
    \ += strongestStrength.length();\n                totalLower += strongestStrength.length()\
    \ - 1;\n                totalValue += map.get(strongestStrength) * strongestStrength.length();\n\
    \            }\n            double extensionStrength = Math.round(((double) totalValue\
    \ / totalChars) * 100.);\n            if (extensionStrength >= strongestStrengthStr.substring((strongestStrengthStr.length()\
    \ - 1).intValue())) {\n                strongestStrengthStr = strongestStrength;\n\
    \            }\n        }\n        return class_name + \".\" + strongestStrengthStr;",
  "        if (extensions.isEmpty()) {\n            return \"\";\n        }\n    \
    \    double cap = 0;\n        double sm = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String s = extensions.get(i);\n            int capInt =\
    \ Character.getNumericValue(s.charAt(0) - 'A');\n            int smInt = Character.getNumericValue(s.charAt(s.length()-1)\
    \ - 'a');\n            cap += capInt;\n            sm += smInt;\n        }\n \
    \       double strength = cap - sm;\n        if (strength == cap) {\n        \
    \    int index = 0;\n            while (extensions.size() > 1) {\n           \
    \     String s = extensions.get(index);\n                String tempS = s;\n \
    \               for (int j = 1; j < extensions.size(); j++) {\n              \
    \      String tS = extensions.get(j);\n                    int tempCapInt = Character.getNumericValue(tS.charAt(0)\
    \ - 'A');\n                    int tempSmInt = Character.getNumericValue(tS.charAt(tS.length()\
    \ - 1) - 'a');\n                    if (tempSmInt == tempCapInt) {\n         \
    \               tempS = tS;\n                    }\n                }\n      \
    \          String temp = class_name + \".\" + tempS;\n                extensions.remove(s);\n\
    \                extensions.remove(tempS);\n                String temp2 = temp;\n\
    \                for (int k = 0; k < extensions.size(); k++) {\n             \
    \       String temp3 = extensions.get(k);\n                    String temp4 =\
    \ temp3;\n                    for (int l = 1; l < extensions.size(); l++) {\n\
    \                        String temp5 = extensions.get(l);\n                 \
    \       String temp6 = temp5;\n                        for (int m = 0; m < extensions.size();\
    \ m++) {\n                            String temp7 = extensions.get(m);\n    \
    \                        String temp8 = temp7;\n                            for\
    \ (int n = 1; n < extensions.size(); n++) {\n                                String\
    \ temp9 = extensions.get(n);\n                                String temp10 =\
    \ temp9;\n                                String temp11 = temp10 + tempS;\n  \
    \                              extensions.remove(m);\n                       \
    \         extensions.remove(temp9);\n                                extensions.remove(temp10);\n\
    \                                extensions.remove(temp11);\n                \
    \                String temp12 = temp11 + tempS;\n                           \
    \     extensions.remove(l);\n                                extensions.remove(temp9);\n\
    \                                extensions.remove(temp10);\n                \
    \                extensions.remove(temp11);\n                                String\
    \ temp13 = temp11 + tempS;\n                                extensions.remove(k);\n\
    \                                extensions.remove(temp9);\n                 \
    \               extensions.remove(temp10);\n                                extensions.remove(temp11);\n\
    \                                String temp14 = temp11 + tempS;\n           \
    \                     extensions.remove(n);\n                                extensions.remove(temp9);\n\
    \                                extensions.remove(temp10);\n                \
    \                extensions.remove(temp11);\n                                String\
    \ temp15 = temp11 + tempS;\n                                extensions.remove(m);\n\
    \                                extensions.remove(temp9);\n                 \
    \               extensions.remove(temp", "        int cap_ext = 0, sml_ext = 0,\
    \ min_strength = 0;\n        for(int i = 0; i < extensions.size(); i++) {\n  \
    \          String ext = extensions.get(i);\n            cap_ext += ext.length();\n\
    \            sml_ext += ext.toLowerCase().length();\n            min_strength\
    \ = cap_ext - sml_ext;\n            if(cap_ext - sml_ext >= min_strength) {\n\
    \                return class_name + \".\" + ext;\n            }\n        }\n\
    \        return \"\";", "        HashMap<String, Integer> map = new HashMap<>();\n\
    \        \n        for(int i = 0; i < extensions.size(); i++) {\n            map.put(extensions.get(i),\
    \ i);\n        }\n        \n        int max = 0;\n        String max = null;\n\
    \        for (Map.Entry<String, Integer> entry : map.entrySet()) {\n         \
    \   if(entry.getValue() > max) {\n                max = entry.getValue();\n  \
    \              max = entry.getKey();\n            }\n        }\n        return\
    \ class_name + \".\" + max;", '        return StrongestExtension(class_name, extensions,
    new ArrayList<String>(), new ArrayList<String>(), new ArrayList<String>(), new
    ArrayList<String>());', "        ArrayList < String > exts = new ArrayList < String\
    \ > ();\n        for (String ext : extensions) {\n            int sm = 0;\n  \
    \          int cap = 0;\n            for (int i = 0; i < ext.length(); i++) {\n\
    \                if (ext.charAt(i) >= 'A' && ext.charAt(i) <= 'Z') {\n       \
    \             cap++;\n                }\n                else if (ext.charAt(i)\
    \ >= 'a' && ext.charAt(i) <= 'z') {\n                    sm++;\n             \
    \   }\n            }\n            double fraction = (double) cap - (double) sm;\n\
    \            if (fraction > 0) {\n                exts.add(ext.substring(0, ext.lastIndexOf(\"\
    .\")));\n            }\n        }\n        Collections.sort(exts);\n        String\
    \ strongest_ext = null;\n        if (exts.size() > 0) {\n            for (int\
    \ i = 0; i < exts.size(); i++) {\n                if (exts.get(i).equals(class_name))\
    \ {\n                    strongest_ext = class_name + \".\" + exts.get(i);\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    return strongest_ext;", "        // Your code here\n        ", "        Set<String>\
    \ strongest = extensions.stream().map(s -> s.substring(s.indexOf(\"_\"), s.length()))\n\
    \            .collect(Collectors.toSet());\n        if (strongest.size() > 1)\
    \ {\n            Collections.sort(strongest);\n            strongest.remove(strongest.size()\
    \ - 1);\n        }\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (String str : strongest) {\n            sb.append(class_name).append(str).append(\"\
    \ \");\n        }\n        return sb.toString().trim();", "        int SM = 0;\n\
    \        int CAP = 0;\n        String strongest_extension = null;\n        for(String\
    \ extension : extensions){\n            CAP += extension.charAt(0) - extension.charAt(1);\n\
    \            SM  += extension.charAt(2).toLowerCase().length();\n        }\n \
    \       float strength = (float)(CAP - SM) / CAP;\n        if(strength > 0){\n\
    \            strongest_extension = class_name + \".\" + extensions.get(0);\n \
    \           for(int i = 1; i < extensions.size(); i++){\n                if(extensions.get(i).equalsIgnoreCase(strongest_extension)){\n\
    \                    strongest_extension = class_name + \".\" + extensions.get(i);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return strongest_extension;", "        // Your code here\n        \n   \
    \     int strength = -1;\n        Collections.sort(extensions, Comparator.comparing(x\
    \ -> countCases(x)));\n        for (String extension : extensions) {\n       \
    \     int s = countCases(extension);\n            if (s > strength) {\n      \
    \          strength = s;\n            }\n        }\n        String strongest =\
    \ class_name;\n        \n        if (strength > 0) {\n            strongest +=\
    \ \".\" + extensions.get(0);\n        }\n        \n        for (int i = 1; i <\
    \ extensions.size(); i++) {\n            String extension = extensions.get(i);\n\
    \            int s = countCases(extension);\n            if (s == strength) {\n\
    \                strongest += \".\" + extension;\n            }\n        }\n \
    \       return strongest;", "        // Your code here\n        ArrayList<Integer>\
    \ caps = new ArrayList<Integer>();\n        ArrayList<Integer> sms = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < extensions.size(); i++) {\n            char c = extensions.get(i).toLowerCase().charAt(0);\n\
    \            if (c >= 'A' && c <= 'Z') {\n                caps.add((int) c);\n\
    \            }\n            if (c >= 'a' && c <= 'z') {\n                sms.add((int)\
    \ c);\n            }\n        }\n        Arrays.sort(caps);\n        Arrays.sort(sms);\n\
    \        double strongest = Double.MIN_VALUE;\n        int index = -1;\n     \
    \   for (int i = 0; i < extensions.size(); i++) {\n            double c = caps.get(i)\
    \ / sms.get(i) + 1;\n            index = i;\n            if (c > strongest) {\n\
    \                strongest = c;\n            }\n        }\n        StringBuilder\
    \ sb = new StringBuilder(class_name);\n        sb.setCharAt(0, extensions.get(index).toLowerCase().charAt(0));\n\
    \        Class<?> cls = Class.forName(sb.toString());\n        try {\n       \
    \     for (int i = 0; i < extensions.size(); i++) {\n                try {\n \
    \                   Extension e = (Extension) cls.getConstructor().newInstance();\n\
    \                    String name = class_name + \".\" + extensions.get(i).toString();\n\
    \                    Class<?> extCls = Class.forName(name);\n                \
    \    Object obj = extCls.newInstance();\n                    Method getExtension\
    \ = cls.getMethod(\"getExtension\", String.class);\n                    Object\
    \ result = getExtension.invoke(cls, extensions.get(i).toString());\n         \
    \           if (result != null) {\n                        return class_name +\
    \ \".\" + extensions.get(i).toString();\n                    }\n             \
    \   } catch (NoSuchMethodException | SecurityException | IllegalArgumentException\n\
    \                        | IllegalAccessException | InstantiationException | InvocationTargetException\
    \ e) {\n                    e.printStackTrace();\n                }\n        \
    \    }\n        } catch (ClassNotFoundException | NoSuchMethodException | SecurityException\n\
    \                | InstantiationException | IllegalAccessException | InvocationTargetException\
    \ e) {\n            e.printStackTrace();\n        }\n        return null;", " \
    \       \n        // Initialize strongest extension\n        String strongest\
    \ = extensions.get(0);\n        \n        // Find all extensions with the same\
    \ strongest strength \n        for (String extension: extensions) {\n        \
    \    int extension_length = 0;\n            for (int i = 0; i < extension.length();\
    \ i++) {\n                \n                // Find number of uppercase letters\
    \ in the extension\n                int num_upper = extension.substring(i, i+1).replaceAll(\"\
    \\\\W\", \"\").length();\n                \n                // Find number of\
    \ lowercase letters in the extension\n                int num_lower = extension.substring(i,\
    \ i+1).replaceAll(\"\\\\w\", \"\").length();\n                \n             \
    \   // Find number of uppercase letters in the extension\n                extension_length\
    \ += num_upper;\n                extension_length += num_lower;\n            }\n\
    \            \n            if (extension_length > strongest.length()) {\n    \
    \            strongest = extension;\n            }\n        }\n        \n    \
    \    // Return the class name followed by the strongest extension\n        return\
    \ class_name + \".\" + strongest;", "        int cap_strength = 0, sm_strength\
    \ = 0;\n        for (String extn : extensions) {\n            int cap_num = extn.length();\n\
    \            int sm_num = extn.toLowerCase().length();\n            if (cap_num\
    \ > sm_num) {\n                cap_strength = cap_num - sm_num;\n            }\
    \ else {\n                sm_strength = sm_num - cap_num;\n            }\n   \
    \     }\n        if (cap_strength == 0) {\n            cap_strength = 1;\n   \
    \     }\n        if (sm_strength == 0) {\n            sm_strength = 1;\n     \
    \   }\n        double strength = cap_strength / sm_strength;\n        Collections.sort(extensions);\n\
    \        return class_name + extensions.get(0);", "        ArrayList<String> sorted_list\
    \ = extensions.stream()\n                .sorted()\n                .collect(Collectors.toList());\n\
    \        \n        String extension_strongest_name = \"\";\n        int extension_strength\
    \ = 0;\n\n        for (int i = 1; i < sorted_list.size(); i++) {\n           \
    \ if (sorted_list.get(i).equals(sorted_list.get(i-1))) {\n                extension_strength++;\n\
    \            } else {\n                extension_strength = -1;\n            \
    \    extension_strongest_name = sorted_list.get(i-1);\n                break;\n\
    \            }\n        }\n        return class_name + \".\" + extension_strongest_name;",
  "        ArrayList<String> exts = new ArrayList<>();\n        exts.add(class_name);\n\
    \        exts.addAll(extensions);\n        Comparator<String> extComparator =\
    \ (a, b) -> {\n            int sc = a.length() - b.length();\n            if (sc\
    \ == 0) {\n                return a.compareTo(b);\n            } else {\n    \
    \            return sc;\n            }\n        };\n        Collections.sort(exts,\
    \ extComparator);\n        String strongest = exts.get(0);\n        for (int i\
    \ = 1; i < exts.size(); i++) {\n            int sc = extComparator.compare(exts.get(i),\
    \ strongest);\n            if (sc == 0) {\n                strongest = exts.get(i);\n\
    \            }\n        }\n        return strongest;", "        int CAP = 0;\n\
    \        int SM = 0;\n        boolean isStrength = true;\n        for(String ext\
    \ : extensions) {\n            CAP = CAP + ext.length();\n            SM = SM\
    \ + ext.toUpperCase().length();\n            isStrength = isStrength && ext.toUpperCase().equalsIgnoreCase(ext.toLowerCase());\n\
    \        }\n        int strength;\n        if(CAP < SM) {\n            strength\
    \ = CAP - SM;\n        } else {\n            strength = SM - CAP;\n        }\n\
    \        if(isStrength) {\n            for(String ext : extensions) {\n      \
    \          if(!ext.toUpperCase().equalsIgnoreCase(ext.toLowerCase())) {\n    \
    \                strength++;\n                    break;\n                }\n\
    \            }\n        }\n        ArrayList<String> extNames = new ArrayList<String>();\n\
    \        int numExt = 0;\n        for(String ext : extensions) {\n           \
    \ isStrength = isStrength && ext.toUpperCase().equalsIgnoreCase(ext.toLowerCase());\n\
    \            if(isStrength) {\n                numExt++;\n                extNames.add(ext);\n\
    \            }\n        }\n        if(numExt <= 1) {\n            return class_name\
    \ + extNames.get(0);\n        } else {\n            boolean isStrong = true;\n\
    \            int min = 0;\n            for(int i = 0; i < extNames.size(); i++)\
    \ {\n                String ext = extNames.get(i);\n                int extST\
    \ = ext.toUpperCase().length();\n                isStrength = isStrength && extST\
    \ > CAP - SM;\n                if(isStrength) {\n                    isStrong\
    \ = isStrong && extST > CAP - SM;\n                    if(extST < CAP - SM) {\n\
    \                        min = i;\n                    }\n                }\n\
    \            }\n            if(isStrong) {\n                return class_name\
    \ + extNames.get(min);\n            } else {\n                return class_name\
    \ + extNames.get(0);\n            }\n        }", "        \n        if (extensions.isEmpty())\
    \ {\n            return class_name;\n        }\n        \n        // Initialize\
    \ variables\n        double strength = 0; // strength\n        int numLetters\
    \ = 0; // Number of uppercase\n        int numLower = 0; // Number of lowercase\n\
    \        String result = class_name;\n        \n        // Get the number of letters\
    \ in class name\n        for (int i = 1; i < class_name.length(); i++) {\n   \
    \         char c = class_name.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                numLetters++;\n            } else {\n                numLower++;\n\
    \            }\n        }\n        \n        // For each extension in extensions,\
    \ calculate the strength\n        for (String ext : extensions) {\n          \
    \  // Get the number of letters in the extension\n            for (int i = 1;\
    \ i < ext.length(); i++) {\n                char c = ext.charAt(i);\n        \
    \        if (Character.isUpperCase(c)) {\n                    numLetters++;\n\
    \                } else {\n                    numLower++;\n                }\n\
    \            }\n            // Calculate strength\n            double new_s =\
    \ Math.pow((numLetters - numLower), 2);\n            if (new_s < strength) {\n\
    \                strength = new_s;\n                result = class_name + \".\"\
    \ + ext;\n            }\n        }\n        return result;", "        // Your\
    \ code here!\n        String maxExt = \"\";\n        int maxStrength = 0;\n  \
    \      for (int i = 0; i < extensions.size(); i++) {\n            String extension\
    \ = extensions.get(i);\n            int pos = extension.indexOf(class_name.substring(0,1));\n\
    \            String s = extension.substring(pos+1);\n            int strength\
    \ = 0;\n            for (int j = pos - 1; j < pos + class_name.substring(0,1).length();\
    \ j++) {\n                char ch = s.charAt(j);\n                strength +=\
    \ (char)((int)ch - (int)'A');\n            }\n            if (strength > maxStrength)\
    \ {\n                maxExt = extension;\n                maxStrength = strength;\n\
    \            }\n        }\n        return maxExt + class_name.substring(0,1) +\
    \ \"(\" + class_name.substring(1) + \")\";", "        \n        int extension_count\
    \ = extensions.size();\n        int sm = 0;\n        int cap = 0;\n        int\
    \ strongest_extension_strength = 0;\n        \n        for(String extension :\
    \ extensions) {\n            \n            for(int i=0; i<extension.length();\
    \ i++) {\n                \n                char c = extension.charAt(i);\n  \
    \              \n                if(Character.isUpperCase(c)) {\n            \
    \        cap++;\n                }\n                \n                if(Character.isLowerCase(c))\
    \ {\n                    sm++;\n                }\n            }\n           \
    \ \n            if(sm > cap) {\n                strongest_extension_strength =\
    \ sm;\n            }\n            else if(sm < cap) {\n                strongest_extension_strength\
    \ = cap;\n            }\n        }\n        \n        if(extension_count > 1)\
    \ {\n            \n            int strongest_extension_strength2 = 0;\n      \
    \      int strongest_extension_strength3 = 0;\n            \n            for(String\
    \ extension : extensions) {\n                \n                for(int i=0; i<extension.length();\
    \ i++) {\n                    \n                    char c = extension.charAt(i);\n\
    \                    \n                    if(Character.isUpperCase(c)) {\n  \
    \                      cap++;\n                    }\n                    \n \
    \                   if(Character.isLowerCase(c)) {\n                        sm++;\n\
    \                    }\n                }\n                \n                if(sm\
    \ > cap) {\n                    strongest_extension_strength2 = cap;\n       \
    \         }\n                else if(sm < cap) {\n                    strongest_extension_strength2\
    \ = sm;\n                }\n                \n                if(strongest_extension_strength2\
    \ < strongest_extension_strength) {\n                    strongest_extension_strength\
    \ = strongest_extension_strength2;\n                }\n                else if(strongest_extension_strength3\
    \ < strongest_extension_strength) {\n                    strongest_extension_strength\
    \ = strongest_extension_strength3;\n                }\n                \n    \
    \            sm = 0;\n                cap = 0;\n            }\n        }\n   \
    \     \n        StringBuilder classStr = new StringBuilder();\n        classStr.append(class_name);\n\
    \        classStr.append(\".\");\n        classStr.append(extensions.get(strongest_extension_strength));\n\
    \        \n        return classStr.toString();", "        Set<String> extensions_set\
    \ = new HashSet<String>(extensions);\n        double strength = Double.NEGATIVE_INFINITY;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions_set)\
    \ {\n            String extension_name = class_name + \".\" + extension;\n   \
    \         Class<?> c = null;\n            try {\n                c = Class.forName(extension_name);\n\
    \            } catch (ClassNotFoundException e) {\n                System.err.println(\"\
    Class not found: \" + extension_name);\n                e.printStackTrace();\n\
    \                continue;\n            }\n            try {\n               \
    \ Method m = c.getMethod(\"main\", String[].class);\n                String[]\
    \ args = new String[]{};\n                m.invoke(null, args);\n            \
    \    if (strength > Double.parseDouble(args[0])) {\n                    strength\
    \ = Double.parseDouble(args[0]);\n                    strongest_extension = extension;\n\
    \                }\n            } catch (IllegalAccessException e) {\n       \
    \         System.err.println(\"Could not call method main: \" + extension_name);\n\
    \                e.printStackTrace();\n                continue;\n           \
    \ } catch (InvocationTargetException e) {\n                System.err.println(\"\
    Could not call method main: \" + extension_name);\n                e.printStackTrace();\n\
    \                continue;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest_extension;", "        // Your code here!\n        Map<Integer,\
    \ Integer> map = new HashMap<>();\n        for(int i = 0; i < extensions.size();\
    \ i++) {\n            if(map.containsKey(Character.toUpperCase(extensions.get(i).charAt(0))))\
    \ { \n                map.put(Character.toUpperCase(extensions.get(i).charAt(0)),\
    \ map.get(Character.toUpperCase(extensions.get(i).charAt(0)) + 1));\n        \
    \    }\n            else {\n                map.put(Character.toUpperCase(extensions.get(i).charAt(0)),\
    \ 1);\n            }\n        }\n        int max = 0;\n        int index = 0;\n\
    \        for(char c : class_name.toCharArray()) {\n            int c = Character.toUpperCase(String.valueOf(c));\n\
    \            if(map.containsKey(c) && map.get(c) > max) {\n                max\
    \ = map.get(c);\n                index = map.get(c);\n            }\n        }\n\
    \        StringBuilder sb = new StringBuilder(class_name+\".\"+(index+1));\n \
    \       for(int i = 0; i < index; i++) {\n            sb.append(Character.toUpperCase(String.valueOf((char)\
    \ (index + 65 + i))));\n        }\n        return sb.toString();", "        double\
    \ strength = 0;\n        double temp;\n        int temp2;\n        for (int i\
    \ = 0; i < extensions.size(); i++) {\n            temp2 = Double.parseDouble(extensions.get(i).substring(0,\
    \ 1).toUpperCase());\n            temp = Double.parseDouble(extensions.get(i).substring(1,\
    \ 2).toLowerCase());\n            strength += Math.sqrt(Math.pow(temp2 - temp,\
    \ 2));\n        }\n        Collections.sort(extensions, new Comparator<String>()\
    \ {\n            public int compare(String s1, String s2) {\n                String\
    \ s1 = s1.substring(0, 1).toUpperCase() + s1.substring(1, s1.length());\n    \
    \            String s2 = s2.substring(0, 1).toUpperCase() + s2.substring(1, s2.length());\n\
    \                return s1.compareTo(s2);\n            }\n        });\n      \
    \  System.out.println(extensions);\n        System.out.println(strength);\n  \
    \      if (extensions.size() == 1) {\n            return class_name + extensions.get(0);\n\
    \        }\n        if (extensions.contains(class_name)) {\n            return\
    \ class_name;\n        }\n        if (strength <= 0) {\n            return extensions.get(0);\n\
    \        }\n        if (strength >= extensions.size() - 1) {\n            return\
    \ extensions.get(extensions.size() - 1);\n        }\n        return class_name\
    \ + extensions.get(0);", "        ArrayList<String> extensionNames = new ArrayList<>();\n\
    \        for(String extension : extensions)\n            extensionNames.add(extension.substring(0,1).toUpperCase()\
    \ + extension.substring(1).toLowerCase());\n        double maxStrength = -1;\n\
    \        String strongest = null;\n        for(String extensionName : extensionNames)\
    \ {\n            if(Double.parseDouble(extensionName.substring(0,1).toUpperCase()\
    \ + extensionName.substring(1).toLowerCase()) == (maxStrength - 1))\n        \
    \        continue;\n            if(maxStrength == -1)\n                maxStrength\
    \ = Double.parseDouble(extensionName.substring(0,1).toUpperCase() + extensionName.substring(1).toLowerCase());\n\
    \            else\n                maxStrength = Math.max(maxStrength, Double.parseDouble(extensionName.substring(0,1).toUpperCase()\
    \ + extensionName.substring(1).toLowerCase()));\n        }\n        if(maxStrength\
    \ == -1) return null;\n        for(String extensionName : extensionNames) {\n\
    \            if(Double.parseDouble(extensionName.substring(0,1).toUpperCase()\
    \ + extensionName.substring(1).toLowerCase()) == (maxStrength - 1))\n        \
    \        continue;\n            if(strongest == null)\n                strongest\
    \ = class_name + \".\" + extensionName;\n            else\n                strongest\
    \ = class_name + \".\" + extensionName + \".\" + strongest;\n        }\n     \
    \   return strongest;", "        String strongest_extension = \"\";\n        float\
    \ maxStrength = 0;\n        for (String extension : extensions) {\n          \
    \  String extension_name = extension.substring(extension.indexOf(\".\")+1, extension.indexOf(\"\
    .\")+1+extension.indexOf(\".\"));\n            int cap = extension_name.substring(0,1).length();\n\
    \            int sm = extension_name.substring(1,2).length();\n            float\
    \ strength = (float) (cap - sm)/(float) cap;\n            if (strength > maxStrength)\
    \ {\n                strongest_extension = extension;\n                maxStrength\
    \ = strength;\n            }\n        }\n        return class_name+\".\"+strongest_extension;",
  "        Comparator<String> comparator = Comparator.comparingInt(String::length).reversed();\n\
    \        extensions = extensions.stream().filter(s -> !s.isEmpty()).collect(Collectors.toList());\n\
    \        extensions.sort(comparator);\n        double maxStrength = -1;\n    \
    \    for (String ext : extensions) {\n            int cap = ext.length();\n  \
    \          int sm = ext.toLowerCase().length();\n            double strength =\
    \ (cap - sm) / cap;\n            if (strength > maxStrength && strength >= 0 &&\
    \ strength <= 1) {\n                maxStrength = strength;\n            }\n \
    \       }\n        if (maxStrength >= 0 && maxStrength <= 1) {\n            return\
    \ String.format(\"%s.%s\", class_name, extensions.get(extensions.indexOf(extensions.get(0))).toString());\n\
    \        }\n        throw new RuntimeException(\"No extension found\");", "  \
    \      ArrayList<String> extensions_sorted = new ArrayList<String>(extensions);\n\
    \        Collections.sort(extensions_sorted);\n        int str_len = 0;\n    \
    \    String strongest_extension_str = null;\n        for(String extension : extensions_sorted)\
    \ {\n            if(extension.length() > str_len)\n                str_len = extension.length();\n\
    \        }\n        for(int i = 0; i < extensions_sorted.size(); i++) {\n    \
    \        if(i < extensions_sorted.size() - 1)\n                if(extensions_sorted.get(i).substring(str_len).compareToIgnoreCase(extensions_sorted.get(i\
    \ + 1).substring(str_len)) > 0) {\n                    strongest_extension_str\
    \ = class_name + \".\" + extensions_sorted.get(i);\n                    break;\n\
    \                }\n        }\n        return strongest_extension_str;", "   \
    \     String extension_name;\n        double extension_strength;\n        double\
    \ extension_capitalized;\n        double extension_smallest_length;\n\n      \
    \  List<String> extension_names = extensions.stream().map(x -> x.substring(0,x.length()-1)).collect(Collectors.toList());\n\
    \n        for (String e : extension_names) {\n            extension_capitalized\
    \ = Character.toUpperCase(e).charAt(0) - Character.toUpperCase(e).charAt(1);\n\
    \            extension_smallest_length = e.getBytes().length; // The byte length\
    \ of the extension name\n            extension_strength = 0;\n            for\
    \ (int i = 0; i < e.getBytes().length; i++) {\n                if (e.getBytes()[i]\
    \ >= 65 && e.getBytes()[i] <= 90) {\n                    extension_strength +=\
    \ 1.0;\n                }\n            }\n            extension_strength = (extension_strength\
    \ * extension_smallest_length) / extension_capitalized;\n            if (extension_strength\
    \ > extension_strength) {\n                extension_name = e;\n            }\n\
    \        }\n        return class_name + \".\" + extension_name;", "        ArrayList<Integer>\
    \ strongest = new ArrayList<>();\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            try {\n\
    \                Class<?> loaded_class = Class.forName(class_name + extension);\n\
    \                Method method = loaded_class.getDeclaredMethod(\"getStrength\"\
    );\n                method.setAccessible(true);\n                int strength\
    \ = (Integer) method.invoke(loaded_class);\n                strongest.add(strength);\n\
    \            } catch (Exception ex) {\n                String ex2 = ex.getMessage();\n\
    \                System.out.println(ex2);\n            }\n        }\n        Collections.sort(strongest);\n\
    \        if (strongest.size() > 1) {\n            strongest = strongest.subList(0,\
    \ 1);\n        }\n        try {\n            Class<?> loaded_class = Class.forName(class_name\
    \ + strongest.get(0));\n            Method method = loaded_class.getDeclaredMethod(\"\
    getStrength\");\n            method.setAccessible(true);\n            int strength\
    \ = (Integer) method.invoke(loaded_class);\n            return class_name + strongest.get(0)\
    \ + \".\" + strongest.get(1) + \".\" + strength;\n        } catch (Exception ex)\
    \ {\n            String ex2 = ex.getMessage();\n            System.out.println(ex2);\n\
    \        }\n        return class_name + strongest.get(0);", "        HashMap<Integer,\
    \ Integer> extensions_map = new HashMap<>();\n        for (String extension :\
    \ extensions) {\n            int cap = extension.matches(\"[A-Z]+\") ? extension.length()\
    \ : -1;\n            int sm = extension.matches(\"[a-z]+\") ? extension.length()\
    \ : -1;\n            int strength = cap - sm;\n            if (strength != -1\
    \ && !extensions_map.containsKey(strength)) {\n                extensions_map.put(strength,\
    \ 1);\n            } else {\n                extensions_map.put(strength, extensions_map.get(strength)\
    \ + 1);\n            }\n        }\n\n        int maxStrength = extensions_map.keySet().stream().max((a,\
    \ b) -> {\n            return Integer.compare(a, b.intValue());\n        }).get();\n\
    \        String maxStrengthName = extensions_map.get(maxStrength).keySet().stream().max((a,\
    \ b) -> {\n            return Integer.compare(a, b);\n        }).map(e -> class_name\
    \ + \".\" + e).collect(Collectors.joining());\n\n        Set<String> extensions_with_same_strength\
    \ = extensions_map.keySet().stream().filter(e -> e == maxStrength).collect(Collectors.toSet());\n\
    \        if (extensions_with_same_strength.size() == 2) {\n            return\
    \ class_name + \".\" + extensions_with_same_strength.iterator().next();\n    \
    \    } else if (extensions_with_same_strength.size() == 1) {\n            return\
    \ maxStrengthName;\n        } else {\n            throw new RuntimeException(\"\
    Invalid extensions: \" + extensions);\n        }", "        Collections.sort(extensions,\
    \ new Comparator<String>() {\n            public int compare(String o1, String\
    \ o2) {\n                return (int) Math.signum((double) (o1.toUpperCase().length()\
    \ - o2.toUpperCase().length())) - (double) o1.toUpperCase().compareTo(o2.toUpperCase());\n\
    \            }\n        });\n        double max = 0.0;\n        for (String ext\
    \ : extensions) {\n            int cap = ext.toUpperCase().length();\n       \
    \     int sm = ext.toLowerCase().length();\n            max += cap - sm;\n   \
    \     }\n        if (max > 0) {\n            return class_name + \".\" + extensions.get(0);\n\
    \        } else {\n            return class_name;\n        }", "        int max_strength\
    \ = -1;\n        for(int i = 0; i < extensions.size(); i++) {\n            int\
    \ strength = extensions.get(i).length() - extensions.get(i).toLowerCase().length();\n\
    \            if(max_strength < strength) {\n                max_strength = strength;\n\
    \            }\n        }\n        return class_name + extensions.get(extensions.indexOf(max_strength));",
  "        int cap_sum = 0;\n        int sm_sum = 0;\n        ArrayList<Integer> strongest\
    \ = new ArrayList<>();\n        for (String s : extensions) {\n            int\
    \ cap = s.toUpperCase().length();\n            int sm = s.toLowerCase().length();\n\
    \            cap_sum += cap;\n            sm_sum += sm;\n            int strength\
    \ = cap - sm;\n            if (strength > 0) {\n                strongest.add(strength);\n\
    \            }\n        }\n        Collections.sort(strongest);\n        int strongest_index\
    \ = strongest.size()-1;\n        if (strongest.size() > 1) {\n            for\
    \ (int i = 0; i < strongest.size(); i++) {\n                if (i == strongest_index)\
    \ {\n                    return class_name + \".\" + extensions.get(strongest_index);\n\
    \                } else if (strongest.get(i) == strongest.get(strongest_index))\
    \ {\n                    if (i == strongest_index - 1) {\n                   \
    \     return class_name + \".\" + extensions.get(strongest_index);\n         \
    \           } else if (i == strongest_index - 2) {\n                        return\
    \ class_name + \".\" + extensions.get(strongest_index-1);\n                  \
    \  } else if (i == strongest_index - 3) {\n                        return class_name\
    \ + \".\" + extensions.get(strongest_index-2);\n                    }\n      \
    \          }\n            }\n        }\n        return class_name + \".\" + extensions.get(0);",
  "        String extension = \"\";\n        float strength = 0;\n        String strongest\
    \ = \"\";\n        for (int i = 0; i < extensions.size(); i++) {\n           \
    \ String extension = class_name + \".\" + extensions.get(i);\n            try\
    \ {\n                Class c = Class.forName(extension);\n                Object\
    \ obj = c.newInstance();\n                Method getStrength = c.getMethod(\"\
    getStrength\");\n                Object strength = getStrength.invoke(obj);\n\
    \                if (strength != null) {\n                    float x = strength;\n\
    \                    if (strength > strength) {\n                        x = strength;\n\
    \                    }\n                    strength = x;\n                }\n\
    \                strongest = class_name + \".\" + extensions.get(i);\n       \
    \         break;\n            } catch (ClassNotFoundException | NoSuchMethodException\
    \ | SecurityException | IllegalAccessException | InstantiationException | IllegalArgumentException\
    \ | InvocationTargetException ex) {\n            }\n        }\n        if (strongest\
    \ == \"\") {\n            for (int i = 0; i < extensions.size(); i++) {\n    \
    \            String extension = class_name + \".\" + extensions.get(i);\n    \
    \            try {\n                    Class c = Class.forName(extension);\n\
    \                    Object obj = c.newInstance();\n                    Method\
    \ getStrength = c.getMethod(\"getStrength\");\n                    Object strength\
    \ = getStrength.invoke(obj);\n                    if (strength != null) {\n  \
    \                      float x = strength;\n                        if (strength\
    \ > strength) {\n                            x = strength;\n                 \
    \       }\n                        strength = x;\n                    }\n    \
    \                strongest = class_name + \".\" + extensions.get(i);\n       \
    \             break;\n                } catch (ClassNotFoundException | NoSuchMethodException\
    \ | SecurityException | IllegalAccessException | InstantiationException | IllegalArgumentException\
    \ | InvocationTargetException ex) {\n                }\n            }\n      \
    \  }\n        return strongest;", "        Map<Integer, Integer> strongest_extensions\
    \ = new HashMap<>();\n        for (String extension : extensions) {\n        \
    \    int length = extension.length();\n            int sm = 0;\n            int\
    \ cap = 0;\n            for (int i = 0; i < length; ++i) {\n                int\
    \ c = extension.charAt(i);\n                if (Character.isUpperCase(c)) {\n\
    \                    cap++;\n                } else {\n                    sm++;\n\
    \                }\n            }\n            int strength = cap - sm;\n    \
    \        if (strongest_extensions.containsKey(strength)) {\n                int\
    \ tmp = strongest_extensions.get(strength);\n                if (tmp > length)\n\
    \                    length = tmp;\n            } else {\n                strongest_extensions.put(strength,\
    \ length);\n            }\n        }\n        int strongest_strength = -1;\n \
    \       for (Integer strength : strongest_extensions) {\n            if (strongest_strength\
    \ == -1) {\n                strongest_strength = strength;\n            } else\
    \ if (strength > strongest_strength) {\n                strongest_strength = strength;\n\
    \            }\n        }\n        String result = class_name + \".\";\n     \
    \   for (Integer strength : strongest_extensions) {\n            if (strength\
    \ == strongest_strength) {\n                result += extensions.get(strongest_strength);\n\
    \            }\n        }\n        return result;", "        HashMap<String, Integer>\
    \ strongest_extension = new HashMap<String, Integer>();\n        for(String ext\
    \ : extensions) {\n            String class_name = ext.substring(0, ext.length()\
    \ - 1);\n            int strength = ext.substring(ext.length() - 1);\n       \
    \     strongest_extension.putIfAbsent(class_name, strength);\n        }\n\n  \
    \      double max_strength = 0;\n        for (Integer i : strongest_extension.values())\
    \ {\n            if (max_strength < i) {\n                max_strength = i;\n\
    \            }\n        }\n\n        if (max_strength == 0) {\n            throw\
    \ new IllegalArgumentException(\"No extensions found\");\n        } else {\n \
    \           return class_name + \".\" + max_strength;\n        }", "        int\
    \ CAP = class_name.charAt(class_name.length() - 1);\n        int SM = class_name.charAt(class_name.length()\
    \ - 2);\n        int strongest = -1;\n        String strongest_ext = null;\n \
    \       for (String ext : extensions) {\n            int cAP = ext.charAt(ext.length()\
    \ - 1);\n            int cSM = ext.charAt(ext.length() - 2);\n            double\
    \ ratio = (double) (cAP - cSM) / (CAP - SM);\n            if (ratio > strongest)\
    \ {\n                strongest = ratio;\n                strongest_ext = ext;\n\
    \            }\n        }\n        return class_name + \".\" + strongest_ext;",
  "        Comparator<String> strength = null;\n        Comparator<String> extension\
    \ = null;\n        Comparator<String> extension_strength = null;\n        extension_strength\
    \ = Comparator.comparingInt(e -> countCap(e) - countLower(e));\n        extension\
    \ = Comparator.comparing((String e) -> e);\n        strength = Comparator.comparingInt(e\
    \ -> countCap(e) - countLower(e));\n        extension.thenComparing(extension_strength);\n\
    \        extension.thenComparing(strength);\n        return extension.max(extensions).get();",
  "        Map<String, Integer> strongest_map = new HashMap<>();\n        for (String\
    \ extension : extensions) {\n            int upper = (new CaseInsensitiveComparator()).compare(class_name,\
    \ extension, 0, extension.length());\n            int lower = 0;\n           \
    \ if (extension.length() >= 2) {\n                lower = (extension.charAt(0)\
    \ - 'A' + extension.charAt(1) - 'A').abs();\n            }\n            strongest_map.put(extension,\
    \ new Integer(Math.max(upper, lower)));\n        }\n        return class_name\
    \ + \".\" + extensions.get(strongest_map.entrySet().stream().filter(e -> e.getValue().equals(strongest_map.get(e.getKey())).findFirst().get().getKey()).get());",
  "        double strength = -1;\n        for(String extension : extensions) {\n \
    \           if(class_name.substring(0, extension.length()).equalsIgnoreCase(extension))\
    \ {\n                if(strength < 0 || extension.length() - extension.substring(0,\
    \ 1).equalsIgnoreCase(extension.substring(1))) {\n                    strength\
    \ = extension.length() - extension.substring(0, 1);\n                }\n     \
    \       }\n        }\n        if(strength == -1) {\n            return class_name;\n\
    \        }\n        int sm = class_name.substring(class_name.length() - 1).length();\n\
    \        double cap = class_name.substring(class_name.length() - 1).replaceAll(\"\
    [A-Z]\", \"\").length();\n        double smCap = strength - (cap - sm);\n    \
    \    return class_name + \".\" + extensions.stream()\n                .sorted(Comparator.comparingDouble(extension::length))\n\
    \                .findFirst()\n                .orElseThrow(IllegalArgumentException::new)\
    \ + \"_\" + (smCap < 0 ? -1 : (int)(smCap + 0.5));", "        int sm = extensions.size();\n\
    \        double sc = 1;\n        double sc2 = sc;\n        double cap = 1;\n \
    \       double cap2 = cap;\n        int max = 0;\n        for (int i = 0; i <\
    \ sm; i++) {\n            String x = extensions.get(i);\n            sc2 = sc2\
    \ * x.length();\n            cap2 = cap2 * x.length();\n            if (sc > sc2)\
    \ {\n                sc = sc2;\n                cap = cap2;\n            }\n \
    \           if (sc < sc2) {\n                sc = sc2;\n                cap =\
    \ cap2;\n            }\n            if (cap > cap2) {\n                cap = cap2;\n\
    \            }\n            if (cap < cap2) {\n                cap = cap2;\n \
    \           }\n        }\n        if (sc > sm) {\n            max = sc;\n    \
    \    }\n        if (sc < sm) {\n            max = sc;\n        }\n        System.out.println(max\
    \ + \"  \" + sm);\n        if (max > sm) {\n            return class_name + \"\
    .\" + extensions.get(0);\n        }\n        return class_name + \".\" + extensions.get(max);",
  "        String[] split = class_name.split(\"\\\\.\");\n        String extension\
    \ = null;\n        int best_strength = -1;\n        int best_index = -1;\n   \
    \     for (String s : extensions) {\n            String[] exts = s.split(\"\\\\\
    W+\");\n            int strenght = 0;\n            for (String ex : exts) {\n\
    \                if (ex.length() == 0) continue;\n                int cap = ex.toUpperCase().length();\n\
    \                int sm = ex.toLowerCase().length();\n                if (cap\
    \ > sm) strenght++;\n            }\n            if (strenght > best_strength)\
    \ {\n                best_strength = strenght;\n                best_index = exts.length;\n\
    \            }\n        }\n        String extension_name = split[split.length\
    \ - best_index];\n        return class_name + \".\" + extension_name;", "    \
    \    char cap = class_name.substring(0, 1).toUpperCase().charAt(0);\n        int\
    \ sm = class_name.substring(1).toLowerCase().length();\n        double strength\
    \ = cap - sm;\n        if (extensions == null || extensions.isEmpty()) return\
    \ class_name;\n        extensions.stream()\n            .map((String s) -> (s.toLowerCase().indexOf(cap\
    \ - sm) >= 0) ? s : class_name + \".\" + s)\n            .max(Comparator.naturalOrder())\n\
    \            .ifPresent(System.out::println);\n        return class_name + \"\
    .\" + extensions.get(0);", "        int CAP = class_name.codePoints().filter(Character::isUpperCase).count();\n\
    \        int SM = class_name.codePoints().filter(Character::isLowerCase).count();\n\
    \        int strength = 0;\n        for (String e : extensions) {\n          \
    \  int cp = e.codePoints().filter(Character::isUpperCase).count();\n         \
    \   int lp = e.codePoints().filter(Character::isLowerCase).count();\n        \
    \    int s = (CAP - SM) * (CAP - cp - lp) / CAP;\n            if (s > strength)\
    \ {\n                strength = s;\n            }\n        }\n        int index\
    \ = extensions.indexOf(class_name);\n        if (strength == 0) {\n          \
    \  return class_name;\n        } else if (strength > 0) {\n            return\
    \ class_name + extensions.subList(index, index+1).get(0);\n        } else {\n\
    \            return class_name + extensions.subList(0, index).get(0);\n      \
    \  }", "        ArrayList <String> ext = new ArrayList<String>();\n        //\
    \ Use a map to keep a count of the number of times each extension appears\n  \
    \      Map<String, Integer> map = new HashMap<String, Integer>();\n        for(String\
    \ ext : extensions) {\n            int count = map.containsKey(ext) ? map.get(ext)\
    \ : 0;\n            map.put(ext, count+1);\n        }\n        int max = 0;\n\
    \        for(String ext : extensions) {\n            max = Math.max(max, map.get(ext));\n\
    \        }\n        ext = new ArrayList<String>();\n        for(Map.Entry<String,\
    \ Integer> entry : map.entrySet()) {\n            if((entry.getValue()) == max)\
    \ {\n                ext.add(entry.getKey());\n            }\n        }\n    \
    \    return class_name + \".\" + ext.get(0);", "        ArrayList<Integer> count\
    \ = new ArrayList<Integer>();\n        for(int i=0; i<extensions.size(); i++)\
    \ {\n            String extension = extensions.get(i);\n            char c = extension.charAt(0);\n\
    \            if(Character.isUpperCase(c)) {\n                int index = i;\n\
    \                for(int j=i; j<extensions.size(); j++) {\n                  \
    \  char x = extensions.get(j).charAt(0);\n                    if(c == x) {\n \
    \                       index = j;\n                        break;\n         \
    \           }\n                }\n                count.add(new Integer(index));\n\
    \            }\n        }\n        int max_index = 0;\n        for(int i=0; i<extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            char\
    \ c = extension.charAt(0);\n            if(Character.isLowerCase(c)) {\n     \
    \           if(max_index > count.get(max_index)) {\n                    max_index\
    \ = i;\n                }\n            }\n        }\n        return class_name\
    \ + \".\" + extensions.get(max_index);", "        // Your code goes here\n   \
    \     int max = 0;\n        int a = 0;\n        int b = 0;\n        int c = 0;\n\
    \        int d = 0;\n        for(String extension : extensions){\n           \
    \ String extensionName = extension.substring(0,1);\n            String extensionCap\
    \ = extension.substring(1,2);\n            String extensionSm  = extension.substring(2,3);\n\
    \            int strength = Integer.parseInt(extensionCap) - Integer.parseInt(extensionSm);\n\
    \            if(strength > max){\n                max = strength;\n          \
    \      a = strength;\n                b = strength;\n                c = strength;\n\
    \                d = strength;\n            }\n            if(strength == max){\n\
    \                a = strength;\n                b = strength;\n              \
    \  c = strength;\n                d = strength;\n            }\n            if(strength\
    \ < max){\n                b = strength;\n                c = strength;\n    \
    \            d = strength;\n            }\n            if(strength == max){\n\
    \                c = strength;\n                d = strength;\n            }\n\
    \            if(strength < max){\n                d = strength;\n            }\n\
    \        }\n        String className = class_name.substring(0,class_name.lastIndexOf(\"\
    .\"));\n        String classExt = class_name.substring(class_name.lastIndexOf(\"\
    .\")+1);\n        String strongestExtension = null;\n        if(a>b&&a>c&&a>d){\n\
    \            strongestExtension = className + \".\" + classExt + \"a\";\n    \
    \    }\n        else if(b>a&&b>c&&b>d){\n            strongestExtension = className\
    \ + \".\" + classExt + \"b\";\n        }\n        else if(c>a&&c>b&&c>d){\n  \
    \          strongestExtension = className + \".\" + classExt + \"c\";\n      \
    \  }\n        else{\n            strongestExtension = className + \".\" + classExt\
    \ + \"d\";\n        }\n        return strongestExtension;", "        if (extensions.size()\
    \ == 0) {\n            return class_name;\n        }\n        int cap = 0, sm\
    \ = 0, i;\n        for (i = 0; i < extensions.size(); i++) {\n            if (extensions.get(i).contains(\"\
    CAP\")) {\n                cap = Integer.parseInt(extensions.get(i).replace(\"\
    CAP\", \"\"));\n            }\n            if (extensions.get(i).contains(\"SM\"\
    )) {\n                sm = Integer.parseInt(extensions.get(i).replace(\"SM\",\
    \ \"\"));\n            }\n        }\n        Double strength = (cap - sm) / cap;\n\
    \        ArrayList<String> newList = new ArrayList<String>();\n        for (i\
    \ = 0; i < extensions.size(); i++) {\n            if (extensions.get(i).contains(\"\
    CAP\") && extensions.get(i).contains(\"SM\")) {\n                Double d = Double.parseDouble(extensions.get(i).replace(\"\
    SM\", \"\").replace(\"CAP\", \"\"));\n                if (d == strength) {\n \
    \                   newList.add(extensions.get(i));\n                }\n     \
    \       }\n        }\n        if (newList.size() > 0) {\n            return class_name\
    \ + \".\" + StrongestExtension(class_name, newList);\n        } else {\n     \
    \       return class_name;\n        }", "        Set<String> class_list = new\
    \ HashSet<>();\n        int strongest_strength = 0;\n        for(String extension\
    \ : extensions) {\n            int extension_strength = class_name.lastIndexOf(extension);\n\
    \            if((extension_strength>=0) && (class_list.contains(extension_strength))){\n\
    \                strongest_strength = extension_strength;\n            }\n   \
    \         class_list.add(extension_strength);\n        }\n        return class_name\
    \ + \".\" + String.valueOf(strongest_strength);", "        // Your code here\n\
    \        String[] arr = class_name.split(\"\");\n        int sm = 0;\n       \
    \ int cap = 0;\n        int strongest = 0;\n        for (int i = 0; i < arr.length;\
    \ i++){\n            if (arr[i].isUpperCase()){\n                cap++;\n    \
    \        }\n            if (arr[i].isLowerCase()){\n                sm++;\n  \
    \          }\n        }\n        if (sm<cap){\n            for (int i = 0; i <\
    \ arr.length; i++){\n                if (arr[i].isUpperCase()){\n            \
    \        cap++;\n                }\n                if (arr[i].isLowerCase()){\n\
    \                    sm++;\n                }\n            }\n        }\n    \
    \    if (sm>cap){\n            for (int i = 0; i < arr.length; i++){\n       \
    \         if (arr[i].isUpperCase()){\n                    cap++;\n           \
    \     }\n                if (arr[i].isLowerCase()){\n                    sm++;\n\
    \                }\n            }\n        }\n        double strength = (double)(cap\
    \ \u2212 sm)/cap;\n        for (int i = 0; i < arr.length; i++){\n           \
    \ if (arr[i].isUpperCase()){\n                strongest = strongest+strength;\n\
    \            }\n            if (arr[i].isLowerCase()){\n                strongest\
    \ = strongest+strength;\n            }\n        }\n        String strongest_extension\
    \ = \"\";\n        if(strongest > 0){\n            strongest_extension = class_name\
    \ + \".\"+extensions.get((int)(Math.ceil(strongest)));\n        }\n        return\
    \ strongest_extension;", "        \n        \n        List<String> extension_strengths\
    \ = extensions.stream().map(e -> new String[] { e, \"\" }).filter(e -> e[1].isEmpty()).collect(Collectors.toList());\n\
    \        \n        Collections.sort(extension_strengths, new Comparator<String[]>()\
    \ {\n            public int compare(String[] o1, String[] o2) {\n            \
    \    int c = new Integer(o1[1]).compareTo(o1[1]);\n                return (c <\
    \ 0) ? -1 : (c > 0) ? 1 : 0;\n            }\n        });\n        \n        return\
    \ class_name + \".\" + extension_strengths.get(0); \n        ", "        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n", "        // Your code here\n        // Your code here\n\
    \        return null;", "        Class c = null;\n        Method get = null;\n\
    \        Method set = null;\n        Method toStr = null;\n        Method toString\
    \ = null;\n        String result = \"\";\n        Object extension = null;\n \
    \       ArrayList extension_array = new ArrayList();\n        ArrayList extensions_array\
    \ = new ArrayList();\n        ArrayList extensions_array_list = new ArrayList();\n\
    \        int cap = 0;\n        int sm = 0;\n        for (String extension : extensions)\
    \ {\n            cap = cap + extension.substring(0,1).toUpperCase().length();\n\
    \            sm = sm + extension.substring(1,2).toLowerCase().length();\n    \
    \    }\n        cap = cap / sm;\n        extensions_array_list = extensions_array_list.add(extension);\n\
    \        System.out.println(extensions_array_list);\n        for (String extension\
    \ : extensions) {\n            extensions_array_list = extensions_array_list.add(extension);\n\
    \            System.out.println(extensions_array_list);\n        }\n        \n\
    \        try {\n            c = Class.forName(class_name);\n        } catch (Exception\
    \ e) {\n            System.err.println(e);\n        }\n        for (String extension\
    \ : extensions) {\n            try {\n                get = c.getMethod(extension);\n\
    \            } catch (Exception e) {\n                System.err.println(e);\n\
    \            }\n            try {\n                set = c.getMethod(extension);\n\
    \            } catch (Exception e) {\n                System.err.println(e);\n\
    \            }\n            try {\n                toStr = c.getMethod(extension,\
    \ new Class[]{});\n            } catch (Exception e) {\n                System.err.println(e);\n\
    \            }\n            try {\n                toString = c.getMethod(extension,\
    \ new Class[]{});\n            } catch (Exception e) {\n                System.err.println(e);\n\
    \            }\n            if (get != null && set != null && toStr != null &&\
    \ toString != null) {\n                System.out.println(get);\n            \
    \    extension = toStr.invoke(extension, new Object[]{});\n                System.out.println(extension);\n\
    \                try {\n                    result = result + c.cast(extension).toString();\n\
    \                } catch (Exception e) {\n                    System.err.println(e);\n\
    \                }\n                try {\n                    result = result\
    \ + c.cast(extension).toString();\n                } catch (Exception e) {\n \
    \                   System.err.println(e);\n                }\n              \
    \  System.out.println(toString.invoke(extension, new Object[]{}));\n         \
    \       try {\n                    result = result + c.cast(extension).toString();\n\
    \                } catch (Exception e) {\n                    System.err.println(e);\n\
    \                }\n                try {\n                    result = result\
    \ + c.cast(extension).toString();\n                } catch (Exception e) {\n \
    \                   System.err.println(e);\n                }\n              \
    \  System.out.println(get);\n                try {\n                    result\
    \ = result + c.cast(extension).toString();\n                } catch (Exception\
    \ e) {\n                    System.err.println(e);\n                }\n      \
    \          try {\n                    result = result + c.cast(extension).toString();\n",
  "        // write your code here\n        int strength = -1;\n        int smax =\
    \ 0;\n        int fmax = 0;\n        int mmax = 0;\n        for(int i = 0; i <\
    \ extensions.size(); i++){\n            String s = extensions.get(i);\n      \
    \      if(s.toUpperCase().compareTo(class_name.substring(0,CAP)) == 0)\n     \
    \           strength = Integer.valueOf(s.toUpperCase().substring(CAP));\n    \
    \        if(s.toLowerCase().compareTo(class_name.substring(0,SM)) == 0)\n    \
    \            strength = Integer.valueOf(s.toLowerCase().substring(SM));\n    \
    \        System.out.println(strength);\n            int x = strength;\n      \
    \      if(i == extensions.size() - 1){\n                int y = strength;\n  \
    \              if (x > fmax){\n                    fmax = x;\n               \
    \     mmax = y;\n                }\n            }\n            else{\n       \
    \         int y = strength;\n                if (x < smax){\n                \
    \    smax = x;\n                    mmax = y;\n                }\n           \
    \ }\n        }\n        \n        System.out.println(strength);\n        \n  \
    \      \n        return class_name + \".\" + extensions.get(smax) + extensions.get(mmax);",
  '        boolean still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_still_',
  "        ArrayList<Integer> strengths = new ArrayList<>();\n        for (String\
    \ extension : extensions) {\n            int cap = extension.substring(extension.indexOf('C')\
    \ + 1).length();\n            int sm = extension.substring(extension.indexOf('S')\
    \ + 1).length();\n            strengths.add(cap - sm);\n        }\n        int\
    \ strongest_extension = Collections.max(strengths);\n        if (strongest_extension\
    \ != 0) {\n            return class_name + \".\" + extensions.get(strongest_extension);\n\
    \        }\n        else return class_name;", '        // Write your code here',
  "        ArrayList<Double> strength = new ArrayList<>();\n        extensions.forEach(extension\
    \ -> {\n            int extension_strenght = extension.charAt(0) - extension.charAt(1);\
    \ \n            strength.add(extension_strenght);\n        });\n        Arrays.sort(strength);\n\
    \        String result = class_name;\n        int first_extension = -1;\n    \
    \    for (int i = 0; i < strength.size(); i++) {\n            if (i == 0) {\n\
    \                if (strength.get(i) < 0) {\n                    first_extension\
    \ = i;\n                }\n            }\n            if (strength.get(i) == strength.get(first_extension))\
    \ {\n                if (i == (strength.size() - 1)) {\n                    return\
    \ result;\n                }\n                first_extension = i;\n         \
    \   }\n        }\n        return class_name + extensions.get(first_extension);",
  "        if (extensions.size() == 0) throw new IllegalArgumentException(\"Extension\
    \ array must have at least one entry.\");\n        if (class_name == null || class_name.length()\
    \ == 0) throw new IllegalArgumentException(\"Class name must be a non-null string\
    \ with no empty spaces.\");\n        if (extensions == null || extensions.size()\
    \ == 0) throw new IllegalArgumentException(\"Extension array list must not be\
    \ null or empty.\");\n\n        // You will be given CAP and SM. Do your work\
    \ here (find the strongest extension)\n        int CAP = 0;\n        int SM =\
    \ 0;\n        for (String extension : extensions) {\n            CAP += extension.charAt(0)\
    \ - 'A';\n            SM += extension.charAt(0) - 'a';\n        }\n\n        //\
    \ Calculate the strength of the extension.\n        // If the strongest extension\
    \ is null, it means that all extensions have the same strength.\n        // You\
    \ will need to return null here.\n        if (CAP - SM == 0) {\n            return\
    \ class_name + \".\";\n        } else {\n            return class_name + \".\"\
    \ + extensions.get(0) + extensions.get(0);\n        }", "        Double max_strength\
    \ = Double.NEGATIVE_INFINITY;\n        String max_extension_name = \"\";\n   \
    \     for (String extension : extensions) {\n            Double ext = Double.parseDouble(extension.substring(0,\
    \ extension.lastIndexOf('.')));\n            if (ext > max_strength) {\n     \
    \           max_strength = ext;\n                max_extension_name = extension;\n\
    \            }\n        }\n        return class_name + \".\" + max_extension_name;",
  "        ArrayList<Integer> caps = new ArrayList<Integer>();\n        ArrayList<Integer>\
    \ sms = new ArrayList<Integer>();\n        int maxStrength = 0;\n        for (String\
    \ ext : extensions) {\n            int extCap = ext.length();\n            int\
    \ extSm = 0;\n            for (int i = 0; i < ext.length(); i++) {\n         \
    \       if (ext.charAt(i) == ext.charAt(i).toLowerCase()) {\n                \
    \    extSm += 1;\n                }\n            }\n            caps.add(extCap);\n\
    \            sms.add(extSm);\n            if (extCap > maxStrength) {\n      \
    \          maxStrength = extCap;\n            }\n        }\n        int maxCap\
    \ = Collections.max(caps);\n        int maxSms = Collections.max(sms);\n     \
    \   if (maxCap == maxSms) {\n            throw new IllegalArgumentException(\"\
    Could not find any extension with maximum strength\");\n        }\n        for\
    \ (int cap : caps) {\n            int strength = cap - maxSms;\n            if\
    \ (strength > 0) {\n                String extensionName = class_name + \".\"\
    \ + ext + \".\" + String.valueOf(strength);\n                return extensionName;\n\
    \            }\n        }\n        throw new IllegalArgumentException(\"Could\
    \ not find any extension with maximum strength\");", "        // Your code here\n\
    \        \n        \n        \n        \n\n        return class_name + \".\";",
  "        // Your code goes here\n        int CAP=class_name.toUpperCase().length();\n\
    \        int SM=class_name.substring(CAP).length();\n        int STR=CAP-SM;\n\
    \        int STRONGEST=-1;\n        for(String ext : extensions){\n          \
    \  int extCAP=ext.toUpperCase().length();\n            int extSM=ext.substring(extCAP).length();\n\
    \            if(extCAP==CAP && extSM==SM){\n                if(STRONGEST==-1 ||\
    \ STRONGEST>extCAP-extSM){\n                    STRONGEST=extCAP-extSM;\n    \
    \            }\n            }\n        }\n        String result=class_name.substring(0,CAP)+String.valueOf(STRONGEST)+class_name.substring(CAP+SM,class_name.length());\n\
    \        \n        return result;", "        HashMap<String, Integer> map = new\
    \ HashMap<String, Integer>();\n        for (String ext : extensions) {\n     \
    \       map.putAll(getExtensionStrength(ext));\n        }\n        Collections.sort(extensions,\
    \ (a, b) -> map.get(a).compareTo(map.get(b)));\n        String strongest_extension\
    \ = class_name + \".\" + extensions.get(0);\n        for (String ext : extensions)\
    \ {\n            int strength = map.get(ext);\n            if (strength > strongest_extension.indexOf('.'))\
    \ {\n                strongest_extension = class_name + \".\" + ext;\n       \
    \     }\n        }\n        return strongest_extension;", "        // Write your\
    \ code here.\n        HashMap<String, Integer> count = new HashMap<>();\n    \
    \    for(int i=0; i<extensions.size(); i++) {\n            String key = extensions.get(i);\n\
    \            int value = count.getOrDefault(key, 0);\n            count.put(key,\
    \ value+1);\n        }\n        HashMap<Integer, String> result = new HashMap<>();\n\
    \        for(Map.Entry<String, Integer> entry : count.entrySet()) {\n        \
    \    int value = entry.getValue();\n            String key = entry.getKey();\n\
    \            if(value==0) {\n                continue;\n            }\n      \
    \      double strength = value / (double)extensions.size();\n            if(!result.containsKey(strength))\
    \ {\n                result.put(strength, key);\n            }\n        }\n  \
    \      return String.format(\"%s.%s\", class_name, result.get(Collections.max(result.keySet())));",
  "        String extension = null;\n        int strongest = 0;\n        String s\
    \ = class_name;\n        int c = 1;\n        List<String> strings = new ArrayList<String>(Arrays.asList(s));\n\
    \        StringBuilder sb = new StringBuilder();\n        for(String str : strings)\
    \ {\n            int num = 0;\n            for(int i=0;i<str.length();i++) {\n\
    \                if(Character.isUpperCase(str.charAt(i))) {\n                \
    \    num++;\n                }\n            }\n            for(int i=0;i<str.length();i++)\
    \ {\n                if(Character.isLowerCase(str.charAt(i))) {\n            \
    \        num--;\n                }\n            }\n            if(num > strongest)\
    \ {\n                strongest = num;\n                extension = str;\n    \
    \        }\n            if(num == strongest) {\n                sb.append(str);\n\
    \            }\n        }\n        return sb.toString()+\".\"+extension;", " \
    \       \n        // Initialize counters.\n        int sLen = class_name.length();\n\
    \        int capNum = 0;\n        int smNum = 0;\n        \n        // Initialize\
    \ variables.\n        int strongestStrength = Integer.MIN_VALUE;\n        \n \
    \       // Iterate over all extensions and check for their strengths.\n      \
    \  for(String str : extensions) {\n            \n            // Get the extension's\
    \ name.\n            int exLen = str.length();\n            \n            // Get\
    \ the extension's name first letters.\n            String cap = str.substring(0,\
    \ 1); \n            String sm = str.substring(1, 2); \n            \n        \
    \    // Increment the counters.\n            capNum += cap.toUpperCase().length();\n\
    \            smNum += sm.toLowerCase().length();\n        }\n        \n      \
    \  // Get the extension's strength.\n        // The strength should have the fraction\
    \ CAP - SM.\n        int strongestStrengthCap = capNum - smNum;\n        int strongestStrengthSm\
    \ = (smNum < capNum) ? smNum - capNum : capNum - smNum;\n        \n        //\
    \ Check if the extensions are the strongest extension.\n        if(strongestStrengthCap\
    \ > strongestStrength) {\n            strongestStrength = strongestStrengthCap;\n\
    \        }\n        else if(strongestStrengthSm > strongestStrength) {\n     \
    \       strongestStrength = strongestStrengthSm;\n        }\n        \n      \
    \  // Return the extension's name with the strength information.\n        return\
    \ class_name + \".\" + extensions.get(extensions.size() - 1) + \".\" + Integer.toString(strongestStrength);",
  "        ArrayList<String> extensions_arr = new ArrayList<>();\n        for(int\
    \ i=0; i<extensions.size(); i++){\n            extensions_arr.add(i, extensions.get(i));\n\
    \        }\n        ExtensionComparator cmp = new ExtensionComparator(class_name,\
    \ extensions_arr);\n        Collections.sort(extensions_arr, cmp);\n        ArrayList<Integer>\
    \ strengths = new ArrayList<>();\n        for(int i=0; i<extensions_arr.size();\
    \ i++){\n            strengths.add(i, extensions_arr.get(i).length() - extensions_arr.get(i).toLowerCase().length());\n\
    \        }\n        Collections.sort(strengths);\n        ArrayList<Integer> indexs\
    \ = new ArrayList<>();\n        for(int i=0; i<extensions_arr.size(); i++){\n\
    \            for(int j=0; j<strengths.size(); j++){\n                if(strengths.get(j)\
    \ > extensions_arr.get(i).length() - extensions_arr.get(i).toLowerCase().length()){\n\
    \                    indexs.add(j);\n                    break;\n            \
    \    }\n            }\n        }\n        for(int i=0; i<indexs.size(); i++){\n\
    \            if(strengths.get(indexs.get(i)) == strengths.get(indexs.get(i+1))){\n\
    \                return extensions_arr.get(indexs.get(i)).substring(0, class_name.length()+1);\n\
    \            }\n        }\n        return \"\";", "        Integer strength =\
    \ null;\n        \n        // Look for extensions with the same strength.\n  \
    \      extensions = extensions.stream().sorted().distinct().collect(Collectors.toList());\n\
    \        extensions.stream().forEach(extension -> {\n            char cap = class_name.charAt(0);\n\
    \            char sm = extension.charAt(0);\n            Integer extStrongest\
    \ = null;\n            \n            // Look for extensions that share the strength.\n\
    \            int strongestExtensionIndex = 0;\n            for (int i = 0; i <\
    \ extensions.size(); i++) {\n                char ex = extensions.get(i).charAt(0);\n\
    \                \n                // Ignore extensions that don't have uppercase\
    \ letters.\n                if (!isUpperCaseCap(ex)) continue;\n             \
    \   \n                // Ignore extensions that don't have lowercase letters.\n\
    \                if (!isLowerCaseCap(ex)) continue;\n                \n      \
    \          // Ignore extensions that don't share the strength.\n             \
    \   if (cap != ex) continue;\n                \n                String extensionStr\
    \ = extensions.get(i);\n                \n                Integer extensionCap\
    \ = Character.toUpperCase(extensionStr.charAt(0));\n                Integer extensionSm\
    \  = Character.toUpperCase(extensionStr.charAt(1));\n                \n      \
    \          if (extensionCap - extensionSm > extStrongest) {\n                \
    \    extStrongest = extensionCap - extensionSm;\n                    strongestExtensionIndex\
    \ = i;\n                }\n            }\n            \n            // Choose\
    \ the extension that comes first in the array list.\n            if (strength\
    \ == null || strength > extStrongest) {\n                strength = extStrongest;\n\
    \            }\n        });\n\n        // If the strength was undetermined, choose\
    \ the extension that comes first in the array list.\n        if (strength == null)\
    \ {\n            strength = extensions.get(0);\n        }\n\n        // Return\
    \ the desired format.\n        return class_name + \".\" + strength.toString();",
  "        // Your code here\n        Map<String, Integer> map = new HashMap<>();\n\
    \        for (String e : extensions) {\n            int count = map.getOrDefault(e,\
    \ 0) + 1;\n            map.put(e, count);\n        }\n        int min = Integer.MAX_VALUE;\n\
    \        String minExtension = null;\n        for (String e : extensions) {\n\
    \            if (map.get(e) < min)\n                minExtension = e;\n      \
    \  }\n        return class_name + minExtension;", "        if (extensions.isEmpty())\n\
    \            throw new IllegalArgumentException(\"The extensions cannot be empty.\"\
    );\n        SortedMap<Integer, String> extensions_map = new TreeMap<>();\n   \
    \     for (String ext : extensions)\n            extensions_map.put(ext.length(),\
    \ ext);\n        Set<Integer> values = new TreeSet<Integer>(extensions_map.keySet());\n\
    \        int min = values.first();\n        String strongest_ext = null;\n   \
    \     if (values.size() > 1)\n            strongest_ext = extensions_map.get(min);\n\
    \        if (strongest_ext != null)\n            return class_name + \".\" + strongest_ext;\n\
    \        int smallest_key = Integer.MAX_VALUE;\n        for (Integer key : values)\
    \ {\n            if (key < smallest_key)\n                smallest_key = key;\n\
    \        }\n        strongest_ext = extensions_map.get(smallest_key);\n      \
    \  if (strongest_ext != null)\n            return class_name + \".\" + strongest_ext;\n\
    \        throw new RuntimeException(\"No extension has the minimum size.\");",
  "        String strongest = extensions.get(0); // the most strength extension\n\
    \        for (int i = 1; i < extensions.size(); i++) {\n            if (extensions.get(i).equals(strongest))\
    \ {\n                continue;\n            }\n            int cap = strongest.length(),\
    \ sm = extensions.get(i).length();\n            if (cap - sm == 0) {\n       \
    \         strongest = extensions.get(i);\n            }\n        }\n        return\
    \ class_name + \".\" + strongest;", "        ArrayList<String> extension_list\
    \ = new ArrayList<String>();\n        extension_list.clear();\n        for (String\
    \ extension : extensions) {\n            extension_list.add(extension);\n    \
    \    }\n        Collections.sort(extension_list, new Comparator<String>() {\n\
    \            int compare(String o1, String o2) {\n                double a = 0,\
    \ b = 0, c = 0, d = 0;\n                for (int i = 0; i < o1.length(); i++)\
    \ {\n                    char c = o1.charAt(i);\n                    for (int\
    \ j = 0; j < o2.length(); j++) {\n                        if (i == j) {\n    \
    \                        if (Character.isUpperCase(c)) {\n                   \
    \             a++;\n                            } else if (Character.isLowerCase(c))\
    \ {\n                                b++;\n                            } else\
    \ {\n                                c++;\n                            }\n   \
    \                     } else {\n                            if (Character.isUpperCase(c))\
    \ {\n                                a++;\n                            } else\
    \ if (Character.isLowerCase(c)) {\n                                b++;\n    \
    \                        } else {\n                                c++;\n    \
    \                        }\n                            d++;\n               \
    \         }\n                    }\n                }\n                return\
    \ ((double) a) / ((double) c);\n            }\n        });\n        double strength\
    \ = extension_list.get(0).charAt(0) - extension_list.get(0).charAt(1);\n     \
    \   String extension_str = class_name + \".\" + extension_list.get((int) (strength\
    \ - 1));\n        return extension_str;", "        extensions = extensions.stream().sorted(Comparator.comparingInt(s\
    \ -> s.length() - s.length().replaceAll(\"(?i)([a-z])\", \"\").length())).collect(Collectors.toList());\n\
    \        return class_name + extensions.get(0);", "        Set<String> extension_set\
    \ = new HashSet<String>(extensions);\n        double strength = Double.POSITIVE_INFINITY;\n\
    \        String strongest_extension = null;\n        for (String extension : extensions)\
    \ {\n            String extension_with_name = class_name + \".\" + extension;\n\
    \            int lowercase_letters = extension_with_name.length() - extension_with_name.replaceAll(\"\
    [a-z]+\", \"\").length();\n            int uppercase_letters = extension_with_name.length()\
    \ - extension_with_name.replaceAll(\"[A-Z]+\", \"\").length();\n            double\
    \ extension_strength = lowercase_letters - uppercase_letters;\n            if\
    \ (strength < extension_strength) {\n                strength = extension_strength;\n\
    \                strongest_extension = extension_with_name;\n            }\n \
    \       }\n        return strongest_extension;", "        String strongest = null;\n\
    \        int strongest_strength = 0;\n        for (String extension : extensions)\
    \ {\n            int extension_strength = extension.matches(\"[A-Z]+\")\n    \
    \            ? extension.matches(\"[a-z]+\") ? extension.length() - extension.matches(\"\
    [A-Z]+\").length() - extension.matches(\"[a-z]+\").length()\n                \
    \    : -1\n                : -1;\n            if (strongest_strength >= extension_strength)\
    \ {\n                if (strongest == null) {\n                    strongest =\
    \ extension;\n                    strongest_strength = extension_strength;\n \
    \               } else if (extension_strength >= strongest_strength) {\n     \
    \               strongest = extension;\n                    strongest_strength\
    \ = extension_strength;\n                }\n            }\n        }\n       \
    \ return class_name + \".\" + strongest;", "        List<Extension> extensions_l\
    \ = new ArrayList<Extension>(extensions);\n        Extension longestExtension\
    \ = null;\n        for (Extension e : extensions_l) {\n            if (longestExtension\
    \ == null) {\n                longestExtension = e;\n            } else if (longestExtension.strength()\
    \ > e.strength()) {\n                longestExtension = e;\n            }\n  \
    \      }\n        return class_name + longestExtension.class_name();", "     \
    \   // Your code goes here\n        String strongest_extension = \"\";\n     \
    \   List<String> extensions_sorted = new ArrayList<String>(extensions);\n    \
    \    Collections.sort(extensions_sorted);\n        int max_value = -1;\n     \
    \   String max_extension = \"\";\n        for (int i = 0; i < extensions_sorted.size();\
    \ i++) {\n            String extension = extensions_sorted.get(i);\n         \
    \   if (extension.equalsIgnoreCase(class_name)) {\n                if (max_value\
    \ == -1) {\n                    max_value = i;\n                    max_extension\
    \ = extension;\n                } else {\n                    if (max_value <\
    \ i) {\n                        max_value = i;\n                        max_extension\
    \ = extension;\n                    }\n                }\n            }\n    \
    \    }\n        if (max_value == -1) {\n            strongest_extension = class_name;\n\
    \        } else {\n            strongest_extension = class_name + \".\" + max_extension;\n\
    \        }\n        return strongest_extension;", "        // Your code here\n\
    \        int smsm = 0;\n        int cap = 0;\n        for(String ext:extensions)\n\
    \            for(String s:ext.toUpperCase()){\n                if(cap<s.length()\
    \ && cap<s.length()) cap = s.length;\n                if(cap<s.length() && cap>smsm)\
    \ smsm = s.length;\n            }\n        int strength = cap-smsm;\n        String\
    \ strongest = class_name + \".\" + extensions.get(extensions.indexOfFirst(extensions.stream().filter(s\
    \ -> s.contains(class_name)).mapToInt(s->s.length()).max((i,j)->i-j)));\n    \
    \    if(strength == -1) \n            return strongest;\n        int max = 0;\n\
    \        for(String ext:extensions) {\n            int count = ext.length();\n\
    \            if(count>max) max = count;\n        }\n        int max2 = max;\n\
    \        for(String ext:extensions) {\n            int count = ext.length();\n\
    \            if(count>max2)\n                max2 = count;\n        }\n      \
    \  if(max2>max) \n            return strongest;\n        return StrongestExtension(class_name,\
    \ extensions.stream().filter(s -> s.contains(class_name)).sorted((a,b)->b.length()-a.length()).findFirst().get());",
  "        if (class_name == null || extensions == null || extensions.size() == 0)\
    \ {\n            return \"\";\n        }\n        double sum = 0.0;\n        int\
    \ capitals = 0;\n        int lowercases = 0;\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String ext = extensions.get(i);\n            char c = ext.charAt(0);\n\
    \            sum += (Character.isUpperCase(c) ? 1 : -1);\n            capitals\
    \ += (Character.isUpperCase(c) ? 1 : 0);\n            lowercases += (Character.isLowerCase(c)\
    \ ? 1 : 0);\n        }\n        double fraction = capitals - lowercases;\n   \
    \     if (sum == 0) {\n            fraction = 1.0;\n        }\n        if (fraction\
    \ == 0) {\n            return class_name;\n        }\n        double strength\
    \ = Math.sqrt(fraction);\n        int shortest = 0;\n        for (int i = 0; i\
    \ < extensions.size(); i++) {\n            String ext = extensions.get(i);\n \
    \           char c = ext.charAt(0);\n            double ext_strength = (Character.isUpperCase(c)\
    \ ? 1 : -1);\n            if (ext_strength == strength) {\n                shortest\
    \ = i;\n            } else if (ext_strength < strength) {\n                strength\
    \ = ext_strength;\n                shortest = i;\n            }\n        }\n \
    \       return class_name + \".\" + extensions.get(shortest);", "        \n  \
    \      Arrays.sort(extensions);\n        \n        double sum = 0;\n        int\
    \ index = -1;\n        \n        for (String extension : extensions) {\n     \
    \       int length = extension.length();\n            sum += (length / 2);\n \
    \           if (length == 1) {\n                index = 0;\n                break;\n\
    \            }\n        }\n        \n        return class_name + extensions.get(index)\
    \ + extensions.get(index).substring(1); // SErviNGSliCes", '        // Your code
    here', "        ArrayList<String> list = Arrays.asList(extensions);\n        ArrayList<String>\
    \ sorted_list = list.stream()\n                .sorted((x,y)-> x.length()-y.length())\n\
    \                .collect(Collectors.toList());\n\n        Object max;\n     \
    \   boolean found;\n        int max_index = 0;\n        for (String string : sorted_list)\
    \ {\n            try {\n                found = class_name.equals(string);\n \
    \           } catch (ClassNotFoundException e) {\n                throw new RuntimeException(e);\n\
    \            }\n            if (found) {\n                try {\n            \
    \        Class c = Class.forName(string);\n                    Object obj = c.newInstance();\n\
    \                    if (obj != null) {\n                        if (max == null)\
    \ {\n                            max = obj;\n                        } else {\n\
    \                            if (max.isAssignableFrom(obj.getClass())) {\n   \
    \                             max = obj;\n                            } else {\n\
    \                                max_index = list.indexOf(string);\n         \
    \                       break;\n                            }\n              \
    \          }\n                    }\n                } catch (InstantiationException\
    \ e) {\n                    throw new RuntimeException(e);\n                }\
    \ catch (IllegalAccessException e) {\n                    throw new RuntimeException(e);\n\
    \                } catch (SecurityException e) {\n                    throw new\
    \ RuntimeException(e);\n                } catch (ClassNotFoundException e) {\n\
    \                    throw new RuntimeException(e);\n                }\n     \
    \       }\n        }\n\n        String extension_name = null;\n        if (max\
    \ != null) {\n            extension_name = max.getClass().getName();\n       \
    \ }\n\n        return extension_name;", "        \n        //declare a map\n \
    \       Map<String, Integer> extension_strength = new HashMap<String, Integer>();\n\
    \        int min_extension_strength = Integer.MAX_VALUE;\n        \n        //loop\
    \ through extensions\n        for (String extension : extensions) {\n        \
    \    //split extension\n            String[] ext_arr = extension.split(\"_\");\n\
    \            int ext_strength = ext_arr[1].length() - ext_arr[0].length();\n \
    \           \n            //if min strength found then replace\n            if\
    \ (ext_strength < min_extension_strength) {\n                min_extension_strength\
    \ = ext_strength;\n                extension_strength.put(ext_arr[0], ext_strength);\n\
    \            }\n        }\n        \n        //find max strength \n        int\
    \ max_extension_strength = Integer.MIN_VALUE;\n        for (String key : extension_strength.keySet())\
    \ {\n            if (extension_strength.get(key) > max_extension_strength) {\n\
    \                max_extension_strength = extension_strength.get(key);\n     \
    \       }\n        }\n        \n        //return class name + extension with max\
    \ strength\n        return class_name + \".\" + max_extension_strength;", "  \
    \      // Create a HashMap to store extensions and their strength.\n        Map<String,\
    \ Integer> map = new HashMap<String, Integer>();\n        // Initialize extension\
    \ strength to -1\n        int strength = -1;\n        for (String ext : extensions)\
    \ {\n            // Get extension name and check if it exists in the hashmap.\n\
    \            String name = ext.substring(ext.lastIndexOf(\".\")+1);\n        \
    \    if (map.containsKey(name)) {\n                Integer strength2 = map.get(name);\n\
    \                if (strength2 > strength) {\n                    // Update the\
    \ strongest extension with the new value.\n                    strength = strength2;\n\
    \                }\n            } else {\n                // Add extension with\
    \ strength 0.\n                map.put(name, 0);\n            }\n        }\n \
    \       // If there are more than one extensions with the same strength, choose\
    \ the one that comes first\n        // alphabetically.\n        if (map.size()\
    \ > 1) {\n            Set<Map.Entry<String, Integer>> set = new HashSet<Map.Entry<String,\
    \ Integer>>(map.entrySet());\n            Iterator<Map.Entry<String, Integer>>\
    \ it = set.iterator();\n            while (it.hasNext()) {\n                if\
    \ (map.get(it.next().getKey()) == map.get(it.next().getValue())) {\n         \
    \           it.next();\n                }\n            }\n        }\n        //\
    \ If there are extensions whose strength is -1, choose the one that comes first.\n\
    \        if (map.containsKey(class_name) && map.get(class_name) == -1) {\n   \
    \         Iterator<Map.Entry<String, Integer>> it = map.entrySet().iterator();\n\
    \            while (it.hasNext()) {\n                if (it.next().getValue()\
    \ == -1) {\n                    return it.next().getKey();\n                }\n\
    \            }\n        }\n        // If there are no extensions whose strength\
    \ is -1, choose the first extension.\n        if (map.containsKey(class_name)\
    \ && map.get(class_name) == -1) {\n            return map.entrySet().iterator().next().getKey();\n\
    \        }\n        // The extension is still unknown\n        return class_name\
    \ + \".????\";", "        Set<String> exts_set = extensions.stream().map(e ->\
    \ e.replace(' ', '_')).collect(Collectors.toSet());\n        exts_set = exts_set.stream().map(String::toLowerCase).collect(Collectors.toSet());\n\
    \        double extensions_length = extensions.stream().mapToDouble(String::length).sum();\n\
    \        double length = class_name.length();\n        double total = 0;\n   \
    \     double fraction = 0;\n        int cap = 0, sm = 0;\n        int strength\
    \ = -1;\n        boolean same = true;\n        String strongest = null;\n    \
    \    for (String ext : exts_set) {\n            length = ext.length();\n     \
    \       cap = ext.toUpperCase().length();\n            sm = ext.toLowerCase().length();\n\
    \            fraction = cap - sm;\n            total += fraction;\n          \
    \  if (fraction > strength) {\n                strength = fraction;\n        \
    \        strongest = ext;\n            }\n        }\n        double total_length\
    \ = class_name.length();\n        boolean check = false;\n        for (String\
    \ ext : exts_set) {\n            length = ext.length();\n            cap = ext.toUpperCase().length();\n\
    \            sm = ext.toLowerCase().length();\n            fraction = cap - sm;\n\
    \            total += fraction;\n            if (fraction > strength) {\n    \
    \            check = true;\n            }\n            if (fraction < strength)\
    \ {\n                same = false;\n            }\n        }\n        if (total\
    \ > strength) {\n            if (same) {\n                strongest = strongest.replace('\
    \ ', '_');\n                for (int i = 0; i < class_name.lastIndexOf('.'); i++)\
    \ {\n                    strongest += class_name.substring(class_name.lastIndexOf('.')\
    \ + 1);\n                }\n                strongest += \".\" + strongest;\n\
    \                return strongest;\n            } else {\n                if (total\
    \ > extensions_length) {\n                    return strongest;\n            \
    \    } else {\n                    for (int i = 0; i < class_name.lastIndexOf('.');\
    \ i++) {\n                        strongest += class_name.substring(class_name.lastIndexOf('.')\
    \ + 1);\n                    }\n                    strongest += \".\" + strongest;\n\
    \                    return strongest;\n                }\n            }\n   \
    \     } else if (total < strength) {\n            return strongest;\n        }\
    \ else {\n            return class_name;\n        }", "        int cap = class_name.chars().filter(s\
    \ -> s >= 'A' && s <= 'Z').count();\n        int sm = class_name.chars().filter(s\
    \ -> s >= 'a' && s <= 'z').count();\n        if (cap == sm) {\n            int\
    \ max_strength = -1;\n            for(String extension : extensions) {\n     \
    \           int extcap = extension.chars().filter(s -> s >= 'A' && s <= 'Z').count();\n\
    \                int extsm = extension.chars().filter(s -> s >= 'a' && s <= 'z').count();\n\
    \                if (extcap - extsm > max_strength) {\n                    max_strength\
    \ = extcap - extsm;\n                }\n            }\n            return class_name\
    \ + \".\" + extensions.get(0);\n        }\n        return class_name + \".\";",
  "        HashMap<String, Integer> map = new HashMap<>();\n        for(String e:\
    \ extensions) {\n            int count = (e.length()+1);\n            for(int\
    \ i = 0; i < e.length(); i++)\n                count += (e.charAt(i)-'A'+1);\n\
    \            map.put(e, count);\n        }\n        int maxCount = 0;\n      \
    \  for(String key: map.keySet()) {\n            int count = map.get(key);\n  \
    \          if (count>maxCount) {\n                maxCount = count;\n        \
    \        String strKey = key;\n            }\n        }\n        \n        //\
    \ System.out.println(maxCount);\n        return class_name + \".\" + strKey;",
  "        long strongestExtension = 0;\n        String strongestExtensionName = null;\n\
    \        for (String extension : extensions) {\n            if (isStrongerThanStrongestExtension(extension,\
    \ class_name)) {\n                strongestExtension = Long.parseLong(extension.substring(0,\
    \ extension.length()-1));\n                strongestExtensionName = extension.substring(extension.length()-1,\
    \ extension.length());\n            }\n        }\n        if (strongestExtensionName\
    \ != null) {\n            return class_name + \".\" + strongestExtensionName;\n\
    \        } else {\n            return class_name + \".\" + strongestExtension;\n\
    \        }", "        int CAP = 0;\n        int SM = 0;\n\n        for (String\
    \ extension : extensions) {\n            int len = extension.length();\n     \
    \       for (int i = 0; i < len; i++) {\n                if (Character.isUpperCase(extension.charAt(i)))\
    \ {\n                    CAP++;\n                }\n                if (Character.isLowerCase(extension.charAt(i)))\
    \ {\n                    SM++;\n                }\n            }\n        }\n\
    \        if (CAP == SM) {\n            return class_name;\n        }\n       \
    \ else {\n            Double ratio = (double) CAP / SM;\n            int index\
    \ = ratio.intValue();\n            String extension = extensions.get(index);\n\
    \            return class_name + \".\" + extension;\n        }", "        List<String>\
    \ list = extensions;\n        Collections.sort(list, (x, y) -> Integer.compare(x.toUpperCase().length()\
    \ - y.toUpperCase().length(), 1));\n        for (String extension : list) {\n\
    \            String s = class_name + \".\" + extension;\n            try {\n \
    \               Class<?> clazz = Class.forName(s);\n                Constructor<?>\
    \ constructor = clazz.getConstructor();\n                Object instance = constructor.newInstance();\n\
    \                Method method = clazz.getMethod(\"strength\");\n            \
    \    double strength = Double.parseDouble(method.invoke(instance).toString());\n\
    \                return class_name + \".\" + extension;\n            } catch (Exception\
    \ ex) {\n                System.out.println(ex);\n            }\n        }\n \
    \       return \"<Error>\";", "        Set<String> extensions_set = extensions.stream().map(e\
    \ -> e.toLowerCase(Locale.ROOT)).collect(Collectors.toSet());\n        HashMap<String,\
    \ Integer> map = new HashMap<String, Integer>();\n        for(int i = 0; i < extensions_set.size();\
    \ i++) {\n            int val = extensions_set.contains(class_name.toLowerCase(Locale.ROOT)+\"\
    .\"+extensions.get(i).toLowerCase(Locale.ROOT));\n            map.put(extensions.get(i).toLowerCase(),\
    \ val);\n        }\n        double maxStrength = Double.MIN_VALUE;\n        String\
    \ result = null;\n        double maxStrengthKey = Double.MIN_VALUE;\n        String\
    \ maxStrengthKeyStr = null;\n        for(Entry<String, Integer> entry : map.entrySet())\
    \ {\n            int val = entry.getValue();\n            if(val > maxStrength)\
    \ {\n                maxStrength = val;\n                maxStrengthKey = entry.getKey();\n\
    \                maxStrengthKeyStr = entry.getKey();\n            }\n        }\n\
    \        if(maxStrengthKey >= maxStrength*100) {\n            result = maxStrengthKeyStr;\n\
    \        }\n        return result;", "        int CAP = class_name.chars().filter(Character::isUpperCase).count();\n\
    \        int SM = class_name.chars().filter(Character::isLowerCase).count();\n\
    \        if (CAP - SM == 0) {\n            return class_name;\n        }\n   \
    \     float strength = CAP - SM;\n        List<String> strongest = null;\n   \
    \     for (String str : extensions) {\n            int extension = str.chars().filter(Character::isUpperCase).count();\n\
    \            int other = str.chars().filter(Character::isLowerCase).count();\n\
    \            float fraction = extension - other;\n            if (strongest ==\
    \ null || fraction > strength) {\n                strongest = str;\n         \
    \       strength = fraction;\n            }\n        }\n        return class_name\
    \ + \".\" + strongest;", "        ArrayList<Integer> extensions_int = new ArrayList<>();\n\
    \        Arrays.stream(extensions).forEach(ext -> extensions_int.add(ext.length()));\n\
    \        Arrays.sort(extensions_int);\n        int min_extension = extensions_int.get(0);\n\
    \        ArrayList<String> extensions_strongest = new ArrayList<>();\n       \
    \ for (int i = 0; i < extensions_int.size(); i++) {\n            if (extensions_int.get(i)\
    \ == min_extension)\n                extensions_strongest.add(extensions.get(i));\n\
    \        }\n        Arrays.sort(extensions_strongest);\n        return class_name\
    \ + \".\" + extensions_strongest.get(0);", "        int CAP = 0;\n        int\
    \ SM = 0;\n        int strength = 0;\n\n        for (int i = 0; i < extensions.size();\
    \ i++) {\n            String extension = extensions.get(i);\n            for (int\
    \ j = 0; j < extension.length(); j++) {\n                char character = extension.charAt(j);\n\
    \                if (character >= 'A' && character <= 'Z') {\n               \
    \     CAP++;\n                }\n                else {\n                    SM++;\n\
    \                }\n            }\n            if (CAP - SM > strength) {\n  \
    \              strength = CAP - SM;\n            }\n        }\n\n        String\
    \ result = class_name;\n        if (strength > 0) {\n            result = result\
    \ + \".\" + extensions.get(0);\n            for (int i = 1; i < extensions.size();\
    \ i++) {\n                if (extensions.get(i).equalsIgnoreCase(extensions.get(0)))\
    \ {\n                    result = result + extensions.get(i);\n              \
    \  }\n            }\n        }\n        return result;", "        // Write your\
    \ code here\n        int CAP = 0;\n        int SM = 0;\n        ArrayList<Integer>\
    \ arr = new ArrayList<Integer>();\n        for (String ext : extensions) {\n \
    \           CAP = CAP + ext.length();\n            SM = SM + ext.toLowerCase().length();\n\
    \            arr.add(CAP - SM);\n        }\n        Collections.sort(arr);\n \
    \       String strongest = null;\n        int strongest_index = -1;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) == 0) {\n   \
    \             strongest = class_name + \".\" + extensions.get(i);\n          \
    \      strongest_index = i;\n            }\n        }\n        if (strongest_index\
    \ == -1) {\n            throw new RuntimeException(\"No extensions found!\");\n\
    \        }\n        return strongest;", "        Comparator<String> c = Comparator.comparing(s\
    \ -> s.replaceAll(\"[A-Z]\", \"\").length() - s.replaceAll(\"[a-z]\", \"\").length());\n\
    \        Optional<String> opt = extensions.stream()\n                .filter(\
    \ e -> e.equalsIgnoreCase(class_name) )\n                .map( e -> new AbstractMap.SimpleEntry<>(class_name,\
    \ e) )\n                .min( c );\n        System.out.println( opt );\n     \
    \   return opt.get();", "        \n        Set<String> strongest = new HashSet<String>();\n\
    \        for (int i = 0; i < extensions.size(); ++i) {\n            int c = class_name.codePointAt(i);\n\
    \            int s = class_name.codePointAt(i + 1);\n            int sc = class_name.codePointAt(i\
    \ + 2);\n            int sc0 = ((c - 'A') - (s - 'a'));\n            int sc1 =\
    \ ((c - 'a') - (s - 'A'));\n            int sc2 = ((c - 'C') - (s - 'c'));\n \
    \           int sc3 = ((c - 'C') - (s - 'C'));\n            int sc4 = ((c - 'e')\
    \ - (s - 'e'));\n            int sc5 = ((c - 'e') - (s - 'E'));\n            int\
    \ sc6 = ((c - 'i') - (s - 'i'));\n            int sc7 = ((c - 'I') - (s - 'I'));\n\
    \            int sc8 = ((c - 'n') - (s - 'n'));\n            int sc9 = ((c - 'N')\
    \ - (s - 'N'));\n            int sc10 = ((c - 'O') - (s - 'o'));\n           \
    \ int sc11 = ((c - 'o') - (s - 'O'));\n            int sc12 = ((c - 's') - (s\
    \ - 's'));\n            int sc13 = ((c - 't') - (s - 't'));\n            int sc14\
    \ = ((c - 'U') - (s - 'U'));\n            int sc15 = ((c - 'U') - (s - 'U'));\n\
    \            int sc16 = ((c - 'u') - (s - 'u'));\n            int sc17 = ((c -\
    \ 'y') - (s - 'y'));\n            int sc18 = ((c - 'Y') - (s - 'Y'));\n      \
    \      int sc19 = ((c - 'Z') - (s - 'Z'));\n            int sc20 = ((c - 'Z')\
    \ - (s - 'Z'));\n            int sc21 = (sc20 - sc0 - sc1 - sc2 - sc3 - sc4 -\
    \ sc5 - sc6 - sc7 - sc8 - sc9 - sc10 - sc11 - sc12 - sc13 - sc14 - sc15 - sc16\
    \ - sc17 - sc18 - sc19 - sc20 - sc21);\n            int sc22 = (sc20 - sc1 - sc2\
    \ - sc3 - sc4 - sc5 - sc6 - sc7 - sc8 - sc9 - sc10 - sc11 - sc12 - sc13 - sc14\
    \ - sc15 - sc16 - sc17 - sc18 - sc19 - sc20 - sc21);\n            strongest",
  "        int i, j, k;\n        double cap, sm, strength;\n        String name, ext;\n\
    \        for (i = 0; i < extensions.size(); i++) {\n            name = class_name\
    \ + \".\" + extensions.get(i);\n            for (j = 0; j < extensions.size();\
    \ j++) {\n                ext = class_name + \".\" + extensions.get(j);\n    \
    \            for (k = 0; k < extensions.size(); k++) {\n                    name\
    \ = class_name + \".\" + extensions.get(k);\n                    for (l = 0; l\
    \ < extensions.size(); l++) {\n                        name = class_name + \"\
    .\" + extensions.get(l);\n                        cap = cap_number(ext);\n   \
    \                     sm = sm_number(ext);\n                        strength =\
    \ cap - sm;\n                        if (strength > 0) {\n                   \
    \         break;\n                        }\n                    }\n         \
    \       }\n            }\n        }\n        return class_name + \".\" + extensions.get(extensions.size()\
    \ - 1);"]
stop_tokens:
- "\n    }\n"
