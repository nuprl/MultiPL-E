name: HumanEval_108_count_nums
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function count_nums which takes an array array list\
  \ of integers and returns\n    // the number of elements which has a sum of digits\
  \ > 0.\n    // If a number is negative, then its first signed digit will be negative:\n\
  \    // e.g. -123 has signed digits -1, 2, and 3.\n    // >>> countNums((new ArrayList<Long>(Arrays.asList())))\n\
  \    // (0l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)11l, (long)-11l))))\n    // (1l)\n    // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)1l, (long)2l))))\n    // (3l)\n    public static long countNums(ArrayList<Long>\
  \ arr) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(countNums((new\
  \ ArrayList<Long>(Arrays.asList()))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
  \ (long)-2l, (long)0l)))) == (0l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)1l, (long)2l, (long)-2l, (long)3l, (long)4l, (long)5l)))) == (6l));\n  \
  \  assert(countNums((new ArrayList<Long>(Arrays.asList((long)1l, (long)6l, (long)9l,\
  \ (long)-6l, (long)0l, (long)1l, (long)5l)))) == (5l));\n    assert(countNums((new\
  \ ArrayList<Long>(Arrays.asList((long)1l, (long)100l, (long)98l, (long)-7l, (long)1l,\
  \ (long)-1l)))) == (4l));\n    assert(countNums((new ArrayList<Long>(Arrays.asList((long)12l,\
  \ (long)23l, (long)34l, (long)-45l, (long)-56l, (long)0l)))) == (5l));\n    assert(countNums((new\
  \ ArrayList<Long>(Arrays.asList((long)0l, (long)1l)))) == (1l));\n    assert(countNums((new\
  \ ArrayList<Long>(Arrays.asList((long)1l)))) == (1l));\n    }\n\n}\n"
completions: ['        return arr.stream().filter(i -> i%10L > 0l).count();', "  \
    \      Set<Long> nums = new HashSet<>();\n        for (Long l : arr) {\n     \
    \       if (l > 0) nums.add(l);\n        }\n        return nums.size();", "  \
    \      long nums = 0;\n        for (Long l : arr) {\n            if (l > 0) nums++;\n\
    \            if (l < 0l) nums += l / 10;\n        }\n        return nums;", " \
    \       Long sumOfFirstDigits = arr.get(0).longValue();\n        Long sumOfSecondDigits\
    \ = arr.get(1).longValue();\n        if (sumOfFirstDigits < 0 || sumOfSecondDigits\
    \ < 0)\n            return 1l;\n        \n        long firstSignedDigit = arr.get(0).longValue()\
    \ % 10;\n        long secondSignedDigit = arr.get(1).longValue() % 10;\n\n   \
    \     if (firstSignedDigit == secondSignedDigit && firstSignedDigit > 0)\n   \
    \         return 1l;\n        else if (firstSignedDigit == secondSignedDigit &&\
    \ firstSignedDigit < 0)\n            return (-firstSignedDigit + 1l) % 10;\n \
    \       else if (firstSignedDigit < secondSignedDigit)\n            return (firstSignedDigit\
    \ + 1l) % 10;\n        else\n            return 0;", "        // Write your code\
    \ here\n        int count = 0;\n        for (long i : arr) {\n            if (i\
    \ >= 0) {\n                count++;\n            } else {\n                count\
    \ += Math.abs(i / 10);\n            }\n        }\n        return count;", "  \
    \      long sum = 0;\n        for (Long l : arr) {\n            sum += Math.signum(l);\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (long num\
    \ : arr) {\n            if (num > 0) {\n                sum += Math.abs(num);\n\
    \            }\n            if (num < 0) {\n                sum += num * (num\
    \ / Math.abs(num));\n            }\n        }\n        return sum;", "       \
    \ int result = 0;\n        for (long l : arr) {\n            int digitSum = sumDigits(l);\n\
    \            if (digitSum > 0) {\n                result++;\n            }\n \
    \       }\n        return (long) result;", "        if (arr.isEmpty()) {\n   \
    \         return 0l;\n        }\n        long result = 0;\n        long digit\
    \ = 0;\n        boolean negative = false;\n        long positiveNumber = 0;\n\
    \        long previousSum = 0;\n        for (int i = 0; i < arr.size() - 1; i++)\
    \ {\n            positiveNumber += arr.get(i);\n            if (positiveNumber\
    \ < 0) {\n                negative = true;\n                positiveNumber +=\
    \ 1;\n            }\n            if (positiveNumber > Integer.MAX_VALUE) {\n \
    \               System.out.println(\"Number too big to be converted to int\");\n\
    \                return 0l;\n            }\n            previousSum = positiveNumber;\n\
    \        }\n        if (previousSum < Integer.MIN_VALUE) {\n            System.out.println(\"\
    Number too small to be converted to int\");\n            return 0l;\n        }\n\
    \        previousSum -= 1;\n        positiveNumber += 1;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            positiveNumber += arr.get(i);\n     \
    \       digit = positiveNumber % 10;\n            if (digit < 10) {\n        \
    \        result += digit;\n            }\n            positiveNumber /= 10;\n\
    \        }\n        if (negative) {\n            return -result;\n        }\n\
    \        return result;", "        if (arr.size() == 0) return 0L;\n        if\
    \ (arr.size() == 1) return 1L;\n        long sum = 0L;\n        for (int i = 0;\
    \ i < arr.size(); i++) {\n            Long n = arr.get(i);\n            int digits\
    \ = n % 10;\n            sum += digits > 0 ? digits : -(digits + 1);\n       \
    \ }\n        return sum;", "        if (arr.size() == 0) {\n            return\
    \ 0L;\n        }\n        Long sum = arr.get(0);\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            Long val = arr.get(i);\n            if (val.signum()\
    \ == 1) {\n                sum *= 10;\n                sum += val;\n         \
    \   } else {\n                sum += val;\n            }\n        }\n        return\
    \ sum.signum() == 1 ? 1L : 3L;", "        Long sum = 0L;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            sum += arr.get(i);\n        }\n     \
    \   return sum;", "        long sum = 0;\n        for (Long i : arr) {\n     \
    \       sum += i;\n        }\n        return sum;", "        long result = 0l;\n\
    \        for (long i : arr) {\n            result += Math.abs(i);\n        }\n\
    \        return result;", "        // Return the number of elements which has\
    \ a sum of digits > 0.\n        // If a number is negative, then its first signed\
    \ digit will be negative:\n        // e.g. -123 has signed digits -1, 2, and 3.\n\
    \        // >>> countNums((new ArrayList<Long>(Arrays.asList())))\n        //\
    \ (0l)\n        // >>> countNums((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)11l, (long)-11l))))\n        // (1l)\n        // >>> countNums((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)1l, (long)2l))))\n        // (3l)\n        long ans = 0;\n        for\
    \ (long i : arr) {\n            if (i > 0) {\n                long firstSum =\
    \ 0;\n                for (long j : arr) {\n                    firstSum += j;\n\
    \                    if (firstSum > i) {\n                        break;\n   \
    \                 }\n                }\n                if (firstSum > i) {\n\
    \                    ans += 1;\n                }\n            }\n        }\n\
    \        return ans;", '        // TODO Implement this function', "        //\
    \ Your code here\n        long count = Long.MIN_VALUE;\n        for (Long v :\
    \ arr) {\n            if (v > 0) {\n                long n = Math.abs(v);\n  \
    \              for (int i = Integer.MIN_VALUE; i <= n; i++) {\n              \
    \      if (n % i == 0) {\n                        count += n - i;\n          \
    \          }\n                }\n            } else {\n                int n =\
    \ Integer.MIN_VALUE;\n                if (v < 0) {\n                    n = Math.abs(v);\n\
    \                }\n                for (int i = -n; i <= n; i++) {\n        \
    \            if (v & 1 == i) {\n                        count += v;\n        \
    \            }\n                }\n            }\n        }\n        return count;",
  "        if (arr.size() == 0) return 0L;\n        long firstNegative = arr.stream().map(l\
    \ -> -l).min(Long::compareTo).get();\n        if (firstNegative > 0) return 0L;\n\
    \        return arr.stream().filter(l -> l > 0).count();", "        long sum =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            int digit =\
    \ arr.get(i) - Math.abs(arr.get(i) % 10);\n            sum += Math.abs(digit);\n\
    \        }\n        return sum;", "        int sum = 0;\n        for (int i =\
    \ 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n            sum\
    \ += num;\n            if (sum < 0) {\n                sum = sum + 10 * (Math.abs(num));\n\
    \            }\n        }\n        return sum;", "        // if arr is empty or\
    \ null, return 0\n        if (arr.size() == 0 || arr.isEmpty()) return 0;\n  \
    \      // arr contains negative and positive nums\n        Iterator<Long> i =\
    \ arr.iterator();\n        while (i.hasNext()) {\n            Long l = i.next();\n\
    \            long res = 0;\n            while (l > 0) {\n                res +=\
    \ l % 10;\n                l /= 10;\n            }\n            if (res > 0) return\
    \ res + 1;\n        }\n        return 0;", "        return arr.stream().filter((item)\
    \ -> item.longValue() > 0)\n            .mapToLong((item) -> item.intValue()).count();",
  "        long result = 0;\n        for (Long value : arr) {\n            long sum\
    \ = 0;\n            for (int i = arr.size(); i-- > 0;)\n                sum +=\
    \ Math.abs(value.get(i));\n            if (sum > 0) {\n                result++;\n\
    \            }\n        }\n        return result;", "        long nums = 0;\n\
    \        for (Long n : arr)\n            if (n > 0)\n                nums += (n\
    \ - 1) / 10;\n                \n        return nums;", "        Long[] arr2 =\
    \ arr.toArray(new Long[arr.size()]);\n        int i = 0;\n        int num = 0;\n\
    \        while (i < arr2.length) {\n            if (arr2[i] < 0) {\n         \
    \       arr2[i] = arr2[i] - 10 * Math.abs(arr2[i]);\n            }\n         \
    \   long l = arr2[i];\n            num += l;\n            arr2[i] = 0;\n     \
    \       i++;\n        }\n        return num;", "        // return 0 if the array\
    \ is empty or the array contains only zeros\n        if (arr.isEmpty() || arr.stream().allMatch(i\
    \ -> i == 0) || arr.stream().anyMatch(i -> i < 0))\n            return 0;\n\n\
    \        // count the numbers with non-negative sum\n        long count = 0;\n\
    \        for (Long i : arr) {\n            long sum = 0;\n            while (i\
    \ != 0) {\n                sum += i % 10;\n                i /= 10;\n        \
    \    }\n            if (sum > 0) {\n                count++;\n            }\n\
    \        }\n\n        return count;", "        // Solution 1: Using Collection.stream()\
    \ to stream through the array, keeping track\n        // of how many times each\
    \ digit is found, and then summing all the times\n        return arr.stream()\n\
    \            .collect(Collectors.groupingBy(l -> l.get(0)))\n            .entrySet()\n\
    \            .stream()\n            .filter(e -> e.getValue() > 0)\n         \
    \   .mapToLong(e -> e.getValue())\n            .sum();\n\n        // Solution\
    \ 2: Using a variable to keep track of how many times each digit is found\n  \
    \      // and using for loop to iterate through the array\n        // (keep in\
    \ mind this requires the array to have at least two elements)\n        long sum\
    \ = 0;\n        long count = 0;\n        long digit = 0;\n        for(Long num\
    \ : arr) {\n            if(num > 0) {\n                digit = num % 10;\n   \
    \             sum += digit;\n                count += 1;\n            }\n    \
    \    }\n        return sum * count;", "        if (arr.size() == 0) return 0;\n\
    \n        // Find all the negative numbers in the array\n        ArrayList<Long>\
    \ negatives = new ArrayList<>();\n        for (long i : arr) {\n            if\
    \ (i < 0l) negatives.add(i);\n        }\n\n        // Count the number of positive\
    \ numbers in the array\n        long count = 0;\n        for (long i : arr) count\
    \ += (i > 0) ? 1 : 0;\n\n        // Calculate the number of negative numbers that\
    \ have a sum of digits > 0\n        long negativeCount = 0;\n        for (long\
    \ i : negatives) {\n            long sum = 0;\n            for (int j = 0; j <\
    \ 6; j++) {\n                sum += (i > 0) ? (i % 10 + i * j) : 0l; // Add the\
    \ number of digits to the sum\n                i /= 10; // Remove the single digit\
    \ for the next iteration\n            }\n            if (sum > 0l) negativeCount++;\n\
    \        }\n\n        // Combine both numbers and return\n        return count\
    \ - negativeCount;", "        long count = 0;\n        for(long num : arr) {\n\
    \            if(num > 0) {\n                for(int i = Math.abs(num); i > 0;\
    \ i--) {\n                    count += Math.pow(i, num);\n                }\n\
    \            }\n            else if(num < 0) {\n                for(int i = Math.abs(num);\
    \ i > 0; i--) {\n                    count += Math.pow((-i)-1, num);\n       \
    \         }\n            }\n        }\n        return count;", "        if (arr.isEmpty())\n\
    \            return 0;\n        long n = 0;\n        long first = (long) arr.get(0);\n\
    \        if (first < 0) return 0;\n        for (Long d : arr)\n            n +=\
    \ first * 10 + d;\n        return n;", "        long ans = 0;\n        for (Long\
    \ num : arr) {\n            if (num < 0) num = num * -1;\n            if (isSumOfDigitsGreaterThanZero(num))\
    \ {\n                ans += 1;\n            }\n        }\n        return ans;",
  "        int result = 0;\n        for (int num : arr) {\n            if (num < 0)\
    \ {\n                num *= -1;\n                result += num / 10l;\n      \
    \          num %= 10l;\n            }\n            while (num > 0) {\n       \
    \         num /= 10;\n                result ++;\n            }\n        }\n \
    \       return result;", "        Set<Long> nums = new HashSet<Long>();\n    \
    \    for (Long n : arr) {\n            if (isSigned(n))\n                nums.add(n);\n\
    \        }\n        return nums.size();", "        // write your solution here\n\
    \        return 0;", "        // Write your code here\n        long result = 0;\n\
    \        for (Long l : arr) {\n            result += countDigits(l);\n       \
    \ }\n        return result;", "        if (arr.isEmpty())\n            return\
    \ 0L;\n        long sum = 0, sumDigit = -1, i = 0;\n        boolean isNegative\
    \ = true;\n        while (i < arr.size()) {\n            if (isNegative)\n   \
    \             sumDigit *= -1L;\n            sum += arr.get(i);\n            isNegative\
    \ = i < arr.size() - 1 && !arr.get(i).equals(arr.get(i + 1));\n            i++;\n\
    \        }\n        sum += sumDigit;\n        return sum;", "        long sum\
    \ = 0;\n        for (long n : arr) {\n            sum += Math.abs(n);\n      \
    \  }\n        return sum;", "        long result = 0;\n        for (long n : arr)\
    \ {\n            result += (int) Math.abs(n);\n        }\n        return result;",
  "        long nums = 0;\n        for (Long num : arr) {\n            final long\
    \ sum = num.longValue();\n            for (long i = -1000; i <= 1000; i++) {\n\
    \                if (sum % i == 0) {\n                    nums++;\n          \
    \          break;\n                }\n            }\n        }\n        return\
    \ nums;", "        long count = 0;\n        for (Long num : arr) {\n         \
    \   count += (int) Math.pow(10, arr.indexOf(num) + 1) - 1;\n        }\n      \
    \  return count;", "        long count = 0;\n        for (Long l : arr) {\n  \
    \          count = count + (l * l);\n        }\n        return count;", "    \
    \    // Use Long.MIN_VALUE as a sentinel.\n        Long min_val = Long.MIN_VALUE;\n\
    \        Long result = 0l;\n        for (Long value : arr) {\n            result\
    \ += value;\n            if (result < min_val) {\n                min_val = result;\n\
    \            }\n        }\n        return min_val;", "        long result = 0;\n\
    \        long firstSignedNum = Long.MIN_VALUE;\n        for (Long l : arr) {\n\
    \            long num = getNumber(l);\n            if (num > 0) {\n          \
    \      long newSum = getSignedNum(num);\n                if (newSum < 0) {\n \
    \                   newSum = -newSum;\n                    firstSignedNum = -firstSignedNum;\n\
    \                }\n                result = result + (firstSignedNum - newSum);\n\
    \                firstSignedNum = firstSignedNum + newSum;\n            } else\
    \ {\n                result = result + firstSignedNum;\n            }\n      \
    \  }\n        return result;", "        // Write your code here\n        long\
    \ result = 0;\n        for (Long i : arr) {\n            result += i;\n      \
    \  }\n        if (result > 0) {\n            return result;\n        }\n     \
    \   // first element is negative\n        long firstNum = arr.get(0);\n      \
    \  long firstSignedDigit = firstNum < 0 ? firstNum % Math.abs(firstNum) : firstNum;\n\
    \        long sign = 1;\n        for (int i = 1; i < arr.size(); i++) {\n    \
    \        long num = arr.get(i);\n            long signedDigit = num < 0 ? num\
    \ % Math.abs(num) : num;\n            long newSign = signedDigit < 0 ? sign *\
    \ -1 : sign;\n            if (signedDigit >= 0) {\n                result += newSign\
    \ * firstSignedDigit;\n            } else {\n                result -= firstSignedDigit\
    \ * newSign;\n            }\n            firstSignedDigit = sign * firstSignedDigit;\n\
    \            sign = newSign;\n        }\n        return result;", "        long\
    \ sum = 0;\n        long count = 0;\n        for(long x: arr) {\n            sum\
    \ = sum + x;\n            count++;\n            if(sum > 0) break;\n        }\n\
    \        return count;", "        long ans = 0;\n        if (arr.size() < 3) return\
    \ 0;\n        long sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n\
    \            if (i == 0) continue;\n            if (arr.size() > 3) {\n      \
    \          sum = sum * 10 + ((long) arr.get(i) - arr.get(i-1));\n            }\
    \ else {\n                sum = sum * 10 + arr.get(i) - arr.get(i-1);\n      \
    \      }\n            if (sum > 0) {\n                ans = ans + 1;\n       \
    \     }\n        }\n        return ans;", "        long sum = 0;\n        for\
    \ (long l : arr) {\n            sum += l;\n            if (sum < 0) {\n      \
    \          sum += getPositiveFirstSignedDigit(sum);\n            }\n        }\n\
    \        return sum;", "        // Convert array to array of digits (not including\
    \ sign of number).\n        Long[] digits = arr.stream().map(Math::abs).toArray();\n\
    \        // Remove all negative numbers.\n        ArrayList list = new ArrayList(arr.size());\n\
    \        for (long value : arr) {\n            if (value > 0) {\n            \
    \    list.add(value);\n            }\n        }\n        // Find first negative\
    \ number with first digit negative.\n        long firstNegative = 0;\n       \
    \ for (int i = 0; i < list.size(); i++) {\n            if (list.get(i) < 0) {\n\
    \                firstNegative = list.get(i);\n                break;\n      \
    \      }\n        }\n        // Count the number of negative numbers with a non-zero\
    \ first digit.\n        long negativeCount = 0;\n        for (int i = 0; i < list.size();\
    \ i++) {\n            if (list.get(i) < 0 && list.get(i) >= firstNegative) {\n\
    \                negativeCount++;\n            }\n        }\n        // Return\
    \ result.\n        return firstNegative + (long) Math.pow(10, digits.length -\
    \ negativeCount);", "        long count = 0l;\n        for (Long i : arr) {\n\
    \            count += i % 10;\n        }\n        return count;", "        long\
    \ count = 0;\n        if (arr.isEmpty())\n            return 0;\n        long\
    \ sum = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            sum +=\
    \ arr.get(i);\n            if (sum < 0) {\n                sum += 10;\n      \
    \      }\n        }\n        for (int i = 0; i < arr.size(); i++) {\n        \
    \    int digit = (int)Math.abs(arr.get(i) % 10);\n            if (digit >= 0 &&\
    \ digit <= 9) {\n                count++;\n            }\n        }\n        return\
    \ count;", "        long res = 0;\n        arr.stream().map(i -> {\n         \
    \   int sign = i >= 0 ? 1 : -1;\n            i = Math.abs(i);\n            return\
    \ sign * (int)Math.floorDiv(i * Math.pow(10, arr.size()), 10) + arr.size(); //\
    \ If negative then first signed digit will be negative\n        }).filter(i ->\
    \ i >= 0).forEach(i -> {\n            int count = 0;\n            while (i !=\
    \ 0) {\n                i /= 10;\n                ++count;\n            }\n  \
    \          res = (res * 10) + count;\n        });\n        return res;", "   \
    \     int count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     int sum = 0;\n            for (int j = 0; j < arr.get(i).intValue(); j++)\
    \ {\n                sum += j;\n            }\n            if (sum > 0) {\n  \
    \              count++;\n            }\n        }\n        return count;", " \
    \       long count = 0;\n        for(long l : arr) {\n            if(l < 0)\n\
    \                l -= (long)(Math.pow(10, (int) Math.floor(Math.log10(l))) - 1);\n\
    \            if(l > 0)\n                count += l;\n        }\n        return\
    \ count;", "        long res = 0;\n        for (Long e : arr)\n            if\
    \ (e > 0)\n                res += e;\n        return res;", "        long count\
    \ = 0;\n        for(long l : arr) {\n            int sd = Math.max(Math.abs(l\
    \ % 10), 0);\n            count += sd * Math.pow(10, sd - 1);\n        }\n   \
    \     return count;", "        long cnt = 0;\n        for (Long l : arr) {\n \
    \           if (Math.abs(l) > 0) cnt += Math.abs(l);\n        }\n        return\
    \ cnt;", "        if (arr == null)\n            throw new RuntimeException(\"\
    The input list must not be null\");\n\n        // We are going to use a LongStream\
    \ to iterate over the array\n        // And use flatMap to transform the Long\
    \ elements into Integer\n        return arr.stream().flatMapToInt(i -> {\n   \
    \         if (i < 0)\n                i = -i;\n            return Arrays.stream(i.toString().split(\"\
    \")).filter(d -> Long.valueOf(d.trim()) > 0).count();\n        }).sum();", " \
    \       int count = 0;\n        for (Long l : arr) {\n            if (l > 0) count++;\n\
    \        }\n        return count;", "        // write your solution here\n   \
    \     long sum = 0;\n        for (long num : arr) {\n            sum += num;\n\
    \        }\n        return sum;", "        return arr.stream().filter(x -> !x.isNegative())\n\
    \                         .filter((long) x -> (long)Math.abs(x) % 10 > 0).count();",
  "        // Complete the function here.\n        int len = arr.size();\n       \
    \ long sum = 0;\n        for(long l : arr) {\n            sum += Math.abs(l %\
    \ 10);\n        }\n        return sum;", "        long sum = 0;\n        for (Long\
    \ l : arr) {\n            sum += l;\n        }\n        return sum;", "      \
    \  long result = 0l;\n        for (Long num : arr)\n            if (num > 0)\n\
    \                result = Math.max(result, Integer.parseInt(String.valueOf(num)));\n\
    \        return result;", "        long ret = 0;\n        for (Long num : arr)\n\
    \            ret += Math.abs(num);\n        return ret;", "        long count\
    \ = 0;\n        if (arr.isEmpty()) {\n            System.out.println(\"Empty array\"\
    );\n            return count;\n        }\n        long sum = 0;\n        for (long\
    \ l : arr) {\n            sum += l;\n        }\n        if (sum < 0) {\n     \
    \       sum += Math.pow(10, arr.size() - 1) * -1;\n        }\n        if (sum\
    \ > 0) {\n            sum += Math.pow(10, arr.size() - 1);\n            count\
    \ = 1;\n        } else {\n            count = 0;\n        }\n        return count;",
  "        if (arr.isEmpty()) return 0;\n        int sum = 0;\n        long num =\
    \ arr.get(0);\n        boolean negative = num < 0;\n        long firstDigit =\
    \ num % 10;\n        for (long i : arr) {\n            sum += Math.abs(i - firstDigit);\n\
    \        }\n        return sum;", "        if(arr.size() == 0) return 0L;\n  \
    \      long sum = 0L;\n        for(long num : arr) sum += num;\n        return\
    \ sum;", "        return IntStream.range(0, arr.size())\n                .filter(i\
    \ -> IntStream.range(0,9).allMatch(j -> (long)arr.get(i) % (long)Math.pow(10,\
    \ j) >= 0))\n                .count();", "        Set<Long> s = new HashSet<Long>();\n\
    \        // loop over list\n        for (Long i : arr) {\n            // check\
    \ sum\n            checkSum(s, i);\n        }\n        // return the count\n \
    \       return s.size();", "        long sum = 0;\n        for (long l : arr)\
    \ {\n            long sumOfDigits = 0;\n            if (l < 0) {\n           \
    \     l = -l;\n                sumOfDigits += l;\n            }\n            while\
    \ (l > 0) {\n                sumOfDigits += l % 10;\n                l /= 10;\n\
    \            }\n            if (sumOfDigits > 0) {\n                sum++;\n \
    \           }\n        }\n        return sum;", "        long res = 0;\n     \
    \   for (long num : arr) {\n            res += Math.abs(num) % 10;\n        }\n\
    \        return res;", "        // use Streams to count the digits of every number\
    \ in the array\n        return arr.stream()\n            .filter(x -> x >= 0)\
    \ // filter to keep only positive numbers\n            .map(x -> x % 10)\n   \
    \         .distinct() // remove duplicates\n            .count();", "        long\
    \ sum = 0;\n        for (long l : arr) {\n            sum += Math.abs(l);\n  \
    \      }\n        return sum;", "        long count = 0;\n        LongStream s\
    \ = arr.stream();\n        if (s.count() > 0) {\n            while (s.sum() >\
    \ 0) {\n                long num = s.sum();\n                count += num / 10;\n\
    \                num = num % 10;\n                while (num > 0) {\n        \
    \            long first = num % 10;\n                    if (first > 0)\n    \
    \                    count += 1;\n                    num = num / 10;\n      \
    \          }\n            }\n        }\n        return count;", "        // TODO:\
    \ Write code here.\n        return 0;", "        long count = 0;\n        for\
    \ (Long x : arr) {\n            if (x > 0) {\n                for (long xx = x;\
    \ xx > 0; xx /= 10) {\n                    if (xx % 10 == 0) {\n             \
    \           ++count;\n                    }\n                }\n            }\n\
    \        }\n        return count;", "        if (arr.isEmpty()) throw new IllegalArgumentException();\n\
    \        long sum = 0, negSum = 0, negNums = 0;\n        arr.stream()\n      \
    \      .map(i -> {\n                sum += i;\n                negSum += Math.abs(i);\n\
    \                negNums += i / Math.pow(10, (int)Math.ceil(Math.log10(i)));\n\
    \                return i;\n            })\n            .filter(i -> i >= 0)\n\
    \            .count();\n        return negNums + negSum;", "        return arr.stream()\n\
    \                .filter(e -> e > 0)\n                .collect(Collectors.toList()).size();",
  '        return arr.stream().filter(x -> Math.abs(x) > 0).count();', "        if\
    \ (arr.size() < 1) return 0l;\n        Long[] arr = arr.toArray(new Long[arr.size()]);\n\
    \        long ans = 1L;\n        for (Long v : arr) {\n            ans *= v;\n\
    \        }\n        return ans;", "        if (arr.isEmpty()) {\n            return\
    \ 0l;\n        }\n        long ans = 0;\n        for (int i = 0; i < arr.size()\
    \ - 1; i++) {\n            if (arr.get(i) > 0) {\n                long sum = 0;\n\
    \                for (int j = i; j < arr.size(); j++) {\n                    if\
    \ (arr.get(j) > 0) {\n                        sum += arr.get(j);\n           \
    \         }\n                }\n                if (sum > 0) {\n             \
    \       ans += (sum * 10 + i) / 10;\n                }\n            }\n      \
    \  }\n        if (arr.size() > 1) {\n            ans += (arr.get(arr.size() -\
    \ 1) * 10 + arr.size()) / 10;\n        }\n        return ans;", "        long\
    \ ret = 0;\n        for (int i = 0; i < arr.size(); i++) {\n            long sum\
    \ = arr.get(i);\n            if (sum < 0)\n                sum = -sum;\n     \
    \       for (int j = 0; j < sum; j++)\n                ret++;\n        }\n   \
    \     return ret;", "        // Write your code here\n        long result = 0L;\n\
    \        if (arr.size() > 0) {\n            long positiveNum = arr.get(0);\n \
    \           for (int i = 1; i < arr.size(); i++) {\n                long num =\
    \ arr.get(i);\n                if (num > positiveNum) {\n                    result\
    \ += Math.abs(num - positiveNum);\n                    positiveNum = num;\n  \
    \              }\n            }\n        }\n        return result;", "       \
    \ long count = 1;\n        for (Long l : arr) {\n            long sum = 0;\n \
    \           while (l != 0) {\n                sum += l % 10;\n               \
    \ l = l / 10;\n            }\n            if (sum > 0) count++;\n        }\n \
    \       return count;", "        if (arr.isEmpty())\n            return 0;\n \
    \       int count = 0;\n        for (long i : arr) {\n            count += count_nums(i,\
    \ new ArrayList<Long>());\n        }\n        return count;", "        long cnt\
    \ = 0;\n        for (Long i : arr) {\n            long d = i % 10;\n         \
    \   if (d > 0) {\n                d += 9 - d;\n            }\n            if (d\
    \ >= 0) {\n                cnt += d;\n            }\n        }\n        return\
    \ cnt;", "        // Convert each number from arr into a string, and count the\
    \ number of digits in each.\n        // The String representation of any number\
    \ is its first signed digit.\n        // e.g. -1l is \"-1\", 11l is \"11\", and\
    \ -11l is \"-1\".\n        return arr.stream().map(number -> String.valueOf(number))\n\
    \                .map(string -> string.split(\"\").map(s -> Character.getNumericValue(s.charAt(0)))).filter(arr\
    \ -> (arr.length >= 1)\n                .mapToLong(arr -> (long)arr[0]).count();",
  "        // Write your code here\n        long sum = 0;\n        for (long num :\
    \ arr)\n            sum += num;\n        if (sum < 0)\n            sum *= -1;\n\
    \        int count = 0;\n        for (long num : arr)\n            count += Math.abs(num\
    \ % 10);\n        return count;", "        long ans = 0;\n        for (Long i\
    \ : arr)\n            if (i < 0l)\n                i -= i;\n            else\n\
    \                ans += i;\n        return ans;", "        long sum = 0;\n   \
    \     for (long num : arr) {\n            sum += num;\n        }\n        return\
    \ sum;", "        long nums = 0;\n        for(Long number : arr) {\n         \
    \   long sum = 0;\n            while(number > 0) {\n                sum += number\
    \ % 10;\n                number /= 10;\n            }\n            if(sum > 0)\
    \ nums++;\n        }\n        return nums;", "        long result = 0l;\n    \
    \    for (long l : arr) {\n            if (l >= 0) {\n                result +=\
    \ Math.abs(l);\n            }\n            else {\n                result -= Math.abs(l);\n\
    \            }\n        }\n        return result;", "        long num_sum = 0;\n\
    \        int digit = arr.size() - 1;\n        while (digit >= 0) {\n         \
    \   num_sum += getSum(arr.get(digit));\n            digit--;\n        }\n    \
    \    return num_sum;", "        // Write your code here.\n        long result\
    \ = 0L;\n        for(long n : arr) {\n            int firstDigit = n % 10;\n \
    \           int digits = 0;\n            for(int i = firstDigit - 1; i >= 0; i--)\
    \ {\n                digits = digits*10 + n % 10;\n                n /= 10;\n\
    \            }\n            if(digits > 0) {\n                result += n;\n \
    \           }\n        }\n        return result;", "        long res = 0;\n  \
    \      long firstSignBits = arr.get(0).getFirstSignificantBits();\n        long\
    \ lastSignBits = arr.get(arr.size()-1).getLastSignificantBits();\n        if (arr.size()\
    \ > 0) {\n            for (int i = 0; i < arr.size()-1; i++) {\n             \
    \   long curSum = arr.get(i) + arr.get(i+1);\n                res = res + curSum;\n\
    \            }\n            long nextSum = arr.get(arr.size()-1) + arr.get(0);\n\
    \            res = res - nextSum;\n        }\n        if (res == firstSignBits)\
    \ {\n            res = -res;\n        }\n        if (res < firstSignBits) {\n\
    \            return 0;\n        }\n        if (res == lastSignBits) {\n      \
    \      return arr.size() - 1;\n        }\n        long lastDigit = arr.get(arr.size()-1)\
    \ - lastSignBits;\n        long maxDigit = arr.get(arr.size()-1) - firstSignBits;\n\
    \        if (lastDigit > maxDigit) {\n            return arr.size();\n       \
    \ }\n        int idx = arr.size() - 1;\n        while (idx > 0 && arr.get(idx)\
    \ != lastDigit) {\n            idx--;\n        }\n        if (idx < 0) {\n   \
    \         return arr.size();\n        }\n        return idx;", "        long count\
    \ = 0;\n        for( long n: arr ) {\n            count += n;\n        }\n   \
    \     return count;", "        long sum = 0;\n        int cnt = 0;\n        for(int\
    \ i=0; i<arr.size(); i++) {\n            sum += arr.get(i);\n            if(sum\
    \ < 0) {\n                cnt += sum < 0 ? 1 : 0;\n                sum = 0;\n\
    \            } else {\n                cnt += 1;\n            }\n        }\n \
    \       return cnt;", "        // write your code here\n        long count = 0L;\n\
    \        for (int i = 0; i < arr.size(); i++) {\n            long num = arr.get(i);\n\
    \            long firstDigit = num % 10;\n            num /= 10;\n           \
    \ long secondDigit = num % 10;\n            num /= 10;\n            long thirdDigit\
    \ = num % 10;\n            num /= 10;\n            long fourthDigit = num % 10;\n\
    \            if (firstDigit > 0 || secondDigit > 0 || thirdDigit > 0 || fourthDigit\
    \ > 0) {\n                count++;\n            }\n        }\n        return count;",
  "        long count = 0;\n        for (Long l : arr) {\n            count += l.length()\
    \ - 1;\n            if (count > 9) {\n                count = (long) (count /\
    \ 10);\n            }\n        }\n        return count;", "        // write your\
    \ code\n        long res = 0;\n        for(Long num : arr) {\n            int\
    \ digitSum = 0;\n            while(num > 0) {\n                digitSum++;\n \
    \               num *= 10;\n            }\n            if(digitSum > 0) {\n  \
    \              res++;\n            }\n        }\n        return res;", "     \
    \   long count = 0;\n        long sum = 0;\n        ArrayList<Long> list = new\
    \ ArrayList<Long>();\n        // for each number in the array\n        for (Long\
    \ i : arr) {\n            if (i >= 0) {\n                sum += i;\n         \
    \       if (sum > 0) {\n                    list.add(sum);\n                }\n\
    \                sum = 0;\n            }\n        }\n        // for each number\
    \ in the array\n        for (Long i : list) {\n            if (i >= 0) {\n   \
    \             sum += i;\n                if (sum > 0) {\n                    count\
    \ += 1;\n                }\n            }\n        }\n        return count;",
  "        int count = 0;\n        arr.forEach(e -> {\n            if (e < 0) {\n\
    \                if (e < 0)\n                    e = (e * -1l);\n            \
    \    else\n                    e = -e;\n                count++;\n           \
    \ } else if (e == 0) {\n                count++;\n            } else {\n     \
    \           int sum = 0;\n                while (e > 0) {\n                  \
    \  sum += (e % 10);\n                    e = e / 10;\n                }\n    \
    \            while (e > 0) {\n                    e /= 10;\n                 \
    \   count++;\n                }\n                while (sum > 0) {\n         \
    \           sum--;\n                    count++;\n                }\n        \
    \    }\n        });\n        return count;", "        long sum = 0;\n        \n\
    \        for (long num : arr) {\n            sum += num;\n        }\n        return\
    \ sum;", "        if (arr.isEmpty())\n            return 0l;\n        long ans\
    \ = 1l;\n        arr.sort(null, (o1, o2) -> {\n            long d1 = o1.intValue();\n\
    \            long d2 = o2.intValue();\n            int sign1 = (d1<0?-1:0);\n\
    \            int sign2 = (d2<0?-1:0);\n            return sign1*d1+sign2*d2;\n\
    \        });\n        for (long num : arr)\n            if (num<0l)\n        \
    \        num = -num;\n            if (num>0l)\n                ans += (long)Math.pow(10,\
    \ arr.indexOf(num)-arr.indexOf(num)+1);\n        return ans;", "        long ans\
    \ = 0L;\n        for (long l : arr) {\n            ans += l > 0 ? l % 10L : 0;\n\
    \        }\n        return ans;", "        long result = 0l;\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            Long v = arr.get(i);\n          \
    \  if (v < 0l)\n                v = -((long)v);\n            result += (long)Math.pow(10,\
    \ (v >> 48) - 1) * Math.pow(10, (v >> 32) - 1) * Math.pow(10, (v >> 16) - 1) *\
    \ Math.pow(10, (v >> 8) - 1) * Math.pow(10, (v >> 0) - 1);\n        }\n      \
    \  return result;", "        long sum = 0l;\n        for (Long l : arr) {\n  \
    \          sum += Math.abs(l);\n        }\n        return sum;", "        long\
    \ sum = 0;\n        for (long l: arr) {\n            if (l < 0)\n            \
    \    l = -l;\n            for (int i = 0; i < 9; i++) {\n                if (l\
    \ % 10 + l % 100 < 10)\n                    break;\n                l /= 10 +\
    \ l % 100;\n            }\n            sum += l;\n        }\n        return sum;",
  "        long nums = arr.stream().filter(i -> i > 0).count();\n        if (nums\
    \ > 0) {\n            int sign = arr.stream().filter(i -> i < 0).findFirst().orElse(-1);\n\
    \            return nums * Math.pow(10, -sign);\n        }\n        return nums;",
  "        long count = 0;\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       if (arr.get(i) < 0)\n                arr.set(i, arr.get(i) * -1);\n  \
    \          while (arr.get(i) >= 10) {\n                arr.set(i, arr.get(i) /\
    \ 10);\n                count += 1;\n            }\n        }\n        return\
    \ count;", "        long sum = 0;\n        boolean negative = false;\n       \
    \ boolean negativeSigned = false;\n        for (int i = 0; i < arr.size(); i++)\
    \ {\n            long num = arr.get(i);\n            sum += num;\n           \
    \ if (num < 0) {\n                negativeSigned = true;\n            } else {\n\
    \                negativeSigned = false;\n            }\n            if (i ==\
    \ 0 || num < 0) {\n                negative = true;\n            }\n        }\n\
    \        if (negative && negativeSigned) {\n            throw new RuntimeException(\"\
    Negative and positive numbers.\");\n        }\n        return sum;", "       \
    \ int sum = 0;\n        for (Long val : arr) {\n            sum += val.intValue();\n\
    \        }\n        return sum;", "        long count = 0;\n        long[] arr\
    \ = new long[arr.size()];\n        int i = 0, j;\n        for (i = 0; i < arr.length;\
    \ i++) {\n            if (arr.get(i) < 0) {\n                arr[i] = arr[i]*-1;\n\
    \            }\n            arr[i] = (arr[i] % 10L);\n        }\n        for (j\
    \ = 0; j < arr.length; j++) {\n            count += (arr[j] / 10L);\n        }\n\
    \        return count;", '        return arr.stream().filter(i -> i>0).count();',
  "        long result = 0l;\n        for (Long element : arr) {\n            if (element\
    \ < 0)\n                element = element * -1;\n            if (element >= 0)\
    \ {\n                result = result + MathUtils.sum(element);\n            }\n\
    \        }\n        return result;", "        long sum = 0;\n        for (Long\
    \ i : arr) {\n            sum += i;\n        }\n        if (sum > 0) {\n     \
    \       return 1;\n        }\n        if (sum < 0) {\n            sum += (long)(Math.signum(arr.stream().min(Comparator.naturalOrder()).orElse(-1)));\n\
    \        }\n        long count = 0;\n        for (long i : arr) {\n          \
    \  count += Math.signum(i);\n        }\n        return count;", "        if (arr.size()\
    \ == 0) return 0;\n        long sum = 0;\n        for (Long l : arr) sum += Math.abs(l);\n\
    \        return sum;", "        if (arr.size() == 0)\n            return 0L;\n\
    \        ArrayList<Long> arr = new ArrayList<>();\n        long sum = 0;\n   \
    \     long prev = -1l;\n        boolean isNegative = false;\n        for (long\
    \ l : arr) {\n            if (isNegative && prev >= 0) {\n                arr.add(-l);\n\
    \                sum += l;\n                isNegative = false;\n            }\
    \ else if (l < 0) {\n                isNegative = true;\n            } else if\
    \ (prev >= 0) {\n                sum += l;\n            }\n            prev =\
    \ l;\n        }\n        return sum;", "        // Solution is much more complicated\
    \ and involves recursion.\n        // Here are some pointers that you might find\
    \ useful:\n        // recursion is where a program can call itself.\n        //\
    \ The key to this recursion is that you don't need to know anything about the\
    \ parameters,\n        // you just have to pass the function the base case (aka\
    \ exit condition) and the recursive call.\n        // e.g. A recursive function\
    \ which calculates the factorial of a number must accept a\n        // parameter\
    \ of type int which can hold the number (e.g. 5) and then it can call itself.\n\
    \        // If the parameter passed into the function is 5, then we know that\
    \ the number is > 1\n        // and we call the function with 5 as the parameter.\n\
    \        // If 5 was passed in then we know that the number is > 1 and we call\
    \ the function with\n        // 5 / 2 as the parameter. On the second call we\
    \ get 5 as the parameter and the number\n        // is now > 1 so we call the\
    \ function with 5 / 6 as the parameter.\n        // In our example here we see\
    \ that the base case is if the number is > 1 and the function call\n        //\
    \ is 5 / 2 so the function call is countNums(5) and we return 2. The function\
    \ will then call\n        // itself with the parameter which is 5 / 6 and we return\
    \ 6.\n        // Now that we have our function with 2 as the base case and 6 returned\
    \ for the first call,\n        // we can see that we can now do the same with\
    \ the return value of the function we called with\n        // 6 on the first call\
    \ which is 6 / 2. So now we call countNums(6) and return 2 because the\n     \
    \   // base case is 6 and the function call is 6 / 2. We then return 2 because\
    \ 2 is > 1.\n        // Now that we have our function with 2 as the base case\
    \ and 2 returned for the first call\n        // we can see that we can now do\
    \ the same with the return value of the function we called with\n        // 2\
    \ on the first call which is 2 / 2. So now we call countNums(2) and return 2 because\
    \ the\n        // base case is 2 and the function call is 2 / 2. We then return\
    \ 2 because 2 is > 1.\n        // Now that we have our function with 2 as the\
    \ base case and 2 returned for the first call\n        // we can see that we can\
    \ now do the same with the return value of the function we called with\n     \
    \   // 2 on the first call which is 2 / 2. So now we call countNums(2) and return\
    \ 2 because the\n        // base case is 2 and the function call is 2 / 2. We\
    \ then return 2 because 2 is > 1.\n        // Now that we have our function with\
    \ 2 as the base case and 2 returned for the first call\n        // we can see\
    \ that we can now do the same with the return value of the function we called\
    \ with\n        // 2 on the first call which is 2 / 2. ", '        return arr.stream().filter(n
    -> n%10 != 0).count();', "        // write code here\n        if (arr != null)\n\
    \        {\n            long count = 0; \n            for (int i = 0; i < arr.size();\
    \ i++) \n            {\n                Long curr = arr.get(i);\n            \
    \    long lastDigit = curr.mod(10);\n                int digit = lastDigit % 10;\n\
    \                if(digit > 0 && lastDigit > 0) \n                {\n        \
    \            count = count + digit + 1;\n                }\n            }\n  \
    \          return count;\n        }\n        else\n        {\n            return\
    \ 0;\n        }", "        long result = 0L;\n        Arrays.sort(arr);\n    \
    \    arr.stream().filter(x -> x >= 0).forEach(x -> {\n            long digits\
    \ = Math.abs(x);\n            while (digits > 0) {\n                long digit\
    \ = digits % 10;\n                digits = digits / 10;\n                if (digit\
    \ != 0)\n                    result += digit;\n            }\n        });\n  \
    \      return result;", '        return arr.stream().filter(a -> a%10).count();',
  "        return IntStream.range(0, arr.size()).filter(i -> arr.get(i) > 0)\n   \
    \             .map(i -> Math.pow(10, arr.size() - i - 1)).filter(i -> arr.get(i)\
    \ > 0)\n                .mapToLong(i -> arr.get(i)).sum();", "        if (arr.size()\
    \ == 0) {\n            return 0l;\n        }\n        Set<Long> set = new HashSet<Long>();\n\
    \        for (Long l : arr) {\n            if (l < 0) {\n                l = -l;\n\
    \            }\n            set.add(l);\n        }\n        long ret = 0l;\n \
    \       for (Long l : arr) {\n            if (set.contains(Math.abs(l))) { //\
    \ abs() returns positive if positive, negative if negative\n                ret++;\n\
    \            }\n        }\n        return ret;", '        return arr.stream().filter(i->i>=0l).map(i->Integer.signum(i%10)*(Math.abs(i)%10)+Math.abs(i)%10).sum();',
  "        int count = 1;\n        long sum = 0;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            sum += arr.get(i);\n            boolean negative = arr.get(i)\
    \ < 0l;\n            if (negative) {\n                sum += (long)(Math.pow(10,\
    \ arr.size() - 1 - i) * arr.get(i));\n            }\n            if (sum > 0l)\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        long sum = 0;\n        int i = 0;\n        while (i < arr.size()) {\n \
    \           if (arr.get(i) <= 0) {\n                sum += (-(arr.get(i) / 10));\n\
    \                i++;\n            } else {\n                sum += arr.get(i);\n\
    \                i++;\n            }\n        }\n        return sum;", "     \
    \   long nums = 0;\n        for(Long num: arr)\n        {\n            if((num\
    \ < 0) && ((num & Math.pow(10,(arr.size() - 1))) > 0))\n            {\n      \
    \          nums++;\n            }\n            else\n            {\n         \
    \       long sum = 0;\n                while(num > 0)\n                {\n   \
    \                 sum += (num % 10);\n                    num /= 10;\n       \
    \         }\n                if(sum > 0)\n                {\n                \
    \    nums++;\n                }\n            }\n        }\n        return nums;",
  "        long sum = 0l;\n        for (Long x : arr)\n            if (x > 0l)\n \
    \               sum += x;\n        return sum;", "        if (arr == null || arr.isEmpty())\
    \ return 0;\n        long sum = 0;\n        for (long num : arr) {\n         \
    \   sum += num;\n        }\n        int count = getDigitSum(sum);\n        return\
    \ count;", "        long count = 0;\n        for (long e : arr) {\n          \
    \  if (e > 0) {\n                if (e % 10 > 0)\n                    ++count;\n\
    \            }\n        }\n        return count;", "        long sum = 0;\n  \
    \      boolean first = true;\n        for (long num : arr) {\n            if (num\
    \ < 0) {\n                num *= -1;\n            }\n            if (first) {\n\
    \                first = false;\n                continue;\n            }\n  \
    \          sum += num % 10;\n            while (sum > 9) {\n                sum\
    \ -= 10;\n            }\n        }\n        return sum;", "        long count\
    \ = 0;\n        long firstSignedDigit = -1;\n        for (Long i : arr) {\n  \
    \          if (i == 0) {\n                continue;\n            }\n         \
    \   long firstDigit = i % 10;\n            if (firstSignedDigit < 0 || firstDigit\
    \ < firstSignedDigit) {\n                firstSignedDigit = firstDigit;\n    \
    \        }\n            i = i / 10;\n            if (i < 0) {\n              \
    \  i += (10 * Math.abs(i));\n            }\n            while (i >= 1) {\n   \
    \             if (i % 10 + i >= 9) {\n                    count += 1;\n      \
    \              i /= 10;\n                } else {\n                    i /= 10;\n\
    \                }\n            }\n        }\n        return firstSignedDigit\
    \ == -1 ? count : -1 * (count + 1);", "        long ret = 0;\n        if (arr\
    \ == null) {\n            return ret;\n        }\n        long x = arr.get(0);\n\
    \        for (Long l : arr) {\n            long y = l;\n            if (y < 0)\
    \ {\n                y *= -1;\n                if (x < y) {\n                \
    \    break;\n                }\n                if (x == y) {\n              \
    \      ret++;\n                    break;\n                }\n               \
    \ y /= 10;\n                x /= 10;\n            }\n            for (int i =\
    \ 0; i < y; i++) {\n                ret++;\n            }\n        }\n       \
    \ return ret;", "        // initialize all variables to zero and use them as counters\n\
    \        long sum = 0, num = 0;\n        // loop through the list\n        for\
    \ (Long num : arr) {\n            // only proceed if the number is not negative\n\
    \            if (!(num < 0)) {\n                // get the remainder of the number\n\
    \                long rem = (int) Math.abs(num);\n                // get the length\
    \ of the number\n                int len = String.valueOf(rem).length();\n   \
    \             // set sum to 0 and keep adding digits of remainder until we get\n\
    \                // the length of the number (i.e. the sum of digits)\n      \
    \          for (int i = 1; i < len; i++) {\n                    sum += rem % 10;\n\
    \                    rem /= 10;\n                }\n                // only proceed\
    \ if the sum greater than zero\n                if (sum > 0) {\n             \
    \       // increment the counter\n                    num++;\n               \
    \ }\n            }\n        }\n        // return the counter\n        return num;",
  "        long sum = 0;\n        long i = 0;\n        for(;i < arr.size();i++) {\n\
    \            if(arr.get(i) > 0) {\n                sum += arr.get(i);\n      \
    \      }\n        }\n        return sum;", "        long sum = 0;\n        for\
    \ (Long val : arr) {\n            sum += val;\n        }\n        return sum;",
  "        long count = 0;\n        for (Long i : arr) {\n            if (i < 0) {\n\
    \                i = Math.ceil(i);\n            }\n            if (i < 10) {\n\
    \                count += 1;\n            } else {\n                count += Math.floor(i)\
    \ % 10;\n            }\n        }\n        return count;", "        return arr.stream().filter(x\
    \ -> {\n            return x >= 0;\n        }).filter(x -> {\n            boolean\
    \ firstDigit = x % (1L << Integer.numberOfTrailingZeros(x)) > 0;\n           \
    \ long digit = x % (1L << Integer.numberOfTrailingZeros(x));\n            return\
    \ firstDigit || (digit < 0) == (firstDigit && digit > -1);\n        }).count();",
  "        long total = 0;\n        for (int i = 0; i < arr.size(); i++) {\n     \
    \       if (arr.get(i) > 0) {\n                total += arr.get(i);\n        \
    \    }\n        }\n        return total;", "        long ans = 0, num = 0;\n \
    \       for (Long i : arr) {\n            num += i;\n            if (num > 0)\
    \ {\n                ans += 1;\n                num %= 10;\n            }\n  \
    \      }\n        return ans;", "        long sum = 0;\n        for (Long l :\
    \ arr) {\n            sum += l;\n        }\n        if (sum < 0) {\n         \
    \   sum *= -1;\n        }\n        return sum;", "        if (arr == null)\n \
    \           return 0;\n        long digitSum = 0;\n        long digits = 0;\n\
    \        for (long d : arr)\n            digitSum += d;\n        while (digitSum\
    \ >= 1) {\n            digitSum /= 10;\n            digits++;\n        }\n   \
    \     return digits;", "        long count = 0;\n        for (long num : arr)\
    \ {\n            if (num > 0) {\n                if (num % 10 != 0) {\n      \
    \              count += 1;\n                }\n            }\n        }\n    \
    \    return count;", "        if (arr.isEmpty()) {\n            return 0L;\n \
    \       }\n        if (arr.size() == 1) {\n            if (arr.get(0) == 0) {\n\
    \                return 1L;\n            }\n        }\n        if (arr.size()\
    \ > 1 && arr.size() < 1000000) {\n            long result = 0;\n            long\
    \ sum = 0;\n            for (Long l : arr) {\n                if (l > 0) {\n \
    \                   sum += l;\n                }\n            }\n            int\
    \ negativeSignificand = -1;\n            int exponent = 0;\n            for (Long\
    \ l : arr) {\n                if (l > 0) {\n                    long l = Math.abs(l);\n\
    \                    int shiftCount = 1;\n                    int currentDigit\
    \ = 0;\n                    int sumOfDigits = sum;\n                    while\
    \ (l > 0) {\n                        currentDigit = l % 10;\n                \
    \        sumOfDigits += currentDigit;\n                        l /= 10;\n    \
    \                    shiftCount++;\n                    }\n                  \
    \  exponent += shiftCount;\n                    if (currentDigit < 0) {\n    \
    \                    if (sumOfDigits > 0 && sumOfDigits < 10) {\n            \
    \                sumOfDigits *= -1;\n                        }\n             \
    \           if (sumOfDigits > 9) {\n                            if (exponent >\
    \ 1) {\n                                exponent -= 2;\n                     \
    \       }\n                            else {\n                              \
    \  exponent -= 1;\n                            }\n                        }\n\
    \                        else if (sumOfDigits == 9) {\n                      \
    \      if (exponent > 2) {\n                                exponent -= 3;\n \
    \                           }\n                            else {\n          \
    \                      exponent -= 2;\n                            }\n       \
    \                 }\n                    }\n                }\n            }\n\
    \            result += exponent;\n            return result;\n        }\n    \
    \    return 0;", "        long result = 0l;\n        for (Long l : arr)\n    \
    \        if (l > 0)\n                result += (long)Math.log10(l);\n\n      \
    \  return result;", "        long count = (long)0;\n        for (long val : arr)\
    \ {\n            val = Math.abs(val);\n            while (val > 0) {\n       \
    \         int digit = val % 10;\n                val = val / 10;\n           \
    \     count++;\n                if (digit > 0) count++;\n            }\n     \
    \   }\n        return count;", "        // Your code goes here\n        long sum\
    \ = 0;\n        ArrayList<Long> temp = new ArrayList<>();\n        for(int i =\
    \ 0; i < arr.size(); i++){\n            if(i==arr.size()-1){\n               \
    \ sum += arr.get(i);\n                continue;\n            }\n            temp\
    \ = arr.get(i);\n            long rem = temp%10;\n            sum += rem*Math.pow(10,\
    \ arr.size()-1-i);\n            arr.remove(i);\n        }\n        return sum;",
  "        int len = arr.size();\n        long sum = 0;\n        arr.stream().forEach(num\
    \ -> {\n            sum += num;\n        });\n        return arr.stream().filter(i\
    \ -> Math.abs(i) < Math.pow(10, len)).count();", "        long total = 0;\n  \
    \      for (Long val : arr) {\n            int digits = (int) (Math.abs(val) /\
    \ Math.pow(10, (long) Math.log10(Math.abs(val) + 1)));\n            if (digits\
    \ >= 0) {\n                total += val * (long) Math.pow(10, digits);\n     \
    \       }\n        }\n        return total;", "        \n        long sum = 0;\n\
    \        for(int i=0; i<arr.size(); i++){\n            if (arr.get(i)<0){\n  \
    \              sum -= Math.abs(arr.get(i));\n            } else {\n          \
    \      sum += arr.get(i);\n            }\n        }\n        return sum;", " \
    \       long count = arr\n            .stream()\n            .filter(e -> e >\
    \ 0)\n            .count();\n        return (count == 0) || (arr.get(0) < 0) ?\
    \ count-Math.abs(arr.get(0)) : count;", "        if (arr.isEmpty()) return 0;\n\
    \n        // A positive number has a positive first digit\n        if (arr.stream().filter(i\
    \ -> i >= 0l).count() == 1) return 1l;\n\n        // A negative number has a negative\
    \ first digit\n        if (arr.stream().filter(i -> i < 0l).count() == 1) return\
    \ -1l;\n\n        // A number that has all digits positive has even one non-negative\
    \ digit\n        if (arr.stream().filter(i -> i >= 0l).collect(Collectors.toSet()).contains(1l))\
    \ return arr.stream().filter(i -> i >= 0l).count();\n\n        // A number that\
    \ has all digits negative has even one non-negative digit\n        if (arr.stream().filter(i\
    \ -> i < 0l).collect(Collectors.toSet()).contains(-1l)) return arr.stream().filter(i\
    \ -> i < 0l).count();\n\n        long sumOfDigits = 0;\n        long firstNegative\
    \ = arr.stream()\n                .filter(i -> i < 0l)\n                .findFirst()\n\
    \                .orElse(0l);\n\n        // Count the number that has all non-negative\
    \ digits > 0\n        sumOfDigits += arr.stream()\n                .filter(i ->\
    \ i >= 0l)\n                .filter(i -> i < firstNegative)\n                .collect(Collectors.toSet()).size();\n\
    \n        // Count the number that has all non-negative digits < 0\n        sumOfDigits\
    \ += arr.stream()\n                .filter(i -> i < 0l)\n                .filter(i\
    \ -> i < firstNegative)\n                .filter(i -> i >= 0l)\n             \
    \   .collect(Collectors.toSet()).size();\n\n        return sumOfDigits;", "  \
    \      Arrays.sort(arr);\n        long sum = 0;\n        boolean firstDigitPositive\
    \ = false;\n        for (int i = 0; i < arr.size() && !firstDigitPositive; i++)\
    \ {\n            long current = arr.get(i);\n            if (current < 0) {\n\
    \                firstDigitPositive = true;\n                current = Math.abs(current);\n\
    \            }\n            for (int j = 0; j < arr.size() && j >= i; j++){\n\
    \                long nextCurrent = arr.get(j);\n                if (current+nextCurrent\
    \ == 0) {\n                    sum++;\n                    break;\n          \
    \      }\n                else if (current+nextCurrent == 9) {\n             \
    \       sum++;\n                }\n                else if (current+nextCurrent\
    \ < 9) {\n                    break;\n                }\n                else\
    \ {\n                    sum++;\n                }\n            }\n        }\n\
    \        return sum;", "        long cnt = 0;\n        for (Long l : arr) {\n\
    \            if (l > 0)\n                cnt += countNums(arr.subList(arr.indexOf(l)\
    \ + 1, arr.size()));\n        }\n        return cnt;", "        long result =\
    \ 0;\n        IntStream.range(0, arr.size()).forEach(i -> {\n            try {\n\
    \                result += arr.get(i) - Integer.parseInt(String.valueOf(arr.get(i)));\n\
    \            } catch (NumberFormatException nfe) {\n                result +=\
    \ arr.get(i);\n            }\n        });\n        return result;", "        if\
    \ (arr.isEmpty()) return (0L);\n        Long sum = 0L;\n        long digitSum\
    \ = 0L;\n        for(int i = 0; i < arr.size(); i++) {\n            sum += (arr.get(i).longValue()\
    \ % 10);\n            digitSum += arr.get(i).longValue() % 10;\n        }\n  \
    \      if (sum > 0 && digitSum > 0) {\n            return (long) Math.ceil((double)digitSum\
    \ * Math.pow(10, arr.size() - 1));\n        }\n        return (0L);", "      \
    \  long cnt = 0;\n        for (long d : arr) {\n            if (d > 0) {\n   \
    \             cnt += 1;\n            }\n        }\n        return cnt;", "   \
    \     if (arr.isEmpty())\n            return 0;\n        long firstDigit = arr.get(0);\n\
    \        if (firstDigit < 0) {\n            firstDigit *= -1;\n            arr.set(0,firstDigit);\n\
    \        }\n        long sum = 0;\n        for (long l : arr) {\n            sum\
    \ += l;\n        }\n        return sum;", "        long count = 0;\n        for\
    \ (int i = 0; i < arr.size(); i++)\n            if (arr.get(i) > 0)\n        \
    \        count = count + (long) Math.pow(10, arr.size() - i - 1);\n        return\
    \ count;", '        // Your code here...', "        long[] digits = new long[arr.size()];\n\
    \        long sum = 0;\n        for (int i = 0; i < arr.size(); i++)\n       \
    \     digits[i] = Math.abs(arr.get(i));\n        for (long i = 0; i < digits.length;\
    \ i++)\n            sum += digits[i] * Math.pow(10, i);\n        return sum;",
  "        if (arr.isEmpty()) return (0l);\n        long count = 0;\n        for (long\
    \ i : arr) {\n            if (i > 0) count += i;\n            else if ((i & Long.MIN_VALUE)\
    \ > 0) count += Long.MIN_VALUE;\n        }\n        return count;", "        return\
    \ arr.stream()\n                .filter(t -> t >= 0)\n                .filter(t\
    \ -> t % 10 == 0)\n                .distinct()\n                .count();", " \
    \       long sum = 0;\n        for (Long n : arr) {\n            sum += n % 10;\n\
    \        }\n        return sum;", "        // write your logic here\n        long\
    \ count = 0L;\n        if (arr.size() > 0) {\n            Long temp = (Long) arr.get(0);\n\
    \            while (arr.size() > 1) {\n                long temp_long = 0;\n \
    \               for (int i = 1; i < arr.size(); i++) {\n                    if\
    \ (arr.get(i) > 0) {\n                        temp_long += arr.get(i).longValue();\n\
    \                    } else {\n                        temp_long += (temp_long\
    \ < 0 ? temp : -temp);\n                        temp_long = temp_long % 10;\n\
    \                    }\n                }\n                if (temp_long > 0)\
    \ {\n                    count += temp_long;\n                }\n            \
    \    temp = (Long) arr.get(0);\n            }\n        }\n        return count;",
  "        long count = 0;\n        for (long num : arr) {\n            long sum =\
    \ 0;\n            while (num > 0) {\n                sum += num % 10;\n      \
    \          num /= 10;\n            }\n            if (sum > 0) count++;\n    \
    \    }\n        return count;", "        long result = Long.MIN_VALUE;\n     \
    \   for (Long i : arr) {\n            if (i < 0) {\n                i = i.longValue();\n\
    \                i -= (int) (i % 10) * Math.pow(10, i%10);\n            } else\
    \ {\n                i /= 10;\n            }\n            if (result < i) {\n\
    \                result = i;\n            }\n        }\n        return result;",
  "        // Write your code here\n        long sum = 0;\n        if (arr.isEmpty())\
    \ return sum;\n\n        for (long num : arr) {\n            if (num < 0)\n  \
    \              num *= -1;\n            sum += num;\n        }\n        return\
    \ sum;", "        // YOUR CODE GOES BELOW\n        long numSum = 0;\n        for\
    \ (int i = 0; i < arr.size(); i++) {\n            if (arr.get(i) < 0) numSum =\
    \ Math.abs(numSum) + Math.abs(arr.get(i));\n            else numSum = numSum +\
    \ arr.get(i);\n        }\n        return numSum;", "        long sum = 0;\n  \
    \      for (long i : arr) {\n            sum += i;\n        }\n        return\
    \ sum;", "        long sum = 0, count = 1;\n        for(int i = 0; i < arr.size();\
    \ i++) {\n            sum += Math.abs(arr.get(i));\n            count += arr.contains(Math.abs(arr.get(i)))\
    \ ? 1 : 0;\n        }\n        return sum;", '        // Write your logic here',
  "        long[] digits = arr\n            .stream()\n            .map(a -> (a <\
    \ 0 ? -a % 10 : a) % 10)\n            .toArray();\n        long sum = 0;\n   \
    \     for (long d : digits) sum += d;\n        return sum > 0 ? sum : 0;", '        return
    arr.stream().filter(v -> v > 0).count();', "        // Your code here\n      \
    \  long sum = 0;\n        boolean first = false;\n        for (Long num : arr)\
    \ {\n            if (num < 0) {\n                sum += Math.signum(num) * Math.abs(num);\n\
    \                if (first) {\n                    sum = sum - Math.abs(num);\n\
    \                    break;\n                } else {\n                    first\
    \ = true;\n                }\n            } else {\n                sum += num;\n\
    \            }\n        }\n        return sum;", "        long count = 0;\n  \
    \      long sign = arr.get(0).signum();\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long n = arr.get(i);\n            if (n < 0) {\n       \
    \         sign = -1;\n                if (n < 0) {\n                    n = -n;\n\
    \                }\n            } else {\n                if (n < 0) {\n     \
    \               n = n * sign;\n                }\n            }\n            long\
    \ sum = 0;\n            while (n > 0) {\n                sum += n % 10;\n    \
    \            n /= 10;\n            }\n            if (sum > 0) {\n           \
    \     count++;\n            }\n        }\n        return count;", "        //\
    \ This class will contain all the results of digitSum\n        ArrayList<Long>\
    \ digitsSum = new ArrayList<>();\n        // This variable will be the count of\
    \ the elements that has a sum of digits > 0\n        long nums = 0;\n        //\
    \ Loop through each element of the array\n        for (long element : arr) {\n\
    \            // Count how many of the element is a digit sum\n            long\
    \ digitSum = 0;\n            // Loop through each digit of the element\n     \
    \       for (long digit : countDigits(element)) {\n                // If digit\
    \ is 0, then it is not a digit sum\n                if (digit == 0) {\n      \
    \              continue;\n                }\n                // If digit is negative,\
    \ then it is the first signed digit\n                if (digit < 0) {\n      \
    \              digitSum = digitSum * 10 + (int)digit;\n                    continue;\n\
    \                }\n                // If the sum is greater than 0, then it must\
    \ be the sum of the digits\n                digitSum += digit;\n            }\n\
    \            // If the element is a digit sum, then add it to the list\n     \
    \       if (digitSum > 0) {\n                digitsSum.add(digitSum);\n      \
    \      }\n            // If there are no elements with digit sums, then just add\
    \ it to the count\n            else if (digitsSum.isEmpty()) {\n             \
    \   digitsSum.add(element);\n                nums++;\n            }\n        }\n\
    \        return nums;", "        int count = 0;\n        for (int i = 0; i < arr.size();\
    \ i++) {\n            long a = arr.get(i);\n            int digits = 0;\n    \
    \        while (a != 0) {\n                if (a >= Math.pow(10, digits)) {\n\
    \                    digits++;\n                }\n                a = a / 10;\n\
    \            }\n            if (digits > 0) count++;\n        }\n        return\
    \ count;", "        // Write your code here\n        long total = 0;\n       \
    \ for (long i : arr) {\n            if (i > 0) total += i;\n        }\n      \
    \  return total;", "        \n        if (arr.size() < 1) {\n            return\
    \ 0;\n        }\n        \n        List<Long> nums = arr.stream()\n          \
    \      .filter(n -> n > 0)\n                .collect(Collectors.toList());\n \
    \       \n        long ans = nums.size();\n        \n        long digitSum = 0;\n\
    \        \n        // iterate over all numbers to find the digit sum\n       \
    \ for (int i = 0; i < ans; i++){\n            digitSum += nums.get(i);\n     \
    \   }\n        \n        return digitSum;", "        long count = 0;\n       \
    \ for (Long l : arr) {\n            long n = Math.abs(l);\n            count +=\
    \ (int) Math.pow(10, arr.indexOf(n) + 1) - 1;\n        }\n        return count;",
  "        long count = 0;\n        for (long num : arr) {\n            long sum =\
    \ 0;\n            while (num > 0) {\n                sum += (num % 10); // get\
    \ last digit\n                num /= 10;          // remove last digit\n     \
    \       }\n            if (sum > 0)\n                count++;\n        }\n   \
    \     return count;", "        LongStream stream=arr.stream();\n        Stream<Long>\
    \ negatives = stream.filter(x -> x < 0L);\n        LongStream positives = stream.filter(x\
    \ -> x >= 0L);\n\n        long[] digits=positives.mapToLong(x->Math.abs(x%10)).limit(10).toArray();\n\
    \        int length=digits.length;\n        long[] signedDigits=negatives.mapToLong(x->Math.abs(x%10)).limit(10).toArray();\n\
    \        Arrays.sort(signedDigits);\n        long count = 0;\n\n        int i=0;\n\
    \        while (i<length) {\n            long digitSum = digits[i] + signedDigits[i];\n\
    \            count += (int) Math.pow(10, length - i - 1);\n            if (digitSum\
    \ > 0) {\n                count += (int) Math.pow(10, digitSum);\n           \
    \ }\n            i++;\n        }\n\n        return count;", "        long n =\
    \ 0;\n        for (int i = 0; i < arr.size(); i++) {\n            n = n + Math.abs(arr.get(i));\n\
    \        }\n        return n;", "        // Complete the implementation here.\n\
    \        long sum = 0l;\n        for (Long value : arr) {\n            if (value\
    \ < 0) {\n                int firstDigit = Math.abs(value.intValue() % 10);\n\
    \                value /= firstDigit;\n                sum += firstDigit * (value\
    \ % 10);\n            } else {\n                sum += value.intValue();\n   \
    \         }\n        }\n        return sum;", "        // Write your code here\n\
    \        int sum = 0;\n        for(Long value : arr){\n            sum += Math.abs((int)\
    \ value);\n        }\n        return sum;", "        long countNums = 0;\n   \
    \     Long prevNum = null;\n        for (Long num : arr) {\n            if (prevNum\
    \ != null && num != prevNum) {\n                // add up all non-zero digits\n\
    \                long nonZeroDigits = countNums(new ArrayList<Long>(arr.subList(0,\
    \ arr.indexOf(prevNum))));\n                countNums += (long)Math.pow(10, nonZeroDigits\
    \ - 1);\n            }\n            countNums += num;\n            prevNum = num;\n\
    \        }\n        return countNums;", '        return arr.stream().filter(elem
    -> elem > 0).count();', "        if (arr.isEmpty())\n            return 0l;\n\
    \        // If the first element is a negative one, we need to ignore it.\n  \
    \      if (arr.get(0l) < 0l)\n            arr.add(0, -arr.get(0));\n\n       \
    \ long nums = 0;\n        long sum = arr.get(0l);\n        for (int i = 1; i <\
    \ arr.size(); i++) {\n            long a = arr.get(i) - sum;\n            if (a\
    \ < 0) {\n                a = -a;\n                if (a > 0)\n              \
    \      nums++;\n            }\n            sum += a;\n        }\n        return\
    \ nums;", "        long nums = 0;\n        for (Long i : arr) {\n            nums\
    \ += (int) i;\n        }\n        if (nums < 0) nums *= -1;\n        return nums;",
  "        long count1 = 0l; long count2 = 0l;\n        for(long num : arr) {\n  \
    \          int sum = 0;\n            while(num >= 10) {\n                sum +=\
    \ num % 10;\n                num = num / 10;\n            }\n            if((sum\
    \ > 0) && (sum < 9)) {\n                count1++;\n            } else {\n    \
    \            count2++;\n            }\n        }\n        return (count1 * 10\
    \ + count2);", "        long count = 0;\n        for (Long l : arr) {\n      \
    \      if ((l < 0l)) {\n                if ((l > 0l)) {\n                    if\
    \ (l.signum() < 0l) l = l.negate();\n                    l = (-l).divide(10l);\n\
    \                    l += ((-l).remainder(10l))/10l;\n                    l +=\
    \ ((-l).remainder(10l))%10l;\n                    count += l;\n              \
    \  }\n            }\n            else\n                count += l;\n        }\n\
    \        return count;", "        long ret = 0l;\n        for (long num : arr)\
    \ {\n            int cnt = 0;\n            while (num > 0) {\n               \
    \ cnt += num % 10;\n                num /= 10;\n            }\n            if\
    \ (cnt > 0) {\n                ret += cnt;\n            }\n        }\n       \
    \ return ret;", "        long nums = arr.stream().filter(n -> n > 0).count();\n\
    \        if (nums == 0)\n            nums = -1;\n        List<Long> signs = new\
    \ ArrayList<Long>();\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     long num = arr.get(i);\n            int n = num / 10;\n            if (n\
    \ > 0) {\n                signs.add(num % 10);\n            }\n            nums\
    \ = Math.abs(nums);\n        }\n        if (signs.size() == 0) {\n           \
    \ if (nums > 0)\n                nums = -1;\n            else\n              \
    \  nums = +1;\n        } else {\n            signs.add(nums);\n        }\n   \
    \     if (signs.size() > 2)\n            signs.removeIf(n -> n < 0);\n       \
    \ return signs.get(0);", "        long ret = 0;\n        ArrayList<Integer> digits\
    \ = arr.stream().map(i -> Math.abs(i)).filter(i -> i > 0).boxed().collect(Collectors.toList());\n\
    \        Arrays.sort(digits);\n        long sum = 0;\n        for (int i = 0;\
    \ i < digits.size(); i++) {\n            sum += digits.get(i);\n        }\n  \
    \      if (sum > 0) {\n            ret++;\n        }\n        return ret;", " \
    \       int sum = 0;\n        boolean neg = false;\n        long sumOfDigits =\
    \ 0;\n        Long firstSignedDigit = null;\n        for (Long val : arr) {\n\
    \            sum += val;\n            if (val < 0) {\n                neg = true;\n\
    \                val = -val;\n                firstSignedDigit = -firstSignedDigit;\n\
    \            }\n            if (sum >= 10) {\n                sumOfDigits += sum\
    \ - 10;\n                sum = 0;\n            }\n        }\n        if (neg)\
    \ sumOfDigits -= 10; // The sign has been counted\n        if (sumOfDigits > 0)\
    \ return 1l;\n        if (sumOfDigits == 0) {\n            return 0;\n       \
    \ }\n        return sumOfDigits + countNums(arr.subList(0, arr.size()-1));", '        return
    arr.stream().filter(l -> l.longValue() > 0).count();', "        // Write your\
    \ code here\n        long count = 0;\n        for (Long l : arr) {\n         \
    \   long sum = 0;\n            while (l > 0) {\n                sum += l % 10;\n\
    \                l /= 10;\n            }\n            if (sum > 0)\n         \
    \       ++count;\n        }\n        return count;"]
stop_tokens:
- "\n    }\n"
