name: HumanEval_55_fib
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Return n-th Fibonacci number.\n    // >>> fib((10l))\n \
  \   // (55l)\n    // >>> fib((1l))\n    // (1l)\n    // >>> fib((8l))\n    // (21l)\n\
  \    public static long fib(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(fib((10l))\
  \ == (55l));\n    assert(fib((1l)) == (1l));\n    assert(fib((8l)) == (21l));\n\
  \    assert(fib((11l)) == (89l));\n    assert(fib((12l)) == (144l));\n    }\n\n\
  }\n"
completions: ["        if(n == 0 || n == 1)\n            return n;\n        return\
    \ fib(n-1) + fib(n-2);", "        // base case\n        if (n <= 1) {\n      \
    \      return n;\n        }\n        // recursive case\n        return fib(n -\
    \ 1) + fib(n - 2);", "        if (n <= 1l) return 1l;\n        if (n <= 3l) return\
    \ 3l;\n        return fib((long) n / 2l) + fib((long) (n - 1l) / 2l);", "    \
    \    if (n <= 1l) {\n            return 1l;\n        } else {\n            return\
    \ fib(n - 1) + fib(n - 2l);\n        }", "        if (n <= 1l) return 1l;\n  \
    \      else return fib((n - 1l) * 3l) + ((n - 2l) * 1l);", "        long a = 1,\
    \ b = 1;\n        for (long i = 0; i < n; i++) {\n            long tmp = a;\n\
    \            a = b;\n            b = tmp + b;\n        }\n        return a;",
  "        if (n <= 1)\n            return n;\n        return fib(n - 1) + fib(n -\
    \ 2);", "        if (n <= 1l) {\n            return n;\n        }\n\n        long[]\
    \ cache = new long[50];\n        long result = cache[0];\n        long previous\
    \ = cache[1];\n        long current = cache[2];\n        long nextValue = cache[3];\n\
    \        long next = cache[4];\n\n        for (int i = 4; i <= n; i++) {\n   \
    \         long next = (previous + nextValue) % (2 * Long.MAX_VALUE);\n       \
    \     current = nextValue;\n            nextValue = next;\n            next =\
    \ cache[i] = next;\n        }\n\n        cache[3] = cache[4] = cache[5] = cache[6]\
    \ = cache[7] = cache[8] = cache[9] = cache[10] = cache[11] = cache[12] = cache[13]\
    \ = cache[14] = cache[15] = cache[16] = cache[17] = cache[18] = cache[19] = cache[20]\
    \ = cache[21] = cache[22] = cache[23] = cache[24] = cache[25] = cache[26] = cache[27]\
    \ = cache[28] = cache[29] = cache[30] = cache[31] = cache[32] = cache[33] = cache[34]\
    \ = cache[35] = cache[36] = cache[37] = cache[38] = cache[39] = cache[40] = cache[41]\
    \ = cache[42] = cache[43] = cache[44] = cache[45] = cache[46] = cache[47] = cache[48]\
    \ = cache[49] = cache[50] = cache[51] = cache[52] = cache[53] = cache[54] = cache[55]\
    \ = result;\n\n        return result;", "        if (n <= 1l) return n;\n    \
    \    return fib(n-1l) + fib(n-2l);", "        long prev = 0;\n        long curr\
    \ = 1;\n        long next;\n        for (long i = 1; i <= n; i++) {\n        \
    \    next = curr + prev;\n            prev = curr;\n            curr = next;\n\
    \        }\n        return curr;", "        if (n < 1l) {\n            throw new\
    \ IllegalArgumentException(\"n must be greater than zero\");\n        }\n    \
    \    if (n <= 1l) {\n            return 1l;\n        }\n        long a = fib(n\
    \ - 1l);\n        long b = fib(n - 2l);\n        return a + b;", "        if(n\
    \ == 0)\n            return 0;\n        if(n == 1)\n            return 1;\n  \
    \      return fib(n - 1) + fib(n - 2);", "        if (n <= 1l)\n            return\
    \ n;\n        return fib((n - 2l) + 1) + fib((n - 2l));", '        return n <
    2l ? n : fib(n - 2l) + fib(n - 1l);', "        if (n <= 1) return 1;\n       \
    \ return fib(n-1) + fib(n-2);", "        if (n <= 2) {\n            return n;\n\
    \        }\n        return fib(n - 2) + fib(n - 1);", "        if (n <= 1)\n \
    \           return n;\n        else\n            return fib(n - 1) + fib(n - 2);",
  "        if (n < 2) return 1;\n        return (fib(n - 1) + fib(n - 2));", "   \
    \     if (n >= 2l) return fib((n-1l))+1l; // return nth fibonacci number\n   \
    \     if (n <= 1l) return 1l; // return 1th fibonacci number\n        long previous\
    \ = 0l, previous2 = 0l;\n        long temp = (previous2 + 1l) // compute nth fibonacci\
    \ number\n                - Math.pow((previous + 1l), n); // calculate nth fibonacci\
    \ number\n        previous = previous2;\n        previous2=temp;\n        return\
    \ temp;", "        if ((n == 0l) || (n == 1l)) {\n            return n;\n    \
    \    } else {\n            return fib(n-1l) + fib(n-2l);\n        }", "      \
    \  if (n <= 1l)\n            return n;\n        if (n >= 10l)\n            return\
    \ fib((n % 10l) + 10l) + fib((n / 10l));\n        long f = fib((n / 2l));\n  \
    \      return f + fib((n % 2l) + 2l);", "        if (n == 0) return 0;\n     \
    \   else if (n == 1) return 1;\n        else return fib(n-1) + fib(n-2);", " \
    \       if (n <= 1l)\n            return 1l;\n        else if (n >= 2l)\n    \
    \        return n + 1l;\n        else\n            return fib((n + 1l) - fib((n\
    \ - 2l)));", '        return n < 2 ? 1l : fib(n-2) + fib(n-1);', "        if (n\
    \ < 1l) return 1l;\n        if (n >= 2n) System.out.println(\"fib: n too big\"\
    );\n        return fib(n - 2l) + fib(n - 1l);", "        if (n <= 2l) return 1l;\n\
    \        long result = fib(n - 1l) + fib(n - 2l);\n        if (n % 2l) result\
    \ *= -1l;\n        return result;", "        boolean zero = true;\n        long\
    \ a, b, c;\n\n        if (n < 0) {\n            throw new IllegalArgumentException(\"\
    n must be non-negative\");\n        }\n        if (n <= 0) {\n            throw\
    \ new IllegalArgumentException(\"n must be positive integer\");\n        }\n \
    \       if (n == 1l || n == 2l) {\n            return n;\n        }\n\n      \
    \  a = b = 1l;\n\n        while ((n = n - 1l) !=0l) {\n            c = a;\n  \
    \          a = b;\n            b = a + c;\n        }\n\n        return a;", " \
    \       if (n == 0 || n == 1) return n;\n        return fib(n - 1) + fib(n - 2);",
  "        if (n <= 1l) return 1l;\n        return fib(n - 2l) + fib(n - 1l);", " \
    \       if (n <= 1)\n            return n;\n        return fib(n - 1) + fib(n\
    \ - 2);", "        if (n <= 1l) {\n            return n;\n        } else {\n \
    \           return fib(n - 1) + fib(n - 2l);\n        }", "        if (n <= 1l)\
    \ {\n            return n;\n        } else {\n            return fib((n - 1l)\
    \ + 1l) + fib((n - 2l));\n        }", "        // Return the nth Fibonacci number.\n\
    \        if (n <= 1) { return n; }\n        long first = 1l, second = 1l;\n  \
    \      for (int i = 1; i < n; i++) {\n            long next = (first+second+second);\n\
    \            first = second;\n            second = next;\n        }\n        return\
    \ second;", "        if (n <= 1) return n;\n        return fib(n - 1) + fib(n\
    \ - 2);", "        if (n <= 1l) return 1l;\n        return fib((long) (Math.pow((2l),\
    \ n)));", "        if (n < 0) throw new IllegalArgumentException();\n        if\
    \ (n == 0 || n == 1) return n;\n        long sum = 0;\n        for (long i = 2;\
    \ i <= n; ++i) {\n            sum += i;\n        }\n        return sum;", "  \
    \      BigInteger i = new BigInteger(\"1\");\n        BigInteger fib = new BigInteger(\"\
    1\");\n        long lastfib = 1;\n        for (int x = 2; x <= n; x++) {\n   \
    \         i = i.add(fib);\n            lastfib = fib;\n            fib = i.mod(n);\n\
    \        }\n        return lastfib;", "        if (n == 1l) return 1l;\n     \
    \   if (n == 2l) return 2l;\n        if (n == 3l) return 3l;\n        if (n ==\
    \ 4l) return 5l;\n        if (n == 5l) return 8l;\n        if (n == 6l) return\
    \ 13l;\n        if (n == 7l) return 21l;\n        if (n == 8l) return 34l;\n \
    \       if (n == 9l) return 55l;\n        if (n == 10l) return 89l;\n        if\
    \ (n == 11l) return 144l;\n        if (n == 12l) return 233l;\n        if (n ==\
    \ 13l) return 377l;\n        if (n == 14l) return 610l;\n        if (n == 15l)\
    \ return 987l;\n        if (n == 16l) return 1597l;\n        if (n == 17l) return\
    \ 2584l;\n        if (n == 18l) return 4181l;\n        if (n == 19l) return 6765l;\n\
    \        if (n == 20l) return 12586l;\n        if (n == 21l) return 24681l;\n\
    \        if (n == 22l) return 51441l;\n        if (n == 23l) return 89417l;\n\
    \        if (n == 24l) return 148451l;\n        if (n == 25l) return 296957l;\n\
    \        if (n == 26l) return 583901l;\n        if (n == 27l) return 1130083l;\n\
    \        if (n == 28l) return 1774967l;\n        if (n == 29l) return 3520369l;\n\
    \        if (n == 30l) return 7036013l;\n        if (n == 31l) return 13514229l;\n\
    \        if (n == 32l) return 2036501l;\n        if (n == 33l) return 4002657l;\n\
    \        if (n == 34l) return 6557421l;\n        if (n == 35l) return 10610203l;\n\
    \        if (n == 36l) return 17921519l;\n        if (n == 37l) return 35390269l;\n\
    \        if (n == 38l) return 75401193l;\n        if (n == 39l) return 138560559l;\n\
    \        if (n == 40l) return 211900313l;\n        if (n == 41l) return 41399697l;\n\
    \        if (n == 42l) return 71467421l;\n        if (n == 43l) return 122256479l;\n\
    \        if (n == 44l) return 251407607l;\n        if (n == 45l) return 509832879l;\n\
    \        if (n == 46l) return 903989323l;\n        if (n == 47l) return 1525924289l;\n\
    \        if (n == 48l) return 2588005819l;\n        if (n == 49l) return 4135968111l;\n\
    \        if (n == 50l) return 7294019771l;\n        if (n == 51l) return 12369536231l;\n\
    \        if (n == 52l) return 2517229803", "        if(n == 0) return 0;\n   \
    \     if(n == 1) return 1;\n        return fib(n - 1) + fib(n - 2);", "      \
    \  if (n >= 3) {\n            return fib(n - 2) + fib(n - 1);\n        } else\
    \ if (n == 1 || n == 2) {\n            return 1;\n        } else {\n         \
    \   throw new IndexOutOfBoundsException(\"Fibonacci number not available\");\n\
    \        }", "        long a, b;\n        a = b;\n        b = 0;\n        if (n\
    \ <= 1l) return 1l;\n        while (n < 2l) n++;\n        while (n != 1l) {\n\
    \            long t = a + b + 1l;\n            a = b;\n            b = t;\n  \
    \          n++;\n        }\n        return b;", "        if (n <= 1) return n;\n\
    \        return (fib(n - 1) + fib(n - 2));", "        long a = 0l, b = 1l, c;\n\
    \        while (n > 0) {\n            c = b;\n            b = a + b;\n       \
    \     a = c;\n            n--;\n        }\n        return b;", "        if (n\
    \ < 2) {\n            return n;\n        } else {\n            return fib(n -\
    \ 2) + fib(n - 1);\n        }", "        if (n <= 1l) return 1l;\n        return\
    \ fib(n - 1l) + fib(n - 2l);", "        if (n <= 1l) return n; // Base case.\n\
    \        // Recursive case:\n        return fib(n - 1l) + fib(n - 2l);", "   \
    \     if(n == 0)\n            return 0;\n        if(n == 1)\n            return\
    \ 1;\n        return fib(n - 1) + fib(n - 2);", "        if ((n <= 1l))\n    \
    \        return n ;\n        else return fib(n-2l) + fib(n-1l) ;", "        if\
    \ (n <= 1l) {\n            return n;\n        }\n\n        long a = 1l;\n    \
    \    long b = 2l;\n\n        while (true) {\n            long c = a + b;\n   \
    \         if (c > n) break;\n            a = b;\n            b = c;\n        }\n\
    \        return a;", "        if (n <= 1) {\n            return 1;\n        }\n\
    \        return fib(n - 1) + fib(n - 2);", "        if (n <= 1) {\n          \
    \  return n;\n        } else {\n            return fib(n-1) + fib(n-2);\n    \
    \    }", "        long a = 0, b = 1;\n        while (true) {\n            long\
    \ c = a + b;\n            if (n == c)\n                return c;\n           \
    \ else\n                a = b;\n            b = c;\n        }", "        if (n\
    \ < 2l) {\n            return 1l;\n        }\n        long f1 = 1l;\n        long\
    \ f2 = 1l;\n        for (int i = 3l; i < n; i+= 6l) {\n            long tmp =\
    \ f1;\n            f1 = f2;\n            f2 = tmp + f2;\n        }\n        return\
    \ f2;", "        long[] f = new long[n];\n        f[0] = 1;\n        f[1] = 1;\n\
    \        for (int i = 2; i < n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n\
    \        }\n        return f[n];", "        long a = 1, b = 1;\n        for (int\
    \ i = 1; i <= n; i++) {\n            long c = a + b;\n            a = b;\n   \
    \         b = c;\n        }\n        return b;", "        long a = 0, b = 1;\n\
    \        while(n>0){\n            if(n%2 == 0) a = a + b;\n            else b\
    \ = a + b;\n            n = n/2;\n        }\n        return a;", '        return
    n < 3l ? 1l : (fib(n - 2l) + fib(n - 1l));', "        if( n == 0 ) return 0;\n\
    \        if( n == 1 ) return 1;\n        if( n < 2 ) return fib(n - 1) + fib(n\
    \ - 2);\n        long result = fib(n - 1);\n        return result;", "       \
    \ long fib[] = new long[n];\n        fib[0] = 0;\n        fib[1] = 1;\n      \
    \  for(int i = 2; i < n; i++) {\n            fib[i] = fib[i-1] + fib[i-2];\n \
    \       }\n        return fib[n];", "        if (n < 2l) {\n            return\
    \ 1l;\n        }\n        long f[] = new long[n];\n        f[0] = 1l;\n      \
    \  f[1] = 1l;\n        for (int i = 2l; i <= n; i++) {\n            long a = f[i\
    \ - 1];\n            f[i] = f[i - 2] + f[i - 1];\n        }\n        return f[n];",
  "        long f = BigInteger.ONE;\n        for (int i = 1; i < n; i++)\n       \
    \     f = f.add(BigInteger.ONE);\n        return f;", "        if (n <= 1l) {\n\
    \            return 1l;\n        }\n        return fib(n - 1) + fib(n - 2);",
  "        if (n == 0 || n == 1) return n;\n        return fib(n - 1) + fib(n - 2);",
  "        if ((n & 1l) == 0l) {\n            return n;\n        } else {\n      \
    \      return fib((n-1l) + 2l);\n        }", "        if (n <= 2l) return 1l;\n\
    \        if (n <= 4l) return 2l;\n        return fib(n-2) + fib(n-1);", "    \
    \    if (n < 2) return n;\n        return fib(n - 1) + fib(n - 2);", "       \
    \ if (n <= 1) {\n            return n;\n        } else {\n            return fib(n-1)\
    \ + fib(n-2);\n        }", "        if (n == 0)\n            return 1;\n     \
    \   if (n == 1)\n            return 1;\n        return fib(n - 1) + fib(n - 2);",
  "        switch (n) {\n            case 0:\n            case 1:\n              \
    \  return (long)n;\n            case 2:\n                return (1l + 2l);\n \
    \           case 3:\n                return (1l + 3l);\n            case 4:\n\
    \                return (1l + 4l);\n            case 5:\n                return\
    \ (1l + 5l);\n            case 6:\n                return (1l + 6l);\n       \
    \     case 7:\n                return (1l + 7l);\n            case 8:\n      \
    \          return (1l + 8l);\n            case 9:\n                return (1l\
    \ + 9l);\n            default:\n                return fib(n-1) + fib(n-2);\n\
    \        }", "        // Base case: n is 0 or 1.\n        if (n == 0 || n == 1)\
    \ {\n            return n;\n        }\n\n        // Recursive case: compute fib(n-1)\
    \ + fib(n-2) and return it.\n        long result = fib(n - 2) + fib(n - 1);\n\
    \        return result;", "        long a = 1, b = 1;\n        for(long i = 0;\
    \ i < n; i++) {\n            long next = a + b;\n            a = b;\n        \
    \    b = next;\n        }\n        return b;", "        if (n == 0)\n        \
    \    return 0;\n        if (n == 1)\n            return 1;\n        return fib(n\
    \ - 1) + fib(n - 2);", "        if (n == 0 || n == 1) return n;\n        return\
    \ fib(n - 1) + fib(n - 2);", "        if (n < 2l) {\n            return 1l;\n\
    \        }\n        return fib(n - 2l) + fib(n - 1l);", "        if (n <= 2l)\
    \ return 1l;\n        return fib(n - 1l) + fib(n - 2l);", "        if (n == 0)\
    \ {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n\
    \        } else {\n            return fib(n - 1) + fib(n - 2);\n        }", " \
    \       if (n <= 1l) return n;\n        else return fib(n - 2l) + fib(n - 1l);",
  "        if (n == 0l) return 1l;\n        if (n == 1l) return 1l;\n        return\
    \ fib(n-1) + fib(n-2);", "        if (n <= 1l) {\n            return n\n     \
    \   } else {\n            return fib(n - 1) + fib(n - 2l)\n        }", "     \
    \   if (n < 3) {\n            return n;\n        }\n        return fib(n-1) +\
    \ fib(n-2);", "        if (n == 0) return 0;\n        if (n == 1) return 1;\n\
    \        return fib(n - 1) + fib(n - 2);", "        if (n < 2)\n            return\
    \ n;\n        return fib(n - 1) + fib(n - 2);", "        long fib[] = new long[n\
    \ + 1];\n        fib[0] = 0;\n        fib[1] = 1;\n        for (long i = 2; i\
    \ < n; i++) {\n            fib[i] = fib[i - 1] + fib[i - 2];\n        }\n    \
    \    return fib[n];", "        if (n <= 0) throw new IllegalArgumentException();\n\
    \        if (n <= 1l) return 1l;\n        return fib(n - 2l) + fib(n - 1l);",
  "        if (n <= 1l) {\n            return n;\n        }\n        if (n >= 8l)\
    \ {\n            return 21l;\n        }\n        return fib(n - 2) + fib(n - 1);",
  "        if (n <= 1l)\n            return n;\n\n        // Return n-th Fibonacci\
    \ number.\n        if (n >= 2l)\n            return fib((n - 2l) + 2l);\n\n  \
    \      // Return n-th Fibonacci number.\n        return fib((n - 1l) + 1l);",
  "        if (n < 1l) return 1l;\n        if (n < 3l) return 1l + (2l) fib(n-1l);\n\
    \        return fib((n - 3l)) + (2l) fib((n - 2l));", "        long fibonacciSum\
    \ = 0;\n        long[] fibNumbers = fibonacci(fibNumbers.length, 1l, 2l);\n  \
    \      if (fibNumbers.length <= n) {\n            fibonacciSum = fibNumbers[n];\n\
    \        } else {\n            fibonacciSum = fibNumbers[n - 1] + fibNumbers[n\
    \ - 2];\n        }\n        return fibonacciSum;", "        if ((n == 1l) || (n\
    \ == 0l)) {\n            return 0l;\n        }\n        long f1 = 0l, f2 = 0l;\n\
    \        if (n > 0l) {\n            f1 = fib(n - 1l);\n            f2 = fib(n\
    \ - 2l);\n        }\n        return f1l + f2l;", "        if(n == 0) return 0;\n\
    \        if(n == 1) return 1;\n        return fib(n-2) + fib(n-1);", "       \
    \ // Create three numbers.\n        long a = 0l, b = 1l, c = 2l;\n        long\
    \ fib_n = 0l;\n        while (n > 0) {\n            if (n % 2 == 1) {\n      \
    \          fib_n = b;\n                b = a;\n                a = fib_n + c;\n\
    \            }\n            n /= 2;\n        }\n        return fib_n;", "    \
    \    boolean condition = false;\n        long a = 0l; // First term.\n       \
    \ long b = 1l; // Second term.\n        long c;\n        switch (n) {\n      \
    \      case 0: return 0l;\n            case 1: return 1l;\n            case 2:\
    \ return 1l + 2l;\n            default: // n > 2\n                for (int i =\
    \ 3; i <= n; i++) {\n                    c = a + b;\n                    a = b;\n\
    \                    b = c;\n                }\n                return b;\n  \
    \      }", "        if (n >= 0) {\n            if (n == 0) return 0;\n       \
    \     if (n == 1) return 1;\n            long fib = fib(n - 1) + fib(n - 2);\n\
    \            return fib;\n        }\n        throw new ArithmeticException(\"\
    Negative number not allowed\");", '        return n < 2 ? n : fib(n - 1) + fib(n
    - 2);', "        if (n <= 1l) return n;\n        return fib(n-2) + fib(n-1);",
  "        long f1 = 1l, f2 = 1l;\n        for (long i = 2; i <= n; i++){\n      \
    \      long f3 = f1 + f2;\n            f1 = f2;\n            f2 = f3;\n      \
    \  }\n        return f1;", "        if(n == 0)\n            return 1l; // return\
    \ 1\n        if(n == 1)\n            return 1l; // return 1\n        long a =\
    \ fib(n-1l); // return fib(n - 1)\n        long b = fib(n-2l); // return fib(n\
    \ - 2)\n        return b + a; // return fib(n - 1) + fib(n-2)", "        if (n\
    \ == 0) return 1;\n        if (n == 1) return 1;\n        return fib(n - 1) +\
    \ fib(n - 2);", "        // Return null if n is 0 or 1.\n        if (n <= 1l)\
    \ {\n            return null;\n        }\n        // Return n-th Fibonacci number\
    \ if n is odd.\n        if (n % 2l == 0l) {\n            return fib(n-1l) + fib(n-2l);\n\
    \        }\n        // Return n-th Fibonacci number if n is even.\n        else\
    \ {\n            return fib(n-1l) + fib(n-2l) + fib(n-1l) + fib(n-2l);\n     \
    \   }", "        if (n < 2l) return 1l;\n        else return fib((n-1l) + fib((n-2l)))",
  "        final int MAX_FACTOR = 5;\n        if (n == 0 || n == 1) {\n          \
    \  return n;\n        }\n\n        final int MAX_ITERATIONS = MAX_FACTOR * MAX_FACTOR;\n\
    \        long previous = 0;\n        long current = 1;\n\n        for (int i =\
    \ 0; i < MAX_ITERATIONS; i++) {\n            final long temp = current;\n    \
    \        current = previous + current;\n            previous = temp;\n\n     \
    \       if (current % n == 0) {\n                return current;\n           \
    \ }\n        }\n\n        throw new IllegalArgumentException(\n            String.format(\"\
    The given value \\\"%d\\\" is not in Fibonacci series\", n));", "        long\
    \ result = 1l;\n        for (long i = 1; i < n; i++) {\n            result = result\
    \ ^ i;\n        }\n        return result;", "        long f1 = 1;\n        long\
    \ f2 = 1;\n        while (f2 != n) {\n            f2 = f1 + f2;\n            f1\
    \ = f1 + f2;\n        }\n        return f1;", "        long prev1 = 0l, prev2\
    \ = 0l;\n        if ( n < 2 ) {\n            return n;\n        }\n\n        while\
    \ ( true ) {\n            long tmp = prev1 + prev2;\n            if ( n >= tmp\
    \ ) {\n                return tmp;\n            }\n            prev1 = prev2;\n\
    \            prev2 = tmp;\n            n--;\n        }", "        if (n <= 1l)\
    \ {\n            return n;\n        } else {\n            return fib(n - 2l) +\
    \ fib(n - 1l);\n        }", "        // Your code goes here\n        long prev\
    \ = 1L;\n        long curr = prev;\n        for (int i = 0; i < n; i++) {\n  \
    \          prev = (curr + prev);\n            curr = prev;\n        }\n      \
    \  return curr;", "        if (n <= 1)\n            return n;\n        else\n\
    \            return fib(n - 1) + fib(n - 2);", "        if (n == 0) return 0;\n\
    \        if (n == 1) return 1;\n        return fib(n - 2) + fib(n - 1);", "  \
    \      List<Long> result = new ArrayList<>();\n        fib(result, n, 1L, 1L);\n\
    \        return LongStream.range(0, n).reduce((acc, i) -> acc + result.get(i));",
  "        if (n < 2l) {\n            return n+1l;\n        }\n        return fib((n+1l)/2l)\
    \ + fib((n+1l)/2l) % (n+1l);", "        if (n == 0 || n == 1)\n            return\
    \ n;\n        return fib(n - 1) + fib(n - 2);", "        if ((n >= 0) && (n <=\
    \ 9)) {\n            return n;\n        }\n        long[] tab = new long[n];\n\
    \        tab[0] = 0;\n        tab[1] = 1;\n        for (int i = 2; i < n; i++)\
    \ {\n            tab[i] = tab[i - 2] + tab[i - 1];\n        }\n        return\
    \ tab[n];", "        if (n <= 1L) return 1L;\n        return fib(n-1L) + fib(n-2L);",
  "        if (n < 2) return n;\n        return fib(n - 1) + fib(n - 2);", "     \
    \   long f = 1;\n        long g = 2;\n        long h = 3;\n        long fib;\n\
    \        while (n > 1) {\n            fib = f;\n            f = g;\n         \
    \   g = h;\n            h = f + g;\n            n -= 1;\n        }\n        fib\
    \ = f;\n        return fib;", "        if (n <= 1L) {\n            return n;\n\
    \        }\n\n        long fib0 = 0L;\n        long fib1 = 0L;\n\n        for\
    \ (int i = 1; i < n; i++) {\n            long fib2 = fib0 + fib1;\n          \
    \  fib0 = fib1;\n            fib1 = fib2;\n        }\n\n        return fib1;",
  "        if(n == 0) return 1l;\n        if(n == 1) return 1l;\n        return fib(n\
    \ - 2) + fib(n - 1);", '        return n < 2 ? n : fib(n - 1) + fib(n - 2);',
  "        if (n <= 1l) return 1l;\n        if (n <= 2l) return 1l;\n        if (n\
    \ == 3l) return 2l;\n        return fib((n - 1l) + fib((n - 2l)));", "       \
    \ Map<Long, Long> fibonacciNumbers = new HashMap<>();\n        fibonacciNumbers.put(0,\
    \ 0l);\n        fibonacciNumbers.put(1, 1l);\n        for (int i = 2; i <= n;\
    \ i++) {\n            fibonacciNumbers.put(i, fibonacciNumbers.get(i-1) + fibonacciNumbers.get(i-2));\n\
    \        }\n        return fibonacciNumbers.get(n);", "        if (n == 0L ||\
    \ n == 1L) return 1L;\n        if (n == 2L) return 2L;\n        long f = fib(n\
    \ - 1L);\n        return f*(1L) + 2L;", "        if (n < 2l) {\n            return\
    \ n;\n        }\n        return fib(n - 2l) + fib(n - 1l);", "        if(n ==\
    \ 0 || n == 1)\n            return n;\n        return fib(n-1) + fib(n-2);", " \
    \       long a, prev = 0, cur = 1;\n        for (int i = 1; i <= n; i++) {\n \
    \           prev = cur;\n            cur = prev + cur;\n        }\n        a =\
    \ prev;\n        return a;", "        if (n <= 1l)\n            return n;\n  \
    \      else\n            return fib(n - 2l) + fib(n - 1l);", "        final long\
    \ one = 1;\n        final long two = 2;\n        long current = one;\n       \
    \ while (n > 0) {\n            final long next = current + two;\n            current\
    \ = next;\n            n--;\n        }\n        return current;", "        if\
    \ (n <= 2l) return 1l;\n        return fib(n - 1l) + fib(n - 2l);", "        if\
    \ (n <= 0) {\n            throw new RuntimeException(\"Invalid input \" + n);\n\
    \        }\n        if (n <= 1l) {\n            return n;\n        }\n       \
    \ return fib((long) (n-1)) + fib((long) (n-2));", "        long f0 = 0, f1 = 1;\n\
    \        long f = f0;\n        do {\n            f += f1;\n            f1 = f0;\n\
    \            f0 = f;\n        } while (--n != 0);\n        return f;", "     \
    \   // Write your code here\n        if(n <= 2)\n            return n;\n     \
    \   long fib_n1 = fib(n-1) + fib(n-2);\n        return fib_n1;", "        if (n\
    \ == 0 || n == 1)\n            return n;\n        else\n            return fib(n\
    \ - 1) + fib(n - 2);", "        if (n <= 1l) {\n            return n;\n      \
    \  }\n        long ret = fib(n - 2l) + fib(n - 1l);\n        return ret;", " \
    \       if (n <= 1l) {\n            return n;\n        } else if (n <= 2l) {\n\
    \            return 1l;\n        } else {\n            return fib(n - 1l) + fib(n\
    \ - 2l);\n        }", "        if (n <= 1) return n;\n        return fib(n-1)\
    \ + fib(n-2);", "        if (n <= 1l)\n            return n;\n        else\n \
    \           return fib(n - 1l) + fib(n - 2l);", "        if (n <= 1l) {\n    \
    \        return 1l;\n        } else if (n <= 2l) {\n            return 2l;\n \
    \       } else {\n            return fib((n - 1l) + fib((n - 2l)));\n        }",
  "        long fib1 = 0, fib2 = 1;\n        long lastNumber = 0;\n        if (n <\
    \ 0) {\n            throw new IllegalArgumentException(\"Fibonacci number does\
    \ not exist for negative number!\");\n        }\n        if (n == 0 || n == 1)\
    \ {\n            return n;\n        } else {\n            while (fib1 <= n &&\
    \ fib2 <= n) {\n                lastNumber = fib2;\n                fib2 = fib1\
    \ + fib2;\n                fib1 = lastNumber - fib2;\n            }\n        \
    \    return lastNumber;\n        }", "        if (n < 2)\n            return n;\n\
    \        return fib(n - 2) + fib(n - 1);", "        if (n == 0 || n == 1) return\
    \ n;\n        return fib(n-1) + fib(n-2);", "        if ( n <= 1 ) {\n       \
    \     return n;\n        }\n        long a = fib(n - 1);\n        long b = fib(n\
    \ - 2);\n        return a + b;", "        if (n <= 1l) {\n            return 1l;\n\
    \        }\n        long f2 = fib(n-1l) - fib(n-2l);\n        return f2;", " \
    \       long fib1 = 0;\n        long fib2 = 1;\n        while (fib2 < n) {\n \
    \           fib1 = fib2;\n            fib2 = fib1 + fib2;\n        }\n       \
    \ return fib2;", "        long[] fibs = new long[n];\n        fibs[0] = 0;\n \
    \       fibs[1] = 1;\n        long a = 1;\n        long b = 1;\n        for (long\
    \ i = 0; i < n; i++) {\n            fibs[i] = a + b;\n            a += b;\n  \
    \          b += a;\n        }\n        return fibs[n];", "        if (n == 0)\
    \ {\n            return 0;\n        } else if (n == 1) {\n            return 1;\n\
    \        } else {\n            return fib(n - 1) + fib(n - 2);\n        }", " \
    \       long f1 = 1, f2 = 1;\n        long fib = 1;\n        while(n-- > 0) {\n\
    \            fib = (f1 + f2);\n            f1 = f2;\n            f2 = fib;\n \
    \       }\n        return fib;", "        long a = 1, b = 1;\n        if (n <=\
    \ 2) return n;\n        for (; n > 0; --n) {\n            a = b;\n           \
    \ b = a + b;\n        }\n        return a;", "        if (n == 0)\n          \
    \  return 0;\n        if (n == 1)\n            return 1;\n        long x = fib(n\
    \ - 1);\n        long y = fib(n - 2);\n        return x + y;", "        long x\
    \ = 1;\n        long y = 1;\n        long result;\n        for (long i = 2; i\
    \ <= n; i++) {\n            result = x;\n            x = x + y;\n            y\
    \ = result - x;\n        }\n        return y;", "        if (n <= 1l) return 1l;\n\
    \        else         return fib(n - 1l) + fib(n - 2l);", "        // See https://en.wikipedia.org/wiki/Fibonacci_number#Recursive_formula.\n\
    \        if (n < 2) return 1;\n        return fib(n - 1) + fib(n - 2);", "   \
    \     if (n < 2) return 1;\n        else return fib((n - 1) + fib((n - 2)));",
  "        if (n <= 1l) return 1l;\n        if (n <= 2l) return 1l;\n        return\
    \ fib(n - 1) + fib(n - 2);", "        // Return Fibonacci number given n.\n  \
    \      long f = 1;\n        long g = 2;\n        while (n > 1) {\n           \
    \ long r = g;\n            g = f + g;\n            f = r;\n            n = n -\
    \ 1;\n        }\n        return f;", "        Set<Long> s = new HashSet<>();\n\
    \        s.add(0l);\n        s.add(1l);\n        for (long i = 2; i <= n; i++)\
    \ {\n            s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(s.add(",
  "        if ((n == 0l) || (n == 1l)) {\n            return n;\n        }\n     \
    \   return fib(n - 1l) + fib(n - 2l);", "        if (n <= 1L) {\n            return\
    \ n;\n        }\n        else {\n            return fib(n-1) + fib(n-2);\n   \
    \     }", '        return n <= 0 ? 1 : fib(n - 1) + fib(n - 2);', "        if\
    \ (n == 0) return 0;\n        else if (n == 1) return 1;\n        return fib((n-1))\
    \ + fib((n-2));", "        long f = 1;\n        for (int i = 1; i <= n; i++) {\n\
    \            f = f * i;\n        }\n        return f;", "        long x = 0, y\
    \ = 1;\n        while (n > 1) {\n            long next = y + x;\n            x\
    \ = y;\n            y = next;\n            n -= 1;\n        }\n        return\
    \ y;", "        if (n <= 1) {\n            return n;\n        }\n        return\
    \ fib(n - 1) + fib(n - 2);", "        if (n <= 1) return n;\n        return fib(n\
    \ - 1) + fib(n - 2);", "        long a = 0, b = 1, c = 1;\n        for (int i\
    \ = 0; i < n; i++) {\n            long next = b;\n            b += c;\n      \
    \      c = next;\n        }\n        return a;", "        if(n == 0)\n       \
    \     return 0;\n        if(n == 1)\n            return 1;\n        return fib(n\
    \ - 1) + fib(n - 2);", "        if (n >= 1l && n <= 4l) {\n            return\
    \ (long) (1l * ((2l + (3l + 4l * n)) + ((5l + 6l * n) * (2l + 3l))))\n       \
    \             + (((3l + 2l * n) * (5l + 6l * n)) + ((5l + 2l * (n + 1)) * (2l\
    \ + 3l)));\n        } else {\n            long a = fib(n - 1l);\n            long\
    \ b = fib(n - 2l);\n            return (a + b) / 2f;\n        }", "        long\
    \ a = 1;\n        long b = 1;\n        for (long i = 1; i <= n; i++) {\n     \
    \       long c = a + b;\n            a = b;\n            b = c;\n        }\n \
    \       return b;", "        if (n < 2) return n;\n        return fib(n-1) + fib(n-2);",
  "        if (n <= 1l) return 1l;\n        return fib((n - 1l) + fib((n - 2l)));",
  "        if (n <= 1) return n;\n        return fib(n - 2) + fib(n - 1);", "    \
    \    if (n <= 1)\n            return n;\n        return fib(n-1) + fib(n-2);",
  "        if (n < 2)\n            return n;\n        else {\n            long a =\
    \ fib(n-1l);\n            long b = fib(n-2l);\n            return a+b;\n     \
    \   }", "        if (n <= 0) {\n            return 0;\n        }\n        if (n\
    \ == 1) {\n            return 1l;\n        }\n        return fib(n - 1) + fib(n\
    \ - 2);", "        long first = 1;\n        long second = 1;\n        long sum\
    \ = first + second;\n        while (n > 1) {\n            long tmp = first;\n\
    \            first = second;\n            second = tmp + sum;\n            sum\
    \ -= second;\n            n -= 1;\n        }\n        return first;", "      \
    \  if (n <= 0) return 0L;\n        if (n <= 1L) return 1L;\n        return fib(n\
    \ - 1) + fib(n - 2L);", "        if (n <= 2) {\n            return n;\n      \
    \  }\n\n        return fib(n-2) + fib(n-1);", "        if (n <= 1l)\n        \
    \    return n\n        if (n == 2l)\n            return 1l\n        return fib(n\
    \ - 1) + fib(n - 2l)", "        if (n <= 1)\n            return n;\n        return\
    \ fib(n - 1) + fib(n - 2);", "        if (n <= 1l) 1l;\n        if (n <= 2l) 2l;\n\
    \        return fib(n-2l) + fib(n-1l);", "        if (n < 2l)\n            return\
    \ 1l;\n        else\n            return (fib(n - 2l) + fib(n - 2l));", "     \
    \   if (n <= 1) { return n; }\n        else { return fib(n-1) + fib(n-2); }",
  "        if (n <= 1) return n;\n        return fib(n-2) + fib(n-1);", "        if\
    \ (n == 1l)\n            return 1l;\n        if (n == 0l)\n            return\
    \ 0l;\n        return fib(n - 1l) + fib(n - 2l);", "        long prev = 1;\n \
    \       long curr = 1;\n        for (int i = 0; i < n; i++) {\n            curr\
    \ = prev + curr;\n            prev = curr;\n        }\n        return curr;",
  "        if (n <= 1l) return n;\n        long fibo = fib(n-1l) + fib(n-2l);\n  \
    \      return fibo;", "        if (n <= 2l) {\n            return 1l;\n      \
    \  }\n        return fib(n-1l) + fib(n-2l);", "        if (n <= 1l)\n        \
    \    return (1l);\n        else\n            return fib(n - 1) + fib(n - 2l);",
  "        if (n <= 1l) {\n            return (1l);\n        } else {\n          \
    \  return fib(n-1) + fib(n-2);\n        }", "        if (n <= 1) {\n         \
    \   return n;\n        }\n        long a = 1, b = 1;\n        while (a < n) {\n\
    \            long c = a + b;\n            a = b;\n            b = c;\n       \
    \ }\n        return b;", "        int[] a = new int[n];\n        a[0] = 0;\n \
    \       a[1] = 1;\n        for (int i = 2; i <= n; i++) {\n            a[i] =\
    \ a[i - 1] + a[i - 2];\n        }\n        return a[n - 1];", "        if (n ==\
    \ 0 || n == 1)\n            return n;\n        return fib(n - 1) + fib(n - 2);",
  "        long fib0 = 0l;\n        long fib1 = 0l;\n        for (long i = 2; i <=\
    \ n; i++) {\n            fib0 = fib1;\n            fib1 = fib0 + fib1;\n     \
    \   }\n        return fib1;", "        if (n <= 1l) return 1l;\n        return\
    \ fib(n - 2l) + fib(n - 1l);", "        long a = 1l;\n        long b = 1l;\n \
    \       for(long i = 0; i < n; i++) {\n            if((i & 1) == 1) {\n      \
    \          a = a + b;\n            }\n            b = a + b;\n        }\n    \
    \    return a;", "        long a = 0l, b = 1l, c = 1l;\n        for (;;) {\n \
    \           long next = b;\n            b =+ c;\n            c =+ next;\n    \
    \        if(b <= n) {\n                return b;\n            } else {\n     \
    \           a =+ c;\n                c = b;\n                b = a;\n        \
    \    }\n        }", "        if (n <= 1)\n            return 1;\n        else\n\
    \            return fib(n - 1) + fib(n - 2);", "        long ret = 1l;\n     \
    \   for (long i=2l; i<limit; i++) {\n            ret = ret + i;\n            if\
    \ (ret==n)\n                return ret;\n        }\n        return -1l; // Value\
    \ is not in the Fibonacci sequence.", "        if (n <= 1) return 1;\n       \
    \ if (n == 2) return 1;\n        return fib(n - 2) + fib(n - 1);", "        long\
    \ a = 0, b = 1, c;\n        for (int i = 0; i < n; i++) {\n            c = a +\
    \ b;\n            a = b;\n            b = c;\n        }\n        return c;", " \
    \       if ((n == 0l) || (n == 1l)) {\n            return n;\n        } else {\n\
    \            return fib(n - 1l) + fib(n - 2l);\n        }", "        if (n <=\
    \ 1l) return n;\n        return fib(n - 1l) + fib(n - 2l);"]
stop_tokens:
- "\n    }\n"
