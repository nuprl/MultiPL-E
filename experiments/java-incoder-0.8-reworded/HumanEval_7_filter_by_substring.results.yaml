language: java
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(i -> i.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter((s) -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String s : strings) {\n  \
    \          if (s.toLowerCase().contains(substring.toLowerCase())) {\n        \
    \        filtered.add(s);\n            }\n        }\n        return filtered;\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String str : strings) {\n  \
    \          if (str.contains(substring)) {\n                result.add(str);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011311
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        if (strings != null && substring != null)\
    \ {\n            for (String string : strings) {\n                if (string.contains(substring))\
    \ {\n                    filtered.add(string);\n                }\n          \
    \  }\n        }\n        return filtered;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ results = new ArrayList<>();\n        for (String string : strings) {\n    \
    \        if (string.contains(substring)) {\n                results.add(string);\n\
    \            }\n        }\n        return results;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String s: strings) {\n   \
    \         if (s.contains(substring)) {\n                filtered.add(s);\n   \
    \         }\n        }\n        return filtered;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (strings != null && strings.size()\
    \ > 0) {\n            for (String str : strings) {\n                if (str.contains(substring))\
    \ {\n                    result.add(str);\n                }\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for(String string : strings) {\n\
    \            if(string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(e -> e.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl90uj3zf.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(e -> e.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filteredStrings = new ArrayList<>();\n        // Loop over the input arraylist\n\
    \        for (String string : strings) {\n            // if substring is in input\
    \ string\n            if (string.contains(substring)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for(String s: strings) {\n    \
    \        if(s.contains(substring)) {\n                filtered.add(s);\n     \
    \       }\n        }\n        return filtered;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        if\
    \ (strings == null)\n            return null;\n        String filtered = strings.stream()\n\
    \                .filter(s -> s.contains(substring))\n                .collect(Collectors.joining());\n\
    \        return Arrays.asList(filtered);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwz5klcu2.java:20: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<String>\n   \
    \     return Arrays.asList(filtered);\n                            ^\n  where\
    \ T is a type-variable:\n    T extends Object declared in method <T>asList(T...)\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String s : strings) {\n  \
    \          if (s.toLowerCase().contains(substring.toLowerCase())) {\n        \
    \        filtered.add(s);\n            }\n        }\n        return filtered;\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        List<String>\
    \ filteredStrings = new ArrayList<>();\n\n        // Iterate all elements in the\
    \ list\n        for (int i = 0; i < strings.size(); i++) {\n            // The\
    \ current string to be filtered\n            String currString = strings.get(i);\n\
    \n            // Check if the substring is present in the current string\n   \
    \         // If it does then add the current string to the filtered list\n   \
    \         if (currString.contains(substring)) {\n                filteredStrings.add(currString);\n\
    \            }\n        }\n        return filteredStrings;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkjagma0n.java:28: error: incompatible types: List<String> cannot\
    \ be converted to ArrayList<String>\n        return filteredStrings;\n       \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ res = new ArrayList<String>();\n        for (String s : strings) {\n       \
    \     if (s.toLowerCase().contains(substring.toLowerCase())) {\n             \
    \   res.add(s);\n            }\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(x -> x.contains(substring))\n    \
    \            .collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wrfetpy.java:17: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .collect(Collectors.toList());\n\
    \                        ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<String>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filteredList = new ArrayList<>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring)) {\n                filteredList.add(s);\n\
    \            }\n        }\n        return filteredList;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(str -> str.contains(substring))\n\
    \                .collect(Collectors.toCollection(ArrayList<String>::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        List<String>\
    \ filtered = new ArrayList<>();\n        for (String string : strings) {\n   \
    \         if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgoh_xpkz.java:21: error: incompatible types: List<String> cannot\
    \ be converted to ArrayList<String>\n        return filtered;\n              \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String s : strings) {\n        \
    \    if (s.contains(substring)) {\n                filtered.add(s);\n        \
    \    }\n        }\n        return filtered;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ Arrays.stream(strings).filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpse5fk0od.java:15: error: no suitable method found for stream(ArrayList<String>)\n\
    \        return Arrays.stream(strings).filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \                     ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; ArrayList<String>\
    \ cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String str : strings) {\n\
    \            if (str.contains(substring))\n                filtered.add(str);\n\
    \        }\n        return filtered;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ filterBySubstring(strings, substring, null);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1atgtrvx.java:15: error: method filterBySubstring in class Problem\
    \ cannot be applied to given types;\n        return filterBySubstring(strings,\
    \ substring, null);\n               ^\n  required: ArrayList<String>,String\n\
    \  found:    ArrayList<String>,String,<null>\n  reason: actual and formal argument\
    \ lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011437
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filteredStrings = new ArrayList<String>();\n        for (String string : strings)\
    \ {\n            if (string.contains(substring)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ ret = new ArrayList<String>();\n\n        // Check every element of the list\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                ret.add(s);\n            }\n        }\n\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String string : strings) {\n   \
    \         if (string.contains(substring))\n                filtered.add(string);\n\
    \        }\n        return filtered;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring))\n                result.add(s);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(s -> s.contains(substring))\n    \
    \            .collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        //\
    \ If no substring supplied\n        if (substring == null) {\n            return\
    \ strings;\n        }\n        // Get all substring occurrences where the array\
    \ list index equals the given substring\n        ArrayList<String> filtered =\
    \ strings.stream().filter(string-> string.contains(substring)).collect(Collectors.toList());\n\
    \        // If substring not found in list return the original array list\n  \
    \      if (filtered.isEmpty()) {\n            return strings;\n        }\n   \
    \     // If substring found return the filtered array list\n        return filtered;\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzgxsf863.java:20: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        ArrayList<String> filtered = strings.stream().filter(string->\
    \ string.contains(substring)).collect(Collectors.toList());\n                \
    \                                                                            \
    \             ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(strings -> strings.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ejeb3b2.java:15: error: variable strings is already defined in\
    \ method filterBySubstring(ArrayList<String>,String)\n        return strings.stream().filter(strings\
    \ -> strings.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \                                       ^\n1 error\n"
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        if\
    \ (strings == null || substring==null) return strings;\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String str : strings) {\n        \
    \    if (str.contains(substring))\n                result.add(str);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(e -> e.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl90uj3zf.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(e -> e.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n            .filter(s -> s.contains(substring))\n        \
    \    .collect(Collectors.toCollection(ArrayList::new));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqu0d37lq.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring)) {\n                result.add(s);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        //\
    \ Filter array list to only include substring\n        ArrayList<String> filtered\
    \ = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring))\
    \ {\n                filtered.add(s);\n            }\n        }\n        return\
    \ filtered;\n    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        // Iterate over the list\n      \
    \  for (String s : strings) {\n            if (s.contains(substring)) {\n    \
    \            result.add(s);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(x -> x.contains(substring))\n    \
    \            .collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wrfetpy.java:17: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .collect(Collectors.toList());\n\
    \                        ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<String>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(string -> string.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppxp1vri9.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(string ->\
    \ string.contains(substring)).collect(Collectors.toList());\n                \
    \                                                                    ^\n    equality\
    \ constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n  where\
    \ R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    A extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    T#1 extends Object declared in interface Stream\n    T#2\
    \ extends Object declared in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n\n        strings.stream().filter(s ->\
    \ s.contains(substring)).forEach(filtered::add);\n\n        return filtered;\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for(String s : strings) {\n   \
    \         if(s.contains(substring)) {\n                filtered.add(s);\n    \
    \        }\n        }\n        return filtered;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ results = new ArrayList<String>();\n        Arrays.stream(strings).filter(s\
    \ -> s.contains(substring)).collect(Collectors.toList()).stream().forEach(results::add);\n\
    \        return results;\n    }\n    public static void main(String[] args) {\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq7qhx6ee.java:16: error: no suitable method found for stream(ArrayList<String>)\n\
    \        Arrays.stream(strings).filter(s -> s.contains(substring)).collect(Collectors.toList()).stream().forEach(results::add);\n\
    \              ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n   \
    \   (cannot infer type-variable(s) T#1\n        (argument mismatch; ArrayList<String>\
    \ cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String s : strings) {\n          \
    \  if (s.contains(substring)) {\n                result.add(s);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        Predicate<String>\
    \ pred = n -> n.contains(substring);\n        return strings.stream().filter(pred).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdx6hbidl.java:15: error: cannot find symbol\n        Predicate<String>\
    \ pred = n -> n.contains(substring);\n        ^\n  symbol:   class Predicate\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        if\
    \ (strings == null || substring == null) {\n            throw new IllegalArgumentException(\"\
    One or more arguments are null.\");\n        }\n        ArrayList<String> result\
    \ = new ArrayList<>();\n        for (String string : strings) {\n            if\
    \ (string.contains(substring)) {\n                result.add(string);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filteredList = new ArrayList<String>();\n        for (String string : strings)\
    \ {\n            if (string.contains(substring)) {\n                filteredList.add(string);\n\
    \            }\n        }\n        return filteredList;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n            .filter(x -> x.contains(substring))\n        \
    \    .collect(Collectors.toCollection(ArrayList::new));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String string : strings) {\n   \
    \         if (string.contains(substring))\n                filtered.add(string);\n\
    \        }\n        return filtered;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n            .filter(s -> s.contains(substring))\n        \
    \    .collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk81ssgbs.java:17: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            .collect(Collectors.toList());\n    \
    \                ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for(String s: strings) {\n            if(s.contains(substring))\
    \ {\n                result.add(s);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        boolean\
    \ found = false;\n        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filtered.add(string);\n                found = true;\n  \
    \          }\n        }\n        if (!found)\n            filtered.add(substring);\n\
    \        return filtered;\n    }\n    public static void main(String[] args) {\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfscpc5pr.java:28)\n"
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        List<String>\
    \ result = new ArrayList<>();\n        for (String string : strings) {\n     \
    \       if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2_0n9ug2.java:21: error: incompatible types: List<String> cannot\
    \ be converted to ArrayList<String>\n        return result;\n               ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        List<String>\
    \ result = new ArrayList<String>();\n        for(String s : strings) {\n     \
    \       if(s.contains(substring)) {\n                result.add(s);\n        \
    \    }\n        }\n        return (ArrayList<String>) result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011439
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        if (strings.size() == 0)\n    \
    \        return filtered;\n        for (String string : strings) {\n         \
    \   if (string.contains(substring))\n                filtered.add(string);\n \
    \       }\n        return filtered;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        //\
    \ Only works for unique results\n        Set<String> result = new HashSet<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result.stream().map(s\
    \ -> new ArrayList<String>(Arrays.asList(s))).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdyim414w.java:22: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return result.stream().map(s -> new ArrayList<String>(Arrays.asList(s))).collect(Collectors.toList());\n\
    \                                                                            \
    \            ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011439
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String string : strings) {\n     \
    \       if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011439
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String value : strings) {\n      \
    \      if(value.contains(substring)) {\n                result.add(value);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011439
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring))\n                result.add(s);\n        }\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        List<String>\
    \ filteredStrings = new ArrayList<>();\n        for (String str : strings) {\n\
    \            if (str.contains(substring))\n                filteredStrings.add(str);\n\
    \        }\n        return filteredStrings;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcmuisew6.java:20: error: incompatible types: List<String> cannot\
    \ be converted to ArrayList<String>\n        return filteredStrings;\n       \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011439
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n            .filter(string -> string.contains(substring))\n\
    \            .collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011440
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String string : strings) {\n     \
    \       if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter((s) -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppyup0uo0.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter((s) -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                            ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011439
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String s: strings) {\n   \
    \         if (s.contains(substring)) {\n                filtered.add(s);\n   \
    \         }\n        }\n        return filtered;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String string : strings) {\n   \
    \         if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String string : strings) {\n   \
    \         if (string.contains(substring))\n                filtered.add(string);\n\
    \        }\n        return filtered;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        if\
    \ (strings == null) return null;\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).contains(substring))\
    \ {\n                filtered.add(strings.get(i));\n            }\n        }\n\
    \        return filtered;\n    }\n    public static void main(String[] args) {\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011439
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        //\
    \ Only return strings containing given substring\n        ArrayList<String> filteredStrings\
    \ = new ArrayList<>();\n        for(String string : strings) {\n            if(string.contains(substring))\
    \ {\n                filteredStrings.add(string);\n            }\n        }\n\
    \        return filteredStrings;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        //\
    \ If this is not a substring then return same list\n        if (substring == null\
    \ || substring.trim().length() == 0) {\n            return strings;\n        }\n\
    \        // For each string in the list if substring is not in it then remove\
    \ it\n        return strings.stream()\n            .filter(s -> !s.contains(substring))\n\
    \            .collect(Collectors.toCollection(ArrayList<String>::new));\n    }\n\
    \    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo5cvt7l1.java:26)\n"
  stdout: ''
  timestamp: 1660011439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        //\
    \ TODO implement your code\n        return strings;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp038plzz6.java:20)\n"
  stdout: ''
  timestamp: 1660011439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(elem -> elem.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn1s142ka.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(elem -> elem.contains(substring)).collect(Collectors.toList());\n\
    \                                                                            \
    \    ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011439
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ newList = new ArrayList<String>();\n        for(String string : strings) {\n\
    \            if(string.contains(substring)) {\n                newList.add(string);\n\
    \            }\n        }\n        return newList;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011439
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n            .filter(s -> s.contains(substring))\n        \
    \    .collect(Collectors.toCollection(ArrayList::new));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(e -> e.contains(substring)).collect(Collectors.toCollection(()\
    \ -> new ArrayList<String>()));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"\
    john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011440
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring)) {\n                result.add(s);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (substring.equals(s)) {\n                result.add(s);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu5nqt05w.java:25)\n"
  stdout: ''
  timestamp: 1660011439
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        //\
    \ TODO: Implement this method\n        return strings;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprm1p0e5v.java:20)\n"
  stdout: ''
  timestamp: 1660011439
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ newStrings = new ArrayList<>();\n        for (String string : strings) {\n \
    \           if (string.contains(substring)) {\n                newStrings.add(string);\n\
    \            }\n        }\n        return newStrings;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011440
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(s -> s.contains(substring))\n    \
    \            .collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n            .filter(e -> e.contains(substring))\n        \
    \    .collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpud7h6qbr.java:17: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            .collect(Collectors.toList());\n    \
    \                ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011439
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String s : strings) {\n          \
    \  if (s.contains(substring)) {\n                result.add(s);\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        //\
    \ Filter strings that contain given substring and return the list of remaining\
    \ strings\n        ArrayList<String> stringsList = new ArrayList<String>();\n\
    \        List<String> filteredStrings = new ArrayList<String>();\n        for(String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         stringsList = stringsList.add(string);\n            } else {\n     \
    \           filteredStrings = filteredStrings.add(string);\n            }\n  \
    \      }\n        return stringsList;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps9dqpq50.java:20: error: incompatible types: boolean cannot be\
    \ converted to ArrayList<String>\n                stringsList = stringsList.add(string);\n\
    \                                             ^\n/tmp/tmps9dqpq50.java:22: error:\
    \ incompatible types: boolean cannot be converted to List<String>\n          \
    \      filteredStrings = filteredStrings.add(string);\n                      \
    \                               ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011439
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        if\
    \ (strings == null) return null;\n        ArrayList<String> result = new ArrayList<>();\n\
    \        for(String str: strings) {\n            if (str.contains(substring))\n\
    \                result.add(str);\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011440
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        //\
    \ Write your code here.\n        // Create an empty list to be return\n      \
    \  ArrayList<String> res = new ArrayList<>();\n        for (String s : strings)\
    \ {\n            if (s.contains(substring)) {\n                res.add(s);\n \
    \           }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011440
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(s -> s.contains(substring))\n    \
    \            .collect(Collectors.toCollection(ArrayList<String>::new));\n    }\n\
    \    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings\n            .stream()\n            .filter(s -> s.contains(substring))\n\
    \            .collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n            .filter(x -> x.contains(substring))\n        \
    \    .collect(Collectors.toCollection(ArrayList::new));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(str -> str.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(x -> x.contains(substring))\n    \
    \            .collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wrfetpy.java:17: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .collect(Collectors.toList());\n\
    \                        ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<String>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(s -> s.contains(substring))\n    \
    \            .collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String string : strings) {\n     \
    \       if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011439
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ newList = new ArrayList<String>();\n        for (String s : strings) {\n   \
    \         if (s.contains(substring)) {\n                newList.add(s);\n    \
    \        }\n        }\n        return newList;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011310
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(e -> e.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n            .filter(string -> string.contains(substring))\n\
    \            .collect(Collectors.toCollection(() -> new ArrayList<String>()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        //\
    \ Write your Java code here\n        ArrayList<String> filter = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filter.add(string);\n            }\n        }\n        return\
    \ filter;\n    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String str : strings) {\n  \
    \          if (str.contains(substring)) {\n                result.add(str);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(x -> x.contains(substring))\n    \
    \            .collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wrfetpy.java:17: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .collect(Collectors.toList());\n\
    \                        ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<String>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        //\
    \ Complete this method\n        ArrayList<String> filtered = new ArrayList<String>(strings);\n\
    \        return filtered;\n    }\n    public static void main(String[] args) {\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb3y4nwnc.java:21)\n"
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n            .filter(o -> o.contains(substring))\n        \
    \    .collect(Collectors.toCollection(ArrayList::new));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String s : strings) {\n        \
    \    if (substring.equals(s)) {\n                filtered.add(s);\n          \
    \  }\n        }\n        return filtered;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpez0sn97h.java:25)\n"
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String str : strings) {\n\
    \            if (str.contains(substring)) {\n                filtered.add(str);\n\
    \            }\n        }\n        return filtered;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011311
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ ret = new ArrayList<>();\n        for (int i = 0; i < strings.size(); i++) {\n\
    \            if (strings.get(i).contains(substring))\n                ret.add(strings.get(i));\n\
    \        }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"\
    john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        if (strings != null) {\n        \
    \    for (String s : strings) {\n                if (s.contains(substring)) {\n\
    \                    result.add(s);\n                }\n            }\n      \
    \  }\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"\
    john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n            .filter(s -> s.contains(substring))\n        \
    \    .collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk81ssgbs.java:17: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            .collect(Collectors.toList());\n    \
    \                ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        if\
    \ (strings != null) {\n            return strings.stream()\n                 \
    \   .filter(s -> s.contains(substring))\n                    .collect(Collectors.toList());\n\
    \        }\n        return strings;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4bm36xr.java:18: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                    .collect(Collectors.toList());\n\
    \                            ^\n    equality constraints: List<T#2>\n    lower\
    \ bounds: ArrayList<String>,Object\n  where R,A,T#1,T#2 are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqu0d37lq.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        if (strings == null || strings.size() ==\
    \ 0) return result;\n        String firstSubstring = strings.get(0).toLowerCase().substring(0,\
    \ substring.length());\n        for (int i = 0; i < strings.size(); i++) {\n \
    \           String currentString = strings.get(i);\n            if (currentString.toLowerCase().startsWith(firstSubstring))\
    \ {\n                result.add(currentString);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplzdcqyb0.java:29)\n"
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        if\
    \ (strings == null) {\n            throw new IllegalArgumentException(\"strings\
    \ cannot be null\");\n        }\n        if (substring == null) {\n          \
    \  throw new IllegalArgumentException(\"substring cannot be null\");\n       \
    \ }\n        ArrayList<String> filtered = new ArrayList<>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        strings.stream().filter((s) -> s.contains(substring)).forEachOrdered(result::add);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for(String string : strings) {\n    \
    \        if(string.toUpperCase().contains(substring.toUpperCase())) {\n      \
    \          filtered.add(string);\n            }\n        }\n        return filtered;\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring)) {\n                result.add(s);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings\n            .stream()\n            .filter(str -> str.contains(substring))\n\
    \            .collect(Collectors.toCollection(() -> new ArrayList<String>()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ newArrayList = new ArrayList<String>();\n        for (String string : strings)\
    \ {\n            if (string.contains(substring)) {\n                newArrayList.add(string);\n\
    \            }\n        }\n        return newArrayList;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        List<String>\
    \ filteredStrings = new ArrayList<String>();\n        // filter strings array\
    \ list by substring and assign filtered list to filteredStrings\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         filteredStrings.add(string);\n            }\n        }\n        // return\
    \ filtered list\n        return filteredStrings;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69fe9bf1.java:23: error: incompatible types: List<String> cannot\
    \ be converted to ArrayList<String>\n        return filteredStrings;\n       \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(s -> s.contains(substring))\n    \
    \            .collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy_kaef6i.java:17: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .collect(Collectors.toList());\n\
    \                        ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<String>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        List<String>\
    \ resultList = new ArrayList<>();\n        if (strings == null || strings.size()\
    \ == 0) {\n            return resultList;\n        }\n        if (substring ==\
    \ null || substring.length() == 0) {\n            return resultList;\n       \
    \ }\n        for(String s: strings) {\n            if (s.toLowerCase().contains(substring.toLowerCase()))\
    \ {\n                resultList.add(s);\n            }\n        }\n        return\
    \ resultList;\n    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ld8wobr.java:17: error: incompatible types: List<String> cannot\
    \ be converted to ArrayList<String>\n            return resultList;\n        \
    \           ^\n/tmp/tmp6ld8wobr.java:20: error: incompatible types: List<String>\
    \ cannot be converted to ArrayList<String>\n            return resultList;\n \
    \                  ^\n/tmp/tmp6ld8wobr.java:27: error: incompatible types: List<String>\
    \ cannot be converted to ArrayList<String>\n        return resultList;\n     \
    \          ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011441
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        //\
    \ Create a lambda that tests to see if given string contains substring parameter\n\
    \        Predicate<String> subPredicate = string -> string.contains(substring);\n\
    \        // Return an arraylist containing only those strings which match that\
    \ predicate\n        return strings.stream().filter(subPredicate).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphlbcye5w.java:16: error: cannot find symbol\n        Predicate<String>\
    \ subPredicate = string -> string.contains(substring);\n        ^\n  symbol: \
    \  class Predicate\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for(String s : strings) {\n         \
    \   if(s.contains(substring)) {\n                filtered.add(s);\n          \
    \  }\n        }\n        return filtered;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings\n                .stream()\n                .filter(string -> string.contains(substring))\n\
    \                .collect(Collectors.toCollection(ArrayList::new));\n    }\n \
    \   public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011442
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        //\
    \ Create new list of strings with filtered strings of input array\n        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        // Filter input list with given substring\
    \ and add those to output list\n        for(String str : strings) {\n        \
    \    // Check if the string contains the substring\n            if(str.contains(substring))\
    \ {\n                // Add string to output list with substring\n           \
    \     filtered.add(str);\n            }\n        }\n        // Return output list\n\
    \        return filtered;\n    }\n    public static void main(String[] args) {\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"john\"\
    )).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011442
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(s -> s.contains(substring))\n    \
    \            .collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011438
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(s -> s.contains(substring))\n    \
    \            .collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy_kaef6i.java:17: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .collect(Collectors.toList());\n\
    \                        ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<String>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011441
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(str -> str.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1hej0lkt.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(str -> str.contains(substring)).collect(Collectors.toList());\n\
    \                                                                            \
    \  ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011442
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String s : strings) {\n        \
    \    if (s.contains(substring)) {\n                filtered.add(s);\n        \
    \    }\n        }\n        return filtered;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filteredList = new ArrayList<String>();\n        for (String s : strings) {\n\
    \            if (s.contains(substring)) {\n                filteredList.add(s);\n\
    \            }\n        }\n        return filteredList;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011312
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter((s) -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String s: strings) {\n         \
    \   if (s.contains(substring)) {\n                filtered.add(s);\n         \
    \   }\n        }\n        return filtered;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        List<String>\
    \ filtered = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphjqwfm1f.java:21: error: incompatible types: List<String> cannot\
    \ be converted to ArrayList<String>\n        return filtered;\n              \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1660011442
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String string: strings) {\n      \
    \      if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011442
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filteredStrings = new ArrayList<>();\n        for (String string : strings)\
    \ {\n            if (string.contains(substring)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011442
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        // if strings contains substring,\
    \ add it to the result list\n        if (strings.stream().anyMatch(x -> x.contains(substring)))\
    \ {\n            result.addAll(strings);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppcsauv71.java:24)\n"
  stdout: ''
  timestamp: 1660011442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        //\
    \ If list is empty return same array\n        if(strings.isEmpty()) {\n      \
    \      return strings;\n        }\n        // If not empty loop over all strings\
    \ in list\n        for(String string : strings) {\n            // Check string\
    \ for substring\n            if(string.contains(substring)) {\n              \
    \  // Keep string\n                strings.add(string);\n            }\n     \
    \   }\n        return strings;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"\
    john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.ConcurrentModificationException\n\
    \tat java.base/java.util.ArrayList$Itr.checkForComodification(ArrayList.java:1013)\n\
    \tat java.base/java.util.ArrayList$Itr.next(ArrayList.java:967)\n\tat Problem.filterBySubstring(tmp6tz0d_tu.java:20)\n\
    \tat Problem.main(tmp6tz0d_tu.java:31)\n"
  stdout: ''
  timestamp: 1660011442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(x -> x.contains(substring))\n    \
    \            .collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8wrfetpy.java:17: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .collect(Collectors.toList());\n\
    \                        ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<String>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(string -> string.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011315
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filteredStrings = new ArrayList<>();\n        for (String string : strings)\
    \ {\n            if (string.contains(substring)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011442
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (int i = 0; i < strings.size();\
    \ i++) {\n            if (strings.get(i).contains(substring)) {\n            \
    \    result.add(strings.get(i));\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011442
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(input -> input.contains(substring))\n\
    \                .collect(Collectors.toCollection(ArrayList::new));\n    }\n \
    \   public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011442
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String string : strings) {\n     \
    \       if (string.contains(substring))\n                result.add(string);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String string : strings) {\n   \
    \         if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011439
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n\n        for (String string : strings) {\n\
    \            if (string.contains(substring))\n                result.add(string);\n\
    \        }\n\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011442
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(s -> s.contains(substring))\n    \
    \            .collect(toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4b8bed5t.java:17: error: cannot find symbol\n                .collect(toList());\n\
    \                         ^\n  symbol:   method toList()\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011442
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(o -> o.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011442
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring)) {\n                result.add(s);\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(string -> string.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppxp1vri9.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(string ->\
    \ string.contains(substring)).collect(Collectors.toList());\n                \
    \                                                                    ^\n    equality\
    \ constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n  where\
    \ R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    A extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    T#1 extends Object declared in interface Stream\n    T#2\
    \ extends Object declared in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String s : strings) {\n  \
    \          if (s.contains(substring))\n                filtered.add(s);\n    \
    \    }\n        return filtered;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb_09a48.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011436
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011309
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ results = new ArrayList<>();\n        for(String s : strings){\n           \
    \ if(s.contains(substring)) {\n                results.add(s);\n            }\n\
    \        }\n        return results;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011442
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqu0d37lq.java:15: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toList());\n\
    \                                                                          ^\n\
    \    equality constraints: List<T#2>\n    lower bounds: ArrayList<String>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011438
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        ArrayList<String>\
    \ ret = new ArrayList<String>();\n        for (int i=0; i<strings.size(); i++)\
    \ {\n            if (strings.get(i).contains(substring))\n                ret.add(strings.get(i));\n\
    \        }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList())), (\"\
    john\")).equals((new ArrayList<String>(Arrays.asList()))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xxx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"xxxAAA\"\
    , (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011442
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Filter an input array list of strings only for ones that\
    \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
    \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
    cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
    abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
    \ filterBySubstring(ArrayList<String> strings, String substring) {\n        return\
    \ strings.stream()\n                .filter(string -> string.contains(substring))\n\
    \                .collect(Collectors.toCollection(ArrayList::new));\n    }\n \
    \   public static void main(String[] args) {\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
    \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\"\
    , (String)\"xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    xxx\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"asd\", (String)\"\
    aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"xxx\"))), (\"xx\"\
    )).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\", (String)\"aaaxxy\"\
    , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
    \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
    prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
    grunt\", (String)\"prune\")))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011442
