name: HumanEval_66_digitSum
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Task\n    // Write a function that takes a string as input\
  \ and returns the sum of the upper characters only'\n    // ASCII codes.\n    //\
  \ Examples:\n    // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"\
  ))\n    // (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
  helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n  \
  \  // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    public static long digitSum(String\
  \ s) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(digitSum((\"\
  \")) == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
  abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
  woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
  \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) ==\
  \ (327l));\n    }\n\n}\n"
completions: ["        Map<Character, Integer> result = new HashMap<>();\n       \
    \ for(char c : s.toCharArray()) {\n            Integer curr = result.get(c);\n\
    \            if(curr == null) {\n                result.put(c, 1);\n         \
    \   } else {\n                result.put(c, curr + 1);\n            }\n      \
    \  }\n        return result.entrySet()\n                    .stream()\n      \
    \              .map(entry -> entry.getKey() - 'A' + 1)\n                    .sum();",
  "        long sum = 0;\n        for (char c: s.toCharArray()) {\n            sum\
    \ += (char) (c);\n        }\n        return sum;", "        if (s == null)\n \
    \           return 0;\n        long sum = 0;\n        for (char c : s.toCharArray())\
    \ {\n            if (Character.isUpperCase(c))\n                sum += (long)c;\n\
    \        }\n        return sum;", '        return IntStream.range(0, s.length()).filter(i
    -> s.charAt(i) > 64 && s.charAt(i) < 91).sum();', "        long sum = s.getBytes()\n\
    \                .mapToObj(x -> Character.toUpperCase((char) x))\n           \
    \     .sum();\n        return sum;", "        long sum = 0;\n        int digit\
    \ = 0;\n        for (int i = 0; i < s.length(); i++) {\n            digit = Character.digit(s.charAt(i),\
    \ 10);\n            if (digit != -1) {\n                sum += digit;\n      \
    \      }\n        }\n        return sum;", "        long sum = 0;\n        for\
    \ (char c : s.toCharArray()) {\n            if (c >= 'A' && c <= 'Z') {\n    \
    \            sum += (c - 'A' + 1);\n            }\n        }\n        return sum;",
  "        // Your code here\n        return 0;", "        long sum = 0;\n       \
    \ for (char c : s.toCharArray()) {\n            sum += Character.getNumericValue(c);\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (char c\
    \ : s.toCharArray()) {\n            sum += (int) c;\n        }\n        return\
    \ sum;", "        long result = 0;\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            char c = s.charAt(i);\n            if (c >= 'A' && c <= 'Z')\n\
    \                result += (c - 'A' + 1);\n        }\n        return result;",
  "        long sum = 0;\n        char c;\n        for (int i = 0; i < s.length();\
    \ ++i) {\n            c = s.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                sum+=Character.getNumericValue(c);\n            }\n     \
    \   }\n        return sum;", "        long result = 0;\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            char c = s.charAt(i);\n            result\
    \ += (int) c;\n        }\n        return result;", "        long result = 0;\n\
    \        for(char c : s.toCharArray()) {\n            if(c >= '0' && c <= '9')\
    \ {\n                result += c;\n            }\n        }\n        return result;",
  "        // Solution\n        // The idea is to convert each character in the string\
    \ to an int, and add them up together.\n        // This can be done as follows:\n\
    \        // 1. Convert each char in the string to an int\n        // 2. Add them\
    \ up\n        // 3. Convert the result to long\n        // 4. Return the result\
    \ as a long\n        // The method signature of the function looks like this:\n\
    \        // public static long digitSum(String s);\n        // The method should\
    \ be invoked like this:\n        // long result = digitSum(\"hello\");\n     \
    \   // Note that this can be done with very little code. Here is what it looks\
    \ like using Java 8+ features:\n        //  public static void digitSum(String\
    \ s) {\n        //      return s.chars()\n        //          .map(Character::getNumericValue)\n\
    \        //          .filter(x -> x >= '0' && x <= '9')\n        //          .mapToLong(x\
    \ -> x)\n        //          .sum();\n        //  }\n        // The code above\
    \ is written for Java 8+. Java 7 and lower requires you to convert the characters\
    \ to an int before adding them up. This can be done as follows:\n        // 1.\
    \ Iterate over the string\n        // 2. Convert the char to an int\n        //\
    \ 3. Add them up\n        // 4. Return the result as a long\n        // The code\
    \ looks like this:\n        long result = 0;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            int num = s.charAt(i) - '0';\n            result += num;\n\
    \        }\n        return result;", "        long result = 0;\n        IntIntMap\
    \ map = new IntIntMap();\n        for(int i=0;i<s.length();i++){\n           \
    \ int val = s.charAt(i);\n            map.put(val, map.getOrDefault(val, 0) +\
    \ 1);\n        }\n        IntIntMap sortedMap = map.sortByKey();\n        sortedMap.forEach((k,\
    \ v) -> result += k);\n        return result;", "        long ret = 0;\n     \
    \   for(char c: s.toCharArray()) {\n            int code = (int) c;\n        \
    \    if(code >= 32 && code <= 126)\n                ret += code;\n        }\n\
    \        return ret;", '        return s.replaceAll("\\p{Punct}+", "").replaceAll("\\D+","").length();',
  '        return s.chars().filter(c -> c > 48 && c < 58).mapToLong(c -> c - 48).sum();',
  "        long sum = 0;\n        int i = 0;\n        while (i < s.length()) {\n \
    \           try {\n                char c = s.charAt(i);\n                sum\
    \ += Character.toUpperCase(c) - 'A' + 10;\n            } catch (Exception ignored)\
    \ {\n            }\n            i++;\n        }\n        return sum;", '        return
    digitSum(s, 0);', "        long sum = 0l;\n        for (char c : s.toCharArray())\n\
    \            sum += (c == 'A' ? 97 : c == 'a' ? 90 : c - 'a' + 1);\n        return\
    \ sum;", "        // Solution\n        // 1) Create a character array and add\
    \ each letter to the character array via a for loop\n        // 2) Get each character\
    \ and convert it to a character value\n        // 3) Compare the character value\
    \ to 32 (ascii code for space) to find the numeric value\n        // 4) Add the\
    \ numeric value to the total to return\n        long[] lSum = new long[128];\n\
    \        for (char letter : s.toCharArray()) {\n            int letterInt = (int)\
    \ letter;\n            lSum[letterInt] += 1;\n        }\n        int sum = 0;\n\
    \        for (long n : lSum) {\n            if (n > 32) {\n                sum\
    \ += n - 32;\n            }\n        }\n        return sum;", "        if (s ==\
    \ null || s.trim().length() == 0) return 0L;\n        return s.chars().map(c ->\
    \ c - 'A' + 1).toArray().sum();", "        int sum = 0;\n        for (int i =\
    \ 0; i < s.length(); i++) {\n            sum += (int)s.charAt(i);\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (char c : s.toCharArray())\
    \ {\n            if (Character.isUpperCase(c)) {\n                sum += Character.getNumericValue(c);\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    int index;\n        for (index = 0; index < s.length(); index++) {\n    \
    \        sum += Character.getNumericValue(s.charAt(index));\n        }\n     \
    \   return sum;", "        int sum = 0;\n        for (char c : s.toCharArray())\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                sum += (c - 'A');\n\
    \            }\n        }\n        return sum;", "        int sum = 0;\n     \
    \   for (char ch : s.toCharArray()) {\n            int code = ch;\n          \
    \  if (Character.isUpperCase(ch))\n                code = Character.getNumericValue(ch);\n\
    \            sum += code;\n        }\n        return sum;", "        // Write\
    \ your code here\n        long sum = 0;\n        for(int i =0; i<s.length(); i++){\n\
    \            char ch = s.charAt(i);\n            if(Character.isUpperCase(ch)){\n\
    \                sum = sum + Character.getNumericValue(ch);\n            }\n \
    \       }\n        return sum;", "        LongStream longStream = LongStream\n\
    \                .generate(Character::isDigit)\n                .limit(s.length())\n\
    \                .boxed()\n                .map(x -> Long.parseLong(s.substring(x),\
    \ 10))\n                .filter(x -> x >= 'A' && x <= 'Z')\n                .mapToObj(x\
    \ -> x);\n\n        return longStream.sum();", "        Long sum = 0l;\n     \
    \   for(char c : s.toCharArray()){\n            if(Character.getType(c) == Character.UPPERCASE)\
    \ sum += Character.getNumericValue(c);\n        }\n        return sum;", "   \
    \     int sum = 0;\n        for (char c : s.toCharArray()) {\n            sum\
    \ += (int) c;\n        }\n        return sum;", '        return s.chars().filter(Character::isDigit).reduce((a,
    b) -> a + b);', "        long sum = 0;\n        for(char c : s.toCharArray())\
    \ {\n            if(Character.isUpperCase(c)) sum += Character.getNumericValue(c);\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (char c\
    \ : s.toUpperCase().toCharArray()) {\n            int code = c - 'A';\n      \
    \      if (code < 0)\n                code += 26;\n            sum += code;\n\
    \        }\n        return sum;", "        int sum = 0;\n        for (char c :\
    \ s.toCharArray()) {\n            if (Character.isUpperCase(c)) sum += c;\n  \
    \      }\n        return sum;", "        return s.chars()\n                .mapToObj(i\
    \ -> ((char)i).intValue())\n                .filter(i -> i>=65 && i<=90)\n   \
    \             .sum();", "        long sum = 0;\n        for(char c : s.toCharArray())\
    \ {\n            if('A' <= c && c <= 'Z') {\n                sum += (int)c;\n\
    \            }\n        }\n        return sum;", "        if (s.isEmpty())\n \
    \           return 0l;\n        long upperSum = 0l;\n        int length = s.length();\n\
    \        for (int i = 0; i < length; i++) {\n            char c = s.charAt(i);\n\
    \            if (Character.isUpperCase(c)) {\n                upperSum += Character.getNumericValue(c);\n\
    \            }\n        }\n        return upperSum;", '        return digitSum(s.codePoints().map(i
    -> Character.toUpperCase(i)).collect(Collectors.toList()));', "        // Your\
    \ code here\n        long sum = 0;\n        for( int i=0; i< s.length();i++ )\
    \ {\n            if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            \
    \    sum += Character.getNumericValue(s.charAt(i));\n            }\n        }\n\
    \        return sum;", "        long result = 0;\n        for(int i = 0; i < s.length();\
    \ i++){\n            result += s.charAt(i) - 'A' + 1;\n        }\n        return\
    \ result;", "        long sum = 0;\n        // Your code here\n        String\
    \ uppercase = s.replaceAll(\"[^A-Z]\", \"\");\n        for (char c : uppercase.toCharArray())\
    \ {\n            if (c >= 'A' && c <= 'Z')\n                sum += (c - 'A') *\
    \ Math.pow(26, s.length() - 1);\n        }\n        return sum;", "        //\
    \ Your code here\n        return 0;", "        int sum = 0;\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            sum += s.charAt(i) >= 'A' ? s.charAt(i)\
    \ - 'A' + 10 : s.charAt(i) - 'a' + 10;\n        }\n        return sum;", "   \
    \     long res = 0;\n        for (int i = 0; i < s.length(); i++) {\n        \
    \    if (Character.isUpperCase(s.charAt(i))) {\n                res += (int)Character.toUpperCase(s.charAt(i))\
    \ - 32;\n            }\n        }\n        return res;", "        return s.chars().filter(Character.isUpperCase)\n\
    \            .reduce(0l, (l1, l2) -> l1 + l2);", "        Long sum = 0;\n    \
    \    for(char c:s.toCharArray()) {\n            if(c>='a' && c<='z') {\n     \
    \           sum += (long)(c-'a');\n            }\n        }\n        return sum;",
  "        int sum = 0;\n        int i = 0;\n        while (i < s.length()) {\n  \
    \          int n = s.charAt(i) - 'A' + 1;\n            sum = sum * 10 + n;\n \
    \           i++;\n        }\n        return sum;", "        // Complete the function\n\
    \        long sum = 0l;\n        for (int i = 0; i< s.length(); i++) {\n     \
    \       int val = (int)s.charAt(i);\n            sum = sum + val;\n        }\n\
    \        return sum;", "        return s.chars().map(c -> c - 'a' + 10).sum();",
  "        int sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n        \
    \    int upper = Character.getNumericValue(s.charAt(i));\n            sum += upper;\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (Character\
    \ c : s.toUpperCase().toCharArray())\n            if (Character.isUpperCase(c))\
    \ sum += (c - 'A') + 10;\n        return sum;", "        long sum = 0;\n     \
    \   for (char c : s.toCharArray()){\n            if (Character.isUpperCase(c)){\n\
    \                sum += Character.getNumericValue(c);\n            }\n       \
    \ }\n        return sum;", "        int sum = 0;\n        for (int i = 0; i <\
    \ s.length(); i++) {\n            String substring = s.substring(i, i + 1);\n\
    \            int upper = Character.getNumericValue(substring.charAt(0)) - 96;\n\
    \            sum += upper;\n        }\n        return sum;", "        // Complete\
    \ the implementation here\n        int sum = 0;\n        for(int i=0;i<s.length();i++)\
    \ {\n            char c = s.charAt(i);\n            if(Character.isUpperCase(c))\n\
    \                sum++;\n        }\n        return sum;", "        if (s == null\
    \ || s.length() == 0) {\n            return 0L;\n        }\n        long sum =\
    \ 0L;\n        for (int i = 0; i < s.length(); i++) {\n            int digit =\
    \ Character.getNumericValue(s.charAt(i));\n            if (digit > 'a') {\n  \
    \              sum += digit;\n            } else {\n                return 0L;\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                sum += Character.toUpperCase(s.charAt(i)) - 'A' + 1;\n  \
    \          }\n        }\n        return sum;", '        return s.codePoints().sum();',
  "        // TODO: write your solution here\n        long sum = 0;\n        for(char\
    \ c : s.toCharArray()){\n            if(Character.getType(c) == Character.UPPERCASE_LETTER){\n\
    \                sum += Character.getNumericValue(c);\n            }\n       \
    \ }\n        return sum;", "        long sum = 0;\n        for (char c : s.toCharArray())\
    \ {\n            sum = (sum + Character.getNumericValue(c));\n        }\n    \
    \    return sum;", "        Set<Character> set = s.chars().mapToObj(c -> Character.toUpperCase(c)).collect(Collectors.toSet());\n\
    \        LongStream stream = set.stream().mapToLong(c -> (long)c);\n        long\
    \ sum = 0;\n        while (stream.anyMatch(c -> c > 90)) {\n            stream.skip(1);\n\
    \            sum++;\n        }\n        return sum;", "        long sum = 0;\n\
    \        for (int i = 0; i < s.length(); i++) {\n            int value = s.charAt(i)\
    \ - 'A';\n            if (value < 0) value += 26;\n            sum += value;\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (char c\
    \ : s.toCharArray()) {\n            if (Character.isDigit(c)) {\n            \
    \    sum += c - '0';\n            }\n        }\n        return sum;", "      \
    \  long sum = 0;\n        char[] chars = s.toCharArray();\n        for (char c\
    \ : chars) {\n            sum += Character.isUpperCase(c) ? Character.toUpperCase(c)\
    \ - 'A'\n                    : Character.toLower(c) - 'a';\n        }\n      \
    \  return sum;", "        final String digits = \"0123456789abcdefghijklmnopqrstuvwxyz\"\
    ;\n        long result = 1;\n        for (char c : s.toCharArray()) {\n      \
    \      result += digits.indexOf(c);\n        }\n        return result;", "   \
    \     long sum = 0l;\n        for (char c : s.toCharArray()) {\n            if\
    \ (Character.isUpperCase(c)) {\n                sum += Character.getNumericValue(c);\n\
    \            }\n        }\n        return sum;", "        long sum = 0;\n    \
    \    for (Character c: s.toUpperCase().toCharArray())\n            sum += Character.getNumericValue(c.toUpperCase());\n\
    \        return sum;", "        Long sum = 0;\n        for(int i = 0; i < s.length();\
    \ i++) {\n            int x = s.codePointAt(i);\n            if((x < 48 || x >\
    \ 57)) {\n                sum += x;\n            }\n        }\n        return\
    \ sum;", "        // Initialize your variables here.\n        long sum = 0;\n\
    \        // Check input\n        if (s == null || s.isEmpty()) throw new IllegalArgumentException(\"\
    Input cannot be empty.\");\n        // Iterate through input\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            // Read ASCII code\n            int\
    \ code = s.codePointAt(i);\n            // Add ASCII code\n            sum +=\
    \ code;\n        }\n        // Return result\n        return sum;", "        long\
    \ sum = 0;\n        for(int i=0; i<s.length(); i++) {\n            int c = s.charAt(i)\
    \ - 'A';\n            sum += c;\n        }\n        return sum;", "        if\
    \ (s == null || s.isEmpty()) return 0L;\n        long sum = 0;\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            int c = Character.codePointAt(s,\
    \ i);\n            if (Character.isUpperCase(c)) sum += c;\n        }\n      \
    \  return sum;", "        // Solution\n        // Convert the string to a char\
    \ array, map each char codes to their ascii codes, and sum the array's elements.\n\
    \        return Arrays.stream(s)\n            .map(Character::getNumericValue)\n\
    \            .sum();", "        long result = 0;\n        for(char c: s.toCharArray())\
    \ {\n            if(Character.getNumericValue(c) >= 65 && Character.getNumericValue(c)\
    \ <= 66) {\n                result += Character.getNumericValue(c);\n        \
    \    }\n        }\n        return result;", "        long result = 0;\n      \
    \  for (int i = 0; i < s.length(); i++) {\n            if (Character.getNumericValue(s.charAt(i))\
    \ > 0) {\n                result += Character.getNumericValue(s.charAt(i));\n\
    \            }\n        }\n        return result;", "        // Complete the code\
    \ here\n        char[] a = s.toCharArray();\n        long result = 0;\n      \
    \  for(char c : a)\n        {\n           result += (c >= 65 && c <= 90) ? c -\
    \ 65 : 0;\n        }\n        return result;", "        long sum = 0;\n      \
    \  int size = s.length();\n        for (int i = 0; i < size; i++) {\n        \
    \    sum += s.charAt(i) - 'A' + 1;\n        }\n        return sum;", "       \
    \ return s.chars().filter(c -> (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')).sum();",
  "        if (s.equals(\"\")) return 0;\n        long sum = 0;\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            sum += Character.digit(s.charAt(i),\
    \ 10);\n        }\n        return sum;", "        int sum = 0;\n        for(char\
    \ c: s.toCharArray()) {\n            if(Character.isUpperCase(c)) {\n        \
    \        sum = sum + Character.getNumericValue(c);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            if (Character.getNumericValue(s.charAt(i)) - 65 <= 65) {\n\
    \                sum += Character.getNumericValue(s.charAt(i));\n            }\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (char c:\
    \ s.toCharArray()) {\n            sum += Character.toUpperCase(c) - 'A' + 1;\n\
    \        }\n        return sum;", "        if (s == null || s.isEmpty()) {\n \
    \           return 0L;\n        }\n        long sum = 0L;\n        for (int i\
    \ = 1; i < s.length(); i++) {\n            int c = s.charAt(i);\n            sum\
    \ += c >= '0' && c <= '9' ? c - '0' : 0;\n        }\n        return sum;", " \
    \       long sum = 0;\n        for (char c : s.toCharArray()) {\n            sum\
    \ += (c > 64 && c < 91) ? c - 64 : c - 97;\n        }\n        return sum;", '        return
    s.chars().mapToObj(c -> Character.getNumericValue(c)).sum();', "        long sum\
    \ = 0;\n        for(int i =0; i<s.length(); i++) {\n            if(Character.isUpperCase(s.charAt(i)))\
    \ sum += s.charAt(i) - 64;\n        }\n        return sum;", "        long sum\
    \ = 0;\n        for( int i = 0; i < s.length(); i++ ) {\n            String upperChars\
    \ = s.substring( i, i + 1 ).toUpperCase();\n            sum += upperChars.getBytes(\"\
    ISO-8859-1\")[0]; // 'A' = 65\n            sum += upperChars.getBytes(\"ISO-8859-1\"\
    )[1]; // 'a' = 97\n            sum += upperChars.getBytes(\"ISO-8859-1\")[2];\
    \ // 'A' = 65\n            sum += upperChars.getBytes(\"ISO-8859-1\")[3]; // 'a'\
    \ = 97\n            sum += upperChars.getBytes(\"ISO-8859-1\")[4]; // 'X' = 98\n\
    \        }\n        return sum;", "        // Write your code here\n        long\
    \ sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                sum += Character.getNumericValue(s.charAt(i));\n        \
    \    }\n        }\n        return sum;", '        return s.chars().filter(c ->
    (int) c >= 32 && (int) c <= 122).sum();', '        return s.chars().filter(Character::isDigit).mapToLong(Character::getNumericValue).sum();',
  "        long sum = 0;\n        for(char c : s.toCharArray()) {\n            if(Character.isDigit(c))\
    \ {\n                sum += c - '0';\n            }\n        }\n        return\
    \ sum;", "        long sum = 0l;\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            sum = sum + Character.toUpperCase(s.charAt(i));\n        }\n\
    \        return sum;", "        int sum=0;\n        for (char c: s.toCharArray())\
    \ {\n            sum += (c > 'A' && c < 'Z') ? c-'A'+10 : c-'a'+10;\n        }\n\
    \        return sum;", "        return Arrays.stream(s.toCharArray()).filter(c\
    \ -> c >= '0' && c <= '9').sum();", "        if (s == null || s.isEmpty()) return\
    \ 0;\n        long result = 0;\n        for (Character c : s.toCharArray()) {\n\
    \            result += (long)c.charValue();\n        }\n        return result;",
  "        \n        return s.chars()\n                .filter(Character::isLetter)\n\
    \                .mapToObj(String::valueOf)\n                .mapToLong(Integer::parseInt)\n\
    \                .sum();", "        // Your code here\n        char[] chars =\
    \ s.toCharArray();\n        Arrays.sort(chars);\n        int sum = 0;\n      \
    \  for(int i = 0; i <chars.length; i++){\n            sum += (char) (int) chars[i];\
    \ \n        }\n        return sum;", "        // Solution\n        // Write a\
    \ method that returns a long value equal to the sum of the digits in a number\n\
    \        // that are not included in the string. The number consists of uppercase\
    \ and lowercase\n        // letters. Uppercase letters have the decimal code of\
    \ 65. Lowercase letters have the decimal\n        // code of 97.\n        // Examples:\n\
    \        // >>> digitSum(\"a\")\n        // 97\n        // >>> digitSum(\"B\"\
    )\n        // 65\n        // >>> digitSum(\"ABC\")\n        // 153\n        //\
    \ >>> digitSum(\"helloE\")\n        // 69\n        // >>> digitSum(\"woArBld\"\
    )\n        // 131\n        // >>> digitSum(\"aAaaaXa\")\n        // 153\n    \
    \    // >>> digitSum(\"AaaaXa\")\n        // 65\n        // >>> digitSum(\"123\"\
    )\n        // 123\n        long sum = 0;\n        char[] chars = s.toCharArray();\n\
    \        for (int i = 0; i < chars.length; ++i) {\n            char c = chars[i];\n\
    \            if (Character.isUpperCase(c)) {\n                sum += (c - ((char)65));\n\
    \            } else if (Character.isLowerCase(c)) {\n                sum += (c\
    \ - ((char)97));\n            }\n        }\n        return sum;", "        return\
    \ s.chars().filter(Character::isLetter)\n            .mapToLong(Character::getNumericValue)\n\
    \            .sum();", "        int sum = 0;\n        for (char c : s.toCharArray())\
    \ {\n            if (Character.isUpperCase(c)) sum += (c - 'A');\n        }\n\
    \        return sum;", "        long result = 1;\n        for (char c : s.toCharArray())\
    \ {\n            result += (long)c;\n        }\n        return result;", "   \
    \     long sum = 0;\n        \n        // convert string to character array\n\
    \        char[] arr = s.toCharArray();\n        // iterate over character array\n\
    \        for(int i = 0; i < arr.length; i++) {\n            // check if current\
    \ character is an uppercase character\n            if(Character.isUpperCase(arr[i]))\
    \ {\n                // check if current character is letter\n               \
    \ if(Character.isLetter(arr[i])) {\n                    // increment sum\n   \
    \                 sum += arr[i] - 'A' + 1;\n                }\n            }\n\
    \        }\n        \n        return sum;", "        if (s == null) {\n      \
    \      return 0l;\n        }\n        return Long.parseLong(s.replaceAll(\"[^0-9]+\"\
    , \"\"));", "        long sum = 0;\n        for (char c : s.toUpperCase().toCharArray())\
    \ {\n            if (Character.isDigit(c)) {\n                sum += (int) c;\n\
    \            }\n        }\n        return sum;", "        long result = 0;\n \
    \       for (char c : s.toCharArray()) {\n            result += Character.getNumericValue(c);\n\
    \        }\n        return result;", "        return IntStream.range(0, s.length())\n\
    \            .filter(i -> i >= 0 && i <= s.length() - 1)\n            .mapToLong(i\
    \ -> {\n                char c = s.charAt(i);\n                return (c - 'A'\
    \ + 10l) * (c - 'a' + 10l);\n            })\n            .sum();", "        //\
    \ split into letters and numbers\n        List<String> letters = Arrays.stream(s.split(\"\
    (?!^)\")) //split into letters and numbers\n                .map(word -> word.substring(0,\
    \ 1).toLowerCase() + word.substring(1).toLowerCase()) //make lowercase for first\
    \ letter\n                .collect(Collectors.toList()); //convert to list\n \
    \       List<String> numbers = Arrays.stream(s.split(\"(?!^)\")) //split into\
    \ letters and numbers\n                .map(word -> word.substring(0, 1)) //make\
    \ lowercase for first letter\n                .collect(Collectors.toList()); //convert\
    \ to list\n        // map letters to sums of digits for each letter\n        Map<String,\
    \ Long> letterToSum = letters.stream()\n                .collect(Collectors.toMap(\n\
    \                        letter, letter -> numbers.stream().filter(number -> number.startsWith(letter)).mapToLong(number\
    \ -> Integer.parseInt(number)).sum()));\n        // return sum\n        return\
    \ letterToSum.entrySet().stream().mapToLong(e -> e.getValue()).sum();", "    \
    \    int sum = 0;\n        for(char c : s.toUpperCase().toCharArray()) {\n   \
    \         sum += (int) c;\n        }\n        return sum;", "        long sum\
    \ = 0;\n        for (char c : s.toCharArray()) {\n            if ('A' <= c &&\
    \ c <= 'Z') {\n                sum += c - 'A';\n            }\n        }\n   \
    \     return sum;", "        long sum = 0;\n        // loop over all chars in\
    \ the string\n        for (int i = 0; i < s.length(); i++) {\n            // get\
    \ char at current position\n            char c = s.charAt(i);\n            //\
    \ if the char is 'A', add the int value\n            if (c == 'A') {\n       \
    \         sum += 10;\n            } else {\n                sum += (int)c;\n \
    \           }\n        }\n        return sum;", "        // Your code here\n \
    \       long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n      \
    \      if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n                sum =\
    \ sum + s.charAt(i) - 'A' + 1;\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        for (char c : s.toCharArray()) {\n            sum\
    \ += c - 'a';\n        }\n        return sum;", "        long total = 0l;\n  \
    \      for (char c : s.toCharArray()) {\n            if ('z' <= c && c <= 'z'\
    \ + 26)\n                total += c - 'z';\n        }\n        return total;",
  "        final int l=s.length();\n        final int s=s.codePoints().filter(c ->\
    \ Character.isUpper(c)).reduce(0,(a,b) -> a+b);\n        return ((long)(s*Math.pow(10,l))+((long)l-s)%l);",
  "        // Solution\n        long sum = 0;\n        int len = 0;\n\n        for\
    \ (char c : s.toCharArray()) {\n            if (Character.isDigit(c)) {\n    \
    \            sum += c - '0';\n                len++;\n            }\n        }\n\
    \        \n        long n = len > 0 ? sum / len : 0;\n        return n;", "  \
    \      // write your code here\n        long sum = 0;\n        for(char ch : s.toCharArray()){\n\
    \            int code = (int)ch;\n            sum += code;\n        }\n      \
    \  return sum;", "        return s.chars().mapToObj(c -> (char) c).filter(c ->\
    \ c >= 'A' && c <= 'Z').sum();", '        return s.chars().mapToObj(i -> (char)
    i).filter(x -> x >= 65 && x <= 90).sum();', "        int sum = 0;\n        for(int\
    \ i=0; i<s.length(); i++) {\n            int index = s.charAt(i) - 48;\n     \
    \       sum += Math.pow(10, index);\n        }\n        return sum;", "      \
    \ // Your code here\n        long sum=0l\n        for(char c: s.toCharArray()){\n\
    \            if(Character.isUpperCase(c)){\n                sum+=Character.getNumericValue(c);\n\
    \            }\n        }\n        return sum;", "        // write your code in\
    \ Java 7\n        // or write your code in Java 8\n        // or write your code\
    \ in Java 9\n        // or write your code in Java 10\n        String upperCase\
    \ = s.toUpperCase();\n        char[] arr = upperCase.toCharArray();\n        Arrays.sort(arr);\n\
    \        long sum = 0;\n        for (int i = 0; i < arr.length; i++) {\n     \
    \       if (i > 0 && arr[i] == arr[i - 1]) {\n                sum += 1;\n    \
    \        }\n        }\n        return sum;", "        long sum = 0;\n        for\
    \ (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n    \
    \        if (c >= 'A' && c <= 'Z')\n                sum += Character.getNumericValue(c);\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (char c\
    \ : s.toCharArray()) {\n            sum += Character.getNumericValue(c);\n   \
    \     }\n        return sum;", "        long result = 0;\n        for (char c\
    \ : s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n        \
    \        result += Character.getNumericValue(c);\n            }\n        }\n \
    \       return result;", "        long sum = 0l;\n        for (char c : s.toCharArray())\
    \ {\n            sum = (sum * 10) + (c - 'A');\n        }\n        return sum;",
  "        long[] chars = new long[s.length()];\n        for (int i = 0; i < s.length();\
    \ i++) {\n            chars[i] = Character.toUpperCase(s.charAt(i));\n       \
    \ }\n        long total = 0;\n        for (int i = 0; i < chars.length; i++) {\n\
    \            total += chars[i];\n        }\n        return total;", "        long\
    \ sum = 0;\n        char[] chars = s.toCharArray();\n        for (char c : chars)\
    \ {\n            if (Character.isUpperCase(c)) {\n                sum += Character.toUpperCase(c)\
    \ - 'A' + 10;\n            }\n        }\n        return sum;", "        long sum\
    \ = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            if (Character.isUpperCase(c)) {\n                sum += c - 'A' +\
    \ 10;\n            }\n        }\n        return sum;", "        return s.chars().mapToLong(c\
    \ -> c - 'A' + 1).sum();", "        String upperChars = s.replaceAll(\"[A-Z]\"\
    , \"\");\n        return Long.parseLong(upperChars);", "        int sum = 0;\n\
    \        // convert string to char array\n        char[] chars = s.toCharArray();\n\
    \        for (char c : chars) {\n            // check if char is uppercase\n \
    \           if (Character.isUpperCase(c)) {\n                // add ascii code\
    \ of this char to sum\n                sum += Character.getNumericValue(c);\n\
    \            }\n        }\n        // return sum of upper chars\n        return\
    \ (long)sum;", "        // Solution\n        // If s contains only letters:\n\
    \        // return the length of s\n        if (s.matches(\"[a-zA-Z]+\")) {\n\
    \            return s.length();\n        }\n        // If s contains only digits:\n\
    \        // return the sum of ASCII codes of uppercase letters in s\n        if\
    \ (s.matches(\"[0-9]+\")) {\n            List<Integer> list = new ArrayList<Integer>();\n\
    \            for (int i = 0; i < s.length(); i++) {\n                if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                    list.add(s.charAt(i) - 'A' + 1);\n                }\n\
    \            }\n            int sum = list.stream().reduce(0, Integer::sum);\n\
    \            return sum;\n        }\n        throw new IllegalArgumentException(\"\
    Not a number.\");", "        // TODO: Write your code here\n        \n       \
    \ long[] result = new long[s.length()];\n        int sum = 0;\n        for(int\
    \ i = 0; i < s.length(); i++) {\n            sum = Character.getNumericValue(s.charAt(i))\
    \ + sum;\n        }\n        return sum;", "        long sum = 0;\n        for\
    \ (char c : s.toCharArray()) {\n            sum += Character.getNumericValue(c);\n\
    \        }\n        return sum;", "        long sum = 0;\n        for (char c\
    \ : s.toCharArray()) {\n            sum += (long)c - (long)'A' + 1;\n        }\n\
    \        return sum;", "        return s.chars()\n                .filter(Character::isLetter)\n\
    \                .mapToObj(c -> c - 'A' + 1)\n                .sum();", "    \
    \    if(s == null || s.isEmpty()) throw new IllegalArgumentException();\n    \
    \    long sum = 0;\n        for(char c : s.toCharArray()){\n            if(Character.isUpperCase(c))\
    \ sum += Character.getNumericValue(c);\n        }\n        return sum;", '        return
    IntStream.range(0, s.length()).filter(i -> s.codePointAt(i) > 64).sum();', '        return
    Long.parseLong(s.replaceAll("[^\\d.]", ""));', "        long sum = 0;\n      \
    \  for (char c : s.toCharArray()) {\n            sum += Character.getNumericValue(c);\n\
    \        }\n        return sum;", "        long sum = 0;\n        for(char ch\
    \ : s.toCharArray())\n            sum += ch - 'a' + 1; // convert letter to number\n\
    \        return sum;", '        return s.replaceAll("(?i)^\\p{Upper}", "").replaceAll("^\\p{Upper}",
    "").length();', "        if (s == null || s.length() == 0) {\n            return\
    \ 0;\n        }\n        int sum = 0;\n        for (char c : s.toCharArray())\
    \ {\n            if (Character.isUpperCase(c)) {\n                sum += (c -\
    \ 'A' + 1);\n            }\n        }\n        return sum;", "        return s.chars().filter(x\
    \ -> x <= 90 && x >= 'a').sum();", "        return Arrays.stream(s.chars()).filter(c\
    \ -> 'A' <= c && c <= 'Z' || 'a' <= c && c <= 'z').sum();", "        long sum\
    \ = 0;\n        for (char c : s.toCharArray()) {\n            if (Character.isUpperCase(c))\
    \ {\n                sum += Character.getNumericValue(c);\n            }\n   \
    \     }\n        return sum;", "        // Your code here\n        long sum =\
    \ 0;\n        String temp = s.replaceAll(\"[A-Z]\", \"\");\n        for(char c\
    \ : temp.toCharArray()){\n            sum += c;\n        }\n        return sum;",
  "        //\n        // Write your code in here.\n        //\n        return 0;",
  "        long sum = 0;\n        // Write your solution here\n        return sum;",
  "        return s.chars().filter( c -> c >= '0' && c <= '9' ).sum();", "       \
    \ long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n            char\
    \ c = s.charAt(i);\n            sum += Character.getNumericValue(c);\n       \
    \ }\n        return sum;", "        int sum = 0;\n        for(int i = 0; i < s.length();\
    \ i++) {\n            if(s.charAt(i) >= 65 && s.charAt(i) <= 90) {\n         \
    \       sum += s.charAt(i);\n            }\n        }\n        return sum;", " \
    \       long sum = 0;\n        for (char c : s.toCharArray()) {\n            sum\
    \ += c;\n        }\n        return sum;", "        long sum = 0;\n        for\
    \ (char c : s.toUpperCase().toCharArray()) {\n            if (Character.getType(c)\
    \ == Character.UPPERCASE_LETTER) {\n                sum += (int)c;\n         \
    \   }\n        }\n        return sum;", "        String clean = s.replaceAll(\"\
    \\\\p{Punct}\", \"\");\n        if (clean.isEmpty()) {\n            return 0L;\n\
    \        }\n        long[] charCounts = new long[256];\n        for (char c :\
    \ clean.toCharArray()) {\n            charCounts[(int) c]++;\n        }\n    \
    \    long sum = 0L;\n        for (int i : charCounts) {\n            if (charCounts[i]\
    \ > 1) {\n                sum += i;\n            }\n        }\n        return\
    \ sum;", "        long sum = 0;\n        for(int i : s.codePoints()) {\n     \
    \       sum += (long)Math.pow(9, i);\n        }\n        return sum;", "     \
    \   // TODO: Write a function that takes a string as input and returns the sum\
    \ of the upper characters only'\n        // ASCII codes.\n        // Examples:\n\
    \        // >>> digitSum((\"\"))\n        // (0l)\n        // >>> digitSum((\"\
    abAB\"))\n        // (131l)\n        // >>> digitSum((\"abcCd\"))\n        //\
    \ (67l)\n        // >>> digitSum((\"helloE\"))\n        // (69l)\n        // >>>\
    \ digitSum((\"woArBld\"))\n        // (131l)\n        // >>> digitSum((\"aAaaaXa\"\
    ))\n        // (153l)\n        int sum = 0;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            int ascii = s.charAt(i);\n            if (ascii >= 65 &&\
    \ ascii <= 91) {\n                sum += ascii;\n            }\n        }\n  \
    \      return sum;", "        long sum = 0;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            char c = s.charAt(i);\n            int digit = (int) c -\
    \ 'A';\n            sum += digit;\n        }\n        return sum;", "        long\
    \ result = 0;\n        for (int i = 0; i < s.length(); i++) {\n            result\
    \ += Character.toUpperCase(s.charAt(i)) - 'A' + 1l;\n        }\n        return\
    \ result;", "        String str = s.replaceAll(\"[^a-zA-Z]\", \"\").toLowerCase();\n\
    \        return str.chars().filter(Character::isDigit).sum();", "        \n  \
    \      return s.chars().mapToObj(c -> (char) c).filter(c -> Character.getType(c)\
    \ == Character.UPPER_CASE_LETTER).mapToLong(c -> (char) c).sum();", "        long\
    \ sum = 0;\n        for (char c : s.toUpperCase().toCharArray())\n           \
    \ if (c >= '0' && c <= '9')\n                sum += c - '0';\n        return sum;",
  "        int sum = 0;\n        for(int i = 0; i < s.length(); i++) {\n         \
    \   if(Character.isUpperCase(s.charAt(i))) {\n                sum += (int) s.charAt(i);\n\
    \            }\n        }\n        return sum;", "        \n        return 0;",
  "        return Arrays.stream(s.toCharArray())\n                .mapToLong(c ->\
    \ ((c - 'A') + 10))\n                .reduce(0l);", "        if (s.isEmpty())\
    \ return 0L;\n        return s.chars()\n                .map(i -> i < 128 ? i\
    \ : i-128).sum();", "        int sum = 0;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            sum += Character.getNumericValue(s.charAt(i));\n       \
    \ }\n        return sum;", "        // Your code goes here\n        return 0;",
  "        int sum = 0;\n        for(char c : s.toCharArray()) {\n            sum\
    \ += (int) c;\n        }\n        return sum;", "        Map<Character, Long>\
    \ result = new HashMap<>();\n        for (char c : s.toCharArray()) {\n      \
    \      long value = result.getOrDefault(c, (Long) 0l);\n            result.set(c,\
    \ value + (char) c);\n        }\n        return result.values().stream().sum();",
  '        ', "        // Your code here\n        long sum = 0;\n        for (int\
    \ i = 0; i < s.length(); i++) {\n            try {\n                sum += Character.toUpperCase(s.charAt(i));\n\
    \            } catch (Exception e) {\n                System.out.println(\"Invalid\
    \ input!\");\n            }\n        }\n        return sum;", "        if (s ==\
    \ null || s.length() == 0) {\n            return 0L;\n        }\n        Set<Character>\
    \ set = s.chars().boxed().collect(Collectors.toSet());\n        return set.stream().filter(c\
    \ -> (c >= 'A') && (c <= 'Z')).mapToLong(c -> (int) (c - 'A')).sum();", "    \
    \    Map<Character, Long> map = s.chars().mapToObj(c -> c)\n                .collect(Collectors.groupingBy(\n\
    \                        c -> Character.getType(c) == Character.UPPER_CASE ? c\
    \ : null,\n                        Collectors.counting()\n                ));\n\
    \        long sum = 0;\n        for (Long value : map.values()) {\n          \
    \  sum += value;\n        }\n        return sum;", "        if (s == null) {\n\
    \            return 0L;\n        }\n        Map<Character, Integer> map = new\
    \ TreeMap<>();\n        for (char c : s.toCharArray()) {\n            map.put(c,\
    \ map.getOrDefault(c, 0) + 1);\n        }\n        long result = map.values().stream().map(l\
    \ -> l * l).sum();\n        return result;", "        long sum = 0;\n        for\
    \ (int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n    \
    \        if (Character.isUpperCase(c)) sum += (long)c;\n        }\n        return\
    \ sum;", "        // Your code here\n        String uperCase = s.replaceAll(\"\
    (?i)[^A-Z]\", \"\");\n        long sum = 0;\n        for (char c : uperCase.toCharArray())\n\
    \            if (c >= 'A' && c <= 'Z')\n                sum = sum + c - 'A' +\
    \ 10;\n        return sum;", "        long sum = 0;\n        for (char ch : s.toUpperCase())\
    \ {\n            sum += (int) ch;\n        }\n        return sum;", "        int\
    \ total = 0;\n        for (char c : s.toCharArray()) {\n            total += (int)\
    \ c;\n        }\n        return total;", "        long result = 0;\n        for(int\
    \ i = 0; i < s.length(); i++) {\n            result += s.charAt(i) - 'A';\n  \
    \      }\n        return result;", '        // YOUR CODE HERE', "        long\
    \ result = 0;\n        for(int i = 0; i<s.length(); i++) {\n            char c\
    \ = s.charAt(i);\n            if(Character.isUpperCase(c)) {\n               \
    \ result+=Character.getNumericValue(c);\n            }\n        }\n        return\
    \ result;", "        long sum = 0;\n        final int length = s.length();\n \
    \       for (int i = 0; i < length; i++)\n            if (Character.isUpperCase(s.charAt(i)))\n\
    \                sum = sum + s.charAt(i) - 'A' + 10;\n            else\n     \
    \           sum = sum + s.charAt(i);\n        return sum;", "        // Your code\
    \ goes here\n        long sum = 0;\n        for (int i = 0; i < s.length(); i++)\
    \ {\n            if (Character.isUpperCase(s.charAt(i))) {\n                sum\
    \ += s.charAt(i) - 'A' + 1;\n            }\n        }\n        return sum;", '        return
    s.chars().mapToObj(c -> (char) c).filter(c -> Character.isUpperCase(c)).sum();',
  "        // SOLUTION 1:\n        // Create a String-Iterator\n        // Create\
    \ an empty int array and assign it to an int value\n        // For each character\
    \ in the string, increase the int value by its ASCII code\n        // If the character\
    \ is uppercase, set the int value to a new int value\n        // Add the int array\
    \ value to the long value\n        // Return the long value\n        // SOLUTION\
    \ 2:\n        // Use a stream to split the string\n        // Map the characters\
    \ to an int\n        // Reduce the stream to a sum using reduce\n        // Return\
    \ a Long value\n        // SOLUTION 3:\n        // Use a stream to split the string\
    \ and map to chars\n        // Reduce the stream to a sum using reduce\n     \
    \   // Return the Long value\n        // SOLUTION 4:\n        // Use a Stream\
    \ and a lambda to split the string\n        // Map the characters to an int\n\
    \        // Reduce the stream to a sum using reduce\n        // Return a Long\
    \ value\n        // SOLUTION 5:\n        // Use a Stream and a lambda to split\
    \ the string\n        // Map the characters to an int\n        // Reduce the stream\
    \ to a sum using reduce\n        // Return a Long value\n        // SOLUTION 6:\n\
    \        // Use a Stream and a lambda to split the string\n        // Map the\
    \ characters to an int\n        // Reduce the stream to a sum using reduce\n \
    \       // Return a Long value\n        // SOLUTION 7:\n        // Use a Stream\
    \ and a lambda to split the string\n        // Map the characters to an int\n\
    \        // Reduce the stream to a sum using reduce\n        // Return a Long\
    \ value\n        // SOLUTION 8:\n        // Use a Stream and a lambda to split\
    \ the string\n        // Map the characters to an int\n        // Reduce the stream\
    \ to a sum using reduce\n        // Return a Long value\n        // SOLUTION 9:\n\
    \        // Use a Stream and a lambda to split the string\n        // Map the\
    \ characters to an int\n        // Reduce the stream to a sum using reduce\n \
    \       // Return a Long value\n        // SOLUTION 10:\n        // Use a Stream\
    \ and a lambda to split the string\n        // Map the characters to an int\n\
    \        // Reduce the stream to a sum using reduce\n        // Return a Long\
    \ value\n        // SOLUTION 11:\n        // Use a Stream and a lambda to split\
    \ the string\n        // Map the characters to an int\n        // Reduce the stream\
    \ to a sum using reduce\n        // Return a Long value\n        // SOLUTION 12:\n\
    \        // Use a Stream and a lambda to split the string\n        // Map the\
    \ characters to an int\n        // Reduce the stream to a sum using reduce\n \
    \       // Return a Long value\n        // SOLUTION 13:\n        // Use a Stream\
    \ and a lambda ", "        if (s == null)\n            throw new IllegalArgumentException(\"\
    Cannot process empty string\");\n        char[] chars = s.toCharArray();\n   \
    \     Arrays.sort(chars);\n        return chars.reduce(0, (l, c) -> {\n      \
    \      return l + Character.getNumericValue(c);\n        });", '        return
    s.chars().filter(Character::isDigit).mapToLong(Character::getNumericValue).sum();',
  '       return s.chars().filter(Character::isLetterOrDigit).mapToLong(Character::getNumericValue).sum();',
  "        long sum = 0;\n        for (int i = 0; i < s.length(); i++) {\n       \
    \     if (Character.isUpperCase(s.charAt(i))) {\n                sum += Character.getNumericValue(s.charAt(i));\n\
    \            }\n        }\n        return sum;", "        // base case first char,\
    \ should be 0\n        // if character is >9 or < 0, return -1\n        long sum\
    \ = 0;\n        long sumOfUpper = 0;\n        long sumOfUpperOfLower = 0;\n\n\
    \        char[] charArray = s.toCharArray();\n        // loop through char array\n\
    \        for (int i = 0; i < charArray.length; i++) {\n            char c = charArray[i];\n\
    \            if (c >= 'A' && c <= 'Z') {\n                sum += charArray[i];\n\
    \            } else if (c >= 'a' && c <= 'z') {\n                sumOfUpper +=\
    \ charArray[i];\n            }\n        }\n\n        // if character is >9 or\
    \ < 0, return -1\n        if (sum < 0) {\n            return -1;\n        } else\
    \ {\n            return sum;\n        }", "        int sum = 0;\n        for (char\
    \ c: s.toCharArray()) {\n            if (Character.isUpperCase(c)) {\n       \
    \         sum += c - 'A' + 1;\n            }\n        }\n        return sum;",
  "        return s.chars().filter(c -> c >= 'A' && c <= 'Z').mapToObj(Integer::parseInt).sum();",
  "        // Your code here\n        StringBuilder sb = new StringBuilder(s);\n \
    \       long sum = 0;\n        for(int i = 0; i < s.length(); i++) {\n       \
    \     int val = sb.charAt(i) - 96;\n            sum += val;\n        }\n     \
    \   return sum;", "        int sum = 0;\n        for(int i=0;i<s.length();i++){\n\
    \            char c = s.charAt(i);\n            if(Character.isUpperCase(c)){\n\
    \                sum = sum + Character.getNumericValue(c);\n            }\n  \
    \      }\n        return sum;", "        int sum = 0;\n        for (int i = 0;\
    \ i < s.length(); i++) {\n            if (Character.isUpperCase(s.charAt(i)))\
    \ {\n                sum += s.charAt(i) - 'A' + 1;\n            }\n        }\n\
    \        return sum;", "        int sum = 0;\n        for (int i = 0; i < s.length();\
    \ i++) {\n            int n = s.charAt(i) - 'A' + 1;\n            sum = sum +\
    \ n;\n        }\n        return sum;", "        // Your code here\n        long\
    \ sum = 0;\n        for(int i=0; i<s.length(); i++) {\n            if((int)s.charAt(i)\
    \ > 96 && s.charAt(i) < 123)\n                sum += (int)s.charAt(i);\n     \
    \   }\n        return sum;", "        int sum = 0;\n        boolean foundUpper\
    \ = false;\n\n        // The loop through each character in the string\n     \
    \   for(int i = 0; i < s.length(); i++) {\n            // Get the ASCII code of\
    \ the character\n            int code = s.charAt(i); // Get the ASCII code of\
    \ the character\n            // If the ASCII code is a letter, then...\n     \
    \       if (code >= 'a' && code <= 'z') // If the character is a letter\n    \
    \        {\n                // Add the ASCII code to the sum\n               \
    \ sum += code; // Add the ASCII code to the sum\n                // If the letter\
    \ is upper case, then ...\n                if (code >= 'A' && code <= 'Z') {\n\
    \                    foundUpper = true; // Set the boolean flag to true so we\
    \ don't add it again\n                }\n                // Else, if the letter\
    \ is not upper case, then ...\n                else if (code < 'A' || code > 'Z')\
    \ {\n                    foundUpper = false; // Set the boolean flag to false\
    \ so we don't add it again\n                }\n            }\n            // Else,\
    \ if the ASCII code is not a letter, then ...\n            else {\n          \
    \      foundUpper = false; // Set the boolean flag to false so we don't add it\
    \ again\n            }\n        }\n        // Return just the sum of the upper\
    \ characters\n        return foundUpper ? sum : 0;"]
stop_tokens:
- "\n    }\n"
