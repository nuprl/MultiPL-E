language: java
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        long max = Long.MIN_VALUE;\n        long min = Long.MAX_VALUE;\n    \
    \    for (long num : nums) {\n            sum += num;\n            if (max < num)\
    \ max = num;\n            if (min > num) min = num;\n        }\n        if (sum\
    \ != 0) {\n            long newSum = 0;\n            for (long num : nums) {\n\
    \                newSum += num;\n                if (newSum > sum) {\n       \
    \             boolean isFirst = true;\n                    for (long i : nums)\
    \ {\n                        if (i > 0) {\n                            if (isFirst)\
    \ {\n                                result.add(max);\n                      \
    \          isFirst = false;\n                            } else {\n          \
    \                      result.add(num);\n                            }\n     \
    \                   }\n                    }\n                    break;\n   \
    \             }\n            }\n        }\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2gl9900h.java:51)\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        Set<Long> sortedNums\
    \ = new HashSet<>();\n        for(Long num : nums) {\n            long currentSum\
    \ = 0;\n            while(num != 0) {\n                currentSum += num % 10;\n\
    \                num /= 10;\n            }\n            if(!sortedNums.contains(currentSum))\
    \ {\n                sortedNums.add(currentSum);\n                result.add(num);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqf36lv8n.java:35)\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     List<Long> sortedNums = new ArrayList<Long>();\n\n        /*\n         *\
    \ Sorting the list first by sum of the digits and then\n         * by their original\
    \ index in the original list if two numbers\n         * have same sum of digits.\n\
    \         */\n        Map<Long, List<Long>> sortedBySum = nums.stream()\n    \
    \            .collect(Collectors.groupingBy(n -> n, Collectors.reducing(Math::add,\
    \ Collectors.toList())))\n                .entrySet().stream().sorted(Map.Entry.<Long,\
    \ List<Long>>comparingByValue()\n                        .thenComparing(Map.Entry.comparingByKey()))\n\
    \                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n\
    \n        sortedNums.addAll(sortedBySum.keySet());\n        sortedNums.addAll(sortedBySum.values());\n\
    \n        return sortedNums;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsy2mz6iw.java:27: error: invalid method reference\n           \
    \     .collect(Collectors.groupingBy(n -> n, Collectors.reducing(Math::add, Collectors.toList())))\n\
    \                                                                           ^\n\
    \  cannot find symbol\n    symbol:   method add()\n    location: class Math\n\
    /tmp/tmpsy2mz6iw.java:28: error: method comparingByValue in interface Entry<K,V>\
    \ cannot be applied to given types;\n                .entrySet().stream().sorted(Map.Entry.<Long,\
    \ List<Long>>comparingByValue()\n                                            \
    \         ^\n  required: no arguments\n  found:    no arguments\n  reason: explicit\
    \ type argument List<Long> does not conform to declared bound(s) Comparable<?\
    \ super List<Long>>\n  where K,V are type-variables:\n    K extends Object declared\
    \ in interface Entry\n    V extends Object declared in interface Entry\n/tmp/tmpsy2mz6iw.java:30:\
    \ error: incompatible types: cannot infer type-variable(s) T,K#1,U\n         \
    \       .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n\
    \                                         ^\n    (argument mismatch; invalid method\
    \ reference\n      method getKey in interface Entry<K#2,V> cannot be applied to\
    \ given types\n        required: no arguments\n        found:    Object\n    \
    \    reason: actual and formal argument lists differ in length)\n  where T,K#1,U,K#2,V\
    \ are type-variables:\n    T extends Object declared in method <T,K#1,U>toMap(Function<?\
    \ super T,? extends K#1>,Function<? super T,? extends U>)\n    K#1 extends Object\
    \ declared in method <T,K#1,U>toMap(Function<? super T,? extends K#1>,Function<?\
    \ super T,? extends U>)\n    U extends Object declared in method <T,K#1,U>toMap(Function<?\
    \ super T,? extends K#1>,Function<? super T,? extends U>)\n    K#2 extends Object\
    \ declared in interface Entry\n    V extends Object declared in interface Entry\n\
    /tmp/tmpsy2mz6iw.java:33: error: incompatible types: Collection<List<Long>> cannot\
    \ be converted to Collection<? extends Long>\n        sortedNums.addAll(sortedBySum.values());\n\
    \                       "
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     if (nums.isEmpty()) {\n            return nums;\n        }\n        // sort\
    \ the array list in descending order\n        ArrayList<Long> result = new ArrayList<Long>(nums);\n\
    \        result.sort(Comparator.comparingLong(num -> (num % 10)));\n        //\
    \ create an array list of the sum of digits of the numbers in the list\n     \
    \   ArrayList<Integer> sumOfDigit = new ArrayList<Integer>();\n        for (int\
    \ i = 0; i < result.size(); i++) {\n            sumOfDigit.add((result.get(i)\
    \ % 10));\n        }\n        ArrayList<Integer> result = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < sumOfDigit.size(); i++) {\n            Integer sum\
    \ = sumOfDigit.get(i);\n            for (int j = 0; j < result.size(); j++) {\n\
    \                Integer temp = result.get(j);\n                if ((temp % 10)\
    \ == sum) {\n                    result.add(j, temp);\n                }\n   \
    \         }\n        }\n        // sort the array list in ascending order\n  \
    \      return result.stream().sorted(Comparator.comparingLong(num -> (num % 10)).thenComparingLong(num\
    \ -> num)).collect(Collectors.toList());\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpurqd9euz.java:28: error: incompatible types: long cannot be converted\
    \ to Integer\n            sumOfDigit.add((result.get(i) % 10));\n            \
    \                              ^\n/tmp/tmpurqd9euz.java:30: error: variable result\
    \ is already defined in method orderByPoints(ArrayList<Long>)\n        ArrayList<Integer>\
    \ result = new ArrayList<Integer>();\n                           ^\n/tmp/tmpurqd9euz.java:41:\
    \ error: bad operand types for binary operator '%'\n        return result.stream().sorted(Comparator.comparingLong(num\
    \ -> (num % 10)).thenComparingLong(num -> num)).collect(Collectors.toList());\n\
    \                                                                           ^\n\
    \  first type:  Object\n  second type: int\n/tmp/tmpurqd9euz.java:41: error: incompatible\
    \ types: bad return type in lambda expression\n        return result.stream().sorted(Comparator.comparingLong(num\
    \ -> (num % 10)).thenComparingLong(num -> num)).collect(Collectors.toList());\n\
    \                                                                            \
    \                               ^\n    Object cannot be converted to long\n/tmp/tmpurqd9euz.java:41:\
    \ error: incompatible types: inference variable R has incompatible bounds\n  \
    \      return result.stream().sorted(Comparator.comparingLong(num -> (num % 10)).thenComparingLong(num\
    \ -> num)).collect(Collectors.toList());\n                                   \
    \                                                                            \
    \         ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<Long>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n5 errors\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Integer, Long> map = new TreeMap<>();\n        Set<Map.Entry<Integer,\
    \ Long>> set = nums.stream().map(Number::longValue).collect(Collectors.toSet());\n\
    \        for (Map.Entry<Integer, Long> entry : set) {\n            map.put(entry.getKey(),\
    \ entry.getValue());\n        }\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        for (Integer i : map.keySet()) {\n            res.add(map.get(i));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6goxq9g.java:20: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        Set<Map.Entry<Integer, Long>> set = nums.stream().map(Number::longValue).collect(Collectors.toSet());\n\
    \                                                                            \
    \            ^\n    equality constraints: Entry<Integer,Long>\n    lower bounds:\
    \ Long\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>toSet()\n1 error\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     \n        // Sort the list in descending order based on the sum of their\
    \ digits.\n        Collections.sort(nums, new Comparator<Long>() {\n         \
    \   public int compare(Long o1, Long o2) {\n                String o1Str = o1.toString();\n\
    \                String o2Str = o2.toString();\n                return o1Str.substring(o1Str.length()\
    \ - 1).compareTo(o2Str.substring(o2Str.length() - 1));\n            }\n      \
    \  });\n        \n        // Order the list in ascending order based on their\
    \ index in original list if possible.\n        ArrayList<Long> ans = new ArrayList<Long>();\n\
    \        \n        // To avoid duplicate values in ascending order\n        //\
    \ we only add non-duplicate values to ans list.\n        Set<Long> set = new HashSet<Long>();\n\
    \        \n        for (Long num : nums) {\n            if (!set.add(num)) {\n\
    \                ans.add(num);\n            }\n        }\n        \n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwuxzgw8y.java:45)\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long, Integer> sumToIndex = new HashMap<>();\n        int index = 0;\n\
    \        for (Long num : nums) {\n            Integer sum = sumToIndex.get(num);\n\
    \            if (sum == null) {\n                sumToIndex.put(num, index++);\n\
    \            } else {\n                Integer currentIndex = sumToIndex.get(num);\n\
    \                while (currentIndex != index) {\n                    sumToIndex.put(num,\
    \ (currentIndex + index) % nums.size());\n                    currentIndex = sumToIndex.get(num);\n\
    \                }\n            }\n        }\n        ArrayList<Long> result =\
    \ new ArrayList<Long>(nums);\n        for (Long num : sumToIndex.keySet()) {\n\
    \            result.add(nums.get(sumToIndex.get(num)));\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbq4ua0zy.java:40)\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        if (nums.size()\
    \ > 0) {\n            long sumOfDigits = nums.stream().mapToLong(Long::longValue).sum();\n\
    \            ArrayList<Long> digitSum = new ArrayList<Long>();\n            int\
    \ count = 0;\n            for (long num : nums) {\n                long tempSumOfDigits\
    \ = Math.abs(num) * num / sumOfDigits;\n                while (tempSumOfDigits\
    \ > 0) {\n                    digitSum.add(tempSumOfDigits);\n               \
    \     tempSumOfDigits--;\n                }\n                while (!digitSum.contains(sumOfDigits))\
    \ {\n                    count++;\n                    sumOfDigits += sumOfDigits\
    \ / 10;\n                }\n            }\n            Collections.sort(digitSum);\n\
    \            int digitCount = 0;\n            int digitSumCount = 0;\n       \
    \     int pointCount = 0;\n            int pointSumCount = 0;\n            int\
    \ totalDigitSum = 0;\n            int totalPointSum = 0;\n            for (long\
    \ sum : digitSum) {\n                totalDigitSum += sum;\n                totalPointSum\
    \ += sum / 10;\n            }\n            if (totalDigitSum != digitSum.get(digitSumCount\
    \ - 1)) {\n                pointCount++;\n            }\n            for (long\
    \ sum : digitSum) {\n                if (sum == digitSum.get(digitSumCount - 1))\
    \ {\n                    pointSumCount++;\n                }\n            }\n\
    \            for (long sum : digitSum) {\n                if (sum == totalDigitSum)\
    \ {\n                    pointCount++;\n                }\n            }\n   \
    \         Collections.sort(nums);\n            Collections.reverse(nums);\n  \
    \          for (long num : nums) {\n                while (num < totalPointSum)\
    \ {\n                    pointSumCount--;\n                    pointCount--;\n\
    \                    num++;\n                }\n                while (pointSumCount\
    \ < 0) {\n                    pointCount++;\n                    pointSumCount++;\n\
    \                    num++;\n                }\n                result.add(num);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     int n = nums.size();\n        ArrayList<Long> result = new ArrayList<>(n);\n\
    \        // find sum of digits by iterating all numbers\n        // if sum of\
    \ digits != 0, add to result list\n        for (int i = 0; i < n; ++i) {\n   \
    \         long sum = nums.get(i);\n            int digits = 0;\n            while\
    \ (sum > 0) {\n                sum += nums.get(i++);\n                digits++;\n\
    \            }\n            result.add((long)Math.pow(10, digits));\n        }\n\
    \n        // sort the result list by summing digits and index\n        Collections.sort(result,\
    \ (a, b) -> {\n            int compare = a.longValue() - b.longValue();\n    \
    \        if (compare != 0) {\n                return compare;\n            } else\
    \ {\n                return Integer.compare(a.intValue(), b.intValue());\n   \
    \         }\n        });\n\n        // put numbers back\n        ArrayList<Long>\
    \ newNums = new ArrayList<>(n);\n        newNums.addAll(result.subList(0, n));\n\
    \        Collections.reverse(newNums);\n        return newNums;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp07y7lr01.java:35: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int compare = a.longValue() - b.longValue();\n\
    \                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> ordered = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (long num : nums) {\n            sum += num;\n        }\n       \
    \ if (sum > 0) {\n            for (long num : nums) {\n                if (num\
    \ == sum) {\n                    ordered.add(num);\n                }\n      \
    \      }\n        } else {\n            ordered.add(nums.get(0));\n        }\n\
    \        return ordered;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuk3rgb8g.java:36)\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Step 1: Initialize a map to store the sum of each numbers\n        Map<Long,\
    \ Long> map = new HashMap<Long, Long>();\n        for (Long num : nums) {\n  \
    \          long value = num;\n            if (map.containsKey(value)) {\n    \
    \            // We have this number in the map, update the value\n           \
    \     map.put(value, map.get(value) + num);\n            } else {\n          \
    \      // We don't have this number in the map, add it\n                map.put(value,\
    \ num);\n            }\n        }\n\n        // Step 2: Sort the map by values\n\
    \        ArrayList<Long> sortedNumbers = new ArrayList<Long>(map.values());\n\
    \        Collections.sort(sortedNumbers);\n\n        // Step 3: Return sorted\
    \ array\n        return sortedNumbers;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpob9cyme_.java:40)\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     LongSummaryStatistics stat = nums.stream().reduce(new LongSummaryStatistics(),\
    \ Long::sum);\n        ArrayList<Long> result = nums.stream().sorted(Comparator.comparingLong(num\
    \ -> stat.sum()))\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    \        \n        System.out.println(result);\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq29blrf_.java:19: error: no suitable method found for reduce(LongSummaryStatistics,Long::sum)\n\
    \        LongSummaryStatistics stat = nums.stream().reduce(new LongSummaryStatistics(),\
    \ Long::sum);\n                                                  ^\n    method\
    \ Stream.reduce(Long,BinaryOperator<Long>) is not applicable\n      (argument\
    \ mismatch; LongSummaryStatistics cannot be converted to Long)\n    method Stream.<U>reduce(U,BiFunction<U,?\
    \ super Long,U>,BinaryOperator<U>) is not applicable\n      (cannot infer type-variable(s)\
    \ U\n        (actual and formal argument lists differ in length))\n  where U,T\
    \ are type-variables:\n    U extends Object declared in method <U>reduce(U,BiFunction<U,?\
    \ super T,U>,BinaryOperator<U>)\n    T extends Object declared in interface Stream\n\
    /tmp/tmpq29blrf_.java:20: error: cannot find symbol\n        ArrayList<Long> result\
    \ = nums.stream().sorted(Comparator.comparingLong(num -> stat.sum()))\n      \
    \                                                                            \
    \        ^\n  symbol:   method sum()\n  location: variable stat of type LongSummaryStatistics\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (long num :\
    \ nums) {\n            pq.add(num);\n        }\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        while (!pq.isEmpty()) {\n            long curr\
    \ = pq.poll();\n            for (long sum : nums) {\n                if (curr\
    \ + sum < 0) break;\n                if (curr + sum > 0) break;\n            \
    \    result.add(sum);\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppg17zznd.java:35)\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> ans = new ArrayList<>();\n        long sumOfDigits = 0;\n\
    \        for(Long num : nums) {\n            sumOfDigits += num;\n        }\n\
    \        for(Long num : nums) {\n            while(sumOfDigits >= num) {\n   \
    \             ans.add(num);\n                sumOfDigits -= num;\n           \
    \ }\n        }\n        ans.sort((o1, o2) -> o2.compareTo(o1));\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Collections.sort(nums, (Long o1, Long o2) -> o1.compareTo(o2));\n      \
    \  return nums;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdtp70u4l.java:23)\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Your code here\n        Arrays.sort(nums);\n        ArrayList<Long> sortedNums\
    \ = new ArrayList<Long>();\n        for (Long num : nums) {\n            sortedNums.add(num);\n\
    \        }\n        return sortedNums;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnfaqziot.java:20: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Initialize result array list\n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \n        // Initialize sum and sum-of-digits variables\n        long sum = 0,\
    \ sumOfDigits = 0;\n\n        // Sort nums array list\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            // Get the current number\n           \
    \ long num = nums.get(i);\n\n            // Calculate sum and sum-of-digits variables\n\
    \            sum += num;\n            sumOfDigits += num % 10;\n\n           \
    \ // If the sum-of-digits is equal to the sum of the previous number,\n      \
    \      // the new number is the sum of the previous number\n            if (sumOfDigits\
    \ == sum) {\n                res.add(num);\n            }\n        }\n\n     \
    \   // Return result array list\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo7lj6g3a.java:45)\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     if (nums == null || nums.size() == 0) return nums;\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        boolean sorted = false;\n        for\
    \ (Long l : nums) {\n            double total = (double) l;\n            int digits\
    \ = (int) (Math.round(total * 100));\n            sorted = (sorted || result.size()\
    \ > 0 || (digits == 0 && result.size() == 0));\n            if (digits == 0) result.add(l);\n\
    \            else result.remove(result.get(0));\n            result.add(l);\n\
    \        }\n        if (!sorted) return nums;\n        else return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.orderByPoints(tmpseycncte.java:27)\n\tat Problem.main(tmpseycncte.java:34)\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     List<Long> temp = new ArrayList<Long>();\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            int sum = 0;\n            while (nums.get(i) > 0) {\n  \
    \              sum += nums.get(i) % 10;\n                nums.get(i) /= 10;\n\
    \            }\n            Long nextNum = sum + nums.get(i);\n            while\
    \ (nextNum > 0) {\n                nextNum /= 10;\n            }\n           \
    \ temp = temp.add(nextNum);\n        }\n        return temp;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf6u1stbq.java:24: error: unexpected type\n                nums.get(i)\
    \ /= 10;\n                        ^\n  required: variable\n  found:    value\n\
    /tmp/tmpf6u1stbq.java:30: error: incompatible types: boolean cannot be converted\
    \ to List<Long>\n            temp = temp.add(nextNum);\n                     \
    \      ^\n/tmp/tmpf6u1stbq.java:32: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return temp;\n               ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     List<Long> numsCopy = new ArrayList<>(nums);\n        long sum = numsCopy.stream().mapToLong(i\
    \ -> i).sum();\n        numsCopy.stream().sorted(Comparator.comparingLong(i ->\
    \ sum-i)\n                .thenComparingLong(i -> sum+i)).forEach(numsCopy::remove);\n\
    \        return numsCopy;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp75ppwni6.java:21: error: bad operand types for binary operator\
    \ '-'\n        numsCopy.stream().sorted(Comparator.comparingLong(i -> sum-i)\n\
    \                                                                  ^\n  first\
    \ type:  long\n  second type: Object\n/tmp/tmp75ppwni6.java:22: error: bad operand\
    \ types for binary operator '+'\n                .thenComparingLong(i -> sum+i)).forEach(numsCopy::remove);\n\
    \                                           ^\n  first type:  long\n  second type:\
    \ Object\n/tmp/tmp75ppwni6.java:23: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return numsCopy;\n               ^\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> numsSorted = new ArrayList<>();\n        numsSorted.add(nums.get(0));\n\
    \        for (int i = 1; i < nums.size(); i++) {\n            int sum = 0;\n \
    \           int point = nums.get(i);\n            while (point != 0) {\n     \
    \           sum += point % 10;\n                point /= 10;\n            }\n\
    \            boolean match = true;\n            for (int j = 0; j < numsSorted.size();\
    \ j++) {\n                if (numsSorted.get(j) == sum) {\n                  \
    \  match = false;\n                    break;\n                }\n           \
    \ }\n            if (match == true) {\n                numsSorted.add(sum);\n\
    \            } else {\n                boolean match = false;\n              \
    \  for (int j = 0; j < numsSorted.size(); j++) {\n                    if (numsSorted.get(j)\
    \ == j) {\n                        match = true;\n                        break;\n\
    \                    }\n                }\n                if (match == false)\
    \ {\n                    numsSorted.add(sum);\n                }\n           \
    \ }\n        }\n        return numsSorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiwcpa3g5.java:23: error: incompatible types: Long cannot be converted\
    \ to int\n            int point = nums.get(i);\n                             \
    \   ^\n/tmp/tmpiwcpa3g5.java:36: error: incompatible types: int cannot be converted\
    \ to Long\n                numsSorted.add(sum);\n                            \
    \   ^\n/tmp/tmpiwcpa3g5.java:38: error: variable match is already defined in method\
    \ orderByPoints(ArrayList<Long>)\n                boolean match = false;\n   \
    \                     ^\n/tmp/tmpiwcpa3g5.java:46: error: incompatible types:\
    \ int cannot be converted to Long\n                    numsSorted.add(sum);\n\
    \                                   ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // TODO Write your code here\n        int max = 0;\n        ArrayList<Long>\
    \ sortedNums = new ArrayList<>();\n        for(long num : nums) {\n          \
    \  int s = (int) Math.ceil(Math.log10(num));\n            int sum = sumDigits(num);\n\
    \            if(sum > max) {\n                max = sum;\n                sortedNums.clear();\n\
    \                sortedNums.add(num);\n            } else if(sum == max) {\n \
    \               sortedNums.add(num);\n            }\n        }\n        return\
    \ sortedNums;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_uy9i5n1.java:24: error: cannot find symbol\n            int sum\
    \ = sumDigits(num);\n                      ^\n  symbol:   method sumDigits(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     if (nums.isEmpty()) {\n            return nums;\n        }\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n\
    \            int curSum = 0;\n            long curNum = nums.get(i);\n       \
    \     while (curNum != 0) {\n                curSum += nums.get(i++) % 10;\n \
    \               nums.get(i--) = nums.get(i) % 10;\n            }\n           \
    \ if (curSum < 0) {\n                Collections.reverse(result.subList(i, result.size()));\n\
    \                for (int j = 0; j < i; j++) {\n                    result.add(j,\
    \ (-1L) * result.get(j));\n                }\n            }\n            result.add(i,\
    \ (-1L) * result.get(i));\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpflcna5sc.java:28: error: unexpected type\n                nums.get(i--)\
    \ = nums.get(i) % 10;\n                        ^\n  required: variable\n  found:\
    \    value\n1 error\n"
  stdout: ''
  timestamp: 1660011414
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     return nums.stream().sorted((num1, num2) ->\n            ((num1 + num2)\
    \ % 10 != 0 ? (int)(num1 + num2) - (num1 + num2)%10 \n            : num1 - num2)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgb5mpmu.java:20: error: incompatible types: bad return type in\
    \ lambda expression\n            ((num1 + num2) % 10 != 0 ? (int)(num1 + num2)\
    \ - (num1 + num2)%10 \n                                     ^\n    possible lossy\
    \ conversion from long to int\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        int sum = 0;\n\
    \        for (Long num : nums) {\n            sum += num.intValue();\n       \
    \ }\n        for (Long num : nums) {\n            result.add(sum - num.intValue());\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa6m6t30a.java:25: error: incompatible types: int cannot be converted\
    \ to Long\n            result.add(sum - num.intValue());\n                   \
    \        ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> sortedNums = new ArrayList<Long>();\n        // sort the\
    \ list by descending order\n        nums.sort((a, b) -> b - a);\n        // initialize\
    \ sum of each nums\n        long sum = 0;\n        for (long num : nums) {\n \
    \           sum += num;\n        }\n        // check if each number is equal\n\
    \        for (long num : nums) {\n            // if sum of nums is equal, check\
    \ by original index\n            if (sum == num) {\n                sortedNums.add((num));\n\
    \            }\n        }\n        // if no equal sum, add all nums without original\
    \ index\n        if (sum != nums.get(nums.size() - 1)) {\n            for (long\
    \ num : nums) {\n                sortedNums.add(num);\n            }\n       \
    \ }\n        return sortedNums;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2w8qzx46.java:21: error: incompatible types: bad return type in\
    \ lambda expression\n        nums.sort((a, b) -> b - a);\n                   \
    \           ^\n    possible lossy conversion from long to int\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Create a map of sorted list of integers.\n        Map<Long, List<Long>>\
    \ map = new HashMap<>();\n\n        ArrayList<Long> sortedNums = new ArrayList<>();\n\
    \        // Store the list of integers with same sum as the key in the map.\n\
    \        // If they have same sum value, order them based on their index in original\
    \ array.\n        for (Long num : nums) {\n            List<Long> list = map.get(num);\n\
    \            if (list == null) {\n                list = new ArrayList<>();\n\
    \                map.put(num, list);\n            }\n            list.add(num);\n\
    \        }\n\n        List<Long> numsSorted = map.values().stream()\n        \
    \        .sorted(Comparator.comparingLong(List::size))\n                .flatMap(List::stream)\n\
    \                .collect(Collectors.toList());\n\n        sortedNums.addAll(numsSorted);\n\
    \        return sortedNums;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfhwpubay.java:43)\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        for(Long num : nums)\
    \ {\n            int sum = num.intValue() % 10;\n            int idx = num.intValue()\
    \ / 10;\n            Long numInOrder = sum * 10 + idx;\n            if(numInOrder\
    \ != num) {\n                result.add(numInOrder);\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp37jny7hy.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            Long numInOrder = sum * 10 + idx;\n                   \
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> ordered = new ArrayList<Long>();\n        int i = 0;\n \
    \       int n = (int) Math.log10(nums.size());\n        int m = nums.size();\n\
    \        long temp = 0;\n        for (long n : nums) {\n            if (n == 0)\
    \ {\n                continue;\n            }\n            temp += Math.log10(n);\n\
    \            if (temp > n) {\n                ordered.add(i, n);\n           \
    \ }\n            i++;\n            temp = n;\n        }\n        return ordered;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpftzfz9xv.java:24: error: variable n is already defined in method\
    \ orderByPoints(ArrayList<Long>)\n        for (long n : nums) {\n            \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \        }\n        Arrays.sort(nums);\n        ArrayList<Long> result = new ArrayList<>(nums);\n\
    \        long previousSum = 0;\n        long newSum = 0;\n        boolean isInOrder\
    \ = false;\n        for (int i = 0; i < nums.size(); i++) {\n            newSum\
    \ = sum - nums.get(i);\n            if (newSum < 0) {\n                isInOrder\
    \ = false;\n            } else {\n                if (newSum == previousSum &&\
    \ !isInOrder) {\n                    result.add(0, nums.get(i));\n           \
    \     } else {\n                    isInOrder = true;\n                    previousSum\
    \ = newSum;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq8_qnicq.java:23: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Write your code here\n        int sum = 0;\n        List<Long> result\
    \ = new ArrayList<Long>();\n        for (Long num : nums) {\n            sum +=\
    \ num.intValue();\n            result.add(num);\n        }\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long a, Long b) {\n\
    \                int c = a.intValue() - b.intValue();\n                if (c !=\
    \ 0) {\n                    return c;\n                }\n                return\
    \ a.intValue() - b.intValue();\n            }\n        });\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjn0mzx9_.java:35: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return result;\n               ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     //write your code here\n        return null;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.util.ArrayList.equals(Object)\" because the return value of \"Problem.orderByPoints(java.util.ArrayList)\"\
    \ is null\n\tat Problem.main(tmpebc0nz82.java:23)\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Sort nums to ensure a quick result if possible\n        Collections.sort(nums);\n\
    \        ArrayList<Long> results = new ArrayList<Long>(nums);\n        // Sum\
    \ up all the digits of the numbers in nums\n        // and insert them in results\n\
    \        long sum = 0;\n        for(long n : nums) {\n            sum += n;\n\
    \            results.add(sum);\n        }\n        // Sort the results list by\
    \ sum and sort them again to\n        // ensure a quick result if possible\n \
    \       Collections.sort(results);\n        Collections.sort(nums);\n        return\
    \ results;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpveiuyp6k.java:36)\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> ans = new ArrayList<>();\n        ArrayList<Long> sorted\
    \ = new ArrayList<>();\n        // Add all the numbers in the unsorted list into\
    \ sorted list.\n        for (Long num : nums) {\n            sorted.add(num);\n\
    \        }\n        // Sort the unsorted list to obtain the sorted list.\n   \
    \     Collections.sort(sorted);\n        // Iterate through the sorted list and\
    \ add the numbers to the result list.\n        for (int i = 0; i < sorted.size();\
    \ i++) {\n            for (int j = 0; j < sorted.size() - i; j++) {\n        \
    \        long sum = 0;\n                // Compute the sum of digits of the numbers\
    \ in the sorted list.\n                for (int k = 0; k < sorted.size() - i;\
    \ k++) {\n                    sum = (sum + sorted.get(k).intValue()) % 10;\n \
    \               }\n                // Check if the sum of digits of the numbers\
    \ in the sorted list is equal to the numbers in the unsorted list.\n         \
    \       if (sum == sorted.get(i)) {\n                    ans.add(sorted.get(i));\n\
    \                }\n            }\n        }\n        // Return the result list.\n\
    \        return ans;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3mh1tx7l.java:45)\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> res = new ArrayList<>(nums);\n        int maxSum = findMaxSum(nums);\n\
    \        Arrays.sort(res, new Comparator<Long>() {\n            public int compare(Long\
    \ o1, Long o2) {\n                int cmp = Long.compare(o1, o2);\n          \
    \      return cmp == 0 ? o1.compareTo(o2) : cmp;\n            }\n        });\n\
    \        ArrayList<Long> temp = new ArrayList<>(res);\n        HashMap<Integer,\
    \ Integer> map = new HashMap<>();\n        for (int i = 0; i < maxSum; i++) {\n\
    \            int maxIndex = 0;\n            for (int j = 0; j < res.size(); j++)\
    \ {\n                int v = res.get(j) % 10;\n                if (map.containsKey(v))\
    \ {\n                    if (map.get(v) > map.get(maxIndex)) {\n             \
    \           maxIndex = j;\n                    }\n                } else {\n \
    \                   map.put(v, j);\n                }\n            }\n       \
    \     int index = temp.get(maxIndex).intValue();\n            temp.remove(maxIndex);\n\
    \            res.add(index, temp.remove(0));\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbi33hk_x.java:20: error: cannot find symbol\n        int maxSum\
    \ = findMaxSum(nums);\n                     ^\n  symbol:   method findMaxSum(ArrayList<Long>)\n\
    \  location: class Problem\n/tmp/tmpbi33hk_x.java:21: error: no suitable method\
    \ found for sort(ArrayList<Long>,<anonymous Comparator<Long>>)\n        Arrays.sort(res,\
    \ new Comparator<Long>() {\n              ^\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (argument mismatch; ArrayList<Long> cannot be converted to T#1[]))\n  \
    \  method Arrays.<T#2>sort(T#2[],int,int,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Object declared in method <T#1>sort(T#1[],Comparator<? super T#1>)\n    T#2\
    \ extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<? super\
    \ T#2>)\n/tmp/tmpbi33hk_x.java:32: error: incompatible types: possible lossy conversion\
    \ from long to int\n                int v = res.get(j) % 10;\n               \
    \                    ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n\n        // Sort the given\
    \ array list in ascending order.\n        Collections.sort(nums);\n\n        //\
    \ Add the sum digits of each number to a new array list.\n        for (Long num\
    \ : nums) {\n            result.add(getSumDigits(num));\n        }\n\n       \
    \ // Sort the new array list in ascending order.\n        Collections.sort(result);\n\
    \n        // Return the result array.\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt0s3ln49.java:26: error: cannot find symbol\n            result.add(getSumDigits(num));\n\
    \                       ^\n  symbol:   method getSumDigits(Long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     if (nums.size() == 0) {\n            return nums;\n        }\n\n       \
    \ Map<Long, Long> map = new HashMap<>();\n        for (long num : nums) {\n  \
    \          long digitSum = num % 10;\n            if (digitSum == 0) map.put(num,\
    \ num);\n            else map.put(num, map.get(num) + digitSum);\n        }\n\
    \        ArrayList<Long> result = new ArrayList<>(nums.size());\n        for (Map.Entry<Long,\
    \ Long> entry : map.entrySet()) {\n            result.add(entry.getValue());\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmpjwij8ew_.java:27)\n\tat Problem.main(tmpjwij8ew_.java:36)\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Long sum = nums.stream().reduce(0L, Long::sum);\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++) {\n\
    \            int curSum = sum - nums.get(i);\n            if (curSum > 0) {\n\
    \                result.add(nums.get(i));\n            }\n            sum += nums.get(i);\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgg29pg07.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int curSum = sum - nums.get(i);\n            \
    \                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // write your logic here\n        Arrays.sort(nums);\n        return nums;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3uoz1d1x.java:20: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Integer, Long> sums = nums.stream().collect(Collectors.toMap(\n    \
    \            Function.identity(), x -> new Long(((int) Math.pow(10, nums.size()\
    \ - nums.indexOf(new Long(x))) + x * nums.size())));\n        ArrayList<Long>\
    \ sorted = new ArrayList<>(nums);\n        Collections.sort(sorted, new Comparator<Long>()\
    \ {\n            @Override\n            public int compare(Long o1, Long o2) {\n\
    \                Integer sum = sums.get(o1);\n                Integer sum2 = sums.get(o2);\n\
    \                if (sum == sum2) {\n                    return nums.indexOf(o1)\
    \ - nums.indexOf(o2);\n                } else {\n                    return sum\
    \ - sum2;\n                }\n            }\n        });\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjeboaddd.java:20: error: ')' expected\n                Function.identity(),\
    \ x -> new Long(((int) Math.pow(10, nums.size() - nums.indexOf(new Long(x))) +\
    \ x * nums.size())));\n                                                      \
    \                                                                            \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011415
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     return nums.stream()\n            .sorted(Comparator.comparingLong(num ->\
    \ num.intValue()))\n            .collect(toCollection(ArrayList::new));\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptsbgvzp.java:21: error: cannot find symbol\n            .collect(toCollection(ArrayList::new));\n\
    \                     ^\n  symbol:   method toCollection(ArrayList::new)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Complete this function\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp35ne9kh2.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> numsCopy = new ArrayList<Long>();\n        int sum = 0;\n\
    \        for (Long num : nums) {\n            sum += num.intValue();\n       \
    \     numsCopy.add(num);\n        }\n\n        Arrays.sort(numsCopy);\n      \
    \  int count = 0;\n        for (Long num : numsCopy) {\n            if (sum !=\
    \ num.intValue()) {\n                numsCopy.remove(count++);\n            }\n\
    \        }\n\n        return numsCopy;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxin946rj.java:26: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(numsCopy);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Use ArrayList to store the sorted nums.\n        ArrayList<Long> orderedNums\
    \ = new ArrayList<Long>();\n        // Use HashSet to store the index of original\
    \ nums array.\n        Set<Integer> set = new HashSet<Integer>();\n        //\
    \ Calculate the sum of the digits of every num in the nums array.\n        long\
    \ sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum +=\
    \ nums.get(i);\n            set.add(i);\n        }\n        // Sort the nums array\
    \ in ascending order according to the sum of their digits.\n        Collections.sort(nums,\
    \ (a, b) -> sum - sum);\n        // Add the nums whose sum is equal to the sum\
    \ of their digits in sorted\n        // nums array to the new ordered nums array.\n\
    \        for (int i = 0; i < set.size(); i++) {\n            orderedNums.add(nums.get(set.get(i)));\n\
    \        }\n        // Return the ordered nums array.\n        return orderedNums;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprb7rubi_.java:30: error: incompatible types: cannot infer type-variable(s)\
    \ T\n        Collections.sort(nums, (a, b) -> sum - sum);\n                  \
    \      ^\n    (argument mismatch; bad return type in lambda expression\n     \
    \ possible lossy conversion from long to int)\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>sort(List<T>,Comparator<? super T>)\n\
    /tmp/tmprb7rubi_.java:34: error: cannot find symbol\n            orderedNums.add(nums.get(set.get(i)));\n\
    \                                        ^\n  symbol:   method get(int)\n  location:\
    \ variable set of type Set<Integer>\n2 errors\n"
  stdout: ''
  timestamp: 1660011416
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> newList = new ArrayList<>();\n        for (Long num : nums)\
    \ {\n            String s = Long.toString(num);\n            int n = s.length();\n\
    \            Collections.sort(nums, new Comparator<Long>() {\n               \
    \ public int compare(Long o1, Long o2) {\n                    int sum = Integer.parseInt(String.valueOf(Math.abs(o1\
    \ - o2)));\n                    return sum;\n                }\n            });\n\
    \        }\n        return nums;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.ConcurrentModificationException\n\
    \tat java.base/java.util.ArrayList$Itr.checkForComodification(ArrayList.java:1013)\n\
    \tat java.base/java.util.ArrayList$Itr.next(ArrayList.java:967)\n\tat Problem.orderByPoints(tmp3s1jsl9m.java:20)\n\
    \tat Problem.main(tmp3s1jsl9m.java:33)\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> list = new ArrayList<>();\n        Long tmp;\n        //\
    \ sum all of the digits\n        long digitSum = 0;\n        for (long num : nums)\
    \ {\n            tmp = num;\n            digitSum += tmp;\n        }\n       \
    \ // sort the list by the sum\n        list = nums.stream().sorted(Comparator.comparing(Long::longValue).reversed()).collect(Collectors.toList());\n\
    \        // remove the ones that are not equal to the sum\n        while (list.size()\
    \ > 0 && digitSum < list.get(list.size() - 1)) {\n            list.remove(list.size()\
    \ - 1);\n        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe7xsw6bn.java:28: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        list = nums.stream().sorted(Comparator.comparing(Long::longValue).reversed()).collect(Collectors.toList());\n\
    \                                                                            \
    \                 ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<Long>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     if (nums.size() < 2)\n            return nums;\n        ArrayList<Long>\
    \ sorted = new ArrayList<>();\n        Long sumOfDigits = nums.stream().mapToLong(x\
    \ -> x * Math.pow(10, nums.size() - 1 - nums.lastIndexOf(x)))\n              \
    \  .sum();\n        ArrayList<Long> original = new ArrayList<>(nums);\n      \
    \  for (int i = 0; i < original.size(); i++) {\n            long sum = original.get(i)\
    \ * Math.pow(10, nums.size() - 1 - nums.lastIndexOf(original.get(i)));\n     \
    \       if (sum == sumOfDigits) {\n                sorted.add(original.get(i));\n\
    \            } else {\n                sorted.add(original.get(original.indexOf(sumOfDigits)));\n\
    \                sorted.add(original.get(i));\n            }\n        }\n    \
    \    Collections.sort(sorted);\n        return sorted;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6wh5hy8t.java:22: error: incompatible types: bad return type in\
    \ lambda expression\n        Long sumOfDigits = nums.stream().mapToLong(x -> x\
    \ * Math.pow(10, nums.size() - 1 - nums.lastIndexOf(x)))\n                   \
    \                                       ^\n    possible lossy conversion from\
    \ double to long\n/tmp/tmp6wh5hy8t.java:26: error: incompatible types: possible\
    \ lossy conversion from double to long\n            long sum = original.get(i)\
    \ * Math.pow(10, nums.size() - 1 - nums.lastIndexOf(original.get(i)));\n     \
    \                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Your code here\n        int sum = 0;\n        for(int i=0; i<nums.size();\
    \ i++){\n            sum += nums.get(i);\n        }\n        Arrays.sort(nums);\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        for(int i=0; i<nums.size();\
    \ i++){\n            long num = nums.get(i);\n            if((sum - num) == 0){\n\
    \                result.add(num);\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyox1w67g.java:24: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        Arrays.sort(nums);\n\
    \        long sum = 0;\n        for (long num : nums) {\n            sum += num;\n\
    \            result.add(sum);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpli4asf2o.java:20: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // TODO: your code here\n\n        List<Long> sorted = nums.stream().map(i\
    \ -> digitSumToLong(i)).sorted().collect(Collectors.toList());\n        Collections.sort(sorted);\n\
    \n        return sorted.stream().map(i -> nums.get(i)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ieysgs3.java:21: error: cannot find symbol\n        List<Long>\
    \ sorted = nums.stream().map(i -> digitSumToLong(i)).sorted().collect(Collectors.toList());\n\
    \                                                   ^\n  symbol:   method digitSumToLong(Long)\n\
    \  location: class Problem\n/tmp/tmp9ieysgs3.java:21: error: incompatible types:\
    \ inference variable T has incompatible bounds\n        List<Long> sorted = nums.stream().map(i\
    \ -> digitSumToLong(i)).sorted().collect(Collectors.toList());\n             \
    \                                                                         ^\n\
    \    equality constraints: Long\n    lower bounds: Object\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>toList()\n/tmp/tmp9ieysgs3.java:24:\
    \ error: incompatible types: Long cannot be converted to int\n        return sorted.stream().map(i\
    \ -> nums.get(i)).collect(Collectors.toList());\n                            \
    \                     ^\n/tmp/tmp9ieysgs3.java:24: error: incompatible types:\
    \ inference variable R has incompatible bounds\n        return sorted.stream().map(i\
    \ -> nums.get(i)).collect(Collectors.toList());\n                            \
    \                                ^\n    equality constraints: List<T#2>\n    lower\
    \ bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n  \
    \  R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Write your logic here\n        Collections.sort(nums, new Comparator<Long>()\
    \ {\n            public int compare(Long o1, Long o2) {\n                long\
    \ s1 = o1;\n                long s2 = o2;\n                long s = s1 + s2;\n\
    \                ArrayList<Long> list = new ArrayList<Long>(nums);\n         \
    \       ArrayList<Long> list2 = new ArrayList<Long>(nums);\n                long\
    \ sum = 0;\n                for (int i = 0; i < list.size(); i++) {\n        \
    \            sum += list.get(i);\n                    for (int j = 0; j < list2.size();\
    \ j++) {\n                        sum -= list2.get(j);\n                     \
    \   if (sum == s) {\n                            return list.indexOf(i) - list2.indexOf(j);\n\
    \                        }\n                    }\n                }\n       \
    \         return 0;\n            }\n        });\n        return nums;\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9dhqdknf.java:43)\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     nums.sort(Comparator.comparingLong(Long::sum));\n        return nums;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq3q8w8__.java:19: error: incompatible types: invalid method reference\n\
    \        nums.sort(Comparator.comparingLong(Long::sum));\n                   \
    \                        ^\n    method sum in class Long cannot be applied to\
    \ given types\n      required: long,long\n      found:    T\n      reason: actual\
    \ and formal argument lists differ in length\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>comparingLong(ToLongFunction<? super\
    \ T>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     return nums;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc8434_hz.java:22)\n"
  stdout: ''
  timestamp: 1660011209
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> ordered = new ArrayList<Long>();\n        int[] digits =\
    \ nums.stream().map(i -> i % 10).mapToInt(Integer::intValue).toArray();\n    \
    \    int max = Integer.MIN_VALUE;\n        for (long l : nums) {\n           \
    \ int digitSum = 0;\n            int i;\n            for (i = 0; i < digits.length;\
    \ i++) {\n                digitSum += digits[i];\n                if (l < digitSum)\
    \ break;\n            }\n            if (i == digits.length) {\n             \
    \   ordered.add(l);\n            }\n        }\n        return ordered;\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3e80fzsp.java:20: error: incompatible types: invalid method reference\n\
    \        int[] digits = nums.stream().map(i -> i % 10).mapToInt(Integer::intValue).toArray();\n\
    \                                                               ^\n    method\
    \ intValue in class Integer cannot be applied to given types\n      required:\
    \ no arguments\n      found:    Long\n      reason: actual and formal argument\
    \ lists differ in length\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> ordered = new ArrayList<Long>();\n        int n = nums.size();\n\
    \        for(int i = 0; i < n; i++) {\n            Long cur = nums.get(i);\n \
    \           int sum = 0;\n            for(int j = 0; j < 8; j++) {\n         \
    \       sum += (long)Math.pow(10, j) * cur % 10;\n                cur /= 10;\n\
    \            }\n            ordered.add(sum);\n        }\n        Collections.sort(ordered);\n\
    \        return ordered;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp03d40usg.java:28: error: incompatible types: int cannot be converted\
    \ to Long\n            ordered.add(sum);\n                        ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Your code goes here.\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        \n        double sum = 0;\n        \n        for(int i=0;i<nums.size();i++){\n\
    \            \n            sum = nums.get(i).doubleValue();\n            \n  \
    \          result.add(sum);\n        }\n        \n        Collections.sort(result);\n\
    \        \n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppze6y75f.java:28: error: incompatible types: double cannot be converted\
    \ to Long\n            result.add(sum);\n                       ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> res = new ArrayList<Long>();\n        long sum = 0;\n  \
    \      for (Long num : nums) {\n            sum += num;\n            res.add(num);\n\
    \        }\n        Arrays.sort(res);\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsrc_czfu.java:25: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(res);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     if (nums.size() > 0) {\n            long maxSum = nums.stream().mapToLong(x\
    \ -> {\n                long sum = 0;\n                while (x > 0) {\n     \
    \               sum += x % 10;\n                    x /= 10;\n               \
    \ }\n                return sum;\n            }).max(Long::compareTo).orElse(-1);\n\
    \            ArrayList<Long> orderedNums = new ArrayList<Long>();\n          \
    \  Long sumOfAllDigits = nums.stream().mapToLong(x -> {\n                long\
    \ sum = 0;\n                while (x > 0) {\n                    sum += x % 10;\n\
    \                    x /= 10;\n                }\n                return sum;\n\
    \            }).sum();\n            for (int i = 0; i < nums.size(); i++) {\n\
    \                long sum = nums.get(i).longValue();\n                if (maxSum\
    \ < sum) {\n                    orderedNums.add(sum);\n                }\n   \
    \         }\n            if (sumOfAllDigits == orderedNums.get(0)) {\n       \
    \         return orderedNums;\n            }\n            return orderedNums.stream().map(x\
    \ -> {\n                long sum = 0;\n                while (x > 0) {\n     \
    \               sum += x % 10;\n                    x /= 10;\n               \
    \ }\n                return sum;\n            }).collect(Collectors.toCollection(ArrayList::new));\n\
    \        }\n        return new ArrayList<Long>();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwtc8qxw.java:27: error: method max in interface LongStream cannot\
    \ be applied to given types;\n            }).max(Long::compareTo).orElse(-1);\n\
    \              ^\n  required: no arguments\n  found:    Long::compareTo\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011418
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     List<Long> result = new ArrayList<>(nums);\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwfdjoypm.java:21: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return result;\n               ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> tmp = new ArrayList<Long>();\n        Set<Long> set = new\
    \ HashSet<Long>();\n        for (Long num : nums) {\n            set.add(num);\n\
    \        }\n        for (Long num : nums) {\n            int sum = 0;\n      \
    \      boolean found = false;\n            for (Long num2 : set) {\n         \
    \       if (num2 == num)\n                    found = true;\n                sum\
    \ += Math.abs(num.intValue() - num2.intValue());\n            }\n            if\
    \ (!found) {\n                tmp = num;\n            }\n        }\n        return\
    \ tmp;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3w1pxgw8.java:33: error: incompatible types: Long cannot be converted\
    \ to ArrayList<Long>\n                tmp = num;\n                      ^\n1 error\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     if (nums.isEmpty()) return nums;\n        ArrayList<Long> list = nums.stream().sorted((a,\
    \ b) -> Long.compare(digitSum(a), digitSum(b))).collect(Collectors.toList());\n\
    \        Collections.sort(list, (a, b) -> digitSum(a) - digitSum(b));\n      \
    \  return list;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9orw6x0k.java:20: error: cannot find symbol\n        ArrayList<Long>\
    \ list = nums.stream().sorted((a, b) -> Long.compare(digitSum(a), digitSum(b))).collect(Collectors.toList());\n\
    \                                                                           ^\n\
    \  symbol:   method digitSum(Long)\n  location: class Problem\n/tmp/tmp9orw6x0k.java:20:\
    \ error: cannot find symbol\n        ArrayList<Long> list = nums.stream().sorted((a,\
    \ b) -> Long.compare(digitSum(a), digitSum(b))).collect(Collectors.toList());\n\
    \                                                                            \
    \            ^\n  symbol:   method digitSum(Long)\n  location: class Problem\n\
    /tmp/tmp9orw6x0k.java:20: error: incompatible types: inference variable R has\
    \ incompatible bounds\n        ArrayList<Long> list = nums.stream().sorted((a,\
    \ b) -> Long.compare(digitSum(a), digitSum(b))).collect(Collectors.toList());\n\
    \                                                                            \
    \                                 ^\n    equality constraints: List<T#2>\n   \
    \ lower bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n\
    \    R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n/tmp/tmp9orw6x0k.java:21: error: cannot find symbol\n\
    \        Collections.sort(list, (a, b) -> digitSum(a) - digitSum(b));\n      \
    \                                   ^\n  symbol:   method digitSum(Long)\n  location:\
    \ class Problem\n/tmp/tmp9orw6x0k.java:21: error: cannot find symbol\n       \
    \ Collections.sort(list, (a, b) -> digitSum(a) - digitSum(b));\n             \
    \                                          ^\n  symbol:   method digitSum(Long)\n\
    \  location: class Problem\n5 errors\n"
  stdout: ''
  timestamp: 1660011418
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     int maxSum = 0;\n        ArrayList<Long> maxList = new ArrayList<Long>();\n\
    \        // Find all numbers with max sum of their digits\n        for (long num\
    \ : nums) {\n            long sum = 0;\n            while (num >= 10) {\n    \
    \            sum += num % 10;\n                num /= 10;\n            }\n   \
    \         if (sum > maxSum) {\n                maxSum = sum;\n               \
    \ maxList.clear();\n            }\n            else if (sum == maxSum) {\n   \
    \             maxList.add(num);\n            }\n        }\n        // Sort the\
    \ list of numbers with max sum of their digits according to their position in\
    \ the original list\n        if (maxList.size() > maxList.size()) { // If there\
    \ are more than one numbers with max sum of their digits\n            return orderByPoints(nums,\
    \ maxList);\n        }\n        else // No such numbers with max sum of their\
    \ digits, so just return the original list with no sorting done\n            return\
    \ nums;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcii97vda.java:29: error: incompatible types: possible lossy conversion\
    \ from long to int\n                maxSum = sum;\n                         ^\n\
    /tmp/tmpcii97vda.java:38: error: method orderByPoints in class Problem cannot\
    \ be applied to given types;\n            return orderByPoints(nums, maxList);\n\
    \                   ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,ArrayList<Long>\n\
    \  reason: actual and formal argument lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n\n        Long sum = 0;\n\
    \        for (Long num : nums) {\n            sum += num;\n            result.add(sum);\n\
    \        }\n\n        Collections.sort(result);\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjj8rjf6k.java:21: error: incompatible types: int cannot be converted\
    \ to Long\n        Long sum = 0;\n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011418
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<>(nums);\n        Map<Long, Integer>\
    \ sumMap = new HashMap<>();\n        sumMap.put(0l, 0);\n        for(Long l :\
    \ nums) {\n            Integer s = sumMap.get(l);\n            sumMap.put(l, s\
    \ + 1);\n        }\n        Map<Long, Integer> sortedMap = new TreeMap<>(sumMap);\n\
    \        for(Long l : sortedMap.keySet()) {\n            Integer s = sortedMap.get(l);\n\
    \            Integer index = result.indexOf(l);\n            if(index == -1) {\n\
    \                result.add(l);\n            } else {\n                result.add(index,\
    \ l);\n            }\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because \"<local5>\" is null\n\tat Problem.orderByPoints(tmpm3_913_l.java:24)\n\
    \tat Problem.main(tmpm3_913_l.java:39)\n"
  stdout: ''
  timestamp: 1660011418
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Sort the elements by their sum of their digits\n        Comparator<Long>\
    \ comparatorBySum = Comparator\n                .comparing(num -> num.sumOfDigits())\n\
    \                .thenComparing(num -> num.pointIndex());\n        Collections.sort(nums,\
    \ comparatorBySum);\n        return nums;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9fd9_mon.java:21: error: cannot find symbol\n                .comparing(num\
    \ -> num.sumOfDigits())\n                                     ^\n  symbol:   method\
    \ sumOfDigits()\n  location: variable num of type Object\n/tmp/tmp9fd9_mon.java:22:\
    \ error: cannot find symbol\n                .thenComparing(num -> num.pointIndex());\n\
    \                                         ^\n  symbol:   method pointIndex()\n\
    \  location: variable num of type Object\n/tmp/tmp9fd9_mon.java:22: error: incompatible\
    \ types: no instance(s) of type variable(s) U exist so that Comparator<Object>\
    \ conforms to Comparator<Long>\n                .thenComparing(num -> num.pointIndex());\n\
    \                              ^\n  where U,T are type-variables:\n    U extends\
    \ Comparable<? super U> declared in method <U>thenComparing(Function<? super T,?\
    \ extends U>)\n    T extends Object declared in interface Comparator\n3 errors\n"
  stdout: ''
  timestamp: 1660011418
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> arr = new ArrayList<>(nums);\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<>(arr.size(), Comparator.comparingLong(el -> arr.get(el).longValue()));\n\
    \        int size = nums.size();\n        long sum = 0;\n        for (long el\
    \ : arr) {\n            sum += el;\n            pq.offer(el);\n        }\n   \
    \     while (pq.size() > 1) {\n            long sum1 = pq.poll();\n          \
    \  long sum2 = pq.poll();\n            int index1 = 0, index2 = 0;\n         \
    \   for (int i = 0; i < size; i++) {\n                sum += arr.get(i);\n   \
    \             if (sum > sum1) {\n                    index2 = i;\n           \
    \         sum = sum1;\n                    sum1 = sum2;\n                    sum2\
    \ = sum;\n                } else if (sum > sum2) {\n                    sum2 =\
    \ sum;\n                }\n            }\n            pq.offer(arr.get(index2));\n\
    \            pq.offer(arr.get(index1));\n        }\n        return pq.poll();\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfq9ajs9a.java:20: error: incompatible types: Long cannot be converted\
    \ to int\n        PriorityQueue<Long> pq = new PriorityQueue<>(arr.size(), Comparator.comparingLong(el\
    \ -> arr.get(el).longValue()));\n                                            \
    \                                                            ^\n/tmp/tmpfq9ajs9a.java:45:\
    \ error: incompatible types: Long cannot be converted to ArrayList<Long>\n   \
    \     return pq.poll();\n                      ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011418
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     return nums.stream().sorted(Comparator.comparingLong(Long::sum).reversed()).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn9les822.java:19: error: incompatible types: invalid method reference\n\
    \        return nums.stream().sorted(Comparator.comparingLong(Long::sum).reversed()).collect(Collectors.toList());\n\
    \                                                             ^\n    method sum\
    \ in class Long cannot be applied to given types\n      required: long,long\n\
    \      found:    T\n      reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>comparingLong(ToLongFunction<?\
    \ super T>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011418
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Step 1: Get the sum of each element's digits in sorted order.\n     \
    \   Map<Long, Long> digitSums = nums.stream().collect(\n            Collectors.groupingBy(l\
    \ -> Long.valueOf(l.toString().replaceAll(\"\\\\D\", \"\")), \n            Collectors.summingLong(l\
    \ -> Long.valueOf(l.toString().replaceAll(\"\\\\D\", \"\"))))\n        );\n  \
    \      \n        // Step 2: Get the index of each element in the original nums\
    \ list.\n        List<Integer> indexList = nums.stream().mapToInt(l -> nums.indexOf(l)).boxed().collect(Collectors.toList());\n\
    \        \n        // Step 3: Sort them according to the sum of their digits.\n\
    \        List<Long> sortedNums = indexList.stream().mapToLong(l -> digitSums.get(l)).sorted().boxed().collect(Collectors.toList());\n\
    \        \n        // Step 4: Return the new array list\n        return sortedNums.stream().mapToLong(l\
    \ -> nums.get(l)).collect(Collectors.toCollection(ArrayList::new));\n    }\n \
    \   public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ig39dqj.java:32: error: incompatible types: Long cannot be converted\
    \ to int\n        return sortedNums.stream().mapToLong(l -> nums.get(l)).collect(Collectors.toCollection(ArrayList::new));\n\
    \                                                           ^\n/tmp/tmp2ig39dqj.java:32:\
    \ error: method collect in interface LongStream cannot be applied to given types;\n\
    \        return sortedNums.stream().mapToLong(l -> nums.get(l)).collect(Collectors.toCollection(ArrayList::new));\n\
    \                                                              ^\n  required:\
    \ Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>\n  found:    Collector<Object,CAP#1,Collection<Object>>\n\
    \  reason: cannot infer type-variable(s) R\n    (actual and formal argument lists\
    \ differ in length)\n  where R is a type-variable:\n    R extends Object declared\
    \ in method <R>collect(Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>)\n  where\
    \ CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture of ?\n\
    /tmp/tmp2ig39dqj.java:32: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        return sortedNums.stream().mapToLong(l -> nums.get(l)).collect(Collectors.toCollection(ArrayList::new));\n\
    \                                                                      ^\n   \
    \ (argument mismatch; no instance(s) of type variable(s) CAP#1,T,C,E exist so\
    \ that Collector<T,?,C> conforms to Supplier<R>)\n  where R,T,C,E are type-variables:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T,C>toCollection(Supplier<C>)\n    C\
    \ extends Collection<T> declared in method <T,C>toCollection(Supplier<C>)\n  \
    \  E extends Object declared in class ArrayList\n  where CAP#1 is a fresh type-variable:\n\
    \    CAP#1 extends Object from capture of ?\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Collections.sort(nums, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                long num1\
    \ = o1;\n                long num2 = o2;\n                if (num1 == num2) {\n\
    \                    return nums.indexOf(o1) - nums.indexOf(o2);\n           \
    \     } else {\n                    return num1 < num2 ? -1 : 1;\n           \
    \     }\n            }\n        });\n        return nums;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_pzah08r.java:34)\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     int n = nums.size();\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        Arrays.sort(nums, Long::compareTo);\n        long sum = 0;\n        long\
    \ maxSum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += nums.get(i);\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            }\n\
    \            if (sum < maxSum) {\n                maxSum = sum;\n            }\n\
    \        }\n        for (Long number : nums) {\n            if (sum == maxSum)\
    \ {\n                res.add(number);\n            }\n            sum -= number;\n\
    \            if (sum == 0) {\n                break;\n            }\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprm4xz_71.java:21: error: no suitable method found for sort(ArrayList<Long>,Long::compareTo)\n\
    \        Arrays.sort(nums, Long::compareTo);\n              ^\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (argument mismatch; ArrayList<Long> cannot be converted to T#1[]))\n  \
    \  method Arrays.<T#2>sort(T#2[],int,int,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Object declared in method <T#1>sort(T#1[],Comparator<? super T#1>)\n    T#2\
    \ extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<? super\
    \ T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     nums.sort((a, b) -> {\n            long a2 = Math.abs(a), b2 = Math.abs(b);\n\
    \            if (a2 != b2) return a2 - b2;\n            if (a < b) return -1;\n\
    \            if (a > b) return 1;\n            return 0;\n        });\n      \
    \  return nums;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps2a_qjzl.java:21: error: incompatible types: bad return type in\
    \ lambda expression\n            if (a2 != b2) return a2 - b2;\n             \
    \                       ^\n    possible lossy conversion from long to int\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660011418
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Write your code here\n        HashMap<Long, List<Long>> map = new HashMap<Long,\
    \ List<Long>>();\n\n        long num;\n        for (long i = 0; i < nums.size();\
    \ i++) {\n            num = nums.get(i);\n            if (map.containsKey(num))\
    \ {\n                List<Long> list = map.get(num);\n                list.add(num);\n\
    \                map.put(num, list);\n            } else {\n                List<Long>\
    \ list = new ArrayList<Long>();\n                list.add(num);\n            \
    \    map.put(num, list);\n            }\n        }\n\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (long k : map.keySet()) {\n      \
    \      List<Long> l = map.get(k);\n            Collections.sort(l);\n        \
    \    res.addAll(l);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfsjwcu0y.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n            num = nums.get(i);\n                         \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Your code here\n        long sum = 0l;\n        for(Long num : nums)\
    \ {\n            sum += num;\n        }\n        \n        ArrayList<Long> sortedNums\
    \ = new ArrayList<>();\n        \n        for(Long num : nums) {\n           \
    \ int digit = num % 10;\n            if(sum == 0){\n                sortedNums.add(num);\n\
    \            }else{\n                if(digit > sum) {\n                    sortedNums.add(num);\n\
    \                }else if(digit < sum) {\n                    if(sum - digit >=\
    \ 0) {\n                        sortedNums.add(num);\n                    }\n\
    \                    else if(sum - digit < 0) {\n                        sortedNums.add(num);\n\
    \                    }\n                }\n            }\n            \n     \
    \       sum -= digit;\n        }\n        \n        return sortedNums;\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm16wgv8r.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int digit = num % 10;\n                      \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Write your code here\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        Map<Long, Integer> digitToIndex = new HashMap<>();\n        for (long\
    \ num : nums) {\n            String stringNum = Long.toString(num);\n        \
    \    int len = stringNum.length();\n            int pos = 0;\n            while\
    \ (pos < len) {\n                int digit = Character.getNumericValue(stringNum.charAt(pos));\n\
    \                int index = digitToIndex.get(digit);\n                if (index\
    \ != -1) {\n                    int oldIndex = index;\n                    int\
    \ newIndex = oldIndex + 1;\n                    digitToIndex.put(digit, newIndex);\n\
    \                    result.add(num);\n                }\n                pos++;\n\
    \            }\n            if (len == 0) {\n                result.add(num);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt3py79ax.java:32: error: incompatible types: int cannot be converted\
    \ to Long\n                    digitToIndex.put(digit, newIndex);\n          \
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long, List<Long>> map = new HashMap<Long, List<Long>>();\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        for (Long i : nums) {\n            if\
    \ (map.containsKey(i.longValue())) map.get(i).add(i);\n            else map.put(i,\
    \ new ArrayList<Long>());\n        }\n        for (List<Long> lst : map.values())\
    \ {\n            lst.sort((a, b) -> Long.compare(a + b, 0));\n            res.addAll(lst.stream().distinct().collect(Collectors.toList()));\n\
    \        }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfd3rbda1.java:32)\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Integer, Long> map = new HashMap<>();\n        long sum = 0;\n     \
    \   for(long num : nums) {\n            sum += num;\n            map.put(sum %\
    \ 10, num);\n        }\n        List<Long> sortedNums = new ArrayList<>(map.values());\n\
    \        Collections.sort(sortedNums);\n        map.clear();\n        for(long\
    \ num : sortedNums) {\n            map.put(sum % 10, num);\n            sum -=\
    \ num;\n        }\n        return map.values();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpot49pc6h.java:23: error: incompatible types: long cannot be converted\
    \ to Integer\n            map.put(sum % 10, num);\n                        ^\n\
    /tmp/tmpot49pc6h.java:29: error: incompatible types: long cannot be converted\
    \ to Integer\n            map.put(sum % 10, num);\n                        ^\n\
    /tmp/tmpot49pc6h.java:32: error: incompatible types: Collection<Long> cannot be\
    \ converted to ArrayList<Long>\n        return map.values();\n               \
    \          ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long,Integer> points = new HashMap<>();\n        for(Long num: nums){\n\
    \            Integer point = points.get(num.intValue());\n            if(point\
    \ != null){\n                points.put(num,point + 1);\n            }else{\n\
    \                points.put(num,1);\n            }\n        }\n        ArrayList<Long>\
    \ sortedNums = new ArrayList<>(nums);\n        for(Map.Entry<Long,Integer> entry:points.entrySet()){\n\
    \            Long num = entry.getKey();\n            Integer value = entry.getValue();\n\
    \            sortedNums.set(num.intValue() - value,num);\n        }\n        return\
    \ sortedNums;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -2 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.set(ArrayList.java:441)\n\
    \tat Problem.orderByPoints(tmpy4u2kzcj.java:32)\n\tat Problem.main(tmpy4u2kzcj.java:37)\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Long[] sorted = nums.stream().map(num -> new Long(num)).sorted(Comparator.comparingLong(Long::sum)).map(num\
    \ -> num.get()).toArray(Long[]::new);\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        for (Long num : sorted) {\n            res.add(num);\n        }\n   \
    \     return res;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwtmfpk1h.java:19: error: incompatible types: invalid method reference\n\
    \        Long[] sorted = nums.stream().map(num -> new Long(num)).sorted(Comparator.comparingLong(Long::sum)).map(num\
    \ -> num.get()).toArray(Long[]::new);\n                                      \
    \                                                          ^\n    method sum in\
    \ class Long cannot be applied to given types\n      required: long,long\n   \
    \   found:    T\n      reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>comparingLong(ToLongFunction<?\
    \ super T>)\n/tmp/tmpwtmfpk1h.java:19: warning: [removal] Long(long) in Long has\
    \ been deprecated and marked for removal\n        Long[] sorted = nums.stream().map(num\
    \ -> new Long(num)).sorted(Comparator.comparingLong(Long::sum)).map(num -> num.get()).toArray(Long[]::new);\n\
    \                                                 ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n\
    1 warning\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long> temp\
    \ = new ArrayList<>();\n        long sum = 0;\n        boolean isAllZero = true;\n\
    \        for (long val: nums) {\n            if (val == 0) {\n               \
    \ isAllZero = false;\n            }\n            sum += val;\n        }\n    \
    \    temp = nums;\n        if (sum < 0) {\n            temp = orderByPoints(temp);\n\
    \        }\n        ArrayList<Long> list = new ArrayList<>();\n        do {\n\
    \            long x = temp.get(0);\n            int index = 0;\n            for\
    \ (long y: temp) {\n                if (x == y) {\n                    index =\
    \ temp.indexOf(y);\n                }\n            }\n            if (isAllZero\
    \ && temp.size() > 0) {\n                list.add(list.get(index));\n        \
    \        list.remove(list.size() - 1);\n            }\n            list.remove(0);\n\
    \            list.add(sum);\n        } while (temp.size() > 0 && sum != 0);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.orderByPoints(tmphllgik05.java:23)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderByPoints(tmphllgik05.java:31)\n\
    \tat Problem.orderByPoints(tmphllgik05.java:31)\n\tat Problem.orderB"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<Long>(nums.size());\n        // Sort\
    \ by sums of digits, from largest to smallest\n        sorted.addAll(nums.stream().sorted((a,\
    \ b) -> Integer.compare(getSumOfDigits(a), getSumOfDigits(b))).collect(Collectors.toList()));\n\
    \        // Sort by original index if there are ties\n        nums.stream().sorted((a,\
    \ b) -> sorted.indexOf(a) < sorted.indexOf(b) ? 1 : -1).collect(Collectors.toList());\n\
    \        return sorted;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeimxcptb.java:21: error: cannot find symbol\n        sorted.addAll(nums.stream().sorted((a,\
    \ b) -> Integer.compare(getSumOfDigits(a), getSumOfDigits(b))).collect(Collectors.toList()));\n\
    \                                                                     ^\n  symbol:\
    \   method getSumOfDigits(Long)\n  location: class Problem\n/tmp/tmpeimxcptb.java:21:\
    \ error: cannot find symbol\n        sorted.addAll(nums.stream().sorted((a, b)\
    \ -> Integer.compare(getSumOfDigits(a), getSumOfDigits(b))).collect(Collectors.toList()));\n\
    \                                                                            \
    \            ^\n  symbol:   method getSumOfDigits(Long)\n  location: class Problem\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long, Long> map = new HashMap<Long, Long>();\n        for(Long i : nums)\n\
    \        {\n            Long val = map.get(i);\n            if(val == null)\n\
    \                map.put(i, sum = i, index);\n            else\n             \
    \   map.put(i, sum + i);\n        }\n\n        List<Long> result = new ArrayList<Long>(map.values());\n\
    \        result.sort(Comparator.comparingLong(Long::sum));\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmmwj4q00.java:24: error: cannot find symbol\n                map.put(i,\
    \ sum = i, index);\n                           ^\n  symbol:   variable sum\n \
    \ location: class Problem\n/tmp/tmpmmwj4q00.java:24: error: cannot find symbol\n\
    \                map.put(i, sum = i, index);\n                               \
    \     ^\n  symbol:   variable index\n  location: class Problem\n/tmp/tmpmmwj4q00.java:26:\
    \ error: cannot find symbol\n                map.put(i, sum + i);\n          \
    \                 ^\n  symbol:   variable sum\n  location: class Problem\n/tmp/tmpmmwj4q00.java:30:\
    \ error: incompatible types: invalid method reference\n        result.sort(Comparator.comparingLong(Long::sum));\n\
    \                                             ^\n    method sum in class Long\
    \ cannot be applied to given types\n      required: long,long\n      found:  \
    \  T\n      reason: actual and formal argument lists differ in length\n  where\
    \ T is a type-variable:\n    T extends Object declared in method <T>comparingLong(ToLongFunction<?\
    \ super T>)\n/tmp/tmpmmwj4q00.java:31: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return result;\n               ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n5 errors\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long, Long> map = new HashMap<>();\n        for (Long num : nums) {\n\
    \            map.merge(num, num, Long::sum);\n        }\n        return nums.stream().sorted(Map.Entry.comparingByValue(map)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk4uoxmfk.java:23: error: no suitable method found for comparingByValue(Map<Long,Long>)\n\
    \        return nums.stream().sorted(Map.Entry.comparingByValue(map)).collect(Collectors.toList());\n\
    \                                             ^\n    method Entry.<K#1,V#1>comparingByValue()\
    \ is not applicable\n      (cannot infer type-variable(s) K#1,V#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Entry.<K#2,V#2>comparingByValue(Comparator<?\
    \ super V#2>) is not applicable\n      (cannot infer type-variable(s) K#2,V#2\n\
    \        (argument mismatch; Map<Long,Long> cannot be converted to Comparator<?\
    \ super V#2>))\n  where K#1,V#1,K#2,V#2 are type-variables:\n    K#1 extends Object\
    \ declared in method <K#1,V#1>comparingByValue()\n    V#1 extends Comparable<?\
    \ super V#1> declared in method <K#1,V#1>comparingByValue()\n    K#2 extends Object\
    \ declared in method <K#2,V#2>comparingByValue(Comparator<? super V#2>)\n    V#2\
    \ extends Object declared in method <K#2,V#2>comparingByValue(Comparator<? super\
    \ V#2>)\n1 error\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> sortedNums = new ArrayList<>();\n        long largestSum\
    \ = nums.stream()\n                            .mapToLong(num -> num)\n      \
    \                      .sum();\n        int largestSumIndex = 0;\n        for\
    \ (long num : nums) {\n            int sum = (int) Math.ceil(Math.log10(num))\
    \ + 1;\n            if (sum > largestSum) {\n                largestSum = sum;\n\
    \                largestSumIndex = nums.indexOf(num);\n            }\n       \
    \ }\n\n        double largestSumWithDecimal = largestSum * 100;\n        double\
    \ smallestSumWithDecimal = -(largestSumWithDecimal);\n\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            double numWithDecimal = (double) nums.get(i);\n\
    \            double currSum = Math.round(numWithDecimal * 100.0) / 100.0;\n  \
    \          double diff = Math.abs(largestSumWithDecimal - currSum);\n        \
    \    if (diff > smallestSumWithDecimal) {\n                sortedNums.add(nums.get(i));\n\
    \            }\n        }\n        return sortedNums;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8qczm4l2.java:46)\n"
  stdout: ''
  timestamp: 1660011420
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Write your code here.\n        return nums.stream().sorted(Comparator.comparingLong(num\
    \ -> Long.parseLong(String.valueOf(num))).thenComparing(num -> num))\n       \
    \         .collect(Collectors.toCollection(ArrayList::new));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9frrerqa.java:20: error: incompatible types: inference variable\
    \ U has incompatible bounds\n        return nums.stream().sorted(Comparator.comparingLong(num\
    \ -> Long.parseLong(String.valueOf(num))).thenComparing(num -> num))\n       \
    \                                                                            \
    \                                   ^\n    lower bounds: Comparable<? super U>\n\
    \    lower bounds: Object\n  where U,T are type-variables:\n    U extends Comparable<?\
    \ super U> declared in method <U>thenComparing(Function<? super T,? extends U>)\n\
    \    T extends Object declared in interface Comparator\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Set<Long> seen = new HashSet<Long>();\n        HashMap<Long, Long> sums\
    \ = new HashMap<Long, Long>();\n\n        for(Long num : nums) {\n           \
    \ long value = Math.abs(num);\n            if(seen.contains(value)) {\n      \
    \          sums.put(value);\n            } else {\n                sums.put(value,\
    \ num);\n                seen.add(value);\n            }\n        }\n\n      \
    \  ArrayList<Long> res = new ArrayList<>();\n        for(Long num : sums.values())\
    \ {\n            res.add(num);\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb87281st.java:25: error: method put in class HashMap<K,V> cannot\
    \ be applied to given types;\n                sums.put(value);\n             \
    \       ^\n  required: Long,Long\n  found:    long\n  reason: actual and formal\
    \ argument lists differ in length\n  where K,V are type-variables:\n    K extends\
    \ Object declared in class HashMap\n    V extends Object declared in class HashMap\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long, Long> map = new HashMap<>();\n        for (Long num : nums) {\n\
    \            long sum = 0;\n            while (num > 0) {\n                sum\
    \ += num % 10;\n                num = num / 10;\n            }\n            map.put(sum,\
    \ num);\n        }\n        return nums.stream().sorted((a, b) -> map.get(b) -\
    \ map.get(a))\n                .map(n -> map.get(n)).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl992q2pi.java:28: error: incompatible types: bad return type in\
    \ lambda expression\n        return nums.stream().sorted((a, b) -> map.get(b)\
    \ - map.get(a))\n                                                         ^\n\
    \    possible lossy conversion from long to int\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011419
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     long sum = 0;\n        int maxIndex = -1;\n        for (long num : nums)\
    \ {\n            sum += num;\n            if (maxIndex < 0 || sum > nums.get(maxIndex))\
    \ {\n                maxIndex = nums.size() - 1;\n            }\n        }\n \
    \       if (maxIndex >= 0) {\n            Collections.swap(nums, maxIndex, nums.size()\
    \ - 1);\n        }\n        return nums;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpla7tgm0g.java:33)\n"
  stdout: ''
  timestamp: 1660011420
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        for (long num : nums)\
    \ {\n            int sum = 0;\n            for (int i = 0; i < 10; i++) {\n  \
    \              sum += (int) Math.pow(10, i) * num;\n            }\n          \
    \  if (sorted.isEmpty() || sum < sorted.get(0).longValue()) {\n              \
    \  sorted.add(num);\n            } else {\n                int index = sorted.indexOf(num);\n\
    \                sorted.add(index, num);\n            }\n        }\n        return\
    \ sorted;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index:\
    \ -1, Size: 3\n\tat java.base/java.util.ArrayList.rangeCheckForAdd(ArrayList.java:756)\n\
    \tat java.base/java.util.ArrayList.add(ArrayList.java:481)\n\tat Problem.orderByPoints(tmpy95ymb0v.java:29)\n\
    \tat Problem.main(tmpy95ymb0v.java:35)\n"
  stdout: ''
  timestamp: 1660011420
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Write your code here\n        Map<Long, Long> map = new HashMap<Long,\
    \ Long>();\n        for (int i = 0; i < nums.size(); i++)\n            map.put(nums.get(i),\
    \ map.get(nums.get(i)) + nums.get(i));\n        System.out.println(map);\n   \
    \     List<Map.Entry<Long, Long>> list = new LinkedList<Map.Entry<Long, Long>>(map.entrySet());\n\
    \        Collections.sort(list, new Comparator<Map.Entry<Long, Long>>() {\n  \
    \          public int compare(Map.Entry<Long, Long> o1, Map.Entry<Long, Long>\
    \ o2) {\n                if (o1.getValue() < o2.getValue())\n                \
    \    return -1;\n                else if (o1.getValue() > o2.getValue())\n   \
    \                 return 1;\n                else\n                    return\
    \ 0;\n            }\n        });\n        System.out.println(list);\n        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        for (Map.Entry<Long, Long> e: list)\
    \ {\n            long num = 0;\n            for (int i = 0; i < e.getValue();\
    \ i++)\n                num *= 10;\n            num += e.getKey();\n         \
    \   result.add(num);\n        }\n        System.out.println(result);\n       \
    \ return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Long.longValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmpdczufs20.java:22)\n\tat Problem.main(tmpdczufs20.java:48)\n"
  stdout: ''
  timestamp: 1660011420
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     if (nums.size() <= 1) return nums;\n        ArrayList<Long> sortedNums =\
    \ new ArrayList<Long>();\n        long first = nums.get(0); // first number\n\
    \        long sumOfDigits = 0;\n        for (long num : nums) {\n            sumOfDigits\
    \ += num % 10;\n        }\n        boolean flag = true;\n        while (sumOfDigits\
    \ != 0) {\n            if (flag) {\n                sortedNums.add(first);\n \
    \           }\n            sumOfDigits -= first % 10;\n            first = first\
    \ / 10;\n            flag = !flag;\n        }\n        return sortedNums;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011425
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        // Find max number\
    \ in array\n        long maxSum = nums.stream()\n                .mapToLong(x\
    \ -> x.sum())\n                .max()\n                .orElse(0);\n\n       \
    \ // Order num array\n        for (int i = 0; i < nums.size(); i++) {\n      \
    \      long sum = nums.get(i).sum();\n            // Find if sum already in result\
    \ array\n            boolean findSameSum = false;\n            for (int j = 0;\
    \ j < result.size(); j++) {\n                if (sum == result.get(j).sum()) {\n\
    \                    findSameSum = true;\n                    break;\n       \
    \         }\n            }\n\n            // If sum not exist, add to result array\n\
    \            if (!findSameSum) {\n                result.add(new Long(sum));\n\
    \            }\n        }\n\n        // Sort result array\n        Arrays.sort(result);\n\
    \n        // Return result\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkk07whbp.java:22: error: method sum in class Long cannot be applied\
    \ to given types;\n                .mapToLong(x -> x.sum())\n                \
    \                 ^\n  required: long,long\n  found:    no arguments\n  reason:\
    \ actual and formal argument lists differ in length\n/tmp/tmpkk07whbp.java:28:\
    \ error: method sum in class Long cannot be applied to given types;\n        \
    \    long sum = nums.get(i).sum();\n                                  ^\n  required:\
    \ long,long\n  found:    no arguments\n  reason: actual and formal argument lists\
    \ differ in length\n/tmp/tmpkk07whbp.java:32: error: method sum in class Long\
    \ cannot be applied to given types;\n                if (sum == result.get(j).sum())\
    \ {\n                                        ^\n  required: long,long\n  found:\
    \    no arguments\n  reason: actual and formal argument lists differ in length\n\
    /tmp/tmpkk07whbp.java:40: warning: [removal] Long(long) in Long has been deprecated\
    \ and marked for removal\n                result.add(new Long(sum));\n       \
    \                    ^\n/tmp/tmpkk07whbp.java:45: error: no suitable method found\
    \ for sort(ArrayList<Long>)\n        Arrays.sort(result);\n              ^\n \
    \   method Arrays.sort(int[]) is not applicable\n      (argument mismatch; ArrayList<Long>\
    \ cannot be converted to int[])\n    method Arrays.sort(long[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Long> cannot be converted to long[])\n  \
    \  method Arrays.sort(short[]) is not applicable\n      (argument mismatch; ArrayList<Long>\
    \ cannot be converted to short[])\n    method Arrays.sort(char[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Long> cannot be converted to char[])\n  \
    \  method Arrays.sort(byte[]) is not applicable\n      (argument mismatch; ArrayList<Long>\
    \ cannot be converted to byte[])\n    method Arrays.sort(float[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Long> cannot be converted to float[])\n \
    \   method Arrays.sort(double[]) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to double[])\n    method Arrays.sort(Object[])\
    \ is n"
  stdout: ''
  timestamp: 1660011420
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     long sum = 0;\n        for (long n : nums) {\n            sum += n;\n  \
    \      }\n        ArrayList<Long> sorted = new ArrayList<>();\n        for (long\
    \ n : nums) {\n            sum += n;\n            if (sum < 0)\n             \
    \   sorted.add(0);\n            else if (sum >= 0)\n                sorted.add(1);\n\
    \            else\n                sorted.add(-1);\n        }\n        return\
    \ sorted;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_b24zn5v.java:27: error: incompatible types: int cannot be converted\
    \ to Long\n                sorted.add(0);\n                           ^\n/tmp/tmp_b24zn5v.java:29:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \ sorted.add(1);\n                           ^\n/tmp/tmp_b24zn5v.java:31: error:\
    \ incompatible types: int cannot be converted to Long\n                sorted.add(-1);\n\
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011420
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> ordered = new ArrayList<>();\n        long sum = 0;\n  \
    \      long lastSum = 0;\n        int length = nums.size();\n        for (int\
    \ i = 0; i < length; i++) {\n            sum += nums.get(i);\n            if (i\
    \ == length - 1) {\n                if (lastSum != sum) {\n                  \
    \  ordered.add(sum);\n                    lastSum = sum;\n                }\n\
    \            } else if (lastSum != sum) {\n                ordered.add(sum);\n\
    \                lastSum = sum;\n            }\n        }\n        return ordered;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0czt5e0u.java:38)\n"
  stdout: ''
  timestamp: 1660011420
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     List<Long> list = nums.stream().sorted(Comparator.comparing(Long::sum))\n\
    \                .collect(Collectors.toList());\n        return new ArrayList<>(list);\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9p47cb_m.java:19: error: no suitable method found for comparing(Long::sum)\n\
    \        List<Long> list = nums.stream().sorted(Comparator.comparing(Long::sum))\n\
    \                                                         ^\n    method Comparator.<T#1,U#1>comparing(Function<?\
    \ super T#1,? extends U#1>,Comparator<? super U#1>) is not applicable\n      (cannot\
    \ infer type-variable(s) T#1,U#1\n        (actual and formal argument lists differ\
    \ in length))\n    method Comparator.<T#2,U#2>comparing(Function<? super T#2,?\
    \ extends U#2>) is not applicable\n      (cannot infer type-variable(s) T#2,U#2\n\
    \        (argument mismatch; invalid method reference\n          method sum in\
    \ class Long cannot be applied to given types\n            required: long,long\n\
    \            found:    T#2\n            reason: actual and formal argument lists\
    \ differ in length))\n  where T#1,U#1,T#2,U#2 are type-variables:\n    T#1 extends\
    \ Object declared in method <T#1,U#1>comparing(Function<? super T#1,? extends\
    \ U#1>,Comparator<? super U#1>)\n    U#1 extends Object declared in method <T#1,U#1>comparing(Function<?\
    \ super T#1,? extends U#1>,Comparator<? super U#1>)\n    T#2 extends Object declared\
    \ in method <T#2,U#2>comparing(Function<? super T#2,? extends U#2>)\n    U#2 extends\
    \ Comparable<? super U#2> declared in method <T#2,U#2>comparing(Function<? super\
    \ T#2,? extends U#2>)\n1 error\n"
  stdout: ''
  timestamp: 1660011420
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // write your code here\n        ArrayList<Long> sortedNums = new ArrayList<Long>();\n\
    \        \n        for(int i =0; i<nums.size(); i++){\n            long currentNum\
    \ = nums.get(i);\n            String numberAsString = currentNum.toString();\n\
    \            long currentSum = 0;\n            \n            for(int i =0; i<numberAsString.length();\
    \ i++){\n                currentSum+=Character.getNumericValue(numberAsString.charAt(i));\n\
    \            }\n            \n            if(currentSum>0){\n                sortedNums.add(currentNum);\n\
    \            }\n            \n        }\n        \n        Collections.sort(sortedNums);\n\
    \        return sortedNums;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3gs5cnr5.java:24: error: long cannot be dereferenced\n        \
    \    String numberAsString = currentNum.toString();\n                        \
    \                      ^\n/tmp/tmp3gs5cnr5.java:27: error: variable i is already\
    \ defined in method orderByPoints(ArrayList<Long>)\n            for(int i =0;\
    \ i<numberAsString.length(); i++){\n                    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011420
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     HashMap<Long, ArrayList<Integer>> map = new HashMap<>();\n        // Loop\
    \ through the list of numbers and store them as a map\n        // where the key\
    \ is the sum of the digits and the value is a list of\n        // the corresponding\
    \ numbers\n        for (Long num : nums) {\n            ArrayList<Integer> digits\
    \ = new ArrayList<>();\n            while (num != 0) {\n                digits.add(num\
    \ % 10);\n                num = num / 10;\n            }\n            Long sum\
    \ = 0;\n            for (Integer digit : digits) {\n                sum += digit;\n\
    \            }\n            if (!map.containsKey(sum)) {\n                map.put(sum,\
    \ digits);\n            } else {\n                map.get(sum).add(digits);\n\
    \            }\n        }\n\n        // Sort the list of numbers according to\
    \ their sum\n        ArrayList<Long> sortedNums = new ArrayList<>();\n       \
    \ for (Map.Entry<Long, ArrayList<Integer>> entry : map.entrySet()) {\n       \
    \     Long key = entry.getKey();\n            ArrayList<Integer> list = entry.getValue();\n\
    \            Collections.sort(list);\n            int min = list.get(0);\n   \
    \         int max = 0;\n            for (int i = 1; i < list.size(); i++) {\n\
    \                if (list.get(i) >= min) {\n                    max = list.get(i);\n\
    \                }\n            }\n            Collections.sort(list);\n     \
    \       sortedNums.add(key);\n            sortedNums.add(min);\n            sortedNums.add(max);\n\
    \            sortedNums.add(list.get(0));\n        }\n        return sortedNums;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7bpelnyl.java:26: error: incompatible types: long cannot be converted\
    \ to Integer\n                digits.add(num % 10);\n                        \
    \       ^\n/tmp/tmp7bpelnyl.java:29: error: incompatible types: int cannot be\
    \ converted to Long\n            Long sum = 0;\n                       ^\n/tmp/tmp7bpelnyl.java:36:\
    \ error: incompatible types: ArrayList<Integer> cannot be converted to Integer\n\
    \                map.get(sum).add(digits);\n                                 ^\n\
    /tmp/tmp7bpelnyl.java:55: error: incompatible types: int cannot be converted to\
    \ Long\n            sortedNums.add(min);\n                           ^\n/tmp/tmp7bpelnyl.java:56:\
    \ error: incompatible types: int cannot be converted to Long\n            sortedNums.add(max);\n\
    \                           ^\n/tmp/tmp7bpelnyl.java:57: error: incompatible types:\
    \ Integer cannot be converted to Long\n            sortedNums.add(list.get(0));\n\
    \                                   ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1660011421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> list = nums;\n        list.sort(Comparator.comparing(Long::sum).thenComparing(num\
    \ -> nums.size() - list.lastIndexOf(num)));\n        return list;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb8zuzv6_.java:20: error: no suitable method found for comparing(Long::sum)\n\
    \        list.sort(Comparator.comparing(Long::sum).thenComparing(num -> nums.size()\
    \ - list.lastIndexOf(num)));\n                            ^\n    method Comparator.<T#1,U#1>comparing(Function<?\
    \ super T#1,? extends U#1>,Comparator<? super U#1>) is not applicable\n      (cannot\
    \ infer type-variable(s) T#1,U#1\n        (actual and formal argument lists differ\
    \ in length))\n    method Comparator.<T#2,U#2>comparing(Function<? super T#2,?\
    \ extends U#2>) is not applicable\n      (cannot infer type-variable(s) T#2,U#2\n\
    \        (argument mismatch; invalid method reference\n          method sum in\
    \ class Long cannot be applied to given types\n            required: long,long\n\
    \            found:    T#2\n            reason: actual and formal argument lists\
    \ differ in length))\n  where T#1,U#1,T#2,U#2 are type-variables:\n    T#1 extends\
    \ Object declared in method <T#1,U#1>comparing(Function<? super T#1,? extends\
    \ U#1>,Comparator<? super U#1>)\n    U#1 extends Object declared in method <T#1,U#1>comparing(Function<?\
    \ super T#1,? extends U#1>,Comparator<? super U#1>)\n    T#2 extends Object declared\
    \ in method <T#2,U#2>comparing(Function<? super T#2,? extends U#2>)\n    U#2 extends\
    \ Comparable<? super U#2> declared in method <T#2,U#2>comparing(Function<? super\
    \ T#2,? extends U#2>)\n1 error\n"
  stdout: ''
  timestamp: 1660011420
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // TODO:\n        // Write your code here\n        System.out.println(\"\
    Inside orderByPoints\");\n        System.out.println(nums);\n        Arrays.sort(nums);\n\
    \        System.out.println(nums);\n        ArrayList<Long> res = new ArrayList<>();\n\
    \        for(long n:nums) {\n            long sum = 0;\n            while(n >\
    \ 0) {\n                sum += n % 10;\n                n /= 10;\n           \
    \ }\n            if(!res.contains(sum))\n                res.add(sum);\n     \
    \   }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd9zi1cce.java:23: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Complete this function\n        ArrayList<Long> numsList = new ArrayList<Long>();\n\
    \        long total = 0;\n        for (Long num : nums) {\n            total +=\
    \ num;\n            numsList.add(total);\n        }\n        Collections.sort(numsList);\n\
    \        return numsList;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpctk21s5t.java:30)\n"
  stdout: ''
  timestamp: 1660011421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> sortedNums = new ArrayList<Long>();\n        ArrayList<Integer>\
    \ sortedDigits = new ArrayList<Integer>();\n        for (Long num : nums) {\n\
    \            BigInteger bigNum = new BigInteger(num.toString());\n           \
    \ sortedDigits.addAll(bigNum.divide(BigInteger.TEN).intValueExact());\n      \
    \  }\n        Collections.sort(sortedDigits);\n        for (Integer i : sortedDigits)\
    \ {\n            long sum = 0;\n            for (Long num : nums) {\n        \
    \        sum += num.intValue();\n            }\n            sortedNums.add(sum\
    \ / i);\n        }\n        return sortedNums;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzm8bv74m.java:23: error: incompatible types: int cannot be converted\
    \ to Collection<? extends Integer>\n            sortedDigits.addAll(bigNum.divide(BigInteger.TEN).intValueExact());\n\
    \                                                                           ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Write your code here\n        ArrayList<Long> tempList = new ArrayList<Long>();\n\
    \        Integer maxSum = 0;\n        Integer maxSumIndex = 0;\n        Integer\
    \ maxSumIndex2 = 0;\n        Integer maxSumIndex3 = 0;\n        Integer maxSumIndex4\
    \ = 0;\n        Integer maxSumIndex5 = 0;\n        Integer maxSumIndex6 = 0;\n\
    \        Integer maxSumIndex7 = 0;\n        Integer maxSumIndex8 = 0;\n      \
    \  Integer maxSumIndex9 = 0;\n        Integer maxSumIndex10 = 0;\n        Integer\
    \ maxSumIndex11 = 0;\n        Integer maxSumIndex12 = 0;\n        Integer maxSumIndex13\
    \ = 0;\n        Integer maxSumIndex14 = 0;\n        Integer maxSumIndex15 = 0;\n\
    \        Integer maxSumIndex16 = 0;\n        Integer maxSumIndex17 = 0;\n    \
    \    Integer maxSumIndex18 = 0;\n        Integer maxSumIndex19 = 0;\n        Integer\
    \ maxSumIndex20 = 0;\n        Integer maxSumIndex21 = 0;\n        Integer maxSumIndex22\
    \ = 0;\n        Integer maxSumIndex23 = 0;\n        Integer maxSumIndex24 = 0;\n\
    \        Integer maxSumIndex25 = 0;\n        Integer maxSumIndex26 = 0;\n    \
    \    Integer maxSumIndex27 = 0;\n        Integer maxSumIndex28 = 0;\n        Integer\
    \ maxSumIndex29 = 0;\n        Integer maxSumIndex30 = 0;\n        Integer maxSumIndex31\
    \ = 0;\n        Integer maxSumIndex32 = 0;\n        Integer maxSumIndex33 = 0;\n\
    \        Integer maxSumIndex34 = 0;\n        Integer maxSumIndex35 = 0;\n    \
    \    Integer maxSumIndex36 = 0;\n        Integer maxSumIndex37 = 0;\n        Integer\
    \ maxSumIndex38 = 0;\n        Integer maxSumIndex39 = 0;\n        Integer maxSumIndex40\
    \ = 0;\n        Integer maxSumIndex41 = 0;\n        Integer maxSumIndex42 = 0;\n\
    \        Integer maxSumIndex43 = 0;\n        Integer maxSumIndex44 = 0;\n    \
    \    Integer maxSumIndex45 = 0;\n        Integer maxSumIndex46 = 0;\n        Integer\
    \ maxSumIndex47 = 0;\n        Integer maxSumIndex48 = 0;\n        Integer maxSumIndex49\
    \ = 0;\n        Integer maxSumIndex50 = 0;\n        Integer maxSumIndex51 = 0;\n\
    \        Integer maxSumIndex52 = 0;\n        Integer maxSumIndex53 = 0;\n    \
    \    Integer maxSumIndex54 = 0;\n        Integer maxSumIndex55 = 0;\n        Integer\
    \ maxSumIndex56 = 0;\n        Integer maxSumIndex57 = 0;\n        Integer maxSumIndex58\
    \ = 0;\n        Integer maxSumIndex59 = 0;\n        Integer maxSumIndex60 = 0;\n\
    \        Integer maxSumIndex61 = 0;\n        Integer maxSumIndex62 = 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp66vlpc0x.java:84: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> list = new ArrayList<Long>();\n        Map<Long, Integer>\
    \ sumToPos = new HashMap<Long, Integer>();\n        for (Long value : nums) {\n\
    \            Integer pos = sumToPos.get(value);\n            if (pos == null)\
    \ {\n                pos = 0;\n            }\n            sumToPos.put(value,\
    \ pos + 1);\n        }\n        Collections.sort(nums, new Comparator<Long>()\
    \ {\n            public int compare(Long o1, Long o2) {\n                return\
    \ sumToPos.get(o1) - sumToPos.get(o2);\n            }\n        });\n        list.clear();\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            list.add((long)nums.get(i));\n\
    \        }\n        return list;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgxoni9qr.java:40)\n"
  stdout: ''
  timestamp: 1660011421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Comparator<Long> bySum = Comparator.comparingLong(num -> getSum(num));\n\
    \        ArrayList<Long> numsWithSum = nums.stream().sorted(bySum).collect(Collectors.toList());\n\
    \        if (nums.isEmpty() || numsWithSum.isEmpty())\n            return nums;\n\
    \        ArrayList<Long> numsCopy = new ArrayList<>(nums);\n        numsCopy.removeAll(numsWithSum);\n\
    \        ArrayList<Long> sortedNums = new ArrayList<>(numsWithSum);\n        for\
    \ (int i = 0; i < numsCopy.size(); i++)\n            sortedNums.add(numsCopy.get(i));\n\
    \        return sortedNums;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbtq3nags.java:19: error: cannot find symbol\n        Comparator<Long>\
    \ bySum = Comparator.comparingLong(num -> getSum(num));\n                    \
    \                                             ^\n  symbol:   method getSum(Long)\n\
    \  location: class Problem\n/tmp/tmpbtq3nags.java:20: error: incompatible types:\
    \ inference variable R has incompatible bounds\n        ArrayList<Long> numsWithSum\
    \ = nums.stream().sorted(bySum).collect(Collectors.toList());\n              \
    \                                                           ^\n    equality constraints:\
    \ List<T#2>\n    lower bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are\
    \ type-variables:\n    R extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    A extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    T#1 extends Object declared in interface Stream\n    T#2\
    \ extends Object declared in method <T#2>toList()\n2 errors\n"
  stdout: ''
  timestamp: 1660011421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     //TODO: Your code here\n        Map<Long, Integer> map = new HashMap<>();\n\
    \        for(Long n : nums) {\n            long sum = 0;\n            while(n\
    \ != 0) {\n                sum += n % 10;\n                n /= 10;\n        \
    \    }\n            map.put(sum, map.containsKey(sum) ? map.get(sum) + 1 : 1);\n\
    \        }\n\n        ArrayList<Long> result = new ArrayList<>();\n        for(Long\
    \ sum : map.keySet()) {\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4o6s0wi7.java:38)\n"
  stdout: ''
  timestamp: 1660011421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     nums.sort( (a,b) -> {\n            long sumA = 0, sumB = 0;\n          \
    \  for(int i : nums) {\n                sumA += i;\n            }\n          \
    \  for(int j : nums) {\n                sumB += j;\n            }\n          \
    \  long result = sumA == sumB ? sumA : sumB;\n            return Long.compare(sumA,\
    \ sumB);\n        });\n        return nums;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp638kxwsb.java:21: error: incompatible types: Long cannot be converted\
    \ to int\n            for(int i : nums) {\n                        ^\n/tmp/tmp638kxwsb.java:24:\
    \ error: incompatible types: Long cannot be converted to int\n            for(int\
    \ j : nums) {\n                        ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     nums.sort(Comparator.comparingLong(Long::sum).reversed());\n        return\
    \ nums;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyngw84t7.java:19: error: incompatible types: invalid method reference\n\
    \        nums.sort(Comparator.comparingLong(Long::sum).reversed());\n        \
    \                                   ^\n    method sum in class Long cannot be\
    \ applied to given types\n      required: long,long\n      found:    T\n     \
    \ reason: actual and formal argument lists differ in length\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>comparingLong(ToLongFunction<? super\
    \ T>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long, Long> map = new HashMap<Long, Long>();\n        for (Long num\
    \ : nums) {\n            if (map.containsKey(num)) {\n                Long cur\
    \ = map.get(num);\n                map.put(num, cur + num);\n            } else\
    \ {\n                map.put(num, num);\n            }\n        }\n        ArrayList<Long>\
    \ result = new ArrayList<Long>(map.values());\n        Collections.sort(result,\
    \ Comparator.comparing(x -> map.get(x)));\n        return result;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph3qs6x6l.java:33)\n"
  stdout: ''
  timestamp: 1660011421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        long tempSum =\
    \ 0;\n        for(long n : nums) {\n            tempSum = tempSum + n;\n     \
    \       result.add(tempSum);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8odpv2et.java:28)\n"
  stdout: ''
  timestamp: 1660011421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> ordered = new ArrayList<Long>(nums);\n        Collections.sort(ordered,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (o1 + o2) / 10.compareTo(o2 + o1);\n            }\n  \
    \      });\n        return ordered;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5qs_rub5.java:22: error: ';' expected\n                return (o1\
    \ + o2) / 10.compareTo(o2 + o1);\n                                      ^\n1 error\n"
  stdout: ''
  timestamp: 1660011421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> newNums = new ArrayList<Long>();\n        Set<Long> set\
    \ = new HashSet<Long>();\n        for(int i=0;i<nums.size();i++) {\n         \
    \   long num = nums.get(i);\n            if(set.contains(num)) {\n           \
    \     int index = set.indexOf(num);\n                int digitSum = 0;\n     \
    \           while(index > -1) {\n                    digitSum += nums.get(index--);\n\
    \                }\n                int newDigitSum = digitSum + num;\n      \
    \          if(!newNums.contains(newDigitSum)) {\n                    newNums.add(newDigitSum);\n\
    \                    set.add(num);\n                }\n            }else {\n \
    \               newNums.add(num);\n                set.add(num);\n           \
    \ }\n        }\n        return newNums;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk2yygvjl.java:24: error: cannot find symbol\n                int\
    \ index = set.indexOf(num);\n                               ^\n  symbol:   method\
    \ indexOf(long)\n  location: variable set of type Set<Long>\n/tmp/tmpk2yygvjl.java:29:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \            int newDigitSum = digitSum + num;\n                             \
    \              ^\n/tmp/tmpk2yygvjl.java:31: error: incompatible types: int cannot\
    \ be converted to Long\n                    newNums.add(newDigitSum);\n      \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011421
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Sort nums in ascending order of their sum of digits in descending order\n\
    \        // using Java 8 streams\n        Collections.sort(nums, Comparator.comparing((Number\
    \ n) -> n.longValue()).reversed());\n        return nums;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp10b3mqj.java:25)\n"
  stdout: ''
  timestamp: 1660011422
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Set<Long> set = new HashSet<>(nums);\n        List<Long> result = new ArrayList<>();\n\
    \        for (Long num : set) {\n            result.add(num);\n        }\n   \
    \     Collections.sort(result);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxsusx8cj.java:25: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return result;\n               ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011422
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(nums);\n\
    \        int curSum = 0;\n        for (Long num : nums) {\n            long digitSum\
    \ = Long.parseLong(num.toString());\n            if (digitSum == curSum) {\n \
    \               result.add(num);\n            } else {\n                curSum\
    \ = digitSum;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz5x9uy8v.java:20: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpz5x9uy8v.java:27: error: incompatible types: possible lossy\
    \ conversion from long to int\n                curSum = digitSum;\n          \
    \               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011422
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // O(nlogn)\n        Map<Long, Long> map = new HashMap<>();\n        Long\
    \ totalSum = nums.stream().mapToLong(x -> x).sum();\n        for (Long num : nums)\
    \ {\n            map.put(num, map.getOrDefault(num, 0) + totalSum);\n        }\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        for (Map.Entry<Long,\
    \ Long> entry : map.entrySet()) {\n            long value = entry.getValue();\n\
    \            if (value >= 0) {\n                result.add(entry.getKey());\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsb9qpcz0.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            map.put(num, map.getOrDefault(num, 0) + totalSum);\n  \
    \                                             ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011422
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Write your code here\n        return nums;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7dt2ixiz.java:23)\n"
  stdout: ''
  timestamp: 1660011212
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Write your code here\n        long[] arr = new long[nums.size()];\n \
    \       int j = 0;\n        for(int i = 0; i < arr.length; i++){\n           \
    \ arr[i] = nums.get(i);\n            while(arr[i] > 0){\n                arr[i]\
    \ += nums.get(j);\n                j++;\n            }\n        }\n        Arrays.sort(arr);\n\
    \        ArrayList<Long> temp = new ArrayList<Long>();\n        for(int i = 0;\
    \ i < arr.length; i++){\n            temp.add(i, arr[i]);\n        }\n       \
    \ return temp;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 5 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.orderByPoints(tmpsnb3in8b.java:25)\n\tat Problem.main(tmpsnb3in8b.java:37)\n"
  stdout: ''
  timestamp: 1660011422
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Comparator<Long> comparator = Comparator\n                .<Long>comparingLong(num\
    \ -> num % 10).reversed();\n        List<Long> result = new ArrayList<>();\n \
    \       for (long num : nums) {\n            result.add(num);\n        }\n   \
    \     Collections.sort(result, comparator);\n        return new ArrayList<Long>(result);\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp61s7j354.java:29)\n"
  stdout: ''
  timestamp: 1660011422
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Integer, Integer> digits = new HashMap<>();\n\n        for (int i =\
    \ 0; i < nums.size(); i++) {\n            int digit = 0;\n            for (int\
    \ j = 0; j < nums.size(); j++) {\n                digit += Math.abs(nums.get(j)\
    \ - nums.get(i));\n            }\n            digits.put(digit, i);\n        }\n\
    \n        ArrayList<Long> sortedNums = new ArrayList<>();\n\n        for (Integer\
    \ key : digits.keySet()) {\n            sortedNums.add(nums.get(digits.get(key)));\n\
    \        }\n        Collections.sort(sortedNums);\n        return sortedNums;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg_k1t5tk.java:38)\n"
  stdout: ''
  timestamp: 1660011422
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     long maxSum = nums.stream().mapToLong(x -> x).reduce(0, Integer::sum);\n\
    \        ArrayList<Long> sortedNums = new ArrayList<>();\n        for (long num\
    \ : nums) {\n            long sum = num + num;\n            if (sum > maxSum)\
    \ {\n                sum -= maxSum;\n                num += maxSum;\n        \
    \        maxSum = sum;\n            }\n            sortedNums.add(sum);\n    \
    \    }\n        return sortedNums;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx1gk1ao1.java:19: error: incompatible types: invalid method reference\n\
    \        long maxSum = nums.stream().mapToLong(x -> x).reduce(0, Integer::sum);\n\
    \                                                                ^\n    incompatible\
    \ types: possible lossy conversion from long to int\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011422
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     return nums\n            .stream()\n            .sorted(Comparator.comparingLong(num\
    \ -> num.longValue()))\n            .collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp00yaha91.java:25)\n"
  stdout: ''
  timestamp: 1660011423
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     return nums.stream().sorted((a, b) -> a.addAndGet(b.longValue()).compareTo(b.longValue())).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp23ksmm2x.java:19: error: cannot find symbol\n        return nums.stream().sorted((a,\
    \ b) -> a.addAndGet(b.longValue()).compareTo(b.longValue())).collect(Collectors.toList());\n\
    \                                               ^\n  symbol:   method addAndGet(long)\n\
    \  location: variable a of type Long\n/tmp/tmp23ksmm2x.java:19: error: incompatible\
    \ types: inference variable R has incompatible bounds\n        return nums.stream().sorted((a,\
    \ b) -> a.addAndGet(b.longValue()).compareTo(b.longValue())).collect(Collectors.toList());\n\
    \                                                                            \
    \                              ^\n    equality constraints: List<T#2>\n    lower\
    \ bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n  \
    \  R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n2 errors\n"
  stdout: ''
  timestamp: 1660011422
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // write your code here\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        HashMap<Long, Long> sumMap = new HashMap<>();\n        for(Long x: nums)\
    \ {\n            long sum=0;\n            while(x > 0) {\n                sum\
    \ += x % 10;\n                x /= 10;\n            }\n            if(!sumMap.containsKey(sum))\n\
    \                sumMap.put(sum, x);\n            else {\n                Long\
    \ oldVal = sumMap.get(sum);\n                result.add(sum);\n              \
    \  result.add(oldVal);\n            }\n        }\n        ArrayList res = new\
    \ ArrayList();\n        for(Long x: result) {\n            res.add(x);\n     \
    \   }\n        return res;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpawgd2eid.java:43)\n"
  stdout: ''
  timestamp: 1660011423
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // TODO: Complete me!\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0;\n        for (long n : nums) {\n            sum = sum +\
    \ n;\n            result.add(n);\n        }\n\n        // Sorting based on sum\
    \ of digits\n        Comparator<Long> c = Comparator.comparingLong(x -> sum %\
    \ 10);\n        Collections.sort(result, c);\n\n        // Sorting based on index\
    \ after sorting\n        // Collections.sort returns void but we want the original\
    \ array\n        Collections.sort(result, new Comparator<Long>() {\n         \
    \   public int compare(Long a, Long b) {\n                return nums.indexOf(a)\
    \ - nums.indexOf(b);\n            }\n        });\n\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6k5tfcmt.java:28: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n        Comparator<Long> c =\
    \ Comparator.comparingLong(x -> sum % 10);\n                                 \
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1660011422
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> sortedList = new ArrayList<>();\n        List<Long> list\
    \ = nums;\n        long sum = 0;\n        Arrays.sort(list);\n        for (long\
    \ l : list) {\n            sum += l;\n            sortedList.add(sum);\n     \
    \   }\n        return sortedList;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplf8u18y3.java:22: error: no suitable method found for sort(List<Long>)\n\
    \        Arrays.sort(list);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; List<Long> cannot be converted to\
    \ int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument mismatch;\
    \ List<Long> cannot be converted to long[])\n    method Arrays.sort(short[]) is\
    \ not applicable\n      (argument mismatch; List<Long> cannot be converted to\
    \ short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; List<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; List<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; List<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; List<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; List<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011423
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     List<Long> list = nums.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n\
    \        int sum = 0;\n        int index = 0;\n        long lastSum = 0;\n   \
    \     while (index < list.size()) {\n            sum += list.get(index).longValue();\n\
    \            if (sum != lastSum) {\n                list.add(index, 0);\n    \
    \            index++;\n            }\n            lastSum = sum;\n           \
    \ index++;\n        }\n        return nums.stream().sorted(Comparator.comparingLong(Long::longValue)).collect(Collectors.toList());\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt98psc9o.java:26: error: incompatible types: int cannot be converted\
    \ to Long\n                list.add(index, 0);\n                             \
    \   ^\n/tmp/tmpt98psc9o.java:32: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        return nums.stream().sorted(Comparator.comparingLong(Long::longValue)).collect(Collectors.toList());\n\
    \                                                                            \
    \          ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<Long>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011422
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long, List<Long>> numsBySum = nums.stream()\n                .collect(Collectors.groupingBy(x\
    \ -> sumOfDigits(x)));\n\n        return numsBySum.entrySet().stream()\n     \
    \           .sorted(Comparator.comparing(e -> e.getValue().indexOf(nums.get(e.getKey())),\
    \ Comparator.nullsFirst(Comparator.naturalOrder()))).map(e -> e.getKey()).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8zk2u8yy.java:20: error: cannot find symbol\n                .collect(Collectors.groupingBy(x\
    \ -> sumOfDigits(x)));\n                                                    ^\n\
    \  symbol:   method sumOfDigits(Long)\n  location: class Problem\n/tmp/tmp8zk2u8yy.java:23:\
    \ error: incompatible types: Long cannot be converted to int\n               \
    \ .sorted(Comparator.comparing(e -> e.getValue().indexOf(nums.get(e.getKey())),\
    \ Comparator.nullsFirst(Comparator.naturalOrder()))).map(e -> e.getKey()).collect(Collectors.toCollection(ArrayList::new));\n\
    \                                                                            \
    \            ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011423
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<>(nums);\n        Arrays.sort(result);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgj81g4qu.java:20: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(result);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011422
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long, Long> map = new HashMap<Long, Long>();\n        for (long n :\
    \ nums) {\n            map.compute(n, (n, sum) -> {\n                if (sum ==\
    \ 0) return n;\n                return sum > 0 ? sum : sum - n;\n            });\n\
    \        }\n        return new ArrayList<Long>(map.values());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoxdqmg8b.java:21: error: variable n is already defined in method\
    \ orderByPoints(ArrayList<Long>)\n            map.compute(n, (n, sum) -> {\n \
    \                           ^\n1 error\n"
  stdout: ''
  timestamp: 1660011423
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     //initialize new arraylist to store values\n        ArrayList<Long> sortedList\
    \ = new ArrayList<Long>();\n\n        //loop through values and add to new arraylist\n\
    \        for (long i = 0; i < nums.size(); i++) {\n            //sum value digits\
    \ into variable\n            long sum = 0;\n            //add each value to sum\
    \ variable\n            sum += nums.get(i);\n            //find index of value\n\
    \            int index = getIndexOfSum(sum, nums);\n            //put index in\
    \ the new list\n            sortedList.add(index, sum);\n        }\n        //sort\
    \ new list\n        Collections.sort(sortedList);\n        //return new list to\
    \ original arraylist\n        return nums;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmper04q4y_.java:27: error: incompatible types: possible lossy conversion\
    \ from long to int\n            sum += nums.get(i);\n                        \
    \    ^\n/tmp/tmper04q4y_.java:29: error: cannot find symbol\n            int index\
    \ = getIndexOfSum(sum, nums);\n                        ^\n  symbol:   method getIndexOfSum(long,ArrayList<Long>)\n\
    \  location: class Problem\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011423
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // write your code here\n        int count = 0;\n        ArrayList<Long>\
    \ sortedNums = new ArrayList<>();\n        for (int i = 0; i < nums.size(); i++)\
    \ {\n            long num = nums.get(i);\n            int numDigits = num != 0\
    \ ? num.toString().length() : 0;\n            int sum = numDigits + count * 10l;\n\
    \            while (sum < 0) {\n                sum += 10l;\n                count--;\n\
    \            }\n            while (sum > 10) {\n                sum -= 10l;\n\
    \                count++;\n            }\n            if (sum == numDigits) {\n\
    \                sortedNums.add(num);\n            }\n            if (numDigits\
    \ == count) {\n                sortedNums.add(num);\n            }\n        }\n\
    \        return sortedNums;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqiqym3w8.java:24: error: long cannot be dereferenced\n        \
    \    int numDigits = num != 0 ? num.toString().length() : 0;\n               \
    \                           ^\n/tmp/tmpqiqym3w8.java:25: error: incompatible types:\
    \ possible lossy conversion from long to int\n            int sum = numDigits\
    \ + count * 10l;\n                                ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011423
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> list = new ArrayList<Long>();\n        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            public int compare(Long a, Long b) {\n\
    \                long a = Math.abs(a);\n                long b = Math.abs(b);\n\
    \                long sum = a + b;\n                return sum < 0 ? -1 : 1;\n\
    \            }\n        });\n        return list;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz2d1bf5g.java:22: error: variable a is already defined in method\
    \ compare(Long,Long)\n                long a = Math.abs(a);\n                \
    \     ^\n/tmp/tmpz2d1bf5g.java:23: error: variable b is already defined in method\
    \ compare(Long,Long)\n                long b = Math.abs(b);\n                \
    \     ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011423
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        Map<Long, Integer>\
    \ map = new HashMap<>();\n        for (Long i: nums) {\n            Integer idx\
    \ = map.get(i);\n            if (idx == null) {\n                map.put(i, result.size());\n\
    \                result.add(i);\n            } else {\n                result.add(idx);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpznlv979g.java:27: error: incompatible types: Integer cannot be\
    \ converted to Long\n                result.add(idx);\n                      \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011423
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>(nums);\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            public int compare(Long o1, Long o2) {\n\
    \                return (int) (Math.signum(o1 - o2));\n            }\n       \
    \ });\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptgp9bjyq.java:28)\n"
  stdout: ''
  timestamp: 1660011423
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        long currentSum = 0;\n        int index;\n        long lastSum = 0;\n\
    \        for (long num : nums) {\n            currentSum = (long)num;\n      \
    \      index = 0;\n            while (currentSum > 0) {\n                sum +=\
    \ (long)Math.pow(10, index++);\n                currentSum -= (long)(Math.pow(10,\
    \ index));\n            }\n            result.add(sum);\n        }\n        Collections.sort(result);\n\
    \        if (lastSum != 0) {\n            for (long num : nums) {\n          \
    \      if (num != 0) {\n                    sum += num;\n                }\n \
    \           }\n            result.add(sum);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphp7wi5c0.java:45)\n"
  stdout: ''
  timestamp: 1660011423
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Sort from smallest to largest.\n        nums.sort((num1, num2) -> {\n\
    \            int diff1 = Math.abs(num1.longValue() - num2.longValue());\n    \
    \        int diff2 = Math.abs(num1.longValue() - num2.longValue());\n        \
    \    return diff1 == diff2 ? 0 : diff1 > diff2 ? 1 : -1;\n        });\n\n    \
    \    // If there are multiple items with the same sum,\n        // order them\
    \ based on their index in original array list.\n        // For example:\n    \
    \    // >>> orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l))))\n        // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n        // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n        // (new ArrayList<Long>(Arrays.asList()))\n\
    \        return nums;\n    }\n    public static void main(String[] args) {\n \
    \   assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpptsvdnwi.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            int diff1 = Math.abs(num1.longValue() - num2.longValue());\n\
    \                                ^\n/tmp/tmpptsvdnwi.java:22: error: incompatible\
    \ types: possible lossy conversion from long to int\n            int diff2 = Math.abs(num1.longValue()\
    \ - num2.longValue());\n                                ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011423
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n\n        for (int i = 0; i\
    \ < nums.size(); i++) {\n            long sum = nums.get(i);\n            if (sum\
    \ < 0)\n                sum = sum * -1;\n            while (sum != 0) {\n    \
    \            int digit = sum % 10;\n                sum = sum / 10;\n        \
    \        if (result.size() > 0 && result.get(result.size() - 1).longValue() !=\
    \ digit) {\n                    result.add(i--);\n                }\n        \
    \    }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi916j7wx.java:26: error: incompatible types: possible lossy conversion\
    \ from long to int\n                int digit = sum % 10;\n                  \
    \              ^\n/tmp/tmpi916j7wx.java:29: error: incompatible types: int cannot\
    \ be converted to Long\n                    result.add(i--);\n               \
    \                 ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     PriorityQueue<Long> pq = new PriorityQueue<Long>((a, b) -> b.compareTo(a));\n\
    \        for(long num: nums)\n            pq.add(num);\n        ArrayList<Long>\
    \ nums2 = new ArrayList<Long>();\n        while(!pq.isEmpty()){\n            long\
    \ a = pq.poll();\n            for(long b: nums){\n                long s = (b\
    \ - a) * (b / 10) + (b / 100) + a;\n                if(s == num) return nums2.add(b);\n\
    \            }\n        }\n        return nums2;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkkh4vdsh.java:27: error: cannot find symbol\n                if(s\
    \ == num) return nums2.add(b);\n                        ^\n  symbol:   variable\
    \ num\n  location: class Problem\n/tmp/tmpkkh4vdsh.java:27: error: incompatible\
    \ types: boolean cannot be converted to ArrayList<Long>\n                if(s\
    \ == num) return nums2.add(b);\n                                             ^\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     long sum = 0;\n        for(int i = 0; i < nums.size(); i++){\n         \
    \   sum += nums.get(i);\n        }\n\n        ArrayList<Long> list = new ArrayList<>();\n\
    \        for(int i = 0; i < nums.size(); i++){\n            long tempSum = 0;\n\
    \            for(int j = 0; j < nums.size(); j++){\n                tempSum +=\
    \ nums.get(j);\n                if(tempSum == sum){\n                    list.add(nums.get(j));\n\
    \                }\n            }\n        }\n\n        Collections.sort(list);\n\
    \        return list;\n    }\n    public static void main(String[] args) {\n \
    \   assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7gghn067.java:39)\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        PriorityQueue<Long>\
    \ pq = new PriorityQueue<>(nums.size());\n        for(long num: nums) {\n    \
    \        long sum = 0;\n            while(num != 0) {\n                sum +=\
    \ num % 10;\n                num /= 10;\n            }\n            pq.offer(sum);\n\
    \        }\n        while(!pq.isEmpty()) {\n            result.add(pq.poll());\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8ecyqwx.java:35)\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Write your code here.\n        return nums;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7v_h1hsi.java:23)\n"
  stdout: ''
  timestamp: 1660011214
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        Map<Long, Boolean>\
    \ map = new HashMap<>();\n        for(long num : nums) {\n            long sum\
    \ = 0;\n            while( num > 0 ) {\n                sum += (num % 10);\n \
    \               num /= 10;\n            }\n            if( map.containsKey(sum)\
    \ ) {\n                boolean isFirst = map.get(sum);\n                map.put(sum,\
    \ !isFirst);\n            } else {\n                map.put(sum, true);\n    \
    \        }\n        }\n        for(Map.Entry<Long, Boolean> entry : map.entrySet())\
    \ {\n            long key = entry.getKey();\n            if( entry.getValue()\
    \ ) {\n                result.add(key);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzjrjr7df.java:43)\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Write your code here\n        ArrayList<Long> num = new ArrayList<Long>();\n\
    \        for(long num1:nums) {\n            long n1 = num1%10;\n            long\
    \ n2 = num1/10;\n            long sum = n1 + n2;\n            int index = nums.indexOf(num1);\n\
    \            boolean isExist = false;\n            for(int i=0; i<nums.size();\
    \ i++) {\n                long n3 = nums.get(i)/10;\n                long n4 =\
    \ nums.get(i)%10;\n                long n5 = nums.get(i)/10;\n               \
    \ long n6 = nums.get(i)%10;\n                long sum = n3 + n4 + n5 + n6;\n \
    \               if(sum == sum) {\n                    isExist = true;\n      \
    \          }\n            }\n            if(isExist == false) {\n            \
    \    num.add(num1);\n            }\n        }\n        return num;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2kngcosv.java:32: error: variable sum is already defined in method\
    \ orderByPoints(ArrayList<Long>)\n                long sum = n3 + n4 + n5 + n6;\n\
    \                     ^\n1 error\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     if (nums.size() > 1) {\n            ArrayList<Long> sorted = new ArrayList<Long>(nums);\n\
    \            sorted.sort(new Comparator<Long>() {\n                public int\
    \ compare(Long o1, Long o2) {\n                    long d1, d2;\n            \
    \        d1 = o1 % 10;\n                    d2 = o2 % 10;\n                  \
    \  if (d1 == d2) {\n                        return o1.compareTo(o2);\n       \
    \             }\n                    else return Integer.compare(d1, d2);\n  \
    \              }\n            });\n            return sorted;\n        }\n   \
    \     return nums;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiebbk8y0.java:29: error: incompatible types: possible lossy conversion\
    \ from long to int\n                    else return Integer.compare(d1, d2);\n\
    \                                                ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Collections.sort(nums, new Comparator<Long>() {\n            public int\
    \ compare(long a, long b) {\n                long d = a ^ (b < 0 ? Long.MIN_VALUE\
    \ : b);\n                int r = Long.compare(d, 0);\n                return r\
    \ != 0 ? r : Long.compare(b, a);\n            }\n        });\n        return nums;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph7cskat0.java:19: error: <anonymous Problem$1> is not abstract\
    \ and does not override abstract method compare(Long,Long) in Comparator\n   \
    \     Collections.sort(nums, new Comparator<Long>() {\n                      \
    \                                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Arrays.stream(nums).mapToLong(i -> digitSum(i)).sorted((a, b) -> Integer.compare(digitSum(b),\
    \ digitSum(a))).collect(Collectors.toCollection(ArrayList::new));\n        return\
    \ nums;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7_y9043c.java:19: error: no suitable method found for stream(ArrayList<Long>)\n\
    \        Arrays.stream(nums).mapToLong(i -> digitSum(i)).sorted((a, b) -> Integer.compare(digitSum(b),\
    \ digitSum(a))).collect(Collectors.toCollection(ArrayList::new));\n          \
    \    ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n      (cannot\
    \ infer type-variable(s) T#1\n        (argument mismatch; ArrayList<Long> cannot\
    \ be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int) is not\
    \ applicable\n      (cannot infer type-variable(s) T#2\n        (actual and formal\
    \ argument lists differ in length))\n    method Arrays.stream(int[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Long> cannot be converted to int[])\n   \
    \ method Arrays.stream(long[]) is not applicable\n      (argument mismatch; ArrayList<Long>\
    \ cannot be converted to long[])\n    method Arrays.stream(double[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Long> cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> res = new ArrayList<>();\n        for (int i = 0; i < nums.size();\
    \ i++) {\n            int sum = 0;\n            long num = nums.get(i);\n    \
    \        while (num >= 10) {\n                sum += num % 10;\n             \
    \   num /= 10;\n            }\n            if (sum == 0) // If there is no sum,\
    \ just add them in the original order\n                res.add(num);\n       \
    \     else if (res.contains(sum))\n                res.add(num);\n           \
    \ else\n                res.add(i, sum);\n        }\n        return res;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmnutcw5.java:32: error: incompatible types: int cannot be converted\
    \ to Long\n                res.add(i, sum);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     if (nums.size() <= 1) return nums;\n        List<Long> numsWithSum = new\
    \ ArrayList<>();\n        Map<Long, Long> sumToDigits = new HashMap<>();\n   \
    \     long sum = 0;\n        for(Long num : nums) {\n            sum += num;\n\
    \            numsWithSum.add(num);\n        }\n        for(Map.Entry<Long, Long>\
    \ entry : sumToDigits.entrySet()) {\n            Long val = entry.getValue();\n\
    \            while(val > 0) {\n                long remainder = val % 10;\n  \
    \              sum -= remainder;\n                numsWithSum.remove(entry.getKey());\n\
    \                sumToDigits.put(sum, remainder);\n                val = val /\
    \ 10;\n            }\n        }\n        numsWithSum.removeAll(sumToDigits.keySet());\n\
    \        return numsWithSum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzk9fwigg.java:38: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        return numsWithSum;\n             \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // O(n) time, O(n) space algorithm that sorts the array list in-place using\n\
    \        // a sorting algorithm that can compute the sum of digits in O(logn)\
    \ time.\n        Arrays.sort(nums);\n        long prevSum = 0;\n        long sum\
    \ = 0;\n        int pos = 0;\n        for (int i = 0; i < nums.size(); i++) {\n\
    \            sum = nums.get(i) + prevSum;\n            if (sum > 0) {\n      \
    \          pos = i;\n            }\n            prevSum = sum;\n        }\n  \
    \      // Now copy the list to keep the original untouched.\n        ArrayList<Long>\
    \ newNums = new ArrayList<>(nums.size());\n        int start = 0;\n        while\
    \ (pos >= start) {\n            newNums.add(nums.get(pos));\n            pos-=start;\n\
    \            start++;\n        }\n        start = pos;\n        pos = 0;\n   \
    \     while (pos < nums.size()) {\n            sum = nums.get(pos) + prevSum;\n\
    \            if (sum > 0) {\n                newNums.add(nums.get(pos));\n   \
    \             pos+=start;\n                start++;\n            } else {\n  \
    \              pos++;\n            }\n            prevSum = sum;\n        }\n\
    \        return newNums;\n    }\n    public static void main(String[] args) {\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzy3mniak.java:21: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     long maxSum = Long.MIN_VALUE;\n        long minSum = Long.MAX_VALUE;\n \
    \       long maxDiff = Long.MIN_VALUE;\n        long minDiff = Long.MAX_VALUE;\n\
    \        int maxIndex = 0;\n        int minIndex = 0;\n        long sum = 0;\n\
    \        long maxSumSum = 0;\n        long minSumSum = 0;\n        long maxDiffSum\
    \ = 0;\n        long minDiffSum = 0;\n        long maxSumDiff = 0;\n        long\
    \ minSumDiff = 0;\n        int maxIndexSum = 0;\n        int minIndexSum = 0;\n\
    \        long maxSumDiffSum = 0;\n        long minSumDiffSum = 0;\n        int\
    \ maxIndexDiffSum = 0;\n        int minIndexDiffSum = 0;\n        long maxSumSumDiff\
    \ = 0;\n        long minSumSumDiff = 0;\n        int maxIndexSumSum = 0;\n   \
    \     int minIndexSumSum = 0;\n        long maxSumSumSumDiff = 0;\n        long\
    \ minSumSumSumDiff = 0;\n        int maxIndexSumDiffSum = 0;\n        int minIndexSumDiffSum\
    \ = 0;\n        long maxSumDiffSumDiff = 0;\n        long minSumDiffSumDiff =\
    \ 0;\n        int maxIndexDiffSumDiff = 0;\n        int minIndexDiffSumDiff =\
    \ 0;\n        for (int i = 0; i < nums.size(); i++) {\n            sum += nums.get(i);\n\
    \            maxSum = Math.max(maxSum, sum);\n            minSum = Math.min(minSum,\
    \ sum);\n            maxDiff = Math.max(maxDiff, Math.abs(sum - maxSum));\n  \
    \          minDiff = Math.min(minDiff, Math.abs(sum - minSum));\n            maxIndex\
    \ = Math.max(maxIndex, sum - maxDiff);\n            minIndex = Math.min(minIndex,\
    \ sum - minDiff);\n            maxSumSum = Math.max(maxSumSum, sum - maxDiff);\n\
    \            minSumSum = Math.min(minSumSum, sum - minDiff);\n            maxDiffSum\
    \ = Math.max(maxDiffSum, Math.abs(sum - maxSumSum));\n            minDiffSum =\
    \ Math.min(minDiffSum, Math.abs(sum - minSumSum));\n            maxSumDiff = Math.max(maxDiffSum,\
    \ Math.abs(sum - maxDiffSum));\n            minSumDiff = Math.min(minDiffSum,\
    \ Math.abs(sum - minDiffSum));\n            maxIndexSum = Math.max(maxIndexSum,\
    \ sum - maxDiffSum);\n            minIndexSum = Math.min(minIndexSum, sum - minDiffSum);\n\
    \            maxSumDiffSum = Math.max(maxDiffSum, Math.abs(sum - maxSumDiff));\n\
    \            minSumDiffSum = Math.min(minDiffSum, Math.abs(sum - minSumDiff));\n\
    \            maxIndexDiffSum = Math.max(maxIndexDiffSum, sum - \n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbi3ze5fg.java:69: error: illegal start of expression\n    }\n \
    \   ^\n/tmp/tmpbi3ze5fg.java:70: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011423
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        for(Long num: nums)\
    \ {\n            String s = num.toString();\n            int sum = 0;\n      \
    \      for(int i = 0; i < (s.length()); i++) {\n                sum += s.charAt(i)\
    \ - '0';\n            }\n            if(!result.contains(sum)) {\n           \
    \     result.add(num);\n            }\n        }\n        return result;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxapxpc8u.java:33)\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long, Integer> sumOfDigits = new HashMap<>();\n        sumOfDigits.put(0l,\
    \ nums.size());\n        for(Long num : nums) {\n            Integer digitSum\
    \ = sumOfDigits.get(num % 10);\n            sumOfDigits.put(digitSum, sumOfDigits.get(digitSum)\
    \ + 1);\n        }\n        ArrayList<Long> sortedList = new ArrayList<>();\n\
    \        for(Long digitSum : sumOfDigits.keySet()) {\n            List<Integer>\
    \ indicesOfNumsWithTheSameSumOfDigits = new ArrayList<>(sumOfDigits.get(digitSum));\n\
    \            Collections.sort(indicesOfNumsWithTheSameSumOfDigits);\n        \
    \    sortedList.add(nums.get(indicesOfNumsWithTheSameSumOfDigits.get(0)));\n \
    \       }\n        return sortedList;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjxoatufh.java:23: error: incompatible types: Integer cannot be\
    \ converted to Long\n            sumOfDigits.put(digitSum, sumOfDigits.get(digitSum)\
    \ + 1);\n                            ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     PriorityQueue<Long> pq = new PriorityQueue<>();\n        // sort num list\
    \ from smallest to largest\n        for (long num : nums) {\n            pq.add(num);\n\
    \        }\n\n        // sort pq according to its elements in reverse order\n\
    \        Collections.sort(pq, reverseOrderComparator());\n\n        // create\
    \ new pq list with the elements from nums in ascending order\n        ArrayList<Long>\
    \ sortedNums = new ArrayList<Long>();\n        while (!pq.isEmpty()) {\n     \
    \       sortedNums.add(pq.poll());\n        }\n\n        return sortedNums;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpus463xt8.java:26: error: cannot find symbol\n        Collections.sort(pq,\
    \ reverseOrderComparator());\n                             ^\n  symbol:   method\
    \ reverseOrderComparator()\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     return nums.stream().sorted(new Comparator<Long>() {\n            public\
    \ int compare(Long a, Long b) {\n                int sumOfA = getDigitSum(a);\n\
    \                int sumOfB = getDigitSum(b);\n                if (sumOfA < sumOfB)\
    \ {\n                    return -1;\n                } else if (sumOfA > sumOfB)\
    \ {\n                    return 1;\n                } else {\n               \
    \     return 0;\n                }\n            }\n        }).collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3hjyxwwj.java:21: error: cannot find symbol\n                int\
    \ sumOfA = getDigitSum(a);\n                             ^\n  symbol: method getDigitSum(Long)\n\
    /tmp/tmp3hjyxwwj.java:22: error: cannot find symbol\n                int sumOfB\
    \ = getDigitSum(b);\n                             ^\n  symbol: method getDigitSum(Long)\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long, Long> map = new HashMap<>();\n        for (Long num : nums) {\n\
    \            map.put(getSumOfDigits(num), num);\n        }\n        ArrayList<Long>\
    \ res = new ArrayList<>(nums);\n        res.sort(new Comparator<Long>() {\n  \
    \          @Override\n            public int compare(Long o1, Long o2) {\n   \
    \             return Integer.compare(map.get(o1), map.get(o2));\n            }\n\
    \        });\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkcjpuc6c.java:21: error: cannot find symbol\n            map.put(getSumOfDigits(num),\
    \ num);\n                    ^\n  symbol:   method getSumOfDigits(Long)\n  location:\
    \ class Problem\n/tmp/tmpkcjpuc6c.java:27: error: incompatible types: Long cannot\
    \ be converted to int\n                return Integer.compare(map.get(o1), map.get(o2));\n\
    \                                              ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011424
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Set<Integer> points = new TreeSet<Integer>(\n            Collections.singletonList(\n\
    \                Collections.nCopies(nums.size(), 0)\n            )\n        );\n\
    \n        for (int i = 0; i < nums.size(); i++) {\n            long num = nums.get(i);\n\
    \            int digits = (int) Math.floor(Math.log10(num));\n            long\
    \ nextNum = num / Math.pow(10, digits);\n\n            if (points.contains(digits))\
    \ {\n                points.get(digits) += 1;\n                points.add(i, points.get(digits));\n\
    \            } else {\n                points.add(i, 1);\n            }\n    \
    \    }\n\n        List<Long> result = new ArrayList<Long>(nums.size());\n    \
    \    for (int i = 0; i < points.size(); i++) {\n            result.add(nums.get(points.get(i)));\n\
    \        }\n\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyvbffjzc.java:19: error: no suitable constructor found for TreeSet(List<List<Integer>>)\n\
    \        Set<Integer> points = new TreeSet<Integer>(\n                       \
    \       ^\n    constructor TreeSet.TreeSet(NavigableMap<Integer,Object>) is not\
    \ applicable\n      (argument mismatch; no instance(s) of type variable(s) T#1,T#2\
    \ exist so that List<T#1> conforms to NavigableMap<Integer,Object>)\n    constructor\
    \ TreeSet.TreeSet(Comparator<? super Integer>) is not applicable\n      (argument\
    \ mismatch; no instance(s) of type variable(s) T#1,T#2 exist so that List<T#1>\
    \ conforms to Comparator<? super Integer>)\n    constructor TreeSet.TreeSet(Collection<?\
    \ extends Integer>) is not applicable\n      (argument mismatch; inference variable\
    \ T#1 has incompatible bounds\n          lower bounds: Integer,Object\n      \
    \    lower bounds: List<T#2>)\n    constructor TreeSet.TreeSet(SortedSet<Integer>)\
    \ is not applicable\n      (argument mismatch; no instance(s) of type variable(s)\
    \ T#1,T#2 exist so that List<T#1> conforms to SortedSet<Integer>)\n  where T#1,T#2\
    \ are type-variables:\n    T#1 extends Object declared in method <T#1>singletonList(T#1)\n\
    \    T#2 extends Object declared in method <T#2>nCopies(int,T#2)\n/tmp/tmpyvbffjzc.java:28:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \           long nextNum = num / Math.pow(10, digits);\n                     \
    \          ^\n/tmp/tmpyvbffjzc.java:31: error: cannot find symbol\n          \
    \      points.get(digits) += 1;\n                      ^\n  symbol:   method get(int)\n\
    \  location: variable points of type Set<Integer>\n/tmp/tmpyvbffjzc.java:32: error:\
    \ cannot find symbol\n                points.add(i, points.get(digits));\n   \
    \                                 ^\n  symbol:   method get(int)\n  location:\
    \ variable points of type Set<Integer>\n/tmp/tmpyvbffjzc.java:34: error: method\
    \ add in interface Set<E> cannot be applied to given types;\n                points.add(i,\
    \ 1);\n                      ^\n  required: Integer\n  found:    int,int\n  reason:\
    \ actual and formal argument lists differ in len"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long, ArrayList<Long>> map = new HashMap<>();\n        long max = 0;\n\
    \        for(Long num: nums) {\n            long sum = 0;\n            for(long\
    \ d = num; d>0; d /= 10) {\n                sum += d % 10;\n            }\n  \
    \          long key = (sum + num) % 10;\n            ArrayList<Long> list = map.get(key);\n\
    \            if(list == null) {\n                list = new ArrayList<>();\n \
    \               map.put(key, list);\n            }\n            list.add(num);\n\
    \            max = Math.max(max, sum + num);\n        }\n\n        ArrayList<Long>\
    \ list = new ArrayList<>();\n        for(Long sum: map.keySet()) {\n         \
    \   List<Long> list = map.get(sum);\n            Collections.sort(list);\n   \
    \         list.forEach(list::add);\n        }\n        Collections.sort(list);\n\
    \        list.forEach(list::add);\n        return list;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnkx03j5g.java:38: error: variable list is already defined in method\
    \ orderByPoints(ArrayList<Long>)\n            List<Long> list = map.get(sum);\n\
    \                       ^\n1 error\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     if (nums == null) return nums;\n        Arrays.sort(nums);\n        Arrays.sort(nums,\
    \ Collections.reverseOrder());\n        int sum = 0;\n        boolean hasRepeating\
    \ = true;\n        long maxRepeatingNum = nums.get((nums.size() - 1));\n     \
    \   for (long num : nums) {\n            sum += num % 10;\n            if (sum\
    \ != 0) {\n                hasRepeating = false;\n                if (sum == maxRepeatingNum)\
    \ {\n                    maxRepeatingNum = num;\n                }\n         \
    \   }\n        }\n        if (hasRepeating) {\n            ArrayList<Long> repeatingNums\
    \ = new ArrayList<Long>();\n            long maxRepeatingSum = sum;\n        \
    \    int index = 0;\n            for (long num : nums) {\n                sum\
    \ += num % 10;\n                if (sum == maxRepeatingSum) {\n              \
    \      repeatingNums.add(num);\n                } else {\n                   \
    \ maxRepeatingSum = sum;\n                    index = nums.indexOf(num);\n   \
    \             }\n            }\n            repeatingNums.add(nums.get(index));\n\
    \            return repeatingNums;\n        } else {\n            return nums;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphy81wx65.java:20: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(nums);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmphy81wx65.java:21: error: no suitable method found for sort(ArrayList<Long>,Comparator<Object>)\n\
    \        Arrays.sort(nums, Collections.reverseOrder());\n              ^\n   \
    \ method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is not applicable\n \
    \     (cannot infer type-variable(s) T#1\n        (argument mismatch; ArrayList<Long>\
    \ cannot be converted to "
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // write your code here\n        Map<Long, Integer> map = new HashMap<>();\n\
    \        for(long num : nums){\n            int count = 1;\n            while(num\
    \ != 0){\n                if((num % 10) == 0){\n                    count++;\n\
    \                }\n                num = num / 10;\n            }\n         \
    \   map.put(count, map.getOrDefault(count, 0) + 1);\n        }\n        List<Long>\
    \ sortedNums = new ArrayList<>();\n        for(Map.Entry<Long, Integer> entry\
    \ : map.entrySet()){\n            sortedNums.add(entry.getKey());\n        }\n\
    \        Collections.sort(sortedNums);\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        result.addAll(sortedNums);\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqfv8nuki.java:29: error: incompatible types: int cannot be converted\
    \ to Long\n            map.put(count, map.getOrDefault(count, 0) + 1);\n     \
    \               ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Write your code here\n        // Use the following line to sort nums\
    \ in ascending order\n        ArrayList<Long> ordered = new ArrayList<Long>(nums);\n\
    \        ordered.sort(Comparator.comparingLong(num -> num.sum()));\n        return\
    \ ordered;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmjsrenkn.java:22: error: method sum in class Long cannot be applied\
    \ to given types;\n        ordered.sort(Comparator.comparingLong(num -> num.sum()));\n\
    \                                                        ^\n  required: long,long\n\
    \  found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n1 error\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     nums.sort(Comparator.comparingLong(Long::sum));\n        return nums;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq3q8w8__.java:19: error: incompatible types: invalid method reference\n\
    \        nums.sort(Comparator.comparingLong(Long::sum));\n                   \
    \                        ^\n    method sum in class Long cannot be applied to\
    \ given types\n      required: long,long\n      found:    T\n      reason: actual\
    \ and formal argument lists differ in length\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>comparingLong(ToLongFunction<? super\
    \ T>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011417
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     nums.sort((a, b) -> Integer.compare(sumDigits(a), sumDigits(b)));\n    \
    \    return nums;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5_do2779.java:19: error: cannot find symbol\n        nums.sort((a,\
    \ b) -> Integer.compare(sumDigits(a), sumDigits(b)));\n                      \
    \                      ^\n  symbol:   method sumDigits(Long)\n  location: class\
    \ Problem\n/tmp/tmp5_do2779.java:19: error: cannot find symbol\n        nums.sort((a,\
    \ b) -> Integer.compare(sumDigits(a), sumDigits(b)));\n                      \
    \                                    ^\n  symbol:   method sumDigits(Long)\n \
    \ location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011425
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Write your code here\n        int sum = 0;\n        ArrayList<Long> numsOrder\
    \ = new ArrayList<>();\n        for(int i=0;i<nums.size();i++){\n            sum\
    \ += nums.get(i);\n            if(sum%10 == 0){\n                numsOrder.add(nums.get(i));\n\
    \            }\n        }\n        return numsOrder;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7e0cimxd.java:31)\n"
  stdout: ''
  timestamp: 1660011426
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     int sum = 0;\n        Map<Long, Integer> map = new HashMap<Long, Integer>();\n\
    \        for (Long num : nums) {\n            sum += num.intValue();\n       \
    \     map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n        List<Long>\
    \ result = new ArrayList<Long>(map.keySet());\n        Collections.sort(result,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                int c = o1.compareTo(o2);\n                return\
    \ c != 0 ? c : o2.compareTo(o1);\n            }\n        });\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwm73i73l.java:23: error: incompatible types: int cannot be converted\
    \ to Long\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n         \
    \           ^\n/tmp/tmpwm73i73l.java:33: error: incompatible types: List<Long>\
    \ cannot be converted to ArrayList<Long>\n        return result;\n           \
    \    ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011426
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     long sum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n       \
    \     sum += nums.get(i);\n        }\n        long max = 0;\n        for (int\
    \ i = 0; i < nums.size(); i++) {\n            if (sum < 0) sum += nums.get(i);\
    \ else sum += nums.get(i);\n            if (max < sum) max = sum;\n        }\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            if (nums.get(i) < 0) result.add(nums.get(i)\
    \ - max);\n            else result.add(nums.get(i) - sum);\n        }\n      \
    \  return result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4u8ycj50.java:36)\n"
  stdout: ''
  timestamp: 1660011426
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     List<Long> sortedNums = new ArrayList<>();\n        for(Long num : nums)\
    \ {\n            long sum = nums.stream().filter(x -> x % 10 == 0).sum();\n  \
    \          sortedNums.add(sum);\n        }\n        Collections.sort(sortedNums);\n\
    \        return sortedNums;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpokid423l.java:21: error: cannot find symbol\n            long sum\
    \ = nums.stream().filter(x -> x % 10 == 0).sum();\n                          \
    \                                   ^\n  symbol:   method sum()\n  location: interface\
    \ Stream<Long>\n/tmp/tmpokid423l.java:25: error: incompatible types: List<Long>\
    \ cannot be converted to ArrayList<Long>\n        return sortedNums;\n       \
    \        ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011426
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     return nums\n                .stream()\n                .sorted(Comparator.comparing(num\
    \ -> num.longValue()))\n                .collect(Collectors.toList());\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi_8keqta.java:22: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .collect(Collectors.toList());\n\
    \                        ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011426
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     long sum = 0;\n        long first;\n        long second;\n        int index;\n\
    \n        ArrayList<Long> result = new ArrayList<>();\n        ArrayList<Long>\
    \ list = new ArrayList<>();\n\n        for (Long n : nums) {\n            sum\
    \ += n;\n        }\n        Collections.sort(nums);\n        long maxSum = Collections.max(nums);\n\
    \n        for (Long n : nums) {\n            if (sum == maxSum) {\n          \
    \      list.add(n);\n            } else {\n                first = 0;\n      \
    \          index = 0;\n                while (first != 1) {\n                \
    \    second = nums.get(index);\n                    first = first % 10;\n    \
    \                index = index / 10;\n                }\n                list.add(second\
    \ + first + n);\n            }\n        }\n        for (Long n : list) {\n   \
    \         result.add(n);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprlmtvnoj.java:44: error: variable second might not have been initialized\n\
    \                list.add(second + first + n);\n                         ^\n1\
    \ error\n"
  stdout: ''
  timestamp: 1660011426
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<Long>();\n        long sum = 0;\n\
    \        for (Long i : nums) {\n            sum += i;\n        }\n        result.addAll(nums.subList(0,\
    \ nums.size() - 1));\n        result.sort(Comparator.comparingLong(n -> sum +\
    \ n));\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiewmeqvo.java:25: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n        result.sort(Comparator.comparingLong(n\
    \ -> sum + n));\n                                                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011426
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Your code here\n        ArrayList<Long> res = new ArrayList<>();\n  \
    \      long[] numArr = nums.stream().mapToLong(i -> i).toArray();\n        Arrays.sort(numArr);\n\
    \        int i = 0;\n        while (!nums.isEmpty()) {\n            boolean isSorted\
    \ = false;\n            int j = i;\n            for (; i < nums.size() && !isSorted;\
    \ i++) {\n                isSorted = (nums.get(i) + nums.get(j)) <= 0;\n     \
    \           j++;\n            }\n            if (isSorted) {\n               \
    \ res.add(nums.get(i++));\n            } else {\n                res.add(numArr[j]);\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 5 out of bounds for length 5\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.orderByPoints(tmppnajvav7.java:32)\n\tat Problem.main(tmppnajvav7.java:40)\n"
  stdout: ''
  timestamp: 1660011426
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Write your code here\n        List<Integer> numsAsInteger = nums.stream().mapToInt(n->(int)n).toList();\n\
    \        ArrayList<Integer> numsAsIntegerSorted = new ArrayList<>(numsAsInteger);\n\
    \        Arrays.sort(numsAsIntegerSorted);\n        List<Long> numsAsLong = new\
    \ ArrayList<>();\n        for(Integer i : numsAsIntegerSorted) {\n           \
    \ numsAsLong.add(Long.valueOf(i));\n        }\n        numsAsLong = numsAsLong.stream().mapToLong(n->n).toList();\n\
    \        ArrayList<Long> numsAsLongSorted = new ArrayList<>(numsAsLong);\n   \
    \     Arrays.sort(numsAsLongSorted);\n        nums = numsAsLongSorted.stream().mapToLong(n\
    \ -> n).toArray();\n        return nums;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpalianhwl.java:20: error: incompatible types: Long cannot be converted\
    \ to int\n        List<Integer> numsAsInteger = nums.stream().mapToInt(n->(int)n).toList();\n\
    \                                                                     ^\n/tmp/tmpalianhwl.java:20:\
    \ error: cannot find symbol\n        List<Integer> numsAsInteger = nums.stream().mapToInt(n->(int)n).toList();\n\
    \                                                                       ^\n  symbol:\
    \   method toList()\n  location: interface IntStream\n/tmp/tmpalianhwl.java:22:\
    \ error: no suitable method found for sort(ArrayList<Integer>)\n        Arrays.sort(numsAsIntegerSorted);\n\
    \              ^\n    method Arrays.sort(int[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to int[])\n    method Arrays.sort(long[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to long[])\n    method Arrays.sort(short[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to short[])\n    method Arrays.sort(char[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to char[])\n    method Arrays.sort(byte[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to byte[])\n    method Arrays.sort(float[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to float[])\n    method Arrays.sort(double[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Integer> cannot be converted to double[])\n    method Arrays.sort(Object[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Integer> cannot be converted\
    \ to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is\
    \ not applicable\n      (cannot infer type-variable(s) T#1\n        (actual and\
    \ formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ ty"
  stdout: ''
  timestamp: 1660011426
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> sortedNums = new ArrayList<Long>();\n        for(Long i\
    \ : nums) {\n            long sum = 0;\n            while(i>0) {\n           \
    \     sum += i % 10;\n                i /= 10;\n            }\n            if(sortedNums.contains(sum))\
    \ {\n                Collections.swap(sortedNums, sortedNums.indexOf(sum), sortedNums.indexOf(sortedNums.get(sortedNums.indexOf(sum))\
    \ + 1));\n            } else {\n                sortedNums.add(sum);\n       \
    \     }\n        }\n        return sortedNums;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp79f26fxh.java:35)\n"
  stdout: ''
  timestamp: 1660011426
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     long sum = 0;\n        ArrayList<Long> nums_2 = new ArrayList<>(nums);\n\
    \        Collections.sort(nums_2, (num1, num2) ->\n                ((num1 > num2)\
    \ ? 1 : ((num2 > num1) ? -1 : 0)))\n                .forEach((num) -> sum += num);\n\
    \        return nums_2.stream().filter((num) -> (num == sum))\n              \
    \  .collect(Collectors.toCollection(() -> new ArrayList<>(nums_2)));\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5a2b999g.java:23: error: void cannot be dereferenced\n        \
    \        .forEach((num) -> sum += num);\n                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011426
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     int maxSum = 0;\n        for (int i = 0; i < nums.size(); i++) {\n     \
    \       long num = nums.get(i);\n            int sum = 0;\n            while (num\
    \ > 0) {\n                sum += num % 10;\n                num /= 10;\n     \
    \       }\n            if (sum > maxSum) {\n                maxSum = sum;\n  \
    \          }\n        }\n        ArrayList<Long> sorted = new ArrayList<>();\n\
    \        List<Long> list = nums.stream().sorted(Comparator.comparingLong(i ->\
    \ sumToInt(i)).thenComparing(i -> i)).collect(Collectors.toList());\n        for\
    \ (int i = 0; i < list.size(); i++) {\n            long num = list.get(i);\n \
    \           int sum = 0;\n            while (num > 0) {\n                sum +=\
    \ num % 10;\n                num /= 10;\n            }\n            if (sum >\
    \ maxSum) {\n                sorted.add(sumToInt(sum));\n            } else {\n\
    \                sorted.add(sumToInt(maxSum));\n            }\n        }\n   \
    \     return sorted;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpknuqsz9p.java:32: error: cannot find symbol\n        List<Long>\
    \ list = nums.stream().sorted(Comparator.comparingLong(i -> sumToInt(i)).thenComparing(i\
    \ -> i)).collect(Collectors.toList());\n                                     \
    \                                        ^\n  symbol:   method sumToInt(Object)\n\
    \  location: class Problem\n/tmp/tmpknuqsz9p.java:32: error: incompatible types:\
    \ inference variable U has incompatible bounds\n        List<Long> list = nums.stream().sorted(Comparator.comparingLong(i\
    \ -> sumToInt(i)).thenComparing(i -> i)).collect(Collectors.toList());\n     \
    \                                                                            \
    \                      ^\n    lower bounds: Comparable<? super U>\n    lower bounds:\
    \ Object\n  where U,T are type-variables:\n    U extends Comparable<? super U>\
    \ declared in method <U>thenComparing(Function<? super T,? extends U>)\n    T\
    \ extends Object declared in interface Comparator\n/tmp/tmpknuqsz9p.java:41: error:\
    \ cannot find symbol\n                sorted.add(sumToInt(sum));\n           \
    \                ^\n  symbol:   method sumToInt(int)\n  location: class Problem\n\
    /tmp/tmpknuqsz9p.java:43: error: cannot find symbol\n                sorted.add(sumToInt(maxSum));\n\
    \                           ^\n  symbol:   method sumToInt(int)\n  location: class\
    \ Problem\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011426
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // sort according to sum of digit\n        ArrayList<Long> sorted = new\
    \ ArrayList<>(nums);\n        sorted.sort(new Comparator<Long>() {\n         \
    \   public int compare(Long a, Long b) {\n                int sumOfA = sumOfInt(a);\n\
    \                int sumOfB = sumOfInt(b);\n                return sumOfA - sumOfB;\n\
    \            }\n            private int sumOfInt(Long longNum) {\n           \
    \     int sum = 0;\n                while (longNum != 0) {\n                 \
    \   int digit = longNum % 10;\n                    sum += digit;\n           \
    \         longNum = longNum / 10;\n                }\n                return sum;\n\
    \            }\n        });\n        return sorted;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp70wm_ya6.java:30: error: incompatible types: possible lossy conversion\
    \ from long to int\n                    int digit = longNum % 10;\n          \
    \                              ^\n1 error\n"
  stdout: ''
  timestamp: 1660011426
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // Your code goes here\n        return nums;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr8m5tbx4.java:23)\n"
  stdout: ''
  timestamp: 1660011426
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     long largestSum = 0;\n        int highestIndex = 0;\n\n        // Calculate\
    \ the sum of digits in every number\n        for (long num : nums) {\n       \
    \     long sumOfDigits = num % 10;\n\n            // If number is even sum up\
    \ of digits in original array\n            if (num % 2 == 0) {\n             \
    \   largestSum = sumOfDigits + largestSum;\n            }\n\n            // If\
    \ number is odd, sum up of digits in original array\n            else {\n    \
    \            largestSum = largestSum + num % 10;\n            }\n        }\n\n\
    \        // Get index of numbers with largest sum\n        for (int i = 0; i <\
    \ nums.size(); i++) {\n            long sumOfDigits = nums.get(i);\n\n       \
    \     // If number is even sum up of digits in original array\n            if\
    \ (nums.get(i) % 2 == 0) {\n                largestSum = sumOfDigits + largestSum;\n\
    \            }\n\n            // If number is odd, sum up of digits in original\
    \ array\n            else {\n                largestSum = largestSum + nums.get(i)\
    \ % 10;\n            }\n\n            // Find out index with largest sum\n   \
    \         if (largestSum > nums.get(i)) {\n                highestIndex = i;\n\
    \                largestSum = nums.get(i);\n            }\n        }\n\n     \
    \   // Get the original array list\n        ArrayList<Long> sortedArrayList =\
    \ nums.stream()\n                .filter(n -> n != highestIndex)\n           \
    \     .collect(Collectors.toList());\n\n        // If there are more than one\
    \ number with largest sum, order them by their index\n        if (highestIndex\
    \ >= 1) {\n            ArrayList<Long> orderedArrayList = nums.stream()\n    \
    \                .filter(n -> n != highestIndex)\n                    .collect(Collectors.toList());\n\
    \n            Collections.sort(orderedArrayList, new Comparator<Long>() {\n  \
    \              @Override\n                public int compare(Long o1, Long o2)\
    \ {\n                    return orderedArrayList.indexOf(o1) - orderedArrayList.indexOf(o2);\n\
    \                }\n            });\n\n            sortedArrayList.addAll(orderedArrayList);\n\
    \        }\n\n        return sortedArrayList;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjgino21e.java:61: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .collect(Collectors.toList());\n\
    \                        ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n/tmp/tmpjgino21e.java:67: error: incompatible types:\
    \ inference variable R has incompatible bounds\n                    .collect(Collectors.toList());\n\
    \                            ^\n    equality constraints: List<T#2>\n    lower\
    \ bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are type-variables:\n  \
    \  R extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    A extends Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n\
    \    T#1 extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n2 errors\n"
  stdout: ''
  timestamp: 1660011426
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     long sum = 0;\n        int cnt = 0;\n        for (long num : nums) {\n \
    \           sum = sum + num;\n            cnt++;\n        }\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        int n = nums.size();\n        long num\
    \ = 0;\n        int start = 0;\n        int end = 0;\n        while (start < n)\
    \ {\n            int mid = start + (end - start) / 2;\n            num = nums.get(mid);\n\
    \            int i = 0;\n            while (i < n && num == nums.get(i)) {\n \
    \               i++;\n            }\n            if (i == n) {\n             \
    \   result.add(num);\n                end = mid;\n            } else {\n     \
    \           int j = 0;\n                while (j++ < n && num < nums.get(j)) {\n\
    \                    j++;\n                }\n                if (j == n) {\n\
    \                    result.add(num);\n                    start = mid + 1;\n\
    \                } else {\n                    result.add(num);\n            \
    \        start = mid;\n                    end = mid;\n                }\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011431
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     PriorityQueue<Long> pq = new PriorityQueue<>();\n        for (Long num :\
    \ nums) {\n            pq.add(new Long(num.intValue()));\n        }\n\n      \
    \  ArrayList<Long> result = new ArrayList<>();\n        while (!pq.isEmpty())\
    \ {\n            result.add(pq.poll());\n        }\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu1atd4ga.java:31)\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     int len = nums.size();\n        if(len == 0) return nums;\n        ArrayList<Long>\
    \ res = new ArrayList<>();\n        Long sum = 0;\n        for(int i = 0; i <\
    \ len; i++) {\n            sum += nums.get(i);\n            if(sum != 0) {\n \
    \               res.add(sum);\n                sum = 0;\n            }\n     \
    \   }\n        if(sum != 0) res.add(sum);\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6nc4zzvh.java:22: error: incompatible types: int cannot be converted\
    \ to Long\n        Long sum = 0;\n                   ^\n/tmp/tmp6nc4zzvh.java:27:\
    \ error: incompatible types: int cannot be converted to Long\n               \
    \ sum = 0;\n                      ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> list = new ArrayList<>(nums);\n        list.sort(Comparator.comparing(num\
    \ -> sumOfDigits(num)));\n        return list;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp688ts0yw.java:20: error: cannot find symbol\n        list.sort(Comparator.comparing(num\
    \ -> sumOfDigits(num)));\n                                              ^\n  symbol:\
    \   method sumOfDigits(Long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     return nums.stream()\n                .sorted((a,b) -> Long.compare(a +\
    \ b, a.sum()))\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6uoj3qjs.java:20: error: method sum in class Long cannot be applied\
    \ to given types;\n                .sorted((a,b) -> Long.compare(a + b, a.sum()))\n\
    \                                                      ^\n  required: long,long\n\
    \  found:    no arguments\n  reason: actual and formal argument lists differ in\
    \ length\n1 error\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long, List<Long>> map = nums.stream().collect(\n            Collectors.groupingBy(num\
    \ -> Integer.valueOf(num / 10))\n        );\n        ArrayList<Long> results =\
    \ new ArrayList<>();\n        for (Map.Entry<Long, List<Long>> entry : map.entrySet())\
    \ {\n            Long key = entry.getKey();\n            Long sum = key;\n   \
    \         for (Long num : entry.getValue()) {\n                sum += num;\n \
    \           }\n            results.add(sum);\n        }\n        return results;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptq8evtv0.java:20: error: no suitable method found for valueOf(long)\n\
    \            Collectors.groupingBy(num -> Integer.valueOf(num / 10))\n       \
    \                                         ^\n    method Integer.valueOf(String)\
    \ is not applicable\n      (argument mismatch; long cannot be converted to String)\n\
    \    method Integer.valueOf(int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     if (nums == null || nums.isEmpty()) return nums;\n        Map<Long, Integer>\
    \ points = new HashMap<Long, Integer>();\n        for (Long num : nums) {\n  \
    \          Integer prev = points.get(num);\n            if (prev != null)\n  \
    \              points.put(num, prev + 1);\n            else points.put(num, 0);\n\
    \        }\n        ArrayList<Long> res = new ArrayList<Long>();\n        for\
    \ (Map.Entry<Long, Integer> entry : points.entrySet()) {\n            Integer\
    \ count = entry.getValue();\n            Long num = entry.getKey();\n        \
    \    while (count > 0) {\n                res.add(num % 10);\n               \
    \ num /= 10;\n                count --;\n            }\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeo2zhl9n.java:40)\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long, Long> map = new HashMap<Long, Long>();\n        for(long num :\
    \ nums) {\n            long sum = 0;\n            while(num != 0) {\n        \
    \        sum += num % 10;\n                num /= 10;\n            }\n       \
    \     map.put(sum, num);\n        }\n        return new ArrayList<Long>(map.values());\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofqq46aj.java:31)\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> temp = new ArrayList<Long>();\n        Collections.sort(nums);\n\
    \        for (int i = 0; i < nums.size(); i++) {\n            temp.clear();\n\
    \            int sum = 0;\n            long num = nums.get(i);\n            while\
    \ (num >= 10) {\n                sum += num % 10;\n                num /= 10;\n\
    \            }\n            temp.add(sum);\n        }\n        for (int i = 0;\
    \ i < nums.size(); i++) {\n            int min = i;\n            for (int j =\
    \ i; j < nums.size(); j++) {\n                if (temp.get(j) < temp.get(min))\
    \ {\n                    min = j;\n                }\n            }\n        \
    \    if (min != i) {\n                for (int k = i; k <= min; k++) {\n     \
    \               nums.set(k, nums.get(k));\n                }\n               \
    \ nums.remove(min);\n            }\n        }\n        return nums;\n    }\n \
    \   public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7mz8dcv4.java:29: error: incompatible types: int cannot be converted\
    \ to Long\n            temp.add(sum);\n                     ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Collections.sort(nums);\n        ArrayList<Long> ret = new ArrayList<Long>(nums.size());\n\
    \        int count = 0;\n        for (long x : nums) {\n            while (count\
    \ < nums.size() && nums.get(count) == x) {\n                count++;\n       \
    \     }\n            int index = 0;\n            for (int i = count; i < nums.size();\
    \ i++) {\n                if (nums.get(i) > x) {\n                    break;\n\
    \                }\n                index = i;\n            }\n            ret.add(index,\
    \ x);\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb1mp5qvl.java:38)\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> numsWithDigits = new ArrayList<Long>();\n        // Copy\
    \ numbers to new array list\n        for (Long num : nums) {\n            numsWithDigits.add(num);\n\
    \        }\n        // Sort new array list\n        Collections.sort(numsWithDigits);\n\
    \        // Return original array list\n        return nums;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3oh0q3fq.java:30)\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     return nums.stream().sorted(Comparator.comparingLong(Long::sum).reversed())\n\
    \                .collect(Collectors.toCollection(ArrayList::new));\n    }\n \
    \   public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplydfvq4z.java:19: error: incompatible types: invalid method reference\n\
    \        return nums.stream().sorted(Comparator.comparingLong(Long::sum).reversed())\n\
    \                                                             ^\n    method sum\
    \ in class Long cannot be applied to given types\n      required: long,long\n\
    \      found:    T\n      reason: actual and formal argument lists differ in length\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>comparingLong(ToLongFunction<?\
    \ super T>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     Map<Long, Integer> map = new HashMap<Long, Integer>();\n        long largest\
    \ = Long.MIN_VALUE;\n        for(long num : nums) {\n            int index = map.get(num);\n\
    \            if(index != 0) {\n                map.put(num, index + 1);\n    \
    \        } else {\n                map.put(num, 1);\n                if(num >\
    \ largest) {\n                    largest = num;\n                }\n        \
    \    }\n        }\n        ArrayList<Long> res = new ArrayList<Long>();\n    \
    \    for(Map.Entry<Long, Integer> entry : map.entrySet()) {\n            if(entry.getValue()\
    \ > 1) {\n                res.add(entry.getKey());\n            }\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Integer.intValue()\" because the return value of \"java.util.Map.get(Object)\"\
    \ is null\n\tat Problem.orderByPoints(tmp_3puexbj.java:22)\n\tat Problem.main(tmp_3puexbj.java:41)\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // TODO: use Collections.sort to sort the list using the method below.\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4yq5yjb6.java:20: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     return nums.stream()\n            .sorted(Comparator.comparingLong(num ->\
    \ num.longValue()))\n            .collect(Collectors.toList());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk1nq2pav.java:21: error: incompatible types: inference variable\
    \ R has incompatible bounds\n            .collect(Collectors.toList());\n    \
    \                ^\n    equality constraints: List<T#2>\n    lower bounds: ArrayList<Long>,Object\n\
    \  where R,A,T#1,T#2 are type-variables:\n    R extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    A extends Object declared in method\
    \ <R,A>collect(Collector<? super T#1,A,R>)\n    T#1 extends Object declared in\
    \ interface Stream\n    T#2 extends Object declared in method <T#2>toList()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     return nums.stream()\n                .mapToLong(num -> num)\n         \
    \       .sorted((num1, num2) -> (num1.longValue() + num2.longValue()).toString().compareTo(num1.toString().concat(num2.toString())))\n\
    \                .collect(Collectors.toCollection(() -> new ArrayList<>()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpytdkxt70.java:21: error: method sorted in interface LongStream\
    \ cannot be applied to given types;\n                .sorted((num1, num2) -> (num1.longValue()\
    \ + num2.longValue()).toString().compareTo(num1.toString().concat(num2.toString())))\n\
    \                ^\n  required: no arguments\n  found:    (num1,num2[...]g()))\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> result = new ArrayList<>();\n        Map<Long, Integer>\
    \ sums = new HashMap<>();\n        // Find sum of each element and record in hash\n\
    \        for (Long n : nums) {\n            long s = n.longValue();\n        \
    \    Integer i = sums.get(s);\n            if (i == null)\n                sums.put(s,\
    \ 1);\n            else\n                sums.put(s, i + 1);\n        }\n    \
    \    // Sort by sum of digits in ascending order\n        Collections.sort(nums,\
    \ new Comparator<Long>() {\n            @Override\n            public int compare(Long\
    \ o1, Long o2) {\n                long s1 = o1.longValue();\n                long\
    \ s2 = o2.longValue();\n                return Integer.compare(sums.get(s1).compareTo(sums.get(s2)));\n\
    \            }\n        });\n        // Sort by original array list index\n  \
    \      Collections.sort(nums, new Comparator<Long>() {\n            @Override\n\
    \            public int compare(Long o1, Long o2) {\n                return nums.indexOf(o1)\
    \ - nums.indexOf(o2);\n            }\n        });\n        // Add sorted elements\
    \ to new array list\n        for (int i = 0; i < nums.size(); i++) {\n       \
    \     long n = nums.get(i);\n            result.add(n);\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnqdyner4.java:36: error: method compare in class Integer cannot\
    \ be applied to given types;\n                return Integer.compare(sums.get(s1).compareTo(sums.get(s2)));\n\
    \                              ^\n  required: int,int\n  found:    int\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     nums.sort((a, b) -> {\n            long first = a + b;\n            long\
    \ second = b + a;\n            if (first > second) {\n                return 1;\n\
    \            } else if (first < second) {\n                return -1;\n      \
    \      } else {\n                return 0;\n            }\n        });\n     \
    \   return nums;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf7ljg_tz.java:33)\n"
  stdout: ''
  timestamp: 1660011428
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     List<Long> newList = new ArrayList<>();\n\n        // use an iterator to\
    \ go through the list\n        // and calculate the sum of digits in the number\n\
    \        Iterator<Long> it = nums.iterator();\n        while(it.hasNext()) {\n\
    \            // get the current number from the iterator\n            Long curNum\
    \ = it.next();\n            // get the sum of digits and add it to our new list\n\
    \            long sumOfDigits = curNum.intValue();\n            newList.add(sumOfDigits);\n\
    \        }\n\n        // sort the new list based on the sum of the digits\n  \
    \      Collections.sort(newList, (o1, o2) -> o1 - o2);\n\n        // add the original\
    \ numbers back into the list\n        // with their original order\n        for(int\
    \ i = 0; i < nums.size(); i++) {\n            Long sumOfDigits = newList.get(i);\n\
    \            int index = newList.indexOf(sumOfDigits);\n            newList.set(index,\
    \ nums.get(i));\n        }\n\n        // return our sorted list\n        return\
    \ newList;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgb2ig0op.java:33: error: incompatible types: cannot infer type-variable(s)\
    \ T\n        Collections.sort(newList, (o1, o2) -> o1 - o2);\n               \
    \         ^\n    (argument mismatch; bad return type in lambda expression\n  \
    \    possible lossy conversion from long to int)\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>sort(List<T>,Comparator<? super T>)\n\
    /tmp/tmpgb2ig0op.java:44: error: incompatible types: List<Long> cannot be converted\
    \ to ArrayList<Long>\n        return newList;\n               ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> res = new ArrayList<>();\n\n        if (nums.isEmpty()){\n\
    \            return res;\n        }\n\n        Set<Long> sortedSet = new TreeSet<>(nums);\n\
    \n        Long firstValue = sortedSet.stream()\n                .map(v -> nums.get(nums.indexOf(v))).collect(Collectors.toList()).get(0)\n\
    \                .add(new TreeSet<Long>(nums));\n\n        long firstValue = firstValue.stream().reduce((a,b)\
    \ -> a + b);\n\n        sortedSet.remove(firstValue);\n        res.add(firstValue);\n\
    \n        long lastValue = sortedSet.stream()\n                .map(v -> nums.get(nums.indexOf(v))).collect(Collectors.toList()).get(0)\n\
    \                .add(new TreeSet<Long>(nums));\n\n        long lastValue = lastValue.stream().reduce((a,b)\
    \ -> a + b);\n\n        sortedSet.remove(lastValue);\n        res.add(lastValue);\n\
    \n        long lastValue2 = sortedSet.stream()\n                .map(v -> nums.get(nums.indexOf(v))).collect(Collectors.toList()).get(0)\n\
    \                .add(new TreeSet<Long>(nums));\n\n        long lastValue2 = lastValue2.stream().reduce((a,b)\
    \ -> a + b);\n\n        sortedSet.remove(lastValue2);\n        res.add(lastValue2);\n\
    \n        long lastValue3 = sortedSet.stream()\n                .map(v -> nums.get(nums.indexOf(v))).collect(Collectors.toList()).get(0)\n\
    \                .add(new TreeSet<Long>(nums));\n\n        long lastValue3 = lastValue3.stream().reduce((a,b)\
    \ -> a + b);\n\n        sortedSet.remove(lastValue3);\n        res.add(lastValue3);\n\
    \n        long lastValue4 = sortedSet.stream()\n                .map(v -> nums.get(nums.indexOf(v))).collect(Collectors.toList()).get(0)\n\
    \                .add(new TreeSet<Long>(nums));\n\n        long lastValue4 = lastValue4.stream().reduce((a,b)\
    \ -> a + b);\n\n        sortedSet.remove(lastValue4);\n        res.add(lastValue4);\n\
    \n        long lastValue5 = sortedSet.stream()\n                .map(v -> nums.get(nums.indexOf(v))).collect(Collectors.toList()).get(0)\n\
    \                .add(new TreeSet<Long>(nums));\n\n        long lastValue5 = lastValue5.stream().reduce((a,b)\
    \ -> a + b);\n\n        sortedSet.remove(lastValue5);\n        res.add(lastValue5);\n\
    \n        long lastValue6 = sortedSet.stream()\n                .map(v -> nums.get(nums.indexOf(v))).collect(Collectors.toList()).get(0)\n\
    \                .add(new \n    }\n    public static void main(String[] args)\
    \ {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l,\
    \ (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz7cmwta9.java:83: error: <identifier> expected\n              \
    \  .add(new \n                        ^\n/tmp/tmpz7cmwta9.java:84: error: '('\
    \ or '[' expected\n    }\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     nums.sort((o1, o2) -> {\n            long sum1 = o1.longValue();\n     \
    \       long sum2 = o2.longValue();\n            return (int) sum1.compareTo(sum2);\n\
    \        });\n\n        return nums;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz1uvdusf.java:22: error: long cannot be dereferenced\n        \
    \    return (int) sum1.compareTo(sum2);\n                             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     nums.sort(Comparator.comparingLong(num -> num.doubleValue()));\n       \
    \ return nums;\n    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ypuhpj5.java:19: error: incompatible types: cannot infer type-variable(s)\
    \ T\n        nums.sort(Comparator.comparingLong(num -> num.doubleValue()));\n\
    \                                          ^\n    (argument mismatch; bad return\
    \ type in lambda expression\n      possible lossy conversion from double to long)\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>comparingLong(ToLongFunction<?\
    \ super T>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011427
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     ArrayList<Long> numsWithPoints = nums.stream()\n            .map(Long::toString)\n\
    \            .map(s -> getSumOfDigits(s))\n            .distinct()\n         \
    \   .sorted()\n            .collect(Collectors.toList());\n        return numsWithPoints;\n\
    \    }\n    public static void main(String[] args) {\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-1l, (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1234l, (long)423l,\
    \ (long)463l, (long)145l, (long)2l, (long)423l, (long)423l, (long)53l, (long)6l,\
    \ (long)37l, (long)3457l, (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)2l, (long)3l, (long)6l, (long)53l,\
    \ (long)423l, (long)423l, (long)423l, (long)1234l, (long)145l, (long)37l, (long)46l,\
    \ (long)56l, (long)463l, (long)3457l)))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuif94i_u.java:20: error: incompatible types: cannot infer type-variable(s)\
    \ R\n            .map(Long::toString)\n                ^\n    (argument mismatch;\
    \ invalid method reference\n      reference to toString is ambiguous\n       \
    \ both method toString(long) in Long and method toString() in Long match)\n  where\
    \ R,T are type-variables:\n    R extends Object declared in method <R>map(Function<?\
    \ super T,? extends R>)\n    T extends Object declared in interface Stream\n1\
    \ error\n"
  stdout: ''
  timestamp: 1660011428
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Write a function which sorts the given array list of integers\n\
    \    // in ascending order according to the sum of their digits.\n    // Note:\
    \ if there are several items with similar sum of their digits,\n    // order them\
    \ based on their index in original array list.\n    // For example:\n    // >>>\
    \ orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l, (long)11l, (long)-1l,\
    \ (long)-11l, (long)-12l))))\n    // (new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))\n    // >>> orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList())))\n    // (new ArrayList<Long>(Arrays.asList()))\n\
    \    public static ArrayList<Long> orderByPoints(ArrayList<Long> nums) {\n   \
    \     // sort nums based on sum of digits ascending\n        ArrayList<Long> sortedNums\
    \ = nums.stream()\n            .sorted(Comparator.comparing(num -> num.intValue()))\n\
    \            .collect(Collectors.toCollection(ArrayList::new));\n\n        //\
    \ if sums match then sort nums based on index\n        if (sortedNums.stream().mapToLong(num\
    \ -> num.intValue()).distinct().count() == sortedNums.size()) {\n            sortedNums\
    \ = nums.stream()\n                .sorted(Comparator.comparing(num -> num.intValue()).reversed())\n\
    \                .collect(Collectors.toCollection(ArrayList::new));\n        }\n\
    \n        // return the new sorted array\n        return sortedNums;\n    }\n\
    \    public static void main(String[] args) {\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)11l, (long)-1l, (long)-11l, (long)-12l)))).equals((new ArrayList<Long>(Arrays.asList((long)-1l,\
    \ (long)-11l, (long)1l, (long)-12l, (long)11l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1234l, (long)423l, (long)463l, (long)145l,\
    \ (long)2l, (long)423l, (long)423l, (long)53l, (long)6l, (long)37l, (long)3457l,\
    \ (long)3l, (long)56l, (long)0l, (long)46l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
    \ (long)2l, (long)3l, (long)6l, (long)53l, (long)423l, (long)423l, (long)423l,\
    \ (long)1234l, (long)145l, (long)37l, (long)46l, (long)56l, (long)463l, (long)3457l)))));\n\
    \    assert(orderByPoints((new ArrayList<Long>(Arrays.asList()))).equals((new\
    \ ArrayList<Long>(Arrays.asList()))));\n    assert(orderByPoints((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)-11l, (long)-32l, (long)43l, (long)54l, (long)-98l, (long)2l, (long)-3l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)-3l, (long)-32l, (long)-98l, (long)-11l,\
    \ (long)1l, (long)2l, (long)43l, (long)54l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)6l, (long)7l, (long)8l, (long)9l, (long)10l, (long)11l)))).equals((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)10l, (long)2l, (long)11l, (long)3l,\
    \ (long)4l, (long)5l, (long)6l, (long)7l, (long)8l, (long)9l)))));\n    assert(orderByPoints((new\
    \ ArrayList<Long>(Arrays.asList((long)0l, (long)6l, (long)6l, (long)-76l, (long)-21l,\
    \ (long)23l, (long)4l)))).equals((new ArrayList<Long>(Arrays.asList((long)-76l,\
    \ (long)-21l, (long)0l, (long)4l, (long)23l, (long)6l, (long)6l)))));\n    }\n\
    \n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwe9jya76.java:27: error: cannot find symbol\n                .sorted(Comparator.comparing(num\
    \ -> num.intValue()).reversed())\n                                           \
    \            ^\n  symbol:   method intValue()\n  location: variable num of type\
    \ Object\n1 error\n"
  stdout: ''
  timestamp: 1660011428
