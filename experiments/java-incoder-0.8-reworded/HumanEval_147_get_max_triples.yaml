name: HumanEval_147_get_max_triples
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // You are given a positive integer n. You have to create an\
  \ integer array array list a of length n.\n    // For each i (1 \u2264 i \u2264\
  \ n), the value of a[i] = i * i - i + 1.\n    // Return the number of triples (a[i],\
  \ a[j], a[k]) of a where i < j < k, \n    // and a[i] + a[j] + a[k] is a multiple\
  \ of 3.\n    // Example :\n    // >>> getMaxTriples((5l))\n    // (1l)\n    // Explanation:\
  \ \n    // a = [1, 3, 7, 13, 21]\n    // The only valid triple is (1, 7, 13).\n\
  \    public static long getMaxTriples(long n) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(getMaxTriples((5l))\
  \ == (1l));\n    assert(getMaxTriples((6l)) == (4l));\n    assert(getMaxTriples((10l))\
  \ == (36l));\n    assert(getMaxTriples((100l)) == (53361l));\n    }\n\n}\n"
completions: ["        long a[] = new long[n];\n        Arrays.fill(a, 1);\n     \
    \   Arrays.sort(a);\n        long triples = 0;\n        long sum = 0;\n      \
    \  int j;\n        boolean check = false;\n        for(int i = 0; i < n; i++){\n\
    \            j=i;\n            while(j > 0 && a[j-1] != a[j] ){\n            \
    \    j--;\n            }\n            sum+=a[j];\n            check = false;\n\
    \            for(int k = i; k < j; k++){\n                if(sum == a[k]){\n \
    \                   check = true;\n                    break;\n              \
    \  }\n            }\n            if(check){\n                for (int k = i; k\
    \ < j; k++){\n                    for(int l = 0; l< a.length; l++){\n        \
    \                a[k] = a[k] + a[k];\n                        if(a[k] == 0)\n\
    \                            break;\n                    }\n                }\n\
    \                for(int k = 0; k < j; k++){\n                    if(a[k] == 0)\n\
    \                        break;\n                }\n                triples ++;\n\
    \            }\n        }\n        return triples;", "        List<Integer> a\
    \ = IntStream.range(2, n).boxed().collect(Collectors.toList());\n        long\
    \ max = 0;\n        for (Integer a1: a) {\n            for (Integer a2: a) {\n\
    \                for (Integer a3: a) {\n                    if (a1 + a2 + a3 ==\
    \ 2 * a1 + a2 + a3) {\n                        max++;\n                    }\n\
    \                }\n            }\n        }\n        return max;", "        List<Integer>\
    \ a = new ArrayList<>();\n        a.add(1);\n        a.add(3);\n        a.add(7);\n\
    \        a.add(13);\n        a.add(21);\n        if (n <= 0) return 0;\n     \
    \   int max = 0;\n        for (Integer i : a) {\n            for (Integer j :\
    \ a) {\n                for (Integer k : a) {\n                    if (i < j &&\
    \ j < k) {\n                        long sum = a[i] + a[j] + a[k];\n         \
    \               if (sum % 3 == 0) {\n                            if (max < sum)\
    \ max = sum;\n                        }\n                    }\n             \
    \   }\n            }\n        }\n        return max;", "        if (n < 1l)\n\
    \            return 0l;\n        ArrayList<Integer> a = new ArrayList<>();\n \
    \       for(long i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n  \
    \      }\n        return Arrays.stream(a.subList(0, Math.min(3, a.size()))).filter(i\
    \ -> i % 3 == 0).count();", "        List<Long> arr = new ArrayList<>();\n   \
    \     for (int i = 1; i <= n; i++) {\n            long val = i * i - i + 1;\n\
    \            arr.add(val);\n        }\n        long maxTriples = 0;\n        for\
    \ (long ele : arr) {\n            for (int i = 0; i < arr.size(); i++) {\n   \
    \             for (int j = 0; j < arr.size(); j++) {\n                    if (i\
    \ < j) {\n                        long thirdVal = ele;\n                     \
    \   if (thirdVal % 3 != 0) {\n                            break;\n           \
    \             }\n                        thirdVal /= 3;\n                    \
    \    if (thirdVal * thirdVal + ele * ele + arr.get(i) * arr.get(j) == 0) {\n \
    \                           maxTriples += 1;\n                        }\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ maxTriples;", "        List<Integer> arrayList = new ArrayList<>(n);\n     \
    \   Arrays.stream(arrayList).forEach((a) -> {\n            a = (long) (a * a -\
    \ a + 1);\n        });\n        int triples = 0;\n        for (int i = 0; i <\
    \ arrayList.size(); i++) {\n            for (int j = i + 1; j < arrayList.size();\
    \ j++) {\n                for (int k = j + 1; k < arrayList.size(); k++) {\n \
    \                   if (arrayList.get(i) * arrayList.get(j) * arrayList.get(k)\
    \ % 3 == 0) {\n                        triples += 1;\n                    }\n\
    \                }\n            }\n        }\n        return triples;", "    \
    \    ArrayList <Integer> a = new ArrayList <Integer> (n);\n        for (int i\
    \ = 0 ; i < n ; i++) {\n            a.add (i * i - i + 1);\n        }\n      \
    \  int num = 0;\n        long max = 0;\n        for (int i = 0 ; i < n ; i++)\
    \ {\n            for (int j = 0 ; j < n ; j++) {\n                for (int k =\
    \ 0 ; k < n ; k++) {\n                    if (a.get(i) + a.get(j) + a.get(k) ==\
    \ 2 * 3) {\n                        num = num + 1;\n                        if\
    \ (a.get(i) < max) {\n                            max = a.get(i);\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n        return num;", "        long[] a = new long[n];\n        Arrays.setAll(a,\
    \ n -> n*(n+1)*(n+1)/6);\n        Arrays.sort(a);\n        long triples = 0;\n\
    \        for (int i = 0; i < a.length; i++) {\n            for (int j = i; j <\
    \ a.length; j++) {\n                for (int k = j; k < a.length; k++) {\n   \
    \                 if (a[i] + a[j] + a[k] == 3*3*3) {\n                       \
    \ System.out.println(a[i] + \" \" + a[j] + \" \" + a[k]);\n                  \
    \      triples++;\n                    }\n                }\n            }\n \
    \       }\n        System.out.println(triples);\n        return triples;", " \
    \       ArrayList<Integer> a = new ArrayList<Integer>();\n        for (int i =\
    \ 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        long\
    \ count = 0;\n        int j = 0;\n        long maxValue = a.get(0); // the first\
    \ element in the array is always positive\n        while (j < a.size() - 1) {\n\
    \            int k = j + 1;\n            while (k < a.size() && maxValue + a.get(k)\
    \ - a.get(j) > 0) {\n                k = k + 1;\n            }\n            if\
    \ (maxValue + a.get(k) - a.get(j) < 0) {\n                count++;\n         \
    \   } else {\n                j = k + 1;\n            }\n            maxValue\
    \ = a.get(j);\n        }\n        return count;", "        ArrayList a = Array.newInstance(Long.TYPE,\
    \ n);\n        long aMax = -1;\n        long sum = 0;\n        for (int i = 0;\
    \ i < a.size(); i++) {\n            aMax = Math.max(aMax, a.get(i));\n       \
    \     sum += a.get(i);\n        }\n        if (sum % 3 != 0)\n            return\
    \ sum % 3;\n        long cnt = 0;\n        for (int i = 0; i < a.size(); i++)\
    \ {\n            for (int j = i + 1; j < a.size(); j++) {\n                for\
    \ (int k = j + 1; k < a.size(); k++) {\n                    if (a.get(i) + a.get(j)\
    \ + a.get(k) == aMax) {\n                        cnt++;\n                    }\n\
    \                }\n            }\n        }\n        return cnt;", "        List<Long>\
    \ a = new ArrayList<>(n);\n        for(long i = 1; i <= n; i++) {\n          \
    \  for(long j = i+1; j<=n; j++) {\n                for(long k=j+1; k<=n; k++)\
    \ {\n                    if(((i+j+k)*(i+j+k)) == i) {\n                      \
    \  a.add(i);\n                        a.add(j);\n                        a.add(k);\n\
    \                    }\n                }\n            }\n        }\n        long\
    \ count = 1;\n        for(long i : a)\n            count = (count * 3) +  i;\n\
    \        return count;", "        ArrayList<Long> a = new ArrayList<Long>();\n\
    \        Arrays.stream(new long[]{1, 1, n}).forEach(v -> a.add(v));\n        int\
    \ count = 0;\n        for(int i = 1; i<a.size()-1; i++) {\n            for(int\
    \ j=i+1; j<a.size(); j++) {\n                for(int k=j+1; k<a.size(); k++) {\n\
    \                    if((i+j+k) == 3) {\n                        count++;\n  \
    \                      a.set(i, a.get(i));\n                        a.set(j, a.get(j));\n\
    \                        a.set(k, a.get(k));\n                    }\n        \
    \        }\n            }\n        }\n        return count;", "        long a[]\
    \ = new long[n];\n        int count = 0;\n        for (long i = 1; i <= n; i++)\
    \ {\n            a[(int) i] = i * i - i + 1;\n        }\n        long res = 0;\n\
    \        for (int i = 1; i < n; i++) {\n            for (int j = i; j < n; j++)\
    \ {\n                for (int k = j; k < n; k++) {\n                    long sum\
    \ = a[i] + a[j] + a[k];\n                    if (sum % 3 == 0) {\n           \
    \             count++;\n                        if (sum > res && sum >= i) {\n\
    \                            res = sum;\n                        }\n         \
    \           }\n                }\n            }\n        }\n        return count;",
  "        int[] arr = new int[n];\n        for (int i = 0; i < n; i++) {\n      \
    \      arr[i] = i * i - i + 1;\n        }\n        Arrays.sort(arr);\n       \
    \ long sum = 0;\n        for (int i = 0; i < n - 1; i++) {\n            for (int\
    \ j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n\
    \                    sum += arr[i] + arr[j] + arr[k];\n                }\n   \
    \         }\n        }\n        return sum % 3 == 0 ? sum : 0;", "        ArrayList<Long>\
    \ a = new ArrayList<Long>();\n        for (int i = 1; i <= n; i++) {\n       \
    \     a.add(new Long(i * i - i + 1));\n        }\n        Arrays.sort(a);\n  \
    \      long result = 0;\n        for (Long i : a) {\n            for (Long j :\
    \ a) {\n                for (Long k : a) {\n                    Long value = i.longValue()\
    \ + j.longValue() + k.longValue();\n                    if (value % 3 == 0) {\n\
    \                        result++;\n                    }\n                }\n\
    \            }\n        }\n        return result;", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1);\n        return Arrays.stream(a).reduce((acc, v) ->\
    \ (v + v) + v).toLong();", "        ArrayList<Long> a = new ArrayList<>();\n \
    \       a.add(1);\n        long sum = 0;\n        for(long i = 1 ; i <= n; i++){\n\
    \            a.add(3 * i);\n            sum += i;\n        }\n        long ans\
    \ = sum % 3;\n        if(ans == 0){\n            long t = a.get(0);\n        \
    \    for(long i : a.subList(1, a.size())){\n                t = Math.max(t, i);\n\
    \            }\n            return t;\n        }\n        return -1;", "     \
    \   List<Long> a = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n\
    \            a.add(i * i - i + 1);\n        }\n        Arrays.sort(a);\n     \
    \   List<Long> list = new ArrayList<>();\n        long triples = 0;\n        long\
    \ sum = 0;\n        for (int i = 0; i < a.size(); i++) {\n            long j =\
    \ i + 1;\n            while (j < a.size()) {\n                if (a[i] + a[j]\
    \ + a[j] == 3) {\n                    list.add(new IntPair(i, j));\n         \
    \           sum += a[i] + a[j] + a[j];\n                    j++;\n           \
    \     } else {\n                    break;\n                }\n            }\n\
    \        }\n        if (list.size() >= 3) {\n            for (int i = 0; i < list.size();\
    \ i++) {\n                long a = list.get(i).a;\n                long b = list.get(i).b;\n\
    \                if (sum == a) {\n                    triples++;\n           \
    \         sum -= b;\n                } else {\n                    break;\n  \
    \              }\n            }\n        }\n        return triples;", "      \
    \  ArrayList< Integer > a = new ArrayList<>();\n        a.add( 1 );\n        for\
    \ ( int i = 2; i <= n; i++ ) {\n            a.add( i * i - i + 1 );\n        }\n\
    \        return LongStream.range( 0, a.size() - 1 )\n            .mapToLong( i\
    \ -> new AbstractMap.SimpleEntry<>( a.get( i ), a.get( i + 1 ), a.get( i + 2 )\
    \ ) )\n            .filter( x -> x.second % 3 == 0 )\n            .count();",
  "        ArrayList<Integer> list = new ArrayList<>();\n        for (int i = 1; i\
    \ <= n; i++){\n            list.add(i);\n            list.add(i * i - i + 1);\n\
    \        }\n        long max = 0;\n        int sum = 0;\n        for (Integer\
    \ i : list){\n            for (Integer j : list){\n                for (Integer\
    \ k : list){\n                    if((i == j) && (j == k)){\n                \
    \        list.add(i, j, k);\n                    }\n                }\n      \
    \      }\n        }\n        for (Integer i : list){\n            sum += i;\n\
    \            if (sum == 3) {\n                max = Math.max(max, i);\n      \
    \      }\n        }\n        return max;", "        long a[] = new long[n];\n\
    \        for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n  \
    \      }\n        return Arrays.stream(a).filter(x -> x <= 3 * 3).count();", " \
    \       if (n == 0)\n            return 0;\n        ArrayList<Long> arr = new\
    \ ArrayList<Long>();\n        arr.add(0l);\n        for (int i = 1; i <= n; i++)\
    \ {\n            Long cur = i * i - i + 1;\n            arr.add(cur);\n      \
    \      Long next = (i + 1) * i - i + 1;\n            Long next2 = (i - 1) * i\
    \ + 1;\n            if (cur + next + next2 > 3 * 3)\n                arr.remove(i);\n\
    \        }\n        return arr.size();", "        long a[] = new long[n];\n  \
    \      int i = 0;\n        long aSum = 0;\n        for (i = 1; i <= n; i++) {\n\
    \            a[i] = i * i - i + 1;\n            aSum += a[i];\n        }\n\n \
    \       long b[] = new long[n];\n        int j = 0;\n        long bSum = 0;\n\
    \        for (j = 1; j <= n; j++) {\n            b[j] = a[j] * a[j] * a[j];\n\
    \            bSum += b[j];\n        }\n\n        long c[] = new long[n];\n   \
    \     int k = 0;\n        long cSum = 0;\n        for (k = n; k >= 0; k--) {\n\
    \            c[k] = a[k] * a[k] * a[k];\n            cSum += c[k];\n        }\n\
    \n        Arrays.sort(a);\n        Arrays.sort(b);\n        Arrays.sort(c);\n\n\
    \        ArrayList ans = new ArrayList();\n        long curSum = 0;\n        for\
    \ (i = 1; i <= n; i++) {\n            long maxSum = aSum + bSum + cSum;\n    \
    \        if (maxSum % 3 == 0) {\n                curSum = a[i] * b[i] * c[i];\n\
    \                if (curSum % 3 == 0) {\n                    ans.add(new LongArray((a[i],\
    \ b[i], c[i])));\n                }\n            }\n        }\n\n        long\
    \ an = Long.MIN_VALUE;\n        for (LongArray l: ans) {\n            long sum\
    \ = l[0] + l[1] + l[2];\n            if (sum % 3 == 0) {\n                an =\
    \ sum;\n                break;\n            }\n        }\n        return an;",
  "        List<Long> a = new ArrayList<>(n);\n        for (int i = 1; i <= n; i++)\
    \ {\n            a.add(new Long(i, i * i - i + 1));\n        }\n        \n   \
    \     a.sort((Long o1, Long o2) -> o1.longValue() - o2.longValue());\n\n     \
    \   long result = 1l;\n        for (long i = 0; i < a.size(); i++) {\n       \
    \     long j = a.get(i);\n            if (i != j) {\n                for (long\
    \ k = a.get(j); k < j; k++) {\n                    long sum = a.get(i) + a.get(j)\
    \ + a.get(k);\n                    if (sum % 3 == 0) {\n                     \
    \   result++;\n                    }\n                }\n            }\n     \
    \   }\n\n        return result;", "        long res = 0;\n        List<Long> a\
    \ = new ArrayList<>();\n        for(int i=1; i<=n; i++) {\n            a.add(i*i-i+1);\n\
    \        }\n        for( Long val: a) {\n            if( val%3 != 0) {\n     \
    \           continue;\n            }\n            for( Long i : a) {\n       \
    \         for( Long j : a) {\n                    if( i != j && j!=val ) {\n \
    \                       if( i*i+j*j == val) {\n                            res++;\n\
    \                            break;\n                        }\n             \
    \       }\n                }\n            }\n        }\n        return res;",
  "        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n        \
    \    a[i] = i * i - i + 1;\n        }\n        int res = 0;\n        for (int\
    \ i = 0; i < a.length; i++) {\n            for (int j = i + 1; j < a.length; j++)\
    \ {\n                if (a[i] + a[j] == 0)\n                    continue;\n  \
    \              for (int k = i + 1; k < a.length; k++) {\n                    if\
    \ (a[i] + a[j] + a[k] == 0) {\n                        continue;\n           \
    \         }\n                    if (a[i] + a[j] + a[k] % 3 == 0) {\n        \
    \                res++;\n                    }\n                }\n          \
    \  }\n        }\n        return res;", "        long result = 0;\n        long\
    \ sum = 0;\n        for (int i = 1; i <= n; ++i) {\n            sum += i;\n  \
    \          result += sum;\n        }\n        long limit = result % 3;\n     \
    \   ArrayList < Long > a = new ArrayList < > (n);\n        for (int i = 1; i <=\
    \ n; ++i) {\n            a.add(i * i - i + 1);\n        }\n        for (Long l\
    \ : a) {\n            if (l % 3 != 0) {\n                a.remove(l);\n      \
    \      }\n        }\n        long sum2 = 0;\n        for (Long l : a) {\n    \
    \        sum2 += l;\n        }\n        if (sum == sum2) {\n            return\
    \ 1;\n        } else {\n            return 0;\n        }", "        \n       \
    \ List<Integer> array = new ArrayList<Integer>(n);\n        long result = 0;\n\
    \        for (int i = 0; i < n; i++) {\n            array.add(i * i - i + 1);\n\
    \        }\n        for (Integer x : array) {\n            for (Integer y : array)\
    \ {\n                for (Integer z : array) {\n                    if (x + y\
    \ + z == (x | y | z)) {\n                        result = Math.max(result, x +\
    \ y + z);\n                    }\n                }\n            }\n        }\n\
    \        return result;", "        long a[] = new long[n];\n        for(int i\
    \ = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n        int\
    \ max = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = i +\
    \ 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n       \
    \             if((a[i] % 3) == (a[j] % 3) == (a[k] % 3) == 0) {\n            \
    \            if(a[i] > a[j]) {\n                            if(a[j] > a[k]) {\n\
    \                                max = Math.max(max, (a[i] + a[j] + a[k]) % 3);\n\
    \                            }\n                            else {\n         \
    \                       max = Math.max(max, (a[j] + a[k]) % 3);\n            \
    \                }\n                        }\n                        else {\n\
    \                            max = Math.max(max, (a[i] + a[k]) % 3);\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n        return max;", "        List<Integer> a = new ArrayList<>();\n\
    \        long ans = 0;\n        for(int i = 1; i < n; i++){\n            a.add(i);\n\
    \        }\n        for(int i = 1; i < n; i++){\n            for(int j = i+1;\
    \ j < n; j++){\n                for(int k = j+1; k < n; k++){\n              \
    \      if(Math.pow(a[i], 3)+Math.pow(a[j], 3)+Math.pow(a[k], 3)==0){\n       \
    \                 ans += 1;\n                    }\n                }\n      \
    \      }\n        }\n        return ans;", "        ArrayList<Long> a = new ArrayList<>(n);\n\
    \        for (long i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n\
    \        }\n        long res = 0;\n        Arrays.stream(a).parallel().forEach(i\
    \ -> {\n            long j = i + 1;\n            long k = j + 1;\n           \
    \ long sum = 0;\n            while (j < k) {\n                sum += a[j] + a[k];\n\
    \                j++;\n                k++;\n            }\n            if (sum\
    \ % 3 == 0) {\n                res = Math.max(res, i - j - k);\n            }\n\
    \        });\n        return res;", "        long result = 0;\n        long[]\
    \ arr = new long[n];\n        Arrays.fill(arr, (long) 1);\n        Arrays.sort(arr);\n\
    \        \n        long n = arr[0];\n        for(long i = 1; i < n; i++) {\n \
    \           long j = (i + 1l) / 3;\n            for(long k = i; k <= j; k++) {\n\
    \                if(arr[k] % 3 == 0 && i + arr[k] + 1 + arr[j] == n) result++;\n\
    \            }\n        }\n        return result;", "        long a[] = new long[n];\n\
    \        Arrays.fill(a, 1, n, n);\n        int count = 0;\n        for (long i\
    \ = n - 1; i >= 0; i--) {\n            for (long j = i + 1; j >= 0; j--) {\n \
    \               for (long k = j + 1; k >= 0; k--) {\n                    long\
    \ sum = a[i] + a[j] + a[k];\n                    if (sum % 3 == 0) {\n       \
    \                 count++;\n                    }\n                }\n       \
    \     }\n        }\n        return count;", "        long[] arr = new long[n];\n\
    \        Arrays.fill(arr, 0);\n        Arrays.sort(arr);\n        Arrays.sort(arr);\n\
    \        return arr[n-1];", "        long a[] = new long[n];\n        long max\
    \ = Integer.MIN_VALUE;\n        for(int i=0;i<n;i++){\n            max = Math.max(max,\
    \ a[i]+a[j]+a[k]);\n        }\n        long res = (1l << 63) + max - 1;\n    \
    \    return res;", "        ArrayList<Integer> a = new ArrayList<>(n);\n     \
    \   for(int i = 0; i <= n; i++){\n            a.add(new Integer(i*i - i+1));\n\
    \        }\n        \n        Arrays.sort(a);\n        int triples = 0;\n    \
    \    for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n  \
    \              for(int k = 0; k < n; k++){\n                    if(a.get(i) <\
    \ a.get(j) && a.get(j) < a.get(k)){\n                        if(a.get(i) + a.get(j)\
    \ + a.get(k) % 3 == 0){\n                            triples++;\n            \
    \            }\n                    }\n                }\n            }\n    \
    \    }\n        \n        System.out.println(triples);\n        return triples;",
  "        final int[] array = new int[n];\n        for (int i = 0; i < n; i++) {\n\
    \            array[i] = i * i - i + 1;\n        }\n        Arrays.sort(array);\n\
    \        int sum = 0;\n        boolean isMultipleOfThree = false;\n        for\
    \ (int i = 0; i < n - 1; i++) {\n            int currentSum = 0;\n           \
    \ int currentSumOfFirstElement = array[i];\n            int currentSumOfSecondElement\
    \ = array[i + 1];\n            int currentSumOfThirdElement = array[i + 2];\n\
    \            isMultipleOfThree = (currentSumOfFirstElement * currentSumOfSecondElement)\
    \ * currentSumOfThirdElement % 3 != 0;\n            if (currentSumOfFirstElement\
    \ + currentSumOfSecondElement + currentSumOfThirdElement == 3 * currentSumOfFirstElement)\
    \ {\n                if (isMultipleOfThree) {\n                    sum = sum +\
    \ 1;\n                }\n            }\n        }\n        return sum;", "   \
    \     ArrayList<Integer> a = new ArrayList<Integer>();\n        for(int i = 1;\
    \ i <= n; i++) {\n            if((i % 3) != 0) \n                a.add(i);\n \
    \       }\n        for(int i = 1; i <= n; i++) {\n            for(int j = 1; j\
    \ <= n; j++) {\n                for(int k = 1; k <= n; k++) {\n              \
    \      if(((i % 3) == 0) & ((j % 3) == 0) & ((k % 3) == 0)) {\n              \
    \          if(((i + (j * k)) == ((i + j) + (k + i))) \n                      \
    \      a.add(i);\n                    }\n                }\n            }\n  \
    \      }\n        return a.size();", "        // write your code in Java 7 or\
    \ later\n        return getMaxTriples(Arrays.asList(n));", "        List<Integer>\
    \ result = new ArrayList<>();\n        int[] arr = new int[n];\n        Arrays.fill(arr,\
    \ 1);\n        Collections.reverse(arr);\n        long ans = 0;\n        for (int\
    \ i = arr.length-1; i>= 0; i--) {\n            if (i%2 == 0) {\n             \
    \   for (int j = arr.length-1; j>= 0; j--) {\n                    if (j%2 == 0)\
    \ {\n                        for (int k = arr.length-1; k>= 0; k--) {\n      \
    \                      if (k%2 == 0) {\n                                long triple\
    \ = arr[i]*arr[i]*arr[i]+arr[j]*arr[j]*arr[j]+arr[k]*arr[k]*arr[k];\n        \
    \                        ans = Math.max(triple, ans);\n                      \
    \      }\n                        }\n                    }\n                }\n\
    \            }\n        }\n        return ans;", "        ArrayList<Long> a =\
    \ new ArrayList<Long>();\n        a.add(1l);\n        a.add(3l);\n        a.add(7l);\n\
    \        a.add(13l);\n        a.add(21l);\n        long t = 0;\n        for (long\
    \ i = 0 ; i < n ; ++i) {\n            long temp = 0l;\n            for(int j =\
    \ 0 ; j < n ; ++j) {\n                long temp2 = 0;\n                for(int\
    \ k = 0 ; k < n ; ++k) {\n                    temp2 = temp2 + a.get(k) * a.get(k)\
    \ * a.get(k);\n                }\n                if(temp2 % 3 == 0) {\n     \
    \               temp += temp2;\n                }\n            }\n           \
    \ t = Math.max(t,temp);\n        }\n        return t;", "        ArrayList<Long>\
    \ a = new ArrayList<>(n);\n        a.add(1);\n        a.add(3);\n        a.add(7);\n\
    \        a.add(13);\n        a.add(21);\n        int cnt = 0;\n        boolean\
    \ check = false;\n        for(int i = 1; i<a.size(); i++) {\n            for(int\
    \ j=i+1; j<a.size(); j++) {\n                for(int k=j+1; k<a.size(); k++) {\n\
    \                    long sum = a.get(i) + a.get(j) + a.get(k);\n            \
    \        long mod = sum%3;\n                    if(mod > 0) {\n              \
    \          if(i<j && j<k) {\n                            cnt++;\n            \
    \            }\n                    }\n                }\n            }\n    \
    \    }\n        return cnt;", "        int[] arr = new int[n];\n        Arrays.fill(arr,\
    \ 1);\n        List<Integer> lst = new ArrayList<Integer>();\n        long ans\
    \ = 0, max = 0;\n        for (int i = 0; i < arr.length; i++)\n            if\
    \ (arr[i] == 1) lst.add(i);\n        for (int i = 0; i < lst.size(); i++) {\n\
    \            int first = lst.get(i);\n            for (int j = i + 1; j < lst.size();\
    \ j++) {\n                int second = lst.get(j);\n                for (int k\
    \ = j + 1; k < lst.size(); k++) {\n                    int third = lst.get(k);\n\
    \                    ans = (arr[i] * arr[first] * arr[second] * arr[third]) +\
    \ ans;\n                    max = (arr[i] * arr[first] * arr[second] * arr[third])\
    \ + max;\n                }\n            }\n        }\n        return max;", " \
    \       List<Long> arr = new ArrayList<>(n);\n        Arrays.stream(arr).forEach((x)\
    \ -> {\n            long sum = 0;\n            for (long i = x - 1; i > 0; i--)\
    \ {\n                long k = i * i - i + 1;\n                if (k >= 3) {\n\
    \                    sum = sum + k;\n                    break;\n            \
    \    }\n            }\n            arr.add((long) sum);\n        });\n       \
    \ return Math.max(arr.stream().filter(a -> a % 3 == 0).mapToLong(a -> a).sum(),\
    \ n);", "        ArrayList al = new ArrayList();\n        ArrayList al2 = new\
    \ ArrayList();\n        al.add((long) 3);\n        al2.add((long) 1);\n      \
    \  for(int i=1; i<=n; i++) {\n            al.add((long) (3 * i));\n          \
    \  al2.add((long) i);\n        }\n        ArrayList al3 = new ArrayList();\n \
    \       long max = 0;\n        for(int i=al.size()-1; i>=0; i--) {\n         \
    \   for(int j=al2.size()-1; j>=0; j--) {\n                for(int k=al3.size()-1;\
    \ k>=0; k--) {\n                    if((al.get (i) > (al.get (j)) && al.get (i)\
    \ > (al.get (k)) && al2.get (j) > (al2.get (k))) && al3.get (k) > (al3.get (k)))\
    \ { max = Math.max(max, al.get (i) + al2.get (j) + al3.get (k));}\n          \
    \      }\n            }\n        }\n        System.out.println(max);\n       \
    \ return max;", "        long triples = 0;\n        List<Integer> a = new ArrayList<>();\n\
    \n        for (int i = 1; i <n; i++) {\n            if (i == 1 || i==n) continue;\n\
    \            for (int j = 1; j < i; j++) {\n                if (j == 1 || j==i)\
    \ continue;\n                for (int k = i+1; k < j; k++) {\n               \
    \     if (k == i || k==j) continue;\n                    if (a.contains(i+j+k))\
    \ {\n                        continue;\n                    }\n              \
    \      int n = i + j + k;\n                    if (n % 3 == 0) {\n           \
    \             a.add(i);\n                        a.add(j);\n                 \
    \       a.add(k);\n                        triples++;\n                      \
    \  break;\n                    }\n                }\n            }\n        }\n\
    \        return triples;", "        long result = 0;\n        List<Long> a = new\
    \ ArrayList<>();\n        for (int i = 1; i < n; i++) {\n            a.add(i);\n\
    \        }\n        Collections.sort(a);\n        for (Long i : a) {\n       \
    \     for (Long j : a) {\n                for (Long k : a) {\n               \
    \     if (i < j < k) {\n                        result += (i * i * i) + (j * j\
    \ * j) + (k * k * k);\n                        break;\n                    }\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long max = 0;\n        ArrayList a = new ArrayList();\n        for (int i\
    \ = 1; i < n; i++) {\n            a.add(i * i - i + 1);\n        }\n        long\
    \ sum = 0;\n        long sum1 = 0;\n        for (int i = 0; i < n; i++) {\n  \
    \          for (int j = 0; j < n; j++) {\n                for (int k = 0; k <\
    \ n; k++) {\n                    long k = i * i * i + j * j + k * k;\n       \
    \             if (k % 3 == 0) {\n                        sum++;\n            \
    \        }\n                    sum += k;\n                }\n            }\n\
    \        }\n        long sum = sum * sum;\n        if (sum > max) {\n        \
    \    max = sum;\n        }\n        return max;", "        ArrayList < Long >\
    \ a = new ArrayList < Long > ();\n        for (int i = 1; i <= n; i++) {\n   \
    \         a.add(i * i - i + 1);\n        }\n        int res = 0, i = 0, j = 0,\
    \ k = 0;\n        while (i < a.size()) {\n            j = i;\n            while\
    \ (j < a.size()) {\n                k = j;\n                while (k < a.size())\
    \ {\n                    int sum = 0;\n                    for (int k = 0; k <\
    \ a.size(); k++) {\n                        sum += a.get(k);\n               \
    \     }\n                    if (sum % 3 == 0) {\n                        res++;\n\
    \                    }\n                    k++;\n                }\n        \
    \        j++;\n            }\n            i++;\n        }\n        System.out.println(res);\n\
    \        return res;", "        // Write your code here\n        int []a = new\
    \ int[n];\n        for(int i=0;i<n;i++){\n            a[i]=i*i-1;\n        }\n\
    \        ArrayList<Integer> list=new ArrayList<>();\n        for(int i=0;i<n;i++){\n\
    \            list.add(a[i]);\n        }\n        for(int i=0;i<n-1;i++){\n   \
    \         for(int j=i+1;j<n;j++){\n                for(int k=j+1;k<n;k++){\n \
    \                   if((list.get(i)+list.get(j)+list.get(k))%3==0){\n        \
    \                System.out.println((list.get(i)+\"+\"+list.get(j)+\"+\"+list.get(k));\n\
    \                        int x=list.get(i)+list.get(j);\n                    \
    \    int y=list.get(k)+list.get(j);\n                        if(x<y){\n      \
    \                      x=list.get(i)+list.get(k);\n                          \
    \  y=list.get(j)+list.get(k);\n                        }\n                   \
    \     list.remove(x);\n                        list.remove(y);\n             \
    \           list.remove(x+y);\n                    }\n                }\n    \
    \        }\n        }\n        return list.size();", "        List<Integer> a\
    \ = new ArrayList<Integer>();\n        for(int i = 1; i <= n; i++){\n        \
    \    a.add(i * i - i + 1);\n        }\n        long triplesSum = 0;\n        for(int\
    \ i = 1; i <= n; i++){\n            for(int j = 1; j <= n; j++){\n           \
    \     for(int k = 1; k <= n; k++){\n                    if(i + j + k == 0){\n\
    \                        continue;\n                    }\n                  \
    \  if(i > j && i > k){\n                        if(a.get(i) * a.get(j) * a.get(k)\
    \ % 3 == 0){\n                            triplesSum++;\n                    \
    \        break;\n                        }\n                    }\n          \
    \          if(i < j && i < k){\n                        if(a.get(i) * a.get(j)\
    \ * a.get(k) % 3 == 0){\n                            triplesSum++;\n         \
    \                   break;\n                        }\n                    }\n\
    \                }\n            }\n        }\n        return triplesSum;", " \
    \       ArrayList<Long> arr = new ArrayList<>();\n        long a = 1;\n      \
    \  for (int i = 1 ; i <= n ; i++) {\n            arr.add(a);\n            a =\
    \ a * i - i + 1;\n        }\n        long max = 0;\n        for (long i : arr)\
    \ {\n            for (long j : arr) {\n                for (long k : arr) {\n\
    \                    long sum = i + j + k;\n                    if (sum <= 2 *\
    \ max && sum % 3 == 0) {\n                        max++;\n                   \
    \ }\n                }\n            }\n        }\n        return max;", "    \
    \    ArrayList<Long> arr = new ArrayList<>(n);\n        for (long i = 0; i < n;\
    \ ++i) {\n            arr.add(i * i - i + 1);\n        }\n        Arrays.sort(arr);\n\
    \        int count = 0;\n        int i = 0, j = 0, k = 0;\n        while (i <\
    \ arr.size() && j < arr.size() && k < 3) {\n            long sum = arr.get(i)\
    \ + arr.get(j) + arr.get(k);\n            if (sum % 3 == 0) {\n              \
    \  ++count;\n            }\n            ++i;\n            ++j;\n            ++k;\n\
    \        }\n        return count;", "        if (n == 0) return 0;\n        ArrayList<Long>\
    \ arr = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        for (int i = 1; i <= n; i++) {\n            arr.add(i * i - i + 1);\n\
    \        }\n        for (int i = 0; i <= arr.size() - 1; i++) {\n            for\
    \ (int j = 0; j <= arr.size() - 1; j++) {\n                for (int k = 0; k <=\
    \ arr.size() - 1; k++) {\n                    if (i != j && i != k && j != k)\
    \ {\n                        temp.add(arr.get(i) + arr.get(j) + arr.get(k));\n\
    \                    }\n                }\n            }\n        }\n        temp.removeAll(arr);\n\
    \        return temp.size();", "        \n        ArrayList a = new ArrayList(n);\n\
    \        \n        long k = 0;\n        \n        for (int i = 1; i < n; i++)\
    \ {\n            \n            a.add(i);\n            \n            for (int j\
    \ = i + 1; j < n; j++) {\n                \n                a.add(j);\n      \
    \          \n                for (int k = j + 1; k < n; k++) {\n             \
    \       \n                    a.add(k);\n                    \n              \
    \      if (a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                      \
    \  \n                        k = k + 1;\n                    }\n             \
    \   }\n            }\n        }\n        \n        return k;", "        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        long sum = 0;\n        int i = 0;\n        while\
    \ (i<n) {\n            a.add(i*i-1);\n            a.add(i*i+1);\n            i++;\n\
    \        }\n        int j = 0;\n        while (j<a.size()) {\n            int\
    \ k = j+1;\n            while (k<a.size() && sum != 0) {\n                sum\
    \ = sum + a.get(j) + a.get(k);\n                k++;\n            }\n        \
    \    j++;\n        }\n        return sum;", "        ArrayList<Integer> a = new\
    \ ArrayList<>();\n        for (long i = 1; i <= n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        return a\n            .stream()\n        \
    \    .filter(e -> e % 3 == 0)\n            .count();", "        List<Integer>\
    \ a = new ArrayList<>(n);\n        for(long i = 1;i<n;i++) {\n            for(int\
    \ j = i-1; j>=0; j--) {\n                for(int k = i+1<n && k<n; k++) {\n  \
    \                  if (i*j+i*k+i*j+k*k == (i*i)+(i*j)+k*k) return 1;\n       \
    \         }\n            }\n            a.add(i);\n        }\n        return 0;",
  "        List<Integer> a = new ArrayList<Integer>(n);\n        for (int i = 0; i\
    \ < n; i++) {\n            a.add(3 * i);\n        }\n        long sum = 0;\n \
    \       for (int i = 0; i < a.size() - 1; i++) {\n            for (int j = i +\
    \ 1; j < a.size(); j++) {\n                for (int k = j + 1; k < a.size(); k++)\
    \ {\n                    if (a.get(i) + a.get(j) + a.get(k) == 3) {\n        \
    \                sum += 1;\n                    }\n                }\n       \
    \     }\n        }\n        return sum;", "        long a[] = new long[n];\n \
    \       for (int i = 0; i < n; i++) a[i] = 3*(i*i) - i + 1;\n        int ans =\
    \ 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j\
    \ < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n           \
    \         long m = a[i];\n                    long n1 = a[j];\n              \
    \      long n2 = a[k];\n                    if (m < n1 && m < n2) m = 3*m - n1\
    \ + n2;\n                    else if (m < n1 && m > n2) m = 3*m - n1 + n2 - 2;\n\
    \                    else if (m > n1 && m < n2) m = 3*m - n1 - n2 + n1;\n    \
    \                else if (m > n1 && m > n2) m = 3*m - n1 - n2 - 2;\n         \
    \           if (m < n1 && m < n2) m = 3*m - n1 + n2;\n                    else\
    \ if (m < n1 && m > n2) m = 3*m - n1 + n2 - 2;\n                    else if (m\
    \ > n1 && m < n2) m = 3*m - n1 - n2 + n1;\n                    else if (m > n1\
    \ && m > n2) m = 3*m - n1 - n2 - 2;\n                    ans = Math.max(ans, m);\n\
    \                }\n            }\n        }\n        return ans;", "        ArrayList\
    \ <Integer> a = new ArrayList<>(n);\n        for (int i = 1; i <= n; i++) {\n\
    \            a.add(i);\n        }\n        ArrayList <Integer> c1 = new ArrayList<>(n);\n\
    \        ArrayList <Integer> c2 = new ArrayList<>(n);\n        ArrayList <Integer>\
    \ c3 = new ArrayList<>(n);\n        ArrayList <Integer> c4 = new ArrayList<>(n);\n\
    \        long result = 0;\n        int i, j;\n        for (i = 0; i < n; i++)\
    \ {\n            for (j = 0; j < (n-1); j++) {\n                if (j < (n-1))\
    \ {\n                    c1.add(a.get(j+1)-a.get(j));\n                    c2.add(a.get(j+2)-a.get(j+1));\n\
    \                    c3.add(a.get(j+3)-a.get(j+2));\n                    c4.add(a.get(j+4)-a.get(j+3));\n\
    \                }\n            }\n        }\n        for (i = 0; i < (n-2); i++)\
    \ {\n            for (j = 0; j < (n-1); j++) {\n                if (j < i) {\n\
    \                    c1.add(a.get(j)-a.get(i+1));\n                    c2.add(a.get(j+1)-a.get(j));\n\
    \                    c3.add(a.get(j+2)-a.get(j+1));\n                    c4.add(a.get(j+3)-a.get(j+2));\n\
    \                }\n            }\n        }\n        for (i = 0; i < (n-3); i++)\
    \ {\n            for (j = 0; j < (n-2); j++) {\n                if (j < i) {\n\
    \                    c1.add(a.get(j)-a.get(i+1));\n                    c2.add(a.get(j+1)-a.get(j));\n\
    \                    c3.add(a.get(j+2)-a.get(j+1));\n                    c4.add(a.get(j+3)-a.get(j+2));\n\
    \                }\n            }\n        }\n        for (i = 0; i < (n-4); i++)\
    \ {\n            for (j = 0; j < (n-3); j++) {\n                if (j < i) {\n\
    \                    c1.add(a.get(j)-a.get(i+1));\n                    c2.add(a.get(j+1)-a.get(j));\n\
    \                    c3.add(a.get(j+2)-a.get(j+1));\n                    c4.add(a.get(j+3)-a.get(j+2));\n\
    \                }\n            }\n        }\n        for (i = 0; i < (n-5); i++)\
    \ {\n            for (j = 0; j < (n-4); j++) {\n                if (j < i) {\n\
    \                    c1.add(a.get(j)-a.get(i+1));\n                    c2.add(a.get(j+1)-a.get(j));\n\
    \                    c3.add(a.get(j+2)-a.get(j+1));\n                    c", " \
    \       List<Integer> a = Arrays.stream(new int[n]).boxed().collect(Collectors.toList());\n\
    \        long result = 1;\n        for(int i = 1; i < n; i++) {\n            for(int\
    \ j = i+1; j < n; j++) {\n                for(int k = j+1; k < n; k++) {\n   \
    \                 if(a.get(i) + a.get(j) + a.get(k) == 3*(a.get(k)+a.get(j))-(a.get(k)+a.get(j))+a.get(i))\
    \ {\n                        result++;\n                    }\n              \
    \  }\n            }\n        }\n        return result;", "        List<Long> arr\
    \ = new ArrayList<Long>();\n        arr.set(0, 1l);\n        arr.set(1, 3l);\n\
    \        arr.set(2, 7l);\n        arr.set(3, 13l);\n        arr.set(4, 21l);\n\
    \        long counter = 0;\n        for(int i = 1; i < n; i++) {\n           \
    \ if(arr.get(i) + arr.get(j) + arr.get(k) >= 3) {\n                counter++;\n\
    \                arr.set(i, arr.get(i) + arr.get(j) + arr.get(k));\n         \
    \       arr.set(j, arr.get(j) + arr.get(k));\n                arr.set(k, arr.get(k));\n\
    \            }\n        }\n        return counter;", "        List<Integer> a\
    \ = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            a.add(i*i\
    \ - i + 1);\n        }\n        a.sort(Integer::compare);\n        ArrayList<Integer>\
    \ count = new ArrayList<>();\n        for(int i = 0; i <= a.size(); i++) {\n \
    \           for(int j = 0; j < (i + 1); j++) {\n                for(int k = (j+1);\
    \ k < a.size(); k++) {\n                    if(a.get(i) + a.get(j) + a.get(k)\
    \ % 3 == 0) {\n                        count.add(new IntTuple(a.get(i), a.get(j),\
    \ a.get(k)));\n                    }\n                }\n            }\n     \
    \   }\n        return (long) count.stream().filter(tuple -> (long) tuple.getA()\
    \ < 3L && !count.contains(tuple)).count();", "        ArrayList<Long> arr = new\
    \ ArrayList<Long>();\n        ArrayList<Long> triple = new ArrayList<Long>();\n\
    \n        // The first part will be used for looping\n        long min = 0;\n\
    \        long max = (long) (Math.sqrt(n));\n        while (max >= min) {\n   \
    \         arr.add(min);\n            arr.add(max);\n            arr.add(max);\n\
    \            triple = new ArrayList<Long>();\n            long temp = ((long)Math.sqrt((double)max)\
    \ * (long)Math.sqrt((double)min));\n            long sum = 0;\n            for(int\
    \ i = min; i <= max; i++) {\n                sum += (long)Math.pow((double)i -\
    \ temp, 2);\n                triple.add((long)Math.sqrt(Math.sqrt((double)i +\
    \ Math.sqrt((double)i - sum))));\n            }\n            for(int i = 0; i\
    \ <= arr.size(); i++) {\n                if(triple.contains(arr.get(i))) {\n \
    \                   arr.add(i);\n                    triple.clear();\n       \
    \         }\n            }\n            max -= 1;\n        }\n        int countTriple\
    \ = 0;\n        for(int i = 0; i <= arr.size(); i++) {\n            long sum =\
    \ arr.get(i);\n            for(int j = i; j < arr.size(); j++) {\n           \
    \     sum += arr.get(j);\n            }\n            for(int k = (i + 1) % arr.size();\
    \ k > 0; k = (k - 1) % arr.size()) {\n                sum += arr.get(k);\n   \
    \             if(sum % 3 != 0) {\n                    countTriple++;\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ (long)countTriple;", "        ArrayList < Integer > a = new ArrayList < Integer\
    \ > ();\n        for (long i = 1; i <= n; i++) {\n            a.add(i * i - i\
    \ + 1);\n        }\n        return getMaxTriples(a);", "        ArrayList<Long>\
    \ res = new ArrayList<>();\n        long[] arr = new long[n];\n        Arrays.fill(arr,\
    \ 1);\n        for (long i=1; i < n; i++) {\n            for (long j=i-1; j >\
    \ 0; j--) {\n                long k = j - 1;\n                for (long l = j\
    \ + 1; l < n; l++) {\n                    long m = l + k;\n                  \
    \  if (arr[m] == 1) {\n                        continue;\n                   \
    \ }\n                    long sum = arr[i] + arr[j] + arr[k];\n              \
    \      arr[m] = sum;\n                    int count = 0;\n                   \
    \ if (sum % 3 == 0) {\n                        res.add(new Long((long)i + (long)j\
    \ + l));\n                        count++;\n                    }\n          \
    \      }\n            }\n        }\n        return res.size() % 3 == 0 ? res.get(0).longValue()\
    \ : 0;", "        long count = 0; // count is initialized to 0\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            a.add(i);\n\
    \        }\n        for(int i = 1; i < a.size(); i++) {\n            for(int j\
    \ = 1; i < a.size(); j++) {\n                if(i != j) {\n                  \
    \  for(int k = 1; k < a.size(); k++) {\n                        if(i + j + k <=\
    \ n && a.get(i) + a.get(j) + a.get(k) % 3 == 0) {\n                          \
    \  count++;\n                            break;\n                        }\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ count;", "        ArrayList<Integer> arr = new ArrayList<>(n);\n        for(int\
    \ i=1;i<=n;i++){\n            arr.add(i*i-1);\n            arr.add(i*i+1);\n \
    \       }\n        long max = 0;\n        for(int i=0;i<arr.size();i++){\n   \
    \         for(int j=0;j<arr.size();j++){\n                for(int k=0;k<arr.size();k++){\n\
    \                    if(arr.get(i)+arr.get(j)+arr.get(k)>=3){\n              \
    \          if(arr.get(i)>max){\n                            max = arr.get(i);\n\
    \                        }\n                        if(arr.get(j)>max){\n    \
    \                        max = arr.get(j);\n                        }\n      \
    \                  if(arr.get(k)>max){\n                            max = arr.get(k);\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return max;", "        ArrayList<Long> a = new ArrayList<>();\n\
    \        long sum = 0;\n        for(int i = 1; i<n; i++) {\n            sum +=\
    \ a[i-1];\n            a.add(i * i - i + 1);\n        }\n        for(int i = 1;\
    \ i<n; i++) {\n            for(int j = i; j<n; j++) {\n                if(a.get(j)\
    \ - sum % 3 == 0) {\n                    return (long) (a.get(j) - sum % 3);\n\
    \                }\n            }\n        }\n        return 0;", "        ArrayList<\
    \ long >a = new ArrayList< long >(n);\n        for(int i = 0; i<n; i++) {\n  \
    \          a.set(i, i*i-i+1);\n        }\n        Long[] b = a.toArray(new Long[n]);\n\
    \        Arrays.sort(b);\n        for(int i = 0; i<n; i++) {\n            for(int\
    \ j = i+1; j<n; j++) {\n                for(int k = j+1; k<n; k++) {\n       \
    \             Long sum = a.get(i)+a.get(j)+a.get(k);\n                    if(sum%3\
    \ != 0) {\n                        sum = null;\n                    }\n      \
    \              if(sum != null) {\n                        return sum;\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ null;", "        int [] a = new int[n];\n        for (int i = 0; i < n; i++)\
    \ {\n            a[i] = i * i - i + 1;\n        }\n        return getMaxTriples(a,\
    \ n);", "        List<Integer> al = new ArrayList<>(n);\n        for (int i =\
    \ 0; i < n; i++) al.add(i * i - i + 1);\n\n        Arrays.sort(al);\n        long\
    \ ans = 0;\n        for (int i = 0; i < al.size(); i += 3)\n            if (al.get(i)\
    \ + al.get(i + 1) + al.get(i + 2) == 0) ans += 1;\n\n        return ans;", " \
    \       List<Integer> list = new ArrayList<>(n);\n        for (int i = 1; i <=\
    \ n; i++) {\n            list.add(i);\n        }\n        long triples = 0;\n\
    \        for (Integer i : list) {\n            for (int j = i + 1; j <= n; j++)\
    \ {\n                for (int k = j + 1; k <= n; k++) {\n                    if\
    \ (i * i + j * j == i * i + k * k) {\n                        triples++;\n   \
    \                 }\n                }\n            }\n        }\n        return\
    \ triples;", "        ArrayList list = new ArrayList();\n        int a[] = new\
    \ int[n];\n        for(int i = 0; i < n; i++) {\n            a[i] = i * i - i\
    \ + 1;\n        }\n        return Arrays.stream(a).filter(x -> x > 0).sorted().findFirst().getAsLong();",
  "        ArrayList< long > arr = new ArrayList< long >( n );\n        for ( long\
    \ i = 0 ; i < n ; i++ ) {\n            arr.add( i * i * i - i + 1 );\n       \
    \ }\n        long result = 0;\n        for ( int i = 1 ; i < arr.size() ; i++\
    \ ) {\n            for ( int j = i ; j < arr.size() ; j++ ) {\n              \
    \  for ( int k = j ; k < arr.size() ; k++ ) {\n                    long triple\
    \ = ( arr.get( i ) + arr.get( j ) + arr.get( k ) );\n                    if (\
    \ triple % 3 == 0 ) {\n                        result += 1;\n                \
    \    }\n                }\n            }\n        }\n        return result;",
  "        long res = 0;\n        ArrayList< Long> array = new ArrayList< Long>();\n\
    \        for(int i = 1; i <= n; i++) {\n            long a[] = {i, i * i - i +\
    \ 1, 1};\n            array.add(a);\n        }\n        array.sort((a, b) -> {\n\
    \            int diff = Math.abs(b[0] - a[0]);\n            if(diff == 1) {\n\
    \                diff = Math.abs(b[1] - a[1]);\n            }\n            if(diff\
    \ == 1) {\n                diff = Math.abs(b[2] - a[2]);\n            }\n    \
    \        return diff;\n        });\n        for(int i = 0; i < array.size(); i++)\
    \ {\n            long cur = array.get(i);\n            for(int j = i; j < array.size();\
    \ j++) {\n                long cur2 = array.get(j);\n                for(int k\
    \ = j; k < array.size(); k++) {\n                    long cur3 = array.get(k);\n\
    \                    if(cur + cur2 + cur3 == 3) {\n                        res++;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ res;", "        // write your code in Java 7\n        ArrayList<Long> al = new\
    \ ArrayList<Long>();\n        ArrayList<Integer> a = new ArrayList<Integer>();\n\
    \        for (int i = 1; i < n; i++) {\n            al.add(i * i - i + 1);\n \
    \           a.add(i);\n        }\n        int k = 0;\n        for (int i = 0;\
    \ i < al.size(); i++) {\n            for (int j = 0; j < al.size(); j++) {\n \
    \               if (k == i || k == j) {\n                    continue;\n     \
    \           }\n                if (al.get(i) < al.get(j)) {\n                \
    \    continue;\n                }\n                k = j;\n                if\
    \ (al.get(i) + al.get(j) + al.get(k) % 3 == 0) {\n                    return 1;\n\
    \                }\n            }\n        }\n        return 0;", "        int[]\
    \ a = new int[n];\n        for (int i = 0; i < n; i++) a[i] = i * i - i + 1;\n\
    \        return (int) Arrays.stream(a).boxed().collect(Collectors.toMap(a -> a,\
    \ a -> a, Math::addExact).values()).stream().filter(i -> i % 3 == 0).count();",
  "        int a[] = new int[n];\n        int max = 0;\n        for(int i = 1 ; i\
    \ < a.length ; i++) {\n            for(int j = i ; j < a[i].length ; j++) {\n\
    \                for(int k = j ; k <= a.length - 1 ; k++) {\n                \
    \    if(a[i] + a[j] + a[k] == 3) {\n                        if(k > max) {\n  \
    \                          max = k;\n                        }\n             \
    \       }\n                }\n            }\n        }\n        return (long)\
    \ (max * 3);", "        ArrayList<Long> arr = new ArrayList<>(n);\n        for(int\
    \ i = 0; i < n; i++) arr.add(Long.valueOf(i * i - i + 1));\n        return getMaxTriples(arr);",
  "        ArrayList<Long> al = new ArrayList<>(n);\n        long sum = 0;\n     \
    \   for (int i = 0; i < n; i++) {\n            al.add(i * i - i + 1);\n      \
    \      sum += al.get(i);\n        }\n        ArrayList<Long> ns = new ArrayList<>();\n\
    \        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                for (int k = j + 1; k < n; k++) {\n                \
    \    ns.add((al.get(i) + al.get(j) + al.get(k)) / 3);\n                }\n   \
    \         }\n        }\n        long res = 0;\n        for (long i : ns) {\n \
    \           if (i % 3 == 0) {\n                res++;\n            }\n       \
    \ }\n        return res;", "        ArrayList<Integer> arr = new ArrayList<>(n);\n\
    \        for (long i = 1; i <= n; i++) {\n            arr.add(i);\n          \
    \  arr.add(i * i - 1 + 1);\n            arr.add(i * i + 1);\n        }\n     \
    \   long ans = -1;\n        long sum = arr.stream().mapToLong(Integer::longValue).sum();\n\
    \        \n        if (sum % 3 != 0) {\n            System.out.println(\"not valid\"\
    );\n            return -1;\n        }\n        \n        long[] triples = arr.stream().flatMap(i\
    \ -> {\n            long[] triple = new long[3];\n            for (int j = 1;\
    \ j < arr.size(); j++) {\n                triple[arr.indexOf(j) - 2] = i * (i\
    \ + 1) - i + 1;\n            }\n            return Arrays.stream(triple).limit(3);\n\
    \        }).toArray();\n        \n        Arrays.sort(triples);\n        \n  \
    \      Arrays.stream(triples).forEach(t -> {\n            if (t == 0 || t == 1)\
    \ {\n                return;\n            }\n            long d = Arrays.stream(new\
    \ long[]{arr.get(0), arr.get(t), arr.get(t + 1)}).sum();\n            if (d ==\
    \ 0) {\n                System.out.println(\"invalid\");\n                return\
    \ -1;\n            } else if (d % 3 != 0) {\n                System.out.println(\"\
    not valid\");\n                return -1;\n            }\n            ans = Math.max(ans,\
    \ t - 1);\n        });\n        \n        System.out.println(\"valid\");\n   \
    \     \n        return ans;", "        List<Integer> a = new ArrayList<>();\n\
    \        for (long i = 1; i <= n; i++) {\n            a.add(i * i - i + 1);\n\
    \        }\n        long count = 0;\n        long sum = 0;\n        for (long\
    \ i = 0; i <= n; i++) {\n            for (long j = 0; j <= n; j++) {\n       \
    \         for (long k = 0; k <= n; k++) {\n                    long sum2 = a[i]\
    \ + a[j] + a[k];\n                    if (sum2 % 3 == 0) {\n                 \
    \       count++;\n                        sum += sum2;\n                    }\n\
    \                }\n            }\n        }\n        return sum;", "        ArrayList\
    \ a = new ArrayList(n);\n        // a.add(1);\n        for (int i = 1; i <= n;\
    \ i++) {\n            a.add(i * i - 1 + 1); // a[i] = i * i - 1 + 1\n        }\n\
    \        long num = 0;\n        long max = 0;\n        int maxCount = 0;\n   \
    \     for (int i = 0; i < a.size(); i++) {\n            for (int j = i + 1; j\
    \ < a.size(); j++) {\n                for (int k = j + 1; k < a.size(); k++) {\n\
    \                    long temp = a.get(i) + a.get(j) + a.get(k);\n           \
    \         System.out.println(temp);\n                    if (temp % 3 == 0) {\n\
    \                        num++;\n                        if (temp > max) {\n \
    \                           max = temp;\n                            maxCount\
    \ = 1;\n                            for (int m = 0; m < a.size(); m++) {\n   \
    \                             if (a.get(m) == temp) {\n                      \
    \              maxCount++;\n                                }\n              \
    \              }\n                        }\n                        if (temp\
    \ == max) {\n                            maxCount++;\n                       \
    \ }\n                    }\n                }\n            }\n        }\n    \
    \    System.out.println(\"num=\" + num);\n        System.out.println(\"max=\"\
    \ + max);\n        System.out.println(\"maxCount=\" + maxCount);\n        return\
    \ num;", "        ArrayList<Integer> a = new ArrayList<>();\n        for (int\
    \ i = 1; i <= n; i++) {\n            int x = i * i - i + 1;\n            a.add(x);\n\
    \        }\n\n        return a.stream().reduce(0, (x, y) -> x + y);", "      \
    \  ArrayList< Long > list = new ArrayList< Long>();\n        long mod = n;\n \
    \       long res = 0;\n        while(!list.isEmpty()){\n            mod = mod*mod\
    \ - 1;\n            list.clear();\n            for(int i = 0; i < n; i++) {\n\
    \                int value = i*i - i + 1;\n                if(value == 0 || value\
    \ == mod) {\n                    continue;\n                }\n              \
    \  if(list.contains(value)) {\n                    continue;\n               \
    \ }\n                if(value >= 3) {\n                    res += value;\n   \
    \                 list.add(value);\n                }\n            }\n       \
    \ }\n        return res;", "        if (n < 1l) {\n            return 0l;\n  \
    \      }\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n\
    \            a[i] = i * i - i + 1;\n        }\n        long triples = 0;\n   \
    \     for (int i = 0; i < n - 1; i++) {\n            for (int j = i + 1; j < n;\
    \ j++) {\n                if (a[i] > a[j]) {\n                    continue;\n\
    \                }\n                for (int k = j + 1; k < n; k++) {\n      \
    \              if (a[i] > a[k]) {\n                        continue;\n       \
    \             }\n                    if (a[j] > a[k]) {\n                    \
    \    continue;\n                    }\n                    if (a[j] == a[k]) {\n\
    \                        if (i != j && j != k) {\n                           \
    \ continue;\n                        }\n                    }\n              \
    \      triples++;\n                }\n            }\n        }\n        return\
    \ triples;", "        List<Long> a = new ArrayList<Long>(n);\n        long sum\
    \ = 0;\n        for (long i = 1; i <= n; i++) {\n            sum += i*i*i;\n \
    \           a.add(i*i - i + 1);\n        }\n        return findMax(a, sum);",
  "        ArrayList a = new ArrayList(n);\n        a.addAll(Arrays.asList((long)\
    \ 1, n * (long) 1, (long) 1));\n        long triples = 0;\n        for (int i\
    \ = 1; i < n; i++) {\n            for (int j = i+1; j < n; j++) {\n          \
    \      for (int k = j+1; k < n; k++) {\n                    if (i*i+j*j+k*k ==\
    \ n*n) {\n                        triples += 1;\n                    }\n     \
    \           }\n            }\n        }\n        return triples;", "        long\
    \ sum = 0;\n        List<Long> arr = new ArrayList<Long>(n);\n        Arrays.stream(arr).mapToLong(x\
    \ -> x * x - x + 1).forEach(x -> sum += x);\n        return arr.stream().filter(x\
    \ -> x < 0 || x >= sum).count();", "        ArrayList <Long> a = new ArrayList\
    \ <>(n);\n        for (long i = 1; i <= n; i++) {\n            a.add(i * i - i\
    \ + 1);\n        }\n        long res = 0;\n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    long tripleSum = a.get(i) + a.get(j)\
    \ + a.get(k);\n                    if (tripleSum == 3) {\n                   \
    \     long triple = (long) Math.sqrt(tripleSum);\n                        long\
    \ l = (long) Math.sqrt(a.size());\n                        if (tripleSum == l\
    \ * l - l * l - l * l * l) {\n                            res += triple;\n   \
    \                     }\n                    }\n                }\n          \
    \  }\n        }\n        return res;", "        int a[] = new int[n];\n      \
    \  for (int i = 0; i < n; i++) {\n            a[i] = i * i - i + 1;\n        }\n\
    \        return (int) IntStream.range(0, n)\n            .boxed()\n          \
    \  .filter((e) -> a [e] < 3l)\n            .count();", "        List<Integer>\
    \ a = new ArrayList<>();\n        long count = 0;\n        for (int i = 1; i <=\
    \ n; i++) {\n            int j = i * i - i + 1;\n            int k = j;\n    \
    \        while (k > 0) {\n                if (j % 3 != 0 && k % 3 != 0) {\n  \
    \                  a.add(j);\n                }\n                j--;\n      \
    \          k--;\n            }\n        }\n        for (Integer j : a) {\n   \
    \         if (j % 3 == 0) count++;\n        }\n        return count;", "     \
    \   ArrayList <Integer> a = new ArrayList<>();\n        ArrayList <Integer> b\
    \ = new ArrayList<>();\n        ArrayList <Integer> c = new ArrayList<>();\n \
    \       a.add(1l);\n        b.add(2l);\n        c.add(3l);\n        if (n < 3l)\
    \ return 0;\n        if (n == 1l) return 1l;\n        a.add((n * n) - n);\n  \
    \      for (int i = 0; i < a.size(); i++) {\n            b.add(a.get(i));\n  \
    \          for (int j = 0; j < b.size(); j++) {\n                c.add(b.get(j));\n\
    \                for (int k = 0; k < c.size(); k++) {\n                    if\
    \ (c.get(k) == (a.get(i) + b.get(j) + b.get(k)))\n                        c.remove(k);\n\
    \                    if (c.get(k) == (a.get(i) + b.get(j) + b.get(k)))\n     \
    \                   return 1l;\n                }\n            }\n           \
    \ b.remove(0);\n        }\n        return 0;", "        List<Integer> list = new\
    \ ArrayList<>(n);\n        Arrays.stream(list).forEach(x->x*x-x+1); // a[i] =\
    \ i * i - i + 1\n        int countTriplet = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            for (int j = i+1; j < n; j++) {\n                for (int\
    \ k = j+1; k < n; k++) {\n                    countTriplet += Math.abs(list.get(i)\
    \ - list.get(j) - list.get(k)) % 3 == 0;\n                }\n            }\n \
    \       }\n        return (long) countTriplet;", "        ArrayList <Long> a =\
    \ new ArrayList <>(n);\n        for (int i = 0; i < n; i++) {\n            a.add(i\
    \ * i - i + 1);\n        }\n        \n        //ArrayList <Integer> result = new\
    \ ArrayList <>();\n        //for(int i=0; i<n; i++){\n        //    result.add(i);\n\
    \        //}\n        \n        for(int i=0; i<a.size(); i++){\n            for\
    \ (int j=i+1; j<a.size(); j++){\n                for (int k=j+1; k<a.size(); k++){\n\
    \                    //System.out.println(a.get(i)+a.get(j)+a.get(k));\n     \
    \               if(a.get(i)+a.get(j)+a.get(k) % 3 == 0){\n                   \
    \     //System.out.println(Arrays.toString(a));\n                        return\
    \ a.get(i)+a.get(j)+a.get(k);\n                        \n                    }\n\
    \                }\n            }\n        }\n        \n        //return Collections.max(a.stream().map(a->a).collect(Collectors.toList()));",
  "        long a[] = new long[n];\n        Arrays.fill(a, 0L);\n        Arrays.sort(a);\n\
    \        return getMaxTriples(a);", "        long sum = 0;\n        ArrayList<Long>\
    \ l = new ArrayList<>();\n        for(int i=0;i<n;i++) {\n            long temp1\
    \ = i*(i+1)+1;\n            long temp2 = i*(i+1)-1;\n            l.add(temp1);\n\
    \            l.add(temp2);\n        }\n        for(int i=0;i<l.size();i++) {\n\
    \            for(int j=0;j<l.size();j++) {\n                for(int k=0;k<l.size();k++)\
    \ {\n                    if(l.get(i)<=l.get(j) && l.get(i)<=l.get(k)) {\n    \
    \                    sum += (l.get(i)+l.get(j)+l.get(k));\n                  \
    \  }\n                }\n            }\n        }\n        return sum;", "   \
    \     int[] a = Arrays.stream(new int[n]).mapToObj(i -> i * i - i + 1).sorted().toArray();\n\
    \        Arrays.sort(a);\n        long ans = 0;\n        for (int i = 0; i < a.length\
    \ - 1; i++) {\n            for (int j = i + 1; j < a.length; j++) {\n        \
    \        for (int k = j + 1; k < a.length; k++) {\n                    if (a[i\
    \ + j + k] == a[i] || a[i + j + k] == a[j] || a[i + j + k] == a[k]) {\n      \
    \                  ans++;\n                    }\n                }\n        \
    \    }\n        }\n        return ans;", "        ArrayList <Long> a = new ArrayList<>();\n\
    \        for (int i = 1; i <= n; ++i) {\n            long x = i * i - i + 1;\n\
    \            a.add(x);\n        }\n        long maxValue = 0;\n        long sumOfDivisors\
    \ = 0;\n        for (int i = 0; i <= n; ++i) {\n            long sum = 0;\n  \
    \          long j = 0;\n            while (j < a.size() && sum < maxValue) {\n\
    \                sum = sum + a.get(i);\n                ++j;\n            }\n\
    \            if (sum > maxValue) {\n                maxValue = sum;\n        \
    \    }\n        }\n        return maxValue;", "        ArrayList<Long> al = new\
    \ ArrayList<>();\n        al.add((long) (n*(n*2) - n*n - 1)); // Add all elements\n\
    \        long result = Long.MIN_VALUE; // Result is initially minimum value\n\
    \        for (long i = 1; i < n; i++) { // Iterate all elements, i\n         \
    \   int j = i; // Element with index j\n            int k = i; // Element with\
    \ index k\n            while (j < n) {\n                al.add((long)(i*(i*2)\
    \ - i*i - 1)); // Add all elements to al\n                int t = al.get(j); //\
    \ Element with index j\n                int u = al.get(k); // Element with index\
    \ k\n                al.add((long)(a.get(t) + a.get(u))); // Add both elements\
    \ to al\n                t = al.get(j); // Element with index j\n            \
    \    u = al.get(k); // Element with index k\n                al.add((long)(a.get(t)\
    \ + a.get(u))); // Add both elements to al\n                t = al.get(j); //\
    \ Element with index j\n                u = al.get(k); // Element with index k\n\
    \                al.add((long)(a.get(t) + a.get(u))); // Add both elements to\
    \ al\n                t = al.get(j); // Element with index j\n               \
    \ u = al.get(k); // Element with index k\n                al.add((long)(a.get(t)\
    \ + a.get(u))); // Add both elements to al\n                t = al.get(j); //\
    \ Element with index j\n                u = al.get(k); // Element with index k\n\
    \                al.add((long)(a.get(t) + a.get(u))); // Add both elements to\
    \ al\n                t = al.get(j); // Element with index j\n               \
    \ u = al.get(k); // Element with index k\n                al.add((long)(a.get(t)\
    \ + a.get(u))); // Add both elements to al\n                t = al.get(j); //\
    \ Element with index j\n                u = al.get(k); // Element with index k\n\
    \                al.add((long)(a.get(t) + a.get(u))); // Add both elements to\
    \ al\n                t = al.get(j); // Element with index j\n               \
    \ u = al.get(k); // Element with index k\n                al.add((long)(a.get(t)\
    \ + a.get(u))); // Add both elements to al\n                t = al.get(j); //\
    \ Element with index j\n                u = al.get(k); // Element with index k\n\
    \                al.add((long)(a.get(t) + a.get(u))); // Add both elements to\
    \ al\n                t = al.get(j); // Element with index j\n               \
    \ u = al.get(k); // Element with index k\n                al.add((long)(a.get(t)\
    \ + a.get(", "        // Write your code here.\n        int[] arr=new int[n];\n\
    \        long ret=0;\n        for(int i=0;i<n;i++){\n            arr[i]=i*i-i+1;\n\
    \        }\n        Arrays.sort(arr);\n        Arrays.sort(arr);\n        for(int\
    \ i=0;i<n;i++){\n            ret+=arr[i];\n            if((ret%3)==0)\n      \
    \          break;\n        }\n        return ret;", "        ArrayList arraylist\
    \ = new ArrayList(n);\n        for(int i = 1; i <= n; i++) {\n            arraylist.add(i\
    \ * i - i + 1);\n        }\n        return getMaxTriples(arraylist);", "     \
    \   ArrayList<Integer> arr = new ArrayList<>();\n        for (int i = 1; i <=\
    \ n; i++) {\n            int temp = i * i - i + 1;\n            arr.add(temp);\n\
    \        }\n        Arrays.sort(arr);\n        int counter = 0;\n        for (int\
    \ i = 0; i < arr.size(); i++) {\n            int left = arr.get(i);\n        \
    \    for (int j = i + 1; j < arr.size(); j++) {\n                int right = arr.get(j);\n\
    \                int temp = (left + right + 1);\n                if (temp % 3\
    \ == 0) {\n                    counter++;\n                }\n            }\n\
    \        }\n        return counter;", "        ArrayList array = new ArrayList();\n\
    \        array.add(1, 3);\n        array.add(7, 13);\n        array.add(21, 35);\n\
    \        array.add(59, 89);\n        array.add(147, 193);\n        array.add(307,\
    \ 441);\n        array.add(617, 937);\n        array.add(1229, 1969);\n      \
    \  array.add(2459, 4097);\n        array.add(4969, 8079);\n        array.add(8147,\
    \ 15137);\n        array.add(11343, 21927);\n        array.add(16417, 34833);\n\
    \        array.add(20941, 57703);\n        array.add(26735, 90953);\n        array.add(33681,\
    \ 135113);\n        array.add(41937, 217137);\n        array.add(58993, 343397);\n\
    \        array.add(86271, 545177);\n        array.add(118437, 711023);\n     \
    \   array.add(169817, 1280673);\n        array.add(225391, 1830511);\n       \
    \ array.add(292749, 4556313);\n        array.add(460519, 8015103);\n        array.add(732551,\
    \ 13696017);\n        array.add(1049593, 19040253);\n        array.add(1688791,\
    \ 25402655);\n        array.add(2548291, 50653839);\n        array.add(4916331,\
    \ 84937691);\n        array.add(8276017, 134906083);\n        array.add(11837691,\
    \ 194118061);\n        array.add(17190617, 256015073);\n        array.add(27590251,\
    \ 537471937);\n        array.add(46099193, 892784191);\n        array.add(71514193,\
    \ 1390105977);\n        array.add(104659373, 1971428171);\n        array.add(168758137,\
    \ 2661549793);\n        array.add(265733417, 5384498103);\n        array.add(460262737,\
    \ 8956859771);\n        array.add(713844177, 14030995013);\n        array.add(1043353737,\
    \ 19718785937);\n        array.add(1685321377);\n        array.add(2654934417);\n\
    \        array.add(4600928171);\n        array.add(7118441777);\n        array.add(10432737",
  "        List<Integer> a = new ArrayList<>(n);\n        for(long i = 0; i < n; i++){\n\
    \            a.add(i*i-i+1);\n        }\n        Collections.sort(a);\n      \
    \  return getMax(a);", "        long[] a = new long[n];\n        Arrays.fill(a,\
    \ 1);\n        Arrays.sort(a);\n        List<Long> result = new ArrayList<>();\n\
    \        for (int i = 2; i < n; i++) {\n            long sum = 0;\n          \
    \  for (int j = i; j > 0; j--) {\n                sum += a[j];\n             \
    \   if (sum % 3 != 0) {\n                    break;\n                }\n     \
    \       }\n            if (sum % 3 == 0) {\n                result.add(sum);\n\
    \            }\n        }\n        return result.size();", "        long a[] =\
    \ new long[n];\n        Arrays.stream(a).forEach(i -> i * i - i + 1);\n      \
    \  return a.stream().filter(i -> i < n && i < n && i < n).count();", "       \
    \ ArrayList<Integer> a = new ArrayList<>();\n        Arrays.stream(new Integer[n]).forEach(i\
    \ -> a.add(i * i - i + 1));\n        long result = Long.MIN_VALUE;\n        for(int\
    \ i = 1; i < n; i++) {\n            for(int j = 1; j < i; j++) {\n           \
    \     for(int k = 1; k < j; k++) {\n                    if(new Triple(a.get(i),\
    \ a.get(j), a.get(k)).isValid()) {\n                        result = Math.max(result,\
    \ a.stream().mapToLong(x -> x*x-x+1).sum()); // sum a triple\n               \
    \     }\n                }\n            }\n        }\n        return result;",
  "        // your implementation goes here\n        int [] arr = new int[n];\n  \
    \      for(int i = 0; i < n; i++){\n            arr[i] = i * i - i + 1;\n    \
    \    }\n        Arrays.sort(arr);\n        long max = 0;\n        long curr =\
    \ 0;\n        long last = 0;\n        for(int i = 0; i < n; i++){\n          \
    \  curr = (long)Math.pow(Math.pow(arr[i], 2) + Math.pow(arr[n] - arr[i], 2), 0.5);\n\
    \            last = max;\n            if(curr > max){\n                max = curr;\n\
    \            }\n            if(curr > (arr[i] * arr[n] + arr[i])){\n         \
    \       return (last + 1);\n            }\n        }\n        return max;", " \
    \       long a = n;\n        List<Long> l = new ArrayList<>(n);\n        l.add(0);\n\
    \        for (long i = 1; i < n; ++i) {\n            l.add(a);\n            a\
    \ = a + a;\n        }\n        l.add(a);\n        Collections.sort(l);\n     \
    \   for (long i = l.size() - 1; i >= 0; --i) {\n            for (long j = i+1;\
    \ j < l.size(); ++j) {\n                for (long k = j+1; k < l.size(); ++k)\
    \ {\n                    long sum = 0;\n                    for (int index = 0;\
    \ index < i; ++index)\n                        sum += l.get(index);\n        \
    \            for (int index = 0; index < j; ++index)\n                       \
    \ sum += l.get(index);\n                    for (int index = 0; index < k; ++index)\n\
    \                        sum += l.get(index);\n                    if (sum % 3\
    \ == 0)\n                        return i;\n                }\n            }\n\
    \        }\n        return 0;", "        // Initialize array list a with length\
    \ n.\n        ArrayList<Long> a = new ArrayList<>();\n        long res = 0;\n\
    \        long temp = 1;\n        long temp2;\n        for(int i = 1; i <= n; i++){\n\
    \            // Create new array list with length n.\n            ArrayList<Long>\
    \ temp = new ArrayList<>();\n            // add all element from 1 to n.\n   \
    \         temp.add(i);\n            // Add new value to array list a.\n      \
    \      a.addAll(temp);\n        }\n\n        for(int i = 0; i < a.size(); i++){\n\
    \            temp2 = a.get(i);\n            for(int j = i+1; j < a.size(); j++){\n\
    \                temp3 = a.get(j);\n                for(int k = j+1; k < a.size();\
    \ k++){\n                    temp4 = a.get(k);\n                    if(temp2 *\
    \ temp3 * temp4 == 0){\n                        res += temp2 * temp3 * temp4;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ res;", "        ArrayList arr = new ArrayList();\n        int i;\n        for(i\
    \ = 1; i <= n; i++) {\n            arr.add(i * i - i + 1);\n        }\n      \
    \  long triples = 0;\n        for (int i = 0; i < arr.size(); i++) {\n       \
    \     for (int j = 0; j < arr.size(); j++) {\n                if (j < i) {\n \
    \                   for (int k = 0; k < arr.size(); k++) {\n                 \
    \       if (arr.get(i) + arr.get(j) + arr.get(k) == 0) {\n                   \
    \         continue;\n                        }\n                        else if\
    \ (arr.get(i) + arr.get(j) + arr.get(k) >= 3) {\n                            triples\
    \ += 1;\n                            break;\n                        }\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ triples;", "        long[] arr = new long[n];\n        long a = 0;\n       \
    \ for(int i = 0; i < n; i++)\n            arr[i] = i * i - i + 1;\n        for(int\
    \ i = 0; i < n; i++) {\n            for(int j = 0; j < n; j++)\n             \
    \   for(int k = 0; k < n; k++) {\n                    if(i < j && j < k) {\n \
    \                       if(isMultiple(arr, i, j, k)) {\n                     \
    \       a++;\n                        }\n                    }\n             \
    \   }\n        }\n        return a;", "        List<Long> a = new ArrayList<>();\n\
    \        Arrays.fill(a, (Long) 1);\n        for(int i = 0; i < n; i++) {\n   \
    \         a[i] = a[i] * i - i + 1;\n        }\n        return Arrays.stream(a).filter(x\
    \ -> (x % 3) == 0).count();", "        List<Long> array = new ArrayList<Long>();\n\
    \        for(int i=1; i<=n; i++){\n            array.add(i);\n        }\n\n  \
    \      long ans = 0L;\n        for(int i=0; i<array.size(); i++){\n          \
    \  for(int j=i+1; j<array.size(); j++){\n                for(int k=j+1; k<array.size();\
    \ k++){\n                    int sum = 0;\n                    for(int m=1; m<i;\
    \ m++){\n                        sum+= array.get(m) * array.get(m-1) * array.get(m-j);\n\
    \                    }\n                    if(sum%3==0) ans += 1;\n         \
    \       }\n            }\n        }\n        return ans;", "        ArrayList\
    \ <long> result = new ArrayList <> ();\n        for (int i = 1; i < n; i = (i\
    \ * i) + i + 1) {\n            long sum = 0;\n            for (int j = i; j <\
    \ n; j = (j * j) + j + 1) {\n                sum += j;\n            }\n      \
    \      if (sum % 3 == 0) {\n                result.add((long)i);\n           \
    \     result.add((long)i);\n                result.add((long)i);\n           \
    \ }\n        }\n        return result.size();", "        ArrayList<Long> al =\
    \ new ArrayList<Long>();\n        Arrays.fill(al,1l);\n        Arrays.sort(al);\n\
    \        long temp=al.get(0);\n        long sum=0;\n        for(int i=1;i<al.size();i++){\n\
    \            temp+=al.get(i);\n            sum+=temp;\n            if(sum%3 ==0){\n\
    \                System.out.println(temp);\n                return temp;\n   \
    \         }\n        }\n        System.out.println(temp);\n        return temp;",
  "        long[] arr = (long[]) new Object[n];\n        Arrays.fill(arr, (long) 0);\n\
    \        Arrays.sort(arr);\n        ArrayList <Long> lst = new ArrayList<>();\n\
    \        ArrayList <Long> lst2 = new ArrayList<>();\n        ArrayList <Long>\
    \ lst3 = new ArrayList<>();\n        for (long i : arr)\n            lst.add(Math.max(0,\
    \ i));\n        for (int i = 0; i < arr.length; i++)\n            if (arr[i] ==\
    \ arr[arr.length - 1])\n                lst2.add(Math.max(0, arr[i]));\n     \
    \       else \n                lst3.add(Math.max(0, arr[i]));\n        long num\
    \ = (long) (lst2.size() + lst3.size());\n        if (num == 0)\n            throw\
    \ new NoSuchElementException(\"The array is empty.\");\n        if (num == 1)\n\
    \            return lst2.get(0);\n        long result = lst2.get(0);\n       \
    \ for (int i = 1; i < lst2.size(); i++)\n            if (result + lst2.get(i)\
    \ < 3)\n                result = lst2.get(i) + result;\n        for (int i = 1;\
    \ i < lst3.size(); i++)\n            if (result + lst3.get(i) < 3)\n         \
    \       result = lst3.get(i) + result;\n        return result;", "        int\
    \ a[] = new int[n];\n        int i = 0;\n        for(; i < a.length; ++i) {\n\
    \            a[i] = i * i - i + 1;\n        }\n        return IntStream.range(0,\
    \ n).filter(i -> a[i] % 3 == 0).count();", "        ArrayList <Integer> a = new\
    \ ArrayList <>();\n        ArrayList <Integer> b = new ArrayList <>();\n     \
    \   int max = 0;\n\n        for (int i = 0 ; i < n ; i++) {\n            int cur\
    \ = i * i - i + 1;\n            a.add(i, cur);\n        }\n\n        for (Integer\
    \ i : a) {\n            for (int j = 0 ; j < a.size() ; j++) {\n             \
    \   for (int k = 0 ; k < a.size() ; k++) {\n                    long cur = a.get(i)\
    \ + a.get(j) + a.get(k);\n\n                    if (cur % 3 == 0) {\n        \
    \                b.add(i);\n                        b.add(j);\n              \
    \          b.add(k);\n                    }\n                }\n            }\n\
    \        }\n\n        if (b.size() > 0) {\n            max = b.get(b.size() -\
    \ 1);\n        }\n\n        return max;", "        int a[] = new int[n];\n   \
    \     for (int i = 0; i < n; ++i) {\n            a[i] = i * i - i + 1;\n     \
    \   }\n        Arrays.sort(a);\n        int count = 0;\n        for (int i = 0;\
    \ i < n; ++i) {\n            int j = i;\n            while (j > 0) {\n       \
    \         j--;\n                count += Math.max(0, a[j] - a[i]) + (a[i] + a[j]\
    \ == 3);\n            }\n        }\n        return count;", "        // TODO Auto-generated\
    \ method stub\n        ArrayList<Long> a = new ArrayList<Long>();\n        long\
    \ sum = 0;\n        long x = 0;\n        for(int i=1; i<=n; i++) {\n         \
    \   x = i*(i-1)+i+1;\n            if(x%3==0) {\n                a.add(x);\n  \
    \          }\n            sum = sum + x;\n        }\n        long result = 0;\n\
    \        for(int i = 0; i<a.size(); i++) {\n            int j=i;\n           \
    \ int k=i;\n            for(int l=0; l<i; l++) {\n                if(j<k && k<a.size())\
    \ {\n                    if(Math.abs(a[i]-a.get(i)-a.get(k)))==Math.abs(a[i]-a.get(i)-a.get(k)))\
    \ \n                    {\n                        result++;\n               \
    \     }\n                }\n            }\n        }\n        return result;",
  "        long[] a = new long[n];\n        Arrays.setAll(a, i -> i * i - i + 1);\n\
    \        return IntStream.range(1, n).filter(i -> IntStream.range(1, n).filter(j\
    \ -> IntStream.range(1, n).filter(k -> a[i * i - i + 1] + a[j * j - j + 1] + a[k\
    \ * k - k + 1] % 3 == 0).count() > 0).count();", "        long a[] = new long[n];\n\
    \        Arrays.stream(a).map(Math::abs).sorted().forEach(a::put);\n        Arrays.stream(a).map(Math::abs).sorted().forEach(a::put);\n\
    \        return Arrays.stream(a).mapToLong(i -> a[i] * a[i] * a[i]).filter(i ->\
    \ i%3==0).count();", "        final long[] array = new long[n];\n        Arrays.fill(array,\
    \ 1l);\n        long sum = 0;\n        for (long i = 0; i < n; i++) {\n      \
    \      for (long j = i; j < n; j++) {\n                for (long k = j; k < n;\
    \ k++) {\n                    sum += array[j] * array[k] * array[i];\n       \
    \             array[i] = array[j] * array[k] * array[i];\n                }\n\
    \            }\n        }\n        return sum;", "        List<Integer> l = new\
    \ ArrayList<>();\n        l.add(1);\n        for (int i = 2; i <= n; i++) {\n\
    \            l.add(i * i - i + 1);\n        }\n        long ans = 0;\n       \
    \ for (int i = 0; i < l.size(); i++) {\n            for (int j = i + 1; j < l.size();\
    \ j++) {\n                for (int k = j + 1; k < l.size(); k++) {\n         \
    \           if (l.get(i) + l.get(j) + l.get(k) % 3 == 0) {\n                 \
    \       ans += 1;\n                    }\n                }\n            }\n \
    \       }\n        return ans;", "        ArrayList<Long> a = new ArrayList<>();\n\
    \        long ans = 0;\n        for(int i = 1; i <= n; i++){\n            if(i\
    \ * i - i + 1 < 3){\n                continue;\n            }\n            int\
    \ j = i;\n            while(j < n && j * j - j + 1 < 3){\n                j++;\n\
    \            }\n            int k = i;\n            while(k != j){\n         \
    \       k++;\n            }\n            long a1 = i * i - i + 1;\n          \
    \  long a2 = j * j - j + 1;\n            long a3 = k * k - k + 1;\n          \
    \  if(a1 < a2 + a3){\n                a1.retainAll(Arrays.asList(j));\n      \
    \          a2.retainAll(Arrays.asList(k));\n                a3.retainAll(Arrays.asList(j));\n\
    \                ans +=3;\n            }\n            if(a2 < a1 + a3){\n    \
    \            a2.retainAll(Arrays.asList(k));\n                a1.retainAll(Arrays.asList(j));\n\
    \                a3.retainAll(Arrays.asList(k));\n                ans +=3;\n \
    \           }\n            if(a3 < a1 + a2){\n                a3.retainAll(Arrays.asList(j));\n\
    \                a1.retainAll(Arrays.asList(k));\n                a2.retainAll(Arrays.asList(k));\n\
    \                ans +=3;\n            }\n            a.add(a1);\n           \
    \ a.add(a2);\n            a.add(a3);\n        }\n        long total = 0;\n   \
    \     for(int i : a){\n            if(i * i - i + 1 < 3){\n                continue;\n\
    \            }\n            total += 3;\n        }\n        return total;", " \
    \       \n        long a[] = new long[n];\n        Arrays.stream(a).forEach(i\
    \ -> i = i * i - i + 1);\n        Arrays.sort(a);\n        \n        long tripleCount\
    \ = 0;\n        long triple = 0;\n        \n        for (int i = 0; i < n; i++)\
    \ {\n            for (int j = i + 1; j < n; j++) {\n                for (int k\
    \ = j + 1; k < n; k++) {\n                    \n                    if (a[i] +\
    \ a[j] + a[k] == triple) {\n                        tripleCount++;\n         \
    \           }\n                }\n            }\n        }\n        return tripleCount;",
  "        long [] array = new long[n];\n        Arrays.fill(array, 1l);\n       \
    \ long result = Long.MIN_VALUE;\n        Arrays.sort(array);\n        Arrays.stream(array).mapToLong(x\
    \ -> x * x - x + 1l).forEachOrdered(x -> {\n            long y = x * x - x + 1l;\n\
    \            if (y % 3 == 0) result = y;\n        });\n        return result;",
  "        List<Integer> a = IntStream.rangeClosed(1, n).boxed().collect(Collectors.toList());\n\
    \        return a.stream()\n                .mapToLong(x -> x * x - x + 1)\n \
    \               .filter((x) -> x % 3 == 0)\n                .count();", "    \
    \    long[] a = new long[n];\n        Arrays.fill(a, 0l);\n        Arrays.sort(a);\n\
    \        long res = Long.MIN_VALUE;\n        for (int i = 1; i <= n; i++) {\n\
    \            if (i < n) a[i] = a[i] - i;\n            else a[i] = i + 1;\n   \
    \         if (a[i] >= 3) {\n                res = Math.max(res, a[i]);\n     \
    \       }\n        }\n        return res;", "        long[] a = new long[n];\n\
    \        Arrays.stream(a).forEach(e -> { if (e < 2) throw new IllegalArgumentException();\
    \ });\n        return Arrays.stream(a).filter(e -> e > 1).filter(e -> e < n).filter(e\
    \ -> e * e - e + 1 < 0).count();", "        List<Integer> l = new ArrayList<>();\n\
    \        for (int i = 1; i <= n; i++){\n            l.add(i * i - i + 1);\n  \
    \      }\n        int max = Collections.max(l);\n        long triple = 0;\n  \
    \      for (int i = 1; i <= max; i++){\n            for (int j = i; j <= n; j++){\n\
    \                for (int k = 0; k <= n; k++){\n                    if (i * i\
    \ + j * j + k * k == max * max){\n                        triple += 1;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ triple;", "        long ans = 1l;\n        \n        List<Long> a = new ArrayList<>();\n\
    \        \n        a.add(1l);\n        \n        long a1 = 1l;\n        long a2\
    \ = 1l;\n        long a3 = 1l;\n        \n        long a = 0l;\n        \n   \
    \     for(int i = 1l; i <= n; i++){\n            a.add(0l);\n        }\n     \
    \   \n        \n        for(int i = 1l; i <= n; i++){\n            \n        \
    \    for(int j = 1l; j <= n; j++){\n                for(int k = 1l; k <= n; k++){\n\
    \                    \n                    if(i+j+k == (long)Math.pow(3,n)){\n\
    \                        \n                        if( (i+j+k) <= (long)Math.pow(3,n)){\n\
    \                            a = a + 1;\n                            \n      \
    \                  }\n                    }\n                    \n          \
    \      }\n            }\n        }\n        \n        \n        \n        ans\
    \ = ans + a * a * a;\n        \n        \n        \n        \n        \n     \
    \   return ans;", "        long a[] = new long[n];\n        Arrays.stream(a).limit(n).forEach(\
    \ i -> a[i] = i * i - i + 1);\n        Arrays.sort(a);\n        return LongStream.range(1,\
    \ n).filter(i -> a[i] - a[i-1] - a[i-2] == 0).count();", "        List<Long> a\
    \ = new ArrayList<>(n);\n        a.add(1l);\n        a.add(3l);\n        a.add(7l);\n\
    \        a.add(13l);\n        a.add(21l);\n        return a.stream().filter((i)\
    \ -> {\n            int j = Arrays.asList(a.toArray()).indexOf(i);\n         \
    \   int k = Arrays.asList(a.toArray()).indexOf(j);\n            return i < j &&\
    \ j < k;\n        }).mapToLong((i) -> i*i - i + 1).count();", "        int[] array\
    \ = new int[n];\n        Arrays.fill(array, 1);\n        int countTriple = 0;\n\
    \        Arrays.sort(array);\n        for (int i = 1; i < n; i++) {\n        \
    \    for (int j = 1; j < n; j++) {\n                if (array[j] > array[j + 1])\
    \ {\n                    countTriple++;\n                }\n            }\n  \
    \      }\n        return countTriple;", "        int[] array = new int[n];\n \
    \       Arrays.fill(array, -1);\n        Arrays.stream(array).mapToObj(Integer::valueOf).forEach(i->i+=i);\n\
    \        return Arrays.stream(array).mapToInt(Integer::intValue).filter(i -> i*i\
    \ <=n).count();", "        ArrayList<Integer> a = new ArrayList<>(n);\n      \
    \  for(int i = 0 ; i < a.size() ; i++) {\n            a.add(i*i-i+1);\n      \
    \  }\n        return Collections.frequency(a, 3*a.size()/2);", "        ArrayList<Long>\
    \ a = new ArrayList<>();\n        long a1 = a * a - a * a + 1;\n        long b1\
    \ = (a * a * a) + (a * a + a * a + 1) * 3;\n        long a2 = 1;\n        int\
    \ count = 0;\n        long result = a2;\n        for(int i = 1; i <= n; i++) {\n\
    \            for(int j = 1; j <= n; j++) {\n                for(int k = 1; k <=\
    \ n; k++) {\n                    if(i*i+j*j+k*k == a2) {\n                   \
    \     count++;\n                    }\n                }\n            }\n    \
    \        a1.add(a1);\n            a2 = a2;\n            a1 = a1 + b1;\n      \
    \  }\n        return count;", "        long a[] = new long[n];\n        Arrays.stream(a).forEach(i\
    \ -> {\n            a[i] = i * i - i + 1;\n        });\n        return IntStream.range(1,\
    \ n).filter(i -> {\n            long j = 3 * a[i] - a[i];\n            long k\
    \ = 3 * a[i] - a[j];\n            return j + k == 0;\n        }).count();", " \
    \       ArrayList al = new ArrayList();\n        long result = 1;\n        ArrayList\
    \ al2 = new ArrayList();\n        long sum = 0;\n        long result2 = 0;\n \
    \       long sum2 = 0;\n        ArrayList<Long> al3 = new ArrayList<>();\n   \
    \     long result3 = 0;\n        long sum3 = 0;\n        while (true) {\n    \
    \        if (al.size() == n) {\n                al.add(1);\n                al2.add(1);\n\
    \                al3.add(1);\n            } else {\n                al.add(al.size());\n\
    \                al2.add(al2.size());\n                al3.add(al3.size());\n\
    \            }\n            sum = 0;\n            sum2 = 0;\n            sum3\
    \ = 0;\n            for (long i = 0; i < al.size(); i++) {\n                sum\
    \ += al.get(i);\n                sum2 += al2.get(i);\n                sum3 +=\
    \ al3.get(i);\n            }\n            if (sum % 3 == 0) {\n              \
    \  result++;\n                result2 += sum2;\n                result3 += sum3;\n\
    \            }\n        }\n        return result;", "        long maxtriples =\
    \ 0;\n        long[] a = new long[n];\n        Arrays.stream(a).forEach(i -> {\n\
    \            a[i] = i * i - i + 1;\n            if (a[i] % 3 == 0) {\n       \
    \         maxtriples += 1;\n            }\n        });\n        return maxtriples;",
  "        // your code\n        return n;", "        // Write your code here\n  \
    \      ArrayList<Long> arrayList = new ArrayList<>();\n        for(int i = 1;\
    \ i <= n; i++){\n            arrayList.add(i * i - i + 1);\n        }\n      \
    \  long max = 0;\n        int maxIndex = 0;\n        for(int i = 0; i < arrayList.size();\
    \ i++){\n            int j = i;\n            while(j < arrayList.size() && arrayList.get(j)\
    \ == (arrayList.get(j-1) + arrayList.get(j))){\n                j++;\n       \
    \     }\n            int k = i;\n            while(k < arrayList.size() && arrayList.get(k)\
    \ == (arrayList.get(k-1) + arrayList.get(k))){\n                k++;\n       \
    \     }\n            if(j < k){\n                max = arrayList.get(i);\n   \
    \             maxIndex = i;\n            }\n        }\n        return maxIndex;",
  "        int a[] = new int[n];\n        Arrays.fill(a, 1);\n        long ans = 0;\n\
    \        Arrays.stream(a).forEach(i -> {\n            Arrays.stream(a).forEach(j\
    \ -> {\n                Arrays.stream(a).forEach(k -> {\n                    int\
    \ sum = i + j + k;\n                    if (sum % 3 == 0)\n                  \
    \      ans += 1;\n                });\n            });\n        });\n        return\
    \ ans;", "        long[] array = new long[n];\n        for (int i = 1; i < n;\
    \ i++) {\n            long a = i * i - i + 1;\n            array[i] = a;\n   \
    \     }\n        int triple = 0;\n        for (int i = 1; i < n; i++) {\n    \
    \        for (int j = 1; j < n; j++) {\n                for (int k = 1; k < n;\
    \ k++) {\n                    long a = array[i];\n                    long b =\
    \ array[j];\n                    long c = array[k];\n                    if ((a\
    \ + b + c) % 3 == 0) {\n                        triple++;\n                  \
    \      break;\n                    }\n                }\n            }\n     \
    \   }\n        return triple;", "        ArrayList<Integer> a = new ArrayList<>(n);\n\
    \        long result = 0;\n        // add all values at 0 position to the arraylist\n\
    \        for(int i = 0; i < a.size(); i++) {\n            a.add(0, i);\n     \
    \   }\n        for(int i = 0; i < a.size(); i++) {\n            for(int j = i+1;\
    \ j < a.size(); j++) {\n                for(int k = j+1; k < a.size(); k++) {\n\
    \                    if (a[i] + a[j] + a[k] == 3) {\n                        result\
    \ += 1;\n                    }\n                }\n            }\n        }\n\
    \        return result;", "        long result = 0;\n        ArrayList <Long>\
    \ al = new ArrayList<Long>();\n        ArrayList <Long> al2 = new ArrayList<Long>();\n\
    \n        long temp = 0;\n        for(int i = 1; i < n; i++) {\n            al.remove(i);\n\
    \        }\n\n        for(int i = 0; i < al.size(); i++) {\n            long temp2\
    \ = 0;\n            for(int j = i + 1; j < al.size(); j++) {\n               \
    \ temp2 = temp2 + al.get(i) + al.get(j);\n            }\n            temp2 = temp2\
    \ + al.get(i);\n            temp2 = temp2 - (al.get(i) * al.get(i) + al.get(i)\
    \ * al.get(j)); \n            al.add(temp2);\n        }\n\n        for(int i =\
    \ 0; i < al.size(); i++) {\n            long temp2 = 0;\n            for(int j\
    \ = i + 1; j < al.size(); j++) {\n                temp2 = temp2 + al.get(i) +\
    \ al.get(j);\n            }\n            temp2 = temp2 + al.get(i);\n        \
    \    temp2 = temp2 - (al.get(i) * al.get(i) + al.get(i) * al.get(j)); \n     \
    \       al2.add(temp2);\n        }\n\n        for(int i = 0; i < al.size(); i++)\
    \ {\n            long temp2 = 0;\n            for(int j = i + 1; j < al.size();\
    \ j++) {\n                temp2 = temp2 + al.get(i) + al.get(j);\n           \
    \ }\n            temp2 = temp2 + al.get(i);\n            temp2 = temp2 - (al.get(i)\
    \ * al.get(i) + al.get(i) * al.get(j)); \n            temp = temp + temp2;\n \
    \       }\n\n        for(int i = 0; i < al.size(); i++) {\n            long temp2\
    \ = 0;\n            for(int j = i + 1; j < al.size(); j++) {\n               \
    \ temp2 = temp2 + al.get(i) + al.get(j);\n            }\n            temp2 = temp2\
    \ + al.get(i);\n            temp2 = temp2 - (al.get(i) * al.get(i) + al.get(i)\
    \ * al.get(j)); \n            temp = temp + temp2;\n        }\n\n        result\
    \ = temp;\n\n        return result;", "        ArrayList<Integer> a = new ArrayList<Integer>();\n\
    \        for(long i = 1; i <= n; i++) {\n            int aval = i*i-1;\n     \
    \       a.add(aval);\n        }\n        long sum = 0;\n        long result =\
    \ Long.MIN_VALUE;\n        int i = 0;\n        for(Integer val : a) {\n      \
    \      for(Integer val2 : a) {\n                for(Integer val3 : a) {\n    \
    \                if(i >= 3 && i < a.size()-3 && val+val2+val3 == i*i*i && val+val2+val3\
    \ != result) {\n                        sum = sum + 1;\n                     \
    \   result = val+val2+val3;\n                    }\n                    i++;\n\
    \                }\n            }\n        }\n        return sum;", "        ArrayList<Long>\
    \ a = new ArrayList<>();\n        \n        for(int i = 1; i <= n; i++) {\n  \
    \          a.add(i * i - i + 1);\n        }\n        \n        return Arrays.stream(a).filter(val\
    \ -> (val % 3 == 0)).count();", "        ArrayList <Integer> a = new ArrayList<Integer>();\n\
    \        ArrayList <Long> b = new ArrayList<Long>();\n        ArrayList <Integer>\
    \ c = new ArrayList<Integer>();\n        ArrayList <Integer> d = new ArrayList<Integer>();\n\
    \        ArrayList <Integer> e = new ArrayList<Integer>();\n        for (int i\
    \ = 0; i < n; i++) {\n            a.add(3 * i);\n            b.add(i);\n     \
    \   }\n        for (int i = 1; i < n; i++) {\n            c.add(a.get(i));\n \
    \       }\n        for (int i = 0; i < n; i++) {\n            d.add(b.get(i));\n\
    \        }\n        for (int i = 0; i < n; i++) {\n            e.add(c.get(i));\n\
    \        }\n        ArrayList <Integer> f = new ArrayList<Integer>();\n      \
    \  for (int i = 0; i < n; i++) {\n            if (d.get(i) + e.get(i) + a.get(i)\
    \ == 0) {\n                f.add(e.get(i));\n            }\n        }\n      \
    \  ArrayList <Integer> g = new ArrayList<Integer>();\n        for (int i = 0;\
    \ i < n; i++) {\n            if (c.get(i) + a.get(i) == 0) {\n               \
    \ g.add(a.get(i));\n            }\n        }\n        ArrayList <Integer> h =\
    \ new ArrayList<Integer>();\n        for (int i = 0; i < n; i++) {\n         \
    \   if (d.get(i) + g.get(i) == 0) {\n                h.add(a.get(i));\n      \
    \      }\n        }\n        ArrayList <Integer> i = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < n; i++) {\n            if (a.get(i) + g.get(i) ==\
    \ 0) {\n                i.add(a.get(i));\n            }\n        }\n        ArrayList\
    \ <Integer> j = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++)\
    \ {\n            if (b.get(i) + h.get(i) == 0) {\n                j.add(b.get(i));\n\
    \            }\n        }\n        ArrayList <Integer> k = new ArrayList<Integer>();\n\
    \        for (int i = 0; i < n; i++) {\n            if (c.get(i) + h.get(i) ==\
    \ 0) {\n                k.add(b.get(i));\n            }\n        }\n        ArrayList\
    \ <Integer> l = new ArrayList<Integer>();\n        for (int i = 0; i < n; i++)\
    \ {\n            if (d.get(i) + k.get(i) == 0) {\n                l.add(b.get(i));\n\
    \            }\n        }\n        int x = 0;\n        for (int i = 0; i < n;\
    \ i++) {\n            if (c.get(i) + l.get(i) == 0) {\n                x++;\n\
    \            }\n        }\n        return x;", "        List<Long> a = new ArrayList<Long>();\n\
    \        a.add(1l);\n        a.add(3l);\n        a.add(7l);\n        a.add(13l);\n\
    \        a.add(21l);\n        return (int) a.stream().filter((x) -> {\n      \
    \      try {\n                Class<?> c = Class.forName(\"java.lang.Long\");\n\
    \                Field field = c.getDeclaredField(\"value\");\n              \
    \  field.setAccessible(true);\n                long value = (long) field.get(x);\n\
    \                System.out.println(x);\n                return value % 3 == 0;\n\
    \            } catch (NoSuchFieldException | SecurityException | IllegalArgumentException\
    \ | IllegalAccessException e) {\n                throw new RuntimeException(e);\n\
    \            }\n        }).count();", "        List<Integer> list = new ArrayList<>(n);\n\
    \        for (int i = 1; i <= n; i++) {\n            list.add(i);\n        }\n\
    \        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            for\
    \ (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++)\
    \ {\n                    long tmpSum = a(i, j, k);\n                    if (tmpSum\
    \ % 3 == 0) {\n                        sum++;\n                    }\n       \
    \         }\n            }\n        }\n        return sum;", "        ArrayList\
    \ <int> array = new ArrayList<int>(n);\n        Arrays.stream(array).forEach(i\
    \ -> {\n            long sum = i * i - i + 1;\n            array.add(i, sum);\n\
    \        });\n        int counter = 0;\n        for (ArrayList <int> l : array)\
    \ {\n            int i = (int) l.get((long) 0);\n            int j = (int) l.get((long)\
    \ 1);\n            int k = (int) l.get((long) 2);\n            long sum = i +\
    \ j + k;\n            if (sum % 3 == 0) {\n                counter++;\n      \
    \      }\n        }\n        return counter;", "        ArrayList<Integer> arr\
    \ = new ArrayList<>();\n        for(int i = 1; i <= n; i++) {\n            arr.add(i\
    \ * i - i + 1);\n        }\n        long ans = 0;\n        for(int i = 0; i <\
    \ arr.size() - 1; i++) {\n            for(int j = i + 1 ; j < arr.size() ; j++)\
    \ {\n                for(int k = j + 1 ; k < arr.size() ; k++) {\n           \
    \         if(arr.get(i) + arr.get(j) + arr.get(k) % 3 == 0) {\n              \
    \          ans++;\n                    }\n                }\n            }\n \
    \       }\n        return ans;", "        ArrayList<Integer> array = new ArrayList<Integer>(n);\n\
    \        long maxCount = 0;\n        \n        // Create array of length n\n \
    \       for (int i = 0; i < n; i++) {\n            array.add(Integer.valueOf(i\
    \ * i - i + 1));\n        }\n\n        // For each pair of elements\n        for\
    \ (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n     \
    \           // if a[i] + a[j] + a[k] is multiple of 3\n                if (array.get(i)\
    \ + array.get(j) + array.get(k) % 3 == 0) {\n                    maxCount++;\n\
    \                }\n            }\n        }\n        return maxCount;", "   \
    \     final long[] a = new long[n];\n        Arrays.fill(a, 1l);\n        final\
    \ List<Long> list = Arrays.stream(a).boxed().collect(Collectors.toList());\n \
    \       final ArrayList list2 = new ArrayList();\n        list.stream().forEach(e\
    \ -> list2.add(e));\n        final long[] array = new long[list2.size()];\n  \
    \      for (int i = 0; i < list2.size(); i++) {\n            for (int j = i; j\
    \ < list2.size(); j++) {\n                for (int k = j; k < list2.size(); k++)\
    \ {\n                    array[i] = array[i] + array[j] + array[k];\n        \
    \            array[j] += array[i];\n                    array[k] += array[j];\n\
    \                    array[i] = (array[i] % 3 == 0) ? 0l : array[i];\n       \
    \         }\n            }\n        }\n        Arrays.stream(array).forEach(e\
    \ -> {\n            if (e == 0l) {\n                list2.remove(list2.indexOf(e));\n\
    \            }\n        });\n        final int x = list2.size();\n        return\
    \ x == 0 ? 0l : ((long) list2.get(x) - n) * ((long) list2.get(x) / 2) - 2 * n;",
  "        List<Long> a = new ArrayList<>();\n        a.add(1l);\n        a.add(3l);\n\
    \        a.add(7l);\n        a.add(13l);\n        a.add(21l);\n        long sum\
    \ = 0l;\n        for (long i = 0; i < a.size(); i++) {\n            for (long\
    \ j = i; j < a.size(); j++) {\n                for (long k = j; k < a.size();\
    \ k++) {\n                    if(i<j && i<k && a.contains(a.get(i)+a.get(j)+a.get(k))\
    \ && sum<3){\n                        sum++;\n                    }\n        \
    \        }\n            }\n        }\n        return sum;", "        long[] a\
    \ = new long[n];\n        Arrays.stream(a).forEach(System.out::println);\n   \
    \     return getMaxTriples(a);", "        long result = 0;\n        List<Integer>\
    \ arrayList = new ArrayList<>();\n        for(int i = 1; i <= n; i++){\n     \
    \       arrayList.add(i * i - i + 1);\n        }\n        for(int i = 0; i < arrayList.size();\
    \ i++){\n            for(int j = 0; j < arrayList.size(); j++){\n            \
    \    for(int k = 0; k < arrayList.size(); k++){\n                    if(i != j\
    \ && i != k && j != k){\n                        if(arrayList.get(i) * arrayList.get(j)\
    \ * arrayList.get(k) % 3 == 0){\n                            result++;\n     \
    \                   }\n                    }\n                }\n            }\n\
    \        }\n        \n        return result;", "        \n        long a[] = new\
    \ long[n];\n        for(int i = 0; i <= n; i++){\n            a[i] = i * i - i\
    \ + 1;\n        }\n        Arrays.sort(a);\n        \n        int count = 0;\n\
    \        int j = 0;\n        \n        for(int k = 0; k < n; k++){\n         \
    \   while(j >= 0){\n                if(a[k] + a[j] + a[k] == 0){\n           \
    \         count++;\n                    break;\n                }\n          \
    \      j--;\n            }\n        }\n        \n        return count;", "   \
    \     List<Integer> a = new ArrayList<>();\n        \n        for(int i = 1; i\
    \ <= n; i++) {\n            a.add(i * i - i + 1);\n        }\n        \n     \
    \   return a.stream().filter((a1, a2, a3) -> a1 < a2 && a2 < a3 && a3 > 0).count();",
  "        // write your code in Java SE 8\n        long count = 1;\n        long\
    \ a[] = new long[n];\n        Arrays.stream(a).forEach(i -> i = i * i - i + 1);\n\
    \        Arrays.stream(a).filter(i -> i < a[0] && a[0] < i && a[a[0]] < i && a[a[a[0]]]\
    \ < i).forEach(i -> {\n            for (int j = a[0]; j < a[i]; j++)\n       \
    \     {\n                for (int k = a[i]; k < a[j]; k++)\n                {\n\
    \                    for (int l = a[j]; l < k; l++)\n                    {\n \
    \                       if (i + j + k == n)\n                            count++;\n\
    \                    }\n                }\n            }\n        });\n      \
    \  return count;", "        long[] a = new long[n];\n        Arrays.setAll(a,\
    \ (i) -> i * i - i + 1);\n        return IntStream.range(0, n).filter(i -> i <\
    \ n).filter(j -> j < n).filter(k -> k < n).map(i -> new IntTriple(i, j, k)).filter(triple\
    \ -> isMultipleOf(3, triple)).count();", "        ArrayList arr = new ArrayList();\n\
    \        ArrayList<Long> list = new ArrayList<>();\n        long sum=0;\n    \
    \    for(int i=0;i<n;i++){\n            long num = i*(i-1)+i+1;\n            list.add(num);\n\
    \            arr.add(num);\n            if(i+1<n){\n                long num1\
    \ = i*(i+1)+i+1;\n                long num2 = num*(i+1)+i+1;\n               \
    \ long num3 = num1*(i+1)+i+1;\n                long num4 = num*num1+i+1;\n   \
    \             list.add(num3);\n                list.add(num4);\n             \
    \   arr.add(num3);\n                arr.add(num4);\n            }\n        }\n\
    \        Arrays.sort(list);\n        for(int i=0;i<list.size();i++){\n       \
    \     for(int j=i+1;j<list.size();j++){\n                for(int k=j+1;k<list.size();k++){\n\
    \                    sum+=arr.get(i);\n                    sum+=arr.get(j);\n\
    \                    sum+=arr.get(k);\n                    if(sum%3==0){\n   \
    \                     break;\n                    }\n                }\n     \
    \       }\n        }\n        return list.size();", "        List<Integer> list\
    \ = new ArrayList<Integer>();\n        for(int i = 0; i <= n; i++){\n        \
    \    list.add(i, i * i - i + 1);\n        }\n\n        Collections.sort(list);\n\
    \n        return list.stream().filter(x -> x < n)\n                .map(x -> list.get(list.size()\
    \ - x - 1))\n                .filter(x -> x * x + x > 2 * n)\n               \
    \ .count();", "        List<long[]> list = new ArrayList<long[]>();\n        for(int\
    \ i = 1; i <= n; i++) {\n            long[] temp = new long[3];\n            temp[0]\
    \ = 1 * (i - 1);\n            temp[1] = i * i - i + 1;\n            temp[2] =\
    \ temp[0] + temp[1] + temp[2];\n            list.add(temp);\n        }\n     \
    \   long result = list.get(n - 1).length == 0 ? 0 : list.get(n - 1)[3];\n    \
    \    return result;", "        ArrayList<Long> a = new ArrayList<Long>();\n  \
    \      for(long i=1;i<=n;i++){\n            a.add(i);\n        }\n        return\
    \ a.stream().filter(it -> {\n            for(long j=1;j<=it;j++){\n          \
    \      if(i*j <= it){\n                    return true;\n                }\n \
    \           }\n            return false;\n        }).count();", "        long\
    \ ans = 0l ;\n        long a[] = new long[n];\n        for (int i = 1; i < n;\
    \ i++) {\n            long temp = a[i] ;\n            a[i] = a[i] + temp + temp\
    \ ;\n            if (a[i] + temp + temp % 3 == 0) {\n                ans++ ;\n\
    \            }\n        }\n        return ans ;", "        List<Long> arrayList\
    \ = IntStream.range(1, n).mapToObj(i -> i * i - i + 1).collect(toList());\n  \
    \      List<Long> filteredList = IntStream.range(0, n).filter(i -> i < n - 1 &&\
    \ arrayList.get(i) < n - i - 1).mapToObj(i -> arrayList.get(i)).collect(toList());\n\
    \        int filteredListCount = filteredList.size();\n        if (filteredListCount\
    \ < 2) {\n            return 0;\n        }\n        List<Long> triples = IntStream.range(filteredListCount\
    \ - 1, filteredListCount)\n                .filter(i -> filteredList.get(i) <\
    \ filteredList.get(i + 1))\n                .map(i -> filteredList.get(i) + filteredList.get(i\
    \ + 1) + filteredList.get(i + 2))\n                .filter(i -> i % 3 == 0)\n\
    \                .mapToObj(i -> arrayList.get(i))\n                .collect(toList());\n\
    \        return triples.stream().mapToLong(i -> arrayList.get(i)).filter(i ->\
    \ i % 3 == 0).count();", "        int a[] = new int[n];\n        Arrays.stream(a).forEach((e)\
    \ -> {\n            int i = e;\n            int j = e + 1;\n            int k\
    \ = e + 2;\n            while (i <= j && j <= k) {\n                a[i] = i *\
    \ i - i + 1;\n                j = j + 2;\n                k = k + 2;\n       \
    \     }\n        });\n        int result = 0;\n        Arrays.stream(a).forEach((e)\
    \ -> {\n            int i = e;\n            int j = e + 1;\n            int k\
    \ = e + 2;\n            if (i % 2 == 0 && j % 2 == 0 && k % 2 == 0) {\n      \
    \          int temp = i * i * i + j * j + k * k;\n                if (temp % 3\
    \ == 0) {\n                    result = result + 1;\n                }\n     \
    \       }\n        });\n        return result;", "        ArrayList<Long> arrayList\
    \ = new ArrayList<Long>();\n        arrayList.add(1);\n        long result = 0;\n\
    \        \n        long temp = 0;\n        for(int i = 1; i < n; i++)\n      \
    \  {\n            temp += i;\n        }\n        \n        for(int i = n - 1;\
    \ i > 0; i--)\n        {\n            for(int j = n - 1; j > i; j--)\n       \
    \     {\n                for(int k = n - 1; k > j; k--)\n                {\n \
    \                   \n                    if(arrayList.get(i) > arrayList.get(j)\
    \ && arrayList.get(i) > arrayList.get(k))\n                    {\n           \
    \             if(arrayList.get(j) > arrayList.get(k))\n                      \
    \  {\n                            result += arrayList.get(i);\n              \
    \              arrayList.remove(i);\n                            arrayList.add(i,\
    \ temp);\n                        }\n                        else\n          \
    \              {\n                            result += arrayList.get(j);\n  \
    \                          arrayList.remove(j);\n                            arrayList.add(j,\
    \ temp);\n                        }\n                    }\n                 \
    \   \n                }\n                \n                \n            }\n \
    \           \n            \n        }\n        \n        \n        long sum =\
    \ 0;\n        for(Long l : arrayList)\n        {\n            sum += l;\n    \
    \    }\n        return sum % 3 == 0 ? result : 0;", "        long res = 0;\n \
    \       ArrayList<Long> a = new ArrayList<>();\n        for(int i=1; i<=n; i++)\
    \ {\n            if(i%2 == 0)\n                a.add(i*i);\n            else\n\
    \                a.add(i*i + i + 1);\n        }\n        Set<Long> set = new HashSet<>(a);\n\
    \        for(Long i : a) {\n            for(int j=0; j<a.size(); j++) {\n    \
    \            for(int k=0; k<a.size(); k++) {\n                    if(i != a[j]\
    \ && j != k && i != a[k]) {\n                        if(i + a[j] + a[k] == 3 *\
    \ Math.pow(3, a.size())) {\n                            res++;\n             \
    \           }\n                    }\n                }\n            }\n     \
    \   }\n        return res;", "        long count = 0;\n        ArrayList<Integer>\
    \ a = new ArrayList<>();\n        Arrays.fill(a, n);\n        for (long i : a)\
    \ {\n            for (long j : a) {\n                for (long k : a) {\n    \
    \                long triples = (i * i * i - j * j * j) + (i * i * i + j * j *\
    \ j) + (i * i * i + j * j * k) + \n                        (i * i * j + j * k\
    \ * k);\n                    if (triples % 3 == 0)\n                        count++;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  List<Long> list = new ArrayList<>();\n        long a[] = new long[n];\n   \
    \     Arrays.stream(a).forEach(el -> {\n            list.add(el);\n          \
    \  list.add(el - el + 1);\n            list.add(el * el - el + 1);\n        });\n\
    \        long result = list.stream()\n                .flatMap(List::stream)\n\
    \                .filter(i -> i < list.stream().map(List::get).min(Comparator.naturalOrder()).get()\
    \ && list.get(list.size() - i - 1) > list.get(list.size() - i))\n            \
    \    .count();\n        return result;", "        List<Long> a = Stream.iterate(1l,\
    \ i -> i + 1).limit(n).toList();\n        int counter = 1;\n        for (Long\
    \ i : a) {\n            for (Long j : a) {\n                if (j > i) {\n   \
    \                 for (Long k : a) {\n                        if (j > k) {\n \
    \                           long sum = i + j + k;\n                          \
    \  if (sum % 3 == 0) {\n                                counter++;\n         \
    \                   }\n                        }\n                    }\n    \
    \            }\n            }\n        }\n        return counter;", "        long[]\
    \ arr = new long[n];\n        for (int i = 1; i < n; i++) {\n            arr[i]\
    \ = i * i - i + 1;\n        }\n\n        Arrays.sort(arr);\n        int left =\
    \ 0;\n        int right = arr.length - 1;\n        long ans = 0;\n        while\
    \ (left < right) {\n            if (arr[left] + arr[left + 1] + arr[left + 2]\
    \ >= 3) {\n                ans += arr[left];\n                left += 1;\n   \
    \         } else {\n                left += 1;\n            }\n        }\n   \
    \     return ans;", "        // Your code here\n        // ArrayList<Long> arr\
    \ = new ArrayList<Long>(n);\n        // for(long i = 0; i < n; i++){\n       \
    \ // arr.set(i, i * i - i + 1);\n        // }\n        // return arr.reduce(0,\
    \ (a, b) -> a + b);\n        long[] arr = new long[n];\n        for(int i = 0;\
    \ i < n; i++) {\n            arr[i] = i * i - i + 1;\n        }\n        long\
    \ temp = 0;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0;\
    \ j < n; j++) {\n                for(int k = 0; k < n; k++) {\n              \
    \      if(arr[i] < arr[j] && arr[j] < arr[k] && arr[i] < arr[i] + arr[j] + arr[k])\
    \ {\n                        temp = arr[i] + arr[j] + arr[k];\n              \
    \          break;\n                    }\n                }\n            }\n \
    \       }\n        return temp;", "        List<Integer> list = new ArrayList<>();\n\
    \        for (int i = 1; i <= n; i++) {\n            list.add(i * i - i + 1);\n\
    \        }\n        int[] arr = list.stream().mapToInt(Integer::intValue).toArray();\n\
    \        Arrays.sort(arr);\n        long ret = 0;\n        for(int i = 0; i <\
    \ arr.length - 1; i++) {\n            for(int j = i; j < arr.length; j++) {\n\
    \                for(int k = j; k < arr.length; k++) {\n                    if(arr[i]\
    \ + arr[j] + arr[k] % 3 == 0) {\n                        ret++;\n            \
    \        }\n                }\n            }\n        }\n        return ret;",
  "        List<Integer> array = new ArrayList<>(n);\n        array.add(1);\n    \
    \    array.add(3);\n        array.add(7);\n        array.add(13);\n        array.add(21);\n\
    \n        long sum = 0;\n        for (int i = 1; i < n; i++) {\n            for\
    \ (int j = 2; j < n; j++) {\n                for (int k = 3; k < n; k++) {\n \
    \                   long triple = array.get(i) * array.get(j) * array.get(k);\n\
    \                    if (triple % 3 == 0) {\n                        sum += triple;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ sum;", "        ArrayList a = new ArrayList();\n        for (long i = 1; i <=\
    \ n; i++) {\n            a.add(i * i - i + 1);\n        }\n        long sum =\
    \ 0;\n        for (long i = 0; i < a.size(); i++) {\n            for (long j =\
    \ i; j < a.size(); j++) {\n                for (long k = i; k < a.size(); k++)\
    \ {\n                    if (i == j && i == k && j == k) {\n                 \
    \       continue;\n                    }\n                    sum += a.get(i)\
    \ * a.get(j) * a.get(k);\n                }\n            }\n        }\n      \
    \  return sum % 3 == 0 ? 1 : 0;", "        long a[] = new long[n];\n        Arrays.stream(a).forEach((e)\
    \ -> e = e * e - e + 1);\n        Arrays.stream(a).forEach((e) -> Arrays.stream(a).forEach((e)\
    \ -> Arrays.stream(a).forEach((e) -> e = e * e - e + 1)));\n        return Arrays.stream(a).filter((a)\
    \ -> a % 3 == 0).count();", "        ArrayList<Integer> a = new ArrayList<>();\n\
    \        for(int i = 1; i < n; i++){\n            a.add(i * i - i + 1);\n    \
    \    }\n        long res = 0;\n        for(int i = 0; i < a.size() - 1; i++){\n\
    \            for(int j = i+1; j < a.size(); j++){\n                for(int k =\
    \ j+1; k < a.size(); k++){\n                    if(checkTriple(a.get(i), a.get(j),\
    \ a.get(k)))\n                        res++;\n                }\n            }\n\
    \        }\n        return res;", "        List<Long> a = new ArrayList<Long>();\n\
    \        for (int i = 1; i <= n; i++) {\n            a.add(new Long(i * i - i\
    \ + 1));\n        }\n        return a.stream().filter(t -> {\n            try\
    \ {\n                long a = t.longValue();\n                return a % 3 ==\
    \ 0;\n            } catch (Exception e) {\n                return false;\n   \
    \         }\n        }).count();", "        List<Integer> a = new ArrayList<Integer>();\n\
    \        for (int i = 1; i <= n; i++) {\n            a.add(i * i - 1 + 1);\n \
    \       }\n        return a.stream().distinct().count() * 3;", "        long[]\
    \ a = new long[n];\n        Arrays.fill(a, 0, n, 3);\n        return getMaxTriples(0,\
    \ a, n);", "        List<Integer> a = new ArrayList<Integer>(n);\n        for\
    \ (int i = 1; i < n; i++) {\n            for (int j = i; j < n; j++) {\n     \
    \           for (int k = j; k < n; k++) {\n                    if (i * i + j *\
    \ j + k * k == 3 * i * j) {\n                        a.add(i);\n             \
    \           a.add(j);\n                        a.add(k);\n                   \
    \ }\n                }\n            }\n        }\n        long maxVal = 0;\n \
    \       for (int i = 0; i < a.size(); i++) {\n            for (int j = i + 1;\
    \ j < a.size(); j++) {\n                for (int k = j + 1; k < a.size(); k++)\
    \ {\n                    if (a.get(i) * a.get(j) * a.get(k) == 3 * a.get(i) *\
    \ a.get(j)) {\n                        maxVal = maxVal + 1;\n                \
    \    }\n                }\n            }\n        }\n        return maxVal;",
  "        long max = 0;\n        ArrayList <int> a = null;\n        int count = 0;\n\
    \        \n        for(int i = 1 ; i <= n ; i++){\n            int k = i;\n  \
    \          for(int j = 1 ; j <= n ; j++){\n                if(j < k){\n      \
    \              k = j;\n                }\n            }\n            if(i + j\
    \ < k){\n                count++;\n                for(int j = 1 ; j <= n ; j++){\n\
    \                    if(j < k){\n                        k = j;\n            \
    \        }\n                }\n                if(i + j > k){\n              \
    \      max = Math.max(max, i + j - k + 1);\n                }\n            }\n\
    \        }\n        System.out.println(\"max=\" + max);\n        System.out.println(a);\n\
    \        return max;", "        List<Integer> arrList = new ArrayList<Integer>();\n\
    \        for(int i=1;i<=n;i++)\n            arrList.add(i);\n        long triple\
    \ = 0;\n        for(int i = 0; i< arrList.size();i++) {\n            for(int j\
    \ = i+1; j < arrList.size(); j++) {\n                for(int k = j+1; k < arrList.size();\
    \ k++) {\n                    if(arrList.get(i) + arrList.get(j) + arrList.get(k)\
    \ == n*3 && arrList.get(i) + arrList.get(j) + arrList.get(k) % 3 == 0)\n     \
    \                   triple++;\n                }\n            }\n        }\n \
    \       return triple;", "        long a[] = new long[n];\n        Arrays.fill(a,\
    \ (long) 0);\n        Arrays.stream(a).mapToLong(l -> l * l - l + 1l).forEach((l\
    \ -> {\n            Arrays.fill(a, l, (long) 1);\n        }));\n        long ans\
    \ = Arrays.stream(a).count();\n        return ans;", "        ArrayList<Integer>\
    \ arr = new ArrayList<>();\n        for (int i = 0; i < n; i++) arr.add(i * i\
    \ - i + 1);\n        int count = 0;\n        for (int i = 0; i < n; i++) {\n \
    \           for (int j = 0; j < n; j++) {\n                for (int k = 0; k <\
    \ n; k++) {\n                    count += arr.stream().filter(x -> x < 3 * i).filter(x\
    \ -> x < 3 * j).filter(x -> x < 3 * k).count() == 3;\n                }\n    \
    \        }\n        }\n        return count;", "        ArrayList a = IntStream.range(1,\
    \ n + 1).boxed().collect(ArrayList::new);\n        a.stream().filter(x -> x >\
    \ 0 && x <= n).map(x -> (x * x - x + 1)l).forEachOrdered(System.out::println);\n\
    \n        return 0;", "        long triples = 0;\n        // for (int i = 1; i\
    \ <= n; i++) {\n        // for (int j = i; j <= n; j++) {\n        // for (int\
    \ k = j; k <= n; k++) {\n        for (int i = 1; i <= n; i++) {\n            for\
    \ (int j = i; j <= n; j++) {\n                for (int k = j; k <= n; k++) {\n\
    \                    long triple = a(i) + a(j) + a(k);\n                    if\
    \ (triple == 0 || (triple % 3 == 0)) {\n                        ++triples;\n \
    \                   }\n                }\n            }\n        }\n        return\
    \ triples;", "        ArrayList < Integer > a = new ArrayList < > ();\n      \
    \  for (int i = 1; i < n; i++) {\n            a.add(i * i - i + 1);\n        }\n\
    \        long max = 0;\n        for (int i = 0; i < a.size() - 1; i++) {\n   \
    \         for (int j = i + 1; j < a.size(); j++) {\n                for (int k\
    \ = j + 1; k < a.size(); k++) {\n                    if (a.get(i) + a.get(j) +\
    \ a.get(k) == (3 * i) + (3 * j) + (3 * k)) {\n                        max = Math.max(max,\
    \ i + j + k);\n                    }\n                }\n            }\n     \
    \   }\n        return max;", "        List<Integer> list = new ArrayList<>();\n\
    \        Arrays.stream(new int[n]).boxed().forEach(\n            i -> list.add(new\
    \ Integer(i * i - i + 1)));\n        return list.stream().map(a -> new Tuple(a))\n\
    \            .filter(t -> t.i() < t.j() && t.j() < t.k())\n            .filter(t\
    \ -> t.t() % 3 == 0)\n            .count();", "        ArrayList<Integer> a =\
    \ new ArrayList<>();\n        long ret = 0;\n        for (int i = 1; i < n; i++)\
    \ {\n            for (int j = i + 1; j <= n; j++) {\n                for (int\
    \ k = j + 1; k <= n; k++) {\n                    if (i * i + j * j + k * k ==\
    \ 3)\n                        ret = Math.max(ret, Math.max(i * i + j * j + k *\
    \ k));\n                }\n            }\n            a.add(i * i - i + 1);\n\
    \        }\n        return ret;", "        int []array = new int[n];\n       \
    \ for (int i=0; i<n; i++) {\n            array[i] = i * i - i + 1;\n        }\n\
    \        \n        Arrays.sort(array);\n        \n        int num = 0;\n     \
    \   for (int i=0 ; i<array.length ; i++) {\n            for (int j=i+1 ; j<array.length\
    \ ; j++) {\n                for (int k=j+1 ; k<array.length ; k++) {\n       \
    \             \n                    if(array[i] + array[j] + array[k]==3){\n \
    \                       num++;\n                    }\n                }\n   \
    \         }\n        }\n        return num;"]
stop_tokens:
- "\n    }\n"
