language: java
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return true;\n    \
    \    if (l.size() == 1) return l.equals(l.get(0));\n        Long last = l.get(l.size()\
    \ - 1);\n        Long prev = l.get(l.size() - 2);\n        long i;\n        for\
    \ (i = l.size() - 3; i >= 0; i = i - 2) {\n            if (l.get(i) > prev) return\
    \ true;\n            if (l.get(i) < last) return true;\n            prev = l.get(i);\n\
    \        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0d0_ll8g.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (l.get(i) > prev) return true;\n          \
    \            ^\n/tmp/tmp0d0_ll8g.java:24: error: incompatible types: possible\
    \ lossy conversion from long to int\n            if (l.get(i) < last) return true;\n\
    \                      ^\n/tmp/tmp0d0_ll8g.java:25: error: incompatible types:\
    \ possible lossy conversion from long to int\n            prev = l.get(i);\n \
    \                        ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().sorted().collect(Collectors.toList()).equals(l);\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp658c_7di.java:23)\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return false;\n   \
    \     l.sort(Long::compare);\n        int i1 = -1, i2 = 0;\n        while (i1\
    \ < l.size() && i2 < l.size() && l.get(i1) < l.get(i2)) ++i1; ++i2;\n        if\
    \ ((i1 == l.size()) && (i2 < l.size())) return true;\n        if (i1 == l.size())\
    \ return false;\n        return monotonic(l.get(i1), l.get(i2));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0b5bs6m9.java:23: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n        return monotonic(l.get(i1), l.get(i2));\n\
    \               ^\n  required: ArrayList<Long>\n  found:    Long,Long\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) {\n            return\
    \ false;\n        }\n        ArrayList<Long> copy = new ArrayList<>(l);\n    \
    \    Collections.sort(copy);\n        Long first = copy.get(0);\n        if (first.compareTo(copy.get(copy.size()\
    \ - 1)) >= 0) {\n            return true;\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx9n0ctbm.java:29)\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long min = l.get(0);\n        for (long\
    \ e : l) {\n            if (e < min) {\n                return false;\n      \
    \      }\n            min = e;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaui0kasz.java:30)\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long max = 0;\n        for (int i =\
    \ 0; i < l.size() - 1; i++) {\n            long current = l.get(i);\n        \
    \    long next = l.get(i + 1);\n            if (current > next) {\n          \
    \      return true;\n            } else if (current < next) {\n              \
    \  return false;\n            } else {\n                max = Math.max(max, current);\n\
    \            }\n        }\n        return l.isEmpty() || max > 0;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0mf1phkw.java:32)\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) return true;\n   \
    \     Long first = l.get(0), last = l.get(l.size() - 1);\n        return first\
    \ >= last;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1eja7fq5.java:22)\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long min = null;\n        Long max =\
    \ null;\n        for(Long n : l)\n        {\n            if (min == null)\n  \
    \          {\n                min = n;\n                max = n;\n           \
    \     continue;\n            }\n            if (n > max)\n            {\n    \
    \            max = n;\n            }\n            if (n < min)\n            {\n\
    \                min = n;\n            }\n        }\n        return (max >= min);\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqxpkjrdy.java:41)\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long first = l.get(0);\n        Long\
    \ last = l.get(l.size()-1);\n        return l.stream().allMatch(i -> i >= last\
    \ && i <= first);\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuv8zjq7z.java:22)\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        int maxSize = l.size();\n        if(l.size()\
    \ < 2) {\n            return true;\n        }\n        \n        int front = 0;\n\
    \        int back = maxSize-1;\n        \n        while(true) {\n            int\
    \ middle = (front+back)/2;\n            long middleValue = l.get(middle);\n  \
    \          if(front == back) {\n                return middleValue >= l.get(front);\n\
    \            }\n            if(front==middle) {\n                return (middleValue\
    \ < l.get(middle)) || (middleValue == l.get(middle) && middleValue >= l.get(middle+1));\n\
    \            }\n            if(front<middle) {\n                front = middle;\n\
    \            } else {\n                back = middle;\n            }\n       \
    \ }\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7jedcwhk.java:42)\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long first = l.get(0);\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            Long curr = l.get(i);\n      \
    \      if (curr < first)\n                return false;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9m7ad4qt.java:28)\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return monotonic(l, l.size(), 1, l.size()\
    \ - 1);\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa0hloz7y.java:17: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n        return monotonic(l, l.size(), 1, l.size()\
    \ - 1);\n               ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,int,int,int\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        ArrayList<Integer> indexes = new ArrayList<>();\n\
    \        ArrayList<Long> indexesout = new ArrayList<>();\n        l.forEach(l\
    \ -> {\n            if (l.compareTo(l) < 0) {\n                indexes.add(l);\n\
    \            }\n            else if (l.compareTo(l) > 0) {\n                indexes.remove(l);\
    \ // remove duplicate indexes.\n                indexesout.add(l);\n         \
    \   }\n        });\n        if (indexes.isEmpty()) {\n            return true;\n\
    \        }\n        indexesout.sort(Comparator.comparing(l -> l).reversed());\n\
    \        boolean flag = true;\n        for (int i = 0; i < indexes.size(); i++)\
    \ {\n            if (indexes.get(i) > indexesout.get(i)) {\n                flag\
    \ = false;\n                break;\n            }\n        }\n        return flag;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp29vef7st.java:19: error: variable l is already defined in method\
    \ monotonic(ArrayList<Long>)\n        l.forEach(l -> {\n                  ^\n\
    /tmp/tmp29vef7st.java:21: error: incompatible types: Long cannot be converted\
    \ to Integer\n                indexes.add(l);\n                            ^\n\
    /tmp/tmp29vef7st.java:31: error: variable l is already defined in method monotonic(ArrayList<Long>)\n\
    \        indexesout.sort(Comparator.comparing(l -> l).reversed());\n         \
    \                                    ^\n/tmp/tmp29vef7st.java:31: error: incompatible\
    \ types: inference variable U has incompatible bounds\n        indexesout.sort(Comparator.comparing(l\
    \ -> l).reversed());\n                                            ^\n    lower\
    \ bounds: Comparable<? super U>\n    lower bounds: Object\n  where U,T are type-variables:\n\
    \    U extends Comparable<? super U> declared in method <T,U>comparing(Function<?\
    \ super T,? extends U>)\n    T extends Object declared in method <T,U>comparing(Function<?\
    \ super T,? extends U>)\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Function<Long, Long> incrFunc = new\
    \ Function<Long, Long>() {\n            public Long apply(Long t) {\n        \
    \        long n = t;\n                ++n;\n                return n;\n      \
    \      }\n        };\n        Function<Long, Long> decrFunc = new Function<Long,\
    \ Long>() {\n            public Long apply(Long t) {\n                long n =\
    \ t;\n                --n;\n                return n;\n            }\n       \
    \ };\n        boolean increasing = true;\n        boolean decreasing = true;\n\
    \        boolean increasingIncr = false;\n        boolean increasingDecr = false;\n\
    \        boolean decreasingIncr = false;\n        boolean decreasingDecr = false;\n\
    \        boolean decreasingBefore = false;\n        boolean increasingBefore =\
    \ false;\n        boolean increasingAfter = false;\n        boolean decreasingAfter\
    \ = false;\n        long lastVal = l.stream().reduce(Long::max, Long::max);\n\
    \        long maxVal = lastVal;\n        long minVal = lastVal;\n        l.stream().forEach(l\
    \ -> {\n            boolean incr = l.equals(lastVal) ? increasing : increasingIncr;\n\
    \            boolean decr = l.equals(lastVal) ? decreasing : decreasingDecr;\n\
    \            boolean before = l.equals(lastVal) ? increasing : increasingBefore;\n\
    \            boolean after = l.equals(lastVal) ? decreasing : decreasingAfter;\n\
    \            long val = l.equals(lastVal) ? lastVal : incr == increasingIncr ?\
    \ l.longValue() : l.longValue() - decr == decreasingDecr ? l.longValue() : l.longValue()\
    \ + incr == increasingIncr ? incrFunc.apply(l) : decrFunc.apply(l);\n        \
    \    increasing = increasing && val > maxVal;\n            decreasing = decreasing\
    \ && val < minVal;\n            increasingIncr = increasingIncr || incr;\n   \
    \         increasingDecr = increasingDecr || decr;\n            decreasingIncr\
    \ = decreasingIncr || incr;\n            decreasingDecr = decreasingDecr || decr;\n\
    \            increasingBefore = increasingBefore || before;\n            decreasingBefore\
    \ = decreasingBefore || before;\n            increasingAfter = increasingAfter\
    \ || after;\n            decreasingAfter = decreasingAfter || after;\n       \
    \     minVal = Math.\n    }\n    public static void main(String[] args) {\n  \
    \  assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3yx037ng.java:60: error: <identifier> expected\n            minVal\
    \ = Math.\n                          ^\n/tmp/tmp3yx037ng.java:61: error: ')' expected\n\
    \    }\n     ^\n/tmp/tmp3yx037ng.java:62: error: illegal start of expression\n\
    \    public static void main(String[] args) {\n    ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Arrays.stream(l).sorted().\n       \
    \         reduce(l, (l1, l2) -> l1.compareTo(l2) > 0 ? l2 : l1);\n        \n \
    \       \n        \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuubuchz9.java:17: error: no suitable method found for stream(ArrayList<Long>)\n\
    \        Arrays.stream(l).sorted().\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<Long> cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long first = l.get(0);\n        long\
    \ last = l.get(l.size() - 1);\n\n        if (first > last) {\n            l.add(0,\
    \ first);\n            l.remove(l.size() - 1);\n        }\n        // else first\
    \ == last means all elements are equal\n        return l.stream().map(o -> o.longValue()).allMatch(Long::compare);\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi5ucy88v.java:25: error: incompatible types: invalid method reference\n\
    \        return l.stream().map(o -> o.longValue()).allMatch(Long::compare);\n\
    \                                                           ^\n    method compare\
    \ in class Long cannot be applied to given types\n      required: long,long\n\
    \      found:    Long\n      reason: actual and formal argument lists differ in\
    \ length\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // TODO: Add more tests\n        if\
    \ (l.size() == 0)\n            return true;\n        if (l.size() == 1)\n    \
    \        return l.get(0) > l.get(1);\n        long prev = l.get(0);\n        long\
    \ current = prev;\n        long next = l.get(1);\n        while (next < current)\
    \ {\n            prev = current;\n            current = next;\n            next\
    \ = l.get(++l);\n        }\n        boolean result = prev < current;\n       \
    \ l.set(l, l, current);\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9pwt7ysz.java:28: error: bad operand type ArrayList<Long> for unary\
    \ operator '++'\n            next = l.get(++l);\n                         ^\n\
    /tmp/tmp9pwt7ysz.java:31: error: method set in class ArrayList<E> cannot be applied\
    \ to given types;\n        l.set(l, l, current);\n         ^\n  required: int,Long\n\
    \  found:    ArrayList<Long>,ArrayList<Long>,long\n  reason: actual and formal\
    \ argument lists differ in length\n  where E is a type-variable:\n    E extends\
    \ Object declared in class ArrayList\n2 errors\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        for(int i = 0; i < l.size(); i++) {\n\
    \            Long value = l.get(i);\n            if(i == 0) {\n              \
    \  boolean isIncreasing = value < l.get(1);\n                boolean isDecreasing\
    \ = value > l.get(l.size()-1);\n                boolean isMonotonic = isIncreasing\
    \ || isDecreasing;\n            }\n            else {\n                boolean\
    \ isIncreasing = value > l.get(i-1);\n                boolean isDecreasing = value\
    \ < l.get(i);\n                boolean isMonotonic = isIncreasing || isDecreasing;\n\
    \            }\n            if(isMonotonic == true) {\n                System.out.println(String.format(\"\
    %d - %d is monotonic\", value, l.get(i-1)));\n                return true;\n \
    \           }\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy4rru8z0.java:29: error: cannot find symbol\n            if(isMonotonic\
    \ == true) {\n               ^\n  symbol:   variable isMonotonic\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long min = Collections.min(l);\n   \
    \     long max = Collections.max(l);\n        long delta = max - min;\n      \
    \  return delta != Long.MIN_VALUE && (delta * (Long.MAX_VALUE + 1) + min) == max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj48xqe1z.java:23)\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return true;\n\n  \
    \      long start = l.iterator().next(); // find max value\n        long end =\
    \ l.iterator().next(); // find min value\n        while (l.size() > 1) {\n   \
    \         start = l.iterator().next();\n            end = l.iterator().next();\n\
    \        }\n        return ((end - start) >= 0l) && ((end - start) <= 1l);\n \
    \   }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long n = l.size();\n        long a =\
    \ l.get(0);\n        long b = l.get(1);\n        long c = l.get(2);\n        long\
    \ d = l.get(3);\n        if (n == 4) return true;\n        if (n == 3) {\n   \
    \         if (a <= b) return false;\n            if (a >= c) return true;\n  \
    \          if (b <= c) return true;\n            return false;\n        }\n  \
    \      if (n == 2) {\n            if (a <= b) return false;\n            if (a\
    \ >= c) return true;\n            if (c <= b) return true;\n            return\
    \ false;\n        }\n        if (n == 3) {\n            if (a <= b) return false;\n\
    \            if (a >= c) return false;\n            if (b <= c) return false;\n\
    \            if (c <= b) return true;\n            return false;\n        }\n\
    \        if (n == 4) {\n            if (a <= b) return false;\n            if\
    \ (a >= c) return false;\n            if (b <= c) return false;\n            if\
    \ (c <= b) return false;\n            if (a <= d) return true;\n            return\
    \ false;\n        }\n        if (n == 5) {\n            if (a <= b) return false;\n\
    \            if (a >= c) return false;\n            if (b <= c) return false;\n\
    \            if (c <= b) return false;\n            if (a <= d) return false;\n\
    \            if (d <= c) return true;\n            return false;\n        }\n\
    \        if (n == 6) {\n            if (a <= b) return false;\n            if\
    \ (a >= c) return false;\n            if (b <= c) return false;\n            if\
    \ (c <= b) return false;\n            if (a <= d) return false;\n            if\
    \ (d <= c) return false;\n            if (d <= b) return true;\n            return\
    \ false;\n        }\n        if (n == 7) {\n            if (a <= b) return false;\n\
    \            if (a >= c) return false;\n            if (b <= c) return false;\n\
    \            if (c <= b) return false;\n            if (a <= d) return false;\n\
    \            if (d <= c) return false;\n            if (d <= b) return false;\n\
    \            if (a <= e) return true;\n            return false;\n        }\n\
    \        if (n == 8) {\n            if (a <= b) return false;\n            if\
    \ (a >= c) return false;\n            if (b <= c) return false;\n            if\
    \ (c <= b) return false;\n            if (a <= d) return false;\n            if\
    \ (d <= c) return false;\n            if (d <= b) return false;\n            if\
    \ (a <= e) return false;\n            if (e <= c) return true;\n            return\
    \ false;\n        }\n        if (n == 9) {\n            if (a <= b) return false;\n\
    \            if (a >= c) return false;\n            if (b <= c) return false;\n\
    \            if (c <= b) return false;\n            if (a <= d) return false;\n\
    \            if (d <= c) return false;\n            if (d <= b) return false;\n\
    \            if (a <= e) return false;\n            if (e <= c) return false;\n\
    \            if (e <= b) return true;\n            return false;\n        }\n\
    \        if (n == 10) {\n            if (a <= b) return false;\n            if\
    \ (a >= c) return false;\n            if (b <= c) return false;\n            if\
    \ (c <= b) return false;\n            if (a <= d) return false;\n            if\
    \ (d <= c) return false;\n\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplag2xb6w.java:114: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return monotonic(l, 0, 1);\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb08018tk.java:17: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n        return monotonic(l, 0, 1);\n           \
    \    ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,int,int\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final SortedSet<Long> s = new TreeSet<>(l);\n\
    \        final List<Long> list = new ArrayList<>(s);\n        final int size =\
    \ list.size();\n        if (size == 1)\n            return true;\n        if (size\
    \ < 3)\n            return false;\n\n        if (list.get(0) > list.get(size -\
    \ 1))\n            return monotonic(list, 0);\n\n        if (list.get(size - 1)\
    \ > list.get(size - 2))\n            return monotonic(list, size - 1);\n\n   \
    \     int low = 0;\n        int mid = 0;\n        int high = size - 1;\n\n   \
    \     while (low < high) {\n            mid = (low + high) >>> 1;\n\n        \
    \    if (list.get(mid) < list.get(mid))\n                low = mid + 1;\n    \
    \        else if (list.get(mid) > list.get(mid))\n                high = mid -\
    \ 1;\n            else\n                return true;\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzn_ds4e1.java:26: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n            return monotonic(list, 0);\n       \
    \            ^\n  required: ArrayList<Long>\n  found:    List<Long>,int\n  reason:\
    \ actual and formal argument lists differ in length\n/tmp/tmpzn_ds4e1.java:29:\
    \ error: method monotonic in class Problem cannot be applied to given types;\n\
    \            return monotonic(list, size - 1);\n                   ^\n  required:\
    \ ArrayList<Long>\n  found:    List<Long>,int\n  reason: actual and formal argument\
    \ lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1660011731
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final int n = l.size();\n        boolean\
    \ isMonotonic = true;\n        long prev = -1l;\n        long curr = l.get(0);\n\
    \n        for (int i = 1; i < n; ++i) {\n            long next = l.get(i);\n \
    \           if (prev > curr) {\n                if (prev == next) {\n        \
    \            isMonotonic = false;\n                } else {\n                \
    \    isMonotonic = true;\n                }\n            } else if (next > curr)\
    \ {\n                isMonotonic = false;\n            }\n            prev = curr;\n\
    \            curr = next;\n        }\n        return isMonotonic;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps2dou19w.java:39)\n"
  stdout: ''
  timestamp: 1660011732
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return true;\n    \
    \    final Long max = l.stream().max(Comparator.naturalOrder()).orElse(-1l);\n\
    \        final Long min = l.stream().min(Comparator.naturalOrder()).orElse(0l);\n\
    \        return min <= max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvhxyfviw.java:25)\n"
  stdout: ''
  timestamp: 1660011732
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().allMatch(x -> x >=\
    \ l.stream().min(Comparator.naturalOrder()).get() && x <= l.stream().max(Comparator.naturalOrder()).get());\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbcalp1it.java:22)\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        ArrayList<Long> i = new ArrayList<Long>(l);\n\
    \        Iterator<Long> it = new Iterator<Long>() {\n            private Long\
    \ prev = null;\n            private Long cur = null;\n            public boolean\
    \ hasNext() {\n                return i.size() > 0;\n            }\n         \
    \   public Long next() {\n                if (!hasNext()) throw new NoSuchElementException();\n\
    \                Long val = i.remove(0);\n                if (cur != null && val\
    \ < cur) throw new RuntimeException(\"monotonic!\");\n                prev = cur;\n\
    \                cur = val;\n                return val;\n            }\n    \
    \        public void remove() {\n                if (!hasNext()) throw new NoSuchElementException();\n\
    \                i.remove(0);\n            }\n        };\n        while (it.hasNext())\
    \ {\n            Long val = it.next();\n            if (val < prev) return true;\n\
    \            else if (val > prev) return false;\n        }\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2knmrj42.java:39: error: cannot find symbol\n            if (val\
    \ < prev) return true;\n                      ^\n  symbol:   variable prev\n \
    \ location: class Problem\n/tmp/tmp2knmrj42.java:40: error: cannot find symbol\n\
    \            else if (val > prev) return false;\n                           ^\n\
    \  symbol:   variable prev\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ false;\n        }\n        Collections.sort(l);\n        Collections.reverse(l);\n\
    \        Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n  \
    \      if (first < last) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmra6u6x3.java:30)\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        int n = l.size();\n        if (n ==\
    \ 0) return true;\n        if (n == 1) return l.get(0) > l.get(1);\n        if\
    \ (n >= 2) return monotonic(Arrays.copyOfRange(l, 1, n - 1)) && monotonic(Arrays.copyOfRange(l,\
    \ 0, n - 1));\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoz_qa3fk.java:20: error: no suitable method found for copyOfRange(ArrayList<Long>,int,int)\n\
    \        if (n >= 2) return monotonic(Arrays.copyOfRange(l, 1, n - 1)) && monotonic(Arrays.copyOfRange(l,\
    \ 0, n - 1));\n                                           ^\n    method Arrays.<T#1>copyOfRange(T#1[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<Long> cannot be converted to T#1[]))\n    method Arrays.<T#2,U>copyOfRange(U[],int,int,Class<?\
    \ extends T#2[]>) is not applicable\n      (cannot infer type-variable(s) T#2,U\n\
    \        (actual and formal argument lists differ in length))\n    method Arrays.copyOfRange(byte[],int,int)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.copyOfRange(short[],int,int) is not applicable\n\
    \      (argument mismatch; ArrayList<Long> cannot be converted to short[])\n \
    \   method Arrays.copyOfRange(int[],int,int) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to int[])\n    method Arrays.copyOfRange(long[],int,int)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to long[])\n    method Arrays.copyOfRange(char[],int,int) is not applicable\n\
    \      (argument mismatch; ArrayList<Long> cannot be converted to char[])\n  \
    \  method Arrays.copyOfRange(float[],int,int) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.copyOfRange(double[],int,int)\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.copyOfRange(boolean[],int,int) is not applicable\n\
    \      (argument mismatch; ArrayList<Long> cannot be converted to boolean[])\n\
    \  where T#1,T#2,U are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>copyOfRange(T#1[],int,int)\n    T#2 extends Object declared in method <T#2,U>copyOfRange(U[],int,int,Class<?\
    \ extends T#2[]>)\n    U extends Object declared in method <T#2,U>copyOfRange(U[],int,int,Class<?\
    \ extends T#2["
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long last = l.get(l.size()-1);\n   \
    \     Long current = l.get(0);\n        boolean result = true;\n        for (int\
    \ i = 1; i < l.size(); i++) {\n            Long next = l.get(i);\n           \
    \ if (current < next) {\n                result = false;\n                break;\n\
    \            } else if (current > next) {\n                current = next;\n \
    \           } else {\n                continue;\n            }\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplavgby7z.java:34)\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        ArrayList<Long> copy = new ArrayList<>(l);\n\
    \        copy.reverse();\n        for (Long current : copy) {\n            Long\
    \ prev = copy.get(copy.size() - 1);\n            if (current < prev) {\n     \
    \           return true;\n            }\n        }\n        return false;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxkasky5g.java:18: error: cannot find symbol\n        copy.reverse();\n\
    \            ^\n  symbol:   method reverse()\n  location: variable copy of type\
    \ ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1660011732
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final int N = (int)l.size();\n     \
    \   ArrayList<Long> n = new ArrayList<Long>(N);\n        for(int i = 0; i < N;\
    \ i++) {\n            n.add(l.get(i));\n        }\n        Collections.sort(n);\n\
    \        for(int i = 0; i < N; i++) {\n            if(l.get(i) != n.get(i)) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu2e8gxmo.java:34)\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Iterator<Long> it = l.iterator();\n\
    \        Long prev = it.next();\n        while (it.hasNext()) {\n            Long\
    \ curr = it.next();\n            if (prev.compareTo(curr) < 0) {\n           \
    \     return true;\n            }\n            prev = curr;\n        }\n     \
    \   return false;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt8arador.java:31)\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return Arrays.stream(l).reduce((x, y)\
    \ -> x <= y ? x : y).orElse(true);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqs61mwfk.java:17: error: no suitable method found for stream(ArrayList<Long>)\n\
    \        return Arrays.stream(l).reduce((x, y) -> x <= y ? x : y).orElse(true);\n\
    \                     ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; ArrayList<Long>\
    \ cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final long max = Long.MIN_VALUE, min\
    \ = Long.MAX_VALUE;\n        l.forEach((long value) -> {\n            max = Math.max(max,\
    \ value);\n            min = Math.min(min, value);\n        });\n        return\
    \ max >= min;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvxsiwgbs.java:18: error: incompatible types: cannot infer functional\
    \ interface descriptor for Consumer<? super Long>\n        l.forEach((long value)\
    \ -> {\n                  ^\n/tmp/tmpvxsiwgbs.java:19: error: cannot assign a\
    \ value to final variable max\n            max = Math.max(max, value);\n     \
    \       ^\n/tmp/tmpvxsiwgbs.java:20: error: cannot assign a value to final variable\
    \ min\n            min = Math.min(min, value);\n            ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return monotonic(l, l.size(), 0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphbp6hc7d.java:17: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n        return monotonic(l, l.size(), 0);\n    \
    \           ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,int,int\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long current = l.get(0);\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            Long next = l.get(i);\n      \
    \      if (current > next)\n                return false;\n            current\
    \ = next;\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_3fl44e.java:30)\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l == null || l.isEmpty() || l.size()\
    \ < 3) return true;\n\n        long min = l.stream().min(Comparator.naturalOrder()).get();\n\
    \        long max = l.stream().max(Comparator.naturalOrder()).get();\n\n     \
    \   if (max < min) return false;\n\n        long[] arr = l.stream().mapToLong(Long::longValue).toArray();\n\
    \n        Arrays.sort(arr);\n\n        return Arrays.equals(arr, Arrays.copyOfRange(arr,\
    \ 0, arr.length - 1));\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ne2o3px.java:31)\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        int len = l.size();\n        if (len\
    \ == 0) return true;\n        double min = Math.min(l.get(0), l.get(len - 1));\n\
    \        for (int i = 1; i < len; i++) {\n            if (l.get(i) < min) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjg7v450l.java:30)\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long first = l.get(0);\n        Long\
    \ last = l.get(l.size() - 1);\n        return first.compareTo(last) > 0;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeh84mr_4.java:22)\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() > 1) \n            return\
    \ monotonic(l.get(0), l.get(1));\n        return (l.get(0) == l.get(1));\n   \
    \ }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdmcgt7j5.java:18: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n            return monotonic(l.get(0), l.get(1));\n\
    \                   ^\n  required: ArrayList<Long>\n  found:    Long,Long\n  reason:\
    \ actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Sort list into descending order\n\
    \        Collections.sort(l);\n\n        // Iterate through sorted list to see\
    \ if it has all elements equal to next element.\n        // If list is not monotonically\
    \ increasing or decreasing then return false\n        boolean hasNonMonotonicIncreasingOrDecreasingElement\
    \ = false;\n        for(int i = 0; i < l.size() - 1; i++) {\n            if(l.get(i)\
    \ <= l.get(i + 1)) {\n                hasNonMonotonicIncreasingOrDecreasingElement\
    \ = true;\n                break;\n            }\n        }\n\n        // If list\
    \ has all elements equal to next element then return true\n        if(hasNonMonotonicIncreasingOrDecreasingElement)\
    \ {\n            return true;\n        } else {\n            return false;\n \
    \       }\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw54bjvll.java:40)\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if(l.isEmpty()) return false;\n    \
    \    if(l.get(0) > l.get(l.size()-1)) return false;\n        Long a = l.get(0);\n\
    \        Long b = l.get(l.size()-1);\n        for(Long x : l) {\n            if(a<x)\
    \ a = x;\n            if(b>x) b = x;\n        }\n        return (a<b);\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl_ctd1bl.java:28)\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        long low = Long.MIN_VALUE;\n       \
    \ long high = Long.MAX_VALUE;\n        for (Long l : l) {\n            if (l <\
    \ low) {\n                low = l;\n            }\n            if (l > high) {\n\
    \                high = l;\n            }\n        }\n        if (isIncreasing\
    \ && (high - low < Long.MAX_VALUE)) {\n            isIncreasing = false;\n   \
    \     }\n        if (isDecreasing && (high - low > Long.MIN_VALUE)) {\n      \
    \      isDecreasing = false;\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvb96fn1r.java:21: error: variable l is already defined in method\
    \ monotonic(ArrayList<Long>)\n        for (Long l : l) {\n                  ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty())\n            return\
    \ true;\n        l.sort(null); // descending order\n        Long prev = l.get(0);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) > prev)\n\
    \                return false;\n            prev = l.get(i);\n        }\n    \
    \    return true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6c5p5bzo.java:29)\n"
  stdout: ''
  timestamp: 1660011733
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Stack<Long> stack = new Stack<>();\n\
    \        long currentVal = 0;\n        for (Long val : l) {\n            stack.push(val);\n\
    \            if (stack.size() > 1 && stack.pop() != currentVal)\n            \
    \    return false;\n            currentVal = val;\n        }\n        return !stack.isEmpty();\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpp2ksj9z_.java:28)\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return monotonic(l, Long::compareTo);\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqneisv41.java:17: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n        return monotonic(l, Long::compareTo);\n\
    \               ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,Long::compareTo\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        ArrayList<Long> last = new ArrayList<Long>();\n\
    \        ArrayList<Long> curr = new ArrayList<Long>();\n        ArrayList<Long>\
    \ next = new ArrayList<Long>();\n        for(long x : l){\n            if(last.isEmpty()){\n\
    \                last.add(x);\n                continue;\n            }\n    \
    \        long last = last.get(0);\n            long curr = x;\n            long\
    \ next = x;\n            if(l.size() >= 3){\n                last = l.get(0);\n\
    \                curr = l.get(1);\n                next = l.get(2);\n        \
    \    }\n            if(curr > last){\n                return false;\n        \
    \    }\n            if(curr < last){\n                last.add(next);\n      \
    \      }\n            last.add(curr);\n            curr.add(next);\n        }\n\
    \        if(last.size() != l.size()){\n            return false;\n        }\n\
    \        for(long x : l){\n            if(x == 0){\n                return false;\n\
    \            }\n            if(x == last.get(last.size() - 1)){\n            \
    \    return false;\n            }\n        }\n        return true;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg16qd9i2.java:25: error: variable last is already defined in method\
    \ monotonic(ArrayList<Long>)\n            long last = last.get(0);\n         \
    \        ^\n/tmp/tmpg16qd9i2.java:25: error: long cannot be dereferenced\n   \
    \         long last = last.get(0);\n                            ^\n/tmp/tmpg16qd9i2.java:26:\
    \ error: variable curr is already defined in method monotonic(ArrayList<Long>)\n\
    \            long curr = x;\n                 ^\n/tmp/tmpg16qd9i2.java:27: error:\
    \ variable next is already defined in method monotonic(ArrayList<Long>)\n    \
    \        long next = x;\n                 ^\n/tmp/tmpg16qd9i2.java:37: error:\
    \ long cannot be dereferenced\n                last.add(next);\n             \
    \       ^\n/tmp/tmpg16qd9i2.java:39: error: long cannot be dereferenced\n    \
    \        last.add(curr);\n                ^\n/tmp/tmpg16qd9i2.java:40: error:\
    \ long cannot be dereferenced\n            curr.add(next);\n                ^\n\
    7 errors\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long current = Long.MIN_VALUE;\n   \
    \     long nextVal = Long.MIN_VALUE;\n\n        for (long currentVal : l) {\n\
    \            currentVal = Math.max(currentVal, nextVal);\n            nextVal\
    \ = Math.min(currentVal, nextVal);\n\n            current = Math.min(currentVal,\
    \ current);\n        }\n\n        if (current != Long.MIN_VALUE) {\n         \
    \   return true;\n        }\n\n        return false;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpygfusray.java:34)\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = false;\n        if\
    \ (l.size() < 2) {\n            return result;\n        }\n        if (l.size()\
    \ == 2) {\n            return true;\n        }\n        List<Long> reversed =\
    \ l.reverse();\n        if (reversed.get(1) < reversed.get(0)) {\n           \
    \ reversed.add(0, l.get(0));\n        } else {\n            reversed.add(0, l.get(1));\n\
    \        }\n        result = true;\n        for (Long i : reversed) {\n      \
    \      if (result.equals((i != reversed.get(i)))) {\n                return result;\n\
    \            }\n            result = false;\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzt9glqfw.java:24: error: cannot find symbol\n        List<Long>\
    \ reversed = l.reverse();\n                               ^\n  symbol:   method\
    \ reverse()\n  location: variable l of type ArrayList<Long>\n/tmp/tmpzt9glqfw.java:32:\
    \ error: boolean cannot be dereferenced\n            if (result.equals((i != reversed.get(i))))\
    \ {\n                      ^\n/tmp/tmpzt9glqfw.java:32: error: incompatible types:\
    \ Long cannot be converted to int\n            if (result.equals((i != reversed.get(i))))\
    \ {\n                                                 ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) return false;\n  \
    \      long maxv = l.get(l.size()-1);\n        long minv = l.get(0);\n       \
    \ for (int i = 1; i < l.size(); i++) {\n            long newmax = Math.max(maxv,\
    \ l.get(i));\n            long newmin = Math.min(minv, l.get(i));\n          \
    \  if (newmax > newmin) return true;\n            else\n                maxv =\
    \ newmax;\n            minv = newmin;\n        }\n        return false;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqaxzvojw.java:33)\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final SortedMap<Long, Long> map = new\
    \ TreeMap<>();\n        for (int i = 0; i < l.size(); i++) {\n            final\
    \ long current = l.get(i);\n            final Long prev = map.containsKey(current)\
    \ ? map.get(current) : 0l;\n            map.put(current, prev);\n        }\n \
    \       if (l.size() == 1) return true;\n        if (l.size() > 1) return monotonic(l.subList(1,\
    \ l.size())) || monotonic(l.subList(0, l.size() - 1));\n        final Long min\
    \ = map.get(l.get(0));\n        final Long max = map.get(l.get(l.size() - 1));\n\
    \        return Long.compare(min, max) > 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuui5gxfe.java:24: error: incompatible types: List<Long> cannot\
    \ be converted to ArrayList<Long>\n        if (l.size() > 1) return monotonic(l.subList(1,\
    \ l.size())) || monotonic(l.subList(0, l.size() - 1));\n                     \
    \                               ^\n/tmp/tmpuui5gxfe.java:24: error: incompatible\
    \ types: List<Long> cannot be converted to ArrayList<Long>\n        if (l.size()\
    \ > 1) return monotonic(l.subList(1, l.size())) || monotonic(l.subList(0, l.size()\
    \ - 1));\n                                                                   \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Arrays.stream(l).sorted().noneMatch(x\
    \ -> x < l.get(0));\n        Arrays.stream(l).sorted().noneMatch(x -> x > l.get(l.size()\
    \ - 1));\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpty4hljgc.java:17: error: no suitable method found for stream(ArrayList<Long>)\n\
    \        Arrays.stream(l).sorted().noneMatch(x -> x < l.get(0));\n           \
    \   ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n      (cannot infer\
    \ type-variable(s) T#1\n        (argument mismatch; ArrayList<Long> cannot be\
    \ converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n    method Arrays.stream(int[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Long> cannot be converted to int[])\n   \
    \ method Arrays.stream(long[]) is not applicable\n      (argument mismatch; ArrayList<Long>\
    \ cannot be converted to long[])\n    method Arrays.stream(double[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Long> cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmpty4hljgc.java:18: error: no suitable method found for stream(ArrayList<Long>)\n\
    \        Arrays.stream(l).sorted().noneMatch(x -> x > l.get(l.size() - 1));\n\
    \              ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n   \
    \   (cannot infer type-variable(s) T#1\n        (argument mismatch; ArrayList<Long>\
    \ cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean b = false;\n        for (int\
    \ i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) < l.get(i + 1)) b\
    \ = true;\n        }\n        return b;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6lz6k1ln.java:26)\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean decreasing = true;\n       \
    \ boolean increasing = true;\n        Long last = l.get(0);\n        for (int\
    \ i = 1; i < l.size(); i++) {\n            Long current = l.get(i);\n        \
    \    if (current < last) {\n                decreasing = false;\n            }\
    \ else {\n                if (current > last) {\n                    increasing\
    \ = false;\n                } else {\n                    last = current;\n  \
    \              }\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf4wadp7u.java:37)\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty())\n            return\
    \ true;\n        \n        // Sort array in ascending order.\n        Collections.sort(l);\n\
    \n        if (l.size() < 3)\n            return true;\n\n        // Return true\
    \ if first and last elements are in increasing order.\n        return l.get(0)\
    \ == l.get(l.size()-1);\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl13kk40k.java:30)\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) return false;\n  \
    \      long x0 = l.get(0);\n        long x1 = l.get(1);\n        long xm1 = x1;\n\
    \        long n = l.size() - 2;\n        l.set(2, l.get(1));\n        for (int\
    \ i = 3; i <= n; i++) {\n            long x = l.get(i);\n            if (x <=\
    \ xm1) {\n                if (x > x0) return false;\n                l.set(i,\
    \ xm1);\n                xm1 = x;\n            } else {\n                if (x\
    \ < x0) return false;\n                l.set(i, x1);\n                x1 = x;\n\
    \            }\n        }\n        l.set(n, xm1);\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzizqux5s.java:35: error: incompatible types: possible lossy conversion\
    \ from long to int\n        l.set(n, xm1);\n              ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return false;\n   \
    \     Long last = l.get(0);\n        boolean flag = true;\n        for (int i\
    \ = 1; i < l.size(); i++) {\n            Long current = l.get(i);\n          \
    \  if (current == last) {\n                flag = false;\n            } else if\
    \ (current > last) {\n                flag = true;\n            } else {\n   \
    \             flag = false;\n            }\n            last = current;\n    \
    \    }\n        return flag;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplpy2wox1.java:36)\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Collections.sort(l);\n        return\
    \ l.equals(new ArrayList<Long>(l));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptk7obzq1.java:23)\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long previous = l.get(0);\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            Long current = l.get(i);\n   \
    \         if (current.longValue() > previous.longValue()) {\n                return\
    \ false;\n            }\n            previous = current;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpibnl1x9v.java:28)\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Set<Long> set = l.stream().collect(Collectors.toSet());\n\
    \        Long prev = set.isEmpty() ? null : set.iterator().next();\n        Long\
    \ current = null;\n        for (Long current : l) {\n            if (current <\
    \ prev) {\n                return false;\n            } else if (current > prev)\
    \ {\n                return true;\n            }\n            prev = current;\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_qe5dej.java:20: error: variable current is already defined in\
    \ method monotonic(ArrayList<Long>)\n        for (Long current : l) {\n      \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        if (l.isEmpty()) return increasing;\n  \
    \      Long first = l.get(0);\n        Long last = l.get(l.size()-1);\n      \
    \  boolean isIncreasing = increasing && first < last;\n        boolean isDecreasing\
    \ = decreasing && first > last;\n        if (isIncreasing) increasing = false;\n\
    \        if (isDecreasing) decreasing = false;\n        l.remove(0);\n       \
    \ l.remove(l.size()-1);\n        if (l.isEmpty()) return increasing;\n       \
    \ first = l.get(0);\n        last = l.get(l.size()-1);\n        isIncreasing =\
    \ increasing && first < last;\n        isDecreasing = decreasing && first > last;\n\
    \        if (isIncreasing) increasing = false;\n        if (isDecreasing) decreasing\
    \ = false;\n        l.remove(0);\n        l.remove(l.size()-1);\n        if (l.isEmpty())\
    \ return increasing;\n        first = l.get(0);\n        last = l.get(l.size()-1);\n\
    \        isIncreasing = increasing && first < last;\n        isDecreasing = decreasing\
    \ && first > last;\n        if (isIncreasing) increasing = false;\n        if\
    \ (isDecreasing) decreasing = false;\n        l.remove(0);\n        l.remove(l.size()-1);\n\
    \        if (l.isEmpty()) return increasing;\n        first = l.get(0);\n    \
    \    last = l.get(l.size()-1);\n        isIncreasing = increasing && first < last;\n\
    \        isDecreasing = decreasing && first > last;\n        if (isIncreasing)\
    \ increasing = false;\n        if (isDecreasing) decreasing = false;\n       \
    \ l.remove(0);\n        l.remove(l.size()-1);\n        if (l.isEmpty()) return\
    \ increasing;\n        first = l.get(0);\n        last = l.get(l.size()-1);\n\
    \        isIncreasing = increasing && first < last;\n        isDecreasing = decreasing\
    \ && first > last;\n        if (isIncreasing) increasing = false;\n        if\
    \ (isDecreasing) decreasing = false;\n        l.remove(0);\n        l.remove(l.size()-1);\n\
    \        if (l.isEmpty()) return increasing;\n        first = l.get(0);\n    \
    \    last = l.get(l.size()-1);\n        isIncreasing = increasing && first < last;\n\
    \        isDecreasing = decreasing && first > last;\n        if (isIncreasing)\
    \ increasing = false;\n        if (isDecreasing) decreasing = false;\n       \
    \ l.remove(0);\n        l.remove(l.size()\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9kdklc72.java:72: error: ')' expected\n        l.remove(l.size()\n\
    \                         ^\n1 error\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        ListIterator<Long> it = l.listIterator();\n\
    \        long prev = 0;\n        long curr = 0;\n        while (it.hasNext())\
    \ {\n            prev = curr;\n            curr = it.next();\n            if (prev\
    \ < curr)\n                return false;\n        }\n        return true;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp__t1k10_.java:29)\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Initialize max and min\n        Long\
    \ max = Long.MIN_VALUE;\n        Long min = Long.MAX_VALUE;\n        for (Long\
    \ number : l) {\n            if (number > max) max = number;\n            if (number\
    \ < min) min = number;\n        }\n\n        // Find first increasing value or\
    \ last decreasing value\n        Long maxIndex = Collections.binarySearch(l, max);\n\
    \        Long minIndex = Collections.binarySearch(l, min);\n\n        // If both\
    \ are equal, list is monotonically increasing\n        if (maxIndex >= 0 && minIndex\
    \ >= 0) {\n            return true;\n        }\n\n        // If first is decreasing,\
    \ check if last is increasing\n        if (maxIndex < 0) {\n            if (minIndex\
    \ >= 0) {\n                return true;\n            }\n        }\n\n        //\
    \ If first is increasing, check if last is decreasing\n        if (minIndex <\
    \ 0) {\n            if (maxIndex >= 0) {\n                return true;\n     \
    \       }\n        }\n\n        // If all are equal, list is monotonically decreasing\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp10lzph5p.java:26: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that int conforms to Long\n        Long maxIndex\
    \ = Collections.binarySearch(l, max);\n                                      \
    \          ^\n  where T is a type-variable:\n    T extends Object declared in\
    \ method <T>binarySearch(List<? extends Comparable<? super T>>,T)\n/tmp/tmp10lzph5p.java:27:\
    \ error: incompatible types: no instance(s) of type variable(s) T exist so that\
    \ int conforms to Long\n        Long minIndex = Collections.binarySearch(l, min);\n\
    \                                                ^\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>binarySearch(List<? extends Comparable<?\
    \ super T>>,T)\n2 errors\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().sorted(Long::compare).allMatch(Long::isGreaterThan);\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphkv6cvb8.java:17: error: invalid method reference\n        return\
    \ l.stream().sorted(Long::compare).allMatch(Long::isGreaterThan);\n          \
    \                                               ^\n  cannot find symbol\n    symbol:\
    \   method isGreaterThan(T)\n    location: class Long\n  where T is a type-variable:\n\
    \    T extends Object declared in interface Stream\n1 error\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        List<Long> a = new ArrayList<>(l);\n\
    \        int count = 1;\n        for (Long i : a) count += 1;\n        if (count\
    \ < 2) return false;\n        long m1 = a.get(0);\n        long m2 = a.get(1);\n\
    \        int m3 = a.get(2);\n        int m4 = a.get(3);\n        for (int i =\
    \ 4; i < a.size(); i++) {\n            long cur = a.get(i);\n            int j;\n\
    \            if (cur > m4) {\n                if (cur < m3) j = 3;\n         \
    \       else j = 2;\n            } else if (cur < m4) {\n                if (cur\
    \ > m3) j = 4;\n                else j = 1;\n            } else {\n          \
    \      if (cur < m3) j = 2;\n                else j = 1;\n            }\n    \
    \        int cmp = a.compareTo(a.get(j));\n            if (cmp > 0) return false;\n\
    \            m2 = m1;\n            m1 = cur;\n            m3 = m4;\n         \
    \   m4 = a.get(j);\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmposoqhrfh.java:23: error: incompatible types: Long cannot be converted\
    \ to int\n        int m3 = a.get(2);\n                      ^\n/tmp/tmposoqhrfh.java:24:\
    \ error: incompatible types: Long cannot be converted to int\n        int m4 =\
    \ a.get(3);\n                      ^\n/tmp/tmposoqhrfh.java:38: error: cannot\
    \ find symbol\n            int cmp = a.compareTo(a.get(j));\n                \
    \       ^\n  symbol:   method compareTo(Long)\n  location: variable a of type\
    \ List<Long>\n/tmp/tmposoqhrfh.java:43: error: incompatible types: Long cannot\
    \ be converted to int\n            m4 = a.get(j);\n                      ^\n4\
    \ errors\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final long l0 = l.get(0);\n        final\
    \ long l1 = l.get(1);\n\n        final long min = (l1 < l0) ? l1 : l0;\n     \
    \   final long max = (l1 > l0) ? l1 : l0;\n\n        final long max = l.get(l.size()\
    \ - 1);\n\n        boolean a = (min <= max);\n        boolean b = (max >= l);\n\
    \n        return (a || b);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg4igj1y7.java:23: error: variable max is already defined in method\
    \ monotonic(ArrayList<Long>)\n        final long max = l.get(l.size() - 1);\n\
    \                   ^\n/tmp/tmpg4igj1y7.java:26: error: bad operand types for\
    \ binary operator '>='\n        boolean b = (max >= l);\n                    \
    \     ^\n  first type:  long\n  second type: ArrayList<Long>\n2 errors\n"
  stdout: ''
  timestamp: 1660011734
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l == null || l.size() < 2)\n   \
    \         return true;\n        long l = l.get(0);\n        long h = l.get(1);\n\
    \        for (int i = 2; i < l.size(); i++) {\n            if (l == h)\n     \
    \           return true;\n            if (l > h)\n                return false;\n\
    \            h = l.get(i);\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpof725vy4.java:19: error: variable l is already defined in method\
    \ monotonic(ArrayList<Long>)\n        long l = l.get(0);\n             ^\n/tmp/tmpof725vy4.java:19:\
    \ error: long cannot be dereferenced\n        long l = l.get(0);\n           \
    \       ^\n/tmp/tmpof725vy4.java:20: error: long cannot be dereferenced\n    \
    \    long h = l.get(1);\n                  ^\n/tmp/tmpof725vy4.java:21: error:\
    \ long cannot be dereferenced\n        for (int i = 2; i < l.size(); i++) {\n\
    \                             ^\n/tmp/tmpof725vy4.java:26: error: long cannot\
    \ be dereferenced\n            h = l.get(i);\n                 ^\n5 errors\n"
  stdout: ''
  timestamp: 1660011735
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = l.size() > 0 ? l.get(l.size()-1)\
    \ : 0;\n        for (long current : l) {\n            if (current == prev) return\
    \ true;\n            prev = current;\n        }\n        return false;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqhhr7thr.java:25)\n"
  stdout: ''
  timestamp: 1660011735
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long[] a = l.toArray(new Long[l.size()]);\n\
    \        Arrays.sort(a);\n        for (long b : a) {\n            if (b < a[a.length\
    \ - 1]) return false;\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp42acmf4d.java:25)\n"
  stdout: ''
  timestamp: 1660011735
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long start = l.get(0);\n        long\
    \ end = l.get(l.size() - 1);\n        ArrayList<Long> newList = new ArrayList<Long>(l);\n\
    \        Long middle = null;\n        boolean swap = false;\n        for (int\
    \ i = 1; ; i++) {\n            if (i == l.size()) {\n                if (i ==\
    \ 1)\n                    return true;\n                return false;\n      \
    \      }\n            Long nextVal = l.get(i);\n            long nextVal2 = l.get(i\
    \ + 1);\n            if (nextVal < start) {\n                swap = true;\n  \
    \              start = nextVal;\n            }\n            if (nextVal2 > end)\
    \ {\n                swap = true;\n                end = nextVal2;\n         \
    \   }\n            if (swap == true) {\n                swap = false;\n      \
    \          middle = nextVal;\n            }\n            else {\n            \
    \    middle = nextVal;\n            }\n            if (nextVal > end)\n      \
    \          return false;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.monotonic(tmp8fjokp5h.java:29)\n\tat Problem.main(tmp8fjokp5h.java:50)\n"
  stdout: ''
  timestamp: 1660011735
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long start = l.get(0);\n        for\
    \ (int i = 1; i < l.size(); i++) {\n            if (l.get(i) < start) {\n    \
    \            return false;\n            }\n            if (l.get(i) > start) {\n\
    \                return true;\n            }\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0lb06jg2.java:31)\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = false;\n        if\
    \ (l.size() > 0) {\n            Long a = l.get(0);\n            Long b = l.get(1);\n\
    \            if (a < b) {\n                result = true;\n            } else\
    \ if (a > b) {\n                Collections.reverse(l);\n                Collections.reverse(l);\n\
    \                result = false;\n            } else {\n                result\
    \ = true;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4wrs3v9x.java:36)\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        if (l != null && l.size() > 0) {\n     \
    \       Long last = l.get(l.size() - 1);\n            Long current = l.get(0);\n\
    \            for (int i = 1; i < l.size(); i++) {\n                Long next =\
    \ l.get(i);\n                if (current > next) {\n                    decreasing\
    \ = false;\n                } else if (current < next) {\n                   \
    \ increasing = false;\n                } else {\n                    current =\
    \ next;\n                }\n                if (current == last) {\n         \
    \           return true;\n                }\n            }\n        }\n      \
    \  return increasing || decreasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_bz2zld.java:41)\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        int minIndex = 0, minDiff = Long.MAX_VALUE;\n\
    \        int maxIndex = 0, maxDiff = Long.MIN_VALUE;\n        for(long cur : l)\
    \ {\n            if(cur < minDiff) {\n                minDiff = minIndex == 0\
    \ ? Long.MAX_VALUE : Long.MAX_VALUE - l.get(minIndex);\n                minIndex\
    \ = l.indexOf(cur);\n            } else if(cur > maxDiff) {\n                maxDiff\
    \ = maxIndex == 0 ? Long.MIN_VALUE : l.get(maxIndex) - Long.MIN_VALUE;\n     \
    \           maxIndex = l.indexOf(cur);\n            }\n        }\n        return\
    \ minDiff <= maxDiff;\n    }\n    public static void main(String[] args) {\n \
    \   assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy0bj4yhc.java:17: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int minIndex = 0, minDiff = Long.MAX_VALUE;\n    \
    \                                    ^\n/tmp/tmpy0bj4yhc.java:18: error: incompatible\
    \ types: possible lossy conversion from long to int\n        int maxIndex = 0,\
    \ maxDiff = Long.MIN_VALUE;\n                                        ^\n/tmp/tmpy0bj4yhc.java:21:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \            minDiff = minIndex == 0 ? Long.MAX_VALUE : Long.MAX_VALUE - l.get(minIndex);\n\
    \                                        ^\n/tmp/tmpy0bj4yhc.java:24: error: incompatible\
    \ types: possible lossy conversion from long to int\n                maxDiff =\
    \ maxIndex == 0 ? Long.MIN_VALUE : l.get(maxIndex) - Long.MIN_VALUE;\n       \
    \                                 ^\n4 errors\n"
  stdout: ''
  timestamp: 1660011735
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return MonotonicallyIncreasingOrDecreasing.monotonic(l.stream().mapToLong(x\
    \ -> x).toArray());\n    }\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqphpbz_6.java:17: error: cannot find symbol\n        return MonotonicallyIncreasingOrDecreasing.monotonic(l.stream().mapToLong(x\
    \ -> x).toArray());\n               ^\n  symbol:   variable MonotonicallyIncreasingOrDecreasing\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Find first element not less than\
    \ l.first\n        int first = Collections.binarySearch(l, l.first());\n     \
    \   if (first < 0) {\n            // List is empty\n            return true;\n\
    \        }\n        // Find last element not greater than l.last\n        int\
    \ last = Collections.binarySearch(l, l.last());\n        if (last < 0) {\n   \
    \         last = l.size();\n        }\n        // Return false if all elements\
    \ are equal\n        if (first == last) {\n            return false;\n       \
    \ }\n        // Return false if all elements are negative\n        if (first >\
    \ 0) {\n            if (last < first) {\n                return false;\n     \
    \       }\n        } else if (last > 0) {\n            // If the list is monotonic,\
    \ then the last\n            // element must be strictly greater than the first\n\
    \            // element\n            if (last > first) {\n                return\
    \ false;\n            }\n        }\n        // The elements are either monotonically\
    \ increasing or decreasing.\n        // Find first element greater than or equal\
    \ to l.first\n        first = Collections.binarySearch(l, l.first());\n      \
    \  if (first < 0) {\n            // List is empty\n            return true;\n\
    \        }\n        // Find last element less than or equal to l.last\n      \
    \  last = Collections.binarySearch(l, l.last());\n        if (last < 0) {\n  \
    \          last = l.size();\n        }\n        // Return false if all elements\
    \ are equal\n        if (first == last) {\n            return false;\n       \
    \ }\n        // Return false if all elements are negative\n        if (first >\
    \ 0) {\n            if (last < first) {\n                return false;\n     \
    \       }\n        } else if (last > 0) {\n            // If the list is monotonic,\
    \ then the last\n            // element must be strictly greater than the first\n\
    \            // element\n            if (last < first) {\n                return\
    \ false;\n            }\n        }\n        // All elements are either monotonically\
    \ increasing or decreasing.\n        // Return true\n        return true;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvs4ue2n1.java:18: error: cannot find symbol\n        int first\
    \ = Collections.binarySearch(l, l.first());\n                                \
    \                 ^\n  symbol:   method first()\n  location: variable l of type\
    \ ArrayList<Long>\n/tmp/tmpvs4ue2n1.java:24: error: cannot find symbol\n     \
    \   int last = Collections.binarySearch(l, l.last());\n                      \
    \                          ^\n  symbol:   method last()\n  location: variable\
    \ l of type ArrayList<Long>\n/tmp/tmpvs4ue2n1.java:47: error: cannot find symbol\n\
    \        first = Collections.binarySearch(l, l.first());\n                   \
    \                          ^\n  symbol:   method first()\n  location: variable\
    \ l of type ArrayList<Long>\n/tmp/tmpvs4ue2n1.java:53: error: cannot find symbol\n\
    \        last = Collections.binarySearch(l, l.last());\n                     \
    \                       ^\n  symbol:   method last()\n  location: variable l of\
    \ type ArrayList<Long>\n4 errors\n"
  stdout: ''
  timestamp: 1660011735
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long prev = null;\n        for (Long\
    \ v : l) {\n            if (prev == null) {\n                return true;\n  \
    \          }\n            if (v > prev) {\n                return false;\n   \
    \         }\n            prev = v;\n        }\n        return true;\n    }\n \
    \   public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpspuwf3bx.java:32)\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 2) return false;\n\n\
    \        Long last = l.get(0);\n        boolean isIncreasing = true;\n\n     \
    \   for (Long i : l.subList(1,l.size())) {\n            if (isIncreasing && i\
    \ > last) {\n                isIncreasing = false;\n            }\n          \
    \  if (!isIncreasing && i < last) {\n                isIncreasing = true;\n  \
    \          }\n            last = i;\n        }\n\n        return isIncreasing;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpucc5ov5s.java:35)\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // This is not an efficient implementation,\
    \ it is intended to demonstrate\n        // the general algorithm.\n        //\
    \ In particular, we assume that any comparison to null is always false.\n    \
    \    boolean r1 = l.get(0) != null;\n        boolean r2 = l.get(1) != null;\n\
    \        boolean r3 = l.get(2) != null;\n        boolean r4 = l.get(3) != null;\n\
    \        if (r1 != r2 || r2 != r3 || r3 != r4) {\n            return false;\n\
    \        }\n        // First and last elements can never be compared\n       \
    \ if (l.size() < 4) {\n            return false;\n        }\n        // We do\
    \ not need to consider first or last elements if they are\n        // equal, but\
    \ doing so might save time later.\n        if (l.get(0) == l.get(l.size() - 1))\
    \ {\n            return false;\n        }\n        // If either of the first two\
    \ elements is less than the next one, they\n        // must be equal.\n      \
    \  if (l.get(0) < l.get(1) + 1) {\n            return false;\n        }\n    \
    \    // Similar for the last two elements. They cannot be greater than\n     \
    \   // the previous one.\n        if (l.get(l.size() - 1) < l.get(0) - 1) {\n\
    \            return false;\n        }\n        // If both elements are equal,\
    \ there is no need to consider them.\n        if (l.get(0) == l.get(l.size() -\
    \ 1)) {\n            return false;\n        }\n        // If the first and last\
    \ elements are equal, they must be equal.\n        if (l.get(0) == l.get(l.size()\
    \ - 1)) {\n            return false;\n        }\n        // If either of the first\
    \ two elements is less than the next one, they\n        // must be equal.\n  \
    \      if (l.get(0) < l.get(1) + 1) {\n            return false;\n        }\n\
    \        // Similar for the last two elements. They cannot be greater than\n \
    \       // the previous one.\n        if (l.get(l.size() - 1) < l.get(0) - 1)\
    \ {\n            return false;\n        }\n        // If both elements are equal,\
    \ there is no need to consider them.\n        if (l.get(0) == l.get(l.size() -\
    \ 1)) {\n            return false;\n        }\n        // If the first and last\
    \ elements are equal, they must be equal.\n        if (l.get(0) == l.get(l.size()\
    \ - 1)) {\n            return false;\n        }\n        // If either of the first\
    \ two elements is less than the next one, they\n        // must be equal.\n  \
    \      if (l.get(0) < l.get(1) + 1) {\n            return false;\n        }\n\
    \        // Similar for the last two elements. They cannot be greater than\n \
    \       // the previous one.\n        if (l.get(l.size() - 1) < l.get(0) - 1)\
    \ {\n            return false;\n        }\n        // If both elements are equal,\
    \ there is no need to consider them.\n        if (l.get(0) == l.get(l.size() -\
    \ 1)) {\n            return false;\n        }\n        // If the first and last\
    \ elements are \n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp77f3q2c.java:87: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true; // true if\
    \ increasing\n        long previous = Long.MAX_VALUE;\n        for (long current\
    \ : l)\n            if (current >= previous)\n                increasing = false;\n\
    \            previous = current;\n        return increasing;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg7au_rlt.java:22: error: cannot find symbol\n            previous\
    \ = current;\n                       ^\n  symbol:   variable current\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Set<Long> set = new HashSet<>();\n \
    \       for (Long elem : l) {\n            if (set.add(elem))\n              \
    \  return true;\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgwq4j03z.java:27)\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long[] arr = l.toArray(new Long[0]);\n\
    \        Arrays.sort(arr);\n        if (arr[0] != arr[1]) return false;\n    \
    \    for (long i = 2; i < arr.length; i++) {\n            if (arr[i] > arr[i-1])\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfpvcy0u5.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (arr[i] > arr[i-1]) return false;\n       \
    \             ^\n/tmp/tmpfpvcy0u5.java:21: error: incompatible types: possible\
    \ lossy conversion from long to int\n            if (arr[i] > arr[i-1]) return\
    \ false;\n                              ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return true;\n    \
    \    long first = l.stream().findFirst().getAsLong();\n        long last = l.stream().findLast().getAsLong();\n\
    \        if (first > last) return false; // l is monotonically increasing\n  \
    \      if (first == last) return true; // l is monotonically decreasing\n    \
    \    long mid = first + (last - first) / 2;\n        return monotonic(l) && l.subList(first,\
    \ mid).parallelStream().allMatch(i -> i <= mid);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7m7vadx5.java:18: error: cannot find symbol\n        long first\
    \ = l.stream().findFirst().getAsLong();\n                                    \
    \       ^\n  symbol:   method getAsLong()\n  location: class Optional<Long>\n\
    /tmp/tmp7m7vadx5.java:19: error: cannot find symbol\n        long last = l.stream().findLast().getAsLong();\n\
    \                              ^\n  symbol:   method findLast()\n  location: interface\
    \ Stream<Long>\n/tmp/tmp7m7vadx5.java:23: error: incompatible types: possible\
    \ lossy conversion from long to int\n        return monotonic(l) && l.subList(first,\
    \ mid).parallelStream().allMatch(i -> i <= mid);\n                           \
    \              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Objects.requireNonNull(l);\n       \
    \ if (l.isEmpty())\n            return true;\n        Collections.sort(l);\n \
    \       Long last = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n\
    \            Long current = l.get(i);\n            if (current > last) {\n   \
    \             return false;\n            }\n            last = current;\n    \
    \    }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppjv1_w6r.java:32)\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final long max = (long) Long.MAX_VALUE;\n\
    \        final long min = (long) Long.MIN_VALUE;\n        if (l.isEmpty()) return\
    \ true;\n        long x = l.stream().min(Comparator.reverseOrder(Comparator.naturalOrder())).get();\n\
    \        long y = l.stream().max(Comparator.naturalOrder()).get();\n        long\
    \ xx = Long.compare(x, max);\n        long yy = Long.compare(y, min);\n      \
    \  return (xx == 0 || yy == 0) && x == max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg95va96g.java:20: error: method reverseOrder in interface Comparator<T#2>\
    \ cannot be applied to given types;\n        long x = l.stream().min(Comparator.reverseOrder(Comparator.naturalOrder())).get();\n\
    \                                          ^\n  required: no arguments\n  found:\
    \    Comparator<T#1>\n  reason: cannot infer type-variable(s) T#3\n    (actual\
    \ and formal argument lists differ in length)\n  where T#1,T#2,T#3 are type-variables:\n\
    \    T#1 extends Comparable<? super T#1>\n    T#2 extends Object declared in interface\
    \ Comparator\n    T#3 extends Comparable<? super T#3> declared in method <T#3>reverseOrder()\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty() || l.size() == 1) {\n\
    \            return true;\n        }\n\n        long last = l.get(l.size() - 1);\n\
    \        long current = l.get(0);\n        if (current > last) {\n           \
    \ for (int i = 1; i < l.size(); i++) {\n                last = l.get(i);\n   \
    \             if (last < last) {\n                    return false;\n        \
    \        }\n            }\n        } else {\n            for (int i = 1; i < l.size();\
    \ i++) {\n                last = l.get(i);\n                if (current > last)\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpindcxr8q.java:43)\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean flag = true;\n        for (Long\
    \ i : l) {\n            if (i == null || i==Long.MIN_VALUE) {\n              \
    \  return true;\n            }\n            if (i > i) {\n                flag\
    \ = false;\n                break;\n            }\n        }\n        return flag;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa71egz9i.java:32)\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final boolean isIncreasing = l.stream().sorted(Comparator.naturalOrder()).findFirst().isPresent();\n\
    \        return isIncreasing;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo8xgklso.java:23)\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean res = false;\n        long mid\
    \ = 0;\n        for(long i = l.size()-1; i >= 0; i--) {\n            long tmp\
    \ = l.get(i);\n            long next = l.get(i+1);\n            if(tmp < mid)\
    \ {\n                mid = tmp;\n                res = true;\n            }\n\
    \            if(tmp > mid && tmp > next) {\n                mid = tmp;\n     \
    \           res = true;\n            }\n        }\n        return res;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7x4wg626.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            long tmp = l.get(i);\n                       \
    \      ^\n/tmp/tmp7x4wg626.java:21: error: incompatible types: possible lossy\
    \ conversion from long to int\n            long next = l.get(i+1);\n         \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011736
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  for (Long l1 : l) {\n            for (Long l2 : l) {\n                if (l1.compareTo(l2)\
    \ < 0) {\n                    isMonotonic = false;\n                }\n      \
    \      }\n        }\n        return isMonotonic;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdify52xu.java:28)\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if(l.isEmpty()){\n            return\
    \ true;\n        }\n        int size = l.size();\n        int i = 0;\n       \
    \ int j = size - 1;\n        while(i < j) {\n            Long v1 = l.get(i);\n\
    \            Long v2 = l.get(j);\n            if(v1.longValue() >= v2.longValue())\
    \ {\n                i++;\n                j--;\n            } else {\n      \
    \          j++;\n                i++;\n            }\n        }\n        // return\
    \ false;\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.monotonic(tmp5vz46nx6.java:25)\n\tat Problem.main(tmp5vz46nx6.java:38)\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) {\n            return\
    \ true;\n        }\n        if (l.get(0) > l.get(l.size() - 1)) {\n          \
    \  return false;\n        }\n        long prev = l.get(0);\n        boolean isIncreasing\
    \ = true;\n        long curr = l.get(0);\n        l.forEach((x) -> {\n       \
    \     if (x < curr) {\n                isIncreasing = false;\n            }\n\
    \            if (x > curr) {\n                isIncreasing = !isIncreasing;\n\
    \            }\n            prev = x; // keep track of the previous value\n  \
    \          curr = x;\n        });\n        return isIncreasing;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbtoalhmc.java:27: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n            if (x < curr) {\n\
    \                    ^\n/tmp/tmpbtoalhmc.java:28: error: local variables referenced\
    \ from a lambda expression must be final or effectively final\n              \
    \  isIncreasing = false;\n                ^\n/tmp/tmpbtoalhmc.java:30: error:\
    \ local variables referenced from a lambda expression must be final or effectively\
    \ final\n            if (x > curr) {\n                    ^\n/tmp/tmpbtoalhmc.java:31:\
    \ error: local variables referenced from a lambda expression must be final or\
    \ effectively final\n                isIncreasing = !isIncreasing;\n         \
    \                       ^\n/tmp/tmpbtoalhmc.java:31: error: local variables referenced\
    \ from a lambda expression must be final or effectively final\n              \
    \  isIncreasing = !isIncreasing;\n                ^\n/tmp/tmpbtoalhmc.java:33:\
    \ error: local variables referenced from a lambda expression must be final or\
    \ effectively final\n            prev = x; // keep track of the previous value\n\
    \            ^\n/tmp/tmpbtoalhmc.java:34: error: local variables referenced from\
    \ a lambda expression must be final or effectively final\n            curr = x;\n\
    \            ^\n7 errors\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = true;\n       \
    \ boolean decreasing = true;\n        long maxValue = Long.MIN_VALUE;\n      \
    \  long minValue = Long.MAX_VALUE;\n        for (long l : l) {\n            if\
    \ (l > maxValue) maxValue = l;\n            if (l < minValue) minValue = l;\n\
    \        }\n        long min = minValue;\n        long max = maxValue;\n     \
    \   for (long l : l) {\n            if (l > maxValue) max = l;\n            if\
    \ (l < minValue) min = l;\n        }\n        if (max > min) {\n            increasing\
    \ = maxValue > minValue;\n            decreasing = maxValue < minValue;\n    \
    \    }\n        return increasing || decreasing;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3y1r_p_l.java:21: error: variable l is already defined in method\
    \ monotonic(ArrayList<Long>)\n        for (long l : l) {\n                  ^\n\
    /tmp/tmp3y1r_p_l.java:27: error: variable l is already defined in method monotonic(ArrayList<Long>)\n\
    \        for (long l : l) {\n                  ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean ret = true;\n        for (int\
    \ i = 0; i < l.size() - 1; i++) {\n            if (l.get(i) > l.get(i + 1)) ret\
    \ = false;\n        }\n        return ret;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf9hx4a53.java:27)\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        List<Long> ll = new ArrayList<>(l);\n\
    \        Collections.sort(ll);\n        return ll.equals(l);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzl97t9hm.java:25)\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Collections.sort(l);\n        Long prev\
    \ = l.get(0);\n        boolean hasChanged = true;\n        for (int i = 1; i <\
    \ l.size(); i++) {\n            if (l.get(i) > prev) {\n                hasChanged\
    \ = true;\n            }\n            prev = l.get(i);\n        }\n        return\
    \ hasChanged;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaz_eg2bq.java:31)\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return true;\n    \
    \    if (l.get(l.size() - 1) <= l.get(0)) return true;\n        for (int i = l.size()\
    \ - 2; i >= 0; i--) {\n            Long c = l.get(i);\n            if (c > l.get(i\
    \ + 1)) return true;\n            if (c < l.get(i + 1)) return false;\n      \
    \  }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjway_e2q.java:27)\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean firstIsBigger = true;\n    \
    \    for (long e : l) {\n            if (e < l.get(l.size() - 1)) {\n        \
    \        firstIsBigger = false;\n            }\n        }\n        return firstIsBigger;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu2rbx9z0.java:26)\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        List<Long> r = new ArrayList<>(l);\n\
    \        // reverse list for binary search comparison\n        while (!r.isEmpty())\
    \ {\n            r.remove(1);\n        }\n        int start = 0;\n        int\
    \ end = r.size();\n        while (end > start) {\n            int mid = (start\
    \ + end) / 2;\n            long lval = r.get(mid);\n            if (lval >= l.get(mid))\
    \ {\n                end = mid;\n            } else {\n                start =\
    \ mid + 1;\n            }\n        }\n        return start == end;\n    }\n  \
    \  public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 1 out of bounds for length 1\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.remove(ArrayList.java:504)\n\
    \tat Problem.monotonic(tmp8ejjnrxh.java:20)\n\tat Problem.main(tmp8ejjnrxh.java:36)\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) return false;\n  \
    \      Collections.sort(l);\n        Long prev = null;\n        long last = l.get(l.size()\
    \ - 1);\n        for (int i = 0; i < (l.size() - 1); i++) {\n            Long\
    \ e = l.get(i);\n            if (e >= last) {\n                return false;\n\
    \            }\n            prev = e;\n            last = e;\n        }\n    \
    \    return true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2u5xfxqp.java:32)\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) {\n            return\
    \ l.isEmpty();\n        }\n        final Comparator<Long> comparator = Comparator.comparingLong(Long::longValue).reversed();\n\
    \        final int maxElements = l.size() - 1;\n        final long curr = l.get(0);\n\
    \        final long nextVal = l.get(1);\n        final int minElements = 1;\n\
    \        final long minVal = l.get(2);\n        // loop through array until either\
    \ we find a value that is not increasing or decreasing\n        // or we run out\
    \ of array elements\n        boolean inc = true;\n        for (int i = 3; i <\
    \ maxElements; i++) {\n            final long nextVal2 = l.get(i);\n         \
    \   inc = comparator.compare(nextVal, nextVal2) < 0;\n            if (inc) {\n\
    \                // found increasing element\n                if (i < minElements)\
    \ {\n                    minVal = nextVal;\n                    minElements =\
    \ i;\n                }\n            } else {\n                // found decreasing\
    \ element\n                if (i > minElements) {\n                    minVal\
    \ = nextVal;\n                    minElements = i;\n                }\n      \
    \      }\n            final long prev = l.get(i - 1);\n            final long\
    \ val = l.get(i);\n            if (inc && val < prev) {\n                return\
    \ false;\n            } else if (inc && val > prev) {\n                return\
    \ false;\n            }\n        }\n        if (inc) {\n            return minElements\
    \ > minVal;\n        } else {\n            return minElements < minVal;\n    \
    \    }\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdh7v1y7.java:35: error: cannot assign a value to final variable\
    \ minVal\n                    minVal = nextVal;\n                    ^\n/tmp/tmpbdh7v1y7.java:36:\
    \ error: cannot assign a value to final variable minElements\n               \
    \     minElements = i;\n                    ^\n/tmp/tmpbdh7v1y7.java:41: error:\
    \ cannot assign a value to final variable minVal\n                    minVal =\
    \ nextVal;\n                    ^\n/tmp/tmpbdh7v1y7.java:42: error: cannot assign\
    \ a value to final variable minElements\n                    minElements = i;\n\
    \                    ^\n4 errors\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return ((l.size() <= 1)\n          \
    \      || ((l.size() == 2) && ((l.get(0) > l.get(1))))\n                || ((l.size()\
    \ > 2) && ((l.get(l.size() - 1) < l.get(l.size() - 2)) && (l.get(l.size() - 1)\
    \ > l.get(l.size() - 2)))));\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuojubmu_.java:22)\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long[] intArr = new long[l.size()];\n\
    \        LongStream.range(0, l.size()).map(i -> l.get(i)).forEach(intArr::set);\n\
    \        LongStream.range(0, intArr.length - 1).map(i -> intArr[i + 1] - intArr[i]).filter(x\
    \ -> x > 0).findFirst().isPresent();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyd2ysz43.java:18: error: incompatible types: possible lossy conversion\
    \ from long to int\n        LongStream.range(0, l.size()).map(i -> l.get(i)).forEach(intArr::set);\n\
    \                                                     ^\n/tmp/tmpyd2ysz43.java:18:\
    \ error: invalid method reference\n        LongStream.range(0, l.size()).map(i\
    \ -> l.get(i)).forEach(intArr::set);\n                                       \
    \                          ^\n  cannot find symbol\n    symbol:   method set(long)\n\
    \    location: class long[]\n/tmp/tmpyd2ysz43.java:19: error: incompatible types:\
    \ possible lossy conversion from long to int\n        LongStream.range(0, intArr.length\
    \ - 1).map(i -> intArr[i + 1] - intArr[i]).filter(x -> x > 0).findFirst().isPresent();\n\
    \                                                                 ^\n/tmp/tmpyd2ysz43.java:19:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    LongStream.range(0, intArr.length - 1).map(i -> intArr[i + 1] - intArr[i]).filter(x\
    \ -> x > 0).findFirst().isPresent();\n                                       \
    \                                        ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Collections.sort(l);\n        if (l.size()\
    \ == 0) {\n            return true;\n        }\n        if (l.size() == 1) {\n\
    \            return l.get(0) > l.get(1);\n        }\n        return l.stream().map((e)\
    \ -> {\n            return e > l.get(l.size() - 1);\n        }).anyMatch(true);\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp51vim8an.java:26: error: incompatible types: boolean cannot be\
    \ converted to Predicate<? super Boolean>\n        }).anyMatch(true);\n      \
    \              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result;\n        Long l1 = l.get(0);\n\
    \        Long l2 = l.get(1);\n        if (l1 == null && l2 == null) return true;\n\
    \        if (l2 == null) result = true;\n        else result = l2.compareTo(l1)\
    \ == 1;\n        return result;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv5_x9wb9.java:28)\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) return false;\n \
    \       Long minValue = l.get(0);\n        Long maxValue = l.get(l.size() - 1);\n\
    \        long currentMax = maxValue;\n        for (int i = 1; i < l.size(); i++)\
    \ {\n            Long value = l.get(i);\n            if (currentMax < value) currentMax\
    \ = value;\n            if (currentMax != value) {\n                if (currentMax\
    \ == minValue) {\n                    if (minValue < maxValue) return false;\n\
    \                } else {\n                    if (maxValue < minValue) return\
    \ false;\n                }\n                return true;\n            }\n   \
    \     }\n        return false;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkwf97mqe.java:38)\n"
  stdout: ''
  timestamp: 1660011738
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean first = true;\n        for (Long\
    \ i : l) {\n            if (first) {\n                first = false;\n       \
    \     } else {\n                if (i < l.get(l.size() - 1)) {\n             \
    \       return false;\n                }\n            }\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx4wkj4ix.java:30)\n"
  stdout: ''
  timestamp: 1660011737
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return false;\n   \
    \     long last = l.stream()\n                .mapToLong(x -> (long)x)\n     \
    \           .max()\n                .getAsLong();\n        return l.stream()\n\
    \                .allMatch(x -> (long)x == last);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprbkyym4_.java:26)\n"
  stdout: ''
  timestamp: 1660011738
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long max = Long.MIN_VALUE;\n       \
    \ long min = Long.MAX_VALUE;\n        for (long e : l) {\n            if (e <\
    \ min) {\n                min = e;\n            }\n            if (e > max) {\n\
    \                max = e;\n            }\n        }\n        return max <= min;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnpiiyxo0.java:30)\n"
  stdout: ''
  timestamp: 1660011738
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long min = l.stream().min(Comparator.naturalOrder()).get();\n\
    \        Long max = l.stream().max(Comparator.naturalOrder()).get();\n       \
    \ return l.stream().anyMatch(x -> x <= min || x >= max);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnc3hvo2z.java:24)\n"
  stdout: ''
  timestamp: 1660011738
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return false;\n   \
    \     Comparator<Long> comp = Comparator.comparingLong(Long::longValue);\n   \
    \     Collections.sort(l, comp.reversed());\n        Long last = l.get(0);\n \
    \       boolean increasing = true;\n        for (Long current : l) {\n       \
    \     if (current == last) {\n                increasing = false;\n          \
    \      break;\n            }\n            last = current;\n        }\n       \
    \ return increasing;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1yt9kjnc.java:32)\n"
  stdout: ''
  timestamp: 1660011738
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        \n        ArrayList<Long> tmp = new\
    \ ArrayList<Long>();\n        for(Long e : l){\n            \n            long\
    \ cur = e;\n            for(long e2 : l){\n                \n                if(e2\
    \ != e){\n                    if(cur > e2){\n                        break;\n\
    \                    }\n                }else{\n                    \n       \
    \             if(cur < e2){\n                        break;\n                \
    \    }\n                }\n                \n                tmp = tmp.add(e);\n\
    \            }\n        }\n        \n        ArrayList<Long> res = new ArrayList<Long>();\n\
    \        for(Long e : tmp){\n            res.add(e);\n        }\n        \n  \
    \      return res.equals(l);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpazr3r297.java:35: error: incompatible types: boolean cannot be\
    \ converted to ArrayList<Long>\n                tmp = tmp.add(e);\n          \
    \                   ^\n1 error\n"
  stdout: ''
  timestamp: 1660011738
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) return false;\n \
    \       ArrayList<Long> l2 = new ArrayList<>(l);\n        l2.sort(null);\n   \
    \     if (l2.get(l2.size() - 1) < l.get(0) - 1) return false;\n        ArrayList<Long>\
    \ l3 = new ArrayList<>(l);\n        l3.sort(null);\n        if (l3.get(l3.size()\
    \ - 1) < l2.get(0) && l2.get(0) < l3.get(0) || l3.get(0) < l2.get(0) - 1) return\
    \ false;\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp11mz0xg0.java:29)\n"
  stdout: ''
  timestamp: 1660011738
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long start = l.get(0);\n        Long\
    \ end = l.get(l.size() - 1);\n\n        for (int i = 1; i < l.size(); i++) {\n\
    \            if (l.get(i) < start) return false;\n            if (l.get(i) > end)\
    \ return false;\n        }\n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw5mnno4u.java:30)\n"
  stdout: ''
  timestamp: 1660011739
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty() || l.get(0) == 0)\n\
    \            return false;\n        if (l.get(l.size()-1) > l.get(0)) {\n    \
    \        return false;\n        }\n        long l = l.get(0), r = l.get(1);\n\
    \        for (int i = 2; i < l.size(); i++) {\n            long tmp = (l.get(i)\
    \ - l.get(i-1));\n            if (tmp < r) {\n                return false;\n\
    \            }\n            if (tmp > r) {\n                r = tmp;\n       \
    \     }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdf4kdzcw.java:22: error: variable l is already defined in method\
    \ monotonic(ArrayList<Long>)\n        long l = l.get(0), r = l.get(1);\n     \
    \        ^\n/tmp/tmpdf4kdzcw.java:22: error: long cannot be dereferenced\n   \
    \     long l = l.get(0), r = l.get(1);\n                  ^\n/tmp/tmpdf4kdzcw.java:22:\
    \ error: long cannot be dereferenced\n        long l = l.get(0), r = l.get(1);\n\
    \                                ^\n/tmp/tmpdf4kdzcw.java:23: error: long cannot\
    \ be dereferenced\n        for (int i = 2; i < l.size(); i++) {\n            \
    \                 ^\n/tmp/tmpdf4kdzcw.java:24: error: long cannot be dereferenced\n\
    \            long tmp = (l.get(i) - l.get(i-1));\n                         ^\n\
    /tmp/tmpdf4kdzcw.java:24: error: long cannot be dereferenced\n            long\
    \ tmp = (l.get(i) - l.get(i-1));\n                                    ^\n6 errors\n"
  stdout: ''
  timestamp: 1660011738
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean increasing = false;\n      \
    \  long previous = Long.MIN_VALUE;\n        for (Long number : l) {\n        \
    \    boolean decreasing = number < previous;\n            boolean increasing =\
    \ !decreasing;\n            previous = number;\n            if (increasing ^ decreasing)\
    \ {\n                return increasing ^ !increasing;\n            }\n       \
    \ }\n        return increasing ^ !increasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzrntd348.java:21: error: variable increasing is already defined\
    \ in method monotonic(ArrayList<Long>)\n            boolean increasing = !decreasing;\n\
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011738
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) return true;\n   \
    \     long s = l.get(1);\n        for (Long l2 : l)\n            if (l2 <= s)\
    \ return false;\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_srd3wxb.java:24)\n"
  stdout: ''
  timestamp: 1660011739
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty() || l.size() == 1) return\
    \ true;\n        long a = l.remove(0);\n        long b = l.remove(0);\n      \
    \  if (a * b <= 0) {\n            l.add(a);\n            return monotonic(l);\n\
    \        }\n        l.add(b);\n        return monotonic(l);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg57wxyqs.java:30)\n"
  stdout: ''
  timestamp: 1660011739
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return true;\n    \
    \    final long firstVal = l.get(0);\n        final long lastVal = l.get(l.size()-1);\n\
    \        return firstVal <= lastVal\n            && monotonic(l, firstVal, true)\n\
    \            && monotonic(l, lastVal, false);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpizefiavb.java:21: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n            && monotonic(l, firstVal, true)\n  \
    \             ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,long,boolean\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpizefiavb.java:22:\
    \ error: method monotonic in class Problem cannot be applied to given types;\n\
    \            && monotonic(l, lastVal, false);\n               ^\n  required: ArrayList<Long>\n\
    \  found:    ArrayList<Long>,long,boolean\n  reason: actual and formal argument\
    \ lists differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1660011738
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Collections.sort(l);\n        Collections.sort(l,\
    \ Comparator.comparingLong(Long::longValue));\n        return l.equals(l);\n \
    \   }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1tdzh3xl.java:24)\n"
  stdout: ''
  timestamp: 1660011739
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) { return true; }\n\
    \        Long a = l.get(0);\n        Long b = l.get(l.size() - 1);\n        boolean\
    \ bIncr = b < a ? false : true;\n        boolean aIncr = a < b ? false : true;\n\
    \        if (aIncr ^ bIncr) {\n            return aIncr;\n        }\n        Long\
    \ c = (l + l).get(1);\n        if (a.compareTo(c) > 0) { return false; }\n   \
    \     return c.compareTo(b) > 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsc7v8kff.java:25: error: bad operand types for binary operator\
    \ '+'\n        Long c = (l + l).get(1);\n                    ^\n  first type:\
    \  ArrayList<Long>\n  second type: ArrayList<Long>\n1 error\n"
  stdout: ''
  timestamp: 1660011738
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() <= 1) return false;\n \
    \       long x = 0;\n        long y = 0;\n        for (long i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) < l.get(i-1)) {\n                x = l.get(i-1);\n\
    \            } else if (l.get(i) > l.get(i-1)) {\n                y = l.get(i-1);\n\
    \                break;\n            } else {\n                continue;\n   \
    \         }\n        }\n        return (x > 0) == (y < 0);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp223zw27_.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (l.get(i) < l.get(i-1)) {\n               \
    \       ^\n/tmp/tmp223zw27_.java:21: error: incompatible types: possible lossy\
    \ conversion from long to int\n            if (l.get(i) < l.get(i-1)) {\n    \
    \                              ^\n/tmp/tmp223zw27_.java:22: error: incompatible\
    \ types: possible lossy conversion from long to int\n                x = l.get(i-1);\n\
    \                           ^\n/tmp/tmp223zw27_.java:23: error: incompatible types:\
    \ possible lossy conversion from long to int\n            } else if (l.get(i)\
    \ > l.get(i-1)) {\n                             ^\n/tmp/tmp223zw27_.java:23: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \ } else if (l.get(i) > l.get(i-1)) {\n                                      \
    \   ^\n/tmp/tmp223zw27_.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n                y = l.get(i-1);\n                        \
    \   ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1660011739
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return monotonic(l, 0, l.size() - 1);\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa_87uc9t.java:17: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n        return monotonic(l, 0, l.size() - 1);\n\
    \               ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,int,int\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011739
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return !l.isEmpty() && l.size() >= 3\
    \ && l.stream().allMatch(i -> i.longValue() >= l.get(i).longValue());\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxtm5wegx.java:17: error: incompatible types: Long cannot be converted\
    \ to int\n        return !l.isEmpty() && l.size() >= 3 && l.stream().allMatch(i\
    \ -> i.longValue() >= l.get(i).longValue());\n                               \
    \                                                                 ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011739
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return true;\n    \
    \    final long prev = l.get(0);\n        final long first = l.get(1);\n     \
    \   for (final long next : l.subList(2,l.size())) {\n            final long current\
    \ = next;\n            if (current < first || current > prev) {\n            \
    \    return false;\n            }\n            prev = current;\n        }\n  \
    \      return true;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqutjxdts.java:25: error: cannot assign a value to final variable\
    \ prev\n            prev = current;\n            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011739
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Collections.sort(l);\n        long prev\
    \ = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            long\
    \ current = l.get(i);\n            if (current <= prev) {\n                return\
    \ false;\n            }\n            prev = current;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv5ye23a4.java:31)\n"
  stdout: ''
  timestamp: 1660011739
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Return true is all elements monotonically\n\
    \        // increasing or decreasing or if list is empty.\n        // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList(0l))))\n        // (true)\n        // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList(0l, (long)1l)))\n        // (true)\n        //\
    \ >>> monotonic((new ArrayList<Long>(Arrays.asList(0l, (long)1l, (long)2l)))\n\
    \        // (true)\n        // >>> monotonic((new ArrayList<Long>(Arrays.asList(0l,\
    \ (long)1l, (long)2l, (long)0l)))\n        // (true)\n        // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList(0l, (long)1l, (long)2l, (long)0l, (long)1l)))\n\
    \        // (true)\n        // >>> monotonic((new ArrayList<Long>(Arrays.asList(0l,\
    \ (long)1l, (long)2l, (long)0l, (long)2l)))\n        // (false)\n        // >>>\
    \ monotonic((new ArrayList<Long>(Arrays.asList(0l, (long)1l, (long)2l, (long)1l,\
    \ (long)1l)))\n        // (false)\n        // >>> monotonic((new ArrayList<Long>(Arrays.asList(0l,\
    \ (long)1l, (long)2l, (long)1l, (long)0l)))\n        // (false)\n        // >>>\
    \ monotonic((new ArrayList<Long>(Arrays.asList(0l, (long)1l, (long)2l, (long)2l,\
    \ (long)0l)))\n        // (true)\n        // >>> monotonic((new ArrayList<Long>(Arrays.asList(0l,\
    \ (long)1l, (long)2l, (long)2l, (long)1l)))\n        // (true)\n        // >>>\
    \ monotonic((new ArrayList<Long>(Arrays.asList(0l, (long)1l, (long)2l, (long)2l,\
    \ (long)2l)))\n        // (true)\n        // >>> monotonic((new ArrayList<Long>(Arrays.asList(0l,\
    \ (long)1l, (long)2l, (long)2l, (long)1l, (long)0l)))\n        // (true)\n   \
    \     // >>> monotonic((new ArrayList<Long>(Arrays.asList(0l, (long)1l, (long)2l,\
    \ (long)2l, (long)1l, (long)1l)))\n        // (true)\n        // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList(0l, (long)1l, (long)2l, (long)2l, (long)2l, (long)0l)))\n\
    \        // (\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyy3lbkjt.java:47: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011739
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return monotonic(l, l.size() - 1);\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5sp47u9.java:17: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n        return monotonic(l, l.size() - 1);\n   \
    \            ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,int\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011739
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Collections.sort(l);\n        if (l.isEmpty())\
    \ return false;\n        final long max = l.stream().mapToLong(x -> x).collect(Collectors.toList()).get(0)\
    \ - 1;\n        for (Long i : l) {\n            if (i > max) return false;\n \
    \       }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpayg5_8q2.java:19: error: method collect in interface LongStream\
    \ cannot be applied to given types;\n        final long max = l.stream().mapToLong(x\
    \ -> x).collect(Collectors.toList()).get(0) - 1;\n                           \
    \                          ^\n  required: Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>\n\
    \  found:    Collector<Object,CAP#1,List<Object>>\n  reason: cannot infer type-variable(s)\
    \ R\n    (actual and formal argument lists differ in length)\n  where R is a type-variable:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n/tmp/tmpayg5_8q2.java:19: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        final long max = l.stream().mapToLong(x -> x).collect(Collectors.toList()).get(0)\
    \ - 1;\n                                                             ^\n    (argument\
    \ mismatch; no instance(s) of type variable(s) CAP#1,T exist so that Collector<T,?,List<T>>\
    \ conforms to Supplier<R>)\n  where R,T are type-variables:\n    R extends Object\
    \ declared in method <R>collect(Supplier<R>,ObjLongConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T>toList()\n  where CAP#1 is a fresh\
    \ type-variable:\n    CAP#1 extends Object from capture of ?\n2 errors\n"
  stdout: ''
  timestamp: 1660011739
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n\n        long first = l.get(0);\n        for (int i = 1;\
    \ i < l.size(); i++) {\n            long current = l.get(i);\n            long\
    \ previous = l.get(i - 1);\n            if (current > previous) {\n          \
    \      return false;\n            }\n        }\n\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc0p8dtgr.java:33)\n"
  stdout: ''
  timestamp: 1660011739
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // sort array list elements\n      \
    \  l.sort(Comparator.naturalOrder());\n\n        // reverse if reverse flag is\
    \ true\n        boolean reverse = (l.size() == 1) ? true : false;\n\n        //\
    \ get last element\n        long lastElement = reverse? l.get(l.size() - 1) :\
    \ l.get(0);\n\n        // return true if first element and last element are equal\n\
    \        if (reverse? l.get(0) != lastElement : l.get(0) != l.get(l.size() - 1))\
    \ {\n            return false;\n        }\n\n        // get first element\n  \
    \      long firstElement = reverse? l.get(0) : l.get(0);\n\n        // get last\
    \ element index\n        int lastIndex = l.size() - 1;\n\n        // get first\
    \ element index\n        int firstIndex = reverse? 0 : 1;\n\n        // start\
    \ increasing if first element < last element\n        while (firstIndex < lastIndex\
    \ && l.get(firstIndex) < lastElement) {\n            firstIndex++;\n        }\n\
    \n        // start decreasing if first element > last element\n        while (firstIndex\
    \ > lastIndex && l.get(firstIndex) > lastElement) {\n            firstIndex--;\n\
    \        }\n\n        // return false if first element or last element not found\
    \ in array\n        if (firstIndex == lastIndex) {\n            return false;\n\
    \        }\n\n        // return true if first element and last element are equal\n\
    \        return reverse? l.get(firstIndex) == lastElement : l.get(firstIndex)\
    \ == l.get(lastIndex);\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg43o5_zx.java:59)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return false;\n   \
    \     Long last = l.get(0);\n        long cur = last;\n        for (int i = 1;\
    \ i < l.size(); i++) {\n            Long x = l.get(i);\n            if (x < cur)\
    \ cur = x;\n        }\n        if (last == cur) return true;\n        return false;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdyypxcg2.java:30)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   boolean isDecreasing = true;\n        Collections.sort(l);\n        Long prev\
    \ = null;\n        Long curr = null;\n        for (Long e : l) {\n           \
    \ curr = e;\n            if (prev != null && prev > curr && !(curr == null &&\
    \ prev == null))\n                isDecreasing = false;\n            else\n  \
    \              isIncreasing = true;\n            prev = curr;\n        }\n   \
    \     return (isIncreasing || isDecreasing);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp25_ywps5.java:35)\n"
  stdout: ''
  timestamp: 1660011739
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final boolean increasing = true;\n \
    \       final boolean decreasing = true;\n        if (l.isEmpty()) {\n       \
    \     return increasing && decreasing;\n        }\n        final Long lastElement\
    \ = l.get(l.size() - 1);\n        final long smallest = l.get(0);\n        final\
    \ long largest = l.get(l.size() - 1);\n        final boolean negative = smallest\
    \ < 0l;\n        if (negative || largest == 0l) {\n            return false;\n\
    \        }\n        for (Long element : l) {\n            if (element <= 0l) {\n\
    \                return false;\n            }\n            if (element > largest\
    \ && !decreasing) {\n                return false;\n            }\n          \
    \  if (element < smallest && !increasing) {\n                return false;\n \
    \           }\n            if (element > largest && element < smallest && !decreasing\
    \ && !increasing) {\n                return false;\n            }\n          \
    \  if (element < smallest && element > largest && !decreasing && increasing) {\n\
    \                return false;\n            }\n        }\n        if (negative\
    \ && smallest != 0l) {\n            return false;\n        }\n        if (largest\
    \ == 0l) {\n            return false;\n        }\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp55wvh44n.java:57)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean result = false;\n        for(int\
    \ i = 1; i < l.size(); i++) {\n            if((l.get(i) - l.get(i-1)) <= 0) {\n\
    \                result = true;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdoz6r63l.java:26)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return false;\n   \
    \     l.sort(Long::compare);\n        Long lastValue = l.get(l.size()-1);\n  \
    \      boolean isIncreasing = l.stream().allMatch(Long::compare);\n        boolean\
    \ isDecreasing = !isIncreasing;\n        if (lastValue.equals(l.get(0))) isIncreasing\
    \ = false;\n        if (isIncreasing && !isDecreasing) return false;\n       \
    \ if (isDecreasing && isIncreasing) return false;\n        return true;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppq63q1ym.java:20: error: incompatible types: invalid method reference\n\
    \        boolean isIncreasing = l.stream().allMatch(Long::compare);\n        \
    \                                           ^\n    method compare in class Long\
    \ cannot be applied to given types\n      required: long,long\n      found:  \
    \  Long\n      reason: actual and formal argument lists differ in length\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Collections.sort(l);\n        Long a\
    \ = l.get(0);\n        Long b = l.get(l.size() - 1);\n        if (a.compareTo(b)\
    \ > 0) return true;\n        if (a.compareTo(b) < 0) return false;\n        return\
    \ false;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgwbxyese.java:25)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = Long.MIN_VALUE;\n      \
    \  boolean result = true;\n        for (Long elt : l) {\n            long next\
    \ = elt;\n            if (next != prev && prev > next)\n                result\
    \ = false;\n            prev = next;\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpab125vu5.java:31)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // The variable x is initialized to\
    \ l.get(0)\n        // It is tested when x is lesser or greater than l.get(1)\n\
    \        // In that case the test fails.\n        // Thus the test stops.\n  \
    \      // The value of the variable x is updated with the next element.\n    \
    \    Long x = l.get(0);\n        // We test whether the variable x is increasing\
    \ or decreasing\n        // We test whether the variable x is greater than or\
    \ lesser than l.get(1)\n        // Thus the test stops when x is increasing or\
    \ decreasing.\n        for (int i = 1; i < l.size(); i++) {\n            Long\
    \ y = l.get(i);\n            // We test whether the variable x is increasing or\
    \ decreasing\n            // The test fails when the x is equal to y\n       \
    \     if (x.compareTo(y) != 0)\n                return false;\n            //\
    \ We update x with the next element\n            x = y;\n        }\n        return\
    \ true;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptq4nou0y.java:38)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long min = l.get(0);\n        long max\
    \ = min;\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ > max) {\n                max = l.get(i);\n            }\n            if (l.get(i)\
    \ < min) {\n                min = l.get(i);\n            }\n        }\n      \
    \  return (min <= max);\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsa3eowkt.java:32)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) { \n            return\
    \ false;\n        }\n        List<Long> sortedList = l.stream().sorted(Comparator.naturalOrder()).collect(Collectors.toList());\n\
    \        Long prev = sortedList.get(0);\n        for (int i = 1; i < sortedList.size();\
    \ i++) {\n            if (sortedList.get(i).equals(prev)) {\n                continue;\n\
    \            }\n            if (sortedList.get(i).equals(sortedList.get(i - 1)))\
    \ {\n                return false;\n            }\n            prev = sortedList.get(i);\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdarrx842.java:36)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 3) {\n            return\
    \ true;\n        }\n        long first = l.get(0);\n        long last  = l.get(l.size()\
    \ - 1);\n        long mid   = l.get(l.size() / 2);\n        if (first < mid) {\n\
    \            return false;\n        }\n        if (last > mid) {\n           \
    \ return true;\n        }\n        boolean firstIsSmaller = false;\n        boolean\
    \ lastIsSmaller = false;\n        for (int i = 1; i < l.size(); i++) {\n     \
    \       long current = l.get(i);\n            if (current > first && current <\
    \ last) {\n                firstIsSmaller = true;\n                break;\n  \
    \          } else if (current < first && current > last) {\n                lastIsSmaller\
    \ = true;\n                break;\n            }\n        }\n        return firstIsSmaller\
    \ || lastIsSmaller;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1lx28ly0.java:44)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isUp = true;\n        boolean\
    \ isDown = true;\n        for (Long e : l) {\n            if (isUp) {\n      \
    \          if (e < l.get(0))\n                    isUp = false;\n            }\n\
    \            if (isDown) {\n                if (e > l.get(l.size() - 1))\n   \
    \                 isDown = false;\n            }\n        }\n        return isUp\
    \ || isDown;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpij2uvd3q.java:34)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Use a queue to store elements which\
    \ will be removed.\n        Deque<Long> q = new ArrayDeque<>();\n\n        //\
    \ Iterate through original array.\n        for (Long i : l) {\n            //\
    \ If already in queue, remove it.\n            if (q.isEmpty()) {\n          \
    \      q.offer(i);\n            } else if (q.pollFirst() > i) {\n            \
    \    return false;\n            } else {\n                q.offer(i);\n      \
    \      }\n        }\n\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyabr2kuy.java:38)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // get min & max values\n        long\
    \ min = l.stream().mapToLong(Long::longValue).min().getAsLong();\n        long\
    \ max = l.stream().mapToLong(Long::longValue).max().getAsLong();\n        long\
    \ delta;\n        // return true if increasing else false\n        boolean increasing\
    \ = false, decreasing = false;\n        if (l.size() > 1L) {\n            // get\
    \ previous value to compare with.\n            long prevVal = l.get(l.size() -\
    \ 1L);\n            // if next value is less than previous value then increasing\n\
    \            delta = l.stream().filter(e->e<prevVal).mapToLong(Long::longValue).count();\n\
    \            if (delta == 0) {\n                // if list was all equal then\
    \ decreasing\n                delta = l.stream().filter(e->e>prevVal).mapToLong(Long::longValue).count();\n\
    \                decreasing = true;\n            }\n        }\n        if (delta\
    \ > 0) {\n            increasing = true;\n        }\n        // return increasing\
    \ if increasing else decreasing\n        return increasing || decreasing;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw7b7ck5l.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n            long prevVal = l.get(l.size() - 1L);\n       \
    \                                   ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean foundIncreasing = true;\n  \
    \      boolean foundDecreasing = true;\n        for (int i = 0; i < l.size();\
    \ i++) {\n            long current = l.get(i);\n            boolean increasing\
    \ = false;\n            boolean decreasing = false;\n            if (i < l.size()\
    \ - 1) {\n                long next = l.get(i + 1);\n                increasing\
    \ = current > next;\n                decreasing = current < next;\n          \
    \  }\n            if (increasing || decreasing) {\n                foundIncreasing\
    \ |= increasing;\n                foundDecreasing |= decreasing;\n           \
    \ }\n        }\n        if (foundIncreasing & foundDecreasing) {\n           \
    \ return true;\n        }\n        return false;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpme9qktg3.java:41)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Arrays.sort(l);\n        long last =\
    \ 0l;\n        for (long next : l) {\n            if (next != last) {\n      \
    \          return true;\n            }\n            last = next;\n        }\n\
    \        return false;\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnavbdad6.java:17: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(l);\n              ^\n    method Arrays.sort(int[]) is not\
    \ applicable\n      (argument mismatch; ArrayList<Long> cannot be converted to\
    \ int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return true;\n    \
    \    List<Long> tail = l.subList(0, l.size() - 1);\n        Long a = new Long(l.get(0));\n\
    \        for (int i = 1; i < tail.size(); i++) {\n            Long b = tail.get(i);\n\
    \            Long c = tail.get(i - 1);\n            if (b.compareTo(a) <= 0) {\n\
    \                // b is lower or equal than a\n                // move a to b\
    \ and check whether b decreases or increases\n                a = b;\n       \
    \         continue;\n            } else if (b.compareTo(c) <= 0) {\n         \
    \       // b is lower or equal than c\n                // move c to b and check\
    \ whether b decreases or increases\n                c = b;\n                continue;\n\
    \            } else {\n                // b is greater or equal than a\n     \
    \           // move a to b and check whether b decreases or increases\n      \
    \          a = b;\n            }\n            // At this point, a and b have not\
    \ moved anywhere else and are in their respective\n            // directions\n\
    \            tail.set(i, b);\n        }\n        boolean increasing = a.compareTo(b)\
    \ >= 0;\n        if (!increasing && tail.get(0).compareTo(b) < 0) {\n        \
    \    tail.set(0, b);\n        }\n        return increasing;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpom_oyi6e.java:19: warning: [removal] Long(long) in Long has been\
    \ deprecated and marked for removal\n        Long a = new Long(l.get(0));\n  \
    \               ^\n/tmp/tmpom_oyi6e.java:42: error: cannot find symbol\n     \
    \   boolean increasing = a.compareTo(b) >= 0;\n                              \
    \           ^\n  symbol:   variable b\n  location: class Problem\n/tmp/tmpom_oyi6e.java:43:\
    \ error: cannot find symbol\n        if (!increasing && tail.get(0).compareTo(b)\
    \ < 0) {\n                                                 ^\n  symbol:   variable\
    \ b\n  location: class Problem\n/tmp/tmpom_oyi6e.java:44: error: cannot find symbol\n\
    \            tail.set(0, b);\n                        ^\n  symbol:   variable\
    \ b\n  location: class Problem\n3 errors\n1 warning\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Iterate through the array and check\
    \ if there are consecutive elements that are strictly increasing\n        // or\
    \ decreasing.\n        long start = l.get(0);\n        long end = l.get(l.size()\
    \ - 1);\n        boolean result = true;\n        for (int i = 1; i < l.size();\
    \ i++) {\n            if (l.get(i) > end) {\n                result = false;\n\
    \                break;\n            } else if (l.get(i) < start) {\n        \
    \        result = false;\n                break;\n            }\n        }\n \
    \       return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzboq8ext.java:37)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return Collections.max(l).compareTo(Collections.min(l))\
    \ <= 0;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd2ebeieb.java:20)\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        double avg = l.stream().mapToDouble(x\
    \ -> x).toArray().sum() / l.size();\n        double prevAvg = l.isEmpty() ? Double.MIN_VALUE\
    \ : l.get(l.size() - 1) / l.size();\n        if (Math.abs(avg - prevAvg) < 1e-10)\
    \ {\n            return true;\n        }\n        double curAvg = 0.0;\n     \
    \   Iterator<Long> it = l.iterator();\n        while (it.hasNext()) {\n      \
    \      double diff = it.next() - curAvg;\n            if (Math.abs(diff) > 1e-10)\
    \ {\n                curAvg = it.next();\n                return false;\n    \
    \        }\n        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp73f34mb1.java:17: error: cannot find symbol\n        double avg\
    \ = l.stream().mapToDouble(x -> x).toArray().sum() / l.size();\n             \
    \                                                ^\n  symbol:   method sum()\n\
    \  location: class double[]\n1 error\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Write your code here.\n        \n\
    \        int minIndex = 0, minValue = 0;\n        for (int i = 0; i < l.size();\
    \ i++) {\n            long l = l.get(i);\n            if (l < minValue) {\n  \
    \              minValue = l;\n                minIndex = i;\n            }\n \
    \           \n        }\n        \n        if (minIndex > 0) {\n            if\
    \ (l.get(minIndex) == minValue) {\n                return false;\n           \
    \ } else {\n                return true;\n            }\n        } else {\n  \
    \          return true;\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2hcpg6_j.java:21: error: variable l is already defined in method\
    \ monotonic(ArrayList<Long>)\n            long l = l.get(i);\n               \
    \  ^\n/tmp/tmp2hcpg6_j.java:21: error: long cannot be dereferenced\n         \
    \   long l = l.get(i);\n                      ^\n/tmp/tmp2hcpg6_j.java:23: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \     minValue = l;\n                           ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        ArrayList<Long> reversed = new ArrayList<Long>(l);\n\
    \        Collections.reverse(reversed);\n        long smallest = -Long.MAX_VALUE;\n\
    \        long largest = Long.MAX_VALUE;\n        for (long current : reversed)\
    \ {\n            if (current < smallest && current > largest) {\n            \
    \    return true;\n            }\n            if (current > smallest && current\
    \ < largest) {\n                smallest = current;\n            }\n         \
    \   if (current < smallest && current > largest) {\n                largest =\
    \ current;\n            }\n        }\n        if (largest < Long.MIN_VALUE) {\n\
    \            return false;\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphdzkufvx.java:40)\n"
  stdout: ''
  timestamp: 1660011741
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        int max = l.size();\n        if(max\
    \ <= 1) {\n            return true;\n        }\n\n        long mid = (long)((max\
    \ - 1l) / 2.0l) + 1;\n        if(l.get(0) < mid) {\n            return false;\n\
    \        }\n        if(l.get(max) < mid) {\n            return true;\n       \
    \ }\n\n        long first = 0l;\n        long last = l.get(max) - 1;\n       \
    \ long middle = l.get(0) - 1;\n\n        while(first <= last) {\n            long\
    \ mid1 = first + Math.round((last - first) / 2);\n            long mid2 = first\
    \ + Math.round((last - first) / 2) + 1;\n            long diff = mid1 - middle;\n\
    \            if(diff > 0) {\n                first = mid1 + 1;\n            }\n\
    \            else if(diff < 0) {\n                last = mid1 - 1;\n         \
    \   }\n            else {\n                return false;\n            }\n    \
    \    }\n        return true;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5gc6ghwx.java:22: error: ')' expected\n        long mid = (long)((max\
    \ - 1l) / 2.0l) + 1;\n                                          ^\n/tmp/tmp5gc6ghwx.java:22:\
    \ error: ';' expected\n        long mid = (long)((max - 1l) / 2.0l) + 1;\n   \
    \                                        ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011740
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Use the first and the last element\
    \ in array as first and last bound. \n        // Assume they are sorted.\n   \
    \     long last = l.get(l.size() - 1);\n        long first = l.get(0);\n     \
    \   boolean result = false;\n        for (long i : l) {\n            if (i > last\
    \ && i < (last + 1)) {\n                result = !result;\n            }\n   \
    \         last = i;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpig684o3m.java:31)\n"
  stdout: ''
  timestamp: 1660011741
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long a0 = l.get(0);\n        Long a1\
    \ = l.get(1);\n        Long a2 = l.get(2);\n        Long a3 = l.get(3);\n    \
    \    return ((a0 > a1) ? a0 > a3 : a1 > a3);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpod5mdznc.java:24)\n"
  stdout: ''
  timestamp: 1660011741
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        LongComparator c = new LongComparator(l);\n\
    \        Collections.sort(l, c);\n        return c.compareTo(0l) > 0\n       \
    \         && c.compareTo(l.size()-1l) < 0;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7lnojbb3.java:17: error: cannot find symbol\n        LongComparator\
    \ c = new LongComparator(l);\n        ^\n  symbol:   class LongComparator\n  location:\
    \ class Problem\n/tmp/tmp7lnojbb3.java:17: error: cannot find symbol\n       \
    \ LongComparator c = new LongComparator(l);\n                               ^\n\
    \  symbol:   class LongComparator\n  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011741
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final long[] arr = l.stream().mapToLong(Long::longValue).toArray();\n\
    \        if (arr.length == 1) return arr[0] > 0;\n        final long curr = arr[0];\n\
    \        int inc = 1;\n        for (int i = 1; i < arr.length; ++i) {\n      \
    \      if (arr[i] < curr) continue;\n            int next = (int)curr;\n     \
    \       if (next - arr[i] > inc) {\n                inc = next - arr[i];\n   \
    \             curr = next;\n            }\n        }\n        return arr[0] >\
    \ curr;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjb6iw4d_.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n                inc = next - arr[i];\n                   \
    \        ^\n/tmp/tmpjb6iw4d_.java:26: error: cannot assign a value to final variable\
    \ curr\n                curr = next;\n                ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011741
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        ArrayList<Long> sortedList = sort(l);\n\
    \        long last = sortedList.get(sortedList.size() - 1L);\n        for (int\
    \ i = 0; i < sortedList.size(); i++) {\n            if (sortedList.get(i) > last)\
    \ {\n                return false;\n            }\n            last = sortedList.get(i);\n\
    \        }\n        return true;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpso5uqx6g.java:17: error: cannot find symbol\n        ArrayList<Long>\
    \ sortedList = sort(l);\n                                     ^\n  symbol:   method\
    \ sort(ArrayList<Long>)\n  location: class Problem\n/tmp/tmpso5uqx6g.java:18:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    long last = sortedList.get(sortedList.size() - 1L);\n                   \
    \                                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011741
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return monotonic(l, l -> -1l);\n   \
    \ }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzr_629zz.java:17: error: method monotonic in class Problem cannot\
    \ be applied to given types;\n        return monotonic(l, l -> -1l);\n       \
    \        ^\n  required: ArrayList<Long>\n  found:    ArrayList<Long>,(l)->-1L\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpzr_629zz.java:17:\
    \ error: variable l is already defined in method monotonic(ArrayList<Long>)\n\
    \        return monotonic(l, l -> -1l);\n                            ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011741
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final int size = l.size();\n       \
    \ if (size == 0) return true;\n\n        long current = l.get(0);\n\n        long\
    \ prev = l.get(size - 1);\n\n        for (int i = 0; i < size; i++) {\n      \
    \      long current = l.get(i);\n            if (current < prev) {\n         \
    \       return false;\n            } else if (current > prev) {\n            \
    \    return true;\n            }\n\n            prev = current;\n        }\n\n\
    \        return true;\n    }\n    public static void main(String[] args) {\n \
    \   assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5hb_jj8.java:25: error: variable current is already defined in\
    \ method monotonic(ArrayList<Long>)\n            long current = l.get(i);\n  \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011741
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream()\n              .allMatch(o\
    \ -> o >= l.stream().min(Comparator.naturalOrder()).get()\n                  \
    \               && o <= l.stream().max(Comparator.naturalOrder()).get());\n  \
    \  }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwo_y6q_v.java:24)\n"
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Stream<Long> s = l.stream();\n     \
    \   Optional<Long> first = s.filter(i -> i > 0l);\n        Optional<Long> second\
    \ = s.filter(i -> i < 0l);\n        return !s.anyMatch(i -> i == 0l || i == 1l\
    \ || i == 2l || i == 3l || i == 4l || i == 5l || i == 6l || i == 7l || i == 8l\
    \ || i == 9l || i == 10l || i == 11l || i == 12l || i == 13l || i == 14l || i\
    \ == 15l || i == 16l || i == 17l || i == 18l || i == 19l);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq5v3rlcl.java:18: error: incompatible types: Stream<Long> cannot\
    \ be converted to Optional<Long>\n        Optional<Long> first = s.filter(i ->\
    \ i > 0l);\n                                       ^\n/tmp/tmpq5v3rlcl.java:19:\
    \ error: incompatible types: Stream<Long> cannot be converted to Optional<Long>\n\
    \        Optional<Long> second = s.filter(i -> i < 0l);\n                    \
    \                    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011741
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        int n = l.size();\n        long prev\
    \ = Long.MIN_VALUE, cur = Long.MAX_VALUE, i = 0;\n        for (; i < n; i++) {\n\
    \            long c = l.get(i);\n            if (c < prev)\n                return\
    \ false;\n            prev = c;\n        }\n        for (; i < n; i++) {\n   \
    \         long c = l.get(i);\n            if (c > cur)\n                return\
    \ true;\n            cur = c;\n        }\n        return false;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpost7dkwb.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            long c = l.get(i);\n                         \
    \  ^\n/tmp/tmpost7dkwb.java:26: error: incompatible types: possible lossy conversion\
    \ from long to int\n            long c = l.get(i);\n                         \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011741
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty())\n            return\
    \ true;\n        ArrayList<Long> left = new ArrayList<Long>(l.subList(0, l.size()\
    \ / 2));\n        ArrayList<Long> right = new ArrayList<Long>(l.subList(l.size()\
    \ / 2, l.size()));\n        if (left.size() == 0 || right.size() == 0)\n     \
    \       return true;\n        return ((left.get(l.size() - 1) - right.get(0))\n\
    \            <= (left.get(l.size() - 1) - right.get(1)));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 3 out of bounds for length 2\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.monotonic(tmp3u37ipn0.java:23)\n\tat Problem.main(tmp3u37ipn0.java:27)\n"
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        long prev = Long.MAX_VALUE, curr;\n\
    \        for (Long e : l)\n            if (e > prev)\n                return false;\n\
    \            prev = curr = e;\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdhznxdpl.java:21: error: cannot find symbol\n            prev =\
    \ curr = e;\n                          ^\n  symbol:   variable e\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011741
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        final long min = l.stream().mapToLong(e\
    \ -> e).min().getAsLong();\n        final long max = l.stream().mapToLong(e ->\
    \ e).max().getAsLong();\n        final boolean ascending = (min < max);\n    \
    \    if(ascending)\n            return l.stream().mapToLong(e -> e).allMatch(e\
    \ -> e >= min);\n        else\n            return l.stream().mapToLong(e -> e).allMatch(e\
    \ -> e <= max);\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo0t9o7vo.java:28)\n"
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        for(int i = 0; i < l.size()-1; i++)\
    \ {\n            int j;\n            for(j = i; j < l.size(); j++) {\n       \
    \         if(l.get(i) > l.get(j)) {\n                    return false;\n     \
    \           }\n            }\n        }\n        return true;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp87nz2mvc.java:31)\n"
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        int length = l.size();\n        boolean\
    \ ret = true;\n        int index = 0;\n        int i;\n\n        for (i = 1; i\
    \ < length; i++) {\n            Long last = l.get(index - 1);\n            Long\
    \ current = l.get(i);\n            if (current < last) {\n                ret\
    \ = false;\n                break;\n            }\n            index++;\n    \
    \    }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ -1 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.monotonic(tmpnle6hpid.java:23)\n\tat Problem.main(tmpnle6hpid.java:34)\n"
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 3)\n            return\
    \ true;\n        return !l.isEmpty() && l.stream().allMatch(i -> {\n         \
    \   boolean increasing = false;\n            boolean decreasing = false;\n   \
    \         if (i < l.stream().max(Integer::compare).get())\n                increasing\
    \ = true;\n            if (i > l.stream().min(Integer::compare).get())\n     \
    \           decreasing = true;\n            return increasing || decreasing;\n\
    \        });\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl89z5cv3.java:22: error: incompatible types: invalid method reference\n\
    \            if (i < l.stream().max(Integer::compare).get())\n               \
    \                    ^\n    incompatible types: Long cannot be converted to int\n\
    /tmp/tmpl89z5cv3.java:24: error: incompatible types: invalid method reference\n\
    \            if (i > l.stream().min(Integer::compare).get())\n               \
    \                    ^\n    incompatible types: Long cannot be converted to int\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long min = Long.MAX_VALUE;\n       \
    \ Long max = Long.MIN_VALUE;\n\n        for (Long i : l) {\n            if (i\
    \ < min) {\n                min = i;\n            }\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        if (min == max)\
    \ {\n            return true;\n        } else {\n            return false;\n \
    \       }\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzljpyi1v.java:35)\n"
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Arrays.sort(l);\n        if (l.size()\
    \ > 1) {\n            for (int i = 0; i < l.size() - 1; i++) {\n             \
    \   if (l.get(i) > l.get(i + 1)) {\n                    return false;\n      \
    \          }\n            }\n            return true;\n        } else {\n    \
    \        return l.size() == 1 && l.get(0) > l.get(1);\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvogyb5ne.java:17: error: no suitable method found for sort(ArrayList<Long>)\n\
    \        Arrays.sort(l);\n              ^\n    method Arrays.sort(int[]) is not\
    \ applicable\n      (argument mismatch; ArrayList<Long> cannot be converted to\
    \ int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument mismatch;\
    \ ArrayList<Long> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Long> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Long> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Long prev = l.get(0);\n        for (int\
    \ i = 1; i < l.size(); ++i) {\n            Long current = l.get(i);\n        \
    \    if (!Long.isNaN(current) && current < prev) {\n                return false;\n\
    \            }\n            prev = current;\n        }\n        return true;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp78xzsxwh.java:20: error: cannot find symbol\n            if (!Long.isNaN(current)\
    \ && current < prev) {\n                     ^\n  symbol:   method isNaN(Long)\n\
    \  location: class Long\n1 error\n"
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n      \
    \  long prev = (long)0;\n        long curr = Long.MAX_VALUE;\n        for (long\
    \ v : l) {\n            if (v < curr) {\n                isMonotonic = false;\n\
    \            }\n            if (v > curr) {\n                curr = v;\n     \
    \       }\n            prev = v;\n        }\n        return isMonotonic;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc9qwg_g0.java:32)\n"
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        int i = l.size() - 1;\n        Long\
    \ a = l.get(i);\n        Long b = l.get(i-1);\n        while (i >= 0 && b < a)\n\
    \            a += l.get(i--);\n        while (i >= 0 && b > a)\n            b\
    \ -= l.get(i--);\n        return b > a;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsjlj60wi.java:27)\n"
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return Arrays.stream(l.subList(1, l.size())).anyMatch(l\
    \ -> l.equals(Collections.max(l)));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf0qhzgaq.java:17: error: no suitable method found for stream(List<Long>)\n\
    \        return Arrays.stream(l.subList(1, l.size())).anyMatch(l -> l.equals(Collections.max(l)));\n\
    \                     ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; List<Long>\
    \ cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; List<Long> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; List<Long> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; List<Long> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmpf0qhzgaq.java:17: error: variable l is already defined in method monotonic(ArrayList<Long>)\n\
    \        return Arrays.stream(l.subList(1, l.size())).anyMatch(l -> l.equals(Collections.max(l)));\n\
    \                                                              ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011742
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Find first and last elements of list\n\
    \        Long first = l.get(0);\n        Long last = l.get(l.size() - 1);\n\n\
    \        // Return true if the list elements are monotonically increasing or decreasing\n\
    \        boolean increasing = true;\n        if (first < last) {\n           \
    \ for (int i = 0; i < l.size(); i++) {\n                Long curr = l.get(i);\n\
    \                Long next = l.get(i + 1);\n                if (curr > next) {\n\
    \                    increasing = false;\n                }\n            }\n \
    \       }\n        return increasing;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 4 out of bounds for length 4\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.monotonic(tmpp9fuafd1.java:26)\n\tat Problem.main(tmpp9fuafd1.java:35)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = true;\n\n    \
    \    ListIterator<Long> listIterator = l.listIterator();\n        long current\
    \ = listIterator.next();\n        while (listIterator.hasNext()) {\n         \
    \   long next = listIterator.next();\n            if (!isMonotonic && current\
    \ < next) {\n                isMonotonic = true;\n            } else if (isMonotonic\
    \ && current > next) {\n                isMonotonic = false;\n            }\n\
    \            current = next;\n        }\n\n        return isMonotonic;\n    }\n\
    \    public static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprutivhsu.java:36)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean monotonic = true;\n        long\
    \ previous = -1l; // previous value\n        for (long x : l)\n            if\
    \ (x < previous) // monotonically increasing\n                monotonic = false;\n\
    \            else\n                previous = x;\n        return monotonic;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqsgstxbv.java:30)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.isEmpty()) return true;\n    \
    \    \n        Set<Long> l1 = new HashSet<Long>(l);\n        l1.retainAll(l);\n\
    \        \n        if (l1.size() == 0) return false;\n        \n        Iterator<Long>\
    \ i1 = l1.iterator();\n        Long minVal = l1.iterator().next();\n        \n\
    \        while (i1.hasNext()) {\n            Long curVal = i1.next();\n      \
    \      if (curVal < minVal) {\n                minVal = curVal;\n            }\n\
    \            if (curVal > minVal) {\n                return false;\n         \
    \   }\n        }\n        \n        return true;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn8r3zv0i.java:40)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) {\n            return\
    \ false;\n        }\n        boolean decreasing = true;\n        boolean decreasingSet\
    \ = false;\n        Long previous = l.get(0);\n        Long current;\n       \
    \ for (int i = 1; i < l.size(); i++) {\n            current = l.get(i);\n    \
    \        if (current < previous) {\n                decreasingSet = true;\n  \
    \              if (decreasing) {\n                    decreasing = false;\n  \
    \              } else {\n                    decreasing = true;\n            \
    \    }\n            }\n            if (current > previous) {\n               \
    \ decreasing = true;\n                if (decreasingSet) {\n                 \
    \   decreasingSet = false;\n                } else {\n                    decreasingSet\
    \ = true;\n                }\n            }\n            previous = current;\n\
    \        }\n        return decreasing || (decreasingSet && l.size() > 0);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpthag72v3.java:49)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean b = false;\n        if (l.isEmpty())\n\
    \            return b;\n        l.sort(Comparator.reverseOrder());\n        if\
    \ (l.get(0) == l.get(1))\n            b = true;\n        else\n            b =\
    \ false;\n        return b;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7p7gg7rt.java:28)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // Write your code here.\n        ArrayList\
    \ <Long> list = new ArrayList <Long> ();\n        for (int i = 0; i < l.size();\
    \ i++) {\n            list.add(l.get(i));\n        }\n        if (list.size()\
    \ < 2) {\n            return false;\n        }\n        for (int i = 1; i < list.size();\
    \ i++) {\n            if (list.get(i) > list.get(i-1)) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8d0_fdq.java:33)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ true;\n        }\n        Long prev = l.get(0);\n        for (Long current :\
    \ l) {\n            if (current < prev) {\n                return false;\n   \
    \         }\n            prev = current;\n        }\n        return true;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvzzvfbz6.java:33)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isMonotonic = false;\n     \
    \   // If the array is empty, return false immediately\n        if (l.isEmpty())\
    \ {\n            return isMonotonic;\n        }\n        // Sort the array in-place,\
    \ from lowest to highest\n        l.sort((o1, o2) -> o1.compareTo(o2));\n    \
    \    // Check to see if any of the elements are equal\n        Long minValue =\
    \ l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i).equals(minValue))\
    \ {\n                isMonotonic = true;\n            }\n        }\n        return\
    \ isMonotonic;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzm52fixg.java:34)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return l.stream().allMatch(i -> {\n\
    \            long a = l.get(0);\n            long b = i;\n            return a\
    \ <= b || a >= b + 1 ? false : true;\n        });\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5u0tf2i1.java:24)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() == 0) return false;\n \
    \       if (l.size() == 1) return true;\n        l.sort(Comparator.comparingLong(Long::longValue));\n\
    \        Long firstVal = l.get(0);\n        Long lastVal = l.get(l.size() - 1);\n\
    \        return (lastVal <= firstVal);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2zblzz6c.java:25)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if(l.isEmpty()) return false;\n    \
    \    else if(l.size() == 1) return l.get(0) == l.get(1);\n        else if(l.size()\
    \ == 2) return l.get(0) == l.get(1) && l.get(0) > l.get(1);\n        int i1 =\
    \ l.size() - 1;\n        int i2 = l.size() - 2;\n        Long ll = l.get(i1);\n\
    \        Long l2 = l.get(i2);\n        Long ll2 = ll;\n        while(true) {\n\
    \            if(i1 < 0) return false;\n            if(i2 < 0) return true;\n \
    \           if(l.get(i1) < l.get(i2)) return true;\n            if(l.get(i1) >\
    \ l.get(i2)) return false;\n            if(i1 > i2) return false;\n          \
    \  if(i2 > i1) return true;\n            if(ll < ll2) return true;\n         \
    \   if(ll > ll2) return false;\n            ll = l.get(i1);\n            ll2 =\
    \ ll;\n            i1--;\n            i2--;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6uhs613z.java:41)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        l.sort(Comparator.reverseOrder());\n\
    \        if (l.size() == 0) {\n            return true;\n        }\n        Long\
    \ first = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n          \
    \  Long c = l.get(i);\n            if (c < first) {\n                return false;\n\
    \            } else if (c > first) {\n                return true;\n         \
    \   }\n        }\n        return false;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_7r0wvrv.java:33)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean ok = true;\n        Long prev\
    \ = l.get(0);\n        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i)\
    \ >= prev) {\n                ok = false;\n            }\n            prev = l.get(i);\n\
    \        }\n        return ok;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l,\
    \ (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjp1ens97.java:28)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        int n = l.size();\n        if (n < 2)\
    \ return true;\n        Long prev = null;\n        Long curr = null;\n       \
    \ Long next = null;\n        for (long i = 0; i < n; ++i) {\n            if (prev\
    \ == null)\n                prev = curr = (long)l.get(i);\n            else if\
    \ (curr == null)\n                next = (long)l.get(i);\n            else\n \
    \               curr = (long)((long)curr + (long)((long)next - prev));\n     \
    \       prev = curr;\n        }\n        if (curr == null)\n            return\
    \ prev <= next;\n        else\n            return curr < next;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxshxwx4c.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n                prev = curr = (long)l.get(i);\n          \
    \                                ^\n/tmp/tmpxshxwx4c.java:26: error: incompatible\
    \ types: possible lossy conversion from long to int\n                next = (long)l.get(i);\n\
    \                                   ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        return !l.isEmpty() && l.get(l.size()\
    \ - 1) == l.get(0);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn5kz_kd_.java:20)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        if (l.size() < 2) {\n            return\
    \ false;\n        }\n        Long m1 = l.get(0);\n        Long m2 = l.get(1);\n\
    \        for (int i = 1; i < l.size(); i++) {\n            if (l.get(i) <= m1)\
    \ {\n                m2 = m1;\n                m1 = l.get(i);\n            } else\
    \ {\n                long delta = (l.get(i) - m2);\n                if (m2 - m1\
    \ < delta) {\n                    m1 = m2;\n                    m2 = l.get(i);\n\
    \                } else {\n                    return false;\n               \
    \ }\n            }\n        }\n        return true;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe5dfv19n.java:39)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isIncreasing = true;\n     \
    \   long max = Long.MIN_VALUE;\n        for (long el : l) {\n            if (el\
    \ > max) {\n                isIncreasing = false;\n                max = el;\n\
    \            }\n        }\n        return isIncreasing;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjiuod78c.java:28)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Set<Long> s = l.stream().mapToLong(i\
    \ -> i).toSet();\n        Set<Long> u = s.stream().distinct().collect(Collectors.toSet());\n\
    \        if (u.size() == 1) {\n            return true;\n        }\n        boolean\
    \ b = false;\n        for (Long s : l) {\n            if (s.compareTo(s.get())\
    \ <= 0) {\n                b = true;\n            }\n        }\n        return\
    \ b;\n    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpez97g1ho.java:17: error: cannot find symbol\n        Set<Long>\
    \ s = l.stream().mapToLong(i -> i).toSet();\n                                \
    \                  ^\n  symbol:   method toSet()\n  location: interface LongStream\n\
    /tmp/tmpez97g1ho.java:23: error: variable s is already defined in method monotonic(ArrayList<Long>)\n\
    \        for (Long s : l) {\n                  ^\n/tmp/tmpez97g1ho.java:24: error:\
    \ cannot find symbol\n            if (s.compareTo(s.get()) <= 0) {\n         \
    \                    ^\n  symbol:   method get()\n  location: variable s of type\
    \ Long\n3 errors\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        boolean isSorted = true;\n        if\
    \ (l.size() < 2)\n            return true;\n        long minVal = l.get(0);\n\
    \        long maxVal = l.get(l.size()-1);\n        for (long i = 1, len = l.size()\
    \ - 1; i < len; i++)\n            if (l.get(i) < minVal)\n                minVal\
    \ = l.get(i);\n            else if (l.get(i) > maxVal)\n                maxVal\
    \ = l.get(i);\n        if (maxVal < minVal)\n            isSorted = false;\n \
    \       return !isSorted;\n    }\n    public static void main(String[] args) {\n\
    \    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l,\
    \ (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphs_u3334.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (l.get(i) < minVal)\n                     \
    \ ^\n/tmp/tmphs_u3334.java:24: error: incompatible types: possible lossy conversion\
    \ from long to int\n                minVal = l.get(i);\n                     \
    \          ^\n/tmp/tmphs_u3334.java:25: error: incompatible types: possible lossy\
    \ conversion from long to int\n            else if (l.get(i) > maxVal)\n     \
    \                      ^\n/tmp/tmphs_u3334.java:26: error: incompatible types:\
    \ possible lossy conversion from long to int\n                maxVal = l.get(i);\n\
    \                               ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        Comparator<Long> cmp = Long::compare;\n\
    \        boolean res = true;\n        for (int i = 0; i < l.size(); i++) {\n \
    \           if (i == 0) continue;\n            Long a = l.get(i);\n          \
    \  Long b = l.get(i-1);\n            if (a == b) {\n                res = cmp.compare(a,\
    \ b) >= 0;\n                break;\n            }\n            if (res == false)\
    \ {\n                return false;\n            }\n        }\n        return res;\n\
    \    }\n    public static void main(String[] args) {\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)4l, (long)10l)))) ==\
    \ (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptrfdivmv.java:36)\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        ArrayList<Long> temp = l.stream().sorted().collect(Collectors.toList());\n\
    \        return temp.get(0) > temp.get(temp.size()-1);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp28g9d6ew.java:17: error: incompatible types: inference variable\
    \ R has incompatible bounds\n        ArrayList<Long> temp = l.stream().sorted().collect(Collectors.toList());\n\
    \                                                          ^\n    equality constraints:\
    \ List<T#2>\n    lower bounds: ArrayList<Long>,Object\n  where R,A,T#1,T#2 are\
    \ type-variables:\n    R extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    A extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    T#1 extends Object declared in interface Stream\n    T#2\
    \ extends Object declared in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011743
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Return true is array list elements are monotonically increasing\
    \ or decreasing.\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n    // (true)\n    // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \    // (false)\n    // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n    // (true)\n    public static boolean\
    \ monotonic(ArrayList<Long> l) {\n        // The elements are monotonically increasing\
    \ or decreasing.\n        // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l))))\n        // (true)\n        // >>> monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)20l, (long)4l, (long)10l))))\n\
    \        // (false)\n        // >>> monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l))))\n        // (true)\n        if (l.size()\
    \ < 2) { return false; }\n        if (l.size() == 2) { return l.contains(l.get(0));\
    \ }\n        Long mid = l.get(l.size()/2);\n        Long low = l.get(0);\n   \
    \     Long high = l.get(1);\n        for (int i = 2; i < l.size(); ++i) {\n  \
    \          Long curr = l.get(i);\n            if (curr > high) { high = curr;\
    \ }\n            if (curr < low) { low = curr; }\n        }\n        return ((high\
    \ - low) <= mid && low >= mid && high <= mid);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)4l, (long)20l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)20l, (long)4l, (long)10l)))) == (false));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)0l, (long)-10l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)4l,\
    \ (long)1l, (long)1l, (long)0l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)1l,\
    \ (long)2l, (long)3l, (long)2l, (long)5l, (long)60l)))) == (false));\n    assert(monotonic((new\
    \ ArrayList<Long>(Arrays.asList((long)1l, (long)2l, (long)3l, (long)4l, (long)5l,\
    \ (long)60l)))) == (true));\n    assert(monotonic((new ArrayList<Long>(Arrays.asList((long)9l,\
    \ (long)9l, (long)9l, (long)9l)))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ucjql3d.java:37)\n"
  stdout: ''
  timestamp: 1660011743
