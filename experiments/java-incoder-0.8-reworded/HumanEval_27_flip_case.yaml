name: HumanEval_27_flip_case
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // For a given string, flip lowercase characters to uppercase\
  \ and uppercase to lowercase.\n    // >>> flipCase((\"Hello\"))\n    // (\"hELLO\"\
  )\n    public static String flipCase(String string) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(flipCase((\"\
  \")).equals((\"\")));\n    assert(flipCase((\"Hello!\")).equals((\"hELLO!\")));\n\
  \    assert(flipCase((\"These violent delights have violent ends\")).equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ['        return string.toLowerCase().replaceAll("([a-z])", m -> m.toUpperCase());',
  "        StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            builder.append(Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c));\n        }\n        return builder.toString();",
  "        // Your code here\n        String returnString = \"\";\n        char firstLetter\
    \ = string.charAt(0);\n        char secondLetter = string.charAt(1);\n       \
    \ char thirdLetter = string.charAt(2);\n        returnString = returnString.concat(firstLetter);\n\
    \        returnString = returnString.concat(secondLetter);\n        returnString\
    \ = returnString.concat(thirdLetter);\n        returnString = returnString.concat(firstLetter.toUpperCase());\n\
    \        returnString = returnString.concat(secondLetter.toUpperCase());\n   \
    \     returnString = returnString.concat(thirdLetter.toUpperCase());\n       \
    \ return returnString;", "        String result = \"\";\n        for(int i=0;i<string.length();i++)\
    \ {\n            result += (char)(string.charAt(i) + 32); // Convert to ASCII\
    \ character\n        }\n        return result;", "        return string.chars().map((c)\
    \ -> (char) (c >= 'a' && c <= 'z' ? (c - 'a' + 'A') : c))\n                .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append).toString();", "     \
    \   char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            char c = charArray[i];\n            if (c > 96 && c < 123)\
    \ {\n                charArray[i] = (char)(c - 32);\n            } else if (c\
    \ > 64 && c < 91) {\n                charArray[i] = (char)(c + 32);\n        \
    \    }\n        }\n        return String.valueOf(charArray);", "        char[]\
    \ charArray = string.toCharArray();\n        for(int i = 0; i < charArray.length;\
    \ i++) {\n            char ch = charArray[i];\n            if (Character.isLowerCase(ch))\
    \ {\n                charArray[i] = Character.toUpperCase(ch);\n            }\
    \ else {\n                charArray[i] = Character.toLowerCase(ch);\n        \
    \    }\n        }\n        return new String(charArray);", "        return string.chars().mapToObj(c\
    \ -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c))\n\
    \        .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \        .toString();", "        if (string.isEmpty()) {\n            return string;\n\
    \        }\n        StringBuilder sb = new StringBuilder(string);\n        for\
    \ (int i = 0; i < sb.length(); i++) {\n            char c = sb.charAt(i);\n  \
    \          if (Character.isLowerCase(c)) {\n                sb.setCharAt(i, Character.toUpperCase(c));\n\
    \            } else if (Character.isUpperCase(c)) {\n                sb.setCharAt(i,\
    \ Character.toLowerCase(c));\n            }\n        }\n        return sb.toString();",
  "        boolean swap = true;\n        StringBuilder result = new StringBuilder();\n\
    \n        for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if(c == ' ') {\n                swap = !swap;\n            } else\
    \ {\n                result.append((swap ? Character.toUpperCase(c) : Character.toLowerCase(c)));\n\
    \                swap = !swap;\n            }\n        }\n        return result.toString();",
  '        return string.replaceAll("[a-z]", string.charAt(0)+string.substring(1).toLowerCase());',
  "        StringBuilder builder = new StringBuilder();\n        for (int i = 0; i\
    \ < string.length(); i++) {\n            char current = string.charAt(i);\n  \
    \          if (current == ' ' || current == '\\t' || current == '\\n' || current\
    \ == '\\r' || current == '\\v' || current == '\\f') {\n                builder.append(current);\n\
    \            } else if (Character.isLowerCase(current)) {\n                builder.append(Character.toUpperCase(current));\n\
    \            } else {\n                builder.append(Character.toLowerCase(current));\n\
    \            }\n        }\n        return builder.toString();", "        if (string\
    \ == null || string.length() == 0) {\n            return \"\";\n        }\n  \
    \      return string.toUpperCase().replaceAll(\"(.)([A-Z]+)\", \"$1\" + \"$2\"\
    ).toLowerCase().replaceAll(\"([a-z])([A-Z])\", \"$1 $2\");", "        String[]\
    \ characters = string.split(\"\");\n        StringBuilder builder = new StringBuilder();\n\
    \        for (String character : characters) {\n            if (character.equalsIgnoreCase(\"\
    a\")) {\n                builder.append(\"B\");\n            } else if (character.equalsIgnoreCase(\"\
    b\")) {\n                builder.append(\"a\");\n            } else if (character.equalsIgnoreCase(\"\
    c\")) {\n                builder.append(\"d\");\n            } else if (character.equalsIgnoreCase(\"\
    d\")) {\n                builder.append(\"c\");\n            } else if (character.equalsIgnoreCase(\"\
    e\")) {\n                builder.append(\"f\");\n            } else if (character.equalsIgnoreCase(\"\
    f\")) {\n                builder.append(\"e\");\n            } else if (character.equalsIgnoreCase(\"\
    g\")) {\n                builder.append(\"h\");\n            } else if (character.equalsIgnoreCase(\"\
    h\")) {\n                builder.append(\"g\");\n            } else if (character.equalsIgnoreCase(\"\
    i\")) {\n                builder.append(\"j\");\n            } else if (character.equalsIgnoreCase(\"\
    j\")) {\n                builder.append(\"i\");\n            } else if (character.equalsIgnoreCase(\"\
    k\")) {\n                builder.append(\"l\");\n            } else if (character.equalsIgnoreCase(\"\
    l\")) {\n                builder.append(\"k\");\n            } else if (character.equalsIgnoreCase(\"\
    m\")) {\n                builder.append(\"n\");\n            } else if (character.equalsIgnoreCase(\"\
    n\")) {\n                builder.append(\"m\");\n            } else if (character.equalsIgnoreCase(\"\
    o\")) {\n                builder.append(\"p\");\n            } else if (character.equalsIgnoreCase(\"\
    p\")) {\n                builder.append(\"o\");\n            } else if (character.equalsIgnoreCase(\"\
    q\")) {\n                builder.append(\"q\");\n            } else if (character.equalsIgnoreCase(\"\
    r\")) {\n                builder.append(\"s\");\n            } else if (character.equalsIgnoreCase(\"\
    s\")) {\n                builder.append(\"r\");\n            } else if (character.equalsIgnoreCase(\"\
    t\")) {\n                builder.append(\"u\");\n            } else if (character.equalsIgnoreCase(\"\
    u\")) {\n                builder.append(\"t\");\n            } else if (character.equalsIgnoreCase(\"\
    v\")) {\n                builder.append(\"w\");\n            } else if (character.equalsIgnoreCase(\"\
    w\")) {\n                builder.append(\"v\");\n            } else if (character.equalsIgnoreCase(\"\
    w\")) {\n                builder.append(\"y\");\n            } else if (character.equalsIgnoreCase(\"\
    y\")) {\n                builder.append(\"x\");\n            } else if (character.equalsIgnoreCase(\"\
    z\")) {\n                builder.append(\"2\");\n            } else if (character.equalsIgnoreCase(\"\
    z\")) {\n                builder.append(\"1\");\n            }\n            builder.append(character);\n\
    \        }\n        return builder.toString();", "        return string.chars().map(Character::toLowerCase)\n\
    \                            .map(b -> Character.toUpperCase(b))\n           \
    \                 .collect(StringBuilder::new,\n                             \
    \       StringBuilder::appendCodePoint, StringBuilder::append)\n             \
    \               .toString();", "        // Write your code here\n        char[]\
    \ c = string.toCharArray();\n        StringBuilder str = new StringBuilder();\n\
    \        for (int i = 0; i < c.length; i++)\n            if (Character.isLowerCase(c[i]))\n\
    \                c[i] = Character.toUpperCase(c[i]);\n            else\n     \
    \           c[i] = Character.toLowerCase(c[i]);\n        str.append(new String(c));\n\
    \        return str.toString();", "        Map<Character, Character> map = new\
    \ HashMap<>();\n        for (char letter : string.toCharArray()) {\n         \
    \   if (Character.isLowerCase(letter)) {\n                map.put(letter, Character.toUpperCase(letter));\n\
    \            } else {\n                map.put(letter, Character.toLowerCase(letter));\n\
    \            }\n        }\n\n        // Convert the map into a String and return\
    \ the result.\n        return map.values().toString();", "        char[] charArray\
    \ = string.toCharArray();\n        Arrays.sort(charArray);\n        return new\
    \ String(charArray);", '        return string.toUpperCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', "        return new StringBuilder(string).replaceAll(\n\
    \                Pattern.compile(\"[a-z]\", Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE),\n\
    \                letter -> Character.toUpperCase(letter.charValue())).replaceAll(\n\
    \                Pattern.compile(\"[A-Z]\", Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE),\n\
    \                letter -> Character.toLowerCase(letter.charValue())).toString();",
  "        StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isLowerCase(c)) {\n                builder.append(Character.toUpperCase(c));\n\
    \            } else {\n                builder.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        for (char c : charArray) {\n    \
    \        if (Character.isUpperCase(c)) {\n                charArray[c] = Character.toLowerCase(c);\n\
    \            }\n            else if (Character.isLowerCase(c)) {\n           \
    \     charArray[c] = Character.toUpperCase(c);\n            }\n        }\n   \
    \     return new String(charArray);", "        return string.toUpperCase().replaceAll(\"\
    (.)([a-z])\", m -> m.group(1) + m.group(2)\n                .substring(1).toLowerCase());",
  "        return string.toLowerCase()\n                    .chars()\n           \
    \         .map(Character::toUpperCase)\n                    .map(Character::toLowerCase)\n\
    \                    .collect(Collectors.joining());", "        List<Character>\
    \ letters = string.chars()\n                .mapToObj(c -> (char) c)\n       \
    \         .collect(Collectors.toList());\n        StringBuilder result = new StringBuilder();\n\
    \        letters.forEach(l -> {\n            if (l.toUpperCase() != l) {\n   \
    \             result.append(l);\n            }\n            if (l.toLowerCase()\
    \ != l) {\n                result.append(l.toUpperCase());\n            }\n  \
    \      });\n        return result.toString();", "        StringBuilder result\
    \ = new StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            if (Character.isUpperCase(c))\n\
    \                result.append((char) Character.toUpperCase(c));\n           \
    \ else\n                result.append((char) Character.toLowerCase(c));\n    \
    \    }\n        return result.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        if (string\
    \ == null || string.length() == 0) {\n            return string;\n        }\n\
    \        String newString = \"\";\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (Character.isUpperCase(string.charAt(i))) {\n       \
    \         newString += Character.toLowerCase(string.charAt(i));\n            }\
    \ else if (Character.isLowerCase(string.charAt(i))) {\n                newString\
    \ += Character.toUpperCase(string.charAt(i));\n            } else {\n        \
    \        newString += string.charAt(i);\n            }\n        }\n        return\
    \ newString;", "        StringBuilder newString = new StringBuilder();\n     \
    \   for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                newString.append(Character.toUpperCase(c));\n           \
    \ } else {\n                newString.append(Character.toLowerCase(c));\n    \
    \        }\n        }\n        return newString.toString();", "        char[]\
    \ charArray = string.toCharArray();\n        for(char c : charArray) {\n     \
    \       boolean upperCase = false;\n            if((c >= 'a' && c <= 'z') || (c\
    \ >= 'A' && c <= 'Z')) {\n                upperCase = true;\n            }\n \
    \           if(!upperCase) {\n                c = Character.toUpperCase(c);\n\
    \            }\n            charArray[charArray.length-1] = c;\n        }\n  \
    \      return new String(charArray);", "        string = string.trim();\n    \
    \    return string.chars().mapToObj(c -> (char) (c - 'a' + 'A')).collect(Collectors.joining());",
  "        return string.chars().mapToObj(c -> (char)((c>='a') ? (c-'a'+26) : (c>='A')\
    \ ? (c-'A'+26) : c))\n                           .map(String::toUpperCase)\n \
    \                          .collect(Collectors.joining());", '        return string.chars().mapToObj(c
    -> Character.isLowerCase(c) ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining(""));',
  "        string =\n                string\n                        .replaceAll(\"\
    [a-z]\", \"[A-Z]\")\n                        .replaceAll(\"[A-Z]\", \"[a-z]\"\
    )\n                        .toUpperCase()\n                        .replaceAll(\"\
    [^A-Z]\", \"\")\n                        .trim();\n        return string;", " \
    \       char[] charArray = string.toCharArray();\n        for (int i = 0; i <\
    \ charArray.length; i++) {\n            if (Character.isLowerCase(charArray[i]))\
    \ {\n                charArray[i] = Character.toUpperCase(charArray[i]);\n   \
    \         } else if (Character.isUpperCase(charArray[i])) {\n                charArray[i]\
    \ = Character.toLowerCase(charArray[i]);\n            }\n        }\n        return\
    \ new String(charArray);", "        return string.chars().mapToObj(i -> (char)\
    \ (i + 32))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", "        List<Character>\
    \ result = new ArrayList<>();\n        for (char c : string.toCharArray()) {\n\
    \            if (Character.isLetter(c)) {\n                c = Character.toUpperCase(c);\n\
    \            } else {\n                c = Character.toLowerCase(c);\n       \
    \     }\n            result.add(c);\n        }\n        return new String(result);",
  '        return string.chars().mapToObj(i -> (char) (i + 32)).collect(Collectors.joining());',
  "        return string.chars().mapToObj(i -> Character.toUpperCase(i))\n       \
    \         .collect(Collectors.joining());", '        return string.chars().map(i
    -> Character.isUpperCase(i) ? Character.toLowerCase(i) : Character.toUpperCase(i)).collect(Collectors.joining());',
  "        StringBuilder result = new StringBuilder(string);\n        for (int i =\
    \ 0; i < result.length(); i++) {\n            char c = result.charAt(i);\n   \
    \         result.setCharAt(i, Character.toUpperCase(c));\n            if (result.charAt(i)\
    \ == Character.toLowerCase(c)) {\n                result.setCharAt(i, Character.toUpperCase(c));\n\
    \            }\n        }\n        return result.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            if (string.charAt(i) >= 'a' && string.charAt(i) <= 'z') {\n \
    \               sb.append(string.charAt(i) + 'A' - 'a');\n            }\n    \
    \        else if (string.charAt(i) >= 'A' && string.charAt(i) <= 'Z') {\n    \
    \            sb.append(string.charAt(i) + 'a' - 'A');\n            }\n       \
    \     else {\n                sb.append(string.charAt(i));\n            }\n  \
    \      }\n        return sb.toString();", '        return string.toUpperCase().replaceAll("(^[a-z]+)|([A-Z]+$)",
    match -> match.toUpperCase());', "        return string.chars()\n            \
    \    .mapToObj(c -> (char) (c == c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()))\n\
    \                .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append).toString();", '        return string.replaceAll("([a-z])",
    m -> m.group(1).toUpperCase());', "        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            boolean upCase = Character.isUpperCase(c);\n            boolean lowCase\
    \ = Character.isLowerCase(c);\n            result.append(upCase ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c));\n        }\n        return result.toString();",
  "        StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isUpperCase(c)) {\n                builder.append(Character.toLowerCase(c));\n\
    \            } else {\n                builder.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return builder.toString();", "        char[]\
    \ characters = string.toCharArray();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (isLowerCase(characters[i])) {\n                characters[i]\
    \ = Character.toUpperCase(characters[i]);\n            } else if (isUpperCase(characters[i]))\
    \ {\n                characters[i] = Character.toLowerCase(characters[i]);\n \
    \           }\n        }\n        return new String(characters);", "        return\
    \ string.replaceAll(\"[a-z]\", (char) ('Z' - 'a' + 1))\n                    .replaceAll(\"\
    [A-Z]\", (char) ('a' + 1 -'A'));", "        if (string == null || string.isEmpty())\
    \ return null;\n        int length = string.length();\n        StringBuilder builder\
    \ = new StringBuilder(length);\n        for (int i = 0; i < length; i++) {\n \
    \           char c = string.charAt(i);\n            if (c == ' ' || c == '.' ||\
    \ c == '-' || c == '_') {\n                builder.append(' ');\n            \
    \    continue;\n            }\n            int charIndex = Character.toUpperCase(c)\
    \ - 'A';\n            builder.append((charIndex < 0 ? c : String.valueOf((charIndex\
    \ + 26))));\n        }\n        return builder.toString();", "        if (string.isEmpty())\
    \ {\n            return string;\n        }\n        StringBuilder result = new\
    \ StringBuilder(string);\n        for (int i = 0; i < result.length(); i++) {\n\
    \            result.insert(i, Character.toUpperCase(string.charAt(i)));\n    \
    \    }\n        return result.toString();", "        String upperCase = string.substring(0,\
    \ string.length()-1);\n        String lowerCase = string.substring(string.length()-1,\
    \ string.length());\n        return lowerCase.toUpperCase() + upperCase.toLowerCase();",
  "        return string.chars()\n            .mapToObj(c -> (char) Character.toUpperCase((char)\
    \ c))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", "        if (string.isEmpty())\
    \ return string;\n        char[] chars = string.toCharArray();\n        StringBuilder\
    \ builder = new StringBuilder(string);\n        for (char c : chars) builder.append(Character.toUpperCase(c));\n\
    \        return builder.toString();", "        String newString = \"\";\n    \
    \    for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                newString += Character.toUpperCase(c);\n            } else\
    \ {\n                newString += Character.toLowerCase(c);\n            }\n \
    \       }\n        return newString;", '        return string.toUpperCase()+string.substring(0,1).toLowerCase()+string.substring(1);',
  "        StringBuilder builder = new StringBuilder();\n        for (char character\
    \ : string.toCharArray()) {\n            if (Character.isLowerCase(character))\
    \ {\n                builder.append(Character.toUpperCase(character));\n     \
    \       } else {\n                builder.append(Character.toLowerCase(character));\n\
    \            }\n        }\n        return builder.toString();", "        return\
    \ string.chars()\n                .mapToObj(i -> (char) i)\n                .collect(Collectors.joining(\"\
    \").toUpperCase());", "        char[] charArray = string.toCharArray();\n    \
    \    charArray = Arrays.stream(charArray).map(i -> Character.toLowerCase(i)).collect(Collectors.toList());\n\
    \        return new String(charArray);", "        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        char[] flipped = new char[charArray.length];\n\
    \        for(int i = 0; i < charArray.length; i++) {\n            if(charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                flipped[i] = (char)(charArray[i]\
    \ - 32);\n            } else if(charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                flipped[i] = (char)(charArray[i] - 32);\n            } else {\n\
    \                flipped[i] = charArray[i];\n            }\n        }\n      \
    \  return new String(flipped);", "        \n        \n        \n\n        ", " \
    \       return new StringBuilder()\n                .append(Character.toLowerCase(string.charAt(0)))\n\
    \                .append(Character.toUpperCase(string.charAt(string.length() -\
    \ 1)))\n                .toString();", "        return string.chars().mapToObj(c\
    \ -> (char) (c == 'a' ? 'A' : (char) (c == 'A' ? 'a' : 'B'))).toArray(String[]::new);",
  "        char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            if (charArray[i] >= 65 && charArray[i] <= 90) {\n      \
    \          charArray[i] -= 32;\n            } else if (charArray[i] >= 97 && charArray[i]\
    \ <= 122) {\n                charArray[i] += 32;\n            }\n        }\n \
    \       return new String(charArray);", "        return string.chars().mapToObj(c\
    \ -> c == (char) (c >= 'a' && c <= 'z') ? Character.toUpperCase(c) : Character.toLowerCase(c)).collect(Collectors.joining());",
  "        return string.toUpperCase().replace(' ', '_').replaceAll(\"[^A-Z]\", \"\
    \");", "        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        String reverse = new String(charArray);\n        Arrays.sort(reverse.toCharArray());\n\
    \        return reverse;", "        String result = \"\";\n        for (int i\
    \ = 0; i < string.length(); i++) {\n            char character = string.charAt(i);\n\
    \            if ((Character.isLowerCase(character))) {\n                result\
    \ += Character.toUpperCase(character);\n            } else {\n               \
    \ result += Character.toLowerCase(character);\n            }\n        }\n    \
    \    return result;", '        return string.toUpperCase().replaceAll("(?i)[a-z]",
    "[A-Z]").replaceAll("(?i)[A-Z]", "[a-z]");', "        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ result = new StringBuilder();\n        for (int i = 0; i < string.length();\
    \ i++) {\n            char c = string.charAt(i);\n            if (Character.isLowerCase(c))\
    \ {\n                result.append((char) ('A' + c - 'a'));\n            } else\
    \ {\n                result.append(c);\n            }\n        }\n        return\
    \ result.toString();", "        \n        StringBuilder upperCaseStringBuilder\
    \ = new StringBuilder();\n        \n        for(int i = 0; i < string.length();\
    \ i++) {\n            \n            if(Character.isLowerCase(string.charAt(i)))\
    \ {\n                \n                upperCaseStringBuilder.append(Character.toUpperCase(string.charAt(i)));\n\
    \                \n            } else if(Character.isUpperCase(string.charAt(i)))\
    \ {\n                \n                upperCaseStringBuilder.append(string.charAt(i));\n\
    \                \n            } else {\n                \n                upperCaseStringBuilder.append(string.charAt(i));\n\
    \            }\n            \n        }\n        \n        return upperCaseStringBuilder.toString();",
  "        char[] chars = string.toCharArray();\n        for (int i = 0; i < chars.length;\
    \ ++i) {\n            char c = chars[i];\n            if (c >= 'A' && c <= 'Z')\
    \ {\n                chars[i] = c - 'A' + 'a';\n            } else if (c >= 'a'\
    \ && c <= 'z') {\n                chars[i] = c + 26 - 'a';\n            }\n  \
    \      }\n        return new String(chars);", "        return string.chars()\n\
    \                .mapToObj(c -> (char) (c == 'a' ? 'A' : 'a'))\n             \
    \   .collect(Collectors.joining());", "        String modifiedString = \"\";\n\
    \        char character;\n        for (character : string.toCharArray()) {\n \
    \           modifiedString += Character.toLowerCase(character);\n        }\n \
    \       return modifiedString;", "        // Initialize your variable here\n \
    \       String result = \"\";\n        // Iterate through the string here\n  \
    \      for(char character : string.toCharArray()) {\n            // If the character\
    \ is a lowercase\n            if(Character.isLowerCase(character)) {\n       \
    \         // Make it uppercase\n                result += Character.toUpperCase(character);\n\
    \            } else {\n                // Make it lowercase\n                result\
    \ += Character.toLowerCase(character);\n            }\n        }\n        return\
    \ result;", "        String[] arr = string.split(\" \");\n        StringBuilder\
    \ sb = new StringBuilder(arr[0]);\n        for (String word: arr) {\n        \
    \    String uppercase = word.toUpperCase();\n            String lowercase = word.toLowerCase();\n\
    \            sb.append(lowercase).append(\" \");\n            sb.append(uppercase).append(\"\
    \ \");\n        }\n        return sb.toString();", "        char[] chars = string.toCharArray();\n\
    \        Arrays.stream(chars).map(c -> Character.toUpperCase(c)).map(c -> Character.toLowerCase(c)).forEachOrdered((c)\
    \ -> chars[chars.length - 1 - chars.indexOf(c)] = c);\n        return new String(chars);",
  "        StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            builder.append(Character.toUpperCase(c));\n        }\n      \
    \  return builder.toString();", "        string = string.toLowerCase();\n    \
    \    string = string.toUpperCase();\n        return string;", '        return
    string.chars().map(i -> (char) (Character.toUpperCase(i))).collect(Collectors.joining());',
  "        return string.chars()\n            .mapToObj(x -> {\n                if\
    \ (Character.isLowerCase(x)) {\n                    return Character.toUpperCase(x);\n\
    \                } else if (Character.isUpperCase(x)) {\n                    return\
    \ Character.toLowerCase(x);\n                } else {\n                    return\
    \ x;\n                }\n            })\n            .collect(Collectors.joining());",
  "        char[] chars = string.toCharArray();\n        Arrays.sort(chars);\n   \
    \     return new String(chars);", "        char[] arr = string.toCharArray();\n\
    \        boolean upperCase = true;\n        for (int i = 0; i < arr.length; i++)\
    \ {\n            if (Character.isLowerCase(arr[i])) {\n                upperCase\
    \ = !upperCase;\n            }\n            arr[i] = (upperCase) ? Character.toUpperCase(arr[i])\
    \ : Character.toLowerCase(arr[i]);\n        }\n        return new String(arr);",
  "        Map<Character, Character> map = new HashMap<Character, Character>();\n\
    \        for( int i = 0; i < string.length(); i++ ) {\n            char c = string.charAt(i);\n\
    \            map.put(c, Character.toUpperCase(c));\n        }\n        for( int\
    \ i = 0; i < string.length(); i++ ) {\n            char c = string.charAt(i);\n\
    \            map.put(Character.toLowerCase(c), Character.toUpperCase(c));\n  \
    \      }\n        return map.values().toString();", "        return string.chars()\n\
    \                .mapToObj(i -> (char) i)\n                .map(c -> Character.toUpperCase(c))\n\
    \                .collect(Collectors.joining());", "       return string.chars()\n\
    \                .mapToObj(c -> Character.toUpperCase(c))\n                .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append).toString();", "     \
    \   // The string can only contain lowercase and uppercase characters.\n     \
    \   if (string.length() < 2 || string.length() > 2) {\n            throw new IllegalArgumentException(\"\
    The string can only contain lowercase and uppercase characters\");\n        }\n\
    \        StringBuilder sb = new StringBuilder(string);\n        \n        for\
    \ (int i = 0; i < sb.length(); i++) {\n            char c = sb.charAt(i);\n  \
    \          boolean isUpperCase = Character.isUpperCase(c);\n            boolean\
    \ isLowerCase = Character.isLowerCase(c);\n            \n            if (isUpperCase)\
    \ {\n                if (isLowerCase) {\n                    sb.setCharAt(i, Character.toLowerCase(c));\n\
    \                } else if (isUpperCase) {\n                    sb.setCharAt(i,\
    \ Character.toUpperCase(c));\n                }\n            } else if (isLowerCase)\
    \ {\n                sb.setCharAt(i, Character.toUpperCase(c));\n            }\n\
    \        }\n        \n        return sb.toString();", "        string = string.toLowerCase();\n\
    \        string = string.replaceAll(\"(?i)[a-z]\", \"[A-Z]\");\n        string\
    \ = string.replaceAll(\"(?i)[A-Z]\", \"[a-z]\");\n        return string;", " \
    \       StringBuilder builder = new StringBuilder();\n        boolean caps = false;\n\
    \        for (char c : string.toCharArray()) {\n            if ('a' <= c && c\
    \ <= 'z') {\n                caps = true;\n            } else if (caps) {\n  \
    \              builder.append((char) (c + 'A' - 'a'));\n                caps =\
    \ false;\n            } else {\n                builder.append(c);\n         \
    \   }\n        }\n        return builder.toString();", "        StringBuilder\
    \ sb = new StringBuilder();\n        for (char c : string.toCharArray()) {\n \
    \           if (Character.isUpperCase(c)) {\n                sb.append(Character.toLowerCase(c));\n\
    \            } else {\n                sb.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        if (string\
    \ == null || string.isEmpty()) {\n            return \"\";\n        }\n      \
    \  char[] array = string.toCharArray();\n        char firstChar = array[0];\n\
    \        char lastChar = array[array.length - 1];\n        // If there are both\
    \ lower and upper case characters, do not flip\n        if (Character.isLowerCase(firstChar)\
    \ && Character.isUpperCase(lastChar)) {\n            return string;\n        }\n\
    \        // If there is only lower case, flip to upper case\n        if (Character.isLowerCase(firstChar))\
    \ {\n            char[] tempArray = new char[array.length];\n            System.arraycopy(array,\
    \ 0, tempArray, 0, 1);\n            tempArray[0] = Character.toUpperCase(firstChar);\n\
    \            System.arraycopy(tempArray, 1, array, 1, array.length);\n       \
    \     return new String(tempArray);\n        }\n        // If there is only upper\
    \ case, flip to lower case\n        if (Character.isUpperCase(lastChar)) {\n \
    \           char[] tempArray = new char[array.length];\n            System.arraycopy(array,\
    \ 0, tempArray, 0, array.length - 1);\n            tempArray[tempArray.length\
    \ - 1] = Character.toLowerCase(lastChar);\n            System.arraycopy(tempArray,\
    \ 0, array, 0, array.length - 1);\n            return new String(tempArray);\n\
    \        }\n        // If there is an upper and lower case, flip to upper and\
    \ lower case\n        char[] tempArray = new char[array.length];\n        System.arraycopy(array,\
    \ 0, tempArray, 0, array.length - 1);\n        tempArray[tempArray.length - 1]\
    \ = Character.toLowerCase(lastChar);\n        System.arraycopy(tempArray, 0, array,\
    \ 0, array.length - 1);\n        tempArray[0] = Character.toUpperCase(firstChar);\n\
    \        System.arraycopy(tempArray, 1, array, 1, array.length);\n        return\
    \ new String(tempArray);", '        return string.toUpperCase().replaceAll("[a-z]",
    "[A-Z]").replaceAll("[A-Z]", "[a-z]");', "        char[] charArray = string.toCharArray();\n\
    \        char[] charArrayCopy = new char[charArray.length];\n        Arrays.copyOf(charArray,\
    \ charArrayCopy, charArray.length);\n        Arrays.fill(charArrayCopy, charArray.length,\
    \ 0);\n        for (char c : charArrayCopy) {\n            char upperChar = Character.toUpperCase(c);\n\
    \            charArrayCopy[charArrayCopy.indexOf(c)] = upperChar;\n        }\n\
    \        String result = new String(charArrayCopy);\n        return result;",
  "        StringBuilder sb = new StringBuilder(string.length());\n        for (char\
    \ c : string.toCharArray()) {\n            String s = Character.toString((char)\
    \ c).toUpperCase();\n            sb.append(s);\n        }\n        return sb.toString();",
  '        return string.toUpperCase().replaceAll("[a-z]", "[A-Z]");', '        return
    string.toUpperCase().replaceAll("[a-z]", s -> s.toUpperCase());', "        string\
    \ = string.toLowerCase();\n        char[] chars = string.toCharArray();\n    \
    \    Arrays.stream(chars).map(s -> ((Character.isLowerCase(s)) ? Character.toUpperCase(s)\
    \ : Character.toLowerCase(s))).collect(Collectors.toList()).forEachOrdered(s ->\
    \ string);\n        return string;", "        char[] charArray = string.toCharArray();\n\
    \        for (int i = 0; i < charArray.length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                charArray[i] = (char) (charArray[i]\
    \ + 'A' - 'a');\n            } else if (charArray[i] >= 'A' && charArray[i] <=\
    \ 'Z') {\n                charArray[i] = (char) (charArray[i] + 'a' - 'A');\n\
    \            }\n        }\n        return new String(charArray);", "        char[]\
    \ characters = string.toCharArray();\n        Arrays.stream(characters).map(c\
    \ -> {\n            if (Character.isLowerCase(c))\n                return Character.toUpperCase(c);\n\
    \            else\n                return Character.toLowerCase(c);\n        }).toArray();\n\
    \        return new String(characters);", "        List<Character> charList =\
    \ Arrays.asList(string.split(\"\"));\n        charList.removeIf(c -> c.isLowerCase());\n\
    \        charList.removeIf(c -> c.isUpperCase());\n        StringBuilder sb =\
    \ new StringBuilder();\n        for(char c : charList) {\n            if(c.isLowerCase())\
    \ {\n                sb.append(Character.toUpperCase(c));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(c));\n            }\n   \
    \     }\n        return sb.toString();", "        char[] characters = string.toCharArray();\n\
    \        Arrays.sort(characters);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < characters.length; i++)\n            sb.append(characters[i].toLowerCase());\n\
    \        return sb.toString();", "        String[] splitArray = string.split(\"\
    \");\n        return splitArray[splitArray.length - 1] + splitArray[splitArray.length\
    \ - 1];", "        char[] chars = string.toCharArray();\n        Arrays.sort(chars);\n\
    \        StringBuilder result = new StringBuilder();\n        for (int i = 0,\
    \ j = chars.length - 1; i < chars.length; i++, j--) {\n            if (chars[i]\
    \ == chars[j]) {\n                result.append((char) (chars[i]));\n        \
    \    } else {\n                result.append((char) (chars[i]));\n           \
    \     result.append((char) (chars[j]));\n            }\n        }\n        return\
    \ result.toString();", "        // TODO: Implement me!\n        return \"\";",
  "        char[] arr = string.toCharArray();\n        Arrays.sort(arr);\n       \
    \ return new String(arr);", "        \n        List<Character> lowerCase = new\
    \ ArrayList<>(string.length());\n        List<Character> upperCase = new ArrayList<>(string.length());\n\
    \n        for(int i=0; i<string.length(); i++){\n            if(Character.isLowerCase(string.charAt(i))){\n\
    \                lowerCase.add(string.charAt(i));\n            }\n           \
    \ else{\n                upperCase.add(string.charAt(i));\n            }\n   \
    \     }\n        return String.valueOf(lowerCase);", "        String newString\
    \ = \"\";\n        for(int i = 0; i < string.length(); i++) {\n            if((Character.isUpperCase(string.charAt(i)))\
    \ && (i < string.length() - 1)) {\n                newString += Character.toLowerCase(string.charAt(i));\n\
    \            } else if ((Character.isLowerCase(string.charAt(i))) && (i >= 0))\
    \ {\n                newString += Character.toUpperCase(string.charAt(i));\n \
    \           } \n        }\n        return newString;", '        return string.chars().map(e
    -> e.isUpper() ? e.toLowerCase() : e.toUpperCase()).collect(Collectors.joining(""));',
  "        StringBuilder builder = new StringBuilder(string);\n        builder.replaceAll(\n\
    \            charMap(\"a\"),\n            charMap(\"A\"));\n        builder.replaceAll(\n\
    \            charMap(\"b\"),\n            charMap(\"B\"));\n        builder.replaceAll(\n\
    \            charMap(\"c\"),\n            charMap(\"C\"));\n        builder.replaceAll(\n\
    \            charMap(\"d\"),\n            charMap(\"D\"));\n        builder.replaceAll(\n\
    \            charMap(\"e\"),\n            charMap(\"E\"));\n        builder.replaceAll(\n\
    \            charMap(\"f\"),\n            charMap(\"F\"));\n        builder.replaceAll(\n\
    \            charMap(\"g\"),\n            charMap(\"G\"));\n        builder.replaceAll(\n\
    \            charMap(\"h\"),\n            charMap(\"H\"));\n        builder.replaceAll(\n\
    \            charMap(\"i\"),\n            charMap(\"I\"));\n        builder.replaceAll(\n\
    \            charMap(\"j\"),\n            charMap(\"J\"));\n        builder.replaceAll(\n\
    \            charMap(\"k\"),\n            charMap(\"K\"));\n        builder.replaceAll(\n\
    \            charMap(\"l\"),\n            charMap(\"L\"));\n        builder.replaceAll(\n\
    \            charMap(\"m\"),\n            charMap(\"M\"));\n        builder.replaceAll(\n\
    \            charMap(\"n\"),\n            charMap(\"N\"));\n        builder.replaceAll(\n\
    \            charMap(\"o\"),\n            charMap(\"O\"));\n        builder.replaceAll(\n\
    \            charMap(\"p\"),\n            charMap(\"P\"));\n        builder.replaceAll(\n\
    \            charMap(\"q\"),\n            charMap(\"Q\"));\n        builder.replaceAll(\n\
    \            charMap(\"r\"),\n            charMap(\"R\"));\n        builder.replaceAll(\n\
    \            charMap(\"s\"),\n            charMap(\"S\"));\n        builder.replaceAll(\n\
    \            charMap(\"t\"),\n            charMap(\"T\"));\n        builder.replaceAll(\n\
    \            charMap(\"u\"),\n            charMap(\"U\"));\n        builder.replaceAll(\n\
    \            charMap(\"v\"),\n            charMap(\"V\"));\n        builder.replaceAll(\n\
    \            charMap(\"w\"),\n            charMap(\"W\"));\n        builder.replaceAll(\n\
    \            charMap(\"x\"),\n            charMap(\"X\"));\n        builder.replaceAll(\n\
    \            charMap(\"y\"),\n            charMap(\"Y\"));\n        builder.replaceAll(\n\
    \            charMap(\"z\"),\n            charMap(\"Z\"));\n        return builder.toString();",
  "        return string.toUpperCase().replaceAll(\"([a-z])\",\n                m\
    \ -> m.toUpperCase());", "        return string.chars().mapToObj(c -> (char) (c\
    \ == c.toUpperCase() ? 'a' : c.toUpperCase()))\n            .reduce(\"\", (s,\
    \ c) -> s + c);", "        return string.chars().mapToObj(c -> (char) (c == 'a'\
    \ ? 'A' : c)).collect(Collectors.joining(\"\"));", "        return string.chars().mapToObj(c\
    \ -> (char) (c == ' ' ? 'A' : Character.toUpperCase((char) c))).collect(Collectors.joining());",
  "        return string.toUpperCase().replaceAll(\"(?i)[\" + string.toLowerCase()\
    \ + \"]\", \"$U$S\")\n                .replaceAll(\"(?i)[\" + string.toUpperCase()\
    \ + \"]\", \"$L$S\");", "        List<Character> stringList = Arrays.asList(string.toCharArray());\n\
    \        StringBuilder stringBuilder = new StringBuilder();\n        for (Character\
    \ c : stringList) {\n            if (Character.isLowerCase(c)) {\n           \
    \     stringBuilder.append(Character.toUpperCase(c));\n            } else {\n\
    \                stringBuilder.append(Character.toLowerCase(c));\n           \
    \ }\n        }\n        return stringBuilder.toString();", "        StringBuilder\
    \ buffer = new StringBuilder();\n        for (char c : string.toCharArray()) {\n\
    \            if (Character.isUpperCase(c))\n                buffer.append(Character.toLowerCase(c));\n\
    \            else\n                buffer.append(Character.toUpperCase(c));\n\
    \        }\n        return buffer.toString();", "        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < string.length(); i++) {\n    \
    \        if (Character.isLowerCase(string.toCharArray()[i])) {\n             \
    \   sb.append(Character.toUpperCase(string.toCharArray()[i]));\n            }\
    \ else {\n                sb.append(Character.toLowerCase(string.toCharArray()[i]));\n\
    \            }\n        }\n        return sb.toString();", "        char[] charArray\
    \ = string.toCharArray();\n        for (char c : charArray) {\n            if\
    \ (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n\
    \            } else {\n                c = Character.toLowerCase(c);\n       \
    \     }\n        }\n        return new String(charArray);", "        string =\
    \ string.toLowerCase();\n        string = string.toUpperCase();\n        string\
    \ = string.replace(\" \", \"\");\n        return string;", "        \n       \
    \ Set<String> set = new LinkedHashSet<>(Arrays.asList(string.split(\"\")));\n\
    \        \n        for(String s:set)\n        {\n            \n            String\
    \ toUpper = Character.toUpperCase(s.charAt(0));\n            String toLower =\
    \ Character.toLowerCase(s.charAt(0));\n            \n            string.replace(toLower,\
    \ toUpper);\n        }\n        \n        return string;", "        return new\
    \ String(string.chars().map(i -> i == ' ' ? ' ' : Character.toUpperCase(i))\n\
    \            .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append)\n\
    \            .toString());", "        return new StringBuilder(string).replaceAll(\"\
    ([a-z])\",\n                m -> m.group(1).toUpperCase(Locale.ROOT)).replaceAll(\"\
    ([A-Z])\",\n                m -> m.group(1).toLowerCase(Locale.ROOT)).toString();",
  "        StringBuilder result = new StringBuilder();\n        for (char ch : string.toCharArray())\
    \ {\n            if (Character.isLowerCase(ch)) {\n                ch = 'a' +\
    \ Character.toUpperCase(ch);\n            } else if (Character.isUpperCase(ch))\
    \ {\n                ch = 'A' + Character.toLowerCase(ch);\n            }\n  \
    \          result.append(ch);\n        }\n        return result.toString();",
  '        return string.toUpperCase().replaceAll("[a-z]", "[A-Z]").replaceAll("[A-Z]",
    "[a-z]");', "        char[] charArray = string.toCharArray();\n        int length\
    \ = charArray.length;\n        for (int i = 0; i < length; i++) {\n          \
    \  if (charArray[i] >= 65 && charArray[i] <= 90 || charArray[i] >= 97 && charArray[i]\
    \ <= 122) {\n                charArray[i] = (char) (charArray[i] - 32);\n    \
    \        }\n        }\n        return new String(charArray);", '        return
    string.toLowerCase().replaceAll("[^A-Za-z]", "_");', "        Map<Character, String>\
    \ map = new HashMap<>();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            char c = string.charAt(i);\n            map.put(c, Character.toLowerCase(c));\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (char\
    \ c : map.values()) {\n            sb.append(c);\n        }\n        return sb.toString();",
  "        return string.chars().mapToObj(Character::toUpperCase)\n              \
    \           .collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString();",
  "        return string.chars()\n                .mapToObj(i -> (char) i)\n     \
    \           .collect(\n                        StringBuilder::new,\n         \
    \               StringBuilder::appendCodePoint,\n                        (sb1,\
    \ sb2) -> {\n                            sb1.reverse();\n                    \
    \        sb2.reverse();\n                            sb1.append(sb2);\n      \
    \                      sb2.append(sb1);\n                            return sb2.toString();\n\
    \                        },\n                        StringBuilder::toString\n\
    \                ).toString();", "        return string.chars()\n            \
    \    .mapToObj(i -> (char) i == Character.toLowerCase(i) ? Character.toUpperCase(i)\
    \ : Character.toLowerCase(i))\n                .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n                .toString();", "        List<Character>\
    \ characters = string.chars().mapToObj(\n            c -> Character.isUpperCase(c)\
    \ ? Character.toLowerCase(c) : Character.toUpperCase(c)\n        ).collect(Collectors.toList());\n\
    \        return new String(characters);", "        // TODO: Implement me\n   \
    \     throw new UnsupportedOperationException(\"Not yet implemented\");", "  \
    \      char[] charArray = string.toCharArray();\n        for (char c : charArray)\
    \ {\n            if (Character.isUpperCase(c)) {\n                charArray[c]\
    \ = Character.toLowerCase(c);\n            } else if (Character.isLowerCase(c))\
    \ {\n                charArray[c] = Character.toUpperCase(c);\n            }\n\
    \        }\n        return new String(charArray);", "        return string.toLowerCase()\n\
    \            .chars()\n            .map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c)\
    \ : Character.toUpperCase(c))\n            .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n            .toString();", "        int length = string.length();\n\
    \        char[] arr = string.toCharArray();\n        for (int i = 0; i < length;\
    \ i++) {\n            char c = arr[i];\n            char upperC = Character.toUpperCase(c);\n\
    \            char lowerC = Character.toLowerCase(c);\n            arr[i] = upperC;\n\
    \            arr[i] = lowerC;\n        }\n        return new String(arr);", " \
    \       StringBuilder builder = new StringBuilder();\n        for (Character c\
    \ : string.toCharArray()) {\n            if (Character.isLowerCase(c)) {\n   \
    \             builder.append(Character.toUpperCase(c));\n            } else {\n\
    \                builder.append(Character.toLowerCase(c));\n            }\n  \
    \      }\n        return builder.toString();", "        char[] chars = string.toCharArray();\n\
    \        Arrays.sort(chars);\n        return new String(chars);", "        return\
    \ string.chars()\n                .mapToObj(x -> Character.toUpperCase(x))\n \
    \               .collect(StringBuilder::new,\n                        StringBuilder::appendCodePoint,\n\
    \                        StringBuilder::append)\n                .toString();",
  "        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        return new String(charArray);", '        return string.chars().map(c
    -> Character.toUpperCase(c)).collect(Collectors.joining());', "        return\
    \ string.toLowerCase()\n                .chars()\n                .mapToObj(c\
    \ -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))\n\
    \                .collect(joining());", "        return string.chars().mapToObj(c\
    \ -> (char) (c == 'a' ? 'A' : (char) (c == 'A' ? 'a' : c))).collect(Collectors.joining(\"\
    \"));", "        // TODO\n        throw new UnsupportedOperationException(\"Not\
    \ yet implemented\");", "        char[] charArray = string.toCharArray();\n  \
    \      for (int i = 0; i < charArray.length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                charArray[i] = (char) (charArray[i]\
    \ + 'A' - 'a');\n            } else if (charArray[i] >= 'A' && charArray[i] <=\
    \ 'Z') {\n                charArray[i] = (char) (charArray[i] + 'a' - 'A');\n\
    \            }\n        }\n        return new String(charArray);", "        string\
    \ = string.toLowerCase();\n        string = string.toUpperCase();\n        string\
    \ = string.toLowerCase();\n        return string;", "        return string.chars()\n\
    \                .mapToObj(String::valueOf)\n                .map(c -> c.equalsIgnoreCase('a')\
    \ ? 'A' : c.equalsIgnoreCase('z') ? 'Z' : c.toLowerCase())\n                .map(c\
    \ -> c.equalsIgnoreCase('A') ? 'a' : c.equalsIgnoreCase('Z') ? 'z' : c)\n    \
    \            .collect(Collectors.joining());", "        string = string.toLowerCase();\n\
    \        string = string.toUpperCase();\n        return string;", "        char[]\
    \ charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++){\n            if (charArray[i] >= 'a' && charArray[i] <= 'z')\n       \
    \         charArray[i] = (char) (charArray[i] - 32);\n            else if (charArray[i]\
    \ >= 'A' && charArray[i] <= 'Z')\n                charArray[i] = (char) (charArray[i]\
    \ + 32);\n        }\n        return new String(charArray);", "        StringBuilder\
    \ stringBuilder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            if (Character.isUpperCase(c)) {\n                stringBuilder.append(Character.toLowerCase(c));\n\
    \            }\n            else {\n                stringBuilder.append(Character.toUpperCase(c));\n\
    \            }\n        }\n        return stringBuilder.toString();", "      \
    \  return string.chars()\n                .mapToObj(c -> (char) (c == (char) 'a'\
    \ ? 'A' : 'a'))\n                .collect(Collectors.joining(\"\"));", "     \
    \   char[] charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n    \
    \            charArray[i] = (char)(charArray[i] + 'a' - 'A');\n            }\n\
    \            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n             \
    \   charArray[i] = (char)(charArray[i] + 'A' - 'a');\n            }\n        }\n\
    \        return new String(charArray);", "        String[] letters = string.split(\"\
    \");\n        for (String letter : letters) {\n            if (letter.isLowerCase())\
    \ {\n                letter = Character.toUpperCase(letter.charAt(0));\n     \
    \       } else if (letter.isUpperCase()) {\n                letter = Character.toLowerCase(letter.charAt(0));\n\
    \            } else {\n                continue;\n            }\n        }\n \
    \       return letters.join(\"\");", "        // Initialize the result with the\
    \ input string length.\n        String result = string;\n        // Iterate over\
    \ each character of the input.\n        for (int i = 0; i < string.length(); i++)\
    \ {\n            // Get the character from the input string.\n            char\
    \ character = string.charAt(i);\n            // If the character is lowercase,\
    \ set it to uppercase.\n            if (Character.isLowerCase(character)) {\n\
    \                result = Character.toUpperCase(result);\n            }\n    \
    \        // Else, set it to lowercase.\n            else {\n                result\
    \ = Character.toLowerCase(result);\n            }\n        }\n        // Return\
    \ the result.\n        return result;", "        StringBuilder result = new StringBuilder();\n\
    \n        for (char c : string.toCharArray()) {\n            if (Character.isLowerCase(c))\
    \ {\n                result.append(Character.toUpperCase(c));\n            } else\
    \ {\n                result.append(Character.toLowerCase(c));\n            }\n\
    \        }\n\n        return result.toString();", "        return string.chars()\n\
    \            .mapToObj(c -> (char) c)\n            .map(c -> Character.isLowerCase(c)\
    \ ? Character.toUpperCase(c) : Character.toLowerCase(c))\n            .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n            .toString();",
  '        return string.replaceAll("[a-z]", "[" + Character.toUpperCase(string.charAt(0))
    + string.substring(1) + "]");', '        return string.chars().mapToObj(c -> Character.isUpperCase(c)
    ? Character.toLowerCase(c) : Character.toUpperCase(c)).collect(joining(""));',
  "        return string\n                .chars()\n                .mapToObj(c ->\
    \ (char) c == Character.toLowerCase(c) ? (char) Character.toUpperCase(c) : (char)\
    \ Character.toLowerCase(c))\n                .collect(Collectors.joining());",
  "        // Use a StringBuilder to build up the result\n        StringBuilder builder\
    \ = new StringBuilder();\n        for (char c : string.toCharArray()) {\n    \
    \        builder.append(Character.isLowerCase(c) ? Character.toUpperCase(c) :\
    \ Character.toLowerCase(c));\n        }\n        return builder.toString();",
  "        return string.chars()\n                .map(i -> {\n                  \
    \  if(i > 127)\n                        return i;\n                    else\n\
    \                        return i + 32;\n                })\n                .map(i\
    \ -> {\n                    if(i < 32)\n                        return i;\n  \
    \                  else\n                        return i - 32;\n            \
    \    })\n                .collect(StringBuilder::new, StringBuilder::appendCodePoint,\n\
    \                        StringBuilder::append)\n                .toString();",
  '        return string.toUpperCase().replaceAll("(?i)[a-z]", "[A-Z]").replaceAll("[A-Z]",
    "[a-z]");', "        char[] charArray = string.toCharArray();\n        for (int\
    \ i = 0; i < charArray.length; i++) {\n            if (Character.isUpperCase(charArray[i]))\
    \ {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n   \
    \         } else if (Character.isLowerCase(charArray[i])) {\n                charArray[i]\
    \ = Character.toUpperCase(charArray[i]);\n            }\n        }\n        return\
    \ new String(charArray);", '        return string.toUpperCase().replaceAll("[A-Z]",
    "[a-z]").replaceAll("[a-z]", "[A-Z]");', "        char[] charArray = string.toCharArray();\n\
    \        char[] charArray2 = charArray.clone();\n        Arrays.fill(charArray2,\
    \ (char) 65);\n        Arrays.fill(charArray, (char) 32);\n        return new\
    \ String(charArray);", "        char[] charArray = string.toCharArray();\n   \
    \     Arrays.sort(charArray);\n        return new String(charArray);", "     \
    \   String[] stringArray = string.split(\"\");\n        return string.chars().mapToObj(e\
    \ -> (char) e).map(c -> Character.isUpperCase(c) ? Character.toLowerCase(c) :\
    \ Character.toUpperCase(c)).collect(Collectors.joining(\"\"));", '        return
    string.toLowerCase().replaceAll("[\\W]", "").replaceAll("[^A-Z]", "A").toUpperCase();',
  "        \n        StringBuilder sb = new StringBuilder(string.length());\n    \
    \    for(int i = 0; i < string.length(); i++) {\n            char c = string.charAt(i);\n\
    \            if (Character.isLowerCase(c)) {\n                sb.append(Character.toUpperCase(c));\n\
    \            } else {\n                sb.append(Character.toLowerCase(c));\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            builder.append(Character.isLowerCase(c) ?\n                 \
    \   Character.toUpperCase(c) : Character.toLowerCase(c));\n        }\n       \
    \ return builder.toString();", "        return string.chars()\n              \
    \  .mapToObj(c -> Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c))\n\
    \                .collect(StringBuilder::new, StringBuilder::appendCodePoint,\
    \ StringBuilder::append)\n                .toString();", '        return string.toLowerCase().replaceAll("(?i)\\p{Lower}",
    "");', "        StringBuilder sb = new StringBuilder(string);\n        for (char\
    \ c : sb.toCharArray()) {\n            if (Character.isLowerCase(c))\n       \
    \         sb.setCharAt(c, Character.toUpperCase(c));\n            if (Character.isUpperCase(c))\n\
    \                sb.setCharAt(c, Character.toLowerCase(c));\n        }\n     \
    \   return sb.toString();", "        Map<Character, Character> map = new HashMap<Character,\
    \ Character>();\n        for (char letter : string.toCharArray()) {\n        \
    \    map.put(letter, Character.toLowerCase(letter));\n            map.put(Character.toLowerCase(letter),\
    \ letter);\n        }\n        return map\n                .entrySet()\n     \
    \           .stream()\n                .map(e -> new StringBuilder()\n       \
    \                 .append(map.get(e.getKey()))\n                        .append(e.getValue())\n\
    \                        .toString())\n                .collect(Collectors.joining());",
  "        return string.chars().map(c -> Character.isLowerCase(c) ? Character.toUpperCase(c)\
    \ : Character.toLowerCase(c))\n                          .collect(Collectors.joining(\"\
    \"));", '        return string.replaceAll("[a-z]", "[A-Z]").replaceAll("[A-Z]",
    "[a-z]");', "        return string.chars()\n                .mapToObj(c -> c.toLowerCase()\
    \ >= 'a' && c.toLowerCase() <= 'z' ? c.toUpperCase() : c.toLowerCase())\n    \
    \            .collect(Collectors.joining());", "        char[] charArray = string.toCharArray();\n\
    \        char[] upperChars = new char[charArray.length];\n        Arrays.fill(upperChars,\
    \ 'A');\n        char[] lowerChars = new char[charArray.length];\n        Arrays.fill(lowerChars,\
    \ 'a');\n        for (int i = 0; i < charArray.length; i++) {\n            if\
    \ (charArray[i] < 'A' || charArray[i] > 'Z') {\n                upperChars[i]\
    \ = charArray[i];\n            } else {\n                lowerChars[i] = charArray[i];\n\
    \            }\n        }\n        return new String(upperChars) + new String(lowerChars);",
  "        return string.chars()\n            .mapToObj(c -> (char) c != 'a' ? (char)\
    \ c : 'A' -'a'+1 )\n            .map(c -> (char) c != 'A' ? (char) c : 'a' -'A'+1\
    \ )\n            .map(c -> Character.toUpperCase(c))\n            .collect(Collectors.joining());",
  "        return string.chars()\n                .mapToObj(i -> {\n             \
    \       if (Character.isLowerCase(i)) {\n                        return Character.toUpperCase(i);\n\
    \                    } else if (Character.isUpperCase(i)) {\n                \
    \        return Character.toLowerCase(i);\n                    } else {\n    \
    \                    return null;\n                    }\n                }).reduce(\"\
    \", (a, b) -> a + b);", '        return string.toLowerCase();', "        char[]\
    \ charArray = string.toCharArray();\n        for (int i = 0; i < charArray.length;\
    \ ++i) {\n            if (Character.isLowerCase(charArray[i])) {\n           \
    \     charArray[i] = Character.toUpperCase(charArray[i]);\n            } else\
    \ {\n                charArray[i] = Character.toLowerCase(charArray[i]);\n   \
    \         }\n        }\n        return new String(charArray);", "        String\
    \ upper = string.toUpperCase();\n        StringBuilder sb = new StringBuilder(upper);\n\
    \        char[] charArray = sb.toString().toCharArray();\n        Arrays.parallelSort(charArray);\n\
    \        sb.setCharAt(0, Character.toLowerCase(charArray[0]));\n        return\
    \ sb.toString();", "        return string.chars()\n                .mapToObj(i\
    \ -> (char) i == (char) 'a' ? 'A' : (char) i)\n                .collect(Collectors.joining());",
  "        String[] characters = string.split(\"\");\n        for (int i = 0; i <\
    \ characters.length; i++) {\n            int index = characters[i].length() -\
    \ 1;\n            char current = characters[i].charAt(index);\n            characters[i]\
    \ = String.valueOf(current).toUpperCase();\n            characters[i] = String.valueOf(current).toLowerCase();\n\
    \        }\n        return String.join(\"\", characters);", '        return string.chars().mapToObj(c
    -> (char) (Character.toUpperCase(c))).collect(Collectors.joining());', "     \
    \   char[] array = string.toCharArray();\n        for(int i = 0; i < array.length;\
    \ i++) {\n            if(Character.isLowerCase(array[i]) ) {\n               \
    \ array[i] = Character.toUpperCase(array[i]);\n            } else {\n        \
    \        array[i] = Character.toLowerCase(array[i]);\n            }\n        }\n\
    \        return new String(array);", "        char[] charArray = string.toCharArray();\n\
    \        char[] newCharArray = new char[charArray.length];\n        for (int i\
    \ = 0; i < charArray.length; i++) {\n            if (charArray[i] >= 'a' && charArray[i]\
    \ <= 'z') {\n                newCharArray[i] = (charArray[i] + 'A' - 'a');\n \
    \           } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n       \
    \         newCharArray[i] = (charArray[i] + 'a' - 'A');\n            } else {\n\
    \                newCharArray[i] = charArray[i];\n            }\n        }\n \
    \       return new String(newCharArray);", "        int length = string.length();\n\
    \        StringBuilder builder = new StringBuilder(length);\n        for (int\
    \ i = 0; i < length; i++) {\n            String current = string.substring(i);\n\
    \            if (Character.isLowerCase(current.charAt(0))) {\n               \
    \ builder.append(Character.toUpperCase(current.charAt(0)));\n            } else\
    \ {\n                builder.append(Character.toLowerCase(current.charAt(0)));\n\
    \            }\n        }\n        return builder.toString();", "        String[]\
    \ upperCase = string.split(\"\");\n        List<Character> result = new ArrayList<Character>();\n\
    \        for (String upper : upperCase) {\n            boolean isUpper = Character.isUpperCase(upper.charAt(0));\n\
    \            boolean isLower = Character.isLowerCase(upper.charAt(0));\n     \
    \       if (isUpper && isLower) {\n                result.add(Character.toLowerCase(upper.charAt(0)));\n\
    \            } else if (isUpper) {\n                result.add(Character.toUpperCase(upper.charAt(0)));\n\
    \            } else if (isLower) {\n                result.add(Character.toLowerCase(upper.charAt(0)));\n\
    \            } else {\n                result.add(upper);\n            }\n   \
    \     }\n        return new String(result.toArray());", "        StringBuilder\
    \ result = new StringBuilder();\n        for (char c : string.toCharArray()) {\n\
    \            boolean isLower = Character.isLowerCase(c);\n            boolean\
    \ isUpper = Character.isUpperCase(c);\n            if (isLower) {\n          \
    \      result.append(Character.toUpperCase(c));\n            } else {\n      \
    \          result.append(Character.toLowerCase(c));\n            }\n        }\n\
    \        return result.toString();", "        // Write your code here\n      \
    \  return null;", "        StringBuilder newString = new StringBuilder();\n  \
    \      for(char ch : string.toCharArray()) {\n            if(Character.isLowerCase(ch))\
    \ {\n                newString.append(Character.toUpperCase(ch));\n          \
    \  } else {\n                newString.append(Character.toLowerCase(ch));\n  \
    \          }\n        }\n        return newString.toString();", '        return
    new StringBuilder(string).reverse().toString();', "        char[] charArray =\
    \ string.toCharArray();\n        for (int i = 0; i < charArray.length; i++) {\n\
    \            char currentChar = charArray[i];\n            if (currentChar >=\
    \ 'a' && currentChar <= 'z') {\n                charArray[i] = (char)(currentChar\
    \ - 'a' + 'A');\n            }\n            else if (currentChar >= 'A' && currentChar\
    \ <= 'Z') {\n                charArray[i] = (char)(currentChar - 'A' + 'a');\n\
    \            }\n        }\n        return new String(charArray);", "        return\
    \ string.chars().mapToObj(i -> (char) (i + 'a' - 'A'))\n                .collect(Collectors.joining(\"\
    \"));", "        char[] charArray = string.toCharArray();\n        Arrays.stream(charArray).forEach(c\
    \ -> {\n            if (Character.isLowerCase(c)) {\n                c = Character.toUpperCase(c);\n\
    \            } else if (Character.isUpperCase(c)) {\n                c = Character.toLowerCase(c);\n\
    \            }\n        });\n        return new String(charArray);", "       \
    \ StringBuilder builder = new StringBuilder();\n        for (char c : string.toCharArray())\
    \ {\n            builder.append((char) (c != (char) Character.toLowerCase(c) ?\
    \ Character.toUpperCase(c) : Character.toLowerCase(c)));\n        }\n        return\
    \ builder.toString();", "        // TODO: Implement this method.\n        StringBuilder\
    \ builder = new StringBuilder();\n        for(int i=0; i<string.length(); i++)\
    \ {\n            char c = string.charAt(i);\n            if(c>='a' && c<='z')\
    \ {\n                if(c>='A' && c<='Z') {\n                    builder.append((char)(c-'A'+26));\n\
    \                } else {\n                    builder.append((char)(c-'a'+26));\n\
    \                }\n            } else {\n                builder.append(c);\n\
    \            }\n        }\n        return builder.toString();", "        int l\
    \ = string.length();\n        char character;\n        char lowerChar;\n     \
    \   StringBuilder newString = new StringBuilder(l);\n        for (int i = 0; i\
    \ < l; i++) {\n            character = string.charAt(i);\n            lowerChar\
    \ = Character.toLowerCase(character);\n            newString.append(lowerChar);\n\
    \        }\n        return newString.toString();"]
stop_tokens:
- "\n    }\n"
