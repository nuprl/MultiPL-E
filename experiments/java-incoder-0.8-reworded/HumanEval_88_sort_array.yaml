name: HumanEval_88_sort_array
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Given an array array list of non-negative integers, return\
  \ a cojava of the given array array list after sorting,\n    // you will sort the\
  \ given array array list in ascending order if the sum( first index value, last\
  \ index value) is odd,\n    // or sort it in descending order if the sum( first\
  \ index value, last index value) is even.\n    // Note:\n    // * don't change the\
  \ given array array list.\n    // Examples:\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList())))\n\
  \    // (new ArrayList<Long>(Arrays.asList()))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)5l))))\n\
  \    // (new ArrayList<Long>(Arrays.asList((long)5l)))\n    // >>> sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
  \ (long)5l))))\n    // (new ArrayList<Long>(Arrays.asList((long)0l, (long)1l, (long)2l,\
  \ (long)3l, (long)4l, (long)5l)))\n    // >>> sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l, (long)6l))))\n    // (new ArrayList<Long>(Arrays.asList((long)6l,\
  \ (long)5l, (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))\n    public static\
  \ ArrayList<Long> sortArray(ArrayList<Long> array) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList()))).equals((new ArrayList<Long>(Arrays.asList()))));\n\
  \    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)5l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)5l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)2l,\
  \ (long)4l, (long)3l, (long)0l, (long)1l, (long)5l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)1l, (long)2l, (long)3l, (long)4l, (long)5l)))));\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)4l, (long)3l, (long)0l, (long)1l,\
  \ (long)5l, (long)6l)))).equals((new ArrayList<Long>(Arrays.asList((long)6l, (long)5l,\
  \ (long)4l, (long)3l, (long)2l, (long)1l, (long)0l)))));\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)2l, (long)1l)))).equals((new ArrayList<Long>(Arrays.asList((long)1l,\
  \ (long)2l)))));\n    assert(sortArray((new ArrayList<Long>(Arrays.asList((long)15l,\
  \ (long)42l, (long)87l, (long)32l, (long)11l, (long)0l)))).equals((new ArrayList<Long>(Arrays.asList((long)0l,\
  \ (long)11l, (long)15l, (long)32l, (long)42l, (long)87l)))));\n    assert(sortArray((new\
  \ ArrayList<Long>(Arrays.asList((long)21l, (long)14l, (long)23l, (long)11l)))).equals((new\
  \ ArrayList<Long>(Arrays.asList((long)23l, (long)21l, (long)14l, (long)11l)))));\n\
  \    }\n\n}\n"
completions: ["        ArrayList<Long> result = new ArrayList<Long>(array);\n    \
    \    ArrayList<Long> temp = new ArrayList<Long>();\n        int sum = 0;\n   \
    \     for (int i = 0; i < result.size(); i++) {\n            for (int j = i +\
    \ 1; j < result.size(); j++) {\n                sum += result.get(i);\n      \
    \          sum += result.get(j);\n                if (sum % 2 != 0) {\n      \
    \              Collections.sort(temp);\n                }\n                else\
    \ {\n                    Collections.sort(temp);\n                }\n        \
    \        if (temp.get(j) == temp.get(j + 1)) {\n                    result.remove(j\
    \ + 1);\n                    i--;\n                    j--;\n                }\n\
    \            }\n        }\n        return result;", "        // Your code here\n\
    \        Collections.sort(array);\n        Collections.reverse(array);\n     \
    \   if (array.get(array.size()-2) % 2 == 0) {\n            Collections.sort(array);\n\
    \        } else {\n            Collections.reverse(array);\n        }\n      \
    \  return array;", "        long sum = 0;\n        long first = 0;\n        long\
    \ last = 0;\n        long mid = 0;\n        long oddSum = 0;\n        long evenSum\
    \ = 0;\n        boolean oddOrder = true;\n        boolean evenOrder = true;\n\
    \        boolean oddEven = true;\n        boolean oddOdd;\n        boolean evenEven;\n\
    \        boolean evenOdd;\n        int midIndex;\n        boolean evenSumHasEven\
    \ = 0;\n        boolean oddSumHasOdd = 0;\n        boolean evenSumHasEven = 0;\n\
    \        boolean oddSumHasOdd = 0;\n        for (long e : array) {\n         \
    \   sum += e;\n            if (oddOrder) {\n                if (e % 2 == 0) {\n\
    \                    evenSum += e;\n                    evenEven = true;\n   \
    \             } else {\n                    evenSum += e;\n                  \
    \  evenEven = false;\n                }\n            } else {\n              \
    \  if (e % 2 == 1) {\n                    oddSum += e;\n                    oddOdd\
    \ = true;\n                } else {\n                    oddSum += e;\n      \
    \              oddOdd = false;\n                }\n            }\n        }\n\
    \        midIndex = array.size() / 2;\n        if (sum % 2 == 1) {\n         \
    \   oddSumHasOdd = true;\n            evenSumHasEven = true;\n        } else {\n\
    \            oddSumHasOdd = false;\n            evenSumHasEven = false;\n    \
    \    }\n        if (oddSumHasOdd) {\n            Arrays.sort(array.subList(0,\
    \ midIndex + 1));\n        }\n        if (evenSumHasEven) {\n            Arrays.sort(array.subList(midIndex\
    \ + 1, array.size()));\n        }\n        first = Math.max(sum % 2 == 1, evenSumHasEven);\n\
    \        last = sum % 2 == 0;\n        ArrayList<Long> result = new ArrayList<>(Arrays.asList(first));\n\
    \        if (oddOrder) {\n            if (oddSumHasOdd) {\n                result.addAll(Arrays.asList(last,\
    \ midIndex, array.get(midIndex)));\n            }\n            if (evenSumHasEven)\
    \ {\n                result.addAll(Arrays.asList(midIndex, array.size()));\n \
    \           }\n        } else {\n            if (evenSumHasEven) {\n         \
    \       result.addAll(Arrays.asList(first, midIndex, array.get(midIndex)));\n\
    \            }\n            if (oddSumHasOdd) {\n                result.addAll(Arrays.asList(midIndex,\
    \ last, array.get(midIndex)));\n            }\n        }\n        return result;",
  "        long sum = 0;\n        int count = 0;\n        long max = Long.MIN_VALUE;\n\
    \        for (long num : array) {\n            sum = sum + num;\n            if\
    \ (sum % 2 == 1) {\n                count++;\n            }\n            max =\
    \ Math.max(max, num);\n        }\n        ArrayList<Long> results = new ArrayList<>();\n\
    \        if (count % 2 != 0) {\n            Collections.sort(array, (first, second)\
    \ -> first < second ? -1 : 1);\n        }\n        else {\n            Collections.sort(array,\
    \ (first, second) -> first > second ? -1 : 1);\n        }\n        for (long num\
    \ : array) {\n            if (num == max) {\n                results.add(num);\n\
    \            }\n        }\n        return results;", "        Comparator<Long>\
    \ comparator = new Comparator<Long>() {\n            public int compare(Long o1,\
    \ Long o2) {\n                return o1.compareTo(o2);\n            }\n      \
    \  };\n        Arrays.sort(array, comparator);\n        if (array.size() % 2 ==\
    \ 0) {\n            int oddSize = array.size() / 2;\n            long[] longs\
    \ = new long[oddSize];\n            for (int i = 0; i < oddSize; i++) {\n    \
    \            longs[i] = array.get(i);\n            }\n            return new ArrayList<Long>(Arrays.asList(longs));\n\
    \        } else {\n            int evenSize = array.size() / 2;\n            long[]\
    \ longs = new long[evenSize];\n            for (int i = 0; i < evenSize; i++)\
    \ {\n                longs[i] = array.get(i);\n            }\n            Arrays.sort(longs);\n\
    \            return new ArrayList<Long>(Arrays.asList(longs));\n        }", " \
    \       ArrayList<Long> newArray = new ArrayList<Long>();\n        boolean flag\
    \ = true;\n        for (int i = 0; i < array.size(); i++) {\n            long\
    \ first = array.get(i);\n            long last = array.get(i + 1);\n         \
    \   flag = flag && ((first > last) || ((first == last && first % 2 == 1)))\n \
    \                   || ((first < last && first % 2 == 0));\n            if (flag)\
    \ {\n                newArray.add(first);\n                newArray.add(last);\n\
    \            }\n        }\n        return newArray;", "        long sum = 0;\n\
    \        int leng = array.size();\n        int i = 0;\n        ArrayList<Long>\
    \ copy = new ArrayList<>(array);\n\n        Arrays.sort(copy);\n        len =\
    \ copy.size();\n        sum = (array.get(leng - 1) + array.get(0));\n        if\
    \ (sum % 2 == 1) {\n            Collections.reverse(copy);\n        }\n      \
    \  return copy;", "        ArrayList<Long> result = new ArrayList<Long>();\n \
    \       // add the first element\n        result.add(array.get(0));\n        //\
    \ add the rest\n        for (int i = 1; i < array.size(); i++) {\n           \
    \ long sum = 0;\n            sum = array.get(i) + array.get(i - 1);\n        \
    \    if (sum % 2 == 0) {\n                result.add(sum);\n            } else\
    \ {\n                result.add(sum - 1);\n            }\n        }\n        return\
    \ result;", "        ArrayList<Long> result = new ArrayList<Long>(array);\n  \
    \      Collections.sort(result);\n        if (result.get(0).longValue() % 2 !=\
    \ 0 && result.get(result.size() - 1).longValue() % 2 == 0) {\n            Collections.reverse(result);\n\
    \        }\n        return result;", "        long sum = 0; // Sum all elements\
    \ to get sum for odd/even sort\n        for (Long val : array) {\n           \
    \ sum += val;\n        }\n        if (sum % 2 == 0) {\n            Collections.sort(array);\n\
    \        } else {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        }\n        return array;", "        Collections.sort(array);\n      \
    \  Collections.reverse(array);\n        return array;", "        if (array ==\
    \ null || array.size() == 0)\n            return null;\n        boolean isEvenSum\
    \ = false;\n        long firstVal = array.get(0);\n        long lastVal = array.get(array.size()\
    \ - 1);\n        long sum = firstVal + lastVal;\n        System.out.println(sum);\n\
    \        if (sum % 2 != 0) {\n            isEvenSum = true;\n        }\n     \
    \   if (isEvenSum) {\n            array.sort(Collections.reverseOrder());\n  \
    \      } else {\n            array.sort();\n        }\n        return array;",
  "        ArrayList<Long> list = new ArrayList<Long>(array);\n        long sum =\
    \ 0;\n        for (int i = 0; i < list.size(); i++) {\n            sum += list.get(i);\n\
    \        }\n        Collections.sort(list);\n        if (sum % 2 != 0) {\n   \
    \         Collections.reverse(list);\n        }\n        return list;", "    \
    \    Long a = array.get(0);\n        Long b = array.get(array.size() - 1);\n \
    \       Long c = a + b;\n        int isEven = (int)Math.floor(c / 2) % 2 == 0;\n\
    \        ArrayList<Long> result = new ArrayList<Long>();\n        for (int i =\
    \ 0; i < array.size(); i++) {\n            Long d = array.get(i);\n          \
    \  int index = isEven ? i : array.size() - 1 - i;\n            if (isEven && (d\
    \ + b) > c) {\n                Long temp = array.get(index);\n               \
    \ array.set(index, d);\n                array.set(i, temp);\n                isEven\
    \ = !isEven;\n            }\n            result.add(d);\n        }\n        return\
    \ result;", "        PriorityQueue<Long> pq = new PriorityQueue<>((a, b) -> b\
    \ - a);\n        long sum = 0;\n        ArrayList<Long> temp = new ArrayList<>();\n\
    \        for (long val : array)\n            pq.offer(val);\n        while (pq.size()\
    \ > 1) {\n            sum += pq.poll();\n            temp.add(sum);\n        }\n\
    \        if (sum % 2 == 1)\n            return sortArray(temp);\n        else\n\
    \            return sortArray(temp.reverse());", "        long sum = 0;\n    \
    \    int odd = 0;\n        long even = 0;\n        ArrayList<Long> result = new\
    \ ArrayList<>();\n\n        if (array.isEmpty()) {\n            return array;\n\
    \        }\n\n        for (Long number : array) {\n            sum += number;\n\
    \            odd++;\n        }\n\n        if (sum % 2 != 0) {\n            Collections.sort(array,\
    \ (first, second) -> second);\n            Collections.reverse(array);\n     \
    \       Collections.sort(array, (first, second) -> first);\n            Collections.reverse(array);\n\
    \            Collections.sort(array, (first, second) -> first - second);\n   \
    \         Collections.reverse(array);\n            Collections.sort(array, (first,\
    \ second) -> first - second);\n        } else {\n            Collections.sort(array,\
    \ (first, second) -> first);\n            Collections.reverse(array);\n      \
    \      Collections.sort(array, (first, second) -> first - second);\n         \
    \   Collections.reverse(array);\n            Collections.sort(array, (first, second)\
    \ -> first);\n            Collections.reverse(array);\n            Collections.sort(array,\
    \ (first, second) -> first - second);\n        }\n\n        for (Long number :\
    \ array) {\n            if (odd % 2 == 0) {\n                result.add(number);\n\
    \                even++;\n            } else {\n                result.add(number\
    \ - sum);\n                odd++;\n            }\n        }\n        return result;",
  "        ArrayList<Long> copy = array.stream().sorted((a, b) -> {\n            long\
    \ sum = a.get(0) + b.get(0);\n            if (sum % 2 == 0) {\n              \
    \  return -1;\n            }\n            if (sum % 2 == 1) {\n              \
    \  return 1;\n            }\n            return 0;\n        }).toArray(ArrayList::new);\n\
    \        if (copy.isEmpty()) {\n            return array;\n        }\n       \
    \ ArrayList<Long> ret = new ArrayList<>(copy);\n        Collections.sort(ret);\n\
    \        return ret;", "        ArrayList<Long> sortedArray = new ArrayList<>();\n\
    \        int startIndex = 0, endIndex = 0;\n        Long sum;\n        if (array.isEmpty())\
    \ {\n            return new ArrayList<>(array);\n        }\n        sum = array.get(0)\
    \ + array.get(array.getCount() - 1);\n        if (sum % 2 == 0) {\n          \
    \  startIndex = 1;\n            endIndex = array.getCount() - 1;\n        } else\
    \ {\n            startIndex = 0;\n            endIndex = array.getCount() - 1;\n\
    \        }\n        Collections.sort(array, (a, b) -> {\n            int compare\
    \ = Long.compare(a.get(startIndex), b.get(startIndex));\n            if (compare\
    \ != 0) {\n                return compare;\n            }\n            return\
    \ Long.compare(a.get(endIndex), b.get(endIndex));\n        });\n        Collections.sort(array,\
    \ (a, b) -> {\n            int compare = Long.compare(a.get(startIndex), b.get(startIndex));\n\
    \            if (compare != 0) {\n                return compare;\n          \
    \  }\n            return Long.compare(a.get(endIndex), b.get(endIndex));\n   \
    \     });\n        sortedArray.addAll(array.subList(0, startIndex));\n       \
    \ sortedArray.addAll(array.subList(endIndex + 1, array.getCount()));\n       \
    \ return sortedArray;", "        Collections.sort(array);\n        double sum\
    \ = 0;\n        for (long value : array) {\n            sum += value;\n      \
    \  }\n        if (sum % 2 == 0) {\n            Collections.reverse(array);\n \
    \       }\n        return array;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (array.isEmpty()) {\n            return result;\n        }\n     \
    \   long sum = array.get(0) + array.get(array.size() - 1);\n        if (sum &\
    \ 1) {\n            result.add(array.remove(0));\n        }\n        result.addAll(array);\n\
    \        return result;", "        ArrayList<Long> arrayCopy = new ArrayList<>();\n\
    \        for(int i = 0; i < array.size(); i++)\n            arrayCopy.add(array.get(i));\n\
    \        for(int i = 0; i < arrayCopy.size(); i = i + 2)\n            sortHelper(array,\
    \ arrayCopy, i, i + 2);\n        return array;", "        long[] numbers = new\
    \ long[array.size()];\n        LongPointer firstPointer = LongPointer.newInstance(array.get(0));\n\
    \        LongPointer lastPointer = firstPointer.next();\n        for (int i =\
    \ 0; i < array.size(); i++) {\n            numbers[i] = array.get(i);\n      \
    \  }\n        Arrays.sort(numbers);\n        if (numbers[0] + numbers[numbers.length\
    \ - 1] % 2 == 1) {\n            Collections.sort(numbers, (a, b) -> a - b);\n\
    \        } else {\n            Collections.sort(numbers, (a, b) -> b - a);\n \
    \       }\n        LongPointer resultPointer = LongPointer.newInstance(numbers[0]);\n\
    \        for (int i = 1; i < numbers.length; i++) {\n            resultPointer.set(resultPointer.next()\
    \ + numbers[i]);\n        }\n        return resultPointer.copy();", "        long\
    \ sum;\n        int count = 0;\n        boolean isOdd;\n        boolean isEven;\n\
    \        long firstValue = array.get(0);\n        long lastValue = array.get(array.size()\
    \ - 1);\n\n        for(int i = 1; i < array.size(); i++) {\n            sum =\
    \ array.get(i) + array.get(i - 1);\n            isOdd = (sum % 2 == 1L);\n   \
    \         isEven = (sum % 2 == 0L);\n\n            if((isOdd && isEven) || (!isOdd\
    \ && !isEven)) {\n                Collections.swap(array, i, i - 1);\n       \
    \         count++;\n            }\n        }\n\n        if(count != 1) {\n   \
    \         Collections.reverse(array);\n        }\n\n        return array;", " \
    \       PriorityQueue<Long> pq = new PriorityQueue<>(array.size());\n        for\
    \ (long n : array) {\n            pq.add(n);\n        }\n        ArrayList<Long>\
    \ result = new ArrayList<>(pq.size());\n        while (pq.size() > 0) {\n    \
    \        result.add(pq.poll());\n        }\n        // System.out.println(Arrays.toString(result.toArray()));\n\
    \        return result;", "        if (array.isEmpty()) return array;\n      \
    \  Collections.sort(array);\n        long sumFirst = array.get(0);\n        long\
    \ sumLast = array.get(array.size() - 1);\n        if (sumFirst % 2 == 1) return\
    \ array.stream().sorted(Comparator.comparing(x -> -x % 2)\n                .thenComparing(x\
    \ -> x)).collect(Collectors.toCollection(ArrayList::new));\n        else return\
    \ array.stream().sorted(Comparator.comparing(x -> x % 2).reversed()\n        \
    \        .thenComparing(x -> -x)).collect(Collectors.toCollection(ArrayList::new));",
  "        long sum = 0;\n        int sumEven = 0, sumOdd = 0;\n        for (int i\
    \ = 0; i < array.size(); i++) {\n            sumEven += array.get(i);\n      \
    \  }\n        for (int i = array.size() - 1; i >= 0; i--) {\n            sumOdd\
    \ += array.get(i);\n        }\n        if (sumOdd > sumEven) {\n            Collections.sort(array);\n\
    \        } else {\n            Collections.reverse(array);\n        }\n      \
    \  return array;", "        long sum = 0;\n        for (Long element : array)\
    \ {\n            sum += element;\n        }\n\n        boolean isEven = sum %\
    \ 2 == 0;\n        boolean isOdd = !isEven;\n\n        if (isEven) {\n       \
    \     Collections.sort(array, (Long a, Long b) -> Long.compare(b, a));\n     \
    \   } else {\n            Collections.sort(array, (Long a, Long b) -> Long.compare(a,\
    \ b));\n        }\n\n        return array;", "        Collections.sort(array);\n\
    \        if (array.get(array.size() - 1) == 0) {\n            return array;\n\
    \        }\n        if (array.get(array.size() - 1) % 2 == 0) {\n            Collections.reverse(array);\n\
    \        }\n        return array;", "        ArrayList<Long> arrayCopy = new ArrayList<Long>();\n\
    \        long sumFirst = 0, sumLast = 0;\n        for (int i = 0; i < array.size();\
    \ i++) {\n            arrayCopy.add(array.get(i));\n            sumFirst += array.get(i);\n\
    \            sumLast += array.get(i);\n        }\n        if (sumLast % 2 == 0)\
    \ {\n            Collections.sort(arrayCopy, (a, b) -> a - b);\n        } else\
    \ if (sumLast % 2 == 1) {\n            Collections.sort(arrayCopy, (a, b) -> b\
    \ - a);\n        }\n        return arrayCopy;", "        if (array.size() == 0)\
    \ {\n            return array;\n        }\n        long sum = array.get(0l) +\
    \ array.get(array.size() - 1l);\n        if (sum % 2 == 1) {\n            Collections.sort(array,\
    \ (x, y) -> {\n                return x.longValue() - y.longValue();\n       \
    \     });\n        } else {\n            Collections.sort(array, (x, y) -> {\n\
    \                return y.longValue() - x.longValue();\n            });\n    \
    \    }\n        return array;", "        if (array == null)\n            return\
    \ null;\n        long[] firstLastSum = new long[2];\n        firstLastSum[0] =\
    \ first(array, 0); // first index\n        firstLastSum[1] = last(array, 0); //\
    \ last index\n        firstLastSum[0] = first(array, 0); // first index\n    \
    \    firstLastSum[1] = last(array, 0); // last index\n        int sumSum = 0;\n\
    \        if (firstLastSum[0] <= firstLastSum[1]) {\n            sumSum += firstLastSum[0];\n\
    \        } else {\n            sumSum += firstLastSum[1];\n        }\n       \
    \ sumSum += last(array, 0);\n        if (sumSum % 2 == 0) {\n            Collections.sort(array);\n\
    \            return array;\n        } else {\n            Collections.reverse(array);\n\
    \            return array;\n        }", "        long sum = 0;\n        long temp\
    \ = 0;\n        long sumEven = 0;\n        long sumOdd = 0;\n        int sumEvenCount\
    \ = 0, sumOddCount = 0;\n        long sumEvenTemp = 0, sumOddTemp = 0;\n     \
    \   long sumEvenTemp1 = 0, sumOddTemp1 = 0;\n        int tempCount = 0;\n    \
    \    Arrays.sort(array);\n        sumEven = array.get(0);\n        sumOdd = array.get(array.size()\
    \ - 1);\n        sumEvenCount = array.size();\n        sumOddCount = 0;\n    \
    \    sumEvenTemp = sumEven;\n        sumOddTemp = sumOdd;\n        sumEvenTemp1\
    \ = sumEven;\n        sumOddTemp1 = sumOdd;\n        for (int i = 0; i < array.size();\
    \ i++) {\n            if (i % 2 == 0) {\n                sum = sum + array.get(i);\n\
    \                sumEven = sumEven + array.get(i);\n                sumEvenCount++;\n\
    \            } else {\n                temp = array.get(i);\n                sumOdd\
    \ = sumOdd + temp;\n                sumOddCount++;\n            }\n        }\n\
    \        sumEvenTemp = sumEven - sumEvenCount * sumEven;\n        sumOddTemp =\
    \ sumOdd - sumOddCount * sumOdd;\n        if (sumEvenCount % 2 == 1) {\n     \
    \       sumEvenTemp1 = sumEven + sumEvenCount * sumEven;\n            sumOddTemp1\
    \ = sumOdd - sumOddCount * sumOdd;\n        }\n        sumEvenCount = 0;\n   \
    \     sumOddCount = 0;\n        array = new ArrayList<Long>();\n        array.add(sumEvenTemp);\n\
    \        array.add(sumEvenTemp1);\n        sumEvenTemp = 0;\n        sumEvenTemp1\
    \ = 0;\n        for (int i = 1; i < sumEvenCount; i++) {\n            if (sumEven\
    \ + sumEvenCount * sumEven > sumOdd + sumOddCount * sumOdd) {\n              \
    \  sumEven = sumEvenTemp;\n                sumEvenCount = sumEvenCount;\n    \
    \            sumEvenTemp = sumEven;\n                sumEvenTemp1 = sumEvenTemp1;\n\
    \                sumEvenTemp = sumEven;\n                sumEvenTemp1 = sumEven;\n\
    \                sumEvenCount += sumEvenCount;\n                sumEvenTemp =\
    \ sumEven;\n                sumEvenTemp1 = sumEven;\n                sumEvenTemp\
    \ = sumEven;\n                sumEvenTemp1 = sumEven;\n            } else {\n\
    \                sumEven = sumEven + sumEvenCount * sumEven;\n               \
    \ sumEvenCount = sumEvenCount;\n                sumEvenTemp = sumEven", "    \
    \    // sort array in ascending order\n        if (array.isEmpty()) return array;\n\
    \        ArrayList<Long> even = new ArrayList<>(array.size());\n        ArrayList<Long>\
    \ odd = new ArrayList<>(array.size());\n        for (int i = 0; i < array.size();\
    \ i++) {\n            if (array.get(i) % 2 == 0) {\n                even.add(array.get(i));\n\
    \            } else {\n                odd.add(array.get(i));\n            }\n\
    \        }\n        long sum = 0;\n        for (long i = 0; i < odd.size(); i++)\
    \ {\n            sum += odd.get(i);\n        }\n        if (sum % 2 != 0) {\n\
    \            Collections.sort(odd);\n            Collections.sort(even);\n   \
    \     } else {\n            Collections.sort(even);\n            Collections.sort(odd);\n\
    \        }\n        ArrayList<Long> newEven = new ArrayList<>(even);\n       \
    \ ArrayList<Long> newOdd = new ArrayList<>(odd);\n        long sumEven = 0;\n\
    \        long sumOdd = 0;\n        for (long i = 0; i < newEven.size(); i++) {\n\
    \            sumEven += newEven.get(i);\n        }\n        for (long i = 0; i\
    \ < newOdd.size(); i++) {\n            sumOdd += newOdd.get(i);\n        }\n \
    \       if (sumEven % 2 != 0) {\n            Collections.sort(newEven);\n    \
    \        Collections.sort(newOdd);\n        }\n        return new ArrayList<>(newEven);",
  "        if (array == null || array.size() == 0) {\n            return array;\n\
    \        }\n\n        // Sort the given array.\n        // Calculate the sum of\
    \ the first and last element.\n        // Sort the given array in ascending order\
    \ if the sum is odd, in descending order if the sum is even.\n\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<>(array.size()); // copy the given array first\n\
    \        long sum = array.get(0l) + array.get(array.size() - 1l); // find the\
    \ sum first\n\n        Collections.sort(array, Comparator.comparing(i -> i));\n\
    \n        boolean ascendingSumOdd = ((sum % 2) == 1);\n        boolean descendingSumEven\
    \ = ((sum % 2) == 0); // even sum is even\n\n        if (!ascendingSumOdd && !descendingSumEven)\
    \ {\n            Collections.reverse(array, Comparator.comparing(i -> i));\n \
    \       } else if (ascendingSumOdd && !descendingSumEven) {\n            Collections.sort(array);\
    \ // ascending\n        } else if (descendingSumEven && !ascendingSumOdd) {\n\
    \            Collections.reverse(array); // descending\n        }\n\n        Collections.reverse(array,\
    \ Comparator.comparing(i -> i)); // descending first\n\n        sortedArray.addAll(array);\n\
    \        return sortedArray;", "        PriorityQueue<Long> queue = new PriorityQueue<>(array);\n\
    \        ArrayList<Long> result = new ArrayList<>();\n        while(!queue.isEmpty())\
    \ {\n            Long curr = queue.poll();\n            if(curr.intValue() % 2\
    \ == 1) {\n                result.add(curr);\n                queue.offer(-curr);\n\
    \            }\n        }\n        return result;", "        int sumOfAll = array.stream().reduce(0l,\
    \ Long::sum);\n        int sumOfFirst = array.get(0l).longValue();\n        int\
    \ sumOfLast = array.get(array.size() - 1l).longValue();\n        System.out.println(\"\
    Sum of all is: \" + sumOfAll);\n        System.out.println(\"Sum of first is \"\
    \ + sumOfFirst);\n        System.out.println(\"Sum of last is \" + sumOfLast);\n\
    \        if (sumOfAll % 2 == 0) {\n            if (sumOfLast % 2 == 0) {\n   \
    \             Collections.sort(array);\n            } else {\n               \
    \ Collections.reverse(array);\n            }\n        } else {\n            if\
    \ (sumOfFirst % 2 == 0) {\n                Collections.sort(array);\n        \
    \    } else {\n                Collections.reverse(array);\n            }\n  \
    \      }\n        return array;", "        int size = array.size();\n        if\
    \ (size <= 1) {\n            return array;\n        }\n        if (size == 2)\
    \ {\n            if (isOdd(array.get(0))) {\n                return sortArray(Arrays.asList(array.get(0),array.get(1)));\n\
    \            } else {\n                return sortArray(Arrays.asList(array.get(0),array.get(1)));\n\
    \            }\n        }\n        int sum = sumOf(array);\n        long temp;\n\
    \        if (isOdd(sum)) {\n            temp = sumOf(sortArray(Arrays.asList(array.get(0),array.get(1))));\n\
    \        } else {\n            temp = sumOf(sortArray(Arrays.asList(array.get(0),array.get(1),array.get(0))));\n\
    \        }\n        int i = 1;\n        ArrayList<Long> arrayList = Arrays.asList(array);\n\
    \        while (i <= size - 1) {\n            if (arrayList.get(i - 1).longValue()\
    \ <= temp.longValue()) {\n                arrayList.set(i, arrayList.get(i - 1));\n\
    \            } else {\n                arrayList.set(i, temp);\n            }\n\
    \            i += 1;\n        }\n        return arrayList;", "        ArrayList<Long>\
    \ sorted = new ArrayList<Long>();\n        long sum = 0;\n        for (long num\
    \ : array) {\n            sum += num;\n        }\n        sorted.add(0, 0);\n\
    \        if (sum % 2 == 0) {\n            sorted.add(0, sum - 1);\n          \
    \  sorted.add(array.size() - 1, 0);\n        } else {\n            sorted.add(array.size()\
    \ - 1, 0);\n            sorted.add(0, sum - 1);\n        }\n        Collections.sort(sorted);\n\
    \        return sorted;", "        if (array.isEmpty()) return new ArrayList<>();\n\
    \        if (array.isEmpty() || array.get(0) == null || array.get(array.size()\
    \ - 1) == null) return new ArrayList<>();\n\n        long firstIndex = array.get(0);\n\
    \        long lastIndex = getLastIndex(firstIndex, array);\n\n        long currentIndex\
    \ = getSum(firstIndex, lastIndex);\n        boolean isEven = currentIndex & 0x1\
    \ == 0;\n        ArrayList<Long> sortedArray = new ArrayList<>();\n\n        if\
    \ (currentIndex % 2 == 0) {\n            sortedArray.add(0, firstIndex);\n   \
    \         sortedArray.add(lastIndex);\n        } else {\n            sortedArray.add(firstIndex);\n\
    \            sortedArray.add(lastIndex);\n        }\n\n        long middleIndex\
    \ = getMiddle(firstIndex, lastIndex, currentIndex, isEven);\n\n        if (middleIndex\
    \ - firstIndex == 1) {\n            sortedArray.add(0, middleIndex);\n       \
    \     sortedArray.add(lastIndex);\n        } else {\n            sortedArray.add(middleIndex);\n\
    \            sortedArray.add(lastIndex);\n        }\n\n        if (isEven) {\n\
    \            sortedArray.add(0, firstIndex);\n            sortedArray.add(lastIndex);\n\
    \        } else {\n            sortedArray.add(firstIndex);\n            sortedArray.add(lastIndex);\n\
    \        }\n\n        return sortedArray;", "        List<Long> result = new ArrayList<>();\n\
    \        for (Long val : array) {\n            result.add(val);\n        }\n \
    \       Collections.sort(result);\n        if (result.stream().anyMatch(x -> x\
    \ % 2 == 1)) {\n            Collections.reverse(result);\n        }\n        return\
    \ result;", "        int n = array.size();\n        if (n % 2 == 0) {\n      \
    \      Collections.sort(array);\n            return array;\n        }\n      \
    \  Collections.sort(array, (a, b) -> Integer.compare(a + b));\n        ArrayList<Long>\
    \ sorted = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n      \
    \      if (i == n - 1) {\n                sorted.add(array.get(i));\n        \
    \    } else {\n                sorted.add(array.get(i) + array.get(i + 1));\n\
    \            }\n        }\n        Collections.sort(sorted);\n        return sorted;",
  "        long sum = 0;\n        for (long num : array) {\n            sum += num;\n\
    \        }\n        if (sum % 2 == 1) {\n            return array.stream().sorted((l,\
    \ r) -> Long.compare(r, l)).collect(Collectors.toCollection(ArrayList.class));\n\
    \        } else {\n            return array.stream().sorted((l, r) -> Long.compare(l,\
    \ r)).collect(Collectors.toCollection(ArrayList.class));\n        }", "      \
    \  // Write your code here\n        Collections.sort(array);\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        long sum = array.get(array.size() - 1);\n\
    \        if (sum % 2 == 0) {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                if (i != array.size() - 1) {\n                    result.add(array.get(i)\
    \ + array.get(i + 1));\n                }\n            }\n        } else {\n \
    \           for (int i = array.size() - 1; i >= 0; i--) {\n                if\
    \ (i != 0) {\n                    result.add(array.get(i - 1) + array.get(i));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   ArrayList<Long> result = new ArrayList<Long>(array);\n        long start =\
    \ 0;\n        long end = 0;\n        for (long sum = result.stream().reduce(0l,\
    \ (a, b) -> a + b, (a, b) -> a + b); end < result.size(); end += 2) {\n      \
    \      if (sum % 2 == 1) {\n                Collections.sort(result, (a, b) ->\
    \ Long.compare(b, a));\n            } else {\n                Collections.sort(result,\
    \ (a, b) -> Long.compare(a, -b));\n            }\n            Collections.swap(result,\
    \ start, end);\n        }\n        return result;", "        int s = 0, e = array.length\
    \ - 1, r = 0;\n        while (e >= s) {\n            // if even\n            if\
    \ (e % 2 == 1) {\n                if (array[e] % 2 == 0) {\n                 \
    \   while (e >= s && array[e] % 2 == 0) {\n                        e--;\n    \
    \                }\n                    while (e >= s && array[e] % 2 == 1) {\n\
    \                        array[e] += array[e];\n                        e--;\n\
    \                    }\n                    while (e >= s && array[e] % 2 == 1)\
    \ {\n                        array[e] -= array[e];\n                        e--;\n\
    \                    }\n                    while (e >= s && array[e] % 2 == 0)\
    \ {\n                        array[e] -= array[e];\n                        e--;\n\
    \                    }\n                } else {\n                    while (e\
    \ >= s && array[e] % 2 == 0) {\n                        array[e] += array[e];\n\
    \                        e--;\n                    }\n                    while\
    \ (e >= s && array[e] % 2 == 1) {\n                        array[e] -= array[e];\n\
    \                        e--;\n                    }\n                    while\
    \ (e >= s && array[e] % 2 == 1) {\n                        array[e] -= array[e];\n\
    \                        e--;\n                    }\n                    while\
    \ (e >= s && array[e] % 2 == 0) {\n                        array[e] += array[e];\n\
    \                        e--;\n                    }\n                }\n    \
    \            // if odd\n            } else {\n                if (array[e] % 2\
    \ == 0) {\n                    while (e >= s && array[e] % 2 == 0) {\n       \
    \                 e--;\n                    }\n                    while (e >=\
    \ s && array[e] % 2 == 1) {\n                        array[e] += array[e];\n \
    \                       e--;\n                    }\n                    while\
    \ (e >= s && array[e] % 2 == 1) {\n                        array[e] -= array[e];\n\
    \                        e--;\n                    }\n                    while\
    \ (e >= s && array[e] % 2 == 0) {\n                        array[e] -= array[e];\n\
    \                        e--;\n                    }\n                } else {\n\
    \                    while (e >= s && array[e] % 2 == 0) {\n                 \
    \       array[e] += array[e];\n                        e--;\n                \
    \    }\n                    while (e >= s && array[e] % 2 == 1) {\n          \
    \              array[e] -= array[e];\n                        e--;\n         \
    \           }\n                    while (e >= s && array[e] % 2 == 1) {\n   \
    \                     array[e] -= array[e];\n                        e--;\n  \
    \                  }\n                    while (e >= s && array[e] % 2 == 0)\
    \ {\n                        array[e] += array[e];\n                        e--;\n\
    \                    }\n                }\n            }\n            // if even\n\
    \            if (e % 2 == 1) {\n                if (array[e] % 2 == 0) {\n   \
    \                 while (e >= s && array[e] % 2 == 0) {\n                    \
    \    e--;\n                    }\n                    while (e >= s && array[e]\
    \ % 2 == 1) {\n                        array[e] += array[e];\n", "        Arrays.sort(array);\n\
    \        if (sumOfArray(array) % 2 != 0) {\n            Collections.reverse(array);\n\
    \        }\n        return array;", "        if (array.size() <= 1) {\n      \
    \      return array;\n        }\n\n        ArrayList<Long> list = array;\n   \
    \     list.sort(new Comparator<Long>() {\n            public int compare(Long\
    \ o1, Long o2) {\n                if (o2 == 0) {\n                    return o1\
    \ == 0 ? 0 : -1;\n                }\n                if (o2 == o1) {\n       \
    \             return 0;\n                }\n                if (o2 == o1 + Long.MIN_VALUE)\
    \ {\n                    return 1;\n                }\n                return\
    \ -1;\n            }\n        });\n\n        return list;", "        long sum\
    \ = 0;\n        for (Long i : array) {\n            sum += i;\n        }\n   \
    \     Long[] longArray = array.toArray(new Long[0]);\n        Arrays.sort(longArray);\n\
    \        ArrayList<Long> result = new ArrayList<>(array.size());\n        for\
    \ (Long i : longArray) {\n            if (i % 2 == 0) {\n                result.add(i);\n\
    \            } else {\n                Collections.sort(result);\n           \
    \     result.add(i);\n            }\n        }\n        return result;", "   \
    \     // Write your code here\n        List<Long> list = array.stream().sorted(Comparator.comparingLong(Long::longValue)).collect(Collectors.toList());\n\
    \        return new ArrayList<>(list);", "        PriorityQueue<Long> pq = new\
    \ PriorityQueue<>(array::comparingLong(l -> l).reversed());\n        long sum\
    \ = 0;\n        int i = 0, j = 0;\n        int k = 0;\n        while (i < array.size()\
    \ && j < array.size() && k < array.size()) {\n            sum += array.get(i);\n\
    \            i = i + 2;\n            j = j + 2;\n            k = k + 2;\n    \
    \    }\n        if (sum % 2 != 0) {\n            Collections.reverse(pq);\n  \
    \      }\n        return new ArrayList<>(pq);", '        return sortArray(array,
    array.size());', "        ArrayList<Long> tempArray = array;\n        int sum\
    \ = 0;\n        for (int i = 0; i < tempArray.size(); i++) {\n            sum\
    \ += tempArray.get(i);\n        }\n        if (sum % 2 != 0) {\n            Collections.sort(tempArray);\n\
    \        }\n        return tempArray;", "        int n = array.size();\n     \
    \   long maxSum = 0;\n        long minSum = Integer.MAX_VALUE;\n        long sum\
    \ = 0;\n        for(int i = 1; i < n; i++) {\n            sum = sum + array.get(i);\n\
    \            if (sum > maxSum) {\n                maxSum = sum;\n            }\n\
    \            if (sum < minSum) {\n                minSum = sum;\n            }\n\
    \        }\n        ArrayList<Long> sorted = new ArrayList<Long>();\n        if\
    \ (minSum % 2 == 1) {\n            sorted = array;\n        } else {\n       \
    \     ArrayList<Long> tempArray = array;\n            while(tempArray.size() >\
    \ 1) {\n                sorted.add(tempArray.remove(0));\n                sorted.add(tempArray.remove(0));\n\
    \            }\n            sorted.add(tempArray.get(0));\n        }\n       \
    \ return sorted;", "        ArrayList<Long> reversedArray = new ArrayList<>(array);\n\
    \        if (reversedArray.get(0) % 2 == 1) {\n            Collections.reverse(reversedArray);\n\
    \        }\n        long first = reversedArray.get(0);\n        long last  = reversedArray.get(reversedArray.size()\
    \ - 1);\n        long sum = (first + last);\n        ArrayList<Long> result =\
    \ new ArrayList<>();\n        boolean isEven = sum % 2 == 0;\n        for (int\
    \ i = 0; i < array.size(); i++) {\n            long current = array.get(i);\n\
    \            long next = (isEven)\n                    ? (current + last)\n  \
    \                  : (current + first );\n            if (next > last) {\n   \
    \             result.add(next);\n            } else if (next < last) {\n     \
    \           result.add(last);\n            } else {\n                result.add(current);\n\
    \            }\n        }\n        if (isEven) {\n            Collections.sort(result);\n\
    \        } else {\n            Collections.sort(result, Comparator.reverseOrder());\n\
    \        }\n        return result;", "        Collections.sort(array);\n     \
    \   if (array.get(array.size() - 1) == array.get(array.size() - 2)) {\n      \
    \      Collections.reverse(array);\n        }\n        return array;", "     \
    \   int firstIndex = 0;\n        int lastIndex = 0;\n        long sum = 0;\n \
    \       long sum1 = 0;\n        boolean oddOrEven = false;\n        boolean isFirstIndexOdd\
    \ = (firstIndex % 2) == 1;\n        boolean isLastIndexOdd = (lastIndex % 2) ==\
    \ 1;\n        boolean isFirstIndexEven = (firstIndex % 2) == 0;\n        boolean\
    \ isLastIndexEven = (lastIndex % 2) == 0;\n        if (array.size() > 0) {\n \
    \           sum = array.get(firstIndex);\n            sum1 = array.get(lastIndex);\n\
    \            if (sum1 < sum) {\n                oddOrEven = true;\n          \
    \  }\n            if (sum1 > sum) {\n                oddOrEven = false;\n    \
    \        }\n            if (oddOrEven) {\n                Collections.sort(array,\
    \ new Comparator<Long>() {\n                    public int compare(Long o1, Long\
    \ o2) {\n                        int result = o1.compareTo(o2);\n            \
    \            if (result == 0) {\n                            // Even sum\n   \
    \                         if (isFirstIndexEven) {\n                          \
    \      if (isLastIndexEven) {\n                                    return 0;\n\
    \                                } else {\n                                  \
    \  return -1;\n                                }\n                           \
    \ } else {\n                                if (isLastIndexEven) {\n         \
    \                           return 1;\n                                } else\
    \ {\n                                    return o2.compareTo(o1);\n          \
    \                      }\n                            }\n                    \
    \    } else if (result < 0) {\n                            // Odd sum\n      \
    \                      if (isFirstIndexOdd) {\n                              \
    \  if (isLastIndexOdd) {\n                                    return 0;\n    \
    \                            } else {\n                                    return\
    \ 1;\n                                }\n                            } else {\n\
    \                                if (isLastIndexOdd) {\n                     \
    \               return -1;\n                                } else {\n       \
    \                             return o2.compareTo(o1);\n                     \
    \           }\n                            }\n                        } else {\n\
    \                            return result;\n                        }\n     \
    \               }\n                });\n            }\n        }\n        return\
    \ array;", "        long sum = 0;\n        long evenSum = 0;\n        int evenIndex\
    \ = 0;\n        int oddIndex = 0;\n        for(int i = 0; i < array.size(); i++)\
    \ {\n            sum += array.get(i);\n            if(sum % 2 == 0) {\n      \
    \          evenSum += array.get(i);\n                evenIndex++;\n          \
    \  } else {\n                oddIndex++;\n            }\n        }\n        if(oddIndex\
    \ < evenIndex) {\n            Collections.sort(array);\n            for(int i\
    \ = 0; i < array.size(); i++) {\n                array.set(i, evenSum - array.get(i));\n\
    \            }\n        } else if(oddIndex > evenIndex) {\n            Collections.reverse(array);\n\
    \            for(int i = 0; i < array.size(); i++) {\n                array.set(i,\
    \ sum - array.get(i));\n            }\n        } else {\n            Collections.sort(array);\n\
    \        }\n        return array;", "        PriorityQueue<Long> queue = new PriorityQueue<>(array.size());\n\
    \        for(Long element : array)\n            queue.add(element);\n        ArrayList<Long>\
    \ result = new ArrayList<>(queue.size());\n        while(!queue.isEmpty())\n \
    \           result.add(queue.poll());\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<>();\n        HashMap<Long, Long> h = new HashMap<>();\n\
    \        for (Long n : array) {\n            h.put(Arrays.asList(n), n);\n   \
    \     }\n        Set<Map.Entry<Long, Long>> set = h.entrySet();\n        ArrayList<Long>\
    \ sorted = new ArrayList<>(set);\n        Collections.sort(sorted, new Comparator<Map.Entry<Long,\
    \ Long>>() {\n            public int compare(Map.Entry<Long, Long> o1, Map.Entry<Long,\
    \ Long> o2) {\n                long o1sum = o1.getValue();\n                long\
    \ o2sum = o2.getValue();\n                if (o1sum % 2 == 0) {\n            \
    \        if (o2sum % 2 == 0) {\n                        return 0;\n          \
    \          } else {\n                        return -1;\n                    }\n\
    \                } else {\n                    if (o2sum % 2 == 0) {\n       \
    \                 return 1;\n                    } else {\n                  \
    \      return -1;\n                    }\n                }\n            }\n \
    \       });\n        for (Map.Entry<Long, Long> e : sorted) {\n            result.add(e.getValue());\n\
    \        }\n        return result;", "        int n = array.size();\n        if\
    \ (n > 0) {\n            int sum = 0;\n            for (int i = 0; i < n; i++)\
    \ {\n                sum += array.get(i);\n            }\n            Collections.sort(array);\n\
    \            if (sum & 1) Collections.reverse(array);\n        }\n        return\
    \ array;", "        ArrayList<Long> temp = new ArrayList<>();\n        HashMap<Long,\
    \ Long> map = new HashMap<>();\n        for (Long i : array) {\n            if\
    \ (!map.containsKey(i)) {\n                map.put(i, i);\n                temp.add(i);\n\
    \            }\n        }\n        LinkedList<Long> list = new LinkedList<>();\n\
    \        for (Long i : temp) {\n            if (!map.containsKey(i)) {\n     \
    \           map.put(i, i);\n                list.add(i);\n            }\n    \
    \    }\n        temp.clear();\n        for (Map.Entry<Long, Long> entry : map.entrySet())\
    \ {\n            temp.add(entry.getValue());\n        }\n        if (map.size()\
    \ % 2 == 0) {\n            temp.add(map.get(map.size() - 1));\n        } else\
    \ {\n            temp.add(map.get(map.size() - 2));\n        }\n        Collections.sort(temp);\n\
    \        return temp;", "        int length = array.size();\n        if (length\
    \ <= 1) {\n            return array;\n        }\n\n        ArrayList<Long> copy\
    \ = new ArrayList<>();\n        ArrayList<Long> sorted = new ArrayList<>();\n\n\
    \        long firstValue = array.get(0);\n        long lastValue = array.get(length\
    \ - 1);\n        long sumOfFirstAndLast = firstValue + lastValue;\n\n        //\
    \ If the sum is even, sort in descending order\n        if (sumOfFirstAndLast\
    \ % 2 == 0) {\n            Collections.sort(array, (Long a, Long b) -> Long.compare(b,\
    \ a));\n            return array;\n        }\n\n        // If the sum is odd,\
    \ sort in ascending order\n        Collections.sort(array, (Long a, Long b) ->\
    \ Long.compare(a, b));\n        return array;", "        // TODO Auto-generated\
    \ method stub\n        int sum = 0;\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        for(int i=0;i<array.size();i++){\n            sum = sum + array.get(i);\n\
    \        }\n        if(sum % 2 == 1){\n            Collections.sort(array);\n\
    \            for(int i=0;i<array.size();i++){\n                temp = temp.concat(array.subList(i+1,\
    \ array.size()));\n                Collections.sort(temp);\n                array.addAll(temp);\n\
    \            }\n        }else{\n            Collections.sort(array);\n       \
    \     for(int i=0;i<array.size();i++){\n                temp = temp.concat(array.subList(i+1,\
    \ array.size()));\n                Collections.sort(temp);\n                array.addAll(temp);\n\
    \            }\n        }\n        return array;", "        // write your code\
    \ here\n        ArrayList<Long> sortedArray = new ArrayList<Long>();\n       \
    \ for(int i = 0; i<array.size()-1; i++){\n            long sum = Math.abs(array.get(i)+array.get(i+1));\n\
    \            if(sum%2==1){\n                sortedArray.add(array.get(i));\n \
    \               sortedArray.add(array.get(i+1));\n            }\n            else{\n\
    \                sortedArray.add(array.get(i+1));\n                sortedArray.add(array.get(i));\n\
    \            }\n        }\n        return sortedArray;", "        Arrays.sort(array);\n\
    \        if (array.size() % 2 == 1) {\n            Arrays.sort(array, (a, b) ->\
    \ Integer.compare(a + b));\n        }\n        return array;", "        Comparator<Long>\
    \ comparator = (c1, c2) -> (long) (c1 - c2);\n        long sum = array.get(0)\
    \ + array.get(array.size() - 1);\n        if (sum % 2 == 1) {\n            return\
    \ array.stream().sorted(comparator).collect(Collectors.toList());\n        }\n\
    \        return array.stream().sorted(comparator.reversed()).collect(Collectors.toList());",
  "        long sum = 0;\n        long maxIndex = 0;\n        for (int i = 0; i <\
    \ array.size(); i++) {\n            sum = sum + array.get(i);\n            if\
    \ (sum >= (long)array.size()-1) {\n                sum -= (long)array.size()-1;\n\
    \                maxIndex = i;\n            }\n        }\n\n        if (sum %\
    \ 2 == 0) {\n            Collections.sort(array, (o1, o2) -> {\n             \
    \   int diff = o1.compareTo(o2);\n                return Integer.compare(diff,\
    \ Integer.signum(o1-o2));\n            });\n        } else {\n            Collections.sort(array,\
    \ (o1, o2) -> {\n                int diff = Integer.signum(o1-o2);\n         \
    \       return Integer.compare(diff, Integer.signum(o2-o1));\n            });\n\
    \        }\n\n        ArrayList<Long> result = new ArrayList<Long>();\n      \
    \  for (int i = 0; i < array.size(); i++) {\n            result.add(array.get(i));\n\
    \        }\n\n        if (result.size() > maxIndex) {\n            result.subList(maxIndex,\
    \ result.size()).clear();\n        }\n\n        return result;", "        ArrayList<Long>\
    \ result = new ArrayList<Long>();\n        // sort in ascending order if the sum(\
    \ first index value, last index value) is odd,\n        // or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n        if\
    \ (array.size() > 0) {\n            long sum = array.get(0) + array.get(array.size()\
    \ - 1);\n            if (sum % 2 == 0) {\n                Collections.sort(array);\n\
    \            } else {\n                Collections.sort(array, (a, b) -> b - a);\n\
    \            }\n            result.addAll(array);\n        }\n        return result;",
  "        long sum = 0;\n        long max = 0;\n        long min = 0;\n        for\
    \ (int i = 0; i < array.size(); i++) {\n            sum += array.get(i);\n   \
    \         min = Math.min(min, array.get(i));\n            max = Math.max(max,\
    \ array.get(i));\n        }\n        if (sum % 2 == 0) {\n            return sortAsc(array,\
    \ sum, max, min);\n        } else {\n            return sortDesc(array, sum, max,\
    \ min);\n        }", "        if (array == null) {\n            return null;\n\
    \        }\n        PriorityQueue<Long> queue = new PriorityQueue<>(new Comparator<Long>()\
    \ {\n            public int compare(Long a, Long b) {\n                int res\
    \ = Integer.compare(a + b, b + a);\n                return res == 0 ? a < b ?\
    \ -1 : 1 : 0;\n            }\n        });\n        queue.addAll(array);\n    \
    \    long last = array.get(array.size() - 1);\n        for (long i = last; i !=\
    \ 0; i--) {\n            queue.offer(i);\n        }\n        ArrayList<Long> result\
    \ = new ArrayList<>();\n        while (queue.size() > 0) {\n            result.add(queue.poll());\n\
    \        }\n        return result;", "        long result = Collections.max(array)\
    \ + Collections.min(array);\n        return array.isEmpty() ? new ArrayList<Long>()\
    \ : array.stream()\n                .sorted(Comparator.comparingLong(Long::longValue)\n\
    \                        .thenComparing(Long::longValue)\n                   \
    \     .thenComparing((Integer i) -> result == i.longValue() ? 1 : -1)\n      \
    \                  .reversed())\n                .collect(Collectors.toCollection(ArrayList<Long>::new));",
  "        PriorityQueue<Long> queue = new PriorityQueue<Long>();\n        long sum\
    \ = 0;\n        for (Long value: array) {\n            sum += value;\n       \
    \     queue.add(value);\n        }\n        if (sum % 2 == 0) {\n            Collections.sort(queue,\
    \ Collections.reverseOrder());\n        } else {\n            Collections.sort(queue);\n\
    \        }\n        ArrayList<Long> result = new ArrayList<Long>();\n        for\
    \ (Long value: queue) {\n            result.add(value);\n        }\n        return\
    \ result;", "        Long sum = 0;\n        int i = 0;\n        while (i < array.size())\
    \ {\n            sum += array.get(i);\n            i++;\n        }\n        if\
    \ (sum % 2 == 0) {\n            Collections.sort(array);\n            return array;\n\
    \        } else {\n            Collections.reverse(array);\n            return\
    \ array;\n        }", "        long sumFirst = Long.parseLong(array.get(0).toString());\n\
    \        long sumLast = Long.parseLong(array.get(array.length - 1).toString());\n\
    \        if (sumFirst % 2 != 0) {\n            array.sort((a, b) -> {\n      \
    \          return Long.compare(sumFirst, b);\n            });\n        }\n   \
    \     else {\n            array.sort((a, b) -> {\n                return Long.compare(sumFirst,\
    \ b, sumLast);\n            });\n        }\n        return array;", "        ArrayList<Long>\
    \ newarray = new ArrayList<>();\n        long sum = 0;\n        int sum = 0;\n\
    \        boolean isEven = true;\n\n        for (Long element : array) {\n    \
    \        newarray.add((Long) element);\n            sum += element;\n        \
    \    sum += (long)array[newarray.size()-1];\n            isEven = sum % 2 == 0;\n\
    \            sum = 0;\n        }\n\n        if (isEven) {\n            newarray.addAll(Arrays.copyOfRange(array,\
    \ 1, newarray.size()));\n            newarray.addAll(Arrays.copyOfRange(array,\
    \ 0, newarray.size()-1));\n        } else {\n            newarray.addAll(Arrays.copyOfRange(array,\
    \ 0, newarray.size()-1));\n            newarray.addAll(Arrays.copyOfRange(array,\
    \ 1, newarray.size()));\n        }\n\n        return newarray;", "        if (array.isEmpty())\
    \ return array;\n        if (array.get(0) % 2 == 1)\n            return array.stream().sorted((a,\
    \ b) -> b - a).collect(Collectors.toCollection(ArrayList::new));\n        return\
    \ array.stream().sorted((a, b) -> a - b).collect(Collectors.toCollection(ArrayList::new));",
  "        array.sort((a, b) -> {\n            long n = a + b;\n            if (n\
    \ % 2 == 0) {\n                return Long.compare(a, b);\n            } else\
    \ {\n                return Long.compare(b, a);\n            }\n        });\n\
    \        return array;", "        Map<Long, Long> sums = new HashMap<Long, Long>();\n\
    \        Arrays.sort(array);\n        sums.put(array.get(0), array.get(0));\n\
    \        sums.put(array.get(array.length-1), array.get(array.length-1));\n   \
    \     ArrayList<Long> results = new ArrayList<Long>();\n        for (Map.Entry<Long,\
    \ Long> entry : sums.entrySet()) {\n            results.add(entry.getKey());\n\
    \        }\n        return results;", "        Long sumFirstIndexValueLastIndexValue\
    \ = Long.parseLong(array.get(0).toString()) + Long.parseLong(array.get(array.length\
    \ - 1).toString());\n        if (sumFirstIndexValueLastIndexValue % 2 == 0) {\n\
    \            ArrayList<Long> arrayList = new ArrayList<>(array);\n           \
    \ arrayList.sort((a1, a2) -> a2.compareTo(a1));\n            return arrayList;\n\
    \        } else {\n            ArrayList<Long> arrayList = new ArrayList<>(array);\n\
    \            arrayList.sort((a1, a2) -> a1.compareTo(a2));\n            return\
    \ arrayList;\n        }", "        ArrayList<Long> resultList = new ArrayList<>();\n\
    \        ArrayList<Long> tempList = new ArrayList<>();\n        for (Long value\
    \ : array) {\n            tempList.add(value);\n        }\n        resultList.addAll(tempList);\n\
    \        Collections.sort(tempList);\n        resultList.addAll(tempList);\n \
    \       if (sumOdd(resultList) % 2 == 0) {\n            Collections.sort(tempList);\n\
    \            resultList.addAll(tempList);\n        }\n        return resultList;",
  "        long sum = 0;\n        for(long l : array)\n            sum += l;\n   \
    \     boolean isOdd = (sum & 1) == 1;\n        if(isOdd)\n            array.sort(Comparator.naturalOrder());\n\
    \        else\n            array.sort(Comparator.comparing(Long::negate).reversed());\n\
    \        return array;", "        long sum = 0;\n        long minValue = array.get(0);\n\
    \        long maxValue = array.get(array.size() - 1);\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            sum += array.get(i);\n            if (minValue\
    \ > array.get(i)) {\n                minValue = array.get(i);\n            }\n\
    \            if (maxValue < array.get(i)) {\n                maxValue = array.get(i);\n\
    \            }\n        }\n        List<Long> sortedArray = IntStream.range(0,\
    \ array.size())\n                .mapToObj(i -> array.get(i))\n              \
    \  .sorted()\n                .collect(Collectors.toList());\n        if (sum\
    \ % 2 != 0) {\n            return sortedArray;\n        } else {\n           \
    \ return IntStream.range(0, sortedArray.size()).map(i -> sortedArray.get(i)).sorted().toList();\n\
    \        }", "        Collections.sort(array);\n        List<Long> list = new\
    \ ArrayList<Long>(array);\n        long lastSum = list.get(list.size() - 1);\n\
    \        if (lastSum%2 == 0) {\n            Collections.sort(list, (o1, o2) ->\
    \ {\n                long firstSum = o1 + o2;\n                return firstSum\
    \ - lastSum;\n            });\n        } else {\n            Collections.sort(list,\
    \ (o1, o2) -> {\n                long firstSum = o1 + o2;\n                return\
    \ firstSum + lastSum;\n            });\n        }\n        return list;", "  \
    \      if (array.isEmpty()) return array;\n        long sumOfFirstTwo = sumOfLastTwo(array);\n\
    \        boolean isFirstTwoOdd = sumOfFirstTwo % 2 == 1;\n        if (isFirstTwoOdd)\
    \ Collections.sort(array, (a, b) -> sumOfFirstTwo - b);\n        else Collections.sort(array,\
    \ (a, b) -> sumOfFirstTwo - a);\n        return array;", "        if (array ==\
    \ null) {\n            throw new IllegalArgumentException(\"array is null\");\n\
    \        }\n        long sum = 0;\n        for (int i = 0; i < array.size(); i++)\
    \ {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n\
    \            array.sort((a, b) -> {\n                return a - b;\n         \
    \   });\n        } else {\n            array.sort((a, b) -> {\n              \
    \  return b - a;\n            });\n        }\n        return array;", "      \
    \  if (array.size() == 1) {\n            return array;\n        }\n        int\
    \ mid = array.size() / 2;\n        ArrayList<Long> left = new ArrayList<Long>(mid);\n\
    \        ArrayList<Long> right = new ArrayList<Long>(array.size() - mid);\n  \
    \      left.addAll(array);\n        right.addAll(Arrays.asList(array.subList(mid,\
    \ array.size())));\n        Collections.sort(left);\n        Collections.sort(right);\n\
    \        if ((left.get(mid) + (right.get(mid) - left.get(mid)) % 2) == 1) {\n\
    \            Collections.reverse(right);\n            Collections.reverse(left);\n\
    \        }\n        return new ArrayList<Long>(left).addAll(right);", "      \
    \  if (array.size() <= 1) return array;\n        ArrayList<Long> a1 = new ArrayList<>();\n\
    \        ArrayList<Long> a2 = new ArrayList<>();\n        a1.add((long) 0);\n\
    \        a2.add((long) 0);\n        long firstSum = 0;\n        long secondSum\
    \ = 0;\n        for (long i : array) {\n            a1.add(i);\n            firstSum\
    \ += i;\n        }\n        a1.removeAll(a2);\n        firstSum = a1.stream().mapToLong(i\
    \ -> i).sum();\n        if (firstSum % 2 == 1) a1.addAll(a2);\n        ArrayList<Long>\
    \ sortedArray = new ArrayList<>();\n        for (long i : a1) {\n            sortedArray.add(i);\n\
    \        }\n        if (firstSum > secondSum) {\n            a2.addAll(sortedArray);\n\
    \            return a2;\n        } else {\n            a1.addAll(sortedArray);\n\
    \            return a1;\n        }", "        long sum = 0;\n        for (long\
    \ num : array)\n            sum += num;\n        ArrayList<Long> sorted = new\
    \ ArrayList<>();\n        if (sum % 2 == 1) {\n            Collections.sort(array);\n\
    \            Collections.sort(sorted);\n            return sorted;\n        }\
    \ else {\n            Collections.sort(array);\n            Collections.reverseOrder();\n\
    \            Collections.sort(sorted);\n            return sorted;\n        }",
  "        // TODO: your code here\n        long sum = 0;\n        int size = array.size();\n\
    \        for(int i = 0; i < size; i++){\n            sum += array.get(i);\n  \
    \      }\n        int a = sum / 2;\n        int b = sum % 2;\n        Arrays.sort(array);\n\
    \        if (b == 1){\n            for(int i = size-1; i > 0; i--){\n        \
    \        sum += array.get(i);\n                if(sum % 2 == 1){\n           \
    \         array.set(i, array.get(i-1));\n                    array.set(i-1, a-1);\n\
    \                }\n            }\n        }\n        else{\n            for(int\
    \ i = size-1; i > 0; i--){\n                sum += array.get(i);\n           \
    \     if(sum % 2 == 0){\n                    array.set(i, array.get(i-1));\n \
    \                   array.set(i-1, a-1);\n                }\n            }\n \
    \       }\n        sum = 0;\n        size = array.size();\n        for(int i =\
    \ 0; i < size; i++){\n            sum += array.get(i);\n        }\n        Arrays.sort(array);\n\
    \        return array;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        long sum = 0;\n        for(int i = 0; i < array.size(); i++) {\n    \
    \        sum += array.get(i);\n        }\n        if(sum%2 == 0) {\n         \
    \   Collections.sort(array);\n        }\n        else {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        }\n        for(Long l : array) {\n   \
    \         result.add(l);\n        }\n        return result;", "        long first\
    \ = 0l, last = 0l;\n        long sum = 0l;\n        array.stream().forEach((x)\
    \ -> {\n            if (first == 0) {\n                first = x; // first is\
    \ always first in sum calculation\n            }\n            sum += x;\n    \
    \        if (last < x) {\n                last = x; // last is the last\n    \
    \        }\n        });\n        if (sum % 2 == 1) { // even\n            array.stream().sort((x,\
    \ y) -> {\n                if (first > y) {\n                    return 1;\n \
    \               }\n                if (first < y) {\n                    return\
    \ -1;\n                }\n                return 0;\n            }).forEach((x)\
    \ -> {\n                array.add(first);\n                first += x;\n     \
    \       });\n        } else { // odd\n            array.stream().sort((x, y) ->\
    \ {\n                if (first > y) {\n                    return -1;\n      \
    \          }\n                if (first < y) {\n                    return 1;\n\
    \                }\n                return 0;\n            }).forEach((x) -> {\n\
    \                array.add(first);\n                first += x;\n            });\n\
    \        }\n        return array;", "        int sum = 0;\n        if (array.isEmpty())\n\
    \            return array;\n        long max = array.get(0);\n        for (int\
    \ i = 1; i < array.size(); i++) {\n            sum += array.get(i);\n        \
    \    if (sum < 0)\n                sum = 0;\n            if (sum > max)\n    \
    \            max = sum;\n        }\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (sum % 2 == 1) {\n            Long max = Long.valueOf((long)max);\n\
    \            for (int i = 0; i < array.size(); i++) {\n                result.add(array.get(i));\n\
    \                if (array.get(i) > max)\n                    max = array.get(i);\n\
    \            }\n        } else {\n            for (int i = 0; i < array.size();\
    \ i++) {\n                result.add(array.get(i));\n            }\n        }\n\
    \        Collections.sort(result);\n        return result;", "        ArrayList<Long>\
    \ arrayList = new ArrayList<Long>(Arrays.asList(array.size()));\n        Arrays.sort(arrayList);\n\
    \        if (sumEven(arrayList, array.size()) % 2 == 0) {\n            Collections.reverse(arrayList);\n\
    \        }\n        return arrayList;", "        int len = array.size();\n   \
    \     ArrayList<Long> sorted = new ArrayList<>();\n        long sum = 0;\n   \
    \     long lastSum = 0;\n        for (int i = 0; i < len - 1; i++) {\n       \
    \     sum = sum + array.get(i);\n            lastSum = sum;\n            sorted.add(sum);\n\
    \            sum = sum - lastSum;\n            if (i % 2 == 0) {\n           \
    \     sorted.add(sum);\n                sum = sum - lastSum;\n            }\n\
    \        }\n        return sorted;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (array.isEmpty()) {\n            return result;\n        }\n     \
    \   if (array.get(0) < array.get(array.size() - 1)) {\n            Collections.sort(array);\n\
    \            long sum = 0;\n            for (long e : array) {\n             \
    \   sum += e;\n            }\n            if (sum % 2 == 1) {\n              \
    \  Collections.sort(array);\n            }\n        } else {\n            Collections.sort(array);\n\
    \            long sum = 0;\n            for (long e : array) {\n             \
    \   sum += e;\n            }\n            if (sum % 2 != 0) {\n              \
    \  Collections.sort(array);\n            }\n        }\n        for (long e : array)\
    \ {\n            result.add(e);\n        }\n        return result;", "       \
    \ ArrayList<Long> result = new ArrayList<>();\n        \n        for(long i =\
    \ array.get(0); i <= array.get(array.size()); i++) {\n            boolean isEvenSum\
    \ = i % 2 == 0;\n            long sum = 0;\n            \n            int end\
    \ = array.size() - 1;\n            for(int j = 0; j < end; j++) {\n          \
    \      sum += array.get(j);\n                \n                if(isEvenSum) {\n\
    \                    if(sum > i) {\n                        result.add((long)sum\
    \ - i);\n                    }\n                } else if(sum < i) {\n       \
    \             result.add((long)sum + i);\n                }\n            }\n \
    \       }\n        \n        return result;", "        long sum = 0;\n       \
    \ int n = array.size();\n        List<Long> sortedArray = new ArrayList<>();\n\
    \        for (int i = 0; i < n; i++) {\n            sum += array.get(i);\n   \
    \         if (sum % 2 == 0) {\n                sortedArray.add(array.get(i));\n\
    \            } else {\n                sortedArray.add(-array.get(i));\n     \
    \       }\n        }\n        return sortedArray;", "        Collections.sort(array);\n\
    \        if (array.get(0) % 2 != 0) {\n            array.set(0, array.get(0) -\
    \ array.get(1));\n            array.set(1, array.get(0) - array.get(1));\n   \
    \     }\n        return array;", "        Set<Long> set = array.stream().sorted().collect(Collectors.toSet());\n\
    \        array.clear();\n        array.addAll(set);\n        return array;", " \
    \       if (array == null || array.size() <= 0) return array;\n        long sum\
    \ = array.stream().reduce((long sum, Long val) -> {\n            sum += val;\n\
    \            return sum;\n        });\n        if (sum % 2 != 0) {\n         \
    \   array.sort(Comparator.comparingLong(Long::longValue).reversed());\n      \
    \  }\n        return array;", "        // TODO Auto-generated method stub\n  \
    \      long sumOfFirstIndexValues = array.get(0);\n        long sumOfLastIndexValues\
    \ = array.get(array.size() - 1);\n        long sumOfFirstIndexValuesRemaining\
    \ = sumOfFirstIndexValues;\n        long sumOfLastIndexValuesRemaining = sumOfLastIndexValues;\n\
    \        long lastElement = array.get(array.size() - 1);\n        int counter\
    \ = 0;\n        ArrayList<Long> sortedArray = new ArrayList<Long>();\n       \
    \ if (sumOfFirstIndexValues % 2 == 0) {\n            boolean firstElement = true;\n\
    \            for (long element : array) {\n                if (!firstElement)\
    \ {\n                    sumOfFirstIndexValuesRemaining += element;\n        \
    \            if (sumOfFirstIndexValuesRemaining % 2 == 1) {\n                \
    \        sumOfFirstIndexValuesRemaining = sumOfFirstIndexValuesRemaining + 1;\n\
    \                    } else {\n                        sumOfFirstIndexValuesRemaining\
    \ = sumOfFirstIndexValuesRemaining + 0;\n                    }\n             \
    \   } else {\n                    sumOfLastIndexValuesRemaining += element;\n\
    \                    if (sumOfLastIndexValuesRemaining % 2 == 1) {\n         \
    \               sumOfLastIndexValuesRemaining = sumOfLastIndexValuesRemaining\
    \ + 1;\n                    } else {\n                        sumOfLastIndexValuesRemaining\
    \ = sumOfLastIndexValuesRemaining + 0;\n                    }\n              \
    \  }\n                firstElement = false;\n            }\n            if (lastElement\
    \ == sumOfFirstIndexValuesRemaining) {\n                sortedArray = Arrays.asList(array);\n\
    \            } else if (lastElement == sumOfLastIndexValuesRemaining) {\n    \
    \            sortedArray = Arrays.asList(array).reversed();\n            } else\
    \ {\n                sortedArray = Arrays.asList(array, lastElement);\n      \
    \      }\n        } else {\n            boolean firstElement = true;\n       \
    \     for (long element : array) {\n                if (!firstElement) {\n   \
    \                 sumOfFirstIndexValuesRemaining += element;\n               \
    \     if (sumOfFirstIndexValuesRemaining % 2 == 0) {\n                       \
    \ sumOfFirstIndexValuesRemaining = sumOfFirstIndexValuesRemaining + 1;\n     \
    \               } else {\n                        sumOfFirstIndexValuesRemaining\
    \ = sumOfFirstIndexValuesRemaining + 0;\n                    }\n             \
    \   } else {\n                    sumOfLastIndexValuesRemaining += element;\n\
    \                    if (sumOfLastIndexValuesRemaining % 2 == 0) {\n         \
    \               sumOfLastIndexValuesRemaining = sumOfLastIndexValuesRemaining\
    \ + 1;\n                    } else {\n                        sumOfLastIndexValuesRemaining\
    \ = sumOfLastIndexValuesRemaining + 0;\n                    }\n              \
    \  }\n                firstElement = false;\n            }\n            if (lastElement\
    \ == sumOfFirstIndexValuesRemaining) {\n                sortedArray = Arrays.asList(array",
  "        Arrays.sort(array);\n\n        // If sum of the first and last element\
    \ of the list is odd\n        if (array.get(0) % 2 == 1\n                && array.get(array.size()\
    \ - 1) % 2 == 1) {\n            // Sort the list in descending order\n       \
    \     Arrays.sort(array, (i, j) -> {\n                return (array.get(j) - array.get(i));\n\
    \            });\n        }\n        else if (array.get(0) % 2 == 0\n        \
    \        && array.get(array.size() - 1) % 2 == 0) {\n            // Sort the list\
    \ in ascending order\n            Arrays.sort(array, (i, j) -> {\n           \
    \     return (array.get(j) - array.get(i));\n            });\n        }\n\n  \
    \      return array;", "        long firstIndex = 0;\n        long lastIndex =\
    \ 0;\n        int sum = 0;\n        firstIndex = array.get(0); // the first index\
    \ of the array list\n        lastIndex = array.get(array.size() - 1); // the last\
    \ index of the array list\n        sum = (firstIndex + lastIndex); // the sum\
    \ of first index and last index\n        // if sum is odd, sort it in ascending\
    \ order\n        // otherwise, sort it in descending order\n        boolean isAscending\
    \ = sum % 2 != 0;\n        ArrayList<Long> sortedArray = new ArrayList<>();\n\
    \        if (isAscending) {\n            for (int i = 0; i < array.size(); i++)\
    \ {\n                sortedArray.add(array.get(i));\n                sum = sum\
    \ - array.get(i);\n            }\n        }\n        else {\n            for (int\
    \ i = array.size() - 1; i >= 0; i--) {\n                sortedArray.add(array.get(i));\n\
    \                sum = sum + array.get(i);\n            }\n        }\n       \
    \ return sortedArray;", "        ArrayList<Long> copy = new ArrayList<>(array);\n\
    \        long sum = 0;\n        long lastSum = 0;\n        for (long i = 0; i\
    \ < copy.size(); i++) {\n            sum += copy.get(i);\n            lastSum\
    \ += copy.get(i);\n        }\n        if (sum % 2 == 1) {\n            Collections.sort(copy,\
    \ (Long t1, Long t2) -> Long.valueOf(lastSum).compareTo(t2.longValue()));\n  \
    \      } else {\n            Collections.sort(copy, (Long t1, Long t2) -> Long.valueOf(lastSum).compareTo(t1.longValue()));\n\
    \        }\n        return copy;", "        long sum = array.stream().mapToLong(Integer::longValue).sum();\n\
    \        if (sum % 2 == 0) {\n            Collections.sort(array);\n         \
    \   return array;\n        } else {\n            Collections.reverse(array);\n\
    \            return array;\n        }", "        if (array.size() <= 1) return\
    \ array;\n        ArrayList<Long> result = new ArrayList<Long>();\n        Comparator<Long>\
    \ cmp = Comparator.comparingLong(Long::longValue);\n        Arrays.sort(array.stream().map(cmp::reverseOrder).collect(Collectors.toList()));\n\
    \        if (result.add(array.get(0) - array.get(array.length - 1)))\n       \
    \     if (result.add(array.get(array.length - 1) - array.get(0)))\n          \
    \      return result;\n            else\n                return result.stream().map(cmp::reverseOrder).collect(Collectors.toList());\n\
    \        else\n            if (result.add(array.get(array.length - 1) - array.get(0)))\n\
    \                return result.stream().map(cmp::reverseOrder).collect(Collectors.toList());\n\
    \            else\n                return result;", "        Map<Long, Long> map\
    \ = new HashMap<>();\n        for (Long i : array) {\n            map.put(i, map.getOrDefault(i,\
    \ 0) + i);\n        }\n        Map<Long, Long> reverseMap = new HashMap<>();\n\
    \        for (Map.Entry<Long, Long> entry : map.entrySet()) {\n            reverseMap.put(entry.getValue(),\
    \ entry.getKey());\n        }\n        List<Long> results = new ArrayList<>();\n\
    \        for (Long key : map.keySet()) {\n            results.add(reverseMap.get(key));\n\
    \        }\n        return results;", "        long firstIndex = 0, lastIndex\
    \ = array.size() - 1;\n        long sum = 0;\n        while (firstIndex <= lastIndex)\
    \ {\n            sum = array[firstIndex] + array[lastIndex];\n            if (sum\
    \ % 2 == 0) {\n                Arrays.sort(array.subList(firstIndex, lastIndex\
    \ + 1));\n            } else {\n                Arrays.sort(array.subList(firstIndex,\
    \ lastIndex), Collections.reverseOrder());\n            }\n            firstIndex++;\n\
    \            lastIndex--;\n        }\n        return array;", "        long sum\
    \ = 0;\n        long first = 0l; // First index value\n        long last = 0l;\
    \ // Last index value\n        for (long x : array) {\n            sum += x;\n\
    \            first = last;\n            last += x;\n        }\n        if (sum\
    \ % 2 != 0) {\n            Collections.sort(array, Comparator.comparingLong(Long::longValue).reversed());\n\
    \        } else {\n            Collections.sort(array, Comparator.comparingLong(Long::longValue));\n\
    \        }\n        return array;", "        Comparator<Long> cmp = Comparator.comparingLong(Long::sum);\n\
    \        return array.stream().sorted(cmp).collect(Collectors.toCollection(ArrayList::new));",
  "        long sum = 0;\n        for (Long element : array) {\n            sum =\
    \ sum + element;\n        }\n        if (sum % 2 == 1) {\n            Collections.sort(array,\
    \ (o1, o2) -> o2.compareTo(o1));\n            return array;\n        } else {\n\
    \            Collections.sort(array, (o1, o2) -> o1.compareTo(o2));\n        \
    \    return array;\n        }", "        int n = array.size();\n        int sum1\
    \ = 0, sum2 = 0, sum3 = 0, sum4 = 0;\n        long sum = 0;\n        for (int\
    \ i = 0; i < n - 1; i++) {\n            sum1 += array.get(i);\n            sum2\
    \ += array.get(i + 1);\n            sum3 += sum1;\n            sum4 += sum2;\n\
    \            sum += sum3;\n        }\n        if (sum1 % 2 != 0) {\n         \
    \   Collections.sort(array);\n        } else {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        }\n        return array;", "        long\
    \ lastSum = Long.MIN_VALUE;\n        long sum = 0;\n        long lastSum2 = Long.MIN_VALUE;\n\
    \        long sum2 = 0;\n        int count = 1;\n        Arrays.sort(array);\n\
    \        ArrayList<Long> list = new ArrayList<>();\n        ArrayList<Long> array1\
    \ = new ArrayList<>();\n        ArrayList<Long> array2 = new ArrayList<>();\n\
    \        ArrayList<Long> array3 = new ArrayList<>();\n        ArrayList<Long>\
    \ array4 = new ArrayList<>();\n        ArrayList<Long> array5 = new ArrayList<>();\n\
    \        ArrayList<Long> array6 = new ArrayList<>();\n        long curSum = array.get(0);\n\
    \        long curSum2 = array.get(array.size() - 1);\n        for (long i = 0;\
    \ i < array.size(); i++) {\n            if (array.get(i) < 0) {\n            \
    \    return null;\n            }\n            sum2 = lastSum + lastSum2;\n   \
    \         lastSum2 = lastSum;\n            lastSum = sum2;\n            sum +=\
    \ array.get(i);\n            if (sum % 2 == 0) {\n                sum2 = sum -\
    \ 1;\n                lastSum2 = lastSum - 1;\n                lastSum = sum2;\n\
    \                sum += array.get(i);\n            }\n            sum2 = sum;\n\
    \            if (sum2 % 2 == 0) {\n                sum2 = sum + 1;\n         \
    \       lastSum2 = lastSum + 1;\n                lastSum = sum2;\n           \
    \ }\n            if (count > 1) {\n                array1.add(sum2);\n       \
    \         array2.add(sum);\n                array3.add(curSum2);\n           \
    \     array4.add(curSum);\n                array5.add(lastSum2);\n           \
    \     array6.add(lastSum);\n            } else {\n                array1.add(sum);\n\
    \                array2.add(sum2);\n                array3.add(curSum);\n    \
    \            array4.add(curSum2);\n                array5.add(lastSum);\n    \
    \            array6.add(lastSum2);\n            }\n            if (count < 4)\
    \ {\n                if (count % 2 == 1) {\n                    array1.add(array1.get(i));\n\
    \                    array2.add(array2.get(i));\n                    array3.add(array3.get(i));\n\
    \                    array4.add(array4.get(i));\n                    array5.add(array5.get(i));\n\
    \                    array6.add(array6.get(i));\n                } else {\n  \
    \                  array1.add(array1.get(i));\n                    array2.add(array2.get(i));\n\
    \                    array3.add(array3.get(i));\n                    array4.add(array4.get(i));\n\
    \                    array5.add(array5.get(i));\n                    array6.add(array6.get(i));\n\
    \                }\n            }\n            count++;\n        }\n        if\
    \ (count % 2 == 1) {\n            array1.add(array1.get((array", "        ArrayList<Long>\
    \ result = new ArrayList<>(array);\n        Collections.sort(result);\n      \
    \  if (result.size() % 2 == 1) {\n            Collections.reverse(result);\n \
    \       }\n        return result;", "        ArrayList<Long> sortedArray = array;\n\
    \        Collections.sort(sortedArray);\n        if (sumOfFirst(sortedArray) %\
    \ 2 == 1) {\n            Collections.reverse(sortedArray);\n        }\n      \
    \  return sortedArray;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        // O(nlogn)\n        int len = array.size();\n        if (len <= 1) return\
    \ array;\n        Arrays.sort(array);\n        // O(nlogn)\n        for (int i\
    \ = 0; i < len; i++) {\n            int firstSum = (int)array.get(i);\n      \
    \      for (int j = i + 1; j < len; j++) {\n                int lastSum = (int)array.get(j);\n\
    \                if (firstSum + lastSum == len) continue;\n                if\
    \ (firstSum + lastSum % 2 == 0) result.add(lastSum);\n                else result.add(firstSum);\n\
    \                break;\n            }\n        }\n        // O(n)\n        return\
    \ result;", "        if (array.isEmpty()) return array;\n        boolean odd =\
    \ true, even = false;\n        long first = array.get(0), last = array.get(array.size()\
    \ - 1);\n        // find the sum of first and last value\n        long sumFirst\
    \ = sumOfFirst(array);\n        long sumLast = sumOfLast(array);\n        if (sumFirst\
    \ % 2 == 0) even = true;\n        else odd = true;\n        if (sumLast % 2 ==\
    \ 0) even = true;\n        else odd = true;\n        // sort ascending or descending\n\
    \        if (odd && even) {\n            Collections.sort(array);\n        } else\
    \ if (odd) {\n            Collections.sort(array);\n            Collections.reverse(array);\n\
    \        } else if (even) {\n            Collections.sort(array);\n          \
    \  Collections.reverse(array);\n            Collections.reverse(array);\n    \
    \    }\n        return array;", "        ArrayList<Long> results = new ArrayList<>();\n\
    \        for (Long number : array) {\n            results.add(number);\n     \
    \   }\n        Collections.sort(results);\n        return results;", "       \
    \ long[] longArray = array.toArray(new long[array.size()]);\n        long sum\
    \ = Arrays.stream(longArray).sum();\n        long newSum = sum % 2 == 1 ? sum\
    \ : sum - 1;\n        if (Arrays.stream(longArray).allMatch(x -> x > newSum))\
    \ {\n            Arrays.sort(longArray, (o1, o2) -> {\n                int a =\
    \ o1;\n                int b = o2;\n                return (b - a) * -1;\n   \
    \         });\n        } else {\n            Arrays.sort(longArray, (o1, o2) ->\
    \ {\n                int a = o1;\n                int b = o2;\n              \
    \  return (b - a) * 1;\n            });\n        }\n        return new ArrayList<>(Arrays.asList(longArray));",
  "        // write your code here\n        int len = array.size();\n        long[]\
    \ first = new long[len];\n        long[] last = new long[len];\n        long[]\
    \ sum = new long[len];\n        for (int i = 0; i < len; i++) {\n            first[i]\
    \ = array.get(0);\n            last[i] = array.get(len - 1);\n            sum[i]\
    \ = first[i] + last[i];\n            sum[i] = sum[i] % 2;\n        }\n       \
    \ Arrays.sort(first);\n        Arrays.sort(last);\n        Arrays.sort(sum);\n\
    \        if (sum[len - 1] % 2 == 1) {\n            Collections.sort(array, (a,\
    \ b) -> last.compareTo(a) - last.compareTo(b));\n        } else {\n          \
    \  Collections.sort(array, (a, b) -> first.compareTo(b) - first.compareTo(a));\n\
    \        }\n        return array;", "        long sum = 0;\n        long lastElement\
    \ = array.get(array.size() - 1);\n        for (int i = 0; i < array.size(); i++)\
    \ {\n            sum = sum + array.get(i);\n            if (sum > lastElement)\
    \ {\n                Collections.swap(array, i, 0);\n                Collections.swap(array,\
    \ i, array.size() - 1);\n                break;\n            }\n        }\n  \
    \      return array;", "        ArrayList<Long> result = new ArrayList<Long>();\n\
    \        IntStream.range(0, array.size()).forEach(i->{\n            int startIndex\
    \ = i;\n            long sum = 0;\n            for(int j = i; j>startIndex; j--){\n\
    \                sum += array.get(j);\n            }\n            if(sum%2 ==\
    \ 1){\n                result.addAll(Arrays.asList(startIndex, array.size()-i));\n\
    \            }\n            else{\n                result.addAll(Arrays.asList(startIndex,\
    \ array.size()-i));\n                Collections.sort(result);\n            }\n\
    \        });\n        return result;", "        if (array.isEmpty()) {\n     \
    \       return array;\n        }\n        Collections.sort(array);\n        long\
    \ lastSum = sumArray(array);\n        ArrayList<Long> result = new ArrayList<>(array);\n\
    \        if (lastSum % 2 == 1) {\n            Collections.sort(result);\n    \
    \    }\n        return result;", "        PriorityQueue<Integer> queue = new PriorityQueue<>();\n\
    \        Set<Integer> visited = new HashSet<>();\n        PriorityQueue<Integer>\
    \ res = new PriorityQueue<>();\n        long sum = 0;\n        long min = Integer.MAX_VALUE;\n\
    \        int count = 0;\n        for (long i : array) {\n            count++;\n\
    \            sum += i;\n            if (sum % 2 != 0) {\n                queue.add(sum\
    \ / 2);\n                visited.add(sum / 2);\n            }\n            if\
    \ (sum % 2 == 0) {\n                queue.add(sum / 2);\n                visited.add(sum\
    \ / 2);\n            }\n        }\n        visited.removeAll(array);\n       \
    \ while (queue.size() > 0) {\n            int value = queue.peek();\n        \
    \    if (visited.contains(value)) {\n                queue.remove();\n       \
    \     } else {\n                visited.add(value);\n                res.offer(value);\n\
    \                sum += value;\n                if (sum % 2 == 0) {\n        \
    \            queue.add(sum / 2);\n                    visited.add(sum / 2);\n\
    \                } else {\n                    queue.add(sum / 2);\n         \
    \           visited.add(sum / 2);\n                }\n            }\n        }\n\
    \        return res.stream().collect(Collectors.toCollection(ArrayList::new));",
  "        Map<Long, Long> firstMap = array.reduce((m1, m2) -> m1 < m2 ? m1 : m2).getFirst();\n\
    \        Map<Long, Long> secondMap = array.reduce((m1, m2) -> m1 > m2 ? m1 : m2).getSecond();\n\
    \        firstMap.entrySet().removeIf(e1 -> secondMap.containsKey(e1.getValue())\
    \ ? secondMap.containsKey(e1.getValue()) && e1.getValue() < firstMap.get(e1.getValue())\
    \ : e1.getValue() < firstMap.get(e1.getValue()));\n        secondMap.entrySet().removeIf(e1\
    \ -> firstMap.containsKey(e1.getValue()) ? firstMap.containsKey(e1.getValue())\
    \ && e1.getValue() < secondMap.get(e1.getValue()) : e1.getValue() < secondMap.get(e1.getValue()));\n\
    \        Map<Long, Long> newFirstMap = new HashMap<>();\n        Map<Long, Long>\
    \ newSecondMap = new HashMap<>();\n        for (Map.Entry<Long, Long> entry :\
    \ firstMap.entrySet()) {\n            if (!secondMap.containsKey(entry.getValue()))\
    \ {\n                newFirstMap.put(entry.getKey(), entry.getValue());\n    \
    \        } else {\n                if (entry.getValue() < secondMap.get(entry.getValue()))\
    \ {\n                    newFirstMap.put(entry.getKey(), entry.getValue());\n\
    \                }\n            }\n        }\n        for (Map.Entry<Long, Long>\
    \ entry : secondMap.entrySet()) {\n            if (!firstMap.containsKey(entry.getValue()))\
    \ {\n                newSecondMap.put(entry.getKey(), entry.getValue());\n   \
    \         } else {\n                if (entry.getValue() < firstMap.get(entry.getValue()))\
    \ {\n                    newSecondMap.put(entry.getKey(), entry.getValue());\n\
    \                }\n            }\n        }\n        ArrayList<Long> newArray\
    \ = new ArrayList<>(firstMap);\n        newArray.addAll(newFirstMap);\n      \
    \  newArray.addAll(newSecondMap);\n        return newArray;", "        Long sumFirst\
    \ = array.get(0), sumLast = array.get(array.size() - 1);\n        if(sumFirst\
    \ < sumLast) array.add(sumLast);\n        else if(sumFirst > sumLast) array.add(0,\
    \ sumFirst);\n        else if(sumFirst == sumLast) array.add(0, sumFirst);\n \
    \       else if(sumFirst == sumLast + 1) array.add(0, sumFirst);\n        else\
    \ if(sumFirst < sumLast - 1) array.add(sumLast);\n        else if(sumFirst > sumLast\
    \ + 1) array.add(0, sumFirst);\n        else if(sumFirst == sumLast + 1) array.add(0,\
    \ sumFirst);\n        else if(sumFirst < sumLast - 1) array.add(sumLast);\n  \
    \      else if(sumFirst > sumLast + 1) array.add(0, sumFirst);\n        else if(sumFirst\
    \ == sumLast + 1) array.add(0, sumFirst);\n        else if(sumFirst < sumLast\
    \ - 1) array.add(sumLast);\n        else if(sumFirst > sumLast + 1) array.add(0,\
    \ sumFirst);\n        else if(sumFirst == sumLast + 1) array.add(0, sumFirst);\n\
    \        else if(sumFirst < sumLast - 1) array.add(sumLast);\n        else if(sumFirst\
    \ > sumLast + 1) array.add(0, sumFirst);\n        else if(sumFirst == sumLast\
    \ + 1) array.add(0, sumFirst);\n        else if(sumFirst < sumLast - 1) array.add(sumLast);\n\
    \        else if(sumFirst > sumLast + 1) array.add(0, sumFirst);\n        else\
    \ if(sumFirst == sumLast + 1) array.add(0, sumFirst);\n        else if(sumFirst\
    \ < sumLast - 1) array.add(sumLast);\n        else if(sumFirst > sumLast + 1)\
    \ array.add(0, sumFirst);\n        else if(sumFirst == sumLast + 1) array.add(0,\
    \ sumFirst);\n        else if(sumFirst < sumLast - 1) array.add(sumLast);\n  \
    \      else if(sumFirst > sumLast + 1) array.add(0, sumFirst);\n        else if(sumFirst\
    \ == sumLast + 1) array.add(0, sumFirst);\n        else if(sumFirst < sumLast\
    \ - 1) array.add(sumLast);\n        else if(sumFirst > sumLast + 1) array.add(0,\
    \ sumFirst);\n        else if(sumFirst == sumLast + 1) array.add(0, sumFirst);\n\
    \        else if(sumFirst < sumLast - 1) array.add(sumLast);\n        else if(sumFirst\
    \ > sumLast + 1) array.add(0, sumFirst);\n        else if(sumFirst == sumLast\
    \ + 1) array.add(0, sumFirst);\n        else if(sumFirst < sumLast - 1) array.add(",
  "        int lastIndex = array.size() - 1;\n        ArrayList<Long> result = new\
    \ ArrayList<Long>();\n        int sum = 0;\n        long sum = array.get(0); //sum\
    \ of first elements\n        // iterate through the array\n        for (int i\
    \ = 0; i < lastIndex; i++) {\n            sum = sum + array.get(i);\n        \
    \    if (sum % 2 == 1) {\n                Collections.sort(result);\n        \
    \        break;\n            } else {\n                sum -= array.get(i); //\
    \ if sum is even, then decrement\n            }\n        }\n        return result;",
  "        // Write your code here\n        Collections.sort(array);\n        int[]\
    \ sum = array.stream().mapToInt(Long::intValue).toArray();\n        if (sum[sum.length\
    \ - 1] % 2 == 1)\n            Collections.sort(array);\n        return array;",
  "        // write your code here\n        Long[] arr = (Long[]) array.clone();\n\
    \        Arrays.sort(arr);\n        ArrayList<Long> result = new ArrayList<>(Arrays.asList(arr));\n\
    \        if (sumOdd(result)) {\n            Collections.reverse(result);\n   \
    \     }\n        return result;", "        if (array.isEmpty()) {\n          \
    \  return array;\n        }\n        long l = array.get(0);\n        long r =\
    \ array.get(array.size() - 1);\n        long sum = l - r;\n        if (sum % 2\
    \ == 0) {\n            Collections.sort(array);\n            long newSum = sum;\n\
    \            int index = 0;\n            while (newSum != 0) {\n             \
    \   if (newSum % 2 == 1) {\n                    array.set(index, r);\n       \
    \             index++;\n                    newSum -= r;\n                } else\
    \ {\n                    array.set(index, l);\n                    index++;\n\
    \                    newSum -= l;\n                }\n            }\n        \
    \    return array;\n        } else {\n            Collections.sort(array, Comparator.comparingLong(element\
    \ -> element * -1));\n            return array;\n        }", "        int sum=0;\n\
    \        Long sumFirstVal = null;\n        Long sumLastVal = null;\n        int\
    \ evenSum = 0;\n        long evenSumFirstVal = null;\n        long evenSumLastVal\
    \ = null;\n        for (long val : array) {\n            sum+=val;\n        }\n\
    \        //print out sum\n        System.out.println(sum);\n        if(sum%2==0){\n\
    \            evenSum=sum;\n            for(int i=0; i<array.length()-1; i++){\n\
    \                sumFirstVal = array.get(i);\n                sumLastVal = array.get(i+1);\n\
    \                if(sumFirstVal>sumLastVal){\n                    int tmp = sumFirstVal;\n\
    \                    sumFirstVal = sumLastVal;\n                    sumLastVal\
    \ = tmp;\n                }\n                array.add(sumFirstVal);\n       \
    \         array.add(sumLastVal);\n            }\n        }else{\n            oddSum=sum;\n\
    \            for(int i=0; i<array.length()-1; i++){\n                sumFirstVal\
    \ = array.get(i);\n                sumLastVal = array.get(i+1);\n            \
    \    if(sumFirstVal<sumLastVal){\n                    int tmp = sumFirstVal;\n\
    \                    sumFirstVal = sumLastVal;\n                    sumLastVal\
    \ = tmp;\n                }\n                array.add(sumFirstVal);\n       \
    \         array.add(sumLastVal);\n            }\n        }\n        //print out\
    \ sum\n        System.out.println(evenSum);\n        return array;", "       \
    \ ArrayList<Long> list = new ArrayList<>();\n        list.add(array.get(0));\n\
    \        list.add(array.get(array.size() - 1));\n        Collections.sort(list);\n\
    \        return list;", "        if (array.isEmpty()) return new ArrayList<>();\n\
    \        ArrayList<Long> result = new ArrayList<>(array);\n        boolean isDescending\
    \ = true; // default ascending sort\n        boolean isOdd = false; // default\
    \ odd sum\n        long longSum = 0;\n        for (int i = 0; i < result.size();\
    \ i++) {\n            longSum += result.get(i);\n            isOdd = isOdd ||\
    \ (longSum % 2 == 1);\n            isDescending = !isDescending; // reverse if\
    \ descending sort\n        }\n        Comparator<Long> comparator = isOdd ? Comparator.comparingLong(num\
    \ -> num) : Comparator.comparingLong(num -> -num);\n        Collections.sort(result,\
    \ comparator);\n        if (isDescending) {\n            Collections.reverse(result);\n\
    \        }\n        return result;", "        ArrayList<Long> res = new ArrayList<>();\n\
    \        Arrays.sort(array);\n        if (array.get(0) % 2 == 0) {\n         \
    \   res.add(array.get(array.size() - 1));\n        }\n        if (array.get(array.size()\
    \ - 1) % 2 == 0) {\n            res.add(array.get(0));\n        }\n        return\
    \ res;", "        ArrayList<Long> result = new ArrayList<Long>();\n        Long\
    \ sum = 0L;\n        if (array.isEmpty()) return result;\n        for (Long value\
    \ : array) {\n            sum += value;\n            result.add(value);\n    \
    \    }\n        if (sum % 2 == 1) {\n            result.sort(Comparator.comparingLong(Long::longValue).reversed());\n\
    \        } else {\n            result.sort(Comparator.comparingLong(Long::longValue));\n\
    \        }\n        return result;", "        if (array.size() == 0) {\n     \
    \       return array;\n        }\n        ArrayList<Long> arrayList = new ArrayList<Long>(Arrays.asList(array.subList(0,\
    \ array.size() - 1)));\n        if (arrayList.get(0) % 2 == 0) {\n           \
    \ Collections.sort(arrayList);\n        } else {\n            Collections.reverse(arrayList);\n\
    \        }\n        return arrayList;", "        // write your code here\n   \
    \     List<Long> longList = array;\n        Arrays.sort(longList);\n        int\
    \ lastElement = longList.size() - 1;\n        Long sumOfFirstAndLastElements =\
    \ longList.get(lastElement) + longList.get(0);\n        if (sumOfFirstAndLastElements\
    \ % 2 == 0) {\n            Arrays.sort(longList);\n        }\n        ArrayList<Long>\
    \ result = new ArrayList<>(array);\n        return result;", "        ArrayList<Long>\
    \ newArray = array.clone();\n        sortArray(newArray);\n        return newArray;",
  "        ArrayList<Long> list = new ArrayList<>();\n        Set<Long> set = new\
    \ HashSet<>();\n        long sum = 0;\n        for (long i : array) {\n      \
    \      if (set.contains(i)) {\n                continue;\n            }\n    \
    \        set.add(i);\n            sum += i;\n            list.add(sum);\n    \
    \    }\n        long firstIndex = list.get(0);\n        long lastIndex = (long)\
    \ Math.ceil((double) list.size() / 2);\n        boolean isOdd = sum % 2 == 1;\n\
    \        if (firstIndex > lastIndex) {\n            Collections.sort(list, (a,\
    \ b) -> {\n                if (isOdd)\n                    return b.compareTo(a);\n\
    \                else\n                    return a.compareTo(b);\n          \
    \  });\n        } else {\n            Collections.sort(list, (a, b) -> {\n   \
    \             if (isOdd)\n                    return a.compareTo(b);\n       \
    \         else\n                    return b.compareTo(a);\n            });\n\
    \        }\n        System.out.println(list);\n        return list;", "      \
    \  long sum = 0; // sum of first and last elements\n        int odd_sum = 0; //\
    \ sum of first and last elements when sum is odd\n        int even_sum = 0; //\
    \ sum of first and last elements when sum is even\n        Arrays.sort(array);\n\
    \        sum = array.get(0) + array.get(array.size() - 1);\n        if (sum %\
    \ 2 != 0) {\n            odd_sum = sum;\n            even_sum = -sum;\n      \
    \  } else {\n            odd_sum = -sum;\n            even_sum = sum;\n      \
    \  }\n        if (odd_sum % 2 == 0) {\n            Collections.sort(array, (l,\
    \ r) -> {\n                int compare = 0;\n                if (l < r) {\n  \
    \                  compare = l - r;\n                } else if (l > r) {\n   \
    \                 compare = l - r;\n                } else if ((l + r) % 2 ==\
    \ 0) {\n                    compare = l - r;\n                }\n            \
    \    if (compare != 0) {\n                    return compare;\n              \
    \  } else {\n                    return r - l;\n                }\n          \
    \  });\n        } else {\n            Collections.sort(array, (l, r) -> {\n  \
    \              int compare = 0;\n                if (l < r) {\n              \
    \      compare = l - r;\n                } else if (l > r) {\n               \
    \     compare = l - r;\n                } else if ((l + r) % 2 != 0) {\n     \
    \               compare = l - r;\n                }\n                if (compare\
    \ != 0) {\n                    return compare;\n                } else {\n   \
    \                 return r - l;\n                }\n            });\n        }\n\
    \        return array;", "        long[] sumArray = array.stream().mapToLong(Function.identity()).sorted().toArray(long[]::new);\n\
    \        if(sumArray[sumArray.length-1] % 2 != 0) {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n        }\n        return array;", "        //\
    \ Write your code here.\n        if (array.isEmpty()) {\n            return array;\n\
    \        }\n        long sum = 0;\n        long firstValue = array.get(0);\n \
    \       for (int i = 1; i < array.size(); i++) {\n            long tempValue =\
    \ array.get(i);\n            sum += tempValue;\n        }\n        if (sum % 2\
    \ == 0) {\n            Arrays.sort(array);\n        } else {\n            Arrays.sort(array.reverse());\n\
    \        }\n        return array;", "        ArrayList<Long> list = new ArrayList<Long>();\n\
    \        if (array.isEmpty()) return list;\n        // add the first element in\
    \ array\n        list.add(0, array.get(0));\n        // find the maximum of first\
    \ and last element\n        long max = array.get(0);\n        for (int i = 1;\
    \ i < array.size(); i++) {\n            if (max < array.get(i)) {\n          \
    \      max = array.get(i);\n            }\n        }\n        // find the minimum\
    \ of first and last element\n        long min = array.get(0);\n        for (int\
    \ i = 1; i < array.size(); i++) {\n            if (min > array.get(i)) {\n   \
    \             min = array.get(i);\n            }\n        }\n        // find mid\n\
    \        long mid = (min + max) / 2;\n        list.add(mid);\n        // check\
    \ odd and even\n        if (sumOdd(mid, array) > sumEven(mid, array)) {\n    \
    \        swap(array, list, mid, 0);\n        } else {\n            swap(array,\
    \ list, mid, 1);\n        }\n        // add remaining element\n        for (int\
    \ i = 1; i < array.size(); i++) {\n            if (sumOdd(mid, array) < sumEven(mid,\
    \ array)) {\n                list.add(0, array.get(i));\n            } else {\n\
    \                list.add(i, array.get(i));\n            }\n        }\n      \
    \  return list;", "        if (array == null || array.isEmpty()) return array;\n\
    \n        long sum = 0;\n        for (Long i : array) {\n            sum += i;\n\
    \        }\n        int len = array.size();\n        if (sum % 2 == 1) return\
    \ sortArrayDescending(array, sum, len);\n        else return sortArrayAscending(array,\
    \ sum, len);", "        int sum = 0;\n        ArrayList<Long> array2 = new ArrayList<>();\n\
    \        ArrayList<Long> array3 = new ArrayList<>();\n        for (int i = 0;\
    \ i < array.size(); i++) {\n            sum = array.get(i);\n            if (sum\
    \ % 2 == 1) {\n                array2.add(sum);\n            } else {\n      \
    \          array3.add(sum);\n            }\n        }\n        ArrayList<Long>\
    \ array4 = new ArrayList<>();\n        array4 = array2.addAll(array3);\n     \
    \   array4.sort(null);\n        return array4;", "        if (array.isEmpty())\
    \ {\n            return array;\n        }\n        long sum = array.stream().mapToLong(Long::longValue).sum();\n\
    \        boolean isEvenSum = sum % 2 == 0;\n        boolean isOddSum = !isEvenSum;\n\
    \n        System.out.println(\"sum = \" + sum);\n        System.out.println(\"\
    isEvenSum = \" + isEvenSum);\n        System.out.println(\"isOddSum = \" + isOddSum);\n\
    \n        Collections.sort(array, (o1, o2) -> {\n            long firstValue =\
    \ o1.longValue();\n            long secondValue = o2.longValue();\n          \
    \  System.out.println(\"firstValue = \" + firstValue + \" secondValue = \" + secondValue);\n\
    \            if (isEvenSum) {\n                return secondValue - firstValue;\n\
    \            } else {\n                return firstValue - secondValue;\n    \
    \        }\n        });\n        return array;", "        Collections.sort(array);\n\
    \        return array;", "        Comparator<Long> cmp = Comparator.comparingLong(l\
    \ -> l);\n        boolean isEven = array.get(0) % 2 == 0;\n        long firstValue\
    \ = array.get(0);\n        long lastValue = array.get(array.size() - 1);\n   \
    \     long sum = firstValue + lastValue;\n        Arrays.sort(array, cmp);\n \
    \       ArrayList<Long> sortedList = new ArrayList<>();\n        long sum = 0;\n\
    \        for (long l : array) {\n            if (sum % 2 == 0) {\n           \
    \     sum += l;\n            } else {\n                sum = sum - l;\n      \
    \          sortedList.add(sum);\n                sum = 0;\n            }\n   \
    \     }\n        if (isEven) {\n            long sortedSum = sum;\n          \
    \  Arrays.sort(sortedList, cmp);\n            sortedList = new ArrayList<>();\n\
    \            for (long l : sortedList) {\n                sortedSum += l;\n  \
    \          }\n            if (sortedSum < lastValue) {\n                ArrayList<Long>\
    \ sortedList1 = new ArrayList<>();\n                for (long l : sortedList)\
    \ {\n                    sortedList1.add(l);\n                }\n            \
    \    return sortedList1;\n            } else {\n                return sortedList;\n\
    \            }\n        } else {\n            long sortedSum = sum;\n        \
    \    Arrays.sort(sortedList, cmp);\n            sortedList = new ArrayList<>();\n\
    \            for (long l : sortedList) {\n                sortedSum += l;\n  \
    \          }\n            if (sortedSum > firstValue) {\n                ArrayList<Long>\
    \ sortedList1 = new ArrayList<>();\n                for (long l : sortedList)\
    \ {\n                    sortedList1.add(l);\n                }\n            \
    \    return sortedList1;\n            } else {\n                return sortedList;\n\
    \            }\n        }", "        Collections.sort(array);\n        boolean\
    \ oddSum = true;\n        long evenSum = 0;\n        for (long val : array)\n\
    \            if (val % 2 == 0)\n                evenSum += val;\n            else\n\
    \                oddSum = !oddSum;\n        if (oddSum && evenSum == sumArray(array))\n\
    \            return array;\n        else\n            return new ArrayList<>(array).descendingSet().stream().sorted((a,\
    \ b) -> sumArray(b) - sumArray(a)).collect(Collectors.toList());", "        if\
    \ (array == null || array.isEmpty())\n            return array;\n\n        List<Long>\
    \ result = new ArrayList<>(array);\n        long last = result.get(result.size()\
    \ - 1);\n        long first = result.get(0);\n        long sum = first + last;\n\
    \        LongComparator comparator = LongComparator.create(sum % 2, (a, b) ->\
    \ Long.compare(a, b));\n        comparator.apply(result);\n        return result;",
  "        List<Long> longList = array.stream().map(Long::longValue).collect(Collectors.toList());\n\
    \        longList.sort((a, b) -> {\n            long firstSum = a + b;\n     \
    \       long lastSum = a + b;\n            if (firstSum % 2 == 1) {\n        \
    \        return -1;\n            }\n            if (lastSum % 2 == 0) {\n    \
    \            return 1;\n            }\n            return 0;\n        });\n  \
    \      longList.stream().forEach(System.out::println);\n        return array;",
  "        long sumOfFirstElement = array.stream().mapToLong(Long::longValue).sum();\n\
    \        long sumOfLastElement = array.stream().mapToLong(Long::longValue).skip(1).sum();\n\
    \        int sumOfFirstElementIsOdd = sumOfFirstElement % 2 == 1;\n        int\
    \ sumOfLastElementIsEven = sumOfLastElement % 2 == 0;\n\n        if (sumOfFirstElementIsOdd\
    \ && sumOfLastElementIsEven) {\n            Collections.sort(array);\n       \
    \ } else if (sumOfFirstElementIsOdd && !sumOfLastElementIsEven) {\n          \
    \  Collections.reverse(array);\n        } else {\n            Collections.sort(array,\
    \ Comparator.comparingLong(Long::longValue));\n        }\n        return array;",
  "        if (array.size() < 2) {\n            return array;\n        }\n\n     \
    \   // Compute the running sum of all numbers in array\n        long runningSum\
    \ = array.get(0)\n                .longValue();\n\n        // Compute the first\
    \ index value of array.\n        int firstIndex = 0;\n\n        // Compute the\
    \ last index value of array.\n        int lastIndex = 0;\n\n        for (int i\
    \ = 1; i < array.size(); i++) {\n            runningSum += array.get(i)\n    \
    \                .longValue();\n            if (runningSum > 1000) {\n       \
    \         firstIndex = i;\n                lastIndex = i - 1;\n            }\n\
    \        }\n\n        if (array.size() % 2 == 0) {\n            // Sort array\
    \ in descending order\n            Arrays.sort(array.subList(firstIndex, lastIndex\
    \ + 1));\n        } else {\n            // Sort array in ascending order\n   \
    \         Arrays.sort(array.subList(firstIndex, lastIndex));\n        }\n    \
    \    return array;", "        PriorityQueue<Long> pq = new PriorityQueue<>(array);\n\
    \        Long sum = pq.poll();\n        if (sum % 2 == 0) {\n            Collections.reverse(pq);\n\
    \        }\n        long result = pq.poll();\n        while (result != sum) {\n\
    \            array.add(result);\n            result = pq.poll();\n        }\n\
    \        return array;", "        long sum = 0;\n        Arrays.sort(array);\n\
    \        if (array.get(0) % 2 == 0) {\n            sum -= array.get(0) % 2;\n\
    \        } else {\n            sum += array.get(array.size() - 1) % 2;\n     \
    \   }\n        ArrayList<Long> list = new ArrayList<>(array);\n        Collections.sort(list);\n\
    \        if (sum % 2 != 0) {\n            Collections.reverse(list);\n       \
    \ }\n        return list;", "        // Write your code here.\n        ArrayList<Long>\
    \ list = array.clone();\n        Collections.sort(list);\n\n        if (list.get(0)\
    \ % 2 != 0)\n            Collections.reverse(list);\n        return list;", " \
    \       if (array.isEmpty()) {\n            return array;\n        }\n       \
    \ long leftSum = array.get(0);\n        long rightSum = array.get(array.size()\
    \ - 1);\n        Collections.sort(array);\n        if (leftSum % 2 == 1) {\n \
    \           Collections.reverse(array);\n        }\n        long sum = leftSum\
    \ + rightSum;\n        if (sum % 2 == 1) {\n            Collections.reverse(array);\n\
    \        }\n        return array;", "        ArrayList<Long> newArr = new ArrayList<>(array.size());\n\
    \        long sum = 0;\n        for(long val: array) {\n            newArr.add(val);\n\
    \            sum += val;\n        }\n        System.out.println(sum);\n      \
    \  if(sum % 2 == 1) {\n            Collections.sort(newArr);\n            return\
    \ newArr;\n        }\n        Collections.sort(newArr, Collections.reverseOrder());\n\
    \        return newArr;", "        Comparator<Long> comparator = new Comparator<Long>()\
    \ {\n            public int compare(Long o1, Long o2) {\n                if (o1\
    \ == o2) {\n                    return 0;\n                } else if (o1 == null\
    \ || o2 == null) {\n                    return o1 == null ? -1 : 1;\n        \
    \        } else if (o1.intValue() == o2.intValue()) {\n                    return\
    \ 0;\n                }\n                return (o2.intValue() - o1.intValue());\n\
    \            }\n        };\n        Collections.sort(array, comparator);\n   \
    \     return array;", "        long last = 0;\n        long sum = 0;\n       \
    \ long lastSum = 0;\n        for (int i = 0; i < array.size(); i++) {\n      \
    \      sum = array[i] + sum;\n            last = array[i];\n            if (last\
    \ != 0 && lastSum != 0) {\n                if (sum % 2 == 0) {\n             \
    \       if (lastSum % 2 == 0) {\n                        array.set(i, last);\n\
    \                    }\n                } else {\n                    if (lastSum\
    \ % 2 == 1) {\n                        array.set(i, last);\n                 \
    \   }\n                }\n            }\n            lastSum = sum;\n        }\n\
    \        return array;", "        ArrayList<Long> result = new ArrayList<>(array);\n\
    \        Collections.sort(result);\n        if (result.stream().reduce(Math::sum).intValue()\
    \ % 2 == 1) {\n            Collections.reverse(result);\n        }\n        return\
    \ result;", "        // Your code here\n        \n        // Sort the array and\
    \ sum the first and last values.\n        long sumFirstLast = array.stream().mapToLong(Long::longValue).reduce(Long::sum).orElse(0l);\n\
    \        // sort the array in descending order if the sum is even, or ascending\
    \ order if the sum is odd.\n        boolean desc = false;\n        if (sumFirstLast\
    \ % 2 == 0) {\n            desc = true;\n        }\n        \n        // Sort\
    \ the array in descending order if the sum is even, or ascending order if the\
    \ sum is odd.\n        ArrayList<Long> result = new ArrayList<>();\n        Collections.sort(array,\
    \ (a, b) -> {\n            long first = a;\n            long last = b;\n     \
    \       int sum = first + last;\n            // Sort in descending order if the\
    \ sum is even, or ascending order if the sum is odd.\n            return desc\
    \ ? sum < sum : sum > sum;\n        });\n        \n        // Add the original\
    \ array's first and last values to the result.\n        for (long element : array)\
    \ {\n            result.add(element);\n        }\n        \n        // Return\
    \ the result.\n        return result;", "        Comparator<Long> comparator =\
    \ (Long firstValue, Long secondValue) -> {\n            long diff = firstValue\
    \ - secondValue;\n            if (diff == 0) {\n                diff = firstValue.compareTo(secondValue);\n\
    \            }\n            return diff % 2 == 1 ? Long.compare(secondValue, firstValue)\
    \ : Long.compare(firstValue, secondValue);\n        };\n        array.sort(comparator);\n\
    \        return array;", "        if (array.isEmpty()) {\n            return new\
    \ ArrayList<Long>();\n        }\n        Arrays.sort(array);\n        if (array.get(0)\
    \ % 2 == 0) {\n            Collections.reverse(array);\n        }\n        return\
    \ array;", "        long sum = 0;\n        for (long number : array) {\n     \
    \       sum += number;\n        }\n        if (sum % 2 == 1) {\n            Collections.sort(array);\n\
    \        }\n        return array;", "        boolean isEven = (array.get(array.size()\
    \ - 1) % ((long)1) != 0);\n        Long firstItem = array.get(0);\n        Long\
    \ secondItem = array.get(array.size() - 1);\n        int firstItemSum = 0;\n \
    \       int secondItemSum = 0;\n        Long firstItemSumEven = firstItem;\n \
    \       Long firstItemSumOdd = firstItem;\n        ArrayList<Long> arrayCopy =\
    \ new ArrayList<>();\n        for (long i : array) {\n            firstItemSum\
    \ += i;\n            secondItemSum += secondItem;\n            if (isEven) {\n\
    \                firstItemSumEven = firstItemSum;\n                firstItemSumOdd\
    \ = firstItemSum;\n            } else {\n                firstItemSumEven = firstItemSum;\n\
    \                firstItemSumOdd = firstItemSum;\n            }\n        }\n \
    \       if (firstItemSum == secondItemSum) {\n            if (isEven) {\n    \
    \            arrayCopy.addAll(Arrays.asList(firstItemSumEven, secondItemSum));\n\
    \            } else {\n                arrayCopy.addAll(Arrays.asList(firstItemSumOdd,\
    \ secondItemSum));\n            }\n        } else {\n            if (isEven) {\n\
    \                arrayCopy.addAll(Arrays.asList(firstItemSum, secondItemSum));\n\
    \            } else {\n                arrayCopy.addAll(Arrays.asList(firstItemSum,\
    \ secondItemSum));\n            }\n        }\n        return arrayCopy;", "  \
    \      long sum = 0;\n        for (long num : array)\n            sum += num;\n\
    \n        if (sum % 2 != 0) {\n            Collections.sort(array);\n        }\
    \ else {\n            Collections.sort(array, Comparator.comparingLong(a -> -a));\n\
    \        }\n\n        return array;", "        ArrayList<Long> result = new ArrayList<>();\n\
    \        long sum = 0l;\n        if (array.isEmpty()) {\n            return result;\n\
    \        }\n        long initial = array.get(0);\n        if (array.get(array.size()\
    \ - 1) < initial) {\n            sum = initial;\n            Collections.sort(array);\n\
    \        }\n        for (long temp : array) {\n            sum += temp;\n    \
    \    }\n        if (sum % 2 == 0) {\n            Collections.sort(array);\n  \
    \          for (long temp : array) {\n                result.add(temp);\n    \
    \        }\n        }\n        else {\n            Collections.sort(array);\n\
    \            for (long temp : array) {\n                result.add(-temp);\n \
    \           }\n        }\n        return result;", "        ArrayList<Long> ret\
    \ = new ArrayList<Long>(array);\n        ret.sort(null);\n        return ret;",
  "        if (array.isEmpty())\n            return array;\n        ArrayList<Long>\
    \ res = new ArrayList<Long>();\n        ArrayList<Long> temp = new ArrayList<Long>();\n\
    \        int n = array.size() - 1;\n        int sum = 0;\n        for (int i =\
    \ 0; i < array.size(); i++) {\n            sum = sum + array.get(i);\n       \
    \     if (sum < 0)\n                sum = -sum;\n        }\n        if (sum %\
    \ 2 == 0) {\n            Collections.sort(array);\n            int last = array.size()\
    \ - 1;\n            for (int i = 0; i < array.size(); i++) {\n               \
    \ long tmp = array.get(i);\n                if (tmp > array.get(last - 1))\n \
    \                   res.add(tmp);\n                last = i;\n            }\n\
    \            return res;\n        } else {\n            Collections.sort(array,\
    \ Collections.reverseOrder());\n            int last = array.size() - 1;\n   \
    \         for (int i = 0; i < array.size(); i++) {\n                long tmp =\
    \ array.get(i);\n                if (tmp < array.get(last - 1))\n            \
    \        res.add(tmp);\n                last = i;\n            }\n           \
    \ return res;\n        }", "        // Your code here\n        int len = array.size();\n\
    \        ArrayList<Long> result = new ArrayList<>(len);\n        long sum = 0;\n\
    \        int oddSum = 0;\n        int evenSum = 0;\n\n        for (Long element\
    \ : array) {\n            sum += element;\n            if (sum % 2 == 0) {\n \
    \               evenSum += element;\n            } else {\n                oddSum\
    \ += element;\n            }\n        }\n        if (oddSum > evenSum) {\n   \
    \         Collections.sort(array);\n            for (Long element : array) {\n\
    \                result.add(element);\n            }\n        } else {\n     \
    \       Collections.sort(array, Collections.reverseOrder());\n            for\
    \ (Long element : array) {\n                result.add(element);\n           \
    \ }\n        }\n        return result;", "        int sum = 0;\n        int count\
    \ = 1;\n        for (Long value : array) {\n            sum += value;\n      \
    \      if (sum % 2 == 0) {\n                count *= 2;\n            } else {\n\
    \                count *= 2;\n                count += 1;\n            }\n   \
    \     }\n        ArrayList<Long> result = new ArrayList<>();\n        Arrays.sort(array);\n\
    \        int lastIndex = array.size() - 1;\n        for (Long value : array) {\n\
    \            if (sum % 2 == 0) {\n                if (value == 0) {\n        \
    \            result.add(0);\n                } else {\n                    if\
    \ (value < array[lastIndex] || value > array[lastIndex]) {\n                 \
    \       result.add(value);\n                    } else {\n                   \
    \     result.add(array[lastIndex]);\n                    }\n                }\n\
    \            } else {\n                if (value > array[lastIndex] || value <\
    \ array[lastIndex]) {\n                    result.add(value);\n              \
    \  } else {\n                    result.add(array[lastIndex]);\n             \
    \   }\n            }\n            sum -= value;\n            lastIndex--;\n  \
    \      }\n        return result;", "        Long firstSum = array.stream().mapToLong(Long::longValue).sum();\n\
    \        Long lastSum = array.stream().mapToLong(Long::longValue).sum();\n\n \
    \       if (firstSum % 2 == 0) {\n            Collections.sort(array);\n     \
    \   } else {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        }\n        return array;", "        long sum = array.get(array.size()\
    \ - 1); //get the last element of the array\n        Collections.sort(array);\n\
    \n        if (sum % 2 == 0) { //if sum is even\n            for (int i = 1; i\
    \ < array.size(); i++) {\n                array.set(i, array.get(i) - array.get(i-1));\n\
    \            }\n        }\n        else { //if sum is odd\n            for (int\
    \ i = 1; i < array.size(); i++) {\n                array.set(i, array.get(i) -\
    \ array.get(i-1));\n            }\n            Collections.sort(array); //sort\
    \ the array in descending order\n        }\n        return array;", "        long\
    \ sum = 0;\n        long min = Long.MAX_VALUE;\n        long max = Long.MIN_VALUE;\n\
    \        for(long i : array) {\n            sum += i;\n            min = Math.min(min,\
    \ i);\n            max = Math.max(max, i);\n        }\n        // Sum check\n\
    \        if (sum % 2 == 0) {\n            return array;\n        }\n        //\
    \ Max check\n        if (max == min) {\n            ArrayList<Long> list = new\
    \ ArrayList<>();\n            list.addAll(array);\n            return list;\n\
    \        }\n        // Min check\n        if (min == max) {\n            ArrayList<Long>\
    \ list = new ArrayList<>();\n            list.addAll(array);\n            Collections.sort(list);\n\
    \            return list;\n        }\n        // If sum is odd sort with descending\
    \ order\n        ArrayList<Long> list = new ArrayList<>();\n        list.addAll(array);\n\
    \        Collections.sort(list, (o1, o2) -> Integer.compare(sum, sum - (o1 + o2)));\n\
    \        return list;", "        // write your code here\n        int n = array.size();\n\
    \        int sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum\
    \ = sum + array.get(i);\n        }\n        if (sum % 2 == 0) {\n            return\
    \ array.stream().sorted((a, b) -> {\n                return a.compareTo(b);\n\
    \            }).collect(Collectors.toCollection(ArrayList::new));\n        } else\
    \ {\n            return array.stream().sorted((a, b) -> {\n                return\
    \ b.compareTo(a);\n            }).collect(Collectors.toCollection(ArrayList::new));\n\
    \        }", "        long sum = 0;\n        for (long num : array) {\n      \
    \      sum += num;\n        }\n        long first = 0;\n        long last = sum;\n\
    \        if (sum % 2 == 1) {\n            first = array.stream().findFirst().get();\n\
    \            Arrays.sort(array);\n            Arrays.sort(array);\n          \
    \  Arrays.sort(array);\n        } else {\n            Arrays.sort(array);\n  \
    \          Arrays.sort(array);\n            Arrays.sort(array);\n        }\n \
    \       return new ArrayList<Long>(Arrays.asList(first, last));", "        int[]\
    \ a = new int[2];\n        long sum = 0;\n        ArrayList<Long> list = new ArrayList<>();\n\
    \        for(int i = 1; i < array.size(); i++) {\n            sum += array.get(i);\n\
    \        }\n        if(sum % 2 == 1) {\n            Collections.sort(array);\n\
    \            for(int i = 0; i < array.size(); i++) {\n                list.add((long)\
    \ array.get(i));\n            }\n        } else {\n            Collections.sort(array.reversed());\n\
    \            for(int i = 0; i < array.size(); i++) {\n                list.add((long)\
    \ array.get(i));\n            }\n        }\n        return list;", "        long\
    \ sum = 0;\n        for (Long l : array) {\n            sum += l;\n        }\n\
    \        int isOdd = sum % 2 != 0;\n        ArrayList<Long> result = new ArrayList<>();\n\
    \        if (isOdd) {\n            for (Long l : array) {\n                result.add(l);\n\
    \            }\n            Collections.sort(result);\n        } else {\n    \
    \        for (Long l : array) {\n                result.add(-l);\n           \
    \ }\n            Collections.sort(result);\n        }\n        return result;",
  "        ArrayList<Long> result = new ArrayList<>(array);\n        if (result.isEmpty())\
    \ return result;\n        ArrayList<Long> left = new ArrayList<Long>();\n    \
    \    ArrayList<Long> right = new ArrayList<Long>();\n        int index = result.size()\
    \ - 1;\n        long sum = result.get(index);\n        while (index > 0) {\n \
    \           if (sum % 2 == 1) {\n                right.add(result.get(--index));\n\
    \            } else {\n                left.add(result.get(--index));\n      \
    \      }\n            sum += result.get(--index);\n        }\n        if (sum\
    \ % 2 == 1) {\n            Collections.sort(left);\n            Collections.sort(right);\n\
    \        } else {\n            Collections.sort(right);\n            Collections.sort(left);\n\
    \        }\n        result.removeAll(right);\n        result.addAll(left);\n \
    \       if (result.get(result.size() - 1) == 0) {\n            result.remove(result.size()\
    \ - 1);\n            result.add(result.size() - 1, 1);\n        }\n        return\
    \ result;", "        ArrayList<Long> list = new ArrayList<>(array);\n        Collections.sort(list);\n\
    \        long oddSum = list.stream().mapToLong(i -> i).sum();\n        long evenSum\
    \ = list.stream().mapToLong(i -> i).sum();\n        if (oddSum == 0 || evenSum\
    \ == 0) {\n            return new ArrayList<>(array);\n        }\n        int\
    \ oddSumIndex = list.indexOf(oddSum);\n        int evenSumIndex = list.indexOf(evenSum);\n\
    \        switch ((oddSumIndex - evenSumIndex) % 2) {\n            case 0:\n  \
    \              Collections.reverse(list);\n                break;\n          \
    \  case 1:\n                break;\n        }\n        return list;", "      \
    \  array.sort(Comparator.naturalOrder());\n        ArrayList<Long> result = array;\n\
    \        if (sumEven(array) > sumOdd(array))\n            result.sort(Comparator.reverseOrder());\n\
    \        return result;", "        ArrayList<Long> sorted = new ArrayList<Long>();\n\
    \n        // sort the array\n        Collections.sort(array);\n        long sum\
    \ = 0;\n        long last;\n        for (long i : array) {\n            sum +=\
    \ i;\n        }\n        if (sum % 2 == 1) {\n            // sort it in descending\
    \ order\n            Collections.reverse(array);\n            Collections.sort(array);\n\
    \            sum = 0;\n            for (long i : array) {\n                sum\
    \ += i;\n            }\n        }\n\n        // get sum of the array\n       \
    \ for (long i : array) {\n            last += i;\n        }\n\n        // check\
    \ for the sorted order\n        if (sum == last) {\n            return sorted;\n\
    \        }\n\n        // sort it in ascending order\n        Collections.sort(array);\n\
    \        for (long i : array) {\n            sorted.add(i);\n        }\n     \
    \   return sorted;", "        // Complete the sortArray method below.\n      \
    \  // Think about your algorithm here!\n        long sum = 0;\n        for (long\
    \ i : array) {\n            sum = sum + i;\n        }\n        long lastSum =\
    \ sum % 2;\n        if (lastSum == 0) {\n            Collections.sort(array);\n\
    \        } else {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \        }\n        return array;", "        Long sumFirst = array.get(0) + array.get(array.size()\
    \ - 1);\n        Long sumLast = array.get(array.size() - 1) + array.get(0);\n\
    \        if (sumLast % 2 == 1)\n            return array;\n        if (sumFirst\
    \ % 2 == 1)\n            Collections.reverse(array);\n        return array;",
  "        long sum = 0;\n        Arrays.sort(array.subList(1, array.size()));\n \
    \       array.forEach((Long e) -> sum += e);\n        return sum % 2 == 0 ? array.subList(0,\
    \ array.size() - 1) : array.subList(0, array.size());", '        return array.stream().sorted(Collections.reverseOrder(Comparator.comparing(Long::sum)));',
  "        if (array.size() <= 1) {\n            return array;\n        }\n      \
    \  ArrayList<Long> returnArray = new ArrayList<Long>();\n        ArrayList<Long>\
    \ curArray = new ArrayList<Long>();\n        curArray = array;\n        long sum\
    \ = 0;\n        if (curArray.size() % 2 != 0) {\n            sum = curArray.get(curArray.size()\
    \ - 1) + curArray.get(0);\n        } else {\n            sum = curArray.get(curArray.size()\
    \ - 1) + curArray.get(curArray.size() - 2);\n        }\n        boolean flag =\
    \ true;\n        for (long i = curArray.size() - 1; i >= 0; i--) {\n         \
    \   boolean flag = true;\n            if (curArray.get(i) > sum) {\n         \
    \       returnArray.add(curArray.get(i));\n                curArray.remove(i);\n\
    \                flag = false;\n            } else {\n                sum = sum\
    \ - curArray.get(i);\n            }\n        }\n        return returnArray;",
  "        long sum = 0;\n        Arrays.sort(array.stream().mapToLong(Long::longValue).collect(Collectors.toList()));\n\
    \        if (array.get(0).longValue() % 2 == 1) {\n            sum = array.get(array.size()\
    \ - 1).longValue();\n        } else {\n            sum = array.get(0).longValue();\n\
    \        }\n        ArrayList<Long> sortedArray = new ArrayList<Long>();\n   \
    \     sortedArray.add(array.get(0));\n        for (int i = 1, len = array.size();\
    \ i < len; i++) {\n            sortedArray.add(sum - array.get(i).longValue());\n\
    \        }\n        return sortedArray;", "        // write your code here\n \
    \       int first = 0, last = 0;\n        long sum = 0;\n        ArrayList<Long>\
    \ result = new ArrayList<>();\n        for (int i = 0; i < array.size(); i++)\
    \ {\n            sum += array.get(i);\n        }\n        if (sum % 2 == 0) {\n\
    \            Collections.sort(array, (a, b) -> Long.compare(a, b));\n        }\
    \ else {\n            Collections.sort(array, (a, b) -> Long.compare(b, a));\n\
    \        }\n        result.addAll(array);\n        first = 0;\n        last =\
    \ result.size() - 1;\n        while (first < last) {\n            result.add(0,\
    \ result.remove(last));\n            first += 2;\n        }\n        return result;",
  "        PriorityQueue<Long> queue = new PriorityQueue<>();\n        long sum =\
    \ 0;\n        long temp;\n        long min = Long.MAX_VALUE;\n        for (long\
    \ i : array) {\n            sum += i;\n            if (min > i) {\n          \
    \      min = i;\n            }\n            queue.add(i);\n        }\n       \
    \ ArrayList<Long> result = new ArrayList<>();\n        while (!queue.isEmpty())\
    \ {\n            temp = queue.poll();\n            result.add(temp);\n       \
    \ }\n        PriorityQueue<Long> reverseQueue = new PriorityQueue<>();\n     \
    \   for (long i : result) {\n            reverseQueue.add(i);\n        }\n   \
    \     while (!reverseQueue.isEmpty()) {\n            temp = reverseQueue.poll();\n\
    \            if (sum % 2 == 0) {\n                result.add(temp);\n        \
    \        result.add(-temp);\n            } else {\n                result.add(-temp);\n\
    \                result.add(temp);\n            }\n        }\n        return result;",
  "        int oddSum = 0;\n        int evenSum = 0;\n        int totalSum = 0;\n\
    \        int sizeOfArray = array.size();\n        for (int i = 0; i < sizeOfArray;\
    \ i++) {\n            if (array.get(i) % 2 == 1) {\n                evenSum +=\
    \ array.get(i);\n            }\n            totalSum += array.get(i);\n      \
    \  }\n        if (totalSum % 2 != 0) {\n            oddSum = totalSum;\n     \
    \   }\n        ArrayList<Long> sortedArray = new ArrayList<>(sizeOfArray);\n \
    \       Arrays.sort(array);\n        for (int i = 0; i < sizeOfArray; i++) {\n\
    \            if (array.get(i) % 2 == 1) {\n                sortedArray.add(i,\
    \ array.get(i));\n            }\n        }\n        if (oddSum > evenSum) {\n\
    \            Collections.reverse(sortedArray);\n        }\n        return sortedArray;",
  "        ArrayList<Long> sortedArray = new ArrayList<Long>();\n\n        int maxSum\
    \ = array.stream().mapToLong(i -> i).sum();\n\n        if (maxSum % 2 == 0) {\n\
    \            Collections.sort(array);\n            sortedArray.addAll(array);\n\
    \        } else {\n            Collections.sort(array, Collections.reverseOrder());\n\
    \            sortedArray.addAll(array);\n        }\n\n        return sortedArray;",
  "        ArrayList<Long> newArray = new ArrayList<Long>();\n        for (long x\
    \ : array) {\n            newArray.add(x);\n        }\n        newArray.sort(Comparator.comparingLong(Long::longValue));\n\
    \        Long sum1 = newArray.get(0);\n        Long sum2 = newArray.get(newArray.size()-1);\n\
    \        if (sum1.intValue() % 2 != 0 && sum2.intValue() % 2 == 0) {\n       \
    \     newArray = newArray.descendingIterator();\n        }\n        else if (sum1.intValue()\
    \ % 2 == 0 && sum2.intValue() % 2 != 0) {\n            newArray = newArray.ascendingIterator();\n\
    \        }\n        return newArray;", "        final int N = array.size();\n\
    \        if (N == 1)\n            return array;\n        final Long sumFirst =\
    \ Math.abs(array.get(0) - array.get(N - 1));\n        final Long sumLast = Math.abs(array.get(N\
    \ - 1) - array.get(0));\n        if ((sumFirst % 2) == (sumLast % 2)) {\n    \
    \        Collections.sort(array);\n        }\n        else {\n            Collections.sort(array,\
    \ Comparator.comparingLong(a -> a));\n        }\n        return array;", "   \
    \     ArrayList<Long> result = new ArrayList<>();\n        Long sum = 0;\n   \
    \     boolean odd = true;\n        boolean even = true;\n\n        for (Long i\
    \ : array) {\n            sum += i;\n        }\n\n        if (sum % 2 == 0) {\n\
    \            even = false;\n        } else {\n            odd = false;\n     \
    \   }\n\n        for (Long i : array) {\n            if (even) {\n           \
    \     result.add(-i);\n            } else {\n                result.add(i);\n\
    \            }\n        }\n\n        if (odd) {\n            result = Collections.sort(result);\n\
    \        } else {\n            result = Collections.reverse(result);\n       \
    \ }\n        return result;", "        if (array.size() < 2) {\n            return\
    \ array;\n        }\n        int[] counter = new int[array.size()];\n        long\
    \ sum = 0;\n        long temp;\n        Arrays.sort(array);\n        int count\
    \ = 0;\n        long sumAfterSort = 0;\n        for (int i = 0; i < array.size();\
    \ i++) {\n            temp = array.get(i);\n            counter[i] = 1;\n    \
    \        for (int j = i; j < array.size(); j++) {\n                sum += temp;\n\
    \                counter[j]++;\n            }\n            if (sum % 2 != 0) {\n\
    \                temp = sum - counter[i];\n                while (temp > 0 &&\
    \ counter[count + temp] > 1) {\n                    sumAfterSort += temp;\n  \
    \                  temp--;\n                    counter[count + temp]--;\n   \
    \             }\n            } else {\n                temp = sum - counter[i];\n\
    \                while (temp > 0 && counter[count + temp] > 1) {\n           \
    \         sumAfterSort += temp;\n                    temp--;\n               \
    \     counter[count + temp]--;\n                }\n            }\n           \
    \ sum += counter[i];\n            count++;\n        }\n        return Arrays.stream(counter).map(l\
    \ -> l < array.size() ? array.get(l) : Arrays.stream(array.subList(0, l)).collect(Collectors.toList())).collect(Collectors.toList());",
  "        if (array.size() == 0) {\n            return array;\n        }\n      \
    \  Map<Long, List<Long>> result = new HashMap<>();\n        // Step 1. Construct\
    \ the result map from input array\n        for (Long value : array) {\n      \
    \      List<Long> list = result.get(value);\n            if (list == null) {\n\
    \                list = new ArrayList<>();\n                result.put(value,\
    \ list);\n            }\n            list.add(value);\n        }\n        // Step\
    \ 2. Sort the result map by sum function\n        List<Map.Entry<Long, List<Long>>>\
    \ entries = result.entrySet();\n        entries.sort(Comparator.comparingLong(Map.Entry<Long,\
    \ List<Long>>::getValue).reversed());\n        // Step 3. Construct the final\
    \ result array by copying back into input array\n        for (Map.Entry<Long,\
    \ List<Long>> entry : entries) {\n            Long sum = entry.getKey();\n   \
    \         List<Long> list = entry.getValue();\n            for (Long value : list)\
    \ {\n                array.add(value);\n            }\n            array.remove(list.size()\
    \ - 1);\n        }\n        return array;", "        if (array == null || array.size()\
    \ == 0) {\n            return null;\n        }\n        long a = array.get(0);\n\
    \        long b = array.get(array.size() - 1);\n        if (a > b) {\n       \
    \     Collections.sort(array);\n        } else {\n            Collections.reverse(array);\n\
    \        }\n        int sum = 0;\n        for (long i : array) {\n           \
    \ sum += i;\n            if (sum % 2 == 0) {\n                Collections.reverse(array);\n\
    \                break;\n            }\n        }\n        return array;", " \
    \       long firstElement = array.get(0);\n        long lastElement = array.get(array.size()\
    \ - 1);\n        int sum = (firstElement + lastElement) / 2;\n        if (sum\
    \ % 2 != 0) {\n            return sortDescending(array);\n        } else {\n \
    \           return sortAscending(array);\n        }"]
stop_tokens:
- "\n    }\n"
