name: HumanEval_7_filter_by_substring
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Filter an input array list of strings only for ones that\
  \ contain given substring\n    // >>> filterBySubstring((new ArrayList<String>(Arrays.asList())),\
  \ (\"a\"))\n    // (new ArrayList<String>(Arrays.asList()))\n    // >>> filterBySubstring((new\
  \ ArrayList<String>(Arrays.asList((String)\"abc\", (String)\"bacd\", (String)\"\
  cde\", (String)\"array\"))), (\"a\"))\n    // (new ArrayList<String>(Arrays.asList((String)\"\
  abc\", (String)\"bacd\", (String)\"array\")))\n    public static ArrayList<String>\
  \ filterBySubstring(ArrayList<String> strings, String substring) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(filterBySubstring((new\
  \ ArrayList<String>(Arrays.asList())), (\"john\")).equals((new ArrayList<String>(Arrays.asList()))));\n\
  \    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
  , (String)\"asd\", (String)\"xxy\", (String)\"john doe\", (String)\"xxxAAA\", (String)\"\
  xxx\"))), (\"xxx\")).equals((new ArrayList<String>(Arrays.asList((String)\"xxx\"\
  , (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new ArrayList<String>(Arrays.asList((String)\"\
  xxx\", (String)\"asd\", (String)\"aaaxxy\", (String)\"john doe\", (String)\"xxxAAA\"\
  , (String)\"xxx\"))), (\"xx\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
  xxx\", (String)\"aaaxxy\", (String)\"xxxAAA\", (String)\"xxx\")))));\n    assert(filterBySubstring((new\
  \ ArrayList<String>(Arrays.asList((String)\"grunt\", (String)\"trumpet\", (String)\"\
  prune\", (String)\"gruesome\"))), (\"run\")).equals((new ArrayList<String>(Arrays.asList((String)\"\
  grunt\", (String)\"prune\")))));\n    }\n\n}\n"
completions: ['        return strings.stream().filter(i -> i.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  '        return strings.stream().filter((s) -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.toLowerCase().contains(substring.toLowerCase()))\
    \ {\n                filtered.add(s);\n            }\n        }\n        return\
    \ filtered;", "        ArrayList<String> result = new ArrayList<String>();\n \
    \       for (String str : strings) {\n            if (str.contains(substring))\
    \ {\n                result.add(str);\n            }\n        }\n        return\
    \ result;", "        ArrayList<String> filtered = new ArrayList<>();\n       \
    \ if (strings != null && substring != null) {\n            for (String string\
    \ : strings) {\n                if (string.contains(substring)) {\n          \
    \          filtered.add(string);\n                }\n            }\n        }\n\
    \        return filtered;", "        ArrayList<String> results = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                results.add(string);\n            }\n        }\n        return\
    \ results;", '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ s: strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> result = new ArrayList<String>();\n        if (strings\
    \ != null && strings.size() > 0) {\n            for (String str : strings) {\n\
    \                if (str.contains(substring)) {\n                    result.add(str);\n\
    \                }\n            }\n        }\n        return result;", '        return
    strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for(String\
    \ string : strings) {\n            if(string.contains(substring)) {\n        \
    \        filtered.add(string);\n            }\n        }\n        return filtered;",
  '        return strings.stream().filter(e -> e.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> filteredStrings = new ArrayList<>();\n        // Loop\
    \ over the input arraylist\n        for (String string : strings) {\n        \
    \    // if substring is in input string\n            if (string.contains(substring))\
    \ {\n                filteredStrings.add(string);\n            }\n        }\n\
    \        return filteredStrings;", "        ArrayList<String> filtered = new ArrayList<String>();\n\
    \        for(String s: strings) {\n            if(s.contains(substring)) {\n \
    \               filtered.add(s);\n            }\n        }\n        return filtered;",
  "        if (strings == null)\n            return null;\n        String filtered\
    \ = strings.stream()\n                .filter(s -> s.contains(substring))\n  \
    \              .collect(Collectors.joining());\n        return Arrays.asList(filtered);",
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.toLowerCase().contains(substring.toLowerCase()))\
    \ {\n                filtered.add(s);\n            }\n        }\n        return\
    \ filtered;", "        List<String> filteredStrings = new ArrayList<>();\n\n \
    \       // Iterate all elements in the list\n        for (int i = 0; i < strings.size();\
    \ i++) {\n            // The current string to be filtered\n            String\
    \ currString = strings.get(i);\n\n            // Check if the substring is present\
    \ in the current string\n            // If it does then add the current string\
    \ to the filtered list\n            if (currString.contains(substring)) {\n  \
    \              filteredStrings.add(currString);\n            }\n        }\n  \
    \      return filteredStrings;", "        ArrayList<String> res = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.toLowerCase().contains(substring.toLowerCase()))\
    \ {\n                res.add(s);\n            }\n        }\n        return res;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         result.add(string);\n            }\n        }\n        return result;",
  "        return strings.stream()\n                .filter(x -> x.contains(substring))\n\
    \                .collect(Collectors.toList());", "        ArrayList<String> filteredList\
    \ = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring))\
    \ {\n                filteredList.add(s);\n            }\n        }\n        return\
    \ filteredList;", "        return strings.stream()\n                .filter(str\
    \ -> str.contains(substring))\n                .collect(Collectors.toCollection(ArrayList<String>::new));",
  "        List<String> filtered = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring)) {\n              \
    \  filtered.add(string);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> filtered = new ArrayList<>();\n        for (String s\
    \ : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", '        return Arrays.stream(strings).filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ str : strings) {\n            if (str.contains(substring))\n               \
    \ filtered.add(str);\n        }\n        return filtered;", '        return filterBySubstring(strings,
    substring, null);', "        ArrayList<String> filteredStrings = new ArrayList<String>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filteredStrings.add(string);\n            }\n        }\n\
    \        return filteredStrings;", "        ArrayList<String> ret = new ArrayList<String>();\n\
    \n        // Check every element of the list\n        for (String s : strings)\
    \ {\n            if (s.contains(substring)) {\n                ret.add(s);\n \
    \           }\n        }\n\n        return ret;", "        ArrayList<String> filtered\
    \ = new ArrayList<>();\n        for (String string : strings) {\n            if\
    \ (string.contains(substring))\n                filtered.add(string);\n      \
    \  }\n        return filtered;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring))\n\
    \                result.add(s);\n        }\n        return result;", "       \
    \ return strings.stream()\n                .filter(s -> s.contains(substring))\n\
    \                .collect(Collectors.toCollection(ArrayList::new));", "      \
    \  // If no substring supplied\n        if (substring == null) {\n           \
    \ return strings;\n        }\n        // Get all substring occurrences where the\
    \ array list index equals the given substring\n        ArrayList<String> filtered\
    \ = strings.stream().filter(string-> string.contains(substring)).collect(Collectors.toList());\n\
    \        // If substring not found in list return the original array list\n  \
    \      if (filtered.isEmpty()) {\n            return strings;\n        }\n   \
    \     // If substring found return the filtered array list\n        return filtered;",
  '        return strings.stream().filter(strings -> strings.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        if (strings == null || substring==null) return strings;\n        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String str : strings) {\n        \
    \    if (str.contains(substring))\n                result.add(str);\n        }\n\
    \        return result;", '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(e -> e.contains(substring)).collect(Collectors.toList());',
  "        return strings.stream()\n            .filter(s -> s.contains(substring))\n\
    \            .collect(Collectors.toCollection(ArrayList::new));", '        return
    strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        // Filter array list\
    \ to only include substring\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> result = new ArrayList<String>();\n        // Iterate\
    \ over the list\n        for (String s : strings) {\n            if (s.contains(substring))\
    \ {\n                result.add(s);\n            }\n        }\n        return\
    \ result;", "        return strings.stream()\n                .filter(x -> x.contains(substring))\n\
    \                .collect(Collectors.toList());", '        return strings.stream().filter(string
    -> string.contains(substring)).collect(Collectors.toList());', "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n\n        strings.stream().filter(s ->\
    \ s.contains(substring)).forEach(filtered::add);\n\n        return filtered;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         result.add(string);\n            }\n        }\n        return result;",
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));',
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for(String\
    \ s : strings) {\n            if(s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList());', "        ArrayList<String>\
    \ results = new ArrayList<String>();\n        Arrays.stream(strings).filter(s\
    \ -> s.contains(substring)).collect(Collectors.toList()).stream().forEach(results::add);\n\
    \        return results;", '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> result = new ArrayList<>();\n        for (String s :\
    \ strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        Predicate<String>\
    \ pred = n -> n.contains(substring);\n        return strings.stream().filter(pred).collect(Collectors.toList());",
  "        if (strings == null || substring == null) {\n            throw new IllegalArgumentException(\"\
    One or more arguments are null.\");\n        }\n        ArrayList<String> result\
    \ = new ArrayList<>();\n        for (String string : strings) {\n            if\
    \ (string.contains(substring)) {\n                result.add(string);\n      \
    \      }\n        }\n        return result;", "        ArrayList<String> filteredList\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.contains(substring)) {\n                filteredList.add(string);\n\
    \            }\n        }\n        return filteredList;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        return strings.stream()\n            .filter(x -> x.contains(substring))\n\
    \            .collect(Collectors.toCollection(ArrayList::new));", "        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String string : strings) {\n   \
    \         if (string.contains(substring))\n                filtered.add(string);\n\
    \        }\n        return filtered;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList());', "        return strings.stream()\n\
    \            .filter(s -> s.contains(substring))\n            .collect(Collectors.toList());",
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> result = new ArrayList<>();\n        for(String s: strings)\
    \ {\n            if(s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        boolean found = false;\n\
    \        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         filtered.add(string);\n                found = true;\n            }\n\
    \        }\n        if (!found)\n            filtered.add(substring);\n      \
    \  return filtered;", "        List<String> result = new ArrayList<>();\n    \
    \    for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                result.add(string);\n            }\n        }\n        return\
    \ result;", '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        List<String> result = new ArrayList<String>();\n        for(String s :\
    \ strings) {\n            if(s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return (ArrayList<String>) result;", "    \
    \    ArrayList<String> filtered = new ArrayList<String>();\n        if (strings.size()\
    \ == 0)\n            return filtered;\n        for (String string : strings) {\n\
    \            if (string.contains(substring))\n                filtered.add(string);\n\
    \        }\n        return filtered;", "        // Only works for unique results\n\
    \        Set<String> result = new HashSet<String>();\n        for (String s :\
    \ strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return result.stream().map(s -> new ArrayList<String>(Arrays.asList(s))).collect(Collectors.toList());",
  "        ArrayList<String> result = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring)) {\n              \
    \  result.add(string);\n            }\n        }\n        return result;", " \
    \       ArrayList<String> result = new ArrayList<>();\n        for (String value\
    \ : strings) {\n            if(value.contains(substring)) {\n                result.add(value);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n        for (String s : strings) {\n    \
    \        if (s.contains(substring))\n                result.add(s);\n        }\n\
    \        return result;", "        List<String> filteredStrings = new ArrayList<>();\n\
    \        for (String str : strings) {\n            if (str.contains(substring))\n\
    \                filteredStrings.add(str);\n        }\n        return filteredStrings;",
  "        return strings.stream()\n            .filter(string -> string.contains(substring))\n\
    \            .collect(Collectors.toCollection(ArrayList::new));", "        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String string : strings) {\n     \
    \       if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", '        return strings.stream().filter((s)
    -> s.contains(substring)).collect(Collectors.toList());', "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String s: strings) {\n   \
    \         if (s.contains(substring)) {\n                filtered.add(s);\n   \
    \         }\n        }\n        return filtered;", "        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String string : strings) {\n   \
    \         if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList());', "        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String string : strings) {\n   \
    \         if (string.contains(substring))\n                filtered.add(string);\n\
    \        }\n        return filtered;", "        if (strings == null) return null;\n\
    \        ArrayList<String> filtered = new ArrayList<>();\n        for (int i =\
    \ 0; i < strings.size(); i++) {\n            if (strings.get(i).contains(substring))\
    \ {\n                filtered.add(strings.get(i));\n            }\n        }\n\
    \        return filtered;", "        // Only return strings containing given substring\n\
    \        ArrayList<String> filteredStrings = new ArrayList<>();\n        for(String\
    \ string : strings) {\n            if(string.contains(substring)) {\n        \
    \        filteredStrings.add(string);\n            }\n        }\n        return\
    \ filteredStrings;", "        // If this is not a substring then return same list\n\
    \        if (substring == null || substring.trim().length() == 0) {\n        \
    \    return strings;\n        }\n        // For each string in the list if substring\
    \ is not in it then remove it\n        return strings.stream()\n            .filter(s\
    \ -> !s.contains(substring))\n            .collect(Collectors.toCollection(ArrayList<String>::new));",
  "        // TODO implement your code\n        return strings;", '        return
    strings.stream().filter(elem -> elem.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> newList = new ArrayList<String>();\n        for(String\
    \ string : strings) {\n            if(string.contains(substring)) {\n        \
    \        newList.add(string);\n            }\n        }\n        return newList;",
  "        return strings.stream()\n            .filter(s -> s.contains(substring))\n\
    \            .collect(Collectors.toCollection(ArrayList::new));", '        return
    strings.stream().filter(e -> e.contains(substring)).collect(Collectors.toCollection(()
    -> new ArrayList<String>()));', "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                result.add(s);\n            }\n        }\n        return result;",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (substring.equals(s)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        // TODO: Implement\
    \ this method\n        return strings;", "        ArrayList<String> newStrings\
    \ = new ArrayList<>();\n        for (String string : strings) {\n            if\
    \ (string.contains(substring)) {\n                newStrings.add(string);\n  \
    \          }\n        }\n        return newStrings;", "        return strings.stream()\n\
    \                .filter(s -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));",
  "        return strings.stream()\n            .filter(e -> e.contains(substring))\n\
    \            .collect(Collectors.toList());", "        ArrayList<String> result\
    \ = new ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring))\
    \ {\n                result.add(s);\n            }\n        }\n        return\
    \ result;", '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        // Filter strings that contain given substring and return the list of remaining\
    \ strings\n        ArrayList<String> stringsList = new ArrayList<String>();\n\
    \        List<String> filteredStrings = new ArrayList<String>();\n        for(String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         stringsList = stringsList.add(string);\n            } else {\n     \
    \           filteredStrings = filteredStrings.add(string);\n            }\n  \
    \      }\n        return stringsList;", "        if (strings == null) return null;\n\
    \        ArrayList<String> result = new ArrayList<>();\n        for(String str:\
    \ strings) {\n            if (str.contains(substring))\n                result.add(str);\n\
    \        }\n        return result;", "        // Write your code here.\n     \
    \   // Create an empty list to be return\n        ArrayList<String> res = new\
    \ ArrayList<>();\n        for (String s : strings) {\n            if (s.contains(substring))\
    \ {\n                res.add(s);\n            }\n        }\n        return res;",
  "        return strings.stream()\n                .filter(s -> s.contains(substring))\n\
    \                .collect(Collectors.toCollection(ArrayList<String>::new));",
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         result.add(string);\n            }\n        }\n        return result;",
  "        return strings\n            .stream()\n            .filter(s -> s.contains(substring))\n\
    \            .collect(Collectors.toCollection(ArrayList::new));", "        return\
    \ strings.stream()\n            .filter(x -> x.contains(substring))\n        \
    \    .collect(Collectors.toCollection(ArrayList::new));", '        return strings.stream().filter(str
    -> str.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));',
  "        return strings.stream()\n                .filter(x -> x.contains(substring))\n\
    \                .collect(Collectors.toList());", "        return strings.stream()\n\
    \                .filter(s -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         filtered.add(string);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> result = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring)) {\n              \
    \  result.add(string);\n            }\n        }\n        return result;", " \
    \       ArrayList<String> newList = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                newList.add(s);\n\
    \            }\n        }\n        return newList;", '        return strings.stream().filter(e
    -> e.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));',
  "        return strings.stream()\n            .filter(string -> string.contains(substring))\n\
    \            .collect(Collectors.toCollection(() -> new ArrayList<String>()));",
  "        // Write your Java code here\n        ArrayList<String> filter = new ArrayList<>();\n\
    \        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filter.add(string);\n            }\n        }\n        return\
    \ filter;", '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ str : strings) {\n            if (str.contains(substring)) {\n             \
    \   result.add(str);\n            }\n        }\n        return result;", "   \
    \     return strings.stream()\n                .filter(x -> x.contains(substring))\n\
    \                .collect(Collectors.toList());", "        // Complete this method\n\
    \        ArrayList<String> filtered = new ArrayList<String>(strings);\n      \
    \  return filtered;", "        return strings.stream()\n            .filter(o\
    \ -> o.contains(substring))\n            .collect(Collectors.toCollection(ArrayList::new));",
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> filtered = new ArrayList<>();\n        for (String s\
    \ : strings) {\n            if (substring.equals(s)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String str : strings) {\n\
    \            if (str.contains(substring)) {\n                filtered.add(str);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ ret = new ArrayList<>();\n        for (int i = 0; i < strings.size(); i++) {\n\
    \            if (strings.get(i).contains(substring))\n                ret.add(strings.get(i));\n\
    \        }\n        return ret;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        if (strings != null) {\n            for (String s : strings) {\n    \
    \            if (s.contains(substring)) {\n                    result.add(s);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   return strings.stream()\n            .filter(s -> s.contains(substring))\n\
    \            .collect(Collectors.toList());", "        if (strings != null) {\n\
    \            return strings.stream()\n                    .filter(s -> s.contains(substring))\n\
    \                    .collect(Collectors.toList());\n        }\n        return\
    \ strings;", '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  '        return strings.stream().filter(x -> x.contains(substring)).collect(Collectors.toList());',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> result = new ArrayList<>();\n        if (strings == null\
    \ || strings.size() == 0) return result;\n        String firstSubstring = strings.get(0).toLowerCase().substring(0,\
    \ substring.length());\n        for (int i = 0; i < strings.size(); i++) {\n \
    \           String currentString = strings.get(i);\n            if (currentString.toLowerCase().startsWith(firstSubstring))\
    \ {\n                result.add(currentString);\n            }\n        }\n  \
    \      return result;", "        if (strings == null) {\n            throw new\
    \ IllegalArgumentException(\"strings cannot be null\");\n        }\n        if\
    \ (substring == null) {\n            throw new IllegalArgumentException(\"substring\
    \ cannot be null\");\n        }\n        ArrayList<String> filtered = new ArrayList<>();\n\
    \        for (String s : strings) {\n            if (s.contains(substring)) {\n\
    \                filtered.add(s);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> result = new ArrayList<String>();\n        strings.stream().filter((s)\
    \ -> s.contains(substring)).forEachOrdered(result::add);\n        return result;",
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));',
  "        ArrayList<String> filtered = new ArrayList<>();\n        for(String string\
    \ : strings) {\n            if(string.toUpperCase().contains(substring.toUpperCase()))\
    \ {\n                filtered.add(string);\n            }\n        }\n       \
    \ return filtered;", '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", "        return strings\n\
    \            .stream()\n            .filter(str -> str.contains(substring))\n\
    \            .collect(Collectors.toCollection(() -> new ArrayList<String>()));",
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> newArrayList = new ArrayList<String>();\n        for\
    \ (String string : strings) {\n            if (string.contains(substring)) {\n\
    \                newArrayList.add(string);\n            }\n        }\n       \
    \ return newArrayList;", "        List<String> filteredStrings = new ArrayList<String>();\n\
    \        // filter strings array list by substring and assign filtered list to\
    \ filteredStrings\n        for (String string : strings) {\n            if (string.contains(substring))\
    \ {\n                filteredStrings.add(string);\n            }\n        }\n\
    \        // return filtered list\n        return filteredStrings;", "        return\
    \ strings.stream()\n                .filter(s -> s.contains(substring))\n    \
    \            .collect(Collectors.toList());", "        List<String> resultList\
    \ = new ArrayList<>();\n        if (strings == null || strings.size() == 0) {\n\
    \            return resultList;\n        }\n        if (substring == null || substring.length()\
    \ == 0) {\n            return resultList;\n        }\n        for(String s: strings)\
    \ {\n            if (s.toLowerCase().contains(substring.toLowerCase())) {\n  \
    \              resultList.add(s);\n            }\n        }\n        return resultList;",
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        // Create a lambda that tests to see if given string contains substring\
    \ parameter\n        Predicate<String> subPredicate = string -> string.contains(substring);\n\
    \        // Return an arraylist containing only those strings which match that\
    \ predicate\n        return strings.stream().filter(subPredicate).collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<String> filtered = new ArrayList<>();\n        for(String s :\
    \ strings) {\n            if(s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", "        return strings\n\
    \                .stream()\n                .filter(string -> string.contains(substring))\n\
    \                .collect(Collectors.toCollection(ArrayList::new));", "      \
    \  // Create new list of strings with filtered strings of input array\n      \
    \  ArrayList<String> filtered = new ArrayList<>();\n        // Filter input list\
    \ with given substring and add those to output list\n        for(String str :\
    \ strings) {\n            // Check if the string contains the substring\n    \
    \        if(str.contains(substring)) {\n                // Add string to output\
    \ list with substring\n                filtered.add(str);\n            }\n   \
    \     }\n        // Return output list\n        return filtered;", "        ArrayList<String>\
    \ filtered = new ArrayList<String>();\n        for (String string : strings) {\n\
    \            if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;", "        return strings.stream()\n\
    \                .filter(s -> s.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));",
  "        return strings.stream()\n                .filter(s -> s.contains(substring))\n\
    \                .collect(Collectors.toList());", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(str -> str.contains(substring)).collect(Collectors.toList());',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> filtered = new ArrayList<>();\n        for (String s\
    \ : strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ filteredList = new ArrayList<String>();\n        for (String s : strings) {\n\
    \            if (s.contains(substring)) {\n                filteredList.add(s);\n\
    \            }\n        }\n        return filteredList;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));',
  '        return strings.stream().filter((s) -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> filtered = new ArrayList<>();\n        for (String s:\
    \ strings) {\n            if (s.contains(substring)) {\n                filtered.add(s);\n\
    \            }\n        }\n        return filtered;", "        List<String> filtered\
    \ = new ArrayList<String>();\n        for (String string : strings) {\n      \
    \      if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ result = new ArrayList<>();\n        for (String string: strings) {\n      \
    \      if (string.contains(substring)) {\n                result.add(string);\n\
    \            }\n        }\n        return result;", "        ArrayList<String>\
    \ filteredStrings = new ArrayList<>();\n        for (String string : strings)\
    \ {\n            if (string.contains(substring)) {\n                filteredStrings.add(string);\n\
    \            }\n        }\n        return filteredStrings;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));',
  '        return strings.stream().filter(s -> s.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> result = new ArrayList<String>();\n        // if strings\
    \ contains substring, add it to the result list\n        if (strings.stream().anyMatch(x\
    \ -> x.contains(substring))) {\n            result.addAll(strings);\n        }\n\
    \        return result;", "        // If list is empty return same array\n   \
    \     if(strings.isEmpty()) {\n            return strings;\n        }\n      \
    \  // If not empty loop over all strings in list\n        for(String string :\
    \ strings) {\n            // Check string for substring\n            if(string.contains(substring))\
    \ {\n                // Keep string\n                strings.add(string);\n  \
    \          }\n        }\n        return strings;", "        return strings.stream()\n\
    \                .filter(x -> x.contains(substring))\n                .collect(Collectors.toList());",
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         filtered.add(string);\n            }\n        }\n        return filtered;",
  '        return strings.stream().filter(string -> string.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> filteredStrings = new ArrayList<>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         filteredStrings.add(string);\n            }\n        }\n        return\
    \ filteredStrings;", "        ArrayList<String> result = new ArrayList<String>();\n\
    \        for (int i = 0; i < strings.size(); i++) {\n            if (strings.get(i).contains(substring))\
    \ {\n                result.add(strings.get(i));\n            }\n        }\n \
    \       return result;", "        return strings.stream()\n                .filter(input\
    \ -> input.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));",
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ string : strings) {\n            if (string.contains(substring)) {\n       \
    \         filtered.add(string);\n            }\n        }\n        return filtered;",
  "        ArrayList<String> result = new ArrayList<>();\n        for (String string\
    \ : strings) {\n            if (string.contains(substring))\n                result.add(string);\n\
    \        }\n        return result;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList());', '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList());', "        ArrayList<String>\
    \ filtered = new ArrayList<>();\n        for (String string : strings) {\n   \
    \         if (string.contains(substring)) {\n                filtered.add(string);\n\
    \            }\n        }\n        return filtered;", "        ArrayList<String>\
    \ result = new ArrayList<String>();\n\n        for (String string : strings) {\n\
    \            if (string.contains(substring))\n                result.add(string);\n\
    \        }\n\n        return result;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        return strings.stream()\n                .filter(s -> s.contains(substring))\n\
    \                .collect(toList());", '        return strings.stream().filter(o
    -> o.contains(substring)).collect(Collectors.toCollection(ArrayList<String>::new));',
  "        ArrayList<String> result = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring)) {\n                result.add(s);\n\
    \            }\n        }\n        return result;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList());', '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  '        return strings.stream().filter(string -> string.contains(substring)).collect(Collectors.toList());',
  "        ArrayList<String> filtered = new ArrayList<String>();\n        for (String\
    \ s : strings) {\n            if (s.contains(substring))\n                filtered.add(s);\n\
    \        }\n        return filtered;", '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toList());', '        return strings.stream().filter(s
    -> s.contains(substring)).collect(Collectors.toCollection(ArrayList::new));',
  "        ArrayList<String> results = new ArrayList<>();\n        for(String s :\
    \ strings){\n            if(s.contains(substring)) {\n                results.add(s);\n\
    \            }\n        }\n        return results;", '        return strings.stream().filter(x
    -> x.contains(substring)).collect(Collectors.toList());', "        ArrayList<String>\
    \ ret = new ArrayList<String>();\n        for (int i=0; i<strings.size(); i++)\
    \ {\n            if (strings.get(i).contains(substring))\n                ret.add(strings.get(i));\n\
    \        }\n        return ret;", "        return strings.stream()\n         \
    \       .filter(string -> string.contains(substring))\n                .collect(Collectors.toCollection(ArrayList::new));"]
stop_tokens:
- "\n    }\n"
