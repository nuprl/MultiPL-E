language: java
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> result = new ArrayList<>();\n        for (String number\
    \ : numbers.split(\" \")) {\n            result.add(number.replaceAll(\"[^0-9]+\"\
    , \"\"));\n        }\n        Collections.sort(result);\n        return String.join(\"\
    \ \", result);\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc5ryhnn_.java:24)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> sortedNumbers = new ArrayList<String>();\n        for(int\
    \ i = 0; i < numbers.length() - 1; i++){\n            String n = numbers.substring(i,\
    \ i+2);\n            String temp = numbers.substring(i, i+2);\n            int\
    \ temp = Integer.parseInt(temp);\n            sortedNumbers.add(n);\n        \
    \    sortedNumbers.add(temp);\n            sortedNumbers.add(temp);\n        }\n\
    \        Collections.sort(sortedNumbers);\n        StringBuilder builder = new\
    \ StringBuilder();\n        for(int i = 0; i < sortedNumbers.size(); i++){\n \
    \           builder.append(sortedNumbers.get(i));\n        }\n        return builder.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpabv0ntk7.java:19: error: variable temp is already defined in method\
    \ sortNumbers(String)\n            int temp = Integer.parseInt(temp);\n      \
    \          ^\n/tmp/tmpabv0ntk7.java:19: error: incompatible types: int cannot\
    \ be converted to String\n            int temp = Integer.parseInt(temp);\n   \
    \                                     ^\n/tmp/tmpabv0ntk7.java:21: error: incompatible\
    \ types: int cannot be converted to String\n            sortedNumbers.add(temp);\n\
    \                              ^\n/tmp/tmpabv0ntk7.java:22: error: incompatible\
    \ types: int cannot be converted to String\n            sortedNumbers.add(temp);\n\
    \                              ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // write your function here\n        int max = -1;\n        int min\
    \ = 0;\n        StringBuilder sb = new StringBuilder();\n        for (String s\
    \ : numbers.split(\" \"))\n        {\n            int number = Integer.parseInt(s);\n\
    \            if(number > max)\n                max = number;\n            if(number\
    \ < min)\n                min = number;\n        }\n        for(int i = min; i\
    \ <= max; i++)\n            sb.append(i);\n        return sb.toString();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmpds97a_s0.java:21)\n\tat Problem.main(tmpds97a_s0.java:32)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<Character, Integer> map = new HashMap<>();\n        final String\
    \ ZERO = \"zero\";\n        final String ONE = \"one\";\n        final String\
    \ TWO = \"two\";\n        final String THREE = \"three\";\n        final String\
    \ FOUR = \"four\";\n        final String FIVE = \"five\";\n        final String\
    \ SIX = \"six\";\n        final String SEVEN = \"seven\";\n        final String\
    \ EIGHT = \"eight\";\n        final String NINE = \"nine\";\n        for (String\
    \ number : numbers.split(\" \")) {\n            int number = Integer.parseInt(number);\n\
    \            map.put(number.charAt(0), number);\n        }\n\n        List<Integer>\
    \ numbersList = new ArrayList<>(map.values());\n        Collections.sort(numbersList);\n\
    \n        String sortedNumbers = numbersList.stream().map(x -> String.valueOf(x)).collect(Collectors.joining());\n\
    \        sortedNumbers = sortedNumbers.replaceAll(ZERO, \"one\").replaceAll(ONE,\
    \ \"two\").replaceAll(TWO, \"three\").replaceAll(THREE, \"four\").replaceAll(FOUR,\
    \ \"five\").replaceAll(FIVE, \"six\").replaceAll(SIX, \"seven\").replaceAll(SEVEN,\
    \ \"eight\").replaceAll(EIGHT, \"nine\");\n        return sortedNumbers;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpr7lmsq00.java:27: error: variable number is already defined in\
    \ method sortNumbers(String)\n            int number = Integer.parseInt(number);\n\
    \                ^\n/tmp/tmpr7lmsq00.java:27: error: incompatible types: int cannot\
    \ be converted to String\n            int number = Integer.parseInt(number);\n\
    \                                          ^\n/tmp/tmpr7lmsq00.java:28: error:\
    \ int cannot be dereferenced\n            map.put(number.charAt(0), number);\n\
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Integer[] numbersInt = new Integer[numbers.length()].toArray(numbers);\n\
    \        Arrays.sort(numbersInt, (Integer o1, Integer o2) -> {\n            if\
    \ (o1 < o2) return -1;\n            if (o1 > o2) return 1;\n            return\
    \ 0;\n        });\n        StringBuilder sb = new StringBuilder();\n        for\
    \ (Integer i : numbersInt) {\n            sb.append(i);\n            sb.append(\"\
    \ \");\n        }\n        return sb.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9wf1bxvw.java:15: error: cannot find symbol\n        Integer[]\
    \ numbersInt = new Integer[numbers.length()].toArray(numbers);\n             \
    \                                               ^\n  symbol:   method toArray(String)\n\
    \  location: class Integer[]\n1 error\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\"\\\\s+\");\n        Arrays.sort(nums);\n\
    \        return nums.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbjv6_wc_.java:20)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // split and sort the string\n        String[] nums = numbers.split(\"\
    \ \");\n        Arrays.sort(nums);\n        // convert the array to a string and\
    \ return\n        return String.join(\" \", nums);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdfzecy_4.java:24)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return numbers.replaceAll(\"\\\\s+\", \" \").trim()\n           \
    \     .split(\" \")\n                .sorted()\n                .stream()\n  \
    \              .map(n -> n.equals(\"zero\") ? 0 : n.equals(\"one\") ? 1 : n.equals(\"\
    two\") ? 2 : n.equals(\"three\") ? 3 : n.equals(\"four\") ? 4 : n.equals(\"five\"\
    ) ? 5 : n.equals(\"six\") ? 6 : n.equals(\"seven\") ? 7 : n.equals(\"eight\")\
    \ ? 8 : n.equals(\"nine\") ? 9 : Integer.valueOf(n))\n                .collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_hicos7x.java:17: error: cannot find symbol\n                .sorted()\n\
    \                ^\n  symbol:   method sorted()\n  location: class String[]\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        final String digits = \"0123456789\";\n        List<String> strings\
    \ = new ArrayList<>();\n        IntStream.range(1, Integer.parseInt(numbers)).forEach(i\
    \ -> strings.add(String.valueOf(i)));\n        Collections.sort(strings);\n  \
    \      StringBuilder sb = new StringBuilder();\n        for (String str : strings)\
    \ {\n            sb.append(str).append(\" \");\n        }\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmpnedbxipe.java:17)\n\tat Problem.main(tmpnedbxipe.java:26)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] array = numbers.split(\" \");\n        Collections.sort(Arrays.asList(array));\n\
    \        return Arrays.asList(array).toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1oca2kby.java:20)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] parts = numbers.split(\" \");\n        Arrays.sort(parts);\n\
    \        return String.join(\" \", parts);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk5oh9al7.java:22)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> nums = new ArrayList<String>();\n        for (String\
    \ number : numbers.split(\" \")) {\n            Integer n = Integer.parseInt(number);\n\
    \            if (n > 0) {\n                nums.add(n.toString());\n         \
    \   }\n        }\n        Collections.sort(nums);\n        return nums.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmp1k86x7i0.java:17)\n\tat Problem.main(tmp1k86x7i0.java:26)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // The trick is to use recursion.\n        // First, split the string\
    \ into space-separated words.\n        List<String> list = Arrays.asList(numbers.split(\"\
    \ \"));\n        // Second, sort the list.\n        list = list.stream().sorted().collect(Collectors.toList());\n\
    \        // Third, construct the sorted string.\n        String result = \"\"\
    ;\n        for (String number : list) {\n            result += number + \" \"\
    ;\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt08zg5jg.java:28)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        System.out.println(numbers);\n        String[] parts = numbers.split(\"\
    \ \");\n        Arrays.sort(parts);\n        String sorted = \"\";\n        for\
    \ (String part : parts) {\n            sorted += part;\n        }\n        return\
    \ sorted;\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo8ky1rt9.java:27)\n"
  stdout: '

    three

    three five nine

    '
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Stack<String> stack = new Stack<>();\n\n        // Split the input\
    \ into a list\n        String[] numberList = numbers.split(\" \");\n        //\
    \ Scan through the numbers, and push them into the stack\n        for (String\
    \ number : numberList) {\n            stack.push(number);\n        }\n\n     \
    \   // Create an empty result string\n        String result = \"\";\n\n      \
    \  // Sort the numbers starting with the smallest one\n        while (stack.size()\
    \ > 0) {\n            String top = stack.pop();\n            String bottom = stack.pop();\n\
    \n            // If the top one is bigger than the bottom one...\n           \
    \ if (Integer.parseInt(top) > Integer.parseInt(bottom)) {\n                //\
    \ Append the top one to the result\n                result += top + \" \";\n \
    \               // Append the bottom one to the stack\n                stack.push(bottom);\n\
    \            } else {\n                // Append the bottom one to the result\n\
    \                result += bottom + \" \";\n                // Append the top\
    \ one to the stack\n                stack.push(top);\n            }\n        }\n\
    \n        // Remove the last empty space from result\n        return result.replace(\"\
    \ \", \"\");\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat java.base/java.util.Stack.pop(Stack.java:83)\n\tat Problem.sortNumbers(tmpnv5risj5.java:30)\n\
    \tat Problem.main(tmpnv5risj5.java:50)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        ArrayList<Integer> numberArray = new ArrayList<Integer>();\n    \
    \    numbers = numbers.replace(\" \", \"\");\n        String[] nums = numbers.split(\"\
    \ \");\n        for (String num: nums) {\n            numberArray.add(Integer.parseInt(num));\n\
    \        }\n        Collections.sort(numberArray);\n        return String.join(\"\
    \ \", numberArray);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiacxnf0e.java:22: error: no suitable method found for join(String,ArrayList<Integer>)\n\
    \        return String.join(\" \", numberArray);\n                     ^\n   \
    \ method String.join(CharSequence,CharSequence...) is not applicable\n      (varargs\
    \ mismatch; ArrayList<Integer> cannot be converted to CharSequence)\n    method\
    \ String.join(CharSequence,Iterable<? extends CharSequence>) is not applicable\n\
    \      (argument mismatch; ArrayList<Integer> cannot be converted to Iterable<?\
    \ extends CharSequence>)\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Integer n = null;\n        String result = \"\";\n\n        for (int\
    \ i = 0; i < numbers.length(); i++) {\n            char c = numbers.charAt(i);\n\
    \n            if ('0' <= c && c <= '9') {\n                n = Integer.parseInt(numbers.substring(i,\
    \ i + 1));\n            } else {\n                if (n == null) {\n         \
    \           result = result + c;\n                } else {\n                 \
    \   if (c != numbers.charAt(i)) {\n                        result = result + numbers.charAt(i);\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplqbh6f4h.java:39)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberArray = numbers.split(\" \");\n        Arrays.sort(numberArray);\n\
    \        return Arrays.toString(numberArray);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkxuw8ade.java:20)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> numberList = new ArrayList<>(Arrays.asList(numbers.split(\"\
    \ \")));\n        Collections.sort(numberList);\n        return numberList.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmojxk6fb.java:15: error: incompatible types: cannot infer type\
    \ arguments for ArrayList<>\n        List<Integer> numberList = new ArrayList<>(Arrays.asList(numbers.split(\"\
    \ \")));\n                                                ^\n    reason: inference\
    \ variable E has incompatible bounds\n      equality constraints: Integer\n  \
    \    lower bounds: T,String\n  where E,T are type-variables:\n    E extends Object\
    \ declared in class ArrayList\n    T extends Object declared in method <T>asList(T...)\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Write your code in Java SE 8\n        List<String> numberList\
    \ = Arrays.asList(numbers.split(\" \"));\n        Collections.sort(numberList);\n\
    \        return String.join(\" \", numberList);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp51djg894.java:23)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> sortedNumbers = Arrays.asList(numbers.split(\" \")).stream().sorted().collect(Collectors.toList());\n\
    \        return sortedNumbers.stream().collect(Collectors.joining(\" \"));\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgw3w9wqe.java:21)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Convert string to array of strings\n        String[] numberArray\
    \ = numbers.split(\" \");\n        // Sort the array in ascending order based\
    \ on numerical order\n        Arrays.sort(numberArray);\n        // Create new\
    \ string\n        String sortedNumbers = \"\";\n        // For each string in\
    \ the array of strings\n        for (String number : numberArray) {\n        \
    \    // Append the number to the sortedNumbers string\n            sortedNumbers\
    \ += number + \" \";\n        }\n        // Return string with numbers sorted\
    \ from smallest to largest\n        return sortedNumbers;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf4a2okqw.java:30)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        numbers = numbers.replaceAll(\"\\\\s\", \"+\");\n        Matcher\
    \ m = Pattern.compile(\"^\\\\s+\\\\d+$\").matcher(numbers);\n        StringBuilder\
    \ sb = new StringBuilder();\n        while (m.find()) {\n            String num\
    \ = m.group();\n            if (num.length() > 0) {\n                sb.append(num.charAt(0));\n\
    \                sb.append(num.substring(1));\n            }\n        }\n    \
    \    return sortNumbers(sb);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppapc6p_d.java:16: error: cannot find symbol\n        Matcher m\
    \ = Pattern.compile(\"^\\\\s+\\\\d+$\").matcher(numbers);\n        ^\n  symbol:\
    \   class Matcher\n  location: class Problem\n/tmp/tmppapc6p_d.java:16: error:\
    \ cannot find symbol\n        Matcher m = Pattern.compile(\"^\\\\s+\\\\d+$\").matcher(numbers);\n\
    \                    ^\n  symbol:   variable Pattern\n  location: class Problem\n\
    /tmp/tmppapc6p_d.java:25: error: incompatible types: StringBuilder cannot be converted\
    \ to String\n        return sortNumbers(sb);\n                           ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n3 errors\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> numberList = new ArrayList<>();\n        numberList\
    \ = Arrays.stream(numbers.split(\"\\\\s+\")).map(Integer::parseInt).collect(Collectors.toList());\n\
    \        Collections.sort(numberList);\n        String sorted = \"\";\n      \
    \  for(int i = 0;i < numberList.size();i++) {\n            sorted = sorted.concat(String.valueOf(numberList.get(i)));\n\
    \            sorted = sorted.concat(\" \");\n        }\n        return sorted;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmp36a5ozx_.java:16)\n\tat Problem.main(tmp36a5ozx_.java:26)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        final int[] numberAsInt = new int[numbers.length()];\n        for\
    \ (int i = 0; i < numbers.length(); i++) {\n            numberAsInt[i] = Integer.parseInt(numbers.split(\"\
    \ \")[i]);\n        }\n        Arrays.sort(numberAsInt);\n        int[] sortedArray\
    \ = new int[numberAsInt.length];\n        for (int i = 0; i < numberAsInt.length;\
    \ i++) {\n            sortedArray[i] = numberAsInt[i];\n        }\n        StringBuilder\
    \ result = new StringBuilder();\n        for (int i = 0; i < sortedArray.length;\
    \ i++) {\n            result.append(String.valueOf(sortedArray[i]));\n       \
    \     result.append(' ');\n        }\n        return result.toString();\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"three\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmptyx6kgjh.java:17)\n\tat Problem.main(tmptyx6kgjh.java:33)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        ArrayList numbersList = new ArrayList(Arrays.asList(numbers.split(\"\
    \ \")));\n        Collections.sort(numbersList);\n        return (String) numbersList.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpugn1isw2.java:22)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] strings = numbers.split(\"\\\\s\");\n        Arrays.sort(strings);\n\
    \        return String.join(\" \", strings);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt21ubgki.java:22)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberStrings = numbers.split(\" \");\n        Arrays.sort(numberStrings);\n\
    \        return String.join(\" \", numberStrings);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3cii5f1p.java:22)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        if (numbers == null || numbers.isEmpty())\n            return \"\
    zero zero zero\";\n        String[] numberList = numbers.split(\"\\\\s+\");\n\
    \        Arrays.sort(numberList);\n        return String.join(\" \", numberList);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwuwue5q2.java:22)\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Split the string into an array of strings using the space delimiter\n\
    \        String[] nums = numbers.split(\" \");\n        // Sort each string in\
    \ the array from smallest to largest\n        Arrays.sort(nums);\n        // Reconstruct\
    \ the string back from the sorted array\n        StringBuilder builder = new StringBuilder();\n\
    \        for (String num : nums) {\n            builder.append(num).append(\"\
    \ \");\n        }\n        return builder.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph65ghkd5.java:27)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> nums = Arrays.stream(numbers.split(\" \")).map(s ->\
    \ Integer.parseInt(s)).collect(Collectors.toList());\n        nums.sort((a, b)\
    \ -> a - b);\n        return nums.stream().map(i -> String.valueOf(i)).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.lambda$sortNumbers$0(tmpetjc7x7a.java:15)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmpetjc7x7a.java:15)\n\tat Problem.main(tmpetjc7x7a.java:20)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Initialize a scanner to read from stdin\n        Scanner scanner\
    \ = new Scanner(System.in);\n\n        // read a line of input from standard input\n\
    \        String input = scanner.nextLine();\n\n        // Initialize a StringBuilder\
    \ to append the input string to\n        StringBuilder stringBuilder = new StringBuilder();\n\
    \        // Read through input string and append each number to the stringBuilder\n\
    \        numbers = numbers.trim();\n        for (String number : numbers.split(\"\
    \ \")) {\n            stringBuilder.append(number);\n        }\n\n        // Initialize\
    \ a List<T> to hold the numbers as T objects\n        List<Integer> numberList\
    \ = new ArrayList<Integer>();\n        // Read the numbers from the input string\
    \ and convert them into Integer object\n        for (String number : stringBuilder.toString().split(\"\
    \ \")) {\n            numberList.add(Integer.valueOf(number));\n        }\n\n\
    \        // Sort the numberList from lowest to largest\n        Collections.sort(numberList);\n\
    \n        // Create an empty string builder for the sorted numbers\n        StringBuilder\
    \ sortedNumbers = new StringBuilder();\n        // For each number in numberList,\
    \ append it to sortedNumbers stringBuilder\n        for (Integer number : numberList)\
    \ {\n            sortedNumbers.append(number.toString());\n        }\n       \
    \ // return the string builder contents trimmed to only include the numbers\n\
    \        return sortedNumbers.toString().trim();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.NoSuchElementException: No line\
    \ found\n\tat java.base/java.util.Scanner.nextLine(Scanner.java:1651)\n\tat Problem.sortNumbers(tmp14khmh1t.java:19)\n\
    \tat Problem.main(tmp14khmh1t.java:49)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberArr = numbers.split(\"\\\\s\");\n        Arrays.sort(numberArr);\n\
    \        String result = \"\";\n        for (String str : numberArr)\n       \
    \     result += \" \" + str;\n        return result.substring(0, result.length()\
    \ - 1);\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpempc3mgu.java:24)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] digits = numbers.split(\" \");\n        List<Integer> digitsList\
    \ = Arrays.stream(digits).map(Integer::valueOf).collect(Collectors.toList());\n\
    \        Collections.sort(digitsList);\n        return Arrays.stream(digitsList).map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsyhjdc99.java:18: error: no suitable method found for stream(List<Integer>)\n\
    \        return Arrays.stream(digitsList).map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n                     ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; List<Integer>\
    \ cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List list = Arrays.stream(numbers.split(\" \")).sorted().collect(Collectors.toList());\n\
    \        StringBuilder strBuilder = new StringBuilder();\n        list.forEach(s\
    \ -> strBuilder.append(s).append(' '));\n        return strBuilder.substring(0,\
    \ strBuilder.length() - 1);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpibx5r4n5.java:23)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberStrings = numbers.split(\" \");\n        Arrays.sort(numberStrings);\n\
    \        return numberStrings.join(\" \");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuwbmj5ni.java:17: error: cannot find symbol\n        return numberStrings.join(\"\
    \ \");\n                            ^\n  symbol:   method join(String)\n  location:\
    \ variable numberStrings of type String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        final String[] values = new String[10];\n        int start = 0;\n\
    \        final int n = numbers.length();\n        for (int i = 0; i < n; i++)\
    \ {\n            final int c = numbers.charAt(i);\n            if (c != ' ') {\n\
    \                values[Character.toUpperCase(c) - '0'] = \"\";\n            }\
    \ else {\n                values[Character.toUpperCase(c) - '0'] = Integer.toString(i\
    \ - start);\n                start = i;\n            }\n        }\n        Arrays.sort(values);\n\
    \        StringBuilder result = new StringBuilder();\n        for (int i = 0;\
    \ i < n; i++) {\n            final int c = numbers.charAt(i);\n            result.append(values[Character.toUpperCase(c)\
    \ - '0']);\n        }\n        return result.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke\
    \ \"java.lang.Comparable.compareTo(Object)\" because \"a[runHi]\" is null\n\t\
    at java.base/java.util.ComparableTimSort.countRunAndMakeAscending(ComparableTimSort.java:320)\n\
    \tat java.base/java.util.ComparableTimSort.sort(ComparableTimSort.java:188)\n\t\
    at java.base/java.util.Arrays.sort(Arrays.java:1041)\n\tat Problem.sortNumbers(tmp058l22_8.java:27)\n\
    \tat Problem.main(tmp058l22_8.java:36)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO: Add your code here\n        String[] arr = numbers.split(\"\
    \ \");\n        Arrays.sort(arr);\n        return arr;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0k36phvk.java:18: error: incompatible types: String[] cannot be\
    \ converted to String\n        return arr;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] split = numbers.split(\" \");\n        Arrays.sort(split);\n\
    \        String output = \"\";\n        for (String s : split) {\n           \
    \ output += s;\n        }\n        return output;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplpoi3p7k.java:26)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> numberList = Arrays.asList(numbers.split(\" \").mapToInt(Integer::parseInt).toArray());\n\
    \        Collections.sort(numberList);\n        return numberList.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpr_zefc9t.java:15: error: cannot find symbol\n        List<Integer>\
    \ numberList = Arrays.asList(numbers.split(\" \").mapToInt(Integer::parseInt).toArray());\n\
    \                                                                   ^\n  symbol:\
    \   method mapToInt(Integer::parseInt)\n  location: class String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        final String nums = numbers.trim();\n        final String[] numList\
    \ = nums.split(\" \");\n        final String sorted = \"The numbers to sort are:\
    \ \" + Arrays.toString(numList) + \" and sorted: \" + Arrays.asList(numList).sort((a,\
    \ b) -> Integer.compare(b,a)).stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n        return sorted;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwhre4lpt.java:17: error: incompatible types: String cannot be converted\
    \ to int\n        final String sorted = \"The numbers to sort are: \" + Arrays.toString(numList)\
    \ + \" and sorted: \" + Arrays.asList(numList).sort((a, b) -> Integer.compare(b,a)).stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n                                                                    \
    \                                                                            \
    \               ^\n/tmp/tmpwhre4lpt.java:17: error: void cannot be dereferenced\n\
    \        final String sorted = \"The numbers to sort are: \" + Arrays.toString(numList)\
    \ + \" and sorted: \" + Arrays.asList(numList).sort((a, b) -> Integer.compare(b,a)).stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n                                                                    \
    \                                                                            \
    \                    ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> list = Arrays.stream(numbers.split(\" \"))\n       \
    \     .map(String::trim)\n            .filter(n -> n.length() > 0)\n         \
    \   .sorted(Comparator.naturalOrder())\n            .map(String::trim)\n     \
    \       .collect(Collectors.toList());\n        return String.join(\" \", list);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr20f86c5.java:26)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] tokens = numbers.split(\" \");\n        Arrays.sort(tokens);\n\
    \        String result = \"\";\n        for (String t : tokens)\n            result\
    \ = result + t + \" \";\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmc6uble2.java:23)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        return Arrays.toString(nums).replace('[', '(').replace(']', ')').replace(\"\
    , \",\"\");\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwnl3mnx5.java:20)\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        if (numbers == null || numbers.isEmpty()) return \"\";\n\n      \
    \  // Declare a LinkedList<Integer> for use with Collections.sort() later\n  \
    \      LinkedList<Integer> list = new LinkedList<Integer>();\n\n        // Parse\
    \ the list of strings into an ArrayList of Integers\n        // using Collectors.toList()\n\
    \        // Note: We need to use Integer.parseInt() because our input is \"zero\
    \ ... nine\"\n        List<Integer> parsedList = Arrays.stream(numbers.split(\"\
    \ \"))\n                .map(Integer::parseInt)\n                .collect(Collectors.toList());\n\
    \n        // Populate the LinkedList<Integer> with the parsed integers\n     \
    \   list.clear();\n        list.addAll(parsedList);\n\n        // Sort the LinkedList<Integer>\
    \ using Collections.sort()\n        Collections.sort(list);\n\n        // Create\
    \ the return String using the LinkedList<Integer> as input\n        StringBuilder\
    \ sb = new StringBuilder();\n        for (Integer i : list) {\n            sb.append(i).append(\"\
    \ \");\n        }\n        return s1.trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp28klbsuq.java:39: error: cannot find symbol\n        return s1.trim();\n\
    \               ^\n  symbol:   variable s1\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> numberList = Arrays.stream(numbers.split(\" \")).map(Integer::valueOf).collect(Collectors.toList());\n\
    \        Collections.sort(numberList);\n        return String.join(\" \", numberList);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfbejc6xo.java:17: error: no suitable method found for join(String,List<Integer>)\n\
    \        return String.join(\" \", numberList);\n                     ^\n    method\
    \ String.join(CharSequence,CharSequence...) is not applicable\n      (varargs\
    \ mismatch; List<Integer> cannot be converted to CharSequence)\n    method String.join(CharSequence,Iterable<?\
    \ extends CharSequence>) is not applicable\n      (argument mismatch; List<Integer>\
    \ cannot be converted to Iterable<? extends CharSequence>)\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011599
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> nums = Arrays.asList(numbers.split(\" \"));\n      \
    \  Collections.sort(nums);\n        return String.join(\" \", nums);\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2_s45d2m.java:22)\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> list = new ArrayList<String>();\n        for (int i\
    \ = 0; i < numbers.length(); i++)\n            if (numbers.get(i) != \" \")\n\
    \                list.add(numbers.get(i));\n        Collections.sort(list);\n\
    \        String listString = \"\";\n        for (String s : list)\n          \
    \  listString += s + \"\\n\";\n        return listString;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8pqtpq4o.java:17: error: cannot find symbol\n            if (numbers.get(i)\
    \ != \" \")\n                       ^\n  symbol:   method get(int)\n  location:\
    \ variable numbers of type String\n/tmp/tmp8pqtpq4o.java:18: error: cannot find\
    \ symbol\n                list.add(numbers.get(i));\n                        \
    \        ^\n  symbol:   method get(int)\n  location: variable numbers of type\
    \ String\n2 errors\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        return String.join(\" \", nums);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9l2doktw.java:22)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO Auto-generated method stub\n        String[] numberArray\
    \ = numbers.split(\" \");\n        Arrays.sort(numberArray);\n        StringBuilder\
    \ sb = new StringBuilder();\n        for(String s : numberArray) {\n         \
    \   sb.append(s);\n        }\n        return sb.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1bgz1s3.java:27)\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Find smallest and largest number\n        int smallest;\n    \
    \    int largest;\n        int count = Integer.parseInt(numbers);\n        if\
    \ (count > 10) {\n            throw new IllegalArgumentException(\"Invalid input:\
    \ \" + numbers);\n        }\n        if (count < 10) {\n            throw new\
    \ IllegalArgumentException(\"Invalid input: \" + numbers);\n        }\n      \
    \  for (int i = 0; i < count; i++) {\n            if (Integer.parseInt(numbers.replaceAll(\"\
    \\\\s+\", \"\").substring(i + 1, i + 1 + numbers.replaceAll(\"\\\\s+\", \"\").length()))\
    \ < smallest) {\n                smallest = Integer.parseInt(numbers.replaceAll(\"\
    \\\\s+\", \"\").substring(i + 1, i + 1 + numbers.replaceAll(\"\\\\s+\", \"\").length()));\n\
    \            }\n            if (Integer.parseInt(numbers.replaceAll(\"\\\\s+\"\
    , \"\").substring(i + 1, i + 1 + numbers.replaceAll(\"\\\\s+\", \"\").length()))\
    \ > largest) {\n                largest = Integer.parseInt(numbers.replaceAll(\"\
    \\\\s+\", \"\").substring(i + 1, i + 1 + numbers.replaceAll(\"\\\\s+\", \"\").length()));\n\
    \            }\n        }\n        // Sort numbers\n        Arrays.sort(new int[]\
    \ {smallest, largest});\n        // Return sorted numbers\n        return String.valueOf(Arrays.asList(smallest,\
    \ largest));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpy7xwhnq6.java:26: error: variable smallest might not have been\
    \ initialized\n            if (Integer.parseInt(numbers.replaceAll(\"\\\\s+\"\
    , \"\").substring(i + 1, i + 1 + numbers.replaceAll(\"\\\\s+\", \"\").length()))\
    \ < smallest) {\n                                                            \
    \                                                                         ^\n\
    /tmp/tmpy7xwhnq6.java:29: error: variable largest might not have been initialized\n\
    \            if (Integer.parseInt(numbers.replaceAll(\"\\\\s+\", \"\").substring(i\
    \ + 1, i + 1 + numbers.replaceAll(\"\\\\s+\", \"\").length())) > largest) {\n\
    \                                                                            \
    \                                                         ^\n/tmp/tmpy7xwhnq6.java:34:\
    \ error: variable smallest might not have been initialized\n        Arrays.sort(new\
    \ int[] {smallest, largest});\n                               ^\n/tmp/tmpy7xwhnq6.java:34:\
    \ error: variable largest might not have been initialized\n        Arrays.sort(new\
    \ int[] {smallest, largest});\n                                         ^\n4 errors\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Stack<String> stack = new Stack<>();\n        String[] numberArray\
    \ = numbers.split(\" \");\n\n        // Convert each item in the array to a number,\
    \ pushing it onto the stack.\n        // This converts the array to a Stack so\
    \ we can pop the items in order.\n        for (String item : numberArray) {\n\
    \            try {\n                stack.push(Integer.parseInt(item));\n    \
    \        } catch (NumberFormatException exception) {\n                System.out.println(\"\
    Non-numeric value detected\");\n            }\n        }\n\n        // Sort the\
    \ items from the stack in reverse order\n        Arrays.sort(stack.reverse());\n\
    \n        // Convert them back to a string\n        String returnString = \"\"\
    ;\n        for (String item : stack) {\n            returnString += item;\n  \
    \      }\n\n        return returnString;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprb2zm38w.java:22: error: incompatible types: int cannot be converted\
    \ to String\n                stack.push(Integer.parseInt(item));\n           \
    \                                ^\n/tmp/tmprb2zm38w.java:29: error: cannot find\
    \ symbol\n        Arrays.sort(stack.reverse());\n                         ^\n\
    \  symbol:   method reverse()\n  location: variable stack of type Stack<String>\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Initialize an ordered collection using a list of strings:\n  \
    \      List<String> list = Arrays.asList(numbers.split(\" \"));\n        // Sort\
    \ elements of the collection in descending order:\n        Collections.sort(list,\
    \ (o1, o2) -> o2.compareTo(o1));\n        // Convert the collection to a string\
    \ and return it:\n        StringBuilder builder = new StringBuilder();\n     \
    \   for (String str : list)\n            builder.append(str).append(\" \");\n\
    \        return builder.toString().trim();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7j1ptzy5.java:28)\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String output = \"\";\n        numbers = numbers.toLowerCase();\n\
    \        \n        int length = numbers.length();\n        int[] integers = new\
    \ int[length];\n        \n        // Convert numbers to an array\n        // >>>\
    \ [int(x) for x in \"three one five\".split()]\n        // (3, 1, 5)\n\n     \
    \   // Convert strings to integers\n        // >>> [int(x) for x in \"three one\
    \ five\".lower().split()]\n        // (3, 1, 5)\n        \n        \n        \n\
    \        // Convert numbers array to string\n        // >>> [str(x) for x in integers]\n\
    \        // (\"1\", \"3\", \"5\")\n\n        // Sort integers from smallest to\
    \ largest\n        // >>> sorted(integers)\n        // (3, 5, 1)\n        \n \
    \       \n        \n        \n        // Loop over array of integers\n       \
    \ // >>> for value in integers:\n        //     output = output + [str(value)]\n\
    \        //     print(output)\n        \n        \n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqumt9qss.java:48: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        IntStream.range(0, numbers.length()).boxed().forEach(i -> {\n   \
    \         String tmp = numbers.substring(i, i+1);\n            numbers = numbers.replaceAll(\"\
    [\" + tmp + \"]\", \"\");\n        });\n\n        String str = numbers.replaceAll(\"\
    \\\\s+\", \"\");\n        String[] nums = str.split(\"\\\\s+\");\n        Arrays.sort(nums);\n\
    \        return String.join(\" \", nums);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpswcmhx26.java:16: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n            String tmp = numbers.substring(i,\
    \ i+1);\n                         ^\n/tmp/tmpswcmhx26.java:17: error: local variables\
    \ referenced from a lambda expression must be final or effectively final\n   \
    \         numbers = numbers.replaceAll(\"[\" + tmp + \"]\", \"\");\n         \
    \             ^\n/tmp/tmpswcmhx26.java:17: error: local variables referenced from\
    \ a lambda expression must be final or effectively final\n            numbers\
    \ = numbers.replaceAll(\"[\" + tmp + \"]\", \"\");\n            ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        System.out.println(\"numbers = \" + numbers);\n        List<String>\
    \ numbersList = new ArrayList<>();\n        numbers = numbers.replaceAll(\" \"\
    , \"\");\n        for (int i = 0; i < numbers.split(\" \").length; i++) {\n  \
    \          numbersList.add(((String) numbers.split(\" \")[i]).toLowerCase());\n\
    \        }\n        Collections.sort(numbersList, new Comparator<String>() {\n\
    \            public int compare(String s1, String s2) {\n                String[]\
    \ str1 = s1.split(\" \");\n                String[] str2 = s2.split(\" \");\n\
    \                int i = 0;\n                while (i + 1 < str1.length) {\n \
    \                   if (str1[i].compareTo(str2[i]) < 0) {\n                  \
    \      return -1;\n                    }\n                    if (str1[i].compareTo(str2[i])\
    \ > 0) {\n                        return 1;\n                    }\n         \
    \           i++;\n                }\n                return 0;\n            }\n\
    \        });\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < numbersList.size(); i++) {\n            sb.append(numbersList.get(i)).append(\"\
    , \");\n        }\n        sb.delete(sb.length() - 2, sb.length());\n        return\
    \ sb.toString();\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcs2w5nsq.java:48)\n"
  stdout: "numbers = \nnumbers = three\nnumbers = three five nine\n"
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Split input into individual numbers, then sort them\n        String[]\
    \ numberArray = numbers.trim().split(\"\\\\s+\");\n        Arrays.sort(numberArray);\n\
    \        // Combine them back together with spaces between them\n        String\
    \ sortedNumbers = String.join(\"  \", numberArray);\n        return sortedNumbers;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_p8sir97.java:25)\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        ArrayList<String> list = new ArrayList<String>();\n        for(String\
    \ number : numbers.split(\" \")) {\n            if(number.equals(\"zero\")) list.add(\"\
    zero\");\n            else if(number.equals(\"one\")) list.add(\"one\");\n   \
    \         else if(number.equals(\"two\")) list.add(\"two\");\n            else\
    \ if(number.equals(\"three\")) list.add(\"three\");\n            else if(number.equals(\"\
    four\")) list.add(\"four\");\n            else if(number.equals(\"five\")) list.add(\"\
    five\");\n            else if(number.equals(\"six\")) list.add(\"six\");\n   \
    \         else if(number.equals(\"seven\")) list.add(\"seven\");\n           \
    \ else if(number.equals(\"eight\")) list.add(\"eight\");\n            else if(number.equals(\"\
    nine\")) list.add(\"nine\");\n            else throw new RuntimeException(\"Invalid\
    \ input \" + number);\n        }\n\n        Collections.sort(list);\n        return\
    \ String.join(\" \", list);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.RuntimeException: Invalid input\
    \ \n\tat Problem.sortNumbers(tmp2s3odibj.java:27)\n\tat Problem.main(tmp2s3odibj.java:34)\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Arrays.sort(numbers.split(\" \"));\n        return String.join(\"\
    \ \", numbers);\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgjoq3lz5.java:22)\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        ArrayList <Integer> numberList = Arrays.asList(numbers)\n       \
    \         .stream()\n                .map(Integer::valueOf)\n                .sorted()\n\
    \                .collect(Collectors.toList());\n        return Arrays.asList(numberList.toArray()).toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpp134ajox.java:19: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .collect(Collectors.toList());\n\
    \                        ^\n    equality constraints: List<T#2>\n    lower bounds:\
    \ ArrayList<Integer>,Object\n  where R,A,T#1,T#2 are type-variables:\n    R extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    A extends\
    \ Object declared in method <R,A>collect(Collector<? super T#1,A,R>)\n    T#1\
    \ extends Object declared in interface Stream\n    T#2 extends Object declared\
    \ in method <T#2>toList()\n1 error\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Scanner scan = new Scanner(numbers);\n        List<Integer> numbersList\
    \ = new ArrayList<>();\n        while (scan.hasNextInt()) {\n            numbersList.add(scan.nextInt());\n\
    \        }\n        Collections.sort(numbersList);\n        StringBuilder builder\
    \ = new StringBuilder();\n        for (int i = 0; i < numbersList.size(); i++)\
    \ {\n            builder.append(numbersList.get(i));\n            if (i != numbersList.size()\
    \ - 1) {\n                builder.append(\" \");\n            }\n        }\n \
    \       return builder.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd28zsgq0.java:32)\n"
  stdout: ''
  timestamp: 1660011602
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        if (numbers.length() < 2) {\n            return numbers;\n      \
    \  }\n\n        String[] stringParts = numbers.split(\" \");\n        Arrays.sort(stringParts);\n\
    \        return String.join(\" \", stringParts);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg6_mu_eo.java:26)\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        ArrayList<String> arr = new ArrayList<>(Arrays.asList(numbers.split(\"\
    \ \")));\n        Collections.sort(arr);\n        String[] strArr = arr.stream().map(String::trim).filter(s\
    \ -> !s.isEmpty()).collect(Collectors.toList()).stream().map(s -> s.toUpperCase()).sorted().map(s\
    \ -> s + \" \").sorted().toArray(new String[0]);\n        return String.join(\"\
    \ \", strArr);\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqq21bu2d.java:17: error: method toArray in interface Stream<T>\
    \ cannot be applied to given types;\n        String[] strArr = arr.stream().map(String::trim).filter(s\
    \ -> !s.isEmpty()).collect(Collectors.toList()).stream().map(s -> s.toUpperCase()).sorted().map(s\
    \ -> s + \" \").sorted().toArray(new String[0]);\n                           \
    \                                                                            \
    \                                                                            \
    \   ^\n  required: IntFunction<A[]>\n  found:    String[]\n  reason: cannot infer\
    \ type-variable(s) A\n    (argument mismatch; String[] cannot be converted to\
    \ IntFunction<A[]>)\n  where A,T are type-variables:\n    A extends Object declared\
    \ in method <A>toArray(IntFunction<A[]>)\n    T extends Object declared in interface\
    \ Stream\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] parts = numbers.split(\" \");\n        Arrays.sort(parts);\n\
    \        return String.join(\" \", parts);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk5oh9al7.java:22)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // The map will hold our number strings in order of ascending value\n\
    \        Map<String, Integer> numberMap = new LinkedHashMap<>();\n\n        //\
    \ We split our input on spaces and parse our numbers into integers\n        String[]\
    \ numArray = numbers.split(\" \");\n\n        // We sort the array of numbers\
    \ from smallest to largest\n        Arrays.sort(numArray, (o1, o2) -> {\n    \
    \        // We want to return a negative number if a < b, else return a positive\
    \ number\n            // We cast our numbers to integers and use Integer.compareTo\n\
    \            int i1 = Integer.parseInt(o1);\n            int i2 = Integer.parseInt(o2);\n\
    \            return Integer.compare(i1, i2);\n        });\n\n        // We loop\
    \ over our array of numbers and create our sorted string\n        for (String\
    \ n : numArray) {\n            // If we have a new number string, add it to our\
    \ map and get its value\n            if (numberMap.containsKey(n)) {\n       \
    \         // If the number exists in our map, decrement the number by one\n  \
    \              numberMap.put(n, numberMap.get(n) - 1);\n            } else {\n\
    \                // If we don't have the number string, add it and then set its\
    \ value to\n                // one because we start with a one\n             \
    \   numberMap.put(n, 1);\n            }\n        }\n\n        // We loop over\
    \ our map and construct our sorted number\n        StringBuilder sorted = new\
    \ StringBuilder();\n        for (String n : numberMap.keySet()) {\n          \
    \  int value = numberMap.get(n);\n            sorted.append(value);\n        }\n\
    \        // Return the sorted number\n        return sorted.toString();\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqbyf9xce.java:53)\n"
  stdout: ''
  timestamp: 1660011602
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        System.out.println(\"input numbers:\" + numbers);\n        ArrayList<String>\
    \ arr=new ArrayList<String>();\n        arr.add(numbers);\n        Arrays.sort(arr);\n\
    \        System.out.println(\"arr:\" + arr);\n        return Arrays.stream(arr).collect(Collectors.joining());\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9x_hexiw.java:18: error: no suitable method found for sort(ArrayList<String>)\n\
    \        Arrays.sort(arr);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<String> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<String> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmp9x_hexiw.java:20: error: no suitable method found for stream(ArrayList<String>)\n\
    \        return Arrays.stream(arr).collect(Collectors.joining());\n          \
    \           ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n      (cannot\
    \ infer type-variable(s) T#1\n        (argument mismatch; ArrayList<String> cannot\
    \ be converted to T"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> numberList = Arrays.asList(numbers.split(\" \"));\n\
    \        Arrays.sort(numberList);\n        StringBuilder stringBuilder = new StringBuilder();\n\
    \        for (Integer number : numberList) {\n            stringBuilder.append(number);\n\
    \        }\n        return stringBuilder.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8qgb3j1d.java:15: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        List<Integer> numberList = Arrays.asList(numbers.split(\"\
    \ \"));\n                                                ^\n    equality constraints:\
    \ Integer\n    lower bounds: String\n  where T is a type-variable:\n    T extends\
    \ Object declared in method <T>asList(T...)\n/tmp/tmp8qgb3j1d.java:16: error:\
    \ no suitable method found for sort(List<Integer>)\n        Arrays.sort(numberList);\n\
    \              ^\n    method Arrays.sort(int[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to int[])\n    method Arrays.sort(long[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to long[])\n    method Arrays.sort(short[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to short[])\n    method Arrays.sort(char[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to char[])\n    method Arrays.sort(byte[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to byte[])\n    method Arrays.sort(float[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to float[])\n    method Arrays.sort(double[]) is not applicable\n      (argument\
    \ mismatch; List<Integer> cannot be converted to double[])\n    method Arrays.sort(Object[])\
    \ is not applicable\n      (argument mismatch; List<Integer> cannot be converted\
    \ to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is\
    \ not applicable\n      (cannot infer type-variable(s) T#1\n        (actual and\
    \ formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: So"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return numbers.replaceAll(\"(^|,)([1-9]+)\", \"$2$3\").split(\" \"\
    ).stream().sorted().map(String::valueOf).collect(Collectors.joining(\" \"));\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpd3tnpjb6.java:15: error: cannot find symbol\n        return numbers.replaceAll(\"\
    (^|,)([1-9]+)\", \"$2$3\").split(\" \").stream().sorted().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n                                                                    \
    \ ^\n  symbol:   method stream()\n  location: class String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] splitted = numbers.split(\" \");\n        Arrays.sort(splitted);\n\
    \        return splitted.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptw9rr0xn.java:20)\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return numbers.split(\" \").stream()\n                .sorted()\n\
    \                .collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp089xcm4p.java:15: error: cannot find symbol\n        return numbers.split(\"\
    \ \").stream()\n                                 ^\n  symbol:   method stream()\n\
    \  location: class String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011601
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Write your code here\n        Set<String> set = new LinkedHashSet<>();\n\
    \        String[] splitted = numbers.split(\" \");\n        for (String s : splitted)\
    \ {\n            set.add(s);\n        }\n        Arrays.sort(splitted, new Comparator<String>()\
    \ {\n            public int compare(String a, String b) {\n                return\
    \ Integer.compare(Integer.parseInt(a), Integer.parseInt(b));\n            }\n\
    \        });\n        StringBuilder sortedStringBuilder = new StringBuilder();\n\
    \        for (String string : splitted) {\n            sortedStringBuilder.append(string);\n\
    \        }\n        return sortedStringBuilder.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"five\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem$1.compare(tmpg4ibautj.java:23)\n\tat Problem$1.compare(tmpg4ibautj.java:21)\n\
    \tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\t\
    at java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat Problem.sortNumbers(tmpg4ibautj.java:21)\n\tat Problem.main(tmpg4ibautj.java:35)\n"
  stdout: ''
  timestamp: 1660011602
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Initialize variables we'll use for sorting and manipulating the\
    \ string\n        final String spaces = \"\\\\s+\";\n        final String zeroes\
    \ = \"0+\";\n        int min = Integer.MAX_VALUE;\n        int max = 0;\n    \
    \    \n        // Split the string into a list of strings of numbers and spaces\n\
    \        List<String> list = Arrays.asList(numbers.split(spaces));\n        \n\
    \        // Scan the list to find the minimum and maximum\n        for (String\
    \ num : list) {\n            min = Math.min(Integer.parseInt(num), min);\n   \
    \         max = Math.max(Integer.parseInt(num), max);\n        }\n\n        //\
    \ Scan the list again to output the numbers sorted\n        for (String num :\
    \ list) {\n            \n            // Convert the string to a number so that\
    \ we can compare the numbers\n            int num = Integer.parseInt(num);\n \
    \           \n            // If the number is greater than our minimum then move\
    \ it to the front\n            if (num > min) {\n                \n          \
    \      // Create a temporary string and append the number to the front\n     \
    \           String temp = num;\n                temp = temp + spaces.substring(temp.indexOf(zeroes));\n\
    \                \n                // Append the temporary string to the end\n\
    \                temp = temp + spaces.substring(temp.indexOf(spaces), temp.lastIndexOf(spaces));\n\
    \                \n                // Append the temporary string to the beginning\
    \ of the sorted list\n                num += spaces.substring(temp.indexOf(zeroes));\n\
    \                list = Arrays.asList(num + spaces);\n            }\n        \
    \    \n            // If the number is less than our maximum then move it to the\
    \ end\n            if (num < max) {\n                \n                // Create\
    \ a temporary string and append the number to the end\n                String\
    \ temp = num;\n                temp = temp + spaces.substring(temp.lastIndexOf(zeroes));\n\
    \                \n                // Append the temporary string to the end\n\
    \                temp = temp + spaces.substring(temp.indexOf(spaces), temp.lastIndexOf(spaces));\n\
    \                \n                // Append the temporary string to the beginning\
    \ of the sorted list\n                num += spaces.substring(temp.lastIndexOf(zeroes));\n\
    \                list = Arrays.asList(num + spaces);\n            }\n        }\n\
    \        \n        // Convert the list to a String and return it\n        return\
    \ String.join(\" \", list);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95i0ipvu.java:34: error: variable num is already defined in method\
    \ sortNumbers(String)\n            int num = Integer.parseInt(num);\n        \
    \        ^\n/tmp/tmp95i0ipvu.java:34: error: incompatible types: int cannot be\
    \ converted to String\n            int num = Integer.parseInt(num);\n        \
    \                               ^\n/tmp/tmp95i0ipvu.java:40: error: incompatible\
    \ types: int cannot be converted to String\n                String temp = num;\n\
    \                              ^\n/tmp/tmp95i0ipvu.java:47: error: incompatible\
    \ types: String cannot be converted to int\n                num += spaces.substring(temp.indexOf(zeroes));\n\
    \                                       ^\n/tmp/tmp95i0ipvu.java:55: error: incompatible\
    \ types: int cannot be converted to String\n                String temp = num;\n\
    \                              ^\n/tmp/tmp95i0ipvu.java:62: error: incompatible\
    \ types: String cannot be converted to int\n                num += spaces.substring(temp.lastIndexOf(zeroes));\n\
    \                                       ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1660011603
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, String> map = new TreeMap<>();\n        Arrays.stream(numbers.split(\"\
    \ \"))\n            .forEach(s -> map.put(s, s));\n        Set<String> keys =\
    \ map.keySet();\n        StringBuilder sb = new StringBuilder();\n        Arrays.stream(keys)\n\
    \            .sorted()\n            .forEach(k -> sb.append(map.get(k)).append(\"\
    \ \"));\n        return sb.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9l2sjs2s.java:20: error: no suitable method found for stream(Set<String>)\n\
    \        Arrays.stream(keys)\n              ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<String> cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; Set<String> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; Set<String> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; Set<String> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011603
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        \n        // Split input string into words\n        String[] numberWords\
    \ = numbers.split(\"\\\\s+\");\n        \n        // Convert each word into an\
    \ integer value\n        int[] numberWordsAsInts = IntStream.of(numberWords).map(x\
    \ -> {\n            try {\n                return Integer.parseInt(x);\n     \
    \       } catch (NumberFormatException nfe) {\n                throw new IllegalArgumentException(\"\
    Invalid string format for number: \" + x);\n            }\n        }).toArray();\n\
    \        \n        // Sort numberWordsAsInts\n        Arrays.sort(numberWordsAsInts);\n\
    \        \n        // Create output string from sorted numbers\n        return\
    \ IntStream.of(numberWordsAsInts)\n                        .mapToObj(x -> String.valueOf(x))\n\
    \                        .collect(Collectors.joining(\" \"));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnep4m25n.java:20: error: no suitable method found for of(String[])\n\
    \        int[] numberWordsAsInts = IntStream.of(numberWords).map(x -> {\n    \
    \                                       ^\n    method IntStream.of(int) is not\
    \ applicable\n      (argument mismatch; String[] cannot be converted to int)\n\
    \    method IntStream.of(int...) is not applicable\n      (varargs mismatch; String[]\
    \ cannot be converted to int)\n1 error\n"
  stdout: ''
  timestamp: 1660011603
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> ints = new ArrayList<>();\n        Arrays.stream(numbers.split(\"\
    \ \")).map(s -> {\n            try {\n                return Integer.parseInt(s);\n\
    \            } catch (NumberFormatException e) {\n                return null;\n\
    \            }\n        }).filter(Objects::nonNull).forEach(i -> ints.add(i));\n\
    \        ints.stream().sorted().map(Integer::toString).collect(Collectors.toList()).forEach(System.out::print);\n\
    \        return \"(\"+ints.toString()+\")\";\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw6vn862w.java:23: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        ints.stream().sorted().map(Integer::toString).collect(Collectors.toList()).forEach(System.out::print);\n\
    \                                  ^\n    (argument mismatch; invalid method reference\n\
    \      reference to toString is ambiguous\n        both method toString(int) in\
    \ Integer and method toString() in Integer match)\n  where R,T are type-variables:\n\
    \    R extends Object declared in method <R>map(Function<? super T,? extends R>)\n\
    \    T extends Object declared in interface Stream\n1 error\n"
  stdout: ''
  timestamp: 1660011603
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Split up our string into space-delimited words\n        String[]\
    \ numberArray = numbers.split(\"\\\\s+\");\n\n        // Create a new List to\
    \ store our new ArrayList in and sort them from\n        // smallest to largest\n\
    \        List<String> sortedNumbersList = new ArrayList<>(numberArray.length);\n\
    \        for (String number : numberArray) {\n            String number = number.trim();\n\
    \            sortedNumbersList.add(number);\n        }\n\n        // Sort our\
    \ sorted list using our sorted list comparator \n        Collections.sort(sortedNumbersList,\
    \ new Comparator<String>() {\n            public int compare(String a, String\
    \ b) {\n                return Integer.valueOf(a).compareTo(Integer.valueOf(b));\n\
    \            }\n        });\n\n        // Convert our list to a String and return\n\
    \        return String.join(\" \", sortedNumbersList);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmor41_71.java:22: error: variable number is already defined in\
    \ method sortNumbers(String)\n            String number = number.trim();\n   \
    \                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011603
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Implement this function\n        \n        List<String> numbersList\
    \ = new ArrayList<>();\n        numbersList.addAll(Arrays.asList(numbers.split(\"\
    \ \")));\n        Collections.sort(numbersList);\n        \n        StringBuilder\
    \ returnString = new StringBuilder();\n        for (String number : numbersList)\
    \ {\n            returnString.append(number);\n            returnString.append(\"\
    \ \");\n        }\n        \n        returnString.deleteCharAt(returnString.length()\
    \ - 1);\n        \n        return returnString.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj1isjblh.java:34)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        final List<String> numList = Arrays.asList(numbers.split(\"\\\\s+\"\
    ));\n        final List<String> sortedNumList = new ArrayList<String>();\n   \
    \     Collections.sort(numList);\n        sortedNumList.addAll(numList);\n   \
    \     return String.join(\" \", sortedNumList);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5t0r9lmd.java:24)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Create an object for the Comparator interface\n        Comparator\
    \ comp = new Comparator() {\n            @Override\n            public int compare(String\
    \ a, String b) {\n                try {\n                    double fa = Double.parseDouble(a);\n\
    \                    double fb = Double.parseDouble(b);\n                    double\
    \ diff = fa - fb;\n                    return Double.toString(diff);\n       \
    \         } catch (NumberFormatException ex) {\n                    throw new\
    \ IllegalArgumentException(\"Input not a number: \" + a + \" or \" + b);\n   \
    \             }\n            }\n        };\n        // Sort the numbers by descending\
    \ order\n        Arrays.sort(numbers.split(\" \"), comp);\n        // Construct\
    \ a new string from the sorted numbers\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String num : numbers.split(\" \")) {\n            sb.append(num).append(\"\
    \ \");\n        }\n        return sb.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9bghfnb4.java:16: error: <anonymous Problem$1> is not abstract\
    \ and does not override abstract method compare(Object,Object) in Comparator\n\
    \        Comparator comp = new Comparator() {\n                              \
    \             ^\n/tmp/tmp9bghfnb4.java:17: error: method does not override or\
    \ implement a method from a supertype\n            @Override\n            ^\n\
    /tmp/tmp9bghfnb4.java:23: error: incompatible types: String cannot be converted\
    \ to int\n                    return Double.toString(diff);\n                \
    \                          ^\nNote: /tmp/tmp9bghfnb4.java uses unchecked or unsafe\
    \ operations.\nNote: Recompile with -Xlint:unchecked for details.\n3 errors\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> list = Arrays.stream(numbers.split(\" \"))\n      \
    \      .map(Integer::valueOf)\n            .collect(toList());\n\n        Collections.sort(list);\n\
    \n        return list.stream()\n            .map(x -> x + \" \")\n           \
    \ .collect(Collectors.joining(\" \"));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_q715vvg.java:17: error: cannot find symbol\n            .collect(toList());\n\
    \                     ^\n  symbol:   method toList()\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011603
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> numberList = Arrays.stream(numbers.split(\"\\\\s\"\
    )).map(Integer::valueOf).collect(Collectors.toList());\n        Collections.sort(numberList);\n\
    \        return String.join(\" \", numberList);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppqjypbx1.java:17: error: no suitable method found for join(String,List<Integer>)\n\
    \        return String.join(\" \", numberList);\n                     ^\n    method\
    \ String.join(CharSequence,CharSequence...) is not applicable\n      (varargs\
    \ mismatch; List<Integer> cannot be converted to CharSequence)\n    method String.join(CharSequence,Iterable<?\
    \ extends CharSequence>) is not applicable\n      (argument mismatch; List<Integer>\
    \ cannot be converted to Iterable<? extends CharSequence>)\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011603
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberSplit = numbers.split(\"\\\\s\");\n        List<String>\
    \ numberList = new ArrayList<String>();\n        for (String number : numberSplit)\
    \ {\n            if (number.equalsIgnoreCase(\"nine\")) {\n                numberList.add(\"\
    nine\");\n            } else {\n                numberList.add(number);\n    \
    \        }\n        }\n        Collections.sort(numberList);\n        String result\
    \ = \"\";\n        for (String number : numberList) {\n            if (number.equalsIgnoreCase(\"\
    nine\")) {\n                result += \"nine\";\n            } else {\n      \
    \          result += number;\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc9haraq7.java:38)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        ArrayList result = new ArrayList();\n        String[] input = numbers.split(\"\
    \ \");\n        Arrays.sort(input);\n        for (String s : input) {\n      \
    \      result.add(s);\n        }\n        String sortedNumbers = \"\";\n     \
    \   for (String s : result) {\n            sortedNumbers = sortedNumbers + s +\
    \ \" \";\n        }\n        return sortedNumbers;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiauqmhtr.java:22: error: incompatible types: Object cannot be converted\
    \ to String\n        for (String s : result) {\n                        ^\nNote:\
    \ /tmp/tmpiauqmhtr.java uses unchecked or unsafe operations.\nNote: Recompile\
    \ with -Xlint:unchecked for details.\n1 error\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] arrNumbers = numbers.split(\" \");\n        Arrays.sort(arrNumbers);\n\
    \        return String.join(\" \", arrNumbers);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8qhh33up.java:22)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] arr = new int[numbers.length()];\n        for (int i = 0; i\
    \ < numbers.length(); i++) {\n            arr[i] = Integer.valueOf(numbers.substring(i,\
    \ i + 1));\n        }\n        Arrays.sort(arr);\n        StringBuilder builder\
    \ = new StringBuilder();\n        for (int i = 0; i < arr.length; i++) {\n   \
    \         builder.append(arr[i]);\n            if (i != arr.length - 1) {\n  \
    \              builder.append(\" \");\n            }\n        }\n        return\
    \ builder.toString();\n    }\n    public static void main(String[] args) {\n \
    \   assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"t\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.valueOf(Integer.java:999)\n\
    \tat Problem.sortNumbers(tmpq_rri0tu.java:17)\n\tat Problem.main(tmpq_rri0tu.java:31)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Write your code here\n        char[] charArray = numbers.toCharArray();\n\
    \        Arrays.sort(charArray);\n        return new String(charArray);\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkthayv_d.java:22)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int nums = Integer.parseInt(numbers);\n        List<Integer> list\
    \ = new ArrayList<Integer>();\n        for(int i = 0; i <= nums; i++) {\n    \
    \        list.add(new Integer(i));\n        }\n        Collections.sort(list);\n\
    \        return list.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmpa5baacek.java:15)\n\tat Problem.main(tmpa5baacek.java:24)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        ArrayList<Integer> numbersInOrder = new ArrayList<Integer>();\n \
    \       StringBuilder result = new StringBuilder();\n\n        for (String number\
    \ : numbers.split(\"\\\\s+\")) {\n            if (isValidNumber(number)) {\n \
    \               numbersInOrder.add(Integer.valueOf(number));\n            }\n\
    \        }\n\n        Collections.sort(numbersInOrder);\n\n        for (Integer\
    \ number : numbersInOrder) {\n            result.append(number);\n           \
    \ result.append(' ');\n        }\n\n        return result.toString();\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5q0hdk3.java:19: error: cannot find symbol\n            if (isValidNumber(number))\
    \ {\n                ^\n  symbol:   method isValidNumber(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numbersSplit = numbers.split(\" \");\n        Map<String,\
    \ String> sortedNumbers = new LinkedHashMap<>();\n        for (int i = 0; i <\
    \ numbersSplit.length; i++) {\n            String num = (numbersSplit[i]).replaceAll(\"\
    \ \", \"\");\n            sortedNumbers.put(num, num);\n        }\n\n        List<String>\
    \ sortedNumbersList = sortedNumbers.entrySet().stream().sorted(Map.Entry.<String,\
    \ String> comparingByValue().reversed()).map(e -> e.getValue()).collect(Collectors.toList());\n\
    \        String result = \"\";\n        for (String num : sortedNumbersList) {\n\
    \            result += num + \" \";\n        }\n        return result.substring(0,\
    \ result.length() - 1);\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpav4iat4i.java:32)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] split = numbers.split(\" \");\n        Arrays.sort(split);\n\
    \        return Arrays.toString(split).replaceAll(\"\\\\[\", \"\").replaceAll(\"\
    \\\\]\",\"\");\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpde0a8alv.java:22)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        if (numbers == null || numbers.isEmpty()) {\n            return \"\
    \";\n        }\n\n        // Separate input string into three parts and parse\
    \ to integers\n        String[] numberStrings = numbers.split(\" \");\n      \
    \  int smallest = Integer.parseInt(numberStrings[0]);\n        int largest = Integer.parseInt(numberStrings[numberStrings.length\
    \ - 1]);\n        int largestIndex = numberStrings.length - 1;\n\n        // Build\
    \ the output string\n        StringBuilder sortedNumbers = new StringBuilder();\n\
    \        for (int i = 0; i < numberStrings.length; i++) {\n            if (i <\
    \ numberStrings.length - 1) {\n                if (numberStrings[i].compareTo(numberStrings[i\
    \ + 1]) > 0) {\n                    int temp = numberStrings[i];\n           \
    \         numberStrings[i] = numberStrings[i + 1];\n                    numberStrings[i\
    \ + 1] = temp;\n                }\n            }\n            sortedNumbers.append(numberStrings[i]).append(\"\
    \ \");\n        }\n\n        // Reverse the string\n        sortedNumbers.append(numberStrings[largestIndex]);\n\
    \        sortedNumbers.reverse();\n        return sortedNumbers.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpin7b_l1j.java:30: error: incompatible types: String cannot be converted\
    \ to int\n                    int temp = numberStrings[i];\n                 \
    \                           ^\n/tmp/tmpin7b_l1j.java:32: error: incompatible types:\
    \ int cannot be converted to String\n                    numberStrings[i + 1]\
    \ = temp;\n                                           ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        String sortedNums = Arrays.stream(nums).collect(Collectors.joining(\"\
    \ \"));\n        return sortedNums;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsu04z2co.java:23)\n"
  stdout: ''
  timestamp: 1660011604
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        return String.join(\" \", nums);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9l2doktw.java:22)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here\n        \n        ArrayList<String> nums = new\
    \ ArrayList<String>();\n        String result = \"\";\n        \n        String[]\
    \ numberSplit = numbers.split(\" \");\n        for (String s : numberSplit) {\n\
    \            if (s.length() > 4) {\n                nums.add(s);\n           \
    \ }\n        }\n        \n        Collections.sort(nums);\n        \n        for\
    \ (String s : nums) {\n            result += s + \" \";\n        }\n        \n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp877lr8nm.java:37)\n"
  stdout: ''
  timestamp: 1660011605
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberStrings = numbers.split(\" \");\n        Arrays.sort(numberStrings);\n\
    \        return numberStrings.join(\" \");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuwbmj5ni.java:17: error: cannot find symbol\n        return numberStrings.join(\"\
    \ \");\n                            ^\n  symbol:   method join(String)\n  location:\
    \ variable numberStrings of type String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011598
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        ArrayList<String> numbersList = Arrays.stream(numbers.split(\" \"\
    ))\n            .map(number -> new Integer(number))\n            .sorted()\n \
    \           .map(String::valueOf)\n            .collect(Collectors.toCollection(ArrayList::new));\n\
    \        return String.join(\" \", numbersList);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.<init>(Integer.java:1127)\n\
    \tat Problem.lambda$sortNumbers$0(tmpi7j_t72v.java:16)\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmpi7j_t72v.java:19)\n\tat Problem.main(tmpi7j_t72v.java:23)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numbersWithSpaces = numbers.split(\" \");\n        Arrays.sort(numbersWithSpaces);\n\
    \        return String.join(\" \", numbersWithSpaces);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz3450yi3.java:22)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        \n        numbers = numbers.replaceAll(\"\\\\s+\",\" \");\n     \
    \   int[] ints = new int[numbers.length()];\n        String[] nums = new String[numbers.length()];\n\
    \        \n        for(int i = 0; i < numbers.length(); i++) {\n            ints[i]\
    \ = Integer.parseInt(numbers[i].trim());\n            nums[i] = Integer.toString(ints[i]);\n\
    \        }\n        \n        Arrays.sort(nums);\n        \n        String sortedNumbers\
    \ = \"\";\n        \n        for(int i = 0; i < nums.length; i++) {\n        \
    \    sortedNumbers += nums[i] + \" \";\n        }\n        \n        for(int i\
    \ = 0; i < ints.length; i++) {\n            sortedNumbers += ints[i] + \" \";\n\
    \        }\n        \n        for(int i = 0; i < ints.length; i++) {\n       \
    \     sortedNumbers += \" \";\n        }\n        \n        System.out.println(sortedNumbers);\n\
    \        return sortedNumbers;\n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4x3l5bmh.java:21: error: array required, but String found\n   \
    \         ints[i] = Integer.parseInt(numbers[i].trim());\n                   \
    \                           ^\n1 error\n"
  stdout: ''
  timestamp: 1660011605
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numbersArr = numbers.split(\"\\\\s+\");\n        Arrays.sort(numbersArr);\n\
    \        StringBuilder resultBuilder = new StringBuilder();\n        for (String\
    \ num : numbersArr) {\n            resultBuilder.append(num).append(\" \");\n\
    \        }\n        return resultBuilder.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvffmpsbx.java:24)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] nums = new int[numbers.length()];\n        String[] splitNumbers\
    \ = numbers.split(\" \");\n        Arrays.fill(nums, Integer.parseInt(splitNumbers[0]));\n\
    \        for (int i = 1; i < splitNumbers.length; i++) {\n            if (nums[i]\
    \ < Integer.parseInt(splitNumbers[i])) {\n                for (int j = i; j >\
    \ 0; j--) {\n                    swap(nums, j, j-1);\n                }\n    \
    \        }\n        }\n        return Arrays.stream(nums).sorted().mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp36ue9ke_.java:21: error: cannot find symbol\n                 \
    \   swap(nums, j, j-1);\n                    ^\n  symbol:   method swap(int[],int,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> list = Arrays.stream(numbers.split(\" \")).map(Number::valueOf).sorted().collect(Collectors.toList());\n\
    \        List<String> stringList = new ArrayList<>(list);\n        return stringList.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcezl7le0.java:15: error: invalid method reference\n        List<String>\
    \ list = Arrays.stream(numbers.split(\" \")).map(Number::valueOf).sorted().collect(Collectors.toList());\n\
    \                                                                  ^\n  cannot\
    \ find symbol\n    symbol:   method valueOf()\n    location: class Number\n1 error\n"
  stdout: ''
  timestamp: 1660011605
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Integer[] intArray = numbers.split(\" \").map(Integer::valueOf).filter(a\
    \ -> a > 0).sorted().toArray(Integer[]::new);\n        return String.join(\" \"\
    , Arrays.stream(intArray).map(a -> String.valueOf(a)).collect(Collectors.toList()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp71qa0br3.java:15: error: cannot find symbol\n        Integer[]\
    \ intArray = numbers.split(\" \").map(Integer::valueOf).filter(a -> a > 0).sorted().toArray(Integer[]::new);\n\
    \                                               ^\n  symbol:   method map(Integer::valueOf)\n\
    \  location: class String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        if (numbers == null || numbers.isEmpty()) {\n            return numbers;\n\
    \        }\n        List<String> sortedNumbers = new ArrayList<>();\n        Collections.sort(numbers.split(\"\
    \ \"));\n        for (String number : numbers.split(\" \")) {\n            sortedNumbers.add(number);\n\
    \        }\n        return sortedNumbers.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmplwufatrd.java:19: error: no suitable method found for sort(String[])\n\
    \        Collections.sort(numbers.split(\" \"));\n                   ^\n    method\
    \ Collections.<T#1>sort(List<T#1>) is not applicable\n      (cannot infer type-variable(s)\
    \ T#1\n        (argument mismatch; String[] cannot be converted to List<T#1>))\n\
    \    method Collections.<T#2>sort(List<T#2>,Comparator<? super T#2>) is not applicable\n\
    \      (cannot infer type-variable(s) T#2\n        (actual and formal argument\
    \ lists differ in length))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Comparable<? super T#1> declared in method <T#1>sort(List<T#1>)\n    T#2 extends\
    \ Object declared in method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] tokens = numbers.split(\"\\\\s+\");\n        Arrays.sort(tokens);\n\
    \        return String.join(\" \", tokens);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8sbgq_pz.java:22)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        if (numbers.equals(\"\")) {\n            return \"\";\n        }\n\
    \        if (numbers.equals(\"zero\")) {\n            return \"zero\";\n     \
    \   }\n        int n = numbers.length();\n        String sorted = \"\";\n    \
    \    String[] strs = numbers.split(\" \");\n        Arrays.sort(strs);\n     \
    \   for (int i = 0; i < n; i++) {\n            sorted += strs[i] + \" \";\n  \
    \      }\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.sortNumbers(tmp0m35g_dp.java:26)\n\
    \tat Problem.main(tmp0m35g_dp.java:32)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] arr = numbers.split(\" \");\n        Arrays.sort(arr);\n\
    \        return Arrays.toString(arr);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_c3ceorl.java:20)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> map = new HashMap<>();\n        numbers.split(\"\
    \ \").stream().map(Integer::parseInt).forEach(x -> map.put(x, map.get(x) == null\
    \ ? 1 : map.get(x) + 1));\n        String[] sortedNumbers = map.entrySet().stream().sorted((e1,\
    \ e2) -> Integer.compare(e2.getValue(), e1.getValue())).map(e -> e.getKey()).collect(Collectors.toList()).toArray(new\
    \ String[0]);\n        return String.join(\" \", sortedNumbers);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphdwvdwre.java:16: error: cannot find symbol\n        numbers.split(\"\
    \ \").stream().map(Integer::parseInt).forEach(x -> map.put(x, map.get(x) == null\
    \ ? 1 : map.get(x) + 1));\n                          ^\n  symbol:   method stream()\n\
    \  location: class String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Arrays.sort(numbers);\n        return numbers;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpve59dqev.java:15: error: no suitable method found for sort(String)\n\
    \        Arrays.sort(numbers);\n              ^\n    method Arrays.sort(int[])\
    \ is not applicable\n      (argument mismatch; String cannot be converted to int[])\n\
    \    method Arrays.sort(long[]) is not applicable\n      (argument mismatch; String\
    \ cannot be converted to long[])\n    method Arrays.sort(short[]) is not applicable\n\
    \      (argument mismatch; String cannot be converted to short[])\n    method\
    \ Arrays.sort(char[]) is not applicable\n      (argument mismatch; String cannot\
    \ be converted to char[])\n    method Arrays.sort(byte[]) is not applicable\n\
    \      (argument mismatch; String cannot be converted to byte[])\n    method Arrays.sort(float[])\
    \ is not applicable\n      (argument mismatch; String cannot be converted to float[])\n\
    \    method Arrays.sort(double[]) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to double[])\n    method Arrays.sort(Object[]) is\
    \ not applicable\n      (argument mismatch; String cannot be converted to Object[])\n\
    \    method Arrays.<T#1>sort(T#1[],Comparator<? super T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Use an array to hold the numbers\n        int [] arr = new int[numbers.length()];\n\
    \n        // Use a StringBuilder instance to hold a String representing the\n\
    \        // sorted numbers\n        StringBuilder str = new StringBuilder(numbers);\n\
    \n        // Parse the string\n        for (int i=0; i<numbers.length(); i++)\
    \ {\n            arr[i] = Integer.parseInt(numbers.substring(i,i+1));\n      \
    \  }\n\n        // Sort the array\n        Arrays.sort(arr);\n\n        // Convert\
    \ the array to a string again and return the string\n        return str.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"t\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmpmueq_5nj.java:24)\n\tat Problem.main(tmpmueq_5nj.java:35)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Stack<String> list = new Stack<String>();\n        // Split the input\
    \ string on the spaces.\n        String[] nums = numbers.split(\"\\\\s+\");\n\n\
    \        // Sort the numbers from smallest to largest.\n        Arrays.sort(nums);\n\
    \n        // Convert each number to a String and store it in the stack.\n    \
    \    for (String s : nums)\n            list.push(s);\n\n        // Convert each\
    \ number from String form back to a number and print.\n        for (String s :\
    \ list)\n            System.out.print(Integer.parseInt(s) + \" \");\n\n      \
    \  return list.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmpax_ujzt2.java:28)\n\tat Problem.main(tmpax_ujzt2.java:33)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        numbers = numbers.replaceAll(\"\\\\s+\", \" \").trim();\n       \
    \ Set<Integer> set = new LinkedHashSet<>();\n        for (String number : numbers.split(\"\
    \ \")) {\n            Integer value = Integer.parseInt(number);\n            set.add(value);\n\
    \        }\n        Collections.sort(set);\n        return set.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpoaxwi1xh.java:21: error: no suitable method found for sort(Set<Integer>)\n\
    \        Collections.sort(set);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<Integer> cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Get a sorted list of numbers starting at zero.\n        String[]\
    \ nums = numbers.split(\" \");\n        Arrays.sort(nums);\n        String numsStr\
    \ = String.join(\" \", nums);\n        return numsStr;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpba45lguv.java:24)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here!\n        String[] split = numbers.split(\" \"\
    );\n        Arrays.sort(split);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (String s : split)\n            sb.append(s).append(\" \");\n   \
    \     return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8ybsl_52.java:24)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        return String.join(\" \", nums);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9l2doktw.java:22)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return Stream.of(numbers.split(\" \")).map(String::trim)\n      \
    \          .map(String::toInt)\n                .sorted().map(i -> String.format(\"\
    %d\", i))\n                .collect(Collectors.joining(\" \"));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5r0p81_w.java:16: error: invalid method reference\n           \
    \     .map(String::toInt)\n                     ^\n  cannot find symbol\n    symbol:\
    \   method toInt()\n    location: class String\n1 error\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String newNumbers = \"\";\n        // TODO: write this method\n \
    \       char[] chars = numbers.toCharArray();\n        Arrays.sort(chars);\n \
    \       StringBuilder builder = new StringBuilder();\n        for (int i=0; i<chars.length;\
    \ i++) {\n            builder.append(chars[i]);\n        }\n        return builder.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuxuq4jfo.java:27)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberArray = numbers.split(\"\\\\s+\");\n        Arrays.sort(numberArray);\n\
    \        return IntStream.range(0, numberArray.length)\n                .mapToObj(i\
    \ -> numberArray[i])\n                .collect(Collectors.joining(\" \"));\n \
    \   }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplc6hy7v5.java:24)\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Use toCharArray and Arrays#sort to sort them in descending order.\n\
    \        char[] numChars = numbers.toCharArray();\n        Arrays.sort(numChars);\n\
    \        return String.valueOf(numChars);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_g7dobb7.java:22)\n"
  stdout: ''
  timestamp: 1660011607
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] parts = numbers.split(\" \");\n        int min = Integer.parseInt(parts[0]);\n\
    \        int max = Integer.parseInt(parts[parts.length - 1]);\n        List<String>\
    \ numbersList = new ArrayList<String>();\n        for (int i = 0; i < parts.length\
    \ - 1; i++) {\n            numbersList.add(parts[i]);\n        }\n        Collections.sort(numbersList);\n\
    \        return numbersList.stream().collect(Collectors.joining(\" \"));\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmpobqsy94v.java:16)\n\tat Problem.main(tmpobqsy94v.java:26)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberArray = numbers.split(\" \");\n        Arrays.sort(numberArray);\n\
    \        String newNumbers = numberArray[0] + \" \" + numberArray[1] + \" \" +\
    \ numberArray[2];\n        return newNumbers;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.sortNumbers(tmp8e80dy88.java:17)\n\
    \tat Problem.main(tmp8e80dy88.java:21)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberArray = numbers.split(\" \");\n        Arrays.sort(numberArray);\n\
    \        return String.join(\" \", numberArray);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpilsskbyp.java:22)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List list = Arrays.asList(numbers.split(\" \"));\n        list.sort(Comparator.naturalOrder());\n\
    \        return String.join(\" \", list);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpskoffk4b.java:22)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        System.out.println(\"Incoming numbers: \" + numbers);\n        final\
    \ String[] numberParts = numbers.split(\" \");\n        final ArrayList sortedNumbers\
    \ = new ArrayList();\n        final ArrayList sortedNumbersPart = new ArrayList();\n\
    \        for(final String numberPart : numberParts){\n            int number =\
    \ Integer.parseInt(numberPart);\n            if(number < 9){\n               \
    \ sortedNumbers.add(number);\n            }else{\n                sortedNumbersPart.add(number);\n\
    \            }\n        }\n        System.out.println(\"Outgoing numbers: \" +\
    \ sortedNumbersPart.stream().collect(Collectors.joining()));\n        return sortedNumbersPart.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4rktg1o3.java:28: error: incompatible types: Object cannot be converted\
    \ to String\n        return sortedNumbersPart.stream().collect(Collectors.joining(\"\
    \ \"));\n                                                 ^\nNote: /tmp/tmp4rktg1o3.java\
    \ uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked\
    \ for details.\n1 error\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> numberList = Arrays.stream(numbers.split(\"\\\\s+\"\
    )).map(Integer::parseInt).sorted().collect(Collectors.toList());\n        List<String>\
    \ words = new ArrayList<String>();\n        numberList.stream().map(n -> {\n \
    \           String word = String.valueOf(n);\n            if (word.length() ==\
    \ 1)\n                word = String.valueOf('0' + n);\n            if (word.length()\
    \ > 1)\n                word = String.valueOf('0' + n) + word;\n            return\
    \ word;\n        }).forEach(word -> words.add(word));\n        Collections.sort(words);\n\
    \        return words.stream().collect(Collectors.joining(\" \"));\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmpbadwhhum.java:15)\n\tat Problem.main(tmpbadwhhum.java:29)\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Extract the digits from numbers and convert to ints.\n       \
    \ String[] digits = numbers.split(\" \");\n        List<Integer> intDigits = new\
    \ ArrayList<>(digits.length);\n        for (String digit : digits)\n         \
    \   intDigits.add(Integer.parseInt(digit));\n        // Sort the ints.\n     \
    \   intDigits.sort();\n        // Convert the sorted ints to strings.\n      \
    \  StringBuilder sb = new StringBuilder();\n        for (Integer digit : intDigits)\n\
    \            sb.append(digit).append(\" \");\n        return sb.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp75enzh_9.java:21: error: method sort in interface List<E> cannot\
    \ be applied to given types;\n        intDigits.sort();\n                 ^\n\
    \  required: Comparator<? super Integer>\n  found:    no arguments\n  reason:\
    \ actual and formal argument lists differ in length\n  where E is a type-variable:\n\
    \    E extends Object declared in interface List\n1 error\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        return String.join(\" \", nums);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9l2doktw.java:22)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberStrings = numbers.split(\" \");\n        numberStrings.sort();\n\
    \        return String.join(\" \", numberStrings);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsca1w731.java:16: error: cannot find symbol\n        numberStrings.sort();\n\
    \                     ^\n  symbol:   method sort()\n  location: variable numberStrings\
    \ of type String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> sortedNumbers = Arrays.stream(numbers.split(\" \")).mapToInt(Integer::valueOf).sorted().boxed().collect(Collectors.toList());\n\
    \        return sortedNumbers.stream().map(n -> String.valueOf(n)).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.valueOf(Integer.java:999)\n\
    \tat java.base/java.util.stream.ReferencePipeline$4$1.accept(ReferencePipeline.java:214)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmpvi4qvofu.java:15)\n\tat Problem.main(tmpvi4qvofu.java:19)\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> list = Arrays.stream(numbers.split(\" \")).map(s ->\
    \ s.toUpperCase()).sorted().collect(toList());\n        return list.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbabzuhff.java:15: error: cannot find symbol\n        List<String>\
    \ list = Arrays.stream(numbers.split(\" \")).map(s -> s.toUpperCase()).sorted().collect(toList());\n\
    \                                                                            \
    \                             ^\n  symbol:   method toList()\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberStrings = numbers.split(\" \");\n        int[] numbersInt\
    \ = new int[numberStrings.length];\n        for (int i=0; i<numberStrings.length;\
    \ i++) {\n            numbersInt[i] = Integer.parseInt(numberStrings[i]);\n  \
    \      }\n        Arrays.sort(numbersInt);\n        StringBuilder sb = new StringBuilder(numbers);\n\
    \        for (int i=0; i<numberStrings.length; i++) {\n            sb.append(numbersInt[i]);\n\
    \            sb.append(\" \");\n        }\n        return sb.toString();\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmp6_of1opn.java:18)\n\tat Problem.main(tmp6_of1opn.java:29)\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Your code here.\n        List<Integer> numberList = Arrays.stream(numbers.split(\"\
    \ \")).map(Integer::valueOf).collect(Collectors.toList());\n        Collections.sort(numberList);\n\
    \        return IntStream.range(0, numberList.size()).mapToObj(i -> String.valueOf(numberList.get(i))).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.valueOf(Integer.java:999)\n\
    \tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmp4qm1roei.java:16)\n\tat Problem.main(tmp4qm1roei.java:21)\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // TODO: implement\n        return \"\";\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg7s9errl.java:20)\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> numbersList = new ArrayList<Integer>();\n        for\
    \ (String number : numbers.split(\" \")) {\n            numbersList.add(Integer.parseInt(number));\n\
    \        }\n        Collections.sort(numbersList);\n        return numbersList.stream().map(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6e7nn3d0.java:20: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        return numbersList.stream().map(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n                                       ^\n    (argument mismatch; invalid\
    \ method reference\n      reference to toString is ambiguous\n        both method\
    \ toString(int) in Integer and method toString() in Integer match)\n  where R,T\
    \ are type-variables:\n    R extends Object declared in method <R>map(Function<?\
    \ super T,? extends R>)\n    T extends Object declared in interface Stream\n1\
    \ error\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] arrayOfNumbers = numbers.split(\" \");\n        Arrays.sort(arrayOfNumbers);\n\
    \        return String.join(\" \", arrayOfNumbers);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl3s5q0gk.java:22)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] split = numbers.split(\" \");\n        Arrays.sort(split);\n\
    \        StringBuilder ret = new StringBuilder();\n        for (String s : split)\
    \ {\n            ret.append(s + \" \");\n        }\n        return ret.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfswuyyy_.java:24)\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        ArrayDeque<String> numberList = new ArrayDeque<>();\n        for\
    \ (String number : numbers.split(\" \")) {\n            if (number.length() >\
    \ 0) {\n                numberList.add(number);\n            }\n        }\n\n\
    \        Collections.sort(numberList, Comparator.comparing(String::length));\n\
    \        return String.join(\" \", numberList);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvqefe7uz.java:22: error: no suitable method found for sort(ArrayDeque<String>,Comparator<String>)\n\
    \        Collections.sort(numberList, Comparator.comparing(String::length));\n\
    \                   ^\n    method Collections.<T#1>sort(List<T#1>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (actual and formal argument\
    \ lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; ArrayDeque<String> cannot be converted to List<T#2>))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1>\
    \ declared in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in\
    \ method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] tokens = numbers.split(\"\\\\s+\");\n        Arrays.sort(tokens);\n\
    \        return String.join(\" \", tokens);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8sbgq_pz.java:22)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        return String.join(\" \", nums);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9l2doktw.java:22)\n"
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] arr = new int[numbers.length()];\n        int n = numbers.length();\n\
    \        for (int i = 0; i < n; i++) {\n            arr[i] = Integer.parseInt(numbers.substring(i,\
    \ i + 1));\n        }\n        Arrays.sort(arr);\n        String res = \"\";\n\
    \        for (int i = 0; i < n; i++) {\n            res += arr[i];\n        }\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"t\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmpgtum9n3w.java:18)\n\tat Problem.main(tmpgtum9n3w.java:29)\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        if (numbers == null || numbers.isEmpty()) {\n            throw new\
    \ IllegalArgumentException(\"sortNumbers: invalid input\");\n        }\n     \
    \   Set<String> set = new HashSet<String>(Arrays.asList(numbers.split(\" \")));\n\
    \        \n        // Set is sorted\n        if (!set.isEmpty()) {\n         \
    \   Collections.sort(set);\n            StringBuilder builder = new StringBuilder();\n\
    \            for (String item : set) {\n                builder.append(item).append(\"\
    \ \");\n            }\n            return builder.toString();\n        }\n   \
    \     \n        // Set is not sorted\n        String[] setArr = new String[set.size()];\n\
    \        \n        int i = 0;\n        for (String item : set) {\n           \
    \ setArr[i++] = item;\n        }\n        \n        Arrays.sort(setArr);\n   \
    \     \n        StringBuilder builder = new StringBuilder();\n        for (int\
    \ i = 0; i < setArr.length; i++) {\n            builder.append(setArr[i]).append(\"\
    \ \");\n        }\n        return builder.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5afp6hn.java:22: error: no suitable method found for sort(Set<String>)\n\
    \            Collections.sort(set);\n                       ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; Set<String> cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n/tmp/tmpu5afp6hn.java:41: error: variable i is already defined\
    \ in method sortNumbers(String)\n        for (int i = 0; i < setArr.length; i++)\
    \ {\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> list = IntStream.range(0, 9).boxed().map(i -> Integer.valueOf(numbers.split(\"\
    \ \").stream().skip(i * 3).findFirst().get()))\n                .collect(Collectors.toList());\n\
    \        return list.stream().map(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgebxgsbj.java:15: error: cannot find symbol\n        List<Integer>\
    \ list = IntStream.range(0, 9).boxed().map(i -> Integer.valueOf(numbers.split(\"\
    \ \").stream().skip(i * 3).findFirst().get()))\n                             \
    \                                                                         ^\n\
    \  symbol:   method stream()\n  location: class String[]\n/tmp/tmpgebxgsbj.java:16:\
    \ error: incompatible types: inference variable T has incompatible bounds\n  \
    \              .collect(Collectors.toList());\n                        ^\n   \
    \ equality constraints: Integer\n    lower bounds: Object\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>toList()\n/tmp/tmpgebxgsbj.java:17:\
    \ error: incompatible types: cannot infer type-variable(s) R\n        return list.stream().map(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n                                ^\n    (argument mismatch; invalid method\
    \ reference\n      reference to toString is ambiguous\n        both method toString(int)\
    \ in Integer and method toString() in Integer match)\n  where R,T are type-variables:\n\
    \    R extends Object declared in method <R>map(Function<? super T,? extends R>)\n\
    \    T extends Object declared in interface Stream\n3 errors\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Write your implementation here\n        int count = new TreeSet<String>(Arrays.asList(numbers.split(\"\
    \ \"))).size();\n        char[] numArr = numbers.toCharArray();\n        Arrays.sort(numArr);\n\
    \        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<count-1;i++)\
    \ {\n            sb.append(numArr[i]);\n        }\n        sb.append(numArr[count-1]);\n\
    \        return sb.toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 0 out of bounds for length 0\n\tat Problem.sortNumbers(tmphkv4a6rw.java:23)\n\
    \tat Problem.main(tmphkv4a6rw.java:27)\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Split input string into array\n        String[] numberStrings\
    \ = numbers.split(\"\\\\s+\");\n        // Collect list of integers from string\n\
    \        List<Integer> numbersList = new ArrayList<>();\n        for (String numberString\
    \ : numberStrings)\n            numbersList.add(Integer.parseInt(numberString));\n\
    \n        // Sort numbers\n        Collections.sort(numbersList);\n\n        //\
    \ Return sorted string\n        return numbersList.stream().map(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptd5skbvv.java:26: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        return numbersList.stream().map(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n                                       ^\n    (argument mismatch; invalid\
    \ method reference\n      reference to toString is ambiguous\n        both method\
    \ toString(int) in Integer and method toString() in Integer match)\n  where R,T\
    \ are type-variables:\n    R extends Object declared in method <R>map(Function<?\
    \ super T,? extends R>)\n    T extends Object declared in interface Stream\n1\
    \ error\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Split string\n        String[] numbersArray = numbers.trim().split(\"\
    \\\\s+\");\n        // Sort array\n        Arrays.sort(numbersArray);\n      \
    \  // Combine array back into string\n        String sorted = String.join(\",\
    \ \", numbersArray);\n        return sorted;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpajni0nzd.java:26)\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return numbers.replaceAll(\"\\\\D+\", \" \").trim().replaceAll(\"\
    \\\\s+\", \" \").replaceAll(\"\\\\s\", \"\").split(\" \").stream()\n         \
    \           .sorted(Comparator.comparingInt(Integer::parseInt))\n            \
    \        .map(Object::toString)\n                    .collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpljijok0j.java:15: error: cannot find symbol\n        return numbers.replaceAll(\"\
    \\\\D+\", \" \").trim().replaceAll(\"\\\\s+\", \" \").replaceAll(\"\\\\s\", \"\
    \").split(\" \").stream()\n                                                  \
    \                                                            ^\n  symbol:   method\
    \ stream()\n  location: class String[]\n/tmp/tmpljijok0j.java:16: error: incompatible\
    \ types: cannot infer type-variable(s) T\n                    .sorted(Comparator.comparingInt(Integer::parseInt))\n\
    \                                                   ^\n    (argument mismatch;\
    \ invalid method reference\n      incompatible types: Object cannot be converted\
    \ to String)\n  where T is a type-variable:\n    T extends Object declared in\
    \ method <T>comparingInt(ToIntFunction<? super T>)\n2 errors\n"
  stdout: ''
  timestamp: 1660011610
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Using a map to map the numbers to their original place in the\
    \ string.\n        // The first item in the map is the largest number, the second\
    \ is the second largest, etc.\n        Map<String, String> map = new HashMap<>();\n\
    \        for(int i = 0; i < numbers.length(); i++) {\n            // Split the\
    \ string into an array of single words.\n            // The elements are in order\
    \ from smallest to largest.\n            String[] words = numbers.split(\" \"\
    );\n            for(int j = 0; j < words.length; j++) {\n                // The\
    \ numbers are in order from smallest to largest.\n                // Map each\
    \ number to the index it was found in\n                map.put(words[j], j);\n\
    \            }\n        }\n        // Sort the map according to the values associated\
    \ with each number\n        for(String key: map.keySet()) {\n            Collections.sort(map.entrySet(),\
    \ Comparator.comparing(e -> e.getValue()));\n        }\n        // Convert the\
    \ map back to a string.\n        String sortedNumbers = \"\";\n        for(String\
    \ key: map.keySet()) {\n            sortedNumbers += (map.get(key));\n       \
    \ }\n        return sortedNumbers;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvruz3fq5.java:25: error: incompatible types: int cannot be converted\
    \ to String\n                map.put(words[j], j);\n                         \
    \         ^\n/tmp/tmpvruz3fq5.java:30: error: no suitable method found for sort(Set<Entry<String,String>>,Comparator<Object>)\n\
    \            Collections.sort(map.entrySet(), Comparator.comparing(e -> e.getValue()));\n\
    \                       ^\n    method Collections.<T#1>sort(List<T#1>) is not\
    \ applicable\n      (cannot infer type-variable(s) T#1\n        (actual and formal\
    \ argument lists differ in length))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (argument mismatch; Set<Entry<String,String>> cannot be converted to List<T#2>))\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Comparable<? super T#1>\
    \ declared in method <T#1>sort(List<T#1>)\n    T#2 extends Object declared in\
    \ method <T#2>sort(List<T#2>,Comparator<? super T#2>)\n/tmp/tmpvruz3fq5.java:30:\
    \ error: cannot find symbol\n            Collections.sort(map.entrySet(), Comparator.comparing(e\
    \ -> e.getValue()));\n                                                       \
    \                 ^\n  symbol:   method getValue()\n  location: variable e of\
    \ type Object\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660011610
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        char[] chars = numbers.toCharArray();\n        Arrays.sort(chars);\n\
    \        return new String(chars);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjxnqunn2.java:21)\n"
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        //  Implement this function\n        // Remember to implement the\
    \ test cases.\n        // You can use the following test cases:\n        // >>>\
    \ sortNumbers(\"one two three five\")\n        // (\"one two three five\")\n \
    \       // >>> sortNumbers(\"three one five two\")\n        // (\"one two three\
    \ five\")\n        // >>> sortNumbers(\"one\")\n        // (\"one\")\n       \
    \ // >>> sortNumbers(\"eight\")\n        // (\"eight\")\n        // >>> sortNumbers(\"\
    seven\")\n        // (\"seven\")\n        // >>> sortNumbers(\"six\")\n      \
    \  // (\"six\")\n        // >>> sortNumbers(\"five\")\n        // (\"five\")\n\
    \        // >>> sortNumbers(\"four\")\n        // (\"four\")\n        // >>> sortNumbers(\"\
    three\")\n        // (\"three\")\n        // >>> sortNumbers(\"two\")\n      \
    \  // (\"two\")\n        // >>> sortNumbers(\"zero\")\n        // (\"zero\")\n\
    \        // >>> sortNumbers(\"nine\")\n        // (\"nine\")\n        numbers\
    \ = numbers.trim();\n        String[] parts = numbers.split(\" \");\n        String\
    \ output = \"\";\n        for (int i = 0; i < parts.length; i++) {\n         \
    \   String numString = parts[i];\n            if (numString.equals(\"zero\"))\n\
    \                numString = \"0\";\n            if (numString.equals(\"one\"\
    ))\n                numString = \"1\";\n            if (numString.equals(\"two\"\
    ))\n                numString = \"2\";\n            if (numString.equals(\"three\"\
    ))\n                numString = \"3\";\n            if (numString.equals(\"four\"\
    ))\n                numString = \"4\";\n            if (numString.equals(\"five\"\
    ))\n                numString = \"5\";\n            if (numString.equals(\"six\"\
    ))\n                numString = \"6\";\n            if (numString.equals(\"seven\"\
    ))\n                numString = \"7\";\n            if (numString.equals(\"eight\"\
    ))\n                numString = \"8\";\n            if (numString.equals(\"nine\"\
    ))\n                numString = \"9\";\n            int num = Integer.parseInt(numString);\n\
    \            output = output + \" \" + num;\n        }\n        output = output.substring(1);\n\
    \        output = output.trim();\n        return output;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmpbbb743wt.java:67)\n\tat Problem.main(tmpbbb743wt.java:75)\n"
  stdout: ''
  timestamp: 1660011610
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        ArrayList<String> values = new ArrayList<String>();\n        for\
    \ (String value : numbers.split(\" \")) {\n            values.add(value);\n  \
    \      }\n        values.sort(Comparator.comparing(Integer::parseInt));\n    \
    \    return String.join(\" \", values);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"five\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat java.base/java.util.Comparator.lambda$comparing$77a9974f$1(Comparator.java:473)\n\
    \tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\t\
    at java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1307)\n\
    \tat java.base/java.util.ArrayList.sort(ArrayList.java:1721)\n\tat Problem.sortNumbers(tmprzjs8rw6.java:19)\n\
    \tat Problem.main(tmprzjs8rw6.java:25)\n"
  stdout: ''
  timestamp: 1660011610
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Set<String> numberSet = new HashSet<>();\n        numberSet.clear();\n\
    \        numberSet.stream().map(Integer::parseInt).forEachOrdered(numberSet::add);\n\
    \        numberSet.removeAll(Arrays.asList(\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"));\n        numberSet.addAll(Arrays.asList(\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\"));\n        numberSet.addAll(Arrays.asList(\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    ));\n        numberSet.addAll(Arrays.asList(\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"));\n        numberSet.addAll(Arrays.asList(\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\"));\n        numberSet.addAll(Arrays.asList(\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    ));\n        numberSet.addAll(Arrays.asList(\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"));\n        numberSet.addAll(Arrays.asList(\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\"));\n        numberSet.addAll(Arrays.asList(\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    ));\n        numberSet.addAll(Arrays.asList(\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"));\n        numberSet.addAll(Arrays.asList(\"\
    zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"\
    eight\", \"nine\"));\n        numberSet.addAll(Arrays.asList(\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    ));\n        numberSet.addAll(Arrays.asList(\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"));\n        numberSet.addAll(Arrays.asList(\"\
    zero\", \"one\", \"two\", \"three\", \"four\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppjc3nja9.java:31: error: unclosed string literal\n        numberSet.addAll(Arrays.asList(\"\
    zero\", \"one\", \"two\", \"three\", \"four\n                                \
    \                                      ^\n1 error\n"
  stdout: ''
  timestamp: 1660011609
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // split the number string into words\n        List<String> words\
    \ = Arrays.asList(numbers.trim().split(\" \"));\n        // sort those words\n\
    \        words.sort((o1, o2) -> {\n            // convert the strings to numbers\n\
    \            Integer i1 = Integer.valueOf(o1);\n            Integer i2 = Integer.valueOf(o2);\n\
    \            // return the smaller of the two values\n            return i1 <\
    \ i2 ? -1 : i1 == i2 ? 0 : 1;\n        });\n        // return a string of the\
    \ sorted numbers, spaced appropriately\n        return words.stream().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"five\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.valueOf(Integer.java:999)\n\
    \tat Problem.lambda$sortNumbers$0(tmpcv38qebj.java:20)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat java.base/java.util.Arrays$ArrayList.sort(Arrays.java:4219)\n\tat Problem.sortNumbers(tmpcv38qebj.java:18)\n\
    \tat Problem.main(tmpcv38qebj.java:31)\n"
  stdout: ''
  timestamp: 1660011611
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numArr = numbers.split(\"\\\\s+\");\n        Arrays.sort(numArr);\n\
    \        return String.join(\" \", numArr);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxmimk9t5.java:22)\n"
  stdout: ''
  timestamp: 1660011611
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> list = new ArrayList<Integer>(Arrays.asList(numbers.split(\"\
    \ \")));\n        list.sort(Comparator.naturalOrder());\n        return list.stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_51o12uc.java:15: error: no suitable constructor found for ArrayList(List<String>)\n\
    \        List<Integer> list = new ArrayList<Integer>(Arrays.asList(numbers.split(\"\
    \ \")));\n                             ^\n    constructor ArrayList.ArrayList(int)\
    \ is not applicable\n      (argument mismatch; no instance(s) of type variable(s)\
    \ T exist so that List<T> conforms to int)\n    constructor ArrayList.ArrayList(Collection<?\
    \ extends Integer>) is not applicable\n      (argument mismatch; inference variable\
    \ T has incompatible bounds\n          lower bounds: Integer,Object\n        \
    \  lower bounds: String)\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>asList(T...)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011610
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] inputTokens = numbers.split(\" \");\n        Arrays.sort(inputTokens);\n\
    \        StringBuilder builder = new StringBuilder();\n        for( int i = 0;\
    \ i < inputTokens.length; i++ ) {\n            builder.append(inputTokens[i]);\n\
    \        }\n        return builder.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwlzjy8yt.java:26)\n"
  stdout: ''
  timestamp: 1660011611
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> ints = Arrays.stream(numbers.split(\" \"))\n      \
    \          .mapToInt(Integer::parseInt)\n                .boxed()\n          \
    \      .collect(Collectors.toList());\n        Collections.sort(ints);\n     \
    \   return ints.stream()\n                .map(i -> Integer.toString(i))\n   \
    \             .collect(Collectors.joining(\" \"));\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat java.base/java.util.stream.ReferencePipeline$4$1.accept(ReferencePipeline.java:214)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmp9de4h5gt.java:18)\n\tat Problem.main(tmp9de4h5gt.java:25)\n"
  stdout: ''
  timestamp: 1660011611
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        final List<String> numbersList = Arrays.asList(numbers.split(\" \"\
    ));\n        Collections.sort(numbersList);\n        StringBuilder builder = new\
    \ StringBuilder();\n        for(int i = 0; i < numbersList.length; i++){\n   \
    \         builder.append(numbersList.get(i));\n        }\n        return builder.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpf0c4nckx.java:18: error: cannot find symbol\n        for(int i\
    \ = 0; i < numbersList.length; i++){\n                                      ^\n\
    \  symbol:   variable length\n  location: variable numbersList of type List<String>\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011611
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        char[] chars = numbers.toCharArray();\n        Arrays.sort(chars);\n\
    \        String result = \"\";\n        for (int i = 0; i < chars.length; i++)\n\
    \            result += (char) chars[i];\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppkii3g46.java:24)\n"
  stdout: ''
  timestamp: 1660011611
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String sortedNumbers = \"\";\n        try{\n        String[] numberArray\
    \ = numbers.split(\" \");\n        int size = numberArray.length;\n        if(numberArray.length\
    \ == 0){\n            throw new NumberFormatException();\n        }\n        Collections.sort(Arrays.asList(numberArray));\n\
    \        for(int i = 0; i < numberArray.length; i++){\n            sortedNumbers\
    \ += numberArray[i] + \" \";\n        }\n        }\n        catch(NumberFormatException\
    \ nfe){\n            System.out.println(\"Error - not a valid number!\");\n  \
    \      }\n        catch (Exception e) {\n            e.printStackTrace();\n  \
    \      }\n        return sortedNumbers;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmxzrfilf.java:36)\n"
  stdout: ''
  timestamp: 1660011611
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Set<String> numberSet = new TreeSet<>();\n        numberSet.addAll(Arrays.asList(numbers.split(\"\
    \ \")));\n        return numberSet.toString();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoxutld4f.java:20)\n"
  stdout: ''
  timestamp: 1660011611
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        if (numbers == null || numbers.isEmpty()) {\n            return numbers;\n\
    \        }\n\n        String[] numberSet = numbers.split(\"\\\\s+\");\n      \
    \  Arrays.sort(numberSet);\n        return Arrays.stream(numberSet).map(i -> i.toString()).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4kao6h3h.java:26)\n"
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberStringArray = numbers.split(\" \");\n        Arrays.sort(numberStringArray);\n\
    \        return String.join(\" \", numberStringArray);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb2nfrd42.java:22)\n"
  stdout: ''
  timestamp: 1660011611
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> numberList = Arrays.asList(numbers.split(\" \"));\n\
    \        Collections.sort(numberList);\n        return numberList.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5pn7ddwx.java:20)\n"
  stdout: ''
  timestamp: 1660011611
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        StringBuilder builder = new StringBuilder();\n        StringTokenizer\
    \ numberTokenizer = new StringTokenizer(numbers);\n        while (numberTokenizer.hasMoreTokens())\
    \ {\n            String num = numberTokenizer.nextToken();\n            builder.append(num);\n\
    \        }\n        Collections.sort(builder);\n        return builder.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdees973q.java:21: error: no suitable method found for sort(StringBuilder)\n\
    \        Collections.sort(builder);\n                   ^\n    method Collections.<T#1>sort(List<T#1>)\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; StringBuilder cannot be converted to List<T#1>))\n    method Collections.<T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Comparable<? super T#1> declared in method\
    \ <T#1>sort(List<T#1>)\n    T#2 extends Object declared in method <T#2>sort(List<T#2>,Comparator<?\
    \ super T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1660011611
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> stringList = Arrays.asList(numbers.split(\" \"));\n\
    \        Collections.sort(stringList);\n        return String.join(\" \", stringList);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc0dby8cb.java:22)\n"
  stdout: ''
  timestamp: 1660011611
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        numbers = numbers.trim();\n        List<String> words = new ArrayList<>(Arrays.asList(numbers.split(\"\
    \ \")));\n        Collections.sort(words);\n        StringBuilder result = new\
    \ StringBuilder();\n        for (String word : words) {\n            result.append(word);\n\
    \        }\n        return result.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplj6udvcs.java:27)\n"
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] tokens = numbers.split(\"\\\\s+\");\n        Arrays.sort(tokens);\n\
    \        return String.join(\" \", tokens);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8sbgq_pz.java:22)\n"
  stdout: ''
  timestamp: 1660011606
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int[] nums = IntStream.range(0, numbers.split(\" \").length)\n  \
    \              .mapToInt(Integer::parseInt).toArray();\n        Arrays.sort(nums);\n\
    \        String result = \"\";\n        for (int num : nums) {\n            result\
    \ += numbers;\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn6yn7mi.java:16: error: cannot find symbol\n                .mapToInt(Integer::parseInt).toArray();\n\
    \                ^\n  symbol:   method mapToInt(Integer::parseInt)\n  location:\
    \ interface IntStream\n1 error\n"
  stdout: ''
  timestamp: 1660011611
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // split the numbers string into an array of strings\n        String[]\
    \ numberStrings = numbers.split(\" \");\n        // convert each string to a number,\
    \ and sort it using Java's built-in sort method\n        Arrays.sort(numberStrings);\n\
    \        // convert the sorted numberStrings array to a string\n        String\
    \ sortedNumbers = Arrays.stream(numberStrings).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n        return sortedNumbers;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7d5xyb9v.java:20: error: cannot find symbol\n        String sortedNumbers\
    \ = Arrays.stream(numberStrings).mapToObj(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n                                                           ^\n  symbol:\
    \   method mapToObj(String::valueOf)\n  location: interface Stream<String>\n1\
    \ error\n"
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> list = Arrays.asList(numbers.split(\" \"));\n      \
    \  list.sort((a, b) -> Integer.parseInt(a) - Integer.parseInt(b));\n        return\
    \ String.join(\" \", list);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"five\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.lambda$sortNumbers$0(tmpewttpmy9.java:16)\n\tat java.base/java.util.TimSort.countRunAndMakeAscending(TimSort.java:355)\n\
    \tat java.base/java.util.TimSort.sort(TimSort.java:220)\n\tat java.base/java.util.Arrays.sort(Arrays.java:1233)\n\
    \tat java.base/java.util.Arrays$ArrayList.sort(Arrays.java:4219)\n\tat Problem.sortNumbers(tmpewttpmy9.java:16)\n\
    \tat Problem.main(tmpewttpmy9.java:22)\n"
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] strings = numbers.split(\" \");\n        Arrays.sort(strings);\n\
    \        return String.join(\" \", strings);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphl5e7mw1.java:22)\n"
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> numbersList = new ArrayList<Integer>();\n\n       \
    \ StringBuilder sortedNumbers = new StringBuilder();\n        for (String number\
    \ : numbers.split(\" \")) {\n            numbersList.add(Integer.parseInt(number));\n\
    \        }\n\n        Collections.sort(numbersList);\n        for (Integer number\
    \ : numbersList) {\n            sortedNumbers.append(number).append(\" \");\n\
    \        }\n        return sortedNumbers.toString();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat Problem.sortNumbers(tmpq2n9fjjw.java:19)\n\tat Problem.main(tmpq2n9fjjw.java:29)\n"
  stdout: ''
  timestamp: 1660011612
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Split input string on spaces to get array of numbers\n       \
    \ String[] numberArray = numbers.split(\" \");\n\n        // Convert the numbers\
    \ in the array to a stream of Integers\n        Stream<Integer> numberArrayStream\
    \ = Arrays.stream(numberArray).map(Integer::parseInt);\n\n        // Sort numbers\
    \ starting from the least one\n        numberArrayStream = numberArrayStream.sorted((n1,\
    \ n2) -> n1.compareTo(n2));\n\n        // Turn stream of Integers into a stream\
    \ of Strings\n        Stream<String> sortedNumbersStream = numberArrayStream.map(Integer::toString);\n\
    \n        // Combine the sorted numbers in one string\n        String sortedNumbers\
    \ = sortedNumbersStream.reduce(\" \", String::concat);\n\n        return sortedNumbers;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmph5il5don.java:25: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        Stream<String> sortedNumbersStream = numberArrayStream.map(Integer::toString);\n\
    \                                                                  ^\n    (argument\
    \ mismatch; invalid method reference\n      reference to toString is ambiguous\n\
    \        both method toString(int) in Integer and method toString() in Integer\
    \ match)\n  where R,T are type-variables:\n    R extends Object declared in method\
    \ <R>map(Function<? super T,? extends R>)\n    T extends Object declared in interface\
    \ Stream\n1 error\n"
  stdout: ''
  timestamp: 1660011613
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberArray = numbers.split(\" \");\n        Arrays.sort(numberArray);\n\
    \        StringBuilder builder = new StringBuilder();\n        for (String number\
    \ : numberArray) {\n            builder.append(number).append(\" \");\n      \
    \  }\n        return builder.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzwee_si2.java:24)\n"
  stdout: ''
  timestamp: 1660011613
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> numList = Arrays.asList(Arrays.stream(numbers.split(\"\
    \ \")).map(Integer::valueOf).toArray(Integer[]::new));\n        Collections.sort(numList);\n\
    \        return Stream.of(numList)\n                .mapToObj(String::valueOf)\n\
    \                .collect(Collectors.joining(\" \"));\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n\
    \    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuksdaehq.java:18: error: cannot find symbol\n                .mapToObj(String::valueOf)\n\
    \                ^\n  symbol:   method mapToObj(String::valueOf)\n  location:\
    \ interface Stream<List<Integer>>\n1 error\n"
  stdout: ''
  timestamp: 1660011613
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        LinkedList<Integer> sortedNumbers = new LinkedList<>();\n       \
    \ Set<Integer> distinct = new HashSet<>();\n        for (String number : numbers.split(\"\
    \ \")) {\n            int num = Integer.valueOf(number);\n            if (distinct.contains(num))\
    \ {\n                continue;\n            }\n            distinct.add(num);\n\
    \            sortedNumbers.add(num);\n        }\n        return sortedNumbers.stream().sorted().mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdtmaphdc.java:25: error: cannot find symbol\n        return sortedNumbers.stream().sorted().mapToObj(Integer::toString).collect(Collectors.joining(\"\
    \ \"));\n                                              ^\n  symbol:   method mapToObj(Integer::toString)\n\
    \  location: interface Stream<Integer>\n1 error\n"
  stdout: ''
  timestamp: 1660011613
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        return Arrays.toString(nums);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphmgkfvve.java:20)\n"
  stdout: ''
  timestamp: 1660011613
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        //Write your code here\n        return numbers;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbfyg6exx.java:22)\n"
  stdout: ''
  timestamp: 1660011613
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        numbers = numbers.replaceAll(\" \", \"\");\n        numbers = numbers.replaceAll(\"\
    \\\\s+\", \" \");\n        final Map<String, Integer> numberMap = new HashMap<>();\n\
    \        final Pattern pattern = Pattern.compile(\"[0-9]+\");\n        for ( final\
    \ String number : numbers.split(\" \") ) {\n            final Matcher matcher\
    \ = pattern.matcher(number);\n            if ( matcher.matches() ) {\n       \
    \         final String key = matcher.group();\n                final Integer val\
    \ = Integer.parseInt(key);\n                numberMap.put(key, val);\n       \
    \     }\n        }\n        final List<Integer> sortedNumbers = numberMap.values().stream().sorted(Comparator.naturalOrder()).collect(Collectors.toList());\n\
    \        final String sortedNumbersString = sortedNumbers.stream().map(Object::toString).collect(Collectors.joining(\"\
    \ \"));\n        return sortedNumbersString;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzqvr5g8d.java:18: error: cannot find symbol\n        final Pattern\
    \ pattern = Pattern.compile(\"[0-9]+\");\n              ^\n  symbol:   class Pattern\n\
    \  location: class Problem\n/tmp/tmpzqvr5g8d.java:18: error: cannot find symbol\n\
    \        final Pattern pattern = Pattern.compile(\"[0-9]+\");\n              \
    \                  ^\n  symbol:   variable Pattern\n  location: class Problem\n\
    /tmp/tmpzqvr5g8d.java:20: error: cannot find symbol\n            final Matcher\
    \ matcher = pattern.matcher(number);\n                  ^\n  symbol:   class Matcher\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011613
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberStrings = s.split(\" \");\n        Arrays.sort(numberStrings);\n\
    \        return numberStrings.toString();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfgk1i0f4.java:15: error: cannot find symbol\n        String[] numberStrings\
    \ = s.split(\" \");\n                                 ^\n  symbol:   variable\
    \ s\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011613
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        // Sort numbers array\n        List<Integer> numberList = Arrays.stream(numbers.split(\"\
    \ \")).mapToInt(Integer::parseInt).boxed().collect(Collectors.toList());\n   \
    \     numberList.sort(Comparator.comparing(Integer::intValue));\n        // Convert\
    \ the list into string\n        return numberList.toString();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat java.base/java.util.stream.ReferencePipeline$4$1.accept(ReferencePipeline.java:214)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmpz7a663vh.java:16)\n\tat Problem.main(tmpz7a663vh.java:22)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> list = new ArrayList<String>();\n        for (String\
    \ s : numbers.split(\" \")) {\n            list.add(s);\n        }\n        Collections.sort(list);\n\
    \        return String.join(\" \", list);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp06k5eg99.java:25)\n"
  stdout: ''
  timestamp: 1660011613
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> numberList = Arrays.asList(numbers.split(\" \"));\n\
    \        Collections.sort(numberList);\n        return String.join(\" \", numberList);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfc4y_lsl.java:22)\n"
  stdout: ''
  timestamp: 1660011613
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> nums = Arrays.stream(numbers.split(\" \"))\n      \
    \          .map(Integer::valueOf)\n                .collect(Collectors.toList());\n\
    \        List<Integer> smallestToLargest = nums.stream()\n                .sorted()\n\
    \                .collect(Collectors.toList());\n        String sortedNumbers\
    \ = smallestToLargest.stream()\n                .map(Integer::toString)\n    \
    \            .collect(Collectors.joining(\" \"));\n        return sortedNumbers;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpwccrmiff.java:22: error: incompatible types: cannot infer type-variable(s)\
    \ R\n                .map(Integer::toString)\n                    ^\n    (argument\
    \ mismatch; invalid method reference\n      reference to toString is ambiguous\n\
    \        both method toString(int) in Integer and method toString() in Integer\
    \ match)\n  where R,T are type-variables:\n    R extends Object declared in method\
    \ <R>map(Function<? super T,? extends R>)\n    T extends Object declared in interface\
    \ Stream\n1 error\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String sortedNumbers = \"\";\n        List<Integer> numbersList =\
    \ Arrays.stream(numbers.trim().split(\"\\\\s\")).map(Integer::valueOf).collect(Collectors.toList());\n\
    \        Collections.sort(numbersList);\n        sortedNumbers = numbersList.stream().map(number\
    \ -> String.valueOf(number)).join(\" \");\n        return sortedNumbers;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\"\
    )).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpg_2rehv4.java:18: error: cannot find symbol\n        sortedNumbers\
    \ = numbersList.stream().map(number -> String.valueOf(number)).join(\" \");\n\
    \                                                                            \
    \      ^\n  symbol:   method join(String)\n  location: interface Stream<String>\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011613
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        StringBuilder sb = new StringBuilder();\n        for (String number\
    \ : numbers) {\n            number = number.replaceAll(\"\\\\s+\", \"\");\n  \
    \          if (number.startsWith(\"zero\")) number = \"0\";\n            if (number.startsWith(\"\
    one\")) number = \"\";\n            if (number.startsWith(\"two\")) number = \"\
    \";\n            if (number.startsWith(\"three\")) number = \"\";\n          \
    \  if (number.startsWith(\"four\")) number = \"\";\n            if (number.startsWith(\"\
    five\")) number = \"\";\n            if (number.startsWith(\"six\")) number =\
    \ \"\";\n            if (number.startsWith(\"seven\")) number = \"\";\n      \
    \      if (number.startsWith(\"eight\")) number = \"\";\n            if (number.startsWith(\"\
    nine\")) number = \"\";\n            sb.append(number).append(\" \");\n      \
    \  }\n        String sortedNumbers = sb.toString();\n        String[] numberArr\
    \ = sortedNumbers.split(\" \");\n        Arrays.sort(numberArr);\n        StringBuilder\
    \ sortedNumbersBuilder = new StringBuilder();\n        for (String n : numberArr)\
    \ {\n            sortedNumbersBuilder.append(n);\n            sortedNumbersBuilder.append(\"\
    \ \");\n        }\n        return sortedNumbersBuilder.toString();\n    }\n  \
    \  public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3oirhdil.java:16: error: for-each not applicable to expression\
    \ type\n        for (String number : numbers) {\n                            \
    \ ^\n  required: array or java.lang.Iterable\n  found:    String\n1 error\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        IntSummaryStatistics sums = IntStream.range(0, 10).mapToObj(i ->\
    \ IntStream.range(0, 10).mapToObj(j -> i + j).map(v -> (int) v).summaryStatistics()).summaryStatistics();\n\
    \        IntStream.range(0, 10).map(i -> new Tupple<>(\"zero\", sums.get(i).getSum()))\n\
    \                .collect(Collectors.toMap(tuple -> tuple.getVal1(), tuple ->\
    \ tuple.getVal2(), (t1, t2) -> t1).entrySet().stream())\n                .forEach(entry\
    \ -> System.out.println(entry.getKey()+\" \"+entry.getValue()));\n        return\
    \ numbers;\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnqtz3u58.java:15: error: cannot find symbol\n        IntSummaryStatistics\
    \ sums = IntStream.range(0, 10).mapToObj(i -> IntStream.range(0, 10).mapToObj(j\
    \ -> i + j).map(v -> (int) v).summaryStatistics()).summaryStatistics();\n    \
    \                                                                            \
    \                                                      ^\n  symbol:   method summaryStatistics()\n\
    \  location: interface Stream<Integer>\n/tmp/tmpnqtz3u58.java:15: error: cannot\
    \ find symbol\n        IntSummaryStatistics sums = IntStream.range(0, 10).mapToObj(i\
    \ -> IntStream.range(0, 10).mapToObj(j -> i + j).map(v -> (int) v).summaryStatistics()).summaryStatistics();\n\
    \                                                                            \
    \                                                                            \
    \   ^\n  symbol:   method summaryStatistics()\n  location: interface Stream<Object>\n\
    /tmp/tmpnqtz3u58.java:16: error: cannot find symbol\n        IntStream.range(0,\
    \ 10).map(i -> new Tupple<>(\"zero\", sums.get(i).getSum()))\n               \
    \                             ^\n  symbol:   class Tupple\n  location: class Problem\n\
    /tmp/tmpnqtz3u58.java:16: error: cannot find symbol\n        IntStream.range(0,\
    \ 10).map(i -> new Tupple<>(\"zero\", sums.get(i).getSum()))\n               \
    \                                                  ^\n  symbol:   method get(int)\n\
    \  location: variable sums of type IntSummaryStatistics\n/tmp/tmpnqtz3u58.java:17:\
    \ error: cannot find symbol\n                .collect(Collectors.toMap(tuple ->\
    \ tuple.getVal1(), tuple -> tuple.getVal2(), (t1, t2) -> t1).entrySet().stream())\n\
    \                                                        ^\n  symbol:   method\
    \ getVal1()\n  location: variable tuple of type Object\n/tmp/tmpnqtz3u58.java:17:\
    \ error: cannot find symbol\n                .collect(Collectors.toMap(tuple ->\
    \ tuple.getVal1(), tuple -> tuple.getVal2(), (t1, t2) -> t1).entrySet().stream())\n\
    \                                                                            \
    \      ^\n  symbol:   method getVal2()\n  location: varia"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> numbersList = Arrays.asList(numbers.split(\" \"));\n\
    \        Collections.sort(numbersList);\n        return String.join(\" \", numbersList);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpolejsh6z.java:22)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberArray = numbers.split(\" \");\n        Arrays.sort(numberArray);\n\
    \        return Arrays.toString(numberArray);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkxuw8ade.java:20)\n"
  stdout: ''
  timestamp: 1660011596
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberArray = numbers.split(\" \");\n        Arrays.sort(numberArray);\n\
    \        return String.join(\" \", numberArray);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpilsskbyp.java:22)\n"
  stdout: ''
  timestamp: 1660011608
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberStrings = numbers.split(\" \");\n        List<Integer>\
    \ intList = new ArrayList<>();\n        for(int i = 0;i < numberStrings.length;i++)\
    \ {\n            try {\n                intList.add( Integer.parseInt(numberStrings[i])\
    \ );\n            } catch(NumberFormatException e) {\n                return \"\
    Not a number \"+numbers;\n            }\n        }\n        \n        // Sort\
    \ the list\n        Collections.sort(intList);\n        \n        // Build the\
    \ result\n        StringBuilder result = new StringBuilder();\n        for(int\
    \ i = 0;i < intList.size();i++) {\n            result.append(intList.get(i));\n\
    \            result.append(\" \");\n        }\n        return result.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0kwtorgq.java:37)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        int largest = Integer.parseInt(numbers.split(\" \")[1]) - Integer.parseInt(numbers.split(\"\
    \ \")[0]);\n        String result = \"\";\n        String smallest = \"\" + Integer.parseInt(numbers.split(\"\
    \ \")[0]);\n        for (int i = 0; i < numbers.split(\" \").length - 1; i++)\
    \ {\n            int num1 = Integer.parseInt(numbers.split(\" \")[i]);\n     \
    \       int num2 = Integer.parseInt(numbers.split(\" \")[i + 1]);\n          \
    \  if (num1 > num2) {\n                result += smallest + \" \";\n         \
    \   }\n            if (num1 < num2) {\n                result += num2 + \" \"\
    ;\n            }\n            if (num1 == num2) {\n                result += num1\
    \ + \" \";\n            }\n        }\n        result += largest + \" \";\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"three\"\
    )).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.sortNumbers(tmpnsly5dz8.java:15)\n\
    \tat Problem.main(tmpnsly5dz8.java:35)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        return Arrays.stream(numbers.split(\" \")).sorted().collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprdp253mo.java:20)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        ArrayList<Integer> values = new ArrayList<Integer>();\n        String[]\
    \ numberArray = numbers.split(\" \");\n        for (String number: numberArray)\
    \ {\n            if (number.equalsIgnoreCase(\"zero\")) {\n                values.add(0);\n\
    \            } else if (number.equalsIgnoreCase(\"one\")) {\n                values.add(1);\n\
    \            } else if (number.equalsIgnoreCase(\"two\")) {\n                values.add(2);\n\
    \            } else if (number.equalsIgnoreCase(\"three\")) {\n              \
    \  values.add(3);\n            } else if (number.equalsIgnoreCase(\"four\")) {\n\
    \                values.add(4);\n            } else if (number.equalsIgnoreCase(\"\
    five\")) {\n                values.add(5);\n            } else if (number.equalsIgnoreCase(\"\
    six\")) {\n                values.add(6);\n            } else if (number.equalsIgnoreCase(\"\
    seven\")) {\n                values.add(7);\n            } else if (number.equalsIgnoreCase(\"\
    eight\")) {\n                values.add(8);\n            } else if (number.equalsIgnoreCase(\"\
    nine\")) {\n                values.add(9);\n            }\n        }\n       \
    \ Collections.sort(values);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 1; i < 10; i++) {\n            if (i != values.get(0)) {\n\
    \                sb.append(\" \" + i);\n            }\n        }\n        return\
    \ sb.reverse().toString();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IndexOutOfBoundsException: Index\
    \ 0 out of bounds for length 0\n\tat java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)\n\
    \tat java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)\n\
    \tat java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:266)\n\
    \tat java.base/java.util.Objects.checkIndex(Objects.java:359)\n\tat java.base/java.util.ArrayList.get(ArrayList.java:427)\n\
    \tat Problem.sortNumbers(tmp_m655l8u.java:43)\n\tat Problem.main(tmp_m655l8u.java:50)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] numberStrings = numbers.split(\" \");\n        String[]\
    \ sortedNumbers = new String[numberStrings.length];\n        Arrays.sort(numberStrings,\
    \ new Comparator<String>() {\n            public int compare(String a, String\
    \ b) {\n                try {\n                    int aInt = Integer.parseInt(a);\n\
    \                    int bInt = Integer.parseInt(b);\n                    return\
    \ Integer.compare(aInt, bInt);\n                } catch (NumberFormatException\
    \ e) {\n                    // if one or both are non-integers\n             \
    \       // just sort them lexicographically\n                    return a.compareTo(b);\n\
    \                }\n            }\n        });\n        for (String number : numberStrings)\
    \ {\n            sortedNumbers[numberStrings.indexOf(number)] = number;\n    \
    \    }\n        StringBuilder builder = new StringBuilder();\n        for (String\
    \ sortedNumber : sortedNumbers) {\n            builder.append(sortedNumber);\n\
    \            builder.append(\" \");\n        }\n        return builder.toString();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpj606wqpo.java:31: error: cannot find symbol\n            sortedNumbers[numberStrings.indexOf(number)]\
    \ = number;\n                                       ^\n  symbol:   method indexOf(String)\n\
    \  location: variable numberStrings of type String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> strings = new ArrayList<>(Arrays.asList(numbers.split(\"\
    \ \")));\n        strings = strings.stream().sorted().collect(Collectors.toList());\n\
    \        return strings.stream().collect(Collectors.joining(\" \"));\n    }\n\
    \    public static void main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\
    \")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2pq8i1ne.java:22)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Arrays.sort(numbers.split(\" \"));\n        return numbers.split(\"\
    \ \");\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp__3zm90w.java:16: error: incompatible types: String[] cannot be\
    \ converted to String\n        return numbers.split(\" \");\n                \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<Integer> intList = Arrays.stream(numbers.split(\" \"))\n   \
    \         .map(Integer::valueOf)\n            .sorted()\n            .collect(Collectors.toList());\n\
    \        \n        return intList.stream()\n            .map(String::valueOf)\n\
    \            .collect(Collectors.joining(\" \"));\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.valueOf(Integer.java:999)\n\
    \tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmpluyx74nm.java:18)\n\tat Problem.main(tmpluyx74nm.java:25)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        List<String> stringList = Arrays.asList(numbers.split(\" \"));\n\
    \        List<Integer> integerList = stringList.stream()\n                .map(Integer::parseInt)\n\
    \                .sorted()\n                .collect(Collectors.toList());\n \
    \       return integerList.stream().map(String::valueOf).collect(Collectors.joining(\"\
    \ \"));\n    }\n    public static void main(String[] args) {\n    assert(sortNumbers((\"\
    \")).equals((\"\")));\n    assert(sortNumbers((\"three\")).equals((\"three\")));\n\
    \    assert(sortNumbers((\"three five nine\")).equals((\"three five nine\")));\n\
    \    assert(sortNumbers((\"five zero four seven nine eight\")).equals((\"zero\
    \ four five seven eight nine\")));\n    assert(sortNumbers((\"six five four three\
    \ two one zero\")).equals((\"zero one two three four five six\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.NumberFormatException: For input\
    \ string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)\n\
    \tat java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:992)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:682)\n\
    \tat Problem.sortNumbers(tmpu10bisov.java:19)\n\tat Problem.main(tmpu10bisov.java:23)\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        Map<String, Integer> map = new HashMap<>();\n        String[] nums\
    \ = numbers.split(\"\\\\s\");\n        for (String num: nums) {\n            map.put(num,\
    \ map.containsKey(num) ? map.get(num) + 1 : 1);\n        }\n\n        Map<Integer,\
    \ String> sortedNums = map.entrySet().stream()\n                .sorted(Map.Entry.comparingByValue())\n\
    \                .map(e -> new AbstractMap.SimpleImmutableEntry<>(e.getValue(),\
    \ e.getKey()))\n                .map(Map.Entry::getKey)\n                .collect(Collectors.toMap(x\
    \ -> x, x -> x));\n\n        String[] sortedNumsArr = sortedNums.entrySet().stream().sorted()\n\
    \                .map(x -> x.getValue()).collect(Collectors.toArray(String[]::new));\n\
    \        return Arrays.toString(sortedNumsArr);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n   \
    \ assert(sortNumbers((\"three\")).equals((\"three\")));\n    assert(sortNumbers((\"\
    three five nine\")).equals((\"three five nine\")));\n    assert(sortNumbers((\"\
    five zero four seven nine eight\")).equals((\"zero four five seven eight nine\"\
    )));\n    assert(sortNumbers((\"six five four three two one zero\")).equals((\"\
    zero one two three four five six\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9z6_tw18.java:25: error: incompatible types: inference variable\
    \ U has incompatible bounds\n                .collect(Collectors.toMap(x -> x,\
    \ x -> x));\n                        ^\n    equality constraints: String\n   \
    \ lower bounds: Integer\n  where U,T,K are type-variables:\n    U extends Object\
    \ declared in method <T,K,U>toMap(Function<? super T,? extends K>,Function<? super\
    \ T,? extends U>)\n    T extends Object declared in method <T,K,U>toMap(Function<?\
    \ super T,? extends K>,Function<? super T,? extends U>)\n    K extends Object\
    \ declared in method <T,K,U>toMap(Function<? super T,? extends K>,Function<? super\
    \ T,? extends U>)\n/tmp/tmp9z6_tw18.java:28: error: cannot find symbol\n     \
    \           .map(x -> x.getValue()).collect(Collectors.toArray(String[]::new));\n\
    \                                                          ^\n  symbol:   method\
    \ toArray(String[]::new)\n  location: class Collectors\n2 errors\n"
  stdout: ''
  timestamp: 1660011614
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Input is a space-delimited string of numberals from 'zero'\
    \ to 'nine'.\n    // Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    // Return the string with numbers\
    \ sorted from smallest to largest\n    // >>> sortNumbers((\"three one five\"\
    ))\n    // (\"one three five\")\n    public static String sortNumbers(String numbers)\
    \ {\n        String[] nums = numbers.split(\" \");\n        Arrays.sort(nums);\n\
    \        return String.join(\" \", nums);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sortNumbers((\"\")).equals((\"\")));\n    assert(sortNumbers((\"\
    three\")).equals((\"three\")));\n    assert(sortNumbers((\"three five nine\")).equals((\"\
    three five nine\")));\n    assert(sortNumbers((\"five zero four seven nine eight\"\
    )).equals((\"zero four five seven eight nine\")));\n    assert(sortNumbers((\"\
    six five four three two one zero\")).equals((\"zero one two three four five six\"\
    )));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9l2doktw.java:22)\n"
  stdout: ''
  timestamp: 1660011446
