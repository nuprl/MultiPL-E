language: java
name: HumanEval_63_fibfib
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        else if (n == 1) {\n            return 1;\n        }\n\
    \        else if (n == 2) {\n            return 1;\n        }\n        else {\n\
    \            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxlf5g_zw.java:37)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) return 0;\n    \
    \    if (n == 1) return 1;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.j"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // write your code here\n  \
    \      if(n == 0 || n == 1) {\n            return 0;\n        }\n        else{\n\
    \            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.java:27)\n\tat Problem.fibfib(tmp8snf1vnm.java:27)\n\
    \tat Problem.fibfib(tmp8snf1vnm.j"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 0) {\n            return\
    \ 0L;\n        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpahghg7yq.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibo = 1L;\n        for\
    \ (long i = 2L; i <= n; i++) {\n            fibo = fibo + fibo;\n        }\n \
    \       return fibo;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcj9n4m4j.java:29)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0;\n        if(n<2)\n\
    \            return fibfib;\n        if(n==2)\n            return 1;\n       \
    \ long temp;\n        for(long i=3;i<=n;i++)\n        {\n            temp = fibfib;\n\
    \            fibfib = temp+fibfib;\n        }\n        return fibfib;\n    }\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpao8cv2mg.java:38)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long a = 0, b = 1;\n       \
    \ long c = a;\n        while (n != 0) {\n            c = b;\n            b = a;\n\
    \            a = c;\n            n--;\n        }\n        return a;\n    }\n \
    \   public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_48ng_72.java:33)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long res = 0;\n        for (int\
    \ i = 1; i <= n; i++) {\n            res = res + i;\n        }\n        return\
    \ res;\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5e4ep4lz.java:29)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 1l) {\n           \
    \ return 0l;\n        }\n        long x = 1l;\n        for (int i = 3; i<= n;\
    \ i++) {\n            x = x * i;\n        }\n        return x;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpoaqyq3f8.java:34)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long[] a = new long[n];\n  \
    \      a[0] = 0;\n        a[1] = 0;\n        for (int i = 2; i < a.length; i++)\
    \ {\n            a[i] = a[i-1] + a[i-2];\n        }\n        return a[n];\n  \
    \  }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4f0470d4.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n/tmp/tmp4f0470d4.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return a[n];\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 1l)\n            return\
    \ 0l;\n\n        long sum = FibFibHelper(n - 1l);\n\n        if (n % 2l == 1l)\n\
    \            sum = (sum + 1l) * sum;\n\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkeg5ajjg.java:25: error: cannot find symbol\n        long sum =\
    \ FibFibHelper(n - 1l);\n                   ^\n  symbol:   method FibFibHelper(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 3) {\n            return\
    \ (1l);\n        }\n        return (fibfib((n-1l) + fibfib((n-2l) + fibfib((n-3l))));\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi1o5n5zy.java:25: error: ')' expected\n        return (fibfib((n-1l)\
    \ + fibfib((n-2l) + fibfib((n-3l))));\n                                      \
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1660011767
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n<=1)\n            return\
    \ 0;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpan2x0bt0.java:27)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0 || n == 1) {\n  \
    \          return n;\n        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.j"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long[] fibfibArray = new long[n];\n\
    \        Arrays.fill(fibfibArray,0L);\n        if (n == 0) {\n            return\
    \ 0L;\n        }\n        fibfibArray[0] = 1L;\n        if (n == 1) {\n      \
    \      return fibfibArray[0];\n        }\n        fibfibArray[1] = 1L;\n     \
    \   if (n == 2) {\n            return fibfibArray[0];\n        }\n        fibfibArray[2]\
    \ = fibfibArray[1]+fibfibArray[2];\n        return fibfibArray[n-1]+fibfibArray[n-2]+fibfibArray[n-3];\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3_i76zto.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] fibfibArray = new long[n];\n              \
    \                        ^\n/tmp/tmp3_i76zto.java:36: error: incompatible types:\
    \ possible lossy conversion from long to int\n        return fibfibArray[n-1]+fibfibArray[n-2]+fibfibArray[n-3];\n\
    \                            ^\n/tmp/tmp3_i76zto.java:36: error: incompatible\
    \ types: possible lossy conversion from long to int\n        return fibfibArray[n-1]+fibfibArray[n-2]+fibfibArray[n-3];\n\
    \                                             ^\n/tmp/tmp3_i76zto.java:36: error:\
    \ incompatible types: possible lossy conversion from long to int\n        return\
    \ fibfibArray[n-1]+fibfibArray[n-2]+fibfibArray[n-3];\n                      \
    \                                        ^\n4 errors\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 0l) return 0l;\n  \
    \      if (n <= 3l) return 1l;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_ux425fm.java:28)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        final long fibfib[] = new long[n\
    \ + 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n\
    \        for (int i = 2; i <= n; ++i) {\n            fibfib[i] = fibfib[i - 1]\
    \ + fibfib[i - 2];\n        }\n        return fibfib[n];\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpacs94j59.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n        final long fibfib[] = new long[n + 1];\n         \
    \                                ^\n/tmp/tmpacs94j59.java:29: error: incompatible\
    \ types: possible lossy conversion from long to int\n        return fibfib[n];\n\
    \                      ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long result = 1;\n        for(int\
    \ i = 1l; i <= n; i++)\n            result = result * i;\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt0m60b61.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n        for(int i = 1l; i <= n; i++)\n                   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if ( n == 0 )\n            return\
    \ 0;\n        if ( n == 1)\n            return 1;\n        if (n < 2)\n      \
    \      return fibfib(n-1);\n        long fib1 = 1;\n        long fib2 = 1;\n \
    \       long fib3 = 1;\n        for ( long i = 2; i <= n; i++ ) {\n          \
    \  fib1 = fib2;\n            fib2 = fib3;\n            fib3 = fib1 + fib2 + fib3;\n\
    \        }\n        return fib3;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd_my8pjk.java:39)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // Your code here...\n     \
    \   List<Long> fibfib = new ArrayList<>();\n        fibfib.add(0);\n        fibfib.add(0);\n\
    \        fibfib.add(1);\n        fibfib.add(1);\n        fibfib.get(n);\n    \
    \    return fibfib.get(n);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx5j_khd4.java:24: error: incompatible types: int cannot be converted\
    \ to Long\n        fibfib.add(0);\n                   ^\n/tmp/tmpx5j_khd4.java:25:\
    \ error: incompatible types: int cannot be converted to Long\n        fibfib.add(0);\n\
    \                   ^\n/tmp/tmpx5j_khd4.java:26: error: incompatible types: int\
    \ cannot be converted to Long\n        fibfib.add(1);\n                   ^\n\
    /tmp/tmpx5j_khd4.java:27: error: incompatible types: int cannot be converted to\
    \ Long\n        fibfib.add(1);\n                   ^\n/tmp/tmpx5j_khd4.java:28:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    fibfib.get(n);\n                   ^\n/tmp/tmpx5j_khd4.java:29: error: incompatible\
    \ types: possible lossy conversion from long to int\n        return fibfib.get(n);\n\
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n6 errors\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0 || n == 1) {\n  \
    \          return n;\n        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.j"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n == 0)\n            return\
    \ 0;\n        if(n == 1)\n            return 1;\n        if(n == 2)\n        \
    \    return 1;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz4m6q1_b.java:32)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // Add your code here\n    \
    \    if (n <= 0) {\n            return 0;\n        }\n        if (n <= 2) {\n\
    \            return 1;\n        }\n        long[] num = new long[n];\n       \
    \ long[] num1 = new long[n];\n        long[] num2 = new long[n];\n        long\
    \ num3 = 0l;\n        long num4 = 0l;\n        long num5 = 0l;\n        long num6\
    \ = 0l;\n        long num7 = 0l;\n        for (int i = 2; i <= n; i++) {\n   \
    \         num[i] = i;\n            num1[i] = num[i - 1];\n            num2[i]\
    \ = num[i - 2];\n            num3 = num3 * (num1[i - 1] + num2[i - 1]) + num[i];\n\
    \            num4 = num4 * (num1[i - 2] + num2[i - 2]) + num[i];\n           \
    \ num5 = num5 * (num1[i - 3] + num2[i - 3]) + num[i];\n            num6 = num6\
    \ * (num1[i - 4] + num2[i - 4]) + num[i];\n            num7 = num7 * (num1[i -\
    \ 5] + num2[i - 5]) + num[i];\n        }\n        long[] num8 = new long[n];\n\
    \        for (int i = 0; i <= n - 2; i++) {\n            num8[i] = num3 * (num7\
    \ + num5) + num[i];\n        }\n        long[] num9 = new long[n];\n        for\
    \ (int i = 0; i <= n - 3; i++) {\n            num9[i] = num3 * (num6 + num5) +\
    \ num[i];\n        }\n        long[] num10 = new long[n];\n        for (int i\
    \ = 0; i <= n - 4; i++) {\n            num10[i] = num3 * (num4 + num5) + num[i];\n\
    \        }\n        long[] num11 = new long[n];\n        for (int i = 0; i <=\
    \ n - 5; i++) {\n            num11[i] = num3 * (num3 + num5) + num[i];\n     \
    \   }\n        return num11[n - 1];\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpesnqd0cf.java:29: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] num = new long[n];\n                      \
    \        ^\n/tmp/tmpesnqd0cf.java:30: error: incompatible types: possible lossy\
    \ conversion from long to int\n        long[] num1 = new long[n];\n          \
    \                     ^\n/tmp/tmpesnqd0cf.java:31: error: incompatible types:\
    \ possible lossy conversion from long to int\n        long[] num2 = new long[n];\n\
    \                               ^\n/tmp/tmpesnqd0cf.java:47: error: incompatible\
    \ types: possible lossy conversion from long to int\n        long[] num8 = new\
    \ long[n];\n                               ^\n/tmp/tmpesnqd0cf.java:51: error:\
    \ incompatible types: possible lossy conversion from long to int\n        long[]\
    \ num9 = new long[n];\n                               ^\n/tmp/tmpesnqd0cf.java:55:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    long[] num10 = new long[n];\n                                ^\n/tmp/tmpesnqd0cf.java:59:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    long[] num11 = new long[n];\n                                ^\n/tmp/tmpesnqd0cf.java:63:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return num11[n - 1];\n                       ^\n8 errors\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        Long[] fibfib = new Long[n +\
    \ 1];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n        fibfib[2] = 1;\n\
    \        for (int i = 2; i < fibfib.length; i++) {\n            fibfib[i] = fibfib[i\
    \ - 1] + fibfib[i - 2] + fibfib[i - 3];\n        }\n        return fibfib[n];\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpurhj3mxq.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n        Long[] fibfib = new Long[n + 1];\n               \
    \                    ^\n/tmp/tmpurhj3mxq.java:23: error: incompatible types: int\
    \ cannot be converted to Long\n        fibfib[0] = 0;\n                    ^\n\
    /tmp/tmpurhj3mxq.java:24: error: incompatible types: int cannot be converted to\
    \ Long\n        fibfib[1] = 0;\n                    ^\n/tmp/tmpurhj3mxq.java:25:\
    \ error: incompatible types: int cannot be converted to Long\n        fibfib[2]\
    \ = 1;\n                    ^\n/tmp/tmpurhj3mxq.java:29: error: incompatible types:\
    \ possible lossy conversion from long to int\n        return fibfib[n];\n    \
    \                  ^\n5 errors\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0l;\n        } else if (n == 1) {\n            return 1l;\n        } else {\n\
    \            long a = fibfib(n-1);\n            long b = fibfib(n-2);\n      \
    \      return a+b+b;\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptlpkz5fp.java:34)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0;\n        if\
    \ ((n >= 0) && (n <= 2))\n            return 1;\n        else if (n > 2)\n   \
    \         fibfib = (fibfib + fibfib) % ((long) Math.pow(10, n) - 1);\n       \
    \ return fibfib;\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg44r5f8n.java:31)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 0) throw new IllegalArgumentException(\"\
    fibfib(n) not defined for n < 0\");\n        long fibfib = 0;\n        long fibfib1\
    \ = 1;\n        long fibfib2 = 1;\n        long fibfib3 = 1;\n        if (n >=\
    \ 2) {\n            fibfib2 = fibfib1 + fibfib3;\n            fibfib3 = fibfib1\
    \ + fibfib2;\n            fibfib1 = fibfib1;\n        }\n        fibfib = (fibfib1\
    \ + fibfib2 + fibfib3);\n        return fibfib;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxmeq50vy.java:36)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long last = 0;\n        long\
    \ current = 0;\n        if (n == 0) {\n            return 0;\n        }\n    \
    \    last = current + last;\n        current = current + last;\n        last =\
    \ current + last;\n        current = current + last;\n        last = current +\
    \ last;\n        current = current + last;\n        return current;\n    }\n \
    \   public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsl6g1vfh.java:36)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n==0){\n            return\
    \ 0l; // fibfib(0)\n        }\n        if(n==1){\n            return 1l; // fibfib(1)\n\
    \        }\n        if(n==2){\n            return 1l; // fibfib(2)\n        }\n\
    \        return fibfib(n-1)+fibfib(n-2)+fibfib(n-3); // fibfib(n) \n    }\n  \
    \  public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz3z94efu.java:35)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) return 0L;\n   \
    \     if (n == 1) return 1L;\n        if (n == 2) return 1L;\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0tx112sy.java:29)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // write your logic here\n \
    \       if (n == 0)\n            return 0;\n        if (n == 1)\n            return\
    \ 1;\n        long ans = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n        return\
    \ ans;\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.java:27)\n\tat Problem.fibfib(tmp5gouzr4p.java:27)\n\
    \tat Problem.fibfib(tmp5gouzr4p.j"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 3) {\n            return\
    \ 1;\n        }\n        long fibfib = (long)fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \        return fibfib;\n    }\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp92xm5t1v.java:30)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long previous = 0;\n       \
    \ long current = 1;\n        for (int i = 0; i < n; i++) {\n            previous\
    \ = current;\n            current = current + previous;\n        }\n        return\
    \ current;\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiiijik8w.java:31)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0;\n        for\
    \ (int i = 0; i < n; i++) {\n            fibfib = fibfib + fibfib + 1;\n     \
    \   }\n        return fibfib;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppd0hlnbv.java:29)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fib_one = 0;\n        long\
    \ fib_two = 1;\n        long fib_three = 2;\n\n        if (n <= 2) {\n       \
    \     return fib_one;\n        } else {\n            long fib_three_plus = fib_two\
    \ + fib_three;\n\n            if (n >= fib_three_plus) {\n                return\
    \ fib_three_plus;\n            } else {\n                long fib_five = fib_one\
    \ + fib_two;\n                long fib_eight = fib_three + fib_one;\n\n      \
    \          if (n >= fib_eight) {\n                    return fib_eight;\n    \
    \            } else {\n                    return fib_five;\n                }\n\
    \            }\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxkm1erq1.java:46)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        return fibfib(n);\n    }\n \
    \   public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.java:22)\n\tat Problem.fibfib(tmpnshmqk5s.java:22)\n\
    \tat Problem.fibfib(tmpnshmqk5s.j"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long ret = 0;\n        \n  \
    \      long fibfib0 = 0;\n        long fibfib1 = 1;\n        long fibfib2 = 1;\n\
    \        long fibfib3 = 0;\n        \n        if (n == 0) return fibfib0;\n  \
    \      \n        if (n == 1) return fibfib1;\n        \n        if (n == 2) return\
    \ fibfib2;\n        \n        for (long i = 0; i < n; i++) {\n            fibfib3\
    \ = fibfib2;\n            fibfib2 = fibfib1;\n            fibfib1 = fibfib0;\n\
    \            fibfib0 = fibfib3;\n            ret = ret + fibfib3;\n        }\n\
    \        return ret;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp19uj766l.java:46)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0 || n == 1)\n    \
    \        return n;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.java:24)\n\tat Problem.fibfib(tmpjt73nnn3.java:24)\n\
    \tat Problem.fibfib(tmpjt73nnn3.j"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // base case\n        if (n\
    \ <= 1) return 0l;\n        // recursive case\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4czbutd7.java:28)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if ((n == 0l) || (n == 1l))\n\
    \            return 0l;\n        if ((n == 2l))\n            return 1l;\n    \
    \    return fibfib((n - 1l) + fibfib((n - 2l) + fibfib((n - 3l))))\n    }\n  \
    \  public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppycwuhhd.java:26: error: ';' expected\n        return fibfib((n\
    \ - 1l) + fibfib((n - 2l) + fibfib((n - 3l))))\n                             \
    \                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"Negative value for fibfib\");\n        }\n  \
    \      long fibfib = new long[n];\n        fibfib[0] = 0;\n        fibfib[1] =\
    \ 1;\n        long i = 2;\n        while (i <= n) {\n            fibfib[i] = fibfib[i\
    \ - 1] + fibfib[i - 2];\n            i++;\n        }\n        return fibfib[n];\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ncpf18u.java:25: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long fibfib = new long[n];\n                     \
    \          ^\n/tmp/tmp_ncpf18u.java:25: error: incompatible types: long[] cannot\
    \ be converted to long\n        long fibfib = new long[n];\n                 \
    \     ^\n/tmp/tmp_ncpf18u.java:26: error: array required, but long found\n   \
    \     fibfib[0] = 0;\n              ^\n/tmp/tmp_ncpf18u.java:27: error: array\
    \ required, but long found\n        fibfib[1] = 1;\n              ^\n/tmp/tmp_ncpf18u.java:30:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        fibfib[i] = fibfib[i - 1] + fibfib[i - 2];\n                   ^\n/tmp/tmp_ncpf18u.java:30:\
    \ error: array required, but long found\n            fibfib[i] = fibfib[i - 1]\
    \ + fibfib[i - 2];\n                  ^\n/tmp/tmp_ncpf18u.java:30: error: incompatible\
    \ types: possible lossy conversion from long to int\n            fibfib[i] = fibfib[i\
    \ - 1] + fibfib[i - 2];\n                                 ^\n/tmp/tmp_ncpf18u.java:30:\
    \ error: array required, but long found\n            fibfib[i] = fibfib[i - 1]\
    \ + fibfib[i - 2];\n                              ^\n/tmp/tmp_ncpf18u.java:30:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \        fibfib[i] = fibfib[i - 1] + fibfib[i - 2];\n                        \
    \                         ^\n/tmp/tmp_ncpf18u.java:30: error: array required,\
    \ but long found\n            fibfib[i] = fibfib[i - 1] + fibfib[i - 2];\n   \
    \                                           ^\n/tmp/tmp_ncpf18u.java:33: error:\
    \ incompatible types: possible lossy conversion from long to int\n        return\
    \ fibfib[n];\n                      ^\n/tmp/tmp_ncpf18u.java:33: error: array\
    \ required, but long found\n        return fibfib[n];\n                     ^\n\
    12 errors\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"FibFib number must be positive, is \" + n);\n\
    \        }\n        return fibfib(n);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.java:25)\n\tat Problem.fibfib(tmpa0wj_npy.java:25)\n\
    \tat Problem.fibfib(tmpa0wj_npy.j"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 0) return 0;\n    \
    \    if (n <= 2) return n;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsw7wnwpz.java:27)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // TODO Auto-generated method\
    \ stub\n        if (n <= 0) \n            return 0;\n        if (n <= 2) \n  \
    \          return 1;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppi7mhzat.java:31)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long x = 0;\n        while (n\
    \ > 2) {\n            long y = x * x;\n            x = y;\n            n = n -\
    \ 3;\n        }\n        long z = x * x;\n        return z;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_7u1j7ge.java:32)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n<0) throw new RuntimeException();\n\
    \        if(n==0) return 0;\n        if(n==1) return 0;\n        long sum=1;\n\
    \        for(int i=2;i<n;i++){\n            sum+=fibfib(i);\n        }\n     \
    \   return sum;\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5oazccc9.java:34)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 3) {\n            return\
    \ 0;\n        }\n        if (n >= 5) {\n            return 4l;\n        }\n  \
    \      if (n >= 8) {\n            return 24l;\n        }\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjx7v7dy5.java:34)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 1l) {\n           \
    \ return (0l);\n        }\n        if (n <= 3l) {\n            return 1l;\n  \
    \      }\n        if (n <= 5l) {\n            return 3l;\n        }\n        if\
    \ (n <= 8l) {\n            return 6l;\n        }\n        return fibfib(n-1l)\
    \ + fibfib(n-2l) + fibfib(n-3l);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8phzr7tq.java:39)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0l;\n        if\
    \ (n == 0l) {\n            fibfib = 0l;\n        } else if (n == 1l) {\n     \
    \       fibfib = 1l;\n        } else if (n == 2l) {\n            fibfib = 1l;\n\
    \        } else if (n == 3l) {\n            fibfib = 1l;\n        } else if (n\
    \ == 4l) {\n            fibfib = 1l;\n        } else if (n == 5l) {\n        \
    \    fibfib = 1l;\n        } else if (n == 6l) {\n            fibfib = 1l;\n \
    \       } else if (n == 7l) {\n            fibfib = 1l;\n        } else if (n\
    \ == 8l) {\n            fibfib = 1l;\n        } else if (n == 9l) {\n        \
    \    fibfib = 1l;\n        } else if (n == 10l) {\n            fibfib = 1l;\n\
    \        } else if (n == 11l) {\n            fibfib = 1l;\n        } else if (n\
    \ == 12l) {\n            fibfib = 1l;\n        } else if (n == 13l) {\n      \
    \      fibfib = 1l;\n        } else if (n == 14l) {\n            fibfib = 1l;\n\
    \        } else if (n == 15l) {\n            fibfib = 1l;\n        } else if (n\
    \ == 16l) {\n            fibfib = 1l;\n        } else if (n == 17l) {\n      \
    \      fibfib = 1l;\n        } else if (n == 18l) {\n            fibfib = 1l;\n\
    \        } else if (n == 19l) {\n            fibfib = 1l;\n        } else if (n\
    \ == 20l) {\n            fibfib = 1l;\n        } else if (n == 21l) {\n      \
    \      fibfib = 1l;\n        } else if (n == 22l) {\n            fibfib = 1l;\n\
    \        } else if (n == 23l) {\n            fibfib = 1l;\n        } else if (n\
    \ == 24l) {\n            fibfib = 1l;\n        } else if (n == 25l) {\n      \
    \      fibfib = 1l;\n        } else if (n == 26l) {\n            fibfib = 1l;\n\
    \        } else if (n == 27l) {\n            fibfib = 1l;\n        } else if (n\
    \ == 28l) {\n            fibfib = 1l;\n        } else if (n == 29l) {\n      \
    \      fibfib = 1l;\n        } else if (n == 30l) {\n            fibfib = 1l;\n\
    \        } else if (n == 31l) {\n            fibfib = 1l;\n        } else if (n\
    \ == 32l) {\n            fibfib = 1l;\n        } else if (n == 33l) {\n      \
    \      fibfib = 1l;\n        } else if (n == 34l) {\n            fibfib = 1l;\n\
    \        } else if (n == 35l) {\n            fibfib = 1l;\n        } else if (n\
    \ == 36l) {\n            fibfib = 1l;\n        } else if (n == 37l) {\n      \
    \      fibfib = 1l;\n        } else if (n == 38l) {\n            fibfib = 1l;\n\
    \        } else if (n == 39l) {\n            fibfib = 1l;\n        } else if (n\
    \ == 40l) {\n            fibfib = 1l;\n        } else if (n == 41l) {\n      \
    \      fibfib = 1l;\n        } else if (n == 42l) {\n            fibfib = 1l;\n\
    \        } else if (n == 43l) {\n            fibfib = 1l;\n        } else if (n\
    \ == 44l) {\n            fibfib = 1l;\n        } else if (n == 45l) {\n      \
    \      fibfib = 1l;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp19x982n0.java:116: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 1) throw new RuntimeException(\"\
    fibfib: cannot compute fibfib(0) nor fibfib(1)\");\n        long a = 0l, b = 1l;\n\
    \        long fibfib0 = 0, fibfib1 = 1l;\n        for (long i = 2; i <= n; i++)\
    \ {\n            a = b;\n            fibfib0 = fibfib1 + fibfib0;\n          \
    \  fibfib1 = a + b;\n            b = fibfib0;\n        }\n        return fibfib0;\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_c_085p1.java:36)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 3) {\n            return\
    \ 1;\n        } else {\n            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzm_zm_0p.java:30)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0;\n        if(n<=1l)\
    \ return 0l;\n        if(n<2l) return 1l;\n        fibfib = (fibfib(n-1l) + fibfib(n-2l)\
    \ + fibfib(n-3l))\n        return fibfib;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvh1vw3y1.java:25: error: ';' expected\n        fibfib = (fibfib(n-1l)\
    \ + fibfib(n-2l) + fibfib(n-3l))\n                                           \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 0)\n            throw\
    \ new IllegalArgumentException(\"Input number should be positive\");\n       \
    \ if (n == 1)\n            return 0;\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: Input\
    \ number should be positive\n\tat Problem.fibfib(tmpiwlv5buc.java:23)\n\tat Problem.fibfib(tmpiwlv5buc.java:26)\n\
    \tat Problem.main(tmpiwlv5buc.java:29)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        List<Long> ls = new ArrayList<>();\n\
    \        ls.add(0l);\n        ls.add(0l);\n        ls.add(1l);\n        ls.add(2l);\n\
    \        long fibonacci = 0;\n        boolean flag = false;\n        for(int i\
    \ = 3; i <= n; i++) {\n            flag = false;\n            for (long l : ls)\
    \ {\n                if(l == 0) {\n                    flag = true;\n        \
    \            break;\n                } else {\n                    fibonacci =\
    \ fibonacci + l;\n                }\n            }\n            if(flag == false)\
    \ {\n                ls.add(0l);\n                ls.add(1l);\n              \
    \  ls.add(2l);\n                fibonacci = fibonacci + 2;\n            } else\
    \ {\n                ls.add(0l);\n                ls.add(1l);\n              \
    \  ls.add(2l);\n                fibonacci = fibonacci + 3;\n            }\n  \
    \      }\n        return fibonacci;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp88ath_n1.java:54)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 3) {\n            return\
    \ n;\n        } else {\n            return (fibfib(n-1) + fibfib(n-2) + fibfib(n-3));\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvj81ucvi.java:29)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n < 2) return 0L;\n     \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpusmmyjnc.java:26)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long sum = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            long num = i;\n            for (long j =\
    \ 0; j < i; j++) {\n                num = num + i;\n            }\n          \
    \  sum += num;\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyu1vvm9y.java:33)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n <= 2)\n            return\
    \ 0;\n        long prev = fibfib(n-1);\n        long current = prev + prev + prev;\n\
    \        long sum = prev + current;\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnwr9hvo.java:30)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if ( n <= 0 ) return 0L;\n \
    \       long result = 0L;\n        for ( long i = 1l ; i <= n ; i++ ) {\n    \
    \        result = result + i;\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppv8bned5.java:30)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n >= 2l)\n            return\
    \ fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l);\n        return 0l;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa2yc9a1p.java:27)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // your code here\n        if\
    \ (n <= 2)\n            return 0;\n        long fibfib = (long) (fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3));\n        return fibfib;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf4b0jr3q.java:29)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n < 0)\n            throw\
    \ new IllegalArgumentException();\n        if(n == 0)\n            return 0;\n\
    \        if(n == 1)\n            return 0;\n        if(n == 2)\n            return\
    \ 1;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0;\n        if\
    \ (n <= 2) {\n            fibfib = 0;\n        } else {\n            fibfib =\
    \ (fibfib * (3l)) + ((fibfib * (2l))) + ((fibfib * (1l)));\n        }\n      \
    \  return fibfib;\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpav4h4cyv.java:31)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 3) {\n            return\
    \ 1;\n        }\n        if (n == 3) {\n            return 1;\n        }\n   \
    \     return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1s8__im8.java:32)\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long[] fibbonacci = new long[n];\n\
    \        fibbonacci[0] = 0;\n        fibbonacci[1] = 1;\n        fibbonacci[2]\
    \ = 1;\n        long sum;\n        for(int i = 2; i < n; i++) {\n            sum\
    \ = fibbonacci[i-1] + fibbonacci[i-2];\n            fibbonacci[i] = sum;\n   \
    \     }\n        return fibbonacci[n-1];\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3yk3r90r.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] fibbonacci = new long[n];\n               \
    \                      ^\n/tmp/tmp3yk3r90r.java:31: error: incompatible types:\
    \ possible lossy conversion from long to int\n        return fibbonacci[n-1];\n\
    \                           ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib0 = 0;\n        long\
    \ fibfib1 = 1;\n        long fibfib2 = 1;\n        long fibfib3 = 1;\n       \
    \ if (n <= 2) {\n            fibfib0 = fibfib1;\n            fibfib1 = fibfib2;\n\
    \            fibfib2 = fibfib3;\n            fibfib3 = fibfibfib3;\n         \
    \   return fibfib0;\n        } else {\n            fibfib1 = fibfib2;\n      \
    \      fibfib2 = fibfib3;\n            fibfib3 = fibfibfib3;\n            fibfib3\
    \ = fibfibfib3;\n            fibfib2 = fibfibfib2;\n            fibfib1 = fibfib1;\n\
    \            fibfib0 = fibfib0;\n            fibfib3 = fibfib3;\n            fibfib2\
    \ = fibfib2;\n            return fibfib3;\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiw7f20wm.java:30: error: cannot find symbol\n            fibfib3\
    \ = fibfibfib3;\n                      ^\n  symbol:   variable fibfibfib3\n  location:\
    \ class Problem\n/tmp/tmpiw7f20wm.java:35: error: cannot find symbol\n       \
    \     fibfib3 = fibfibfib3;\n                      ^\n  symbol:   variable fibfibfib3\n\
    \  location: class Problem\n/tmp/tmpiw7f20wm.java:36: error: cannot find symbol\n\
    \            fibfib3 = fibfibfib3;\n                      ^\n  symbol:   variable\
    \ fibfibfib3\n  location: class Problem\n/tmp/tmpiw7f20wm.java:37: error: cannot\
    \ find symbol\n            fibfib2 = fibfibfib2;\n                      ^\n  symbol:\
    \   variable fibfibfib2\n  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n == 0)\n            return\
    \ 0;\n        if(n == 1)\n            return 1;\n        if(n == 2)\n        \
    \    return 1;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz4m6q1_b.java:32)\n"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 0) {\n            return\
    \ 0L;\n        }\n        if (n <= 3) {\n            return 1L;\n        }\n \
    \       return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqn3mfpjh.java:32)\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 0) {\n            throw\
    \ new IllegalArgumentException();\n        }\n\n        if (n == 0) {\n      \
    \      return 0;\n        }\n\n        if (n == 1) {\n            return 1;\n\
    \        }\n\n        if (n == 2) {\n            return 1;\n        }\n\n    \
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk78qrks6.java:42)\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 1) return 0;\n    \
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz6tfc3co.java:26)\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 1) return n;\n    \
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpegvvuh59.java:26)\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // The fibonacci sequence starts\
    \ from 0 (i.e. fibfib(0) = 0).\n        long x = 0, y = 1;\n\n        // The fibfib()\
    \ method can calculate the n'th element of the fibonacci sequence starting from\
    \ 0.\n        for (int i = 0; i < n; i++) {\n            long temp = (x + y);\
    \ // x + y is the value of fibonacci sequence.\n            x = y; // y is the\
    \ previous value of the fibonacci sequence.\n            y = temp;\n        }\n\
    \        // return value of the last element of the fibonacci sequence which is\
    \ the value of fibonacci sequence n.\n        return x;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqxp2gnrr.java:36)\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // Write your solution here\n\
    \        long result = 1;\n        for(long i = 1; i <= n; i++){\n           \
    \ result *= i;\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpm52e0xry.java:30)\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfibResult = 0;\n   \
    \     for (long i = 0; i <= n; i++) {\n            fibfibResult += i;\n      \
    \  }\n        return fibfibResult;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4xlt9a2_.java:29)\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        return fibfib(n-1, 1, 1);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3qsdmnul.java:22: error: method fibfib in class Problem cannot\
    \ be applied to given types;\n        return fibfib(n-1, 1, 1);\n            \
    \   ^\n  required: long\n  found:    long,int,int\n  reason: actual and formal\
    \ argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // Your solution here\n    }\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0okkev7p.java:23: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011771
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) return 0L;\n   \
    \     if (n == 1) return 1L;\n        if (n == 2) return 1L;\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0tx112sy.java:29)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) return 0;\n    \
    \    if (n == 1) return 1;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.java:24)\n\tat Problem.fibfib(tmp5cun19vn.java:24)\n\
    \tat Problem.fibfib(tmp5cun19vn.j"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long x = 0;\n        if (n ==\
    \ 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return 1;\n\
    \        if (n <= 3) return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n \
    \       System.out.println(fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3));\n \
    \       return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1g2h9lyw.java:32)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fib_0 = 0;\n        long\
    \ fib_1 = 1;\n        long fib_2 = 1;\n        if (n < 0) {\n            return\
    \ fib_0;\n        } else if (n == 0) {\n            return fib_0;\n        } else\
    \ if (n == 1) {\n            return fib_1;\n        } else {\n            while\
    \ (fib_2 < n) {\n                fib_2 = fib_1 + fib_2;\n                fib_1\
    \ = fib_0;\n                fib_0 = fib_2;\n            }\n            return\
    \ fib_1;\n        }\n    }\n    public static void main(String[] args) {\n   \
    \ assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpheiwwolh.java:41)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 3) return 0;\n    \
    \    long sum = 0;\n        long prev1 = 0;\n        long prev2 = 1;\n       \
    \ for (int i = 2; i < n; i++) {\n            sum = prev1 + prev2 + prev2;\n  \
    \          prev1 = prev2;\n            prev2 = sum;\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpilcmlyo0.java:34)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0;\n        if(n\
    \ <= 0) {\n            return fibfib;\n        } else {\n            fibfib =\
    \ (n-1) + (n-2) + (n+2);\n            return fibfib;\n        }\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo9q66j62.java:31)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        return (n == 0) \n         \
    \   ? 0\n            : (n == 1) \n                ? 0\n                : (n ==\
    \ 2)\n                    ? 1\n                    : fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        List<Long> cache = new ArrayList<>();\n\
    \        if (n < 0) return 0;\n        if (n <= 2l) return n;\n        if (cache.size()\
    \ < n) return cache.addAll(fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l));\n    \
    \    return cache.get(n-2l);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcjcm0wo5.java:25: error: incompatible types: long cannot be converted\
    \ to Collection<? extends Long>\n        if (cache.size() < n) return cache.addAll(fibfib(n-1l)\
    \ + fibfib(n-2l) + fibfib(n-3l));\n                                          \
    \                                    ^\n/tmp/tmpcjcm0wo5.java:26: error: incompatible\
    \ types: possible lossy conversion from long to int\n        return cache.get(n-2l);\n\
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0;\n        if\
    \ (n == 0) fibfib = 0;\n        if (n == 1) fibfib = 0;\n        if (n == 2) fibfib\
    \ = 1;\n        fibbonaci(n, n, (long) fibfib);\n        return fibfib;\n    }\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxcpgs3q2.java:26: error: cannot find symbol\n        fibbonaci(n,\
    \ n, (long) fibfib);\n        ^\n  symbol:   method fibbonaci(long,long,long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        return n <= 0l ? 0l :\n    \
    \           n < 1l ? 0l :\n               n < 2l ? 1l :\n               n < 3l\
    \ ? fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l) :\n               fibfib(n-1l)\
    \ + fibfib(n-2l) + fibfib(n-3l) + fibfib(n-4l) ;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn_2j6ss3.java:30)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 0) return 0;\n    \
    \    if (n <= 2) return 1;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjju8bftg.java:28)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // TODO: Write your Java code\
    \ here\n        if (n <= 0) {\n            return 0;\n        }\n        if (n\
    \ == 1) {\n            return 0;\n        }\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6z6fjmoc.java:32)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n >= 0l) {\n           \
    \ long previous = 0l;\n            if (n > 0l) {\n                previous = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n            }\n            return previous;\n\
    \        }\n        return 0;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx396x2wu.java:32)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 2l) return 0l;\n   \
    \     if (n < 4l) return 1l;\n        return (fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l));\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0l;\n        } else if (n == 1) {\n            return 1l;\n        } else if\
    \ (n == 2) {\n            return 1l;\n        } else if (n < 0) {\n          \
    \  throw new ArithmeticException(\"n must be positive\");\n        }\n       \
    \ long[] fibfib = new long[n];\n        fibfib[0] = 0;\n        fibfib[1] = 0;\n\
    \        fibfib[2] = 1;\n        fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3];\n\
    \        return fibfib[n];\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpky2edxh3.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] fibfib = new long[n];\n                   \
    \              ^\n/tmp/tmpky2edxh3.java:35: error: incompatible types: possible\
    \ lossy conversion from long to int\n        fibfib[n] = fibfib[n-1] + fibfib[n-2]\
    \ + fibfib[n-3];\n               ^\n/tmp/tmpky2edxh3.java:35: error: incompatible\
    \ types: possible lossy conversion from long to int\n        fibfib[n] = fibfib[n-1]\
    \ + fibfib[n-2] + fibfib[n-3];\n                            ^\n/tmp/tmpky2edxh3.java:35:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    fibfib[n] = fibfib[n-1] + fibfib[n-2] + fibfib[n-3];\n                  \
    \                        ^\n/tmp/tmpky2edxh3.java:35: error: incompatible types:\
    \ possible lossy conversion from long to int\n        fibfib[n] = fibfib[n-1]\
    \ + fibfib[n-2] + fibfib[n-3];\n                                             \
    \           ^\n/tmp/tmpky2edxh3.java:36: error: incompatible types: possible lossy\
    \ conversion from long to int\n        return fibfib[n];\n                   \
    \   ^\n6 errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 3) {\n            return\
    \ 0;\n        }\n        return fibfib((n + 1l)) / 2l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt2x3owse.java:28)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib[] = fibfibArray(n);\n\
    \        return fibfibArray[n-1];\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpweo8906r.java:22: error: cannot find symbol\n        long fibfib[]\
    \ = fibfibArray(n);\n                        ^\n  symbol:   method fibfibArray(long)\n\
    \  location: class Problem\n/tmp/tmpweo8906r.java:23: error: cannot find symbol\n\
    \        return fibfibArray[n-1];\n               ^\n  symbol:   variable fibfibArray\n\
    \  location: class Problem\n/tmp/tmpweo8906r.java:23: error: incompatible types:\
    \ possible lossy conversion from long to int\n        return fibfibArray[n-1];\n\
    \                            ^\n3 errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 1l) return 0l;\n  \
    \      if (n <= 3l) return 1l;\n        return fibfib((n - 3l) + fibfib((n - 2l)\
    \ + fibfib(n - 1l)));\n    }\n    public static void main(String[] args) {\n \
    \   assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfs_7fwnf.java:29)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        } else if (n > 0) {\n            return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n        }\n        return fibfib(n-2) + fibfib(n-3) + fibfib(n-4);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.java:27)\n\tat Problem.fibfib(tmp5izfslg8.java:27)\n\
    \tat Problem.fibfib(tmp5izfslg8.j"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n >= 1l && n <= 3l)\n  \
    \          return 1l;\n        else if (n >= 5l && n <= 8l)\n            return\
    \ fibfib((n - 1l) + fibfib((n - 2l) + fibfib((n - 3l))));\n        else return\
    \ 0l;\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0bakxcej.java:30)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long result = 0;\n        if\
    \ (n == 0) return 0;\n        if (n == 1) return 1;\n        if (n == 2) return\
    \ 1;\n        if (n % 2 == 0) return fibfib(n-1) + fibfib(n-2);\n        else\
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppio5u2ow.java:31)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) return 0L;\n   \
    \     if (n == 1) return 1L;\n        if (n == 2) return 1L;\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0tx112sy.java:29)\n"
  stdout: ''
  timestamp: 1660011769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 1)\n            return\
    \ 0;\n        else\n            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu7eqeelv.java:28)\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long f = 1;\n        for (long\
    \ i = 2; i <= n; i++) {\n            f = f + i;\n        }\n        return f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprnuye899.java:29)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // Base Case\n        if(n ==\
    \ 0)\n            return (0l);\n        \n        if(n == 1)\n            return\
    \ (1l);\n        \n        // Recursive Case\n        return (fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3));\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmp7k_7yfh7.java:23)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\tat Problem.fibfib(tmp7k_7yfh7.java:30)\n\
    \tat Problem.fibfib(tmp7k_7yfh7.j"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // If fibfib(n) is a number,\
    \ return fibfib(n).\n        \n        \n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3s4_fp7_.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if ( n <= 0 ) return 0;\n  \
    \      if ( n < 3 ) return 1;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr_t0wlf4.java:28)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 1;\n        long\
    \ fibfib1 = 1;\n        long fibfib2 = 1;\n        long fibfib3 = 1;\n       \
    \ long fibfib4 = 0;\n        long fibfib5 = 0;\n        long fibfib6 = 0;\n  \
    \      long fibfib7 = 1;\n        long fibfib8 = 1;\n        for (int i = 1; i\
    \ < n; i++) {\n            fibfib1 = fibfib2;\n            fibfib2 = fibfib3;\n\
    \            fibfib3 = fibfib4;\n            fibfib4 = fibfib5;\n            fibfib5\
    \ = fibfib6;\n            fibfib6 = fibfibfib7;\n            fibfib7 = fibfib8;\n\
    \            fibfib8 = fibfib8;\n            fibfib = fibfibfib1 + fibfib2 + fibfib3\
    \ + fibfib4 + fibfib5 + fibfib6 + fibfib7 + fibfib8;\n            fibfib1 += fibfib2;\n\
    \            fibfib2 += fibfib3;\n            fibfib3 += fibfib4;\n          \
    \  fibfib4 += fibfib5;\n            fibfib5 += fibfib6;\n            fibfib6 +=\
    \ fibfib7;\n            fibfib7 += fibfib8;\n            fibfib8 += fibfib8;\n\
    \        }\n        return fibfib;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppnx8wih_.java:37: error: cannot find symbol\n            fibfib6\
    \ = fibfibfib7;\n                      ^\n  symbol:   variable fibfibfib7\n  location:\
    \ class Problem\n/tmp/tmppnx8wih_.java:40: error: cannot find symbol\n       \
    \     fibfib = fibfibfib1 + fibfib2 + fibfib3 + fibfib4 + fibfib5 + fibfib6 +\
    \ fibfib7 + fibfib8;\n                     ^\n  symbol:   variable fibfibfib1\n\
    \  location: class Problem\n2 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0;\n        fibfib\
    \ = (fibfib < 0l) ? 1l : fibfib;\n        fibfib = (fibfib > 3l) ? 3l : fibfib;\n\
    \        fibfib = (long) (fibfib * (long) Math.pow(1.0l, n - 1));\n        return\
    \ fibfib;\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_s4a4pbs.java:25: error: ')' expected\n        fibfib = (long)\
    \ (fibfib * (long) Math.pow(1.0l, n - 1));\n                                 \
    \                    ^\n/tmp/tmp_s4a4pbs.java:25: error: ';' expected\n      \
    \  fibfib = (long) (fibfib * (long) Math.pow(1.0l, n - 1));\n                \
    \                                      ^\n/tmp/tmp_s4a4pbs.java:25: error: not\
    \ a statement\n        fibfib = (long) (fibfib * (long) Math.pow(1.0l, n - 1));\n\
    \                                                          ^\n/tmp/tmp_s4a4pbs.java:25:\
    \ error: ';' expected\n        fibfib = (long) (fibfib * (long) Math.pow(1.0l,\
    \ n - 1));\n                                                             ^\n4\
    \ errors\n"
  stdout: ''
  timestamp: 1660011772
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib0 = 0L;\n       \
    \ long fibfib1 = 1L;\n        long fibfib2 = 1L;\n        long fibfib3 = 1L;\n\
    \        long fibfib4 = 0L;\n        long fibfib5 = -1L;\n        long fibfib6\
    \ = -1L;\n        if (n > 0) {\n            if (n <= 3) {\n                fibfib0\
    \ = 0L;\n            } else if (n <= 5) {\n                fibfib1 = 1L;\n   \
    \             fibfib2 = 1L;\n                fibfib3 = 1L;\n            } else\
    \ if (n <= 8) {\n                fibfib4 = 0L;\n                fibfib5 = 1L;\n\
    \                fibfib6 = 1L;\n            }\n        }\n        return fibfib6;\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0jfj7amd.java:45)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if ( n == 0 )\n            return\
    \ 0;\n        else if ( n == 1 )\n            return 0;\n        else if ( n ==\
    \ 2 )\n            return 1;\n        else if ( n == 3 )\n            return 1;\n\
    \        else return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 0)\n            return\
    \ 0;\n        if (n <= 2)\n            return 1;\n        return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4r37ra33.java:30)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        long x = fibfib(n-1);\n\
    \        long y = fibfib(n-2);\n        return (x+y)+y;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcxop1mng.java:37)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n==0l) return 0l;\n     \
    \   if(n==1l) return 1l;\n        if(n==2l) return 1l;\n        if(n==3l) return\
    \ 1l;\n        return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp35_hvp2z.java:30)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0l;\n        if\
    \ (n == 0) fibfib = 0l;\n        else if (n == 1) fibfib = 1l;\n        else if\
    \ (n == 2) fibfib = 1l;\n        else if (n > 2) fibfib = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n        return fibfib;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpllrdtt1w.java:31)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 1) {\n            return\
    \ 0;\n        } else {\n            return (fibfib(n-1) + fibfib(n-2) + fibfib(n-3));\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe3e71qtv.java:29)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 2) {\n            return\
    \ n;\n        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n   \
    \ }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpofsm26bn.java:28)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0)\n            return\
    \ 0;\n        if (n == 1)\n            return 1;\n        if (n == 2)\n      \
    \      return 1;\n        long sum = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprklu95v_.java:33)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fib_fib = 0;\n        if\
    \ (n >= 0) {\n            fib_fib = fibfib(n);\n        } else {\n           \
    \ fib_fib = n;\n        }\n        return fib_fib;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmp_heua3ai.java:22)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.java:24)\n\tat Problem.fibfib(tmp_heua3ai.java:24)\n\
    \tat Problem.fibfib(tmp_heua3ai.j"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0 || n == 1) {\n  \
    \          return 0;\n        }\n        if (n >= 2) {\n            long temp1\
    \ = fibfib(n-1);\n            long temp2 = fibfib(n-2);\n            long temp3\
    \ = fibfib(n-3);\n            return temp1 + temp2 + temp3;\n        }\n     \
    \   throw new Exception(\"Invalid n\");\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7k959644.java:31: error: unreported exception Exception; must be\
    \ caught or declared to be thrown\n        throw new Exception(\"Invalid n\");\n\
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // Your code here\n        long\
    \ fibfib = 0;\n        if(n==0){\n            fibfib=0l;\n        }\n        if(n==1){\n\
    \            fibfib=0l;\n        }\n        if(n==2){\n            fibfib=1l;\n\
    \        }\n        if(n==3){\n            fibfib=1l;\n        }\n        if(n==4){\n\
    \            fibfib=2l;\n        }\n        if(n==5){\n            fibfib=2l;\n\
    \        }\n        if(n==6){\n            fibfib=3l;\n        }\n        if(n==7){\n\
    \            fibfib=3l;\n        }\n        if(n==8){\n            fibfib=6l;\n\
    \        }\n        if(n==9){\n            fibfib=6l;\n        }\n        if(n==10){\n\
    \            fibfib=9l;\n        }\n        if(n==11){\n            fibfib=9l;\n\
    \        }\n        if(n==12){\n            fibfib=12l;\n        }\n        if(n==13){\n\
    \            fibfib=12l;\n        }\n        if(n==14){\n            fibfib=15l;\n\
    \        }\n        if(n==15){\n            fibfib=15l;\n        }\n        if(n==16){\n\
    \            fibfib=21l;\n        }\n        if(n==17){\n            fibfib=21l;\n\
    \        }\n        if(n==18){\n            fibfib=28l;\n        }\n        if(n==19){\n\
    \            fibfib=28l;\n        }\n        if(n==20){\n            fibfib=35l;\n\
    \        }\n        if(n==21){\n            fibfib=35l;\n        }\n        if(n==22){\n\
    \            fibfib=62l;\n        }\n        if(n==23){\n            fibfib=62l;\n\
    \        }\n        if(n==24){\n            fibfib=93l;\n        }\n        if(n==25){\n\
    \            fibfib=93l;\n        }\n        if(n==26){\n            fibfib=126l;\n\
    \        }\n        if(n==27){\n            fibfib=126l;\n        }\n        if(n==28){\n\
    \            fibfib=211l;\n        }\n        if(n==29){\n            fibfib=211l;\n\
    \        }\n        if(n==30){\n            fibfib=296l;\n        }\n        if(n==31){\n\
    \            fibfib=296l;\n        }\n        if(n==32){\n            fibfib=361l;\n\
    \        }\n        if(n==33){\n            fibfib=\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcxy8tgeq.java:125: error: illegal start of expression\n    }\n\
    \    ^\n/tmp/tmpcxy8tgeq.java:126: error: illegal start of expression\n    public\
    \ static void main(String[] args) {\n    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long prev = 0;\n        long\
    \ curr = 1;\n        long temp = 0;\n        while(true) {\n            if(n >=\
    \ curr) {\n                temp = prev + curr;\n                prev = curr;\n\
    \                curr = temp;\n                if(n == curr)\n               \
    \     return curr;\n            }\n            else {\n                temp =\
    \ prev;\n                prev = curr;\n                curr = n;\n           \
    \ }\n        }\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps65x2t7v.java:41)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n <= 1) return 0;\n     \
    \   else return fibbonacci(n-1) + fibbonacci(n-2) + fibbonacci(n-3);\n    }\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8dwieyww.java:23: error: cannot find symbol\n        else return\
    \ fibbonacci(n-1) + fibbonacci(n-2) + fibbonacci(n-3);\n                    ^\n\
    \  symbol:   method fibbonacci(long)\n  location: class Problem\n/tmp/tmp8dwieyww.java:23:\
    \ error: cannot find symbol\n        else return fibbonacci(n-1) + fibbonacci(n-2)\
    \ + fibbonacci(n-3);\n                                      ^\n  symbol:   method\
    \ fibbonacci(long)\n  location: class Problem\n/tmp/tmp8dwieyww.java:23: error:\
    \ cannot find symbol\n        else return fibbonacci(n-1) + fibbonacci(n-2) +\
    \ fibbonacci(n-3);\n                                                        ^\n\
    \  symbol:   method fibbonacci(long)\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0 || n == 1) {\n  \
    \          return n;\n        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.java:25)\n\tat Problem.fibfib(tmpnfbcnt27.java:25)\n\
    \tat Problem.fibfib(tmpnfbcnt27.j"
  stdout: ''
  timestamp: 1660011768
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        } else if (n == 1) {\n            return 1;\n        } else {\n\
    \            long ans = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n           \
    \ return ans;\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.java:27)\n\tat Problem.fibfib(tmp1lb8w6go.java:27)\n\
    \tat Problem.fibfib(tmp1lb8w6go.j"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // Write your code here.\n \
    \       if (n == 0 || n == 1) {\n            return 0;\n        }\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.java:26)\n\tat Problem.fibfib(tmp9ds80aaw.java:26)\n\
    \tat Problem.fibfib(tmp9ds80aaw.j"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) return 0l;\n   \
    \     if (n == 1) return 1l;\n        if (n == 2) return 1l;\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg6brl1um.java:29)\n"
  stdout: ''
  timestamp: 1660011773
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0l) return 0l;\n  \
    \      if (n == 1l) return 1l;\n        if (n == 2l) return 2l;\n        return\
    \ fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_on9wiv9.java:28)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long a = 1, b = 1, c = 0;\n\
    \        for(int i = 1; i <= n; i++){\n            c = (a + b+c);\n          \
    \  a=b;\n            b=c;\n        }\n        return c;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo1sn7fm3.java:31)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // Complete this function\n\
    \        if (n < 3)\n            return 0;\n        else\n            return fibfib(n-2)\
    \ + fibfib(n-1) + fibfib(n);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp64ohh1iw.java:29)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 3) return 0l;\n   \
    \     if (n <= 2) return 1l;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9rjdh43k.java:27)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // TODO: Implement a recursive\
    \ solution\n        if (n <= 2) return 0;\n        else return fib(n - 1) + fib(n\
    \ - 2) + fib(n - 3);\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvxcki_c2.java:24: error: cannot find symbol\n        else return\
    \ fib(n - 1) + fib(n - 2) + fib(n - 3);\n                    ^\n  symbol:   method\
    \ fib(long)\n  location: class Problem\n/tmp/tmpvxcki_c2.java:24: error: cannot\
    \ find symbol\n        else return fib(n - 1) + fib(n - 2) + fib(n - 3);\n   \
    \                              ^\n  symbol:   method fib(long)\n  location: class\
    \ Problem\n/tmp/tmpvxcki_c2.java:24: error: cannot find symbol\n        else return\
    \ fib(n - 1) + fib(n - 2) + fib(n - 3);\n                                    \
    \          ^\n  symbol:   method fib(long)\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) return 0;\n    \
    \    if (n == 1) return 1;\n        if (n == 2) return 2;\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8wu1f3c8.java:28)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long[] arr = {0, 1, 1};\n  \
    \      Long[] arr = new Long[4];\n        for(int i = 0; i< 4; i++){\n       \
    \     arr[i] = fibfib(i) * arr[i-1];\n        }\n        return arr[n];\n    }\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjgdt4i8k.java:23: error: variable arr is already defined in method\
    \ fibfib(long)\n        Long[] arr = new Long[4];\n               ^\n/tmp/tmpjgdt4i8k.java:27:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    return arr[n];\n                   ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n<=1l) {\n            return\
    \ 0l;\n        }\n        long fib = fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l);\n\
    \        return fib;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp34snw7dy.java:29)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfibs[] = new long[n\
    \ + 1];\n        fibfibs[0] = 0;\n        fibfibs[1] = 0;\n        fibfibs[2]\
    \ = 1;\n        fibfibs[n] = fibfibs[n-1] + fibfibs[n-2] + fibfibs-3;\n      \
    \  return fibfibs[n];\n    }\n    public static void main(String[] args) {\n \
    \   assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppr8mrgu2.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long fibfibs[] = new long[n + 1];\n              \
    \                      ^\n/tmp/tmppr8mrgu2.java:26: error: incompatible types:\
    \ possible lossy conversion from long to int\n        fibfibs[n] = fibfibs[n-1]\
    \ + fibfibs[n-2] + fibfibs-3;\n                ^\n/tmp/tmppr8mrgu2.java:26: error:\
    \ incompatible types: possible lossy conversion from long to int\n        fibfibs[n]\
    \ = fibfibs[n-1] + fibfibs[n-2] + fibfibs-3;\n                              ^\n\
    /tmp/tmppr8mrgu2.java:26: error: incompatible types: possible lossy conversion\
    \ from long to int\n        fibfibs[n] = fibfibs[n-1] + fibfibs[n-2] + fibfibs-3;\n\
    \                                             ^\n/tmp/tmppr8mrgu2.java:26: error:\
    \ bad operand types for binary operator '+'\n        fibfibs[n] = fibfibs[n-1]\
    \ + fibfibs[n-2] + fibfibs-3;\n                                              \
    \   ^\n  first type:  long\n  second type: long[]\n/tmp/tmppr8mrgu2.java:27: error:\
    \ incompatible types: possible lossy conversion from long to int\n        return\
    \ fibfibs[n];\n                       ^\n6 errors\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 3) {\n            return\
    \ 0;\n        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n   \
    \ }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphs464akh.java:28)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 3) {\n            return\
    \ n;\n        }\n        long result = (long) Math.pow(fibfib(n-1), 3) + fibfib(n-2);\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkgotx0hw.java:29)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib0 = 0;\n        long\
    \ fibfib1 = 1;\n        long fibfib2 = 1;\n        long fibfib3 = 1;\n       \
    \ while (fibfib0 < n) {\n            fibfib3 = fibfib2 + fibfib1;\n          \
    \  fibfib1 = fibfib0;\n            fibfib0 = fibfib3;\n            fibfib2 = fibfib1;\n\
    \        }\n        return fibfib3;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5b3tsys7.java:35)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n >= 2l) \n            return\
    \ fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l);\n        else \n            return\
    \ 1l;\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ptonr0a.java:28)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 2) {\n            return\
    \ 0;\n        }\n        long first = fibfib(n - 1);\n        long second = fibfib(n\
    \ - 2);\n        return first + second + fibfib(n - 3);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpht7qjkph.java:30)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 2l) return 1l;\n  \
    \      else\n            return fibfib((n - 2l) + 1) + fibfib((n - 1l));\n   \
    \ }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsli4enr8.java:28)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long result = 0;\n        for\
    \ (int i = 0; i <= n; i++) {\n            result *= fibfib(i);\n        }\n  \
    \      return result;\n    }\n    public static void main(String[] args) {\n \
    \   assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmpazlha9kh.java:22)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.java:24)\n\tat Problem.fibfib(tmpazlha9kh.java:24)\n\
    \tat Problem.fibfib(tmpazlha9kh.j"
  stdout: ''
  timestamp: 1660011774
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0 || n == 1) {\n  \
    \          return 0;\n        } else if (n == 2) {\n            return 1;\n  \
    \      } else {\n            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     long retval = fibfib(n-1);\n        retval = retval + fibfib(n-2);\n   \
    \     return retval;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpucgxixp3.java:33)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long sum = 0;\n        long\
    \ fibfib = (1l);\n        for( int i = 0; i <= n; i++) {\n            sum += fibfib;\n\
    \            fibfib += fibfib;\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6swxi26j.java:31)\n"
  stdout: ''
  timestamp: 1660011774
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 2) return n;\n     \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo43qotix.java:26)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long a = 1L;\n        long b\
    \ = 1L;\n        for (long i = 3L; i <= n; i++) {\n            a = b;\n      \
    \      b = a + b;\n        }\n        return b;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpmxqzkurm.java:32)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0 || n == 1 || n ==\
    \ 2)\n            return n;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnincf3r.java:27)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0l || n == 1l) {\n\
    \            return 0l;\n        }\n        return fibfib(n-1l) + fibfib(n-2l)\
    \ + fibfib(n-3l);\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.java:25)\n\tat Problem.fibfib(tmpqutfs3ue.java:25)\n\
    \tat Problem.fibfib(tmpqutfs3ue.j"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 3) {\n            return\
    \ n;\n        } else if (n > 3) {\n            return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n        } else {\n            return 1;\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp69331rin.java:31)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 0) {\n            return\
    \ 0L;\n        }\n        if (n == 1) {\n            return 1L;\n        }\n \
    \       if (n == 2) {\n            return 1L;\n        }\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkkn3vrwp.java:35)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) return 0l;\n   \
    \     if (n == 1) return 0l;\n        if (n == 2) return 1l;\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n == 1)\n            return\
    \ 0;\n        if(n == 0)\n            return 1;\n        return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\tat Problem.fibfib(tmp4x5rlaxh.java:26)\n\
    \tat Problem.fibfib(tmp4x5rlaxh.j"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0l;\n        } else if (n == 1) {\n            return 1l;\n        } else if\
    \ (n == 2) {\n            return 1l;\n        }\n        return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphzn1cw42.java:33)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 2)\n            return\
    \ 0;\n        return fibonacci(n) + fibonacci(n - 1) + fibonacci(n - 2);\n   \
    \ }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ktjao4m.java:24: error: cannot find symbol\n        return fibonacci(n)\
    \ + fibonacci(n - 1) + fibonacci(n - 2);\n               ^\n  symbol:   method\
    \ fibonacci(long)\n  location: class Problem\n/tmp/tmp8ktjao4m.java:24: error:\
    \ cannot find symbol\n        return fibonacci(n) + fibonacci(n - 1) + fibonacci(n\
    \ - 2);\n                              ^\n  symbol:   method fibonacci(long)\n\
    \  location: class Problem\n/tmp/tmp8ktjao4m.java:24: error: cannot find symbol\n\
    \        return fibonacci(n) + fibonacci(n - 1) + fibonacci(n - 2);\n        \
    \                                         ^\n  symbol:   method fibonacci(long)\n\
    \  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long number = 0;\n        if\
    \ (n == 0) {\n            number = 0;\n        } else if (n == 1) {\n        \
    \    number = 1;\n        } else {\n            number = fibfib((n - 1) + fibfib((n\
    \ - 2)) + fibfib((n - 3)));\n        }\n        return number;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.java:28)\n\tat Problem.fibfib(tmp67avx00w.java:28)\n\
    \tat Problem.fibfib(tmp67avx00w.j"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n < 2l) return 0l;\n    \
    \    else if(n < 4l) return 1l;\n        else if(n < 9l) return fibfib((6l) +\
    \ fibfib((3l))) + fibfib((2l));\n        else if(n < 16l) return fibfib((10l)\
    \ + fibfib((5l))) + fibfib((7l));\n        else return fibfib((20l) + fibfib((8l)))\
    \ + fibfib((16l));\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.java:24)\n\tat Problem.fibfib(tmpob9n9rph.java:24)\n\
    \tat Problem.fibfib(tmpob9n9rph.j"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0;\n        if\
    \ (n > 0) {\n            fibfib += fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \        }\n        return fibfib;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8o5jl_p2.java:29)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibbonacci[] = fibfib(n);\n\
    \        return fibbonacci[n];\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvgv3nagu.java:22: error: incompatible types: long cannot be converted\
    \ to long[]\n        long fibbonacci[] = fibfib(n);\n                        \
    \          ^\n/tmp/tmpvgv3nagu.java:23: error: incompatible types: possible lossy\
    \ conversion from long to int\n        return fibbonacci[n];\n               \
    \           ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 0) throw new IllegalArgumentException(\"\
    n must be a positive integer\");\n        if (n == 0) return 0l;\n        else\
    \ if (n == 1) return 1l;\n        else return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: n must\
    \ be a positive integer\n\tat Problem.fibfib(tmp33p0q9sh.java:22)\n\tat Problem.fibfib(tmp33p0q9sh.java:25)\n\
    \tat Problem.main(tmp33p0q9sh.java:28)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 1l;\n        long\
    \ fibfibi = 1l;\n        long fibfibi = 2l;\n        long fibfibii = 2l;\n\n \
    \       if (n >= 1l) {\n            while (fibfibi <= (long)n) {\n           \
    \     fibfib = (fibfib * fibfibi - fibfibi * fibfibi - fibfibii * fibfibi - fibfib\
    \ * fibfibi - fibfibii * fibfibi - fibfibi * fibfibi - fibfibi * fibfibii - fibfibii\
    \ * fibfibi - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii\
    \ * fibfibi - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii\
    \ * fibfibi - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii\
    \ * fibfibi - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii\
    \ * fibfibfibi - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi -\
    \ fibfibii * fibfibfibi - fibfibi * fibfibii - fibfibii * fibfibii - fibfib *\
    \ fibfibi - fibfibii * fibfibi - fibfibi * fibfibii - fibfibii * fibfibii - fibfib\
    \ * fibfibi - fibfibii * fibfibi - fibfibi * fibfibii - fibfibii * fibfibii -\
    \ fibfib * fibfibi - fibfibii * fibfibfibi - fibfibi * fibfibii - fibfibii * fibfibii\
    \ - fibfib * fibfibi - fibfibii * fibfibi - fibfibi * fibfibii - fibfibii * fibfibii\
    \ - fibfib * fibfibi - fibfibii * fibfibi - fibfibi * fibfibii - fibfibii * fibfibii\
    \ - fibfib * fibfibi - fibfibii * fibfibfibi - fibfibi * fibfibii - fibfibii *\
    \ fibfibii - fibfib * fibfibi - fibfibii * fibfibfibi - fibfibi * fibfibii - fibfibii\
    \ * fibfibii - fibfib * fibfibi - fibfibii * fibfibfibi - fibfibi * fibfibii -\
    \ fibfibii * fibfibii - fibfib * fibfibi - fibfi\n    }\n    public static void\
    \ main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph8aa9ymk.java:29: error: ')' expected\n                fibfib =\
    \ (fibfib * fibfibi - fibfibi * fibfibi - fibfibii * fibfibi - fibfib * fibfibi\
    \ - fibfibii * fibfibi - fibfibi * fibfibi - fibfibi * fibfibii - fibfibii * fibfibi\
    \ - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii * fibfibi\
    \ - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii * fibfibi\
    \ - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii * fibfibi\
    \ - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii * fibfibfibi\
    \ - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii * fibfibfibi\
    \ - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii * fibfibi\
    \ - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii * fibfibi\
    \ - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii * fibfibfibi\
    \ - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii * fibfibi\
    \ - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii * fibfibi\
    \ - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii * fibfibfibi\
    \ - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii * fibfibfibi\
    \ - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfibii * fibfibfibi\
    \ - fibfibi * fibfibii - fibfibii * fibfibii - fibfib * fibfibi - fibfi\n    \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                     "
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long val0 = 0l; long val1 =\
    \ 1l;\n        long val2 = 1l;\n        long val3 = 1l;\n        long fibfib1\
    \ = 0l;\n        long fibfib2 = 1l;\n        for (int i = 2; i <= n; i++) {\n\
    \            val3 = val1 + val2;\n            val2 = val0;\n            val1 =\
    \ val3;\n            val0 = fibfib1;\n            fibfib1 = fibfib2;\n       \
    \     fibfib2 = val3;\n        }\n        return fibfib1;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1dmlenzj.java:40)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib=0;\n        for\
    \ (int i=1; i<=n; i++) {\n            fibfib=fibfib+i;\n        }\n        return\
    \ fibfib;\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyzczx9ic.java:29)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = (0L);\n      \
    \  for (long i = 3; i <= n; i++) {\n            fibfib = (fibfib * (long) i) +\
    \ i;\n        }\n        return fibfib;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr2hyqggv.java:29)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // The Fibonacci sequence is:\n\
    \        // 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,\
    \ ...\n        // By definition the fibfib(n) sequence can be defined as:\n  \
    \      // fibfib(0) = 0\n        // fibfib(1) = 0\n        // fibfib(2) = 1\n\
    \        // fibfib(n) = fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n        // Therefore\
    \ the Fibonacci sequence can be calculated by the following code:\n        if\
    \ (n <= 1)\n            return 0;\n        long first = fibfib(n-1);\n       \
    \ long second = fibfib(n-2);\n        long third = fibfib(n-3);\n        return\
    \ first + second + third;\n    }\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg0eh6u8l.java:38)\n"
  stdout: ''
  timestamp: 1660011775
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0l;\n        } else if (n == 1) {\n            return 1l;\n        } else {\n\
    \            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n        }\n    }\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.java:27)\n\tat Problem.fibfib(tmp_923osl6.java:27)\n\
    \tat Problem.fibfib(tmp_923osl6.j"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0;\n        if\
    \ (n == 0) {\n            return fibfib;\n        }\n        if (n == 1) {\n \
    \           return 1;\n        }\n        if (n == 2) {\n            return 1;\n\
    \        }\n        return fibfib + fibfib(n - 1) + fibfib(n - 2) + fibfib(n -\
    \ 3);\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprflpmubo.java:36)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 0)\n            throw\
    \ new IllegalArgumentException(\"Negative index is not allowed\");\n        if\
    \ (n == 0)\n            return 0L;\n        if (n == 1)\n            return 1L;\n\
    \        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: Negative\
    \ index is not allowed\n\tat Problem.fibfib(tmp8zsjfe7g.java:23)\n\tat Problem.fibfib(tmp8zsjfe7g.java:28)\n\
    \tat Problem.main(tmp8zsjfe7g.java:31)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0)\n            return\
    \ 0;\n        if (n == 1)\n            return 1;\n        if (n == 2)\n      \
    \      return 1;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprqrs12nj.java:32)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0;\n        \n\
    \        //fibfib = 0l;\n        \n        for(long x = 1; x <= n; x++) {\n  \
    \          fibfib = fibfib + x;\n        }\n        \n        return fibfib;\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl1o5o_nn.java:33)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long result = 0;\n        if\
    \ (n >= 1) result = n;\n        result -= 2;\n        if (n >= 2) result = result\
    \ + n - 1;\n        if (n >= 3) result = result + n - 3;\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpymystm62.java:31)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        return (int) Math.pow(fibfib(n-1),\
    \ 3);\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.java:22)\n\tat Problem.fibfib(tmpyur3_45f.java:22)\n\
    \tat Problem.fibfib(tmpyur3_45f.j"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long[] fibfib = new long[n +\
    \ 1];\n        Arrays.fill(fibfib, 0L);\n        fibfib[0] = 0L;\n        fibfib[1]\
    \ = 0L;\n        for (int i = 2; i <= n; i++) {\n            fibfib[i] = fibfib[i\
    \ - 1] + fibfib[i - 2];\n        }\n        return fibfib[n];\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5huo1ovr.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] fibfib = new long[n + 1];\n               \
    \                    ^\n/tmp/tmp5huo1ovr.java:29: error: incompatible types: possible\
    \ lossy conversion from long to int\n        return fibfib[n];\n             \
    \         ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 1l) {\n           \
    \ return 0l;\n        }\n        return (fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l))\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz9w10gqq.java:25: error: ';' expected\n        return (fibfib(n-1l)\
    \ + fibfib(n-2l) + fibfib(n-3l))\n                                           \
    \                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0 || n == 1)\n    \
    \        return n;\n        else if (n == 2)\n            return 1;\n        else\n\
    \            return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxb4pr0fy.java:31)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = (0l);\n      \
    \  for (long x = 1; x <= n; x++) {\n            fibfib = (fibfib + fibfib + fibfib);\n\
    \        }\n        return fibfib;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdizesphh.java:29)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long sum = 0;\n        for (int\
    \ i = 0; i < n; i++) {\n            sum = fibfib2(sum, n - i);\n        }\n  \
    \      return sum;\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpln4wplow.java:24: error: cannot find symbol\n            sum =\
    \ fibfib2(sum, n - i);\n                  ^\n  symbol:   method fibfib2(long,long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 1) return 0;\n    \
    \    if (n <= 3) return 1;\n        return fibfib((n - 1) + fibfib((n - 2) + fibfib((n\
    \ - 3)));\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp44ty_x8j.java:24: error: ')' expected\n        return fibfib((n\
    \ - 1) + fibfib((n - 2) + fibfib((n - 3)));\n                                \
    \                                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) return 0;\n    \
    \    if (n == 1) return 0;\n        if (n == 2) return 1;\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011656
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n <= 1l) return 0l;\n  \
    \      else if (n == 2l) return 1l;\n        else if (n == 3l) return 2l;\n  \
    \      else return fibfib(n-1l) + fibfib(n-2l) + fibfib(n-3l);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfbpc8e7f.java:30)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 1;\n        }\n   \
    \     return fibfib(n-1) + fibfib(n-2);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo2ob1ij4.java:32)\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        // Write your code here\n  \
    \  }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplbjmydx0.java:23: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        return fibfib1(0, n);\n    }\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpindyunal.java:22: error: cannot find symbol\n        return fibfib1(0,\
    \ n);\n               ^\n  symbol:   method fibfib1(int,long)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011776
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0 || n == 1) return\
    \ n;\n        else return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n  \
    \  public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.java:23)\n\tat Problem.fibfib(tmpjgz7o51t.java:23)\n\
    \tat Problem.fibfib(tmpjgz7o51t.j"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n < 0) {\n            throw\
    \ new IllegalArgumentException(\"fibfib: Input not positive: \" + n);\n      \
    \  } else if (n == 0) {\n            return 0;\n        } else if (n == 1) {\n\
    \            return 1;\n        } else {\n            return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n        }\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: fibfib:\
    \ Input not positive: -1\n\tat Problem.fibfib(tmpvhgou7ci.java:23)\n\tat Problem.fibfib(tmpvhgou7ci.java:29)\n\
    \tat Problem.main(tmpvhgou7ci.java:33)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long prev1 = 1;\n        long\
    \ prev2 = 1;\n        long prev3 = 1;\n        while (n != 0) {\n            prev2\
    \ = prev1;\n            prev1 = prev3;\n            prev3 = prev2;\n         \
    \   n -= 2;\n        }\n        return prev3;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011782
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib;\n        if(n<0)\
    \ return -1;\n        if(n==0) return 0;\n        if(n==1) return 1;\n       \
    \ fibfib=fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n        return fibfib;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfpr4xy3_.java:30)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        } else if (n == 1) {\n            return 0;\n        } else if (n\
    \ == 2) {\n            return 1;\n        } else {\n            return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n<0) throw new IllegalArgumentException(\"\
    fibfib()\");\n        if (n==0) return 0l;\n        if (n==1) return 1l;\n   \
    \     if (n==2) return 1l;\n        return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg44djqm4.java:30)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0)\n            return\
    \ 0;\n        else if (n == 1)\n            return 0;\n        else if (n == 2)\n\
    \            return 1;\n        else\n            return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long f = 1;\n        while (n\
    \ > 0) {\n            f += f;\n            n--;\n        }\n        return f;\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1u1sp99y.java:30)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        return n < 2 ? n : fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2w9jhckx.java:25)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n<1) return 0l;\n       \
    \ if(n<2) return 1l;\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq0b54b5r.java:28)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        return fibfib_(n, 0);\n    }\n\
    \    public static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n\
    \    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l))\
    \ == (24l));\n    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) ==\
    \ (274l));\n    assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfxw1pkaf.java:22: error: cannot find symbol\n        return fibfib_(n,\
    \ 0);\n               ^\n  symbol:   method fibfib_(long,int)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long a = 0, b = 1;\n       \
    \ while(n>0){\n            long next = a;\n            a = b;\n            b =\
    \ next;\n            n--;\n        }\n        return a;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5eis2cny.java:32)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long f0 = 1l, f1 = 1;\n    \
    \    long f2 = 1l, f3 = 2l;\n        long f4 = f3;\n        long fibb = f0;\n\
    \        long fibfib;\n        for (int i = 3; i <= n; i++) {\n            fibfib\
    \ = (fibb * f0) + (f1 * f2) + (f3 * f4);\n            f1 = f2;\n            f2\
    \ = f3;\n            f3 = f4;\n            f4 = fibfib;\n            fibb = fibfib;\n\
    \        }\n        return fibfib;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmou4iho9.java:35: error: variable fibfib might not have been initialized\n\
    \        return fibfib;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long sum = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            sum += i;\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppt0w4apn.java:29)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0;\n        if\
    \ (n == 0l) return 0l;\n        if (n == 1l) return 0l;\n        if (n == 2l)\
    \ return 1l;\n        if (n == 3l) return 2l;\n        \n        \n        \n\
    \        if (n <= 3) {\n            if (n == 1l) return 0l;\n            if (n\
    \ == 2l) return 1l;\n            if (n == 3l) return 2l;\n        }\n        long\
    \ fibfib1 = (fibfib(n - 1l) + fibfib(n - 2l) + fibfib(n - 3l));\n        \n  \
    \      return fibfib1;\n    }\n    public static void main(String[] args) {\n\
    \    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l))\
    \ == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n\
    \    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnarf1xxm.java:42)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long a = 1;\n        long b\
    \ = 1;\n        long c = 1;\n        if (n > 0) {\n            long d = (n * a\
    \ - b * c);\n            a = b;\n            b = c;\n            c = d;\n    \
    \    }\n        return (a + b + c);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n\
    \    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa7gyrgsk.java:34)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if(n<=1) {\n            return\
    \ 0;\n        }\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n   \
    \ }\n    public static void main(String[] args) {\n    assert(fibfib((2l)) ==\
    \ (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw99qiil7.java:28)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long[] a = new long[n];\n  \
    \      Arrays.fill(a,1l);\n        a[0] = 0;\n        a[1] = 1;\n        for(int\
    \ i=2; i<=n; i++)\n            a[i] = a[i-1] + a[i-2];\n        return a[n];\n\
    \    }\n    public static void main(String[] args) {\n    assert(fibfib((2l))\
    \ == (1l));\n    assert(fibfib((1l)) == (0l));\n    assert(fibfib((5l)) == (4l));\n\
    \    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l)) == (81l));\n   \
    \ assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) == (927l));\n   \
    \ }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsoe5dr0v.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n];\n                        \
    \    ^\n/tmp/tmpsoe5dr0v.java:28: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return a[n];\n                 ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        long fibfib = 0;\n        for\
    \ (long i = 1; i <= n; i++) {\n            fibfib = (fibfib + fibfib - fibfib\
    \ / (i-2) + fibfib / i);\n        }\n        return fibfib;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l))\
    \ == (0l));\n    assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n\
    \    assert(fibfib((10l)) == (81l));\n    assert(fibfib((12l)) == (274l));\n \
    \   assert(fibfib((14l)) == (927l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.fibfib(tmplq_rza79.java:24)\n\tat Problem.main(tmplq_rza79.java:29)\n"
  stdout: ''
  timestamp: 1660011777
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // The FibFib number sequence is a sequence similar to the\
    \ Fibbonacci sequnece that's defined as follows:\n    // fibfib(0) == 0\n    //\
    \ fibfib(1) == 0\n    // fibfib(2) == 1\n    // fibfib(n) == fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3).\n    // Please write a function to efficiently compute the n-th\
    \ element of the fibfib number sequence.\n    // >>> fibfib((1l))\n    // (0l)\n\
    \    // >>> fibfib((5l))\n    // (4l)\n    // >>> fibfib((8l))\n    // (24l)\n\
    \    public static long fibfib(long n) {\n        if (n == 0) {\n            return\
    \ 0;\n        }\n        if (n == 1) {\n            return 0;\n        }\n   \
    \     if (n == 2) {\n            return 1;\n        }\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(fibfib((2l)) == (1l));\n    assert(fibfib((1l)) == (0l));\n  \
    \  assert(fibfib((5l)) == (4l));\n    assert(fibfib((8l)) == (24l));\n    assert(fibfib((10l))\
    \ == (81l));\n    assert(fibfib((12l)) == (274l));\n    assert(fibfib((14l)) ==\
    \ (927l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011777
