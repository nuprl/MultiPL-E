language: java
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        // write\
    \ your code\n        long total = 0;\n        for(int i = 0; i < string.length();\
    \ i++) {\n            if(string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                total++;\n            }\n        }\n        return total;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmp97x3igqk.java:20)\n\
    \tat Problem.main(tmp97x3igqk.java:29)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string\
    \ == null || substring == null) {\n            throw new IllegalArgumentException(\"\
    null string\");\n        }\n        final int substringLength = substring.length();\n\
    \        if (string.length() < substringLength) {\n            return 0;\n   \
    \     }\n        char[] charArray = string.toCharArray();\n        Arrays.sort(charArray);\n\
    \        char[] charArraySub = substring.toCharArray();\n        Arrays.sort(charArraySub);\n\
    \        int count = 0;\n        int i = 0;\n        int j = 0;\n        while\
    \ (i < charArray.length && j < charArraySub.length) {\n            if (charArray[i]\
    \ == charArraySub[j]) {\n                i++;\n                j++;\n        \
    \    } else {\n                if (charArray[i] == charArraySub[j]) {\n      \
    \              count += 1;\n                    i++;\n                } else {\n\
    \                    if (i < charArray.length && j < charArraySub.length) {\n\
    \                        if (charArray[i] == charArraySub[j]) {\n            \
    \                count += 1;\n                            i++;\n             \
    \           } else {\n                            if (i < charArray.length &&\
    \ j > 0) {\n                                count += 1;\n                    \
    \            i++;\n                            } else {\n                    \
    \            count += 1;\n                                j--;\n             \
    \               }\n                        }\n                    }\n        \
    \        }\n            }\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphnpuh58x.java:61)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.toUpperCase().split(substring).length - string.split(substring).length;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvgu3a2pk.java:21)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.chars().filter(x -> x==substring.charAt(0)).filter(x -> x==substring.charAt(substring.length()-1)).count();\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp61sdou41.java:22)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long numSubStrings\
    \ = 0;\n        Set<String> substringSet = new HashSet<>(Arrays.asList(substring.split(\"\
    \")));\n\n        for (String str : string.split(\"\")) {\n            if (str.equals(substring)\
    \ || substringSet.contains(str)) {\n                numSubStrings += 1;\n    \
    \        }\n        }\n        return numSubStrings;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyw377m24.java:30)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string.isEmpty()\
    \ || substring.isEmpty()) {\n            return 0l;\n        }\n        long start\
    \ = 0;\n        long end = 0;\n        char[] chars = string.toCharArray();\n\
    \        char[] substrings = substring.toCharArray();\n        start = Arrays.binarySearch(chars,\
    \ substrings, 0, substrings.length);\n        if (start < 0) {\n            start\
    \ = (~start) + 1;\n        }\n        end = start + substrings.length - 1;\n \
    \       end = Arrays.binarySearch(chars, substrings, start, end);\n        if\
    \ (end < 0) {\n            end = start + substrings.length - 1;\n        }\n \
    \       return end - start + 1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9pa3s8xr.java:24: error: no suitable method found for binarySearch(char[],char[],int,int)\n\
    \        start = Arrays.binarySearch(chars, substrings, 0, substrings.length);\n\
    \                      ^\n    method Arrays.binarySearch(long[],int,int,long)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to long[])\n\
    \    method Arrays.binarySearch(int[],int,int,int) is not applicable\n      (argument\
    \ mismatch; char[] cannot be converted to int[])\n    method Arrays.binarySearch(short[],int,int,short)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to short[])\n\
    \    method Arrays.binarySearch(char[],int,int,char) is not applicable\n     \
    \ (argument mismatch; char[] cannot be converted to int)\n    method Arrays.binarySearch(byte[],int,int,byte)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to byte[])\n\
    \    method Arrays.binarySearch(double[],int,int,double) is not applicable\n \
    \     (argument mismatch; char[] cannot be converted to double[])\n    method\
    \ Arrays.binarySearch(float[],int,int,float) is not applicable\n      (argument\
    \ mismatch; char[] cannot be converted to float[])\n    method Arrays.binarySearch(Object[],int,int,Object)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to Object[])\n\
    \    method Arrays.<T#1>binarySearch(T#1[],T#1,Comparator<? super T#1>) is not\
    \ applicable\n      (cannot infer type-variable(s) T#1\n        (actual and formal\
    \ argument lists differ in length))\n    method Arrays.<T#2>binarySearch(T#2[],int,int,T#2,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>binarySearch(T#1[],T#1,Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>binarySearch(T#2[],int,int,T#2,Comparator<?\
    \ super T#2>)\n/tmp/tmp9pa3s8xr.java:29: error: no suitable method found for binarySearch(char[],char[],long,long)\n\
    \        end = Arrays.binarySearch(chars,"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ IntStream.range(0,string.length())\n            .filter(i -> string.substring(0,i).contains(substring))\n\
    \            .count();\n    }\n    public static void main(String[] args) {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy6fe7ggm.java:23)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.substring(string.indexOf(substring) + 1).replaceAll(substring, (char)\
    \ 0);\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_du2ma5x.java:17: error: incompatible types: char cannot be converted\
    \ to String\n        return string.substring(string.indexOf(substring) + 1).replaceAll(substring,\
    \ (char) 0);\n                                                               \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long answer\
    \ = 0l;\n        for (String s: string.split(substring)) {\n            answer\
    \ = answer + s.length();\n        }\n        return answer;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwwnd3lpe.java:25)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.chars().filter(e -> e == substring.charAt(0)).count();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbkk43l_k.java:22)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long result\
    \ = 0;\n        int i = 0;\n        if (string.length() < substring.length())\
    \ {\n            for (; i < substring.length(); i++) {\n                result\
    \ += howManyTimes(string.substring(0, i + 1), substring);\n            }\n   \
    \     }\n        if (string.equals(substring)) {\n            return 1;\n    \
    \    }\n        if (string.substring(string.length() - substring.length()).equals(substring))\
    \ {\n            return 1;\n        }\n        int j = 0;\n        for (; j <\
    \ string.length() && j < substring.length(); j++) {\n            int k = string.indexOf(substring,\
    \ j);\n            while (k > 0 && k < string.length()) {\n                k =\
    \ string.indexOf(substring, k + 1);\n            }\n            if (k != -1) {\n\
    \                result += howManyTimes(string.substring(0, j + 1), substring);\n\
    \                j = k;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpb75rq61_.java:21)\n\
    \tat Problem.main(tmpb75rq61_.java:44)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n\n        // Step 1: count characters in substring\n        int countSubString\
    \ = string.split(substring).length;\n\n        // Step 2: count characters in\
    \ the whole string\n        int countString = string.length();\n\n        // Step\
    \ 3: count overlaping characters\n        for (int i = 0; i < countString; i++)\
    \ {\n            for (int j = i + 1; j < countString; j++) {\n               \
    \ if (string.charAt(i) == string.charAt(j)) {\n                    count++;\n\
    \                }\n            }\n        }\n\n        // Step 4: Return count\n\
    \        return count;\n    }\n    public static void main(String[] args) {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjqo7pk3u.java:39)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long result\
    \ = Long.MAX_VALUE;\n        if (string.isEmpty() || substring.isEmpty()) return\
    \ result;\n        Set<String> subset = new HashSet<String>();\n        subset.add(substring);\n\
    \        String lastSubstring = substring;\n        for (String part : string.split(\"\
    (?<=\\\\G.{\" + substring.length() + \",})\")) {\n            Set<String> newSubset\
    \ = new HashSet<String>();\n            newSubset.add(part);\n            if (!subset.equals(newSubset))\
    \ {\n                lastSubstring = part;\n                subset = newSubset;\n\
    \            }\n        }\n        if (!subset.equals(new HashSet<String>()))\
    \ {\n            result += subset.size() - substring.split(\"(?<=\\\\G.{\" + substring.length()\
    \ + \",})\").length;\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvm_mnfjp.java:36)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string\
    \ == null || string.isEmpty()) return 0L;\n        if (substring == null || substring.isEmpty())\
    \ return 0L;\n        long count=0L;\n        for(int i=0;i<string.length();i++)\
    \ {\n            if (string.substring(i, i+substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmp8f8ugp8s.java:21)\n\
    \tat Problem.main(tmp8f8ugp8s.java:30)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        List<String>\
    \ list = Arrays.asList((string).split(substring));\n        return list.stream().map(s\
    \ -> s.split(\"\")).flatMap(Arrays::stream).count();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp210ipql6.java:21)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.length() * substring.length();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpujuaez8e.java:21)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long result\
    \ = 1;\n        for(int pos = 0; pos < string.length(); pos++) {\n           \
    \ if (string.substring(pos).contains(substring)) {\n                result *=\
    \ substring.length();\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq1teaq2j.java:26)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = string.length() - substring.length();\n        if (string.length() > substring.length())\
    \ {\n            count = howManyTimes(substring, string.substring(0, substring.length()));\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnj_twvf3.java:24)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0l;\n        int i = 0;\n        boolean subStringMatched = false;\n     \
    \   while (i < string.length() && !subStringMatched) {\n            count = count\
    \ + string.indexOf(substring, i) + string.lastIndexOf(substring, i);\n       \
    \     if (string.indexOf(substring, i) > 0) {\n                subStringMatched\
    \ = true;\n                i++;\n            }\n            else {\n         \
    \       i++;\n            }\n        }\n        if (subStringMatched) {\n    \
    \        count++;\n        }\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprvj5brjz.java:37)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string\
    \ == null || substring == null) {\n            return 0l;\n        }\n       \
    \ long cnt = 0l;\n        int start = 0;\n        int end = string.length() -\
    \ substring.length();\n        while (start < end) {\n            int m = Math.max(Math.min(start\
    \ + substring, end), start);\n            cnt += string.regionMatches(true, m,\
    \ m, substring, 0, substring.length());\n            start = m + 1;\n        }\n\
    \        return cnt;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1p1gol_a.java:24: error: no suitable method found for min(String,int)\n\
    \            int m = Math.max(Math.min(start + substring, end), start);\n    \
    \                             ^\n    method Math.min(int,int) is not applicable\n\
    \      (argument mismatch; String cannot be converted to int)\n    method Math.min(long,long)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to long)\n\
    \    method Math.min(float,float) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to float)\n    method Math.min(double,double) is\
    \ not applicable\n      (argument mismatch; String cannot be converted to double)\n\
    /tmp/tmp1p1gol_a.java:25: error: no suitable method found for regionMatches(boolean,int,int,String,int,int)\n\
    \            cnt += string.regionMatches(true, m, m, substring, 0, substring.length());\n\
    \                         ^\n    method String.regionMatches(int,String,int,int)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method String.regionMatches(boolean,int,String,int,int) is not applicable\n\
    \      (actual and formal argument lists differ in length)\n2 errors\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        // Create\
    \ two indexes - one for each of our substrings.\n        int[] firstIndex = new\
    \ int[substring.length()];\n        int[] secondIndex = new int[substring.length()];\n\
    \        // Scan both indexes from 0 to length of substring and count the occurrences\
    \ of each character.\n        for (int i = 0; i < firstIndex.length; i++) {\n\
    \            for (int j = 0; j < secondIndex.length; j++) {\n                if\
    \ (string.charAt(i) == substring.charAt(j)) {\n                    firstIndex[i]++;\n\
    \                    secondIndex[j]++;\n                }\n            }\n   \
    \     }\n\n        // If the first occurrence of the second substring is larger\
    \ than the first, swap the two indices.\n        if (firstIndex[secondIndex.length\
    \ - 1] > firstIndex[secondIndex.length - 2]) {\n            int tempFirstIndex\
    \ = firstIndex[secondIndex.length - 1];\n            firstIndex[secondIndex.length\
    \ - 1] = firstIndex[secondIndex.length - 2];\n            firstIndex[secondIndex.length\
    \ - 2] = tempFirstIndex;\n        }\n\n        // Return the total length of occurrences\
    \ of the substring.\n        return firstIndex[secondIndex.length - 1];\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 0\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmpx6g4x_en.java:23)\n\
    \tat Problem.main(tmpx6g4x_en.java:41)\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ count(string, substring, String.valueOf(string.indexOf(substring))).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3r72di9e.java:17: error: cannot find symbol\n        return count(string,\
    \ substring, String.valueOf(string.indexOf(substring))).sum();\n             \
    \  ^\n  symbol:   method count(String,String,String)\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ howManyTimes(string.toLowerCase(), substring.toLowerCase());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat java.base/java.lang.StringLatin1.toLowerCase(StringLatin1.java:443)\n\
    \tat java.base/java.lang.String.toLowerCase(String.java:3391)\n\tat java.base/java.lang.String.toLowerCase(String.java:3415)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\
    \tat Problem.howManyTimes(tmpp01a4edq.java:17)\n\tat "
  stdout: ''
  timestamp: 1660011303
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ findSubStringMatches(string, substring).count();\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo7ky5_pm.java:17: error: cannot find symbol\n        return findSubStringMatches(string,\
    \ substring).count();\n               ^\n  symbol:   method findSubStringMatches(String,String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.length() - string.replace(substring, \"\").length();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcjnbv7kr.java:22)\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        int len = string.length();\n        int slen = substring.length();\n\
    \        if (len == 0) {\n            count = slen;\n        }\n        if (len\
    \ > slen) {\n            count = slen;\n        }\n        if (slen == 0) {\n\
    \            count = 1;\n        }\n        int pos = 0;\n        boolean match\
    \ = false;\n        while (pos < len) {\n            if (string.charAt(pos) ==\
    \ substring.charAt(0)) {\n                count++;\n                pos += 1;\n\
    \                match = true;\n                while (pos < len && string.charAt(pos)\
    \ == substring.charAt(slen - 1)) {\n                    pos++;\n             \
    \       count++;\n                    match = true;\n                }\n     \
    \           if (pos == len || !match) {\n                    pos = len;\n    \
    \            }\n            } else {\n                pos = len;\n           \
    \ }\n        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_va1rve_.java:51)\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ howManyTimes(Arrays.asList(string), Arrays.asList(substring));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq861g7_m.java:17: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to String\n        return\
    \ howManyTimes(Arrays.asList(string), Arrays.asList(substring));\n           \
    \    ^\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>asList(T...)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long cnt\
    \ = 0;\n\n        // Loop through all possible start indices\n        for (int\
    \ start = 0; start < string.length() - substring.length() + 1; ++start) {\n  \
    \          // Find all possible end indices\n            for (int end = start\
    \ + 1; end < string.length(); ++end) {\n                // Get substring\n   \
    \             String substring2 = string.substring(start, end);\n\n          \
    \      // If substring is same as requested substring\n                if (substring\
    \ == substring2) {\n                    // Increase count\n                  \
    \  ++cnt;\n                }\n            }\n        }\n\n        return cnt;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9chpk4rh.java:38)\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long times\
    \ = string.length() - string.replaceAll(\"(?i)\" + substring, \"_\").length();\n\
    \        if (string.length() == substring.length()) {\n            return times;\n\
    \        }\n        if (string.contains(substring)) {\n            return times\
    \ + howManyTimes(string.substring(0, string.length() - substring.length()), substring);\n\
    \        }\n        return times + howManyTimes(string.substring(0, string.length()\
    \ - substring.length()), substring + string.substring(string.length() - substring.length()));\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmplh_5y56a.java:24)\n\
    \tat Problem.main(tmplh_5y56a.java:27)\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string.contains(substring))\
    \ {\n            return string.split(substring, -1).length - 1;\n        }\n\n\
    \        long totalTimes = string.length();\n        long index = string.indexOf(substring);\n\
    \n        if (index != -1) {\n            while (index != -1) {\n            \
    \    index = string.indexOf(substring, index + 1);\n                totalTimes++;\n\
    \            }\n        }\n        return totalTimes;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvqt77r68.java:26: error: no suitable method found for indexOf(String,long)\n\
    \                index = string.indexOf(substring, index + 1);\n             \
    \                 ^\n    method String.indexOf(int,int) is not applicable\n  \
    \    (argument mismatch; String cannot be converted to int)\n    method String.indexOf(String,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0; // Keep a count of how much time the substring occurs in the main string\n\
    \        // Go through each character in the main string\n        for (char c\
    \ : string.toCharArray()) {\n            // If the character matches the substring,\
    \ increase the count\n            if (c.equals(substring)) {\n               \
    \ count++; // Increment the count by 1\n            }\n        }\n        // Return\
    \ the result\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnt7t0loa.java:21: error: char cannot be dereferenced\n        \
    \    if (c.equals(substring)) {\n                 ^\n1 error\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        int count[]\
    \ = new int[256];\n        int pos = 0;\n        while (pos < string.length())\
    \ {\n            count[string.charAt(pos)]++;\n            pos += substring.length();\n\
    \        }\n        int ans = 0;\n        for (int i = 0; i < (substring == null\
    \ ? 0 : string.length()); i++) {\n            ans += count[string.charAt(i)];\n\
    \        }\n        return ans;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz7mbv5rr.java:31)\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0L;\n        substring = string.toUpperCase().toUpperCase().toUpperCase().substring(substring.length());\n\
    \        if (string.toUpperCase().toUpperCase().toUpperCase().indexOf(substring)\
    \ == -1) {\n            return count;\n        }\n        int lastIndex = string.toUpperCase().toUpperCase().toUpperCase().indexOf(substring);\n\
    \        for (int i = 0; i < substring.length(); i++) {\n            int startIndex\
    \ = lastIndex;\n            lastIndex += substring.length();\n            if (lastIndex\
    \ >= string.toUpperCase().toUpperCase().toUpperCase().length()) {\n          \
    \      lastIndex = string.toUpperCase().toUpperCase().toUpperCase().length() -\
    \ 1;\n            }\n            if (startIndex == string.toUpperCase().toUpperCase().toUpperCase().indexOf(substring,\
    \ lastIndex)) {\n                count++;\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 1, end 0, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat java.base/java.lang.String.substring(String.java:2680)\n\
    \tat Problem.howManyTimes(tmpdy3egjfo.java:18)\n\tat Problem.main(tmpdy3egjfo.java:36)\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        for (int i = 0; i < string.length() - substring.length(); i++)\
    \ {\n            if (string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcogkr967.java:27)\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        Set<String>\
    \ set = new HashSet<>();\n        for (int i = 0; i < string.length(); i++) {\n\
    \            if (string.charAt(i) == substring.charAt(0)) {\n                for\
    \ (int j = 1; j < substring.length(); j++) {\n                    if (string.charAt(i)\
    \ == substring.charAt(j)) {\n                        set.add(i+\"\");\n      \
    \              }\n                }\n            }\n        }\n        return\
    \ set.size();\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5krtkerg.java:31)\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ howManyTimes(new Tuple (string, substring));\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5gk805jm.java:17: error: Tuple is abstract; cannot be instantiated\n\
    \        return howManyTimes(new Tuple (string, substring));\n               \
    \             ^\n1 error\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 1;\n        for (char c : string.toCharArray()) {\n            if (c == substring.charAt(0))\
    \ {\n                for (char i : string.toCharArray()) {\n                 \
    \   if (c == substring\n                        .substring(1)\n              \
    \          .charAt(0)) {\n                        count += howManyTimes(\n   \
    \                         string.substring(1)\n                              \
    \  .substring(0, i)\n                                .concat(string.substring(0,\
    \ i + 1)),\n                            substring\n                          \
    \      .substring(1)\n                                .charAt(0));\n         \
    \           }\n                }\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9j3n1t4j.java:30: error: incompatible types: char cannot be converted\
    \ to String\n                                .charAt(0));\n                  \
    \                     ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        \n    \
    \    // Create a set of characters in the input string that match the given substring\n\
    \        Set<Character> charSet = new HashSet<>(string.toLowerCase().chars().filter(i\
    \ -> substring.contains(i)).collect(Collectors.toList()));\n        \n       \
    \ // Count how many times each character in string matches the given substring\
    \ by finding the intersection of each character in the input string and the substring.\n\
    \        return string.chars().filter(i -> substring.contains(i))\n          \
    \              .map(i -> String.valueOf(string.charAt(i)).equals(substring) ?\
    \ 1 : 0)\n                        .filter(i -> charSet.contains(i))\n        \
    \                .count();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdn455iwk.java:19: error: incompatible types: int cannot be converted\
    \ to CharSequence\n        Set<Character> charSet = new HashSet<>(string.toLowerCase().chars().filter(i\
    \ -> substring.contains(i)).collect(Collectors.toList()));\n                 \
    \                                                                            \
    \              ^\n/tmp/tmpdn455iwk.java:19: error: method collect in interface\
    \ IntStream cannot be applied to given types;\n        Set<Character> charSet\
    \ = new HashSet<>(string.toLowerCase().chars().filter(i -> substring.contains(i)).collect(Collectors.toList()));\n\
    \                                                                            \
    \                                  ^\n  required: Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>\n\
    \  found:    Collector<Object,CAP#1,List<Object>>\n  reason: cannot infer type-variable(s)\
    \ R\n    (actual and formal argument lists differ in length)\n  where R is a type-variable:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \  where CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture\
    \ of ?\n/tmp/tmpdn455iwk.java:19: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        Set<Character> charSet = new HashSet<>(string.toLowerCase().chars().filter(i\
    \ -> substring.contains(i)).collect(Collectors.toList()));\n                 \
    \                                                                            \
    \                         ^\n    (argument mismatch; no instance(s) of type variable(s)\
    \ CAP#1,T exist so that Collector<T,?,List<T>> conforms to Supplier<R>)\n  where\
    \ R,T are type-variables:\n    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T>toList()\n  where CAP#1 is a fresh\
    \ type-variable:\n    CAP#1 extends Object from capture of ?\n/tmp/tmpdn455iwk.java:22:\
    \ error: incompatible types: int cannot be converted to CharSequence\n       \
    \ return string.chars().filter(i -> substring.contains(i))\n                 \
    \             "
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        // Create\
    \ a stream of the string to search. Ignore case to make the search case-insensitive.\n\
    \        Stream<Character> stream = string.chars().mapToObj(c -> (char)c).map(String::toLowerCase);\n\
    \        // Create a stream of the substring. Ignore case to make the search case-insensitive.\n\
    \        Stream<Character> substringStream = substring.chars().mapToObj(c -> (char)c).map(String::toLowerCase);\n\
    \        // Count the number of occurences in the substring.\n        return stream.filter(s\
    \ -> substringStream.anyMatch(s2 -> s.equals(s2)))\n                    .count();\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0hvwxtfr.java:18: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        Stream<Character> stream = string.chars().mapToObj(c -> (char)c).map(String::toLowerCase);\n\
    \                                                                            ^\n\
    \    (argument mismatch; invalid method reference\n      incompatible types: Character\
    \ cannot be converted to Locale)\n  where R,T are type-variables:\n    R extends\
    \ Object declared in method <R>map(Function<? super T,? extends R>)\n    T extends\
    \ Object declared in interface Stream\n/tmp/tmp0hvwxtfr.java:20: error: incompatible\
    \ types: cannot infer type-variable(s) R\n        Stream<Character> substringStream\
    \ = substring.chars().mapToObj(c -> (char)c).map(String::toLowerCase);\n     \
    \                                                                            \
    \       ^\n    (argument mismatch; invalid method reference\n      incompatible\
    \ types: Character cannot be converted to Locale)\n  where R,T are type-variables:\n\
    \    R extends Object declared in method <R>map(Function<? super T,? extends R>)\n\
    \    T extends Object declared in interface Stream\n2 errors\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ howManyTimes(new char[] { string.toLowerCase().charAt(0) }, substring.toLowerCase().toCharArray());\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph634bns4.java:17: error: incompatible types: char[] cannot be converted\
    \ to String\n        return howManyTimes(new char[] { string.toLowerCase().charAt(0)\
    \ }, substring.toLowerCase().toCharArray());\n                            ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ stringToLong(stringToArray(string).findAll(substring).size());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9vnmtt_k.java:17: error: cannot find symbol\n        return stringToLong(stringToArray(string).findAll(substring).size());\n\
    \                            ^\n  symbol:   method stringToArray(String)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.split(substring, -1).length - 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgdrgp02h.java:22)\n"
  stdout: ''
  timestamp: 1660011204
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string.equals(substring))\
    \ {\n            return 1;\n        }\n        if (string.indexOf(substring) ==\
    \ -1) {\n            return 0;\n        }\n        return 1 + howManyTimes(string.substring(0,\
    \ string.indexOf(substring)), substring);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp65c6irsd.java:27)\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        if (string == null || substring == null) {\n            throw\
    \ new IllegalArgumentException(\"string and substring should be not null.\");\n\
    \        }\n        long start = 0;\n        long end = string.length() - substring.length();\n\
    \        while ((end >= 0) && (start < end)) {\n            if ((string.regionMatches(substring,\
    \ start, string, 0, substring.length()))) {\n                count++;\n      \
    \      }\n            start++;\n            end--;\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgf1vjhq0.java:24: error: incompatible types: String cannot be converted\
    \ to boolean\n            if ((string.regionMatches(substring, start, string,\
    \ 0, substring.length()))) {\n                                      ^\nNote: Some\
    \ messages have been simplified; recompile with -Xdiags:verbose to get full output\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        // Return\
    \ 0 if string and substring are the same string\n        if (string.equals(substring))\
    \ {\n            return 0;\n        }\n        long count = 0;\n        CharSequence\
    \ seq1 = string.toCharArray();\n        CharSequence seq2 = substring.toCharArray();\n\
    \        // Loop over each character of string, compare to substring\n       \
    \ for (int i = 0; i < seq1.length; i++) {\n            if (seq1[i] == seq2[i])\
    \ {\n                count++;\n            }\n        }\n        // If count is\
    \ zero string contains substring\n        if (count == 0) {\n            count\
    \ = 1;\n        }\n        // Return count of substring in string\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqxzcrjwh.java:22: error: incompatible types: char[] cannot be converted\
    \ to CharSequence\n        CharSequence seq1 = string.toCharArray();\n       \
    \                                       ^\n/tmp/tmpqxzcrjwh.java:23: error: incompatible\
    \ types: char[] cannot be converted to CharSequence\n        CharSequence seq2\
    \ = substring.toCharArray();\n                                               \
    \  ^\n/tmp/tmpqxzcrjwh.java:25: error: cannot find symbol\n        for (int i\
    \ = 0; i < seq1.length; i++) {\n                                ^\n  symbol: \
    \  variable length\n  location: variable seq1 of type CharSequence\n/tmp/tmpqxzcrjwh.java:26:\
    \ error: array required, but CharSequence found\n            if (seq1[i] == seq2[i])\
    \ {\n                    ^\n/tmp/tmpqxzcrjwh.java:26: error: array required, but\
    \ CharSequence found\n            if (seq1[i] == seq2[i]) {\n                \
    \               ^\n5 errors\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.split(substring).length();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplyyov5i9.java:17: error: cannot find symbol\n        return string.split(substring).length();\n\
    \                                      ^\n  symbol:   method length()\n  location:\
    \ class String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        final Pattern\
    \ pattern = Pattern.compile(substring);\n        final Matcher matcher = pattern.matcher(string);\n\
    \        long count = 0;\n        int start = 0;\n        int end = 0;\n     \
    \   while (matcher.find()) {\n            end = matcher.end();\n            count\
    \ += (end - start);\n            start = end + 1;\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1a268r3z.java:17: error: cannot find symbol\n        final Pattern\
    \ pattern = Pattern.compile(substring);\n              ^\n  symbol:   class Pattern\n\
    \  location: class Problem\n/tmp/tmp1a268r3z.java:17: error: cannot find symbol\n\
    \        final Pattern pattern = Pattern.compile(substring);\n               \
    \                 ^\n  symbol:   variable Pattern\n  location: class Problem\n\
    /tmp/tmp1a268r3z.java:18: error: cannot find symbol\n        final Matcher matcher\
    \ = pattern.matcher(string);\n              ^\n  symbol:   class Matcher\n  location:\
    \ class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660011305
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        Long count\
    \ = 0L;\n        for (String s : string.split(substring)) {\n            count\
    \ += String.valueOf(s).contains(substring) ? 1 : 0;\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpadrzs9e0.java:25)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        Set<String>\
    \ set = substring.chars().mapToObj(i -> \"a\").collect(Collectors.toSet());\n\
    \        int count = 0;\n        for (char c : string.toCharArray()) {\n     \
    \       if (set.contains(Character.toString(c))) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxhujqpnq.java:28)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        for (String letter : string.split(substring)) {\n            if\
    \ (substring.contains(letter)) {\n                ++count;\n            }\n  \
    \      }\n        return count;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82i78b12.java:26)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ howManyTimes(Arrays.asList(string), Arrays.asList(substring));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq861g7_m.java:17: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to String\n        return\
    \ howManyTimes(Arrays.asList(string), Arrays.asList(substring));\n           \
    \    ^\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>asList(T...)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        int pos = 0;\n        int start = 0;\n        pos = string.indexOf(substring,\
    \ start);\n        while (pos != -1) {\n            if (pos > start) {\n     \
    \           count++;\n            }\n            start = pos + 1;\n          \
    \  pos = string.indexOf(substring, start);\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8bllsxqw.java:32)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        // return\
    \ howManyTimes(string.toLowerCase(), substring.toLowerCase());\n        // return\
    \ howManyTimes(string.toUpperCase(), substring.toUpperCase());\n        \n   \
    \     if (string.isEmpty() || substring.isEmpty()) {\n            return 0;\n\
    \        }\n        \n        int index = string.indexOf(substring);\n       \
    \ if (index >= 0) {\n            if (index == 0) {\n                return 1;\n\
    \            }\n            \n            int length = substring.length();\n \
    \           String substringLowerCase = substring.toLowerCase();\n           \
    \ int count = 0;\n            \n            while (index >= 0) {\n           \
    \     \n                count++;\n                index = string.indexOf(substring,\
    \ index + length);\n            }\n            return count;\n        }\n    \
    \    \n        return 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzfzvjnl7.java:46)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        // Use\
    \ String.contains() as a cheap way of counting how many times a substring occurs\
    \ in a string.\n        return string.contains(substring);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwjmess_1.java:18: error: incompatible types: boolean cannot be\
    \ converted to long\n        return string.contains(substring);\n            \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        Map<Character,\
    \ Integer> count = new HashMap<Character, Integer>();\n        int len = string.length();\n\
    \        int sublen = substring.length();\n        int max = len - sublen + 1;\n\
    \        for (int i = 0; i < max; i++) {\n            String s = string.substring(0,\
    \ i + sublen);\n            if (count.containsKey(s.charAt(0))) {\n          \
    \      int count = count.get(s.charAt(0));\n                count = count + 1;\n\
    \                count.put(s.charAt(1), count);\n            } else {\n      \
    \          count.put(s.charAt(0), 1);\n            }\n        }\n        return\
    \ count.entrySet().stream().filter(entry -> substring.startsWith(entry.getKey())).count();\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6l840g47.java:24: error: variable count is already defined in method\
    \ howManyTimes(String,String)\n                int count = count.get(s.charAt(0));\n\
    \                    ^\n/tmp/tmp6l840g47.java:24: error: int cannot be dereferenced\n\
    \                int count = count.get(s.charAt(0));\n                       \
    \          ^\n/tmp/tmp6l840g47.java:26: error: int cannot be dereferenced\n  \
    \              count.put(s.charAt(1), count);\n                     ^\n/tmp/tmp6l840g47.java:31:\
    \ error: incompatible types: Character cannot be converted to String\n       \
    \ return count.entrySet().stream().filter(entry -> substring.startsWith(entry.getKey())).count();\n\
    \                                                                            \
    \              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        Set<Character>\
    \ stringSet = HashSet<Character>(string.length());\n        for (char character\
    \ : string.toCharArray())\n            stringSet.add(character);\n        \n \
    \       Set<Character> substringSet = HashSet<Character>(substring.length());\n\
    \        for (char character : substring.toCharArray())\n            substringSet.add(character);\n\
    \        \n        return string.chars().filter(character -> stringSet.contains(character))\n\
    \            .filter(character -> substringSet.contains(character))\n        \
    \    .count();\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpideveixh.java:17: error: cannot find symbol\n        Set<Character>\
    \ stringSet = HashSet<Character>(string.length());\n                         \
    \          ^\n  symbol:   variable HashSet\n  location: class Problem\n/tmp/tmpideveixh.java:17:\
    \ error: cannot find symbol\n        Set<Character> stringSet = HashSet<Character>(string.length());\n\
    \                                           ^\n  symbol:   variable Character\n\
    \  location: class Problem\n/tmp/tmpideveixh.java:21: error: cannot find symbol\n\
    \        Set<Character> substringSet = HashSet<Character>(substring.length());\n\
    \                                      ^\n  symbol:   variable HashSet\n  location:\
    \ class Problem\n/tmp/tmpideveixh.java:21: error: cannot find symbol\n       \
    \ Set<Character> substringSet = HashSet<Character>(substring.length());\n    \
    \                                          ^\n  symbol:   variable Character\n\
    \  location: class Problem\n4 errors\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string.length()\
    \ == 0 || substring.length() == 0) {\n            return 0l;\n        }\n\n  \
    \      if (string.indexOf(substring) != -1) {\n            return 1l;\n      \
    \  }\n\n        long count = 0;\n\n        for (int i = 0; i < string.length();\
    \ ++i) {\n            if (string.regionMatches(true, i, substring, 0, substring.length()))\
    \ {\n                count++;\n            }\n        }\n\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6395hajd.java:37)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = Long.MAX_VALUE;\n        substring = substring.intern();\n        for (String\
    \ aString : string.split(substring)) {\n            count += 1;\n        }\n \
    \       return count;\n    }\n    public static void main(String[] args) {\n \
    \   assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp34wyp7pa.java:25)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        int startIndex = 0;\n        int endIndex = 0;\n        int currentIndex\
    \ = 0;\n        while (currentIndex < string.length()) {\n            endIndex\
    \ = string.indexOf(substring, currentIndex);\n            if (endIndex > -1) {\n\
    \                count = count + endIndex - startIndex + 1;\n                startIndex\
    \ = endIndex + 1;\n                currentIndex = endIndex + 1;\n            }\
    \ else {\n                currentIndex = string.length();\n            }\n   \
    \     }\n        return count;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4lz2ca5d.java:35)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string\
    \ == null || string.isEmpty()) return 0;\n        if (substring == null || substring.isEmpty())\
    \ return 0;\n        if (string.indexOf( substring ) == -1) return 0;\n      \
    \  return string.indexOf( substring ) - string.lastIndexOf( substring ) + 1;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnphgk82j.java:24)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ howManyTimes(Arrays.asList(string), Arrays.asList(substring));\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq861g7_m.java:17: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to String\n        return\
    \ howManyTimes(Arrays.asList(string), Arrays.asList(substring));\n           \
    \    ^\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>asList(T...)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        String\
    \ caseInsensitiveSubstring = substring.substring(0, 1).toUpperCase() + substring.substring(1).toLowerCase();\n\
    \        long count = 0;\n        if (string.length() == 0) {\n            return\
    \ count;\n        }\n        string = string.trim();\n        if (string.equals(substring))\
    \ {\n            return 1;\n        }\n        if (string.length() == substring.length())\
    \ {\n            return 1;\n        }\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (string.substring(i, i + substring.length()).equals(caseInsensitiveSubstring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx5nshe44.java:38)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        int start\
    \ = 0;\n        int end = 0;\n        while (start <= string.length() - substring.length())\
    \ {\n            end = start + substring.length();\n            if (string.substring(start,\
    \ end).equals(substring)) {\n                return ((long) 1l);\n           \
    \ }\n            start++;\n        }\n        return 0l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphtuvb80h.java:30)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        Set<Character>\
    \ chars = string.chars().mapToObj(c -> (char) c).collect(Collectors.toSet());\n\
    \        return chars.stream().filter(c -> c.equals(substring)).collect(Collectors.toSet()).size();\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppqlmqwwd.java:22)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long result\
    \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            long\
    \ count = 0;\n            String currentSubstring = string.substring(i, i + substring.length());\n\
    \            if (currentSubstring.equals(substring)) {\n                count++;\n\
    \            }\n            for (int j = i + 1; j < string.length(); j++) {\n\
    \                String nextSubstring = string.substring(j, j + substring.length());\n\
    \                if (currentSubstring.equals(nextSubstring)) {\n             \
    \       count++;\n                }\n            }\n            result += (count\
    \ > 1 ? count : 0);\n        }\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpynntlw7w.java:36)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.length() - substring.length() + string.indexOf(substring) + string.substring(string.indexOf(substring)).indexOf(substring)\
    \ + string.substring(string.indexOf(substring)).indexOf(substring) + 1;\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin -1, end 0, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat java.base/java.lang.String.substring(String.java:2680)\n\
    \tat Problem.howManyTimes(tmpge159skj.java:17)\n\tat Problem.main(tmpge159skj.java:20)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        \n        for (String c : string.split(\"\")) {\n            if\
    \ (c.equals(substring)) count++;\n        }\n        \n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgxruw0v_.java:28)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string\n                .chars()\n                .filter(c -> c == substring.charAt(0))\n\
    \                .map(c -> String.format(\"%07d\", c + 1).charAt(0))\n       \
    \         .mapToLong(Integer::parseInt)\n                .sum();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpigt8zirs.java:21: error: incompatible types: invalid method reference\n\
    \                .mapToLong(Integer::parseInt)\n                           ^\n\
    \    incompatible types: int cannot be converted to String\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.substring(0, string.length() - substring.length()).replaceAll(substring,\
    \ \"\").length();\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmp84nt0zrv.java:17)\n\
    \tat Problem.main(tmp84nt0zrv.java:20)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        // Find\
    \ length of substring and string\n        int len = substring.length();\n    \
    \    int stringLen = string.length();\n        // Create an array of size stringLen\n\
    \        int[] charArray = new int[stringLen];\n        // Populate array with\
    \ count of substring occurences\n        for (int i = 0; i < stringLen; i++) {\n\
    \            // Get char at position i of string\n            char c = string.charAt(i);\n\
    \            // Increment count of char c at position i of string\n          \
    \  charArray[c]++;\n        }\n        // Find count of occurence of substring\n\
    \        long count = 0;\n        for (int i = 0; i < len; i++) {\n          \
    \  // Get char at position i of substring\n            char c = substring.charAt(i);\n\
    \            // If character c in array of substrings\n            if (charArray[c]\
    \ > 0) {\n                // Increment count of character c\n                count++;\n\
    \            }\n        }\n        // Return result\n        return count;\n \
    \   }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 120 out of bounds for length 0\n\tat Problem.howManyTimes(tmp36w51u8u.java:35)\n\
    \tat Problem.main(tmp36w51u8u.java:44)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string.trim().isEmpty()\
    \ || substring.trim().isEmpty())\n            return 0;\n        char[] stringCharArray\
    \ = string.toCharArray();\n        char[] substringCharArray = substring.toCharArray();\n\
    \        Arrays.sort(stringCharArray);\n        Arrays.sort(substringCharArray);\n\
    \        if (stringCharArray.length < substring.length())\n            return\
    \ 0;\n        ArrayList <Character> stringList = Arrays.asList(stringCharArray);\n\
    \        ArrayList <Character> substringList = Arrays.asList(substringCharArray);\n\
    \        boolean isFirst = true;\n        int count = 0;\n        int i = 0;\n\
    \        for (; substringList.size() > i; i++){\n            if (stringList.get(i)\
    \ != substringList.get(i))\n                count++;\n            else if (isFirst)\n\
    \                isFirst = false;\n        }\n        long l = count * (stringList.size()\
    \ - substringList.size());\n        l = l / substringList.size();\n        if\
    \ (l == 0 && substringList.size() != stringList.size())\n            l += (long)\
    \ stringList.size();\n        return l;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdtr_wb_h.java:25: error: incompatible types: no instance(s) of\
    \ type variable(s) T exist so that List<T> conforms to ArrayList<Character>\n\
    \        ArrayList <Character> stringList = Arrays.asList(stringCharArray);\n\
    \                                                        ^\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>asList(T...)\n/tmp/tmpdtr_wb_h.java:26:\
    \ error: incompatible types: no instance(s) of type variable(s) T exist so that\
    \ List<T> conforms to ArrayList<Character>\n        ArrayList <Character> substringList\
    \ = Arrays.asList(substringCharArray);\n                                     \
    \                      ^\n  where T is a type-variable:\n    T extends Object\
    \ declared in method <T>asList(T...)\n2 errors\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long sum\
    \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            int index\
    \ = string.indexOf(substring, i);\n            if (index != -1) {\n          \
    \      sum += index - i + 1;\n                i = index + substring.length();\n\
    \            }\n        }\n        return sum;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_5n73m7_.java:30)\n"
  stdout: ''
  timestamp: 1660011306
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long totalCount\
    \ = 0;\n        for(String word : string.split(\" \")) {\n            if(word.equals(substring))\
    \ {\n                totalCount++;\n            }\n        }\n        return totalCount;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph8jn83l3.java:27)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        Set<String>\
    \ set = new HashSet<>();\n        int count = 0;\n        for (String s : string.split(substring))\
    \ {\n            if (!set.add(s)) {\n                count++;\n            }\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpic5fvpey.java:28)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long result\
    \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i)\
    \ == substring.charAt(0)) {\n                if (string.charAt(i + substring.length()\
    \ - 1) == substring.charAt(substring.length() - 1)) {\n                    result\
    \ += 1;\n                } else {\n                    result += howManyTimes(string.substring(i\
    \ + 1, i + substring.length()), substring);\n                }\n            }\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 10\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmpwz4aqgq5.java:20)\n\
    \tat Problem.main(tmpwz4aqgq5.java:32)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.split(substring).length;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp773xsm9a.java:20)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        String\
    \ newString = string.replaceAll(\"[^\" + substring + \"]\", \"\");\n        long\
    \ sum = 0;\n        for (String s : newString.split(substring)) {\n          \
    \  sum += s.length();\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphjovf3mu.java:26)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long countSubstring\
    \ = 0;\n        if (string == null || substring == null)\n            return 0;\n\
    \        if (string.length() == 0)\n            return countSubstring;\n\n   \
    \     // find the length of substring\n        int firstIndex = string.indexOf(substring);\n\
    \        if (firstIndex == -1) {\n            return countSubstring;\n       \
    \ }\n\n        // keep track of length of substring\n        int length = substring.length();\n\
    \n        // walk through original string and keep track of how many times the\
    \ substring appears\n        StringBuilder sb = new StringBuilder(string);\n \
    \       for (int i = firstIndex; i < string.length(); i++) {\n            char\
    \ c = string.charAt(i);\n            if (sb.indexOf(substring, i) == i) {\n  \
    \              sb.deleteCharAt(i);\n                countSubstring++;\n      \
    \      }\n        }\n        return countSubstring;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        int startIndex\
    \ = string.indexOf(substring);\n        return startIndex == -1 ? 0 : 1 + howManyTimes(string.substring(startIndex\
    \ + substring.length()), substring);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdncxhrl5.java:23)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0, pos = 0;\n        while (true) {\n            pos = string.indexOf(substring,\
    \ pos);\n            if (pos == -1) return count;\n            count++;\n    \
    \        pos += substring.length();\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_oxpx0hj.java:19: error: no suitable method found for indexOf(String,long)\n\
    \            pos = string.indexOf(substring, pos);\n                        ^\n\
    \    method String.indexOf(int,int) is not applicable\n      (argument mismatch;\
    \ String cannot be converted to int)\n    method String.indexOf(String,int) is\
    \ not applicable\n      (argument mismatch; possible lossy conversion from long\
    \ to int)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        for (int i = 0; i <= string.length() - substring.length(); i++)\
    \ {\n            if (string.regionMatches(true, i, substring, 0, substring.length()))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0L;\n        for (char c : string.toCharArray()) {\n            if (string.startsWith(substring))\
    \ {\n                count += 1;\n            }\n            if (string.endsWith(substring))\
    \ {\n                count += 1;\n            }\n            if (string.contains(substring))\
    \ {\n                count += 1;\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8fc5ykaj.java:33)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long[]\
    \ arr = new long[string.length() + substring.length()];\n        char[] chars\
    \ = string.toCharArray();\n        char[] subChars = substring.toCharArray();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            for (int j = 0;\
    \ j < subChars.length; j++) {\n                if (chars[i] == subChars[j])\n\
    \                    arr[i + j] = 1;\n            }\n        }\n        return\
    \ IntStream.range(0, arr.length)\n                .filter(i -> arr[i] == 1)\n\
    \                .count();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpskc0y44o.java:33)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        Map<Character,\
    \ Long> map = string.chars().boxed().collect(Collectors.toMap(c -> c, c -> 1l,\
    \ (c1, c2) -> c1 + c2));\n        map.putAll(substring.chars().boxed().collect(Collectors.toMap(c\
    \ -> c, c -> 1l, (c1, c2) -> c1 + c2)));\n        return map.entrySet().stream().filter(e\
    \ -> e.getValue() > 1).count();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxunui1uq.java:17: error: incompatible types: inference variable\
    \ K has incompatible bounds\n        Map<Character, Long> map = string.chars().boxed().collect(Collectors.toMap(c\
    \ -> c, c -> 1l, (c1, c2) -> c1 + c2));\n                                    \
    \                             ^\n    equality constraints: Character\n    lower\
    \ bounds: Integer\n  where K,T,U are type-variables:\n    K extends Object declared\
    \ in method <T,K,U>toMap(Function<? super T,? extends K>,Function<? super T,?\
    \ extends U>,BinaryOperator<U>)\n    T extends Object declared in method <T,K,U>toMap(Function<?\
    \ super T,? extends K>,Function<? super T,? extends U>,BinaryOperator<U>)\n  \
    \  U extends Object declared in method <T,K,U>toMap(Function<? super T,? extends\
    \ K>,Function<? super T,? extends U>,BinaryOperator<U>)\n/tmp/tmpxunui1uq.java:18:\
    \ error: incompatible types: inference variable K has incompatible bounds\n  \
    \      map.putAll(substring.chars().boxed().collect(Collectors.toMap(c -> c, c\
    \ -> 1l, (c1, c2) -> c1 + c2)));\n                                           \
    \         ^\n    lower bounds: Character,Object\n    lower bounds: Integer\n \
    \ where K,T,U are type-variables:\n    K extends Object declared in method <T,K,U>toMap(Function<?\
    \ super T,? extends K>,Function<? super T,? extends U>,BinaryOperator<U>)\n  \
    \  T extends Object declared in method <T,K,U>toMap(Function<? super T,? extends\
    \ K>,Function<? super T,? extends U>,BinaryOperator<U>)\n    U extends Object\
    \ declared in method <T,K,U>toMap(Function<? super T,? extends K>,Function<? super\
    \ T,? extends U>,BinaryOperator<U>)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string.isEmpty()\
    \ || string.length() == 0 || substring.isEmpty() || substring.length() == 0)\n\
    \            throw new IllegalArgumentException(\"String length should be more\
    \ than 0\");\n        if (string.indexOf(substring) == -1)\n            throw\
    \ new IllegalArgumentException(\"String doesn't contain substring\");\n      \
    \  long numOfMatches = 0;\n        StringBuilder sb = new StringBuilder(string);\n\
    \        while (sb.indexOf(substring) > -1) {\n            sb.delete(0, sb.indexOf(substring)\
    \ + substring.length());\n            numOfMatches++;\n        }\n        return\
    \ numOfMatches;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.IllegalArgumentException: String\
    \ length should be more than 0\n\tat Problem.howManyTimes(tmpr20432t3.java:18)\n\
    \tat Problem.main(tmpr20432t3.java:30)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long result\
    \ = 1;\n        for (int i = 0; i < string.length() && i < substring.length();\
    \ i++) {\n            if (string.charAt(i) == substring.charAt(i)) result++;\n\
    \        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpjnio7_lq.java:24)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ howManyTimes(string, substring, 0);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzagybdk8.java:17: error: method howManyTimes in class Problem cannot\
    \ be applied to given types;\n        return howManyTimes(string, substring, 0);\n\
    \               ^\n  required: String,String\n  found:    String,String,int\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011201
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string.length()\
    \ == 0) {\n            return 0;\n        }\n\n        int count = 0;\n      \
    \  for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i)\
    \ == substring.charAt(0)) {\n                count++;\n            } else {\n\
    \                count = 0;\n            }\n            if (string.charAt(i) ==\
    \ substring.charAt(1)) {\n                count += howManyTimes(string.substring(1,\
    \ i + 1), substring);\n            }\n        }\n        return count;\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmplab4bnb3.java:28)\n\
    \tat Problem.main(tmplab4bnb3.java:36)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string.isEmpty()\
    \ || substring.isEmpty()) return 0;\n        \n        // Convert string to char\
    \ array and sort by length\n        char[] charArray = string.toCharArray();\n\
    \        Arrays.sort(charArray);\n        \n        // Find index of a substring\
    \ within this array\n        int index = Arrays.binarySearch(charArray, substring);\n\
    \        \n        // If substring is not found, return 0\n        if (index ==\
    \ -1) return 0;\n        \n        // If substring is found, return the size of\
    \ the original string minus length of substring + 1\n        return (charArray.length\
    \ - index - substring.length) + 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqiew337x.java:24: error: no suitable method found for binarySearch(char[],String)\n\
    \        int index = Arrays.binarySearch(charArray, substring);\n            \
    \              ^\n    method Arrays.binarySearch(long[],long) is not applicable\n\
    \      (argument mismatch; char[] cannot be converted to long[])\n    method Arrays.binarySearch(int[],int)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to int[])\n\
    \    method Arrays.binarySearch(short[],short) is not applicable\n      (argument\
    \ mismatch; char[] cannot be converted to short[])\n    method Arrays.binarySearch(char[],char)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to char)\n\
    \    method Arrays.binarySearch(byte[],byte) is not applicable\n      (argument\
    \ mismatch; char[] cannot be converted to byte[])\n    method Arrays.binarySearch(double[],double)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to double[])\n\
    \    method Arrays.binarySearch(float[],float) is not applicable\n      (argument\
    \ mismatch; char[] cannot be converted to float[])\n    method Arrays.binarySearch(Object[],Object)\
    \ is not applicable\n      (argument mismatch; char[] cannot be converted to Object[])\n\
    \    method Arrays.<T#1>binarySearch(T#1[],T#1,Comparator<? super T#1>) is not\
    \ applicable\n      (cannot infer type-variable(s) T#1\n        (actual and formal\
    \ argument lists differ in length))\n    method Arrays.<T#2>binarySearch(T#2[],int,int,T#2,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>binarySearch(T#1[],T#1,Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>binarySearch(T#2[],int,int,T#2,Comparator<?\
    \ super T#2>)\n/tmp/tmpqiew337x.java:30: error: cannot find symbol\n        return\
    \ (charArray.length - index - substring.length) + 1;\n                       \
    \                             ^\n  symbol:   variable length\n  location: variable\
    \ s"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.chars().filter(c -> c == substring.charAt(0)).filter(c -> c == substring.charAt(1)).count();\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.lambda$howManyTimes$1(tmpwvcsvb9f.java:17)\n\
    \tat java.base/java.util.stream.IntPipeline$10$1.accept(IntPipeline.java:392)\n\
    \tat java.base/java.util.stream.IntPipeline$10$1.accept(IntPipeline.java:393)\n\
    \tat java.base/java.lang.StringLatin1$CharsSpliterator.forEachRemaining(StringLatin1.java:824)\n\
    \tat java.base/java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:711)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.ReduceOps$9.evaluateSequential(ReduceOps.java:434)\n\
    \tat java.base/java.util.stream.ReduceOps$9.evaluateSequential(ReduceOps.java:424)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.IntPipeline.count(IntPipeline.java:488)\n\tat\
    \ Problem.howManyTimes(tmpwvcsvb9f.java:17)\n\tat Problem.main(tmpwvcsvb9f.java:21)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ Arrays.stream(string.toLowerCase(Locale.ROOT).split(substring.toLowerCase(Locale.ROOT))).filter(i\
    \ -> i.length() > 0).count();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwxw6lk08.java:21)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 1l;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i,\
    \ i + substring.length()).equals(substring)) {\n                count += 1;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ie2uw2n.java:26)\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string\
    \ == null || substring == null) return 0l;\n        \n        // Find occurrences\
    \ of substring\n        long occurences = 0;\n        long pos = 0;\n        \n\
    \        int l = string.length();\n        \n        while ((pos = string.indexOf(substring,\
    \ pos)) != -1) {\n            occurences++;\n            pos = pos + substring.length();\n\
    \        }\n        \n        return occurences;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ud5ppey.java:25: error: no suitable method found for indexOf(String,long)\n\
    \        while ((pos = string.indexOf(substring, pos)) != -1) {\n            \
    \                ^\n    method String.indexOf(int,int) is not applicable\n   \
    \   (argument mismatch; String cannot be converted to int)\n    method String.indexOf(String,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        Map<String,\
    \ String> map = new HashMap<String, String>();\n        final long minChars =\
    \ substring.length();\n        for (String letter : string.split(\"\")) {\n  \
    \          map.put(letter, map.get(letter) == null ? 1 : map.get(letter) + 1);\n\
    \        }\n        long count = 0;\n        for (String letter : substring.split(\"\
    \")) {\n            String value = map.get(letter);\n            if (value ==\
    \ null || value.length() < minChars)\n                throw new RuntimeException(\"\
    Invalid letter \" + letter);\n            if (value.length() > minChars)\n   \
    \             count += value.length() - minChars;\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnk0_hqhv.java:20: error: incompatible types: bad type in conditional\
    \ expression\n            map.put(letter, map.get(letter) == null ? 1 : map.get(letter)\
    \ + 1);\n                                                      ^\n    int cannot\
    \ be converted to String\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        // return\
    \ howManyTimes((\"\"), substring);\n        return howManyTimes(string.chars(),\
    \ substring.chars(), 0);\n    }\n    public static void main(String[] args) {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplcp5x0ej.java:18: error: method howManyTimes in class Problem cannot\
    \ be applied to given types;\n        return howManyTimes(string.chars(), substring.chars(),\
    \ 0);\n               ^\n  required: String,String\n  found:    IntStream,IntStream,int\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        long index = 0;\n        while(index != string.length()) {\n \
    \           if(string.charAt(index) == substring.charAt(0)) {\n              \
    \  count += (string.charAt(index) == substring.charAt(0));\n            }\n  \
    \          else if(string.charAt(index) != substring.charAt(0)) {\n          \
    \      count += (string.charAt(index) != substring.charAt(0));\n            }\n\
    \            else {\n                index++;\n            }\n        }\n    \
    \    return count;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6xfynmkz.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if(string.charAt(index) == substring.charAt(0))\
    \ {\n                             ^\n/tmp/tmp6xfynmkz.java:21: error: incompatible\
    \ types: possible lossy conversion from long to int\n                count +=\
    \ (string.charAt(index) == substring.charAt(0));\n                           \
    \             ^\n/tmp/tmp6xfynmkz.java:23: error: incompatible types: possible\
    \ lossy conversion from long to int\n            else if(string.charAt(index)\
    \ != substring.charAt(0)) {\n                                  ^\n/tmp/tmp6xfynmkz.java:24:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \            count += (string.charAt(index) != substring.charAt(0));\n       \
    \                                 ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011307
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string\
    \ == null || substring == null) return 0;\n        long matches = 0;\n       \
    \ int i = 0;\n        int j = 0;\n        int count = 0;\n        while (j < string.length())\
    \ {\n            if (string.charAt(i) == substring.charAt(j)) {\n            \
    \    count++;\n            }\n            j++;\n            if (j >= substring.length())\
    \ {\n                i++;\n                j = 0;\n            }\n        }\n\
    \        matches += count;\n        return matches;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 7\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmpizuy4_z1.java:23)\n\
    \tat Problem.main(tmpizuy4_z1.java:37)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        if (string == null || string.isEmpty()) {\n            return\
    \ 0;\n        }\n        if (substring == null || substring.isEmpty()) {\n   \
    \         return count;\n        }\n        long substringLength = substring.length();\n\
    \        string = string.toLowerCase().replaceAll(\"[^a-z]\", \"\");\n       \
    \ // for each character in substring\n        for (char c : substring.toCharArray())\
    \ {\n            // if the character is not in the string return zero\n      \
    \      long positionInString = string.indexOf(c);\n            if (positionInString\
    \ == -1) {\n                return 0;\n            }\n            // count it\n\
    \            count++;\n            // if the character is at the end of the string\
    \ then return count otherwise add one to count\n            if (c == string.charAt(string.length()\
    \ - 1)) {\n                return count;\n            }\n            count++;\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdy0cu66e.java:45)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.split(substring).length - string.split(substring).indexOf(substring)\
    \ + 1;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps8ivsrwm.java:17: error: cannot find symbol\n        return string.split(substring).length\
    \ - string.split(substring).indexOf(substring) + 1;\n                        \
    \                                               ^\n  symbol:   method indexOf(String)\n\
    \  location: class String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.length() - substring.length()\n                + ((string.indexOf(substring)\
    \ > -1) ? 1 : 0)\n                + howManyTimes(string.substring(0, string.indexOf(substring))\n\
    \                        + substring, substring);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end -1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpi1bxn89t.java:19)\n\
    \tat Problem.main(tmpi1bxn89t.java:23)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        for (char c : string.toCharArray()) {\n            if (c == substring.charAt(0))\
    \ {\n                if (string.indexOf(substring, 1) == string.lastIndexOf(substring,\
    \ 1)) {\n                    ++count;\n                }\n                ++count;\n\
    \            } else if (string.indexOf(substring, 1) != string.lastIndexOf(substring,\
    \ 1)) {\n                ++count;\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_rl376vx.java:32)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long times\
    \ = 0;\n        int startIndex = 0;\n        int endIndex = 0;\n        boolean\
    \ firstTime = true;\n        boolean previousCharacter = true;\n\n        // Use\
    \ a stack to keep track of what was already counted.\n        Stack<Integer> stack\
    \ = new Stack<Integer>();\n\n        // Count all overlapping cases (including\
    \ the first occurrence)\n        for (int i = 0; i < string.length(); i++) {\n\
    \            if (previousCharacter && string.charAt(i) == substring.charAt(0))\
    \ {\n                startIndex = i;\n                stack.push(i);\n       \
    \     }\n            else {\n                if (firstTime) {\n              \
    \      endIndex = i;\n                    firstTime = false;\n               \
    \     times += (endIndex - startIndex + 1);\n                    startIndex =\
    \ 0;\n                    previousCharacter = true;\n                } else {\n\
    \                    endIndex = i;\n                    previousCharacter = false;\n\
    \                    times += (endIndex - startIndex + 1);\n                }\n\
    \            }\n        }\n\n        // The first occurrence is counted because\
    \ it is counted before the loop\n        // begins. If the last occurrence is\
    \ counted after the loop\n        // ends, the time will be less than the original\
    \ substring length.\n        long resultTimes = times - 1;\n\n        // Remove\
    \ the elements from stack that are in string\n        while (stack.peek() != -1)\
    \ {\n            if (stack.pop() != string.indexOf(substring)) {\n           \
    \     endIndex = stack.peek();\n                times += (endIndex - startIndex\
    \ + 1);\n            }\n        }\n\n        return resultTimes;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.EmptyStackException\n\tat java.base/java.util.Stack.peek(Stack.java:101)\n\
    \tat Problem.howManyTimes(tmpqjgyk5j6.java:53)\n\tat Problem.main(tmpqjgyk5j6.java:63)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        // return\
    \ 0 if the string is empty\n        if (string.isEmpty()) {\n            return\
    \ 0L;\n        }\n        // convert string to an array of characters (char[])\n\
    \        char[] charArray = string.toCharArray();\n        long total = 0L;\n\
    \        // find the length of the given substring\n        long index = string.length()\
    \ - substring.length();\n        // iterate through the whole string\n       \
    \ for (long i = 0; i < index; i++) {\n            // iterate through the substring\n\
    \            for (long j = 0; j < substring.length(); j++) {\n               \
    \ // check if the character at the current index is equal to the character at\
    \ the current index\n                if (charArray[i + j] != substring.charAt(j))\
    \ {\n                    break;\n                }\n                // check if\
    \ the character at the current index is equal to the character at the current\
    \ index\n                if (j == substring.length() - 1) {\n                \
    \    total += 1;\n                }\n            }\n        }\n        return\
    \ total;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd0optqvf.java:31: error: incompatible types: possible lossy conversion\
    \ from long to int\n                if (charArray[i + j] != substring.charAt(j))\
    \ {\n                                ^\n/tmp/tmpd0optqvf.java:31: error: incompatible\
    \ types: possible lossy conversion from long to int\n                if (charArray[i\
    \ + j] != substring.charAt(j)) {\n                                           \
    \              ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long result\
    \ = 0;\n        if (string.isEmpty() || substring.isEmpty()) {\n            return\
    \ result;\n        }\n        final int length = string.length();\n        if\
    \ (substring.length() > length) {\n            substring = substring.substring(0,\
    \ length);\n        }\n        final int slength = substring.length();\n     \
    \   int i = -1;\n        final int j = (slength < 0 ? 0 : -slength);\n       \
    \ for (int k = 0; k < slength; k++) {\n            i = i + 1;\n            if\
    \ (string.charAt(i + k) != substring.charAt(k)) {\n                i += k;\n \
    \               result += i;\n                i = -1;\n                break;\n\
    \            }\n        }\n        for (int k = slength; k < length + 1; k++)\
    \ {\n            i = i + 1;\n            if (string.charAt(i + k) != substring.charAt(k))\
    \ {\n                result += i;\n                i = -1;\n            }\n  \
    \      }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmpegunb1oa.java:39)\n\
    \tat Problem.main(tmpegunb1oa.java:48)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        int count\
    \ = 0;\n        // Check whether the original string contains the substring\n\
    \        if (string.contains(substring)) {\n            // Split the original\
    \ string with substring\n            String[] s = string.split(substring);\n \
    \           // Check whether the substring appears in the original string\n  \
    \          for (int i = 0; i < s.length; i++)\n                if (string.contains(substring,\
    \ i, s.length()))\n                    count++;\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6iwlo7ku.java:24: error: cannot find symbol\n                if\
    \ (string.contains(substring, i, s.length()))\n                              \
    \                     ^\n  symbol:   method length()\n  location: variable s of\
    \ type String[]\n1 error\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string.length()\
    \ < substring.length()) {\n            return 0;\n        }\n        int count\
    \ = 0;\n        int start = string.indexOf(substring);\n        int end = start\
    \ + substring.length();\n        while (start > -1) {\n            count++;\n\
    \            start = string.indexOf(substring, start + substring.length());\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcadyuir0.java:32)\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.length() - string.replace(substring, \"\").length();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcjnbv7kr.java:22)\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        List<String>\
    \ list = Arrays.asList(string.toLowerCase().split(substring.toLowerCase()));\n\
    \        long count = list.stream().filter(s -> s.contains(string.toLowerCase())).count();\n\
    \        return count;\n    }\n    public static void main(String[] args) {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbmmgf8g0.java:22)\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        int count\
    \ = 0;\n        int length = string.length();\n        int substringLength = substring.length();\n\
    \        if (substringLength == 0) return count;\n        // Use a list to record\
    \ count for overlapping substring.\n        ArrayList<String> record = new ArrayList<>();\n\
    \        // Use a set to prevent duplicated substring count.\n        Set<String>\
    \ set = new HashSet<>();\n        // Traverse the original string.\n        for\
    \ (int i = 0; i < length; i++) {\n            // The last character is checked.\n\
    \            if (i == length - 1) // No need check if i==length because if i ==\
    \ length, then i + 1 == length\n                // If current character is same\
    \ as last character, no need to check.\n                if (string.charAt(i) ==\
    \ string.charAt(substringLength - 1)) {\n                    // If current substring\
    \ is same as last substring, the count is 1.\n                    if (set.contains(substring))\
    \ {\n                        count++;\n                    }\n               \
    \ } else {\n                    // Add substring to the list if it is not in the\
    \ set.\n                    if (!set.contains(substring)) {\n                \
    \        set.addAll(Arrays.asList(substring));\n                    }\n      \
    \              // If current character is not same as the last character, then\
    \ we record this substring.\n                    if (string.charAt(i) != string.charAt(substringLength\
    \ - 1)) {\n                        // Record overlapping substring.\n        \
    \                record.add(\"(\" + i + \")\");\n                    }\n     \
    \           }\n            } // end if\n        } // end for\n        // Convert\
    \ array to list.\n        List<String> list = Arrays.asList(record);\n       \
    \ // Return the count.\n        return list.size();\n    } // end howManyTimes\n\
    \    // Find how many times a given substring can be found in the original string.\
    \ Count non-overlapping cases.\n    // >>> howManyTimes((\"\"), (\"a\"))\n   \
    \ // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    // (2l)\n    // >>>\
    \ howManyTimes((\"aaaa\"), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"\
    aaaa\"), (\"aa\"))\n    // (0l)\n    // >>> howManyTimes((\"aaaa\"), (\"aaa\"\
    ))\n    // (0l)\n    // >>> howManyTimes((\"aaaa\"), (\"aaaa\"))\n    // (0l)\n\
    \    public static long howManyTimes2(String string, String substring) {\n   \
    \     int count = 0;\n        int length = string.length();\n        int substringLength\
    \ = substring.length();\n        if (substringLength == 0) return count;\n   \
    \     // Use a list to record count for non-overlapping substring.\n        ArrayList<String>\
    \ record = new ArrayList<>();\n        // Use a set to prevent duplicated substring\
    \ count.\n        Set<String> set = new HashSet<>();\n        // Traverse the\
    \ original string.\n        for (int i = 0; i < length; i++) {\n            //\
    \ The last character is checked.\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyk9uxpey.java:51: error: illegal start of type\n        return\
    \ list.size();\n        ^\n/tmp/tmpyk9uxpey.java:51: error: <identifier> expected\n\
    \        return list.size();\n                        ^\n/tmp/tmpyk9uxpey.java:66:\
    \ error: class, interface, enum, or record expected\n    public static long howManyTimes2(String\
    \ string, String substring) {\n                  ^\n/tmp/tmpyk9uxpey.java:68:\
    \ error: class, interface, enum, or record expected\n        int length = string.length();\n\
    \        ^\n/tmp/tmpyk9uxpey.java:69: error: class, interface, enum, or record\
    \ expected\n        int substringLength = substring.length();\n        ^\n/tmp/tmpyk9uxpey.java:70:\
    \ error: class, interface, enum, or record expected\n        if (substringLength\
    \ == 0) return count;\n        ^\n/tmp/tmpyk9uxpey.java:72: error: class, interface,\
    \ enum, or record expected\n        ArrayList<String> record = new ArrayList<>();\n\
    \        ^\n/tmp/tmpyk9uxpey.java:74: error: class, interface, enum, or record\
    \ expected\n        Set<String> set = new HashSet<>();\n        ^\n/tmp/tmpyk9uxpey.java:76:\
    \ error: class, interface, enum, or record expected\n        for (int i = 0; i\
    \ < length; i++) {\n        ^\n/tmp/tmpyk9uxpey.java:76: error: class, interface,\
    \ enum, or record expected\n        for (int i = 0; i < length; i++) {\n     \
    \                   ^\n/tmp/tmpyk9uxpey.java:76: error: class, interface, enum,\
    \ or record expected\n        for (int i = 0; i < length; i++) {\n           \
    \                         ^\n/tmp/tmpyk9uxpey.java:79: error: class, interface,\
    \ enum, or record expected\n    public static void main(String[] args) {\n   \
    \               ^\n/tmp/tmpyk9uxpey.java:81: error: as of release 1.4, 'assert'\
    \ is a keyword, and may not be used as an identifier\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    ^\n/tmp/tmpyk9uxpey.java:82: error: as of\
    \ release 1.4, 'assert' is a keyword, and may not be used as an identifier\n \
    \   assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    ^\n/tmp/tmpyk9uxpey.java:83:\
    \ error: as of release 1.4, 'assert' is a keyword, and may not be used "
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        long start = 0;\n        while (start < string.length() && string.charAt(start)\
    \ == substring.charAt(0)) {\n            count++;\n            start++;\n    \
    \    }\n        while (start < string.length() && string.charAt(start) != substring.charAt(0))\
    \ {\n            count++;\n            start++;\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5lgwcz4b.java:19: error: incompatible types: possible lossy conversion\
    \ from long to int\n        while (start < string.length() && string.charAt(start)\
    \ == substring.charAt(0)) {\n                                                \
    \        ^\n/tmp/tmp5lgwcz4b.java:23: error: incompatible types: possible lossy\
    \ conversion from long to int\n        while (start < string.length() && string.charAt(start)\
    \ != substring.charAt(0)) {\n                                                \
    \        ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        int count\
    \ = 0;\n        long res = 0;\n        for (char c: string.toCharArray()) {\n\
    \            if (string.indexOf(substring, c) != -1)\n                count++;\n\
    \        }\n        res = count * howManyTimesInternal(string, substring, count);\n\
    \        return res;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgabdxbre.java:23: error: cannot find symbol\n        res = count\
    \ * howManyTimesInternal(string, substring, count);\n                      ^\n\
    \  symbol:   method howManyTimesInternal(String,String,int)\n  location: class\
    \ Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.indexOf(substring);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpnr0efb5a.java:20)\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        List<String>\
    \ matches = new ArrayList<>();\n        int count = 0;\n        for (int i = 0;\
    \ i < string.length(); i++) {\n            if (string.substring(i, i + substring.length()).equals(substring))\
    \ {\n                count++;\n                matches.add(string.substring(i,\
    \ i + substring.length()));\n            }\n        }\n        return matches.stream().mapToLong(s\
    \ -> 1).sum();\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpj8ecyrkl.java:20)\n\
    \tat Problem.main(tmpj8ecyrkl.java:30)\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        String\
    \ lowerCaseString = string.toLowerCase();\n        String lowerCaseSubString =\
    \ substring.toLowerCase();\n        return longStream.of(lowerCaseString.split(lowerCaseSubString)).map(s\
    \ -> s.split(\"\")).count();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyltcsg91.java:19: error: cannot find symbol\n        return longStream.of(lowerCaseString.split(lowerCaseSubString)).map(s\
    \ -> s.split(\"\")).count();\n               ^\n  symbol:   variable longStream\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011308
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        int n =\
    \ 0;\n        do {\n            n = string.indexOf(substring, n + 1);\n      \
    \  } while (n != -1);\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_5azfyyq.java:24)\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string.isEmpty()\
    \ || substring.isEmpty()) return 0L;\n        if (string.contains(substring))\n\
    \            return Long.valueOf(string.split(substring).length - 1);\n      \
    \  else\n            return howManyTimes(string.substring(0, string.lastIndexOf(substring))\
    \ + string.substring(string.lastIndexOf(substring) + 1), substring);\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5kswasam.java:25)\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        char[] chars = string.toCharArray();\n        char[] charSub =\
    \ substring.toCharArray();\n        long index = 0;\n        for (char ch: chars)\
    \ {\n            while (index < chars.length && chars[index] == charSub[0]) {\n\
    \                index++;\n            }\n            if (index == chars.length)\
    \ {\n                break;\n            }\n            count++;\n           \
    \ if (index > 0) {\n                while (index < chars.length && chars[index]\
    \ == charSub[1]) {\n                    index++;\n                }\n        \
    \    }\n        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx9zrfu29.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n            while (index < chars.length && chars[index] ==\
    \ charSub[0]) {\n                                                 ^\n/tmp/tmpx9zrfu29.java:30:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \            while (index < chars.length && chars[index] == charSub[1]) {\n  \
    \                                                   ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.split(substring).length - 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddvmf4_o.java:21)\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        String\
    \ pattern = string.replaceAll(\"\\\\*\", \".*\").replaceAll(\"\\\\?\", \".\");\n\
    \        Pattern regex = Pattern.compile(pattern);\n        Matcher regexMatcher\
    \ = regex.matcher(string);\n\n        long times = 0;\n        while (regexMatcher.find())\
    \ {\n            times++;\n        }\n\n        String regexPattern = string.replaceAll(\"\
    \\\\*\", \"[^a-zA-Z0-9]\").replaceAll(\"\\\\?\", \".\");\n        Pattern regexPattern\
    \ = Pattern.compile(regexPattern);\n        Matcher regexPatternMatcher = regexPattern.matcher(string);\n\
    \        while (regexPatternMatcher.find()) {\n            times++;\n        }\n\
    \n        long count = 0;\n        int start = 0;\n        while (start < string.length())\
    \ {\n            int end = start;\n            while (end < string.length()) {\n\
    \                if (string.substring(end, end + 1).equals(substring)) {\n   \
    \                 count++;\n                }\n                end++;\n      \
    \      }\n            start = end;\n        }\n        return count;\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppvak7x0i.java:18: error: cannot find symbol\n        Pattern regex\
    \ = Pattern.compile(pattern);\n        ^\n  symbol:   class Pattern\n  location:\
    \ class Problem\n/tmp/tmppvak7x0i.java:18: error: cannot find symbol\n       \
    \ Pattern regex = Pattern.compile(pattern);\n                        ^\n  symbol:\
    \   variable Pattern\n  location: class Problem\n/tmp/tmppvak7x0i.java:19: error:\
    \ cannot find symbol\n        Matcher regexMatcher = regex.matcher(string);\n\
    \        ^\n  symbol:   class Matcher\n  location: class Problem\n/tmp/tmppvak7x0i.java:27:\
    \ error: cannot find symbol\n        Pattern regexPattern = Pattern.compile(regexPattern);\n\
    \        ^\n  symbol:   class Pattern\n  location: class Problem\n/tmp/tmppvak7x0i.java:27:\
    \ error: variable regexPattern is already defined in method howManyTimes(String,String)\n\
    \        Pattern regexPattern = Pattern.compile(regexPattern);\n             \
    \   ^\n/tmp/tmppvak7x0i.java:27: error: cannot find symbol\n        Pattern regexPattern\
    \ = Pattern.compile(regexPattern);\n                               ^\n  symbol:\
    \   variable Pattern\n  location: class Problem\n/tmp/tmppvak7x0i.java:28: error:\
    \ cannot find symbol\n        Matcher regexPatternMatcher = regexPattern.matcher(string);\n\
    \        ^\n  symbol:   class Matcher\n  location: class Problem\n7 errors\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string\
    \ == null || substring == null) {\n            throw new IllegalArgumentException();\n\
    \        }\n\n        return IntStream.rangeClosed(0, string.length() - substring.length())\n\
    \            .map(start -> IntStream.rangeClosed(0, substring.length())\n    \
    \            .filter(end -> string.regionMatches(substring, start, end, false,\
    \ true))\n                .count())\n            .sum();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwcsq7xnh.java:23: error: incompatible types: String cannot be converted\
    \ to boolean\n                .filter(end -> string.regionMatches(substring, start,\
    \ end, false, true))\n                                                    ^\n\
    /tmp/tmpwcsq7xnh.java:24: error: incompatible types: bad return type in lambda\
    \ expression\n                .count())\n                      ^\n    possible\
    \ lossy conversion from long to int\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        String\
    \ lowerSubstring = \"\";\n        if (substring != null) {\n            lowerSubstring\
    \ = substring.toLowerCase().replaceAll(\" \", \"\");\n        }\n        return\
    \ howManyTimesImpl(string, lowerSubstring);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5tuvtg1r.java:21: error: cannot find symbol\n        return howManyTimesImpl(string,\
    \ lowerSubstring);\n               ^\n  symbol:   method howManyTimesImpl(String,String)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        if (string.isEmpty()) {\n            return count;\n        }\n\
    \        if (string.equals(substring)) {\n            count++;\n        }\n  \
    \      boolean startFound = string.startsWith(substring);\n        boolean endFound\
    \ = string.endsWith(substring);\n        boolean containsSubstring = string.contains(substring);\n\
    \        boolean foundMatch = false;\n        boolean foundMatchSubstring = false;\n\
    \        for (int i = 0; i < string.length(); i++) {\n            int sublen =\
    \ substring.length();\n            String test = string.substring(i, sublen);\n\
    \            String testSubstring = substring.substring(i, sublen);\n        \
    \    if ((startFound && test.equals(substring))\n                    || (endFound\
    \ && test.equals(substring))\n                    || (containsSubstring && test.equals(testSubstring)))\
    \ {\n                count++;\n                foundMatch = true;\n          \
    \  }\n        }\n        if (foundMatch) {\n            foundMatchSubstring =\
    \ true;\n        }\n        Set<String> set = new HashSet<>();\n        set.addAll(Arrays.asList(string.split(substring)));\n\
    \        set.addAll(Arrays.asList(substring.split(string)));\n        count =\
    \ set.size() - 1;\n        if (startFound && endFound) {\n            return count;\n\
    \        }\n        else if (startFound) {\n            if (containsSubstring\
    \ && foundMatch) {\n                return count + 1;\n            }\n       \
    \     else {\n                return count;\n            }\n        }\n      \
    \  else if (endFound) {\n            if (containsSubstring && foundMatchSubstring)\
    \ {\n                return count + 1;\n            }\n            else {\n  \
    \              return count;\n            }\n        }\n        else if (containsSubstring)\
    \ {\n            if (foundMatch) {\n                return count + 1;\n      \
    \      }\n            else {\n                return count;\n            }\n \
    \       }\n        else {\n            if (foundMatch) {\n                return\
    \ count + 1;\n            }\n            else {\n                return count;\n\
    \            }\n        }\n    }\n    public static void main(String[] args) {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 2, end 1, length 7\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpgc7l0fto.java:31)\n\
    \tat Problem.main(tmpgc7l0fto.java:85)\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long result\
    \ = 0;\n        int len = string.length();\n        int[] charIndex = new int[len];\n\
    \        int[] charPosition = new int[len];\n        long start = 0;\n       \
    \ int index = 0;\n        int position = 0;\n        for (int i = 0; i < len;\
    \ i++) {\n            charPosition[i] = string.indexOf(substring, i);\n      \
    \      charIndex[i] = i;\n        }\n        for (index = 0; index < len; index++)\
    \ {\n            if (start != charPosition[index]) {\n                if (index\
    \ == len - 1)\n                    result += 1;\n                else {\n    \
    \                result += 1 + howManyTimesBetween(\n                        \
    \    string.substring(start, charPosition[index + 1]),\n                     \
    \       substring, charPosition[index + 1]);\n                }\n            \
    \    start = charPosition[index];\n            }\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9osd4dz4.java:34: error: incompatible types: possible lossy conversion\
    \ from long to int\n                            string.substring(start, charPosition[index\
    \ + 1]),\n                                             ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        int counter\
    \ = 0;\n        long count = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            int count = 0;\n            for (int j = 0; j < substring.length();\
    \ j++) {\n                if (string.charAt(i) == substring.charAt(j)) {\n   \
    \                 count++;\n                    if (j == substring.length() -\
    \ 1) {\n                        counter++;\n                        if (counter\
    \ == substring.length()) {\n                            count++;\n           \
    \             }\n                    }\n                }\n            }\n   \
    \         if (count > count)\n                count = count;\n        }\n    \
    \    return count;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo_yg8q2y.java:20: error: variable count is already defined in method\
    \ howManyTimes(String,String)\n            int count = 0;\n                ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 1;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.substring(i,\
    \ i + substring.length()).equals(substring)) {\n                count++;\n   \
    \         }\n        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe8mpvqll.java:26)\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        int n =\
    \ string.length();\n        int m = substring.length();\n        long ans = 0,\
    \ pos = 0;\n        for (int i = 0; i < m; ++i) {\n            if (string.charAt(i\
    \ + pos) != substring.charAt(i)) {\n                ans = ans + (n - pos);\n \
    \               pos = 0;\n            } else {\n                ++pos;\n     \
    \       }\n        }\n        ans = ans + (n - pos);\n        return ans;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpevg78e49.java:21: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (string.charAt(i + pos) != substring.charAt(i))\
    \ {\n                                ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i)\
    \ == substring.charAt(0)) {\n                for (int j = 1; j < substring.length();\
    \ j++) {\n                    if (string.charAt(i) == substring.charAt(j)) {\n\
    \                        count++;\n                        i += j - 1;\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa3dpff_x.java:32)\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0; \n        int index = 0;\n        while (index < string.length()) {\n \
    \           if (string.substring(index, index + substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n            index += substring.length();\n\
    \        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppqcwg6b0.java:30)\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        int index\
    \ = string.indexOf(substring);\n        if (index != -1) {\n            long count\
    \ = 1;\n            String substringToSearch = string.substring(0, index) + string.substring(index\
    \ + 1, string.length());\n            index = string.indexOf(substringToSearch);\n\
    \            while (index != -1) {\n                count++;\n               \
    \ index = string.indexOf(substringToSearch, index + 1);\n            }\n     \
    \       return count;\n        } else {\n            return 0;\n        }\n  \
    \  }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy0dr3qtc.java:33)\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ howManyTimes(string.toCharArray(), substring.toCharArray(), 0, 0);\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppgqbow4s.java:17: error: method howManyTimes in class Problem cannot\
    \ be applied to given types;\n        return howManyTimes(string.toCharArray(),\
    \ substring.toCharArray(), 0, 0);\n               ^\n  required: String,String\n\
    \  found:    char[],char[],int,int\n  reason: actual and formal argument lists\
    \ differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ count(string, substring, string.indexOf(substring) + 1);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfbqz6hf.java:17: error: cannot find symbol\n        return count(string,\
    \ substring, string.indexOf(substring) + 1);\n               ^\n  symbol:   method\
    \ count(String,String,int)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        long startIndex = string.indexOf(substring);\n        while (startIndex\
    \ >= 0) {\n            count++;\n            startIndex = string.indexOf(substring,\
    \ startIndex + 1);\n        }\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwsdhmdln.java:21: error: no suitable method found for indexOf(String,long)\n\
    \            startIndex = string.indexOf(substring, startIndex + 1);\n       \
    \                        ^\n    method String.indexOf(int,int) is not applicable\n\
    \      (argument mismatch; String cannot be converted to int)\n    method String.indexOf(String,int)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ howManyTimes(string, substring, 0);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzagybdk8.java:17: error: method howManyTimes in class Problem cannot\
    \ be applied to given types;\n        return howManyTimes(string, substring, 0);\n\
    \               ^\n  required: String,String\n  found:    String,String,int\n\
    \  reason: actual and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660011201
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        long start = string.indexOf(substring);\n        if (start >=\
    \ 0) {\n            while (start > -1) {\n                string =\n         \
    \           string.substring(0, start) +\n                    string.substring(start\
    \ + substring.length()) +\n                    string.substring(start + substring.length(),\
    \ string.length());\n                start = string.indexOf(substring, start +\
    \ 1);\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqtpcw0g6.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n                    string.substring(0, start) +\n       \
    \                                 ^\n/tmp/tmpqtpcw0g6.java:23: error: incompatible\
    \ types: possible lossy conversion from long to int\n                    string.substring(start\
    \ + substring.length()) +\n                                           ^\n/tmp/tmpqtpcw0g6.java:24:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \                string.substring(start + substring.length(), string.length());\n\
    \                                           ^\n/tmp/tmpqtpcw0g6.java:25: error:\
    \ no suitable method found for indexOf(String,long)\n                start = string.indexOf(substring,\
    \ start + 1);\n                              ^\n    method String.indexOf(int,int)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to int)\n\
    \    method String.indexOf(String,int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n4 errors\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        char[] chars = string.toCharArray();\n        char[] chars1 =\
    \ substring.toCharArray();\n        if (chars.length > chars1.length) {\n    \
    \        char[] temp = chars;\n            chars = chars1;\n            chars1\
    \ = temp;\n        }\n        int j = 0;\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            if (chars[i] == chars1[j]) {\n                count++;\n\
    \                j++;\n                if (j == chars1.length) {\n           \
    \         break;\n                }\n            } else {\n                count\
    \ = 0;\n                j = 0;\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzmf93z5a.java:42)\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        String\
    \ newString = string.replaceAll(substring, \"\");\n        long length = string.length()\
    \ - newString.length();\n        return length / substring.length();\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt_15fd86.java:24)\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = Long.MAX_VALUE;\n        for (int i = 0; i < string.length(); i++) {\n   \
    \         int start = i;\n            int end = string.indexOf(substring, start);\n\
    \            if (end != -1) {\n                if (end < start) {\n          \
    \          count = Math.min(count, end);\n                } else {\n         \
    \           count += end - start;\n                }\n            }\n        \
    \    start = string.indexOf(substring, end);\n            if (start != -1) {\n\
    \                count += end - start + 1;\n            }\n        }\n       \
    \ return count;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3mgx969p.java:36)\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        List<String>\
    \ list = string.split(substring);\n        int count = 0;\n        for (String\
    \ s : list) {\n            if (s.equals(substring)) {\n                count++;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_fakaty5.java:17: error: incompatible types: String[] cannot be\
    \ converted to List<String>\n        List<String> list = string.split(substring);\n\
    \                                        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string.contains(substring))\
    \ {\n            return string.length() - string.toLowerCase().indexOf(substring.toLowerCase())\
    \ + string.substring(0, string.toLowerCase().indexOf(substring.toLowerCase())).length()\
    \ - substring.length();\n        } else {\n            return 0;\n        }\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1elf70kr.java:25)\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ howManyTimesFaster(string, substring, new HashSet<String>(), new HashSet<String>());\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7j2cl5kl.java:17: error: cannot find symbol\n        return howManyTimesFaster(string,\
    \ substring, new HashSet<String>(), new HashSet<String>());\n               ^\n\
    \  symbol:   method howManyTimesFaster(String,String,HashSet<String>,HashSet<String>)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        \n        for (char letter : string.toCharArray()) {\n       \
    \     if (letter == substring.charAt(0)) {\n                for (int i = 1; i\
    \ < substring.length(); i++) {\n                    if (string.charAt(i) == substring.charAt(i))\
    \ {\n                        count++;\n                    } else if (string.charAt(i)\
    \ != substring.charAt(i)) {\n                        break;\n                \
    \    }\n                }\n            }\n        }\n        return count;\n \
    \   }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzq0_2dwp.java:34)\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        int[] counts\
    \ = new int[substring.length()];\n        char[] chars = string.toCharArray();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            int index = chars.indexOf(substring,\
    \ i);\n            counts[(int) index] += 1;\n        }\n        return Arrays.stream(counts).filter(i\
    \ -> i != 0).count();\n    }\n    public static void main(String[] args) {\n \
    \   assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjekqqki1.java:20: error: cannot find symbol\n            int index\
    \ = chars.indexOf(substring, i);\n                             ^\n  symbol:  \
    \ method indexOf(String,int)\n  location: variable chars of type char[]\n1 error\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long sum\
    \ = 0;\n        int pos = string.indexOf(substring);\n        while (pos != -1)\
    \ {\n            sum += 1;\n            pos = string.indexOf(substring, pos +\
    \ substring.length());\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp3oihaqmo.java:28)\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        // Write\
    \ your code here\n        long count = 0;\n        int stringLength = string.length();\n\
    \        int substringLength = substring.length();\n        for(int i = 0; i <\
    \ stringLength - substringLength; i++) {\n            if(string.substring(i, i\
    \ + substringLength).equals(substring)) {\n                count++;\n        \
    \    }\n        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6zfrs53l.java:30)\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string\
    \ == null || substring.length() == 0) return 0;\n\n        // Find position of\
    \ first occurrence of substring in string and save it\n        int stringStartIndex\
    \ = string.indexOf(substring);\n        if (stringStartIndex == -1) return 0;\n\
    \n        // Split string into substring prefix and suffix\n        String[] prefix\
    \ = string.substring(0, stringStartIndex);\n        String[] suffix = string.substring(stringStartIndex\
    \ + substring.length());\n        if (suffix.length() == 0) return prefix.length();\n\
    \n        // Recursively find how many times suffix can be found in the prefix\
    \ by finding the number of times prefix can be found in the suffix\n        long\
    \ count = howManyTimes(prefix, suffix);\n        if (suffix.length() > 0) {\n\
    \            // Find the number of times substring can be found in the suffix\n\
    \            count += howManyTimes(suffix, substring);\n        }\n\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxgou2k2s.java:24: error: incompatible types: String cannot be converted\
    \ to String[]\n        String[] prefix = string.substring(0, stringStartIndex);\n\
    \                                          ^\n/tmp/tmpxgou2k2s.java:25: error:\
    \ incompatible types: String cannot be converted to String[]\n        String[]\
    \ suffix = string.substring(stringStartIndex + substring.length());\n        \
    \                                  ^\n/tmp/tmpxgou2k2s.java:26: error: cannot\
    \ find symbol\n        if (suffix.length() == 0) return prefix.length();\n   \
    \               ^\n  symbol:   method length()\n  location: variable suffix of\
    \ type String[]\n/tmp/tmpxgou2k2s.java:26: error: cannot find symbol\n       \
    \ if (suffix.length() == 0) return prefix.length();\n                        \
    \                       ^\n  symbol:   method length()\n  location: variable prefix\
    \ of type String[]\n/tmp/tmpxgou2k2s.java:29: error: incompatible types: String[]\
    \ cannot be converted to String\n        long count = howManyTimes(prefix, suffix);\n\
    \                                  ^\n/tmp/tmpxgou2k2s.java:30: error: cannot\
    \ find symbol\n        if (suffix.length() > 0) {\n                  ^\n  symbol:\
    \   method length()\n  location: variable suffix of type String[]\n/tmp/tmpxgou2k2s.java:32:\
    \ error: incompatible types: String[] cannot be converted to String\n        \
    \    count += howManyTimes(suffix, substring);\n                             \
    \     ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n7 errors\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ howManyTimesImpl(string.split(substring));\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6moqc5lk.java:17: error: cannot find symbol\n        return howManyTimesImpl(string.split(substring));\n\
    \               ^\n  symbol:   method howManyTimesImpl(String[])\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011310
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        long slength = string.length();\n        long ssublength = substring.length();\n\
    \        for (int i = 0; i <= slength - ssublength + 1; i++) {\n            if\
    \ (string.subSequence(0, i).equals(substring)) {\n                count += 1;\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8b2ps0lv.java:29)\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ IntStream.range(0, string.length()).filter(i -> string.regionMatches(true, i,\
    \ substring, 0, substring.length()))\n                .count();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        // Split\
    \ string into list of substrings\n        List<String> stringList = string.split(\"\
    \");\n        List<String> substringList = substring.split(\"\");\n\n        //\
    \ Initialize count with 0\n        long count = 0;\n\n        // Go through substring\
    \ list and check if the current string contains substring\n        for (int i\
    \ = 0; i < substringList.size(); i++) {\n            if (stringList.contains(substringList.get(i)))\
    \ {\n                count++;\n            }\n        }\n\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwaer38fx.java:18: error: incompatible types: String[] cannot be\
    \ converted to List<String>\n        List<String> stringList = string.split(\"\
    \");\n                                              ^\n/tmp/tmpwaer38fx.java:19:\
    \ error: incompatible types: String[] cannot be converted to List<String>\n  \
    \      List<String> substringList = substring.split(\"\");\n                 \
    \                                   ^\n2 errors\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ howManyTimes(string.toCharArray(), substring.toCharArray());\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkt7lfxx7.java:17: error: incompatible types: char[] cannot be converted\
    \ to String\n        return howManyTimes(string.toCharArray(), substring.toCharArray());\n\
    \                                              ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        // O(n)\
    \ time and O(n) space\n        int count = 0;\n        string = string.toLowerCase();\n\
    \        substring = substring.toLowerCase();\n        int len = string.length();\n\
    \        int slen = substring.length();\n        for (int i = 0; i != len; ++i)\
    \ {\n            String sub = string.substring(i, i + slen);\n            if (substring.startsWith(sub))\
    \ {\n                count += 1;\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpk4aahj9c.java:24)\n\
    \tat Problem.main(tmpk4aahj9c.java:34)\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        final long\
    \ result = Long.MIN_VALUE;\n        final List<String> substrings = new ArrayList<>();\n\
    \        substrings.add(substring);\n\n        for (String s : string.split(\"\
    (?<=\\\\G.{0,})\")) {\n            for (String sub : substrings) {\n         \
    \       if (s.startsWith(sub)) {\n                    final long count = substrings.stream()\n\
    \                            .filter(ss -> ss.equals(sub)).count();\n        \
    \            result = Math.max(count, result);\n                    substrings.remove(sub);\n\
    \                }\n            }\n        }\n\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps71_lyg1.java:26: error: cannot assign a value to final variable\
    \ result\n                    result = Math.max(count, result);\n            \
    \        ^\n1 error\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        if (string.length() == 0 || substring.length() == 0) {\n     \
    \       return 0;\n        }\n        for(int i = 0; i<string.length()-substring.length();i++)\
    \ {\n            if (string.substring(i,i+substring.length()).equals(substring))\
    \ {\n                count++;\n            }\n        }\n        return count;\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppe1ldav0.java:30)\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        int startIndex = -1;\n        int endIndex = -1;\n        \n \
    \       \n        if (string.length() == 0) {\n            return 0;\n       \
    \ }\n        \n        for (int i = 0; i < string.length(); i++) {\n         \
    \   if (string.charAt(i) == substring.charAt(0)) {\n                startIndex\
    \ = i;\n            }\n            else if (string.charAt(i) == substring.charAt(string.length()\
    \ - 1)) {\n                endIndex = i;\n            }\n        }\n        \n\
    \        \n        if (startIndex >= 0 && endIndex >= 0) {\n            \n   \
    \         for (int i = 0; i < string.length(); i++) {\n                if (i <\
    \ startIndex || i >= endIndex) {\n                    count++;\n             \
    \   }\n            }\n        }\n        \n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 6\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmpv3mtksvo.java:30)\n\
    \tat Problem.main(tmpv3mtksvo.java:49)\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0; // count the occurrence\n        if (string == null || substring == null)\n\
    \            return 0;\n        if (string.length() < substring.length())\n  \
    \          substring = substring + \"\\0\"; // add null character for substrings\
    \ that are shorter than string\n        \n        string = string.trim(); // remove\
    \ leading and trailing whitespaces\n        substring = substring.trim(); // remove\
    \ leading and trailing whitespaces\n\n        int i = 0, j = 0;\n        // Search\
    \ for the first index\n        while (i < string.length() && j < substring.length())\n\
    \            if (string.charAt(i) == substring.charAt(j))\n                i++;\n\
    \            else\n                j++;\n        \n        // If i is at the end\
    \ or if we didn't find any character\n        if (i >= string.length() || j >=\
    \ substring.length())\n            return 0;\n        // If i is at the beginning\
    \ of string and the substring is not found\n        if (i < substring.length()\
    \ && j >= substring.length())\n            return 0;\n        // If j doesn't\
    \ appear in the substring\n        if (i < substring.length() && j < substring.length())\n\
    \            return 0;\n\n        while (i < string.length() && j < substring.length())\
    \ {\n            if (string.charAt(i) == substring.charAt(j)) {\n            \
    \    count++;\n                i++;\n                j++;\n            }\n   \
    \         else\n                j++;\n        }\n\n        return count;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd5qkfyvw.java:58)\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long result\
    \ = Long.MAX_VALUE;\n        \n        if (string == null || string.trim().isEmpty()\
    \ || substring == null || substring.trim().isEmpty()) {\n            return result;\n\
    \        }\n        \n        // Case 1: string is empty, return 0.\n        if\
    \ (string.isEmpty()) {\n            return 0;\n        }\n        \n        //\
    \ Case 2: string is full of characters, return 1.\n        if (string.length()\
    \ == substring.length()) {\n            return 1;\n        }\n        \n     \
    \   // Case 3: substring is only a substring, return 1.\n        if (string.equals(substring))\
    \ {\n            return 1;\n        }\n        \n        // Case 4: substring\
    \ is not a substring, return 2.\n        if (string.contains(substring)) {\n \
    \           return 2;\n        }\n        \n        // Case 5: substring is a\
    \ prefix of string, return 2.\n        if (string.startsWith(substring)) {\n \
    \           return 2;\n        }\n        \n        // Case 6: substring is a\
    \ suffix of string, return 2.\n        if (string.endsWith(substring)) {\n   \
    \         return 2;\n        }\n        \n        // Case 7: substring is a prefix\
    \ or suffix of string, return 3.\n        if (string.contains(substring) || string.startsWith(substring)\
    \ || string.endsWith(substring)) {\n            return 3;\n        }\n       \
    \ \n        // Case 8: substring is not a prefix and suffix of string, return\
    \ 4.\n        if (string.startsWith(substring) || string.endsWith(substring))\
    \ {\n            return 4;\n        }\n        \n        // Case 9: substring\
    \ is a prefix or suffix of string, return 4.\n        if (string.contains(substring)\
    \ || string.endsWith(substring)) {\n            return 4;\n        }\n       \
    \ \n        // Case 10: substring is not a prefix and suffix of string, return\
    \ 5.\n        if (string.endsWith(substring)) {\n            return 5;\n     \
    \   }\n        \n        // Case 11: substring is not a prefix and suffix of string,\
    \ return 5.\n        if (string.contains(substring)) {\n            return 5;\n\
    \        }\n        \n        // Case 12: substring is a prefix or suffix of string,\
    \ return 6.\n        if (string.startsWith(substring) || string.contains(substring))\
    \ {\n            return 6;\n        }\n        \n        // Case 13: substring\
    \ is not a prefix and suffix of string, return 7.\n        if (string.endsWith(substring))\
    \ {\n            return 7;\n        }\n        \n        // Case 14: substring\
    \ is not a prefix and suffix of string, return 7.\n        if (string.contains(substring))\
    \ {\n            return 7;\n        }\n        \n        // Case 15: substring\
    \ is a prefix or suffix of string, return 8.\n        if (string.startsWith(substring)\
    \ || string.endsWith(substring)) {\n            return 8;\n        }\n       \
    \ \n        // Case 16: substring is not a prefix and suffix of string, return\
    \ 9.\n        if (string.contains(substring)) {\n            return 9;\n     \
    \   }\n\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ydl4lml.java:103: error: missing return statement\n    }\n   \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        String\
    \ s = string.substring(0,substring.length());\n        long count = 0;\n     \
    \   for(int i=0; i<string.length()-substring.length()+1; i++) {\n            String\
    \ t = string.substring(i,i+substring.length());\n            if(t.equals(s)) {\n\
    \                count++;\n            }\n        }\n        return count;\n \
    \   }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 0, end 1, length 0\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmpxmqibrj0.java:17)\n\
    \tat Problem.main(tmpxmqibrj0.java:28)\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string.equals(substring))\
    \ {\n            return 0l;\n        } else {\n            return string.split(substring).length\
    \ - string.split(substring).length + 1;\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0_dln5yp.java:24)\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        long stringLength = string.length();\n        long substringLength\
    \ = substring.length();\n        int minLength = Math.min(stringLength, substringLength);\n\
    \        int i = 0;\n        while (i < stringLength) {\n            if (string.charAt(i)\
    \ == substring.charAt(0)) {\n                if (i + minLength == stringLength)\n\
    \                    break;\n                i += minLength;\n            }\n\
    \            else {\n                i++;\n                count++;\n        \
    \    }\n        }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9odppv0x.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n        int minLength = Math.min(stringLength, substringLength);\n\
    \                                ^\n1 error\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.length() - string.replace(substring, \"\").length();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcjnbv7kr.java:22)\n"
  stdout: ''
  timestamp: 1660011304
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        List<String>\
    \ result = new ArrayList<>();\n\n        long times = 0;\n        int index =\
    \ string.indexOf(substring);\n        while (index >= 0) {\n            result.add(string.substring(0,\
    \ index));\n            string = string.substring(index + 1);\n            index\
    \ = string.indexOf(substring);\n            times++;\n        }\n\n        Collections.sort(result);\n\
    \        for (String string : result) {\n            String chars = \"\";\n  \
    \          for (int i = 0; i < string.length(); i++) {\n                chars\
    \ += string.charAt(i);\n            }\n            if (chars.equals(substring))\
    \ {\n                return times;\n            }\n        }\n\n        return\
    \ 0;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv3vbtgug.java:29: error: variable string is already defined in\
    \ method howManyTimes(String,String)\n        for (String string : result) {\n\
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        int n = string.length();\n        int s = substring.length();\n\
    \n        if (n >= s) {\n            for (int i = 0; i <= n - s; i++) {\n    \
    \            if (string.substring(i, i + s).equals(substring)) {\n           \
    \         count++;\n                }\n            }\n        } else {\n     \
    \       System.out.println(string + \" is too short\");\n        }\n        return\
    \ count;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ' is too short

    '
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.length() - string.replaceAll(substring, \"\").length();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpc90yzax8.java:22)\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        // Return\
    \ the number of occurrences.\n        int count = 0;\n        boolean found =\
    \ false;\n        for(int i=0; i < string.length(); i++) {\n            // Skip\
    \ the original string.\n            if(string.charAt(i) == substring.charAt(0))\
    \ {\n                count++;\n                continue;\n            }\n\n  \
    \          // Find the rest of the substring.\n            int index = string.indexOf(substring,\
    \ i+1);\n            found = (index != -1);\n            if((found) && (i == index))\
    \ {\n                // If the original string was a substring, the character\
    \ is found one more time.\n                count++;\n            }\n        }\n\
    \        return (Long.MAX_VALUE == count) ? Long.MAX_VALUE : count;\n    }\n \
    \   public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp13_obaaa.java:40)\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.toLowerCase().chars().filter(c -> c == substring.toLowerCase().charAt(0)).count()\
    \ + string.matches(substring + \"$\") ? 1 : 0l;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o1mqbuq.java:17: error: bad operand types for binary operator\
    \ '+'\n        return string.toLowerCase().chars().filter(c -> c == substring.toLowerCase().charAt(0)).count()\
    \ + string.matches(substring + \"$\") ? 1 : 0l;\n                            \
    \                                                                            ^\n\
    \  first type:  long\n  second type: boolean\n1 error\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0; // initialize count\n        if (string.length() == 0 || substring.length()\
    \ == 0) {\n            return count; // return 0 if either string is empty\n \
    \       }\n        if (string.equals(substring)) {\n            return 1; // return\
    \ 1 if strings and substrings are equal\n        }\n\n        // Iterate over\
    \ each character of string and compare it to substring\n        for (int i = 0;\
    \ i < string.length(); i++) {\n            String character = string.charAt(i);\n\
    \            if (substring.contains(character)) { // compare current character\
    \ of string to all characters of substring\n                count++; // increase\
    \ count by 1\n            }\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy5zl9189.java:27: error: incompatible types: char cannot be converted\
    \ to String\n            String character = string.charAt(i);\n              \
    \                              ^\n1 error\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long[]\
    \ count = new long[substring.length() + 1];\n        for (int i = 0; i <= string.length()\
    \ - substring.length(); i++) {\n            int subIndex = 0;\n            for\
    \ (int j = 0; j < substring.length(); j++) {\n                if (string.charAt(i\
    \ + j) != substring.charAt(subIndex++)) {\n                    break;\n      \
    \          }\n            }\n            if (subIndex == substring.length()) {\n\
    \                count[0]++;\n            }\n        }\n        return count[substring.length()];\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpue2w7gf8.java:33)\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string.isEmpty()\
    \ || substring.isEmpty()) {\n            return 0L;\n        }\n        long count\
    \ = 0L;\n        int start = string.indexOf(substring);\n        while (start\
    \ != -1) {\n            count++;\n            start = string.indexOf(substring,\
    \ start + substring.length());\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7p0nee7a.java:31)\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        Set<Character>\
    \ set = new HashSet<>();\n        for (char c : string.toCharArray()) {\n    \
    \        if (set.contains(c))\n                set.clear();\n            else\n\
    \                set.add(c);\n            if (set.contains(substring))\n     \
    \           set.clear();\n        }\n        return set.size();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp45jheogl.java:30)\n"
  stdout: ''
  timestamp: 1660011311
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.split(substring).length - 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddvmf4_o.java:21)\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ longStream.range(0, string.length() - substring.length())\n            .mapToObj(i\
    \ -> new Pair<>(string.substring(i), string.substring(i, i + substring.length())))\n\
    \            .filter(p -> p.getFirst().equalsIgnoreCase(substring))\n        \
    \    .count();\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwabm2lt2.java:17: error: cannot find symbol\n        return longStream.range(0,\
    \ string.length() - substring.length())\n               ^\n  symbol:   variable\
    \ longStream\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        if (string == null || string == substring) {\n            return\
    \ count;\n        }\n        if (string.length() == 0 || substring.length() ==\
    \ 0) {\n            return count;\n        }\n        if (string.charAt(0) ==\
    \ substring.charAt(0)) {\n            count++;\n            return howManyTimes(string.substring(1),\
    \ substring);\n        }\n        int first = 0;\n        int last = string.length()\
    \ - 1;\n        while (first < last) {\n            int mid = (first + last) /\
    \ 2;\n            int cmp = string.charAt(mid).compareTo(substring.charAt(0));\n\
    \            if (cmp > 0) {\n                first = mid;\n            } else\
    \ {\n                last = mid;\n            }\n        }\n        count += first\
    \ + 1 == last ? 1 : 0;\n        if (first < last) {\n            return howManyTimes(string.substring(first\
    \ + 1, last), substring);\n        }\n        return count;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps63g3wjf.java:32: error: char cannot be dereferenced\n        \
    \    int cmp = string.charAt(mid).compareTo(substring.charAt(0));\n          \
    \                              ^\n1 error\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        int count\
    \ = 0;\n        if (string.isEmpty()) {\n            return 0;\n        }\n  \
    \      if (substring.isEmpty()) {\n            return count;\n        }\n    \
    \    if (string.equals(substring)) {\n            return 1;\n        }\n     \
    \   for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i)\
    \ == substring.charAt(0)) {\n                String substring1 = substring;\n\
    \                while (substring1.length() > 0) {\n                    substring1\
    \ = substring1.substring(0, substring1.length() - 1);\n                    if\
    \ (string.substring(i, i + substring1.length()).equals(substring1)) {\n      \
    \                  count += 1;\n                    }\n                    i +=\
    \ substring1.length() - 1;\n                }\n            } else {\n        \
    \        int j = i + 1;\n                while (j < string.length() && string.charAt(i)\
    \ == string.charAt(j)) {\n                    j += 1;\n                }\n   \
    \             String substring2 = substring;\n                while (substring2.length()\
    \ > 0) {\n                    substring2 = substring2.substring(substring2.length()\
    \ - 1);\n                    String substring12 = (substring1 + substring2).substring(0,\
    \ substring2.length());\n                    if (string.substring(i, i + substring12.length()).equals(substring12))\
    \ {\n                        count += 1;\n                    }\n            \
    \        i += substring12.length() - 1;\n                }\n            }\n  \
    \      }\n        return count;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpolgglb8j.java:45: error: cannot find symbol\n                 \
    \   String substring12 = (substring1 + substring2).substring(0, substring2.length());\n\
    \                                          ^\n  symbol:   variable substring1\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long result\
    \ = 0L;\n        int position = 0;\n        do {\n            if (string.charAt(position)\
    \ == substring.charAt(0)) {\n                result++;\n            }\n      \
    \      position++;\n        } while (position < string.length() && string.charAt(position)\
    \ == substring.charAt(0));\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 0\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmpggh9ulbw.java:20)\n\
    \tat Problem.main(tmpggh9ulbw.java:28)\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long total\
    \ = 0;\n        boolean found = false;\n        if (string == null || string ==\
    \ \"\" || substring == null || substring == \"\") return 0;\n        int index\
    \ = 0;\n        while (index < string.length()) {\n            int count = 0;\n\
    \            while (index < string.length() && !found) {\n                if (string.charAt(index)\
    \ == substring.charAt(0)) {\n                    if (string.charAt(index) == substring.charAt(1))\
    \ {\n                        count++;\n                    } else if (string.charAt(index)\
    \ == substring.charAt(2)) {\n                        count++;\n              \
    \      } else if (string.charAt(index) == substring.charAt(3)) {\n           \
    \             count++;\n                    } else if (string.charAt(index) ==\
    \ substring.charAt(4)) {\n                        count++;\n                 \
    \   } else if (string.charAt(index) == substring.charAt(5)) {\n              \
    \          count++;\n                    } else if (string.charAt(index) == substring.charAt(6))\
    \ {\n                        count++;\n                    } else if (string.charAt(index)\
    \ == substring.charAt(7)) {\n                        count++;\n              \
    \      } else if (string.charAt(index) == substring.charAt(8)) {\n           \
    \             count++;\n                    } else if (string.charAt(index) ==\
    \ substring.charAt(9)) {\n                        count++;\n                 \
    \   }\n                }\n                index++;\n            }\n          \
    \  total += count;\n            if (found == true) {\n                found =\
    \ false;\n            } else {\n                found = true;\n              \
    \  if (index != string.length()) {\n                    index++;\n           \
    \     }\n            }\n        }\n        return total;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmp7v8g6ioz.java:25)\n\
    \tat Problem.main(tmp7v8g6ioz.java:61)\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        char[]\
    \ charArray = string.toCharArray();\n        char[] charArray2 = substring.toCharArray();\n\
    \        long sum = 0;\n        for (char c : charArray) {\n            int pos\
    \ = Arrays.binarySearch(charArray2, c);\n            if (pos >= 0) {\n       \
    \         sum += pos;\n            }\n        }\n        return sum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp476817vk.java:30)\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        List<String>\
    \ strings = Arrays.asList((string), (string), (string), (string));\n        List<String>\
    \ substrings = Arrays.asList((substring), (substring), (substring), (substring));\n\
    \        long result = 0l;\n        for (String s : strings) {\n            long\
    \ count = substrings.stream().filter(sub -> s.indexOf(sub) != -1).count();\n \
    \           if (count > 0) {\n                result += (long) count;\n      \
    \      }\n        }\n        return result;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1o5cst_o.java:30)\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        long len1 = string.length();\n        long len2 = substring.length();\n\
    \        \n        List<String> result = new ArrayList<String>();\n        for\
    \ (int i = 0; i < len1 - len2; ++i) {\n            if (string.substring(i, len1\
    \ + i).equals(substring))\n                result.add(string.substring(i, len1\
    \ + i));\n        }\n        \n        for (String s : result) {\n           \
    \ count+=1;\n        }\n        \n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpszzw5zag.java:23: error: incompatible types: possible lossy conversion\
    \ from long to int\n            if (string.substring(i, len1 + i).equals(substring))\n\
    \                                         ^\n/tmp/tmpszzw5zag.java:24: error:\
    \ incompatible types: possible lossy conversion from long to int\n           \
    \     result.add(string.substring(i, len1 + i));\n                           \
    \                         ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        String\
    \ cleanedString = string.replaceAll(\"[^\" + substring + \"]\", \"\");\n     \
    \   String cleanedSubString = substring.replaceAll(\"[^\" + string + \"]\", \"\
    \");\n\n        return cleanedString.length() - cleanedSubString.length();\n \
    \   }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.util.regex.PatternSyntaxException: Unclosed\
    \ character class near index 2\n[^]\n  ^\n\tat java.base/java.util.regex.Pattern.error(Pattern.java:2028)\n\
    \tat java.base/java.util.regex.Pattern.clazz(Pattern.java:2690)\n\tat java.base/java.util.regex.Pattern.sequence(Pattern.java:2139)\n\
    \tat java.base/java.util.regex.Pattern.expr(Pattern.java:2069)\n\tat java.base/java.util.regex.Pattern.compile(Pattern.java:1783)\n\
    \tat java.base/java.util.regex.Pattern.<init>(Pattern.java:1430)\n\tat java.base/java.util.regex.Pattern.compile(Pattern.java:1069)\n\
    \tat java.base/java.lang.String.replaceAll(String.java:2942)\n\tat Problem.howManyTimes(tmp6gxr05x2.java:18)\n\
    \tat Problem.main(tmp6gxr05x2.java:23)\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ howManyTimesImpl(string, substring, 0);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuwvcnd9u.java:17: error: cannot find symbol\n        return howManyTimesImpl(string,\
    \ substring, 0);\n               ^\n  symbol:   method howManyTimesImpl(String,String,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.chars().filter(c -> c == substring).count() + string.chars().filter(c\
    \ -> c!=substring).count() - string.split(substring).length - 1;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\"))\
    \ == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8nmoes8u.java:17: error: bad operand types for binary operator\
    \ '=='\n        return string.chars().filter(c -> c == substring).count() + string.chars().filter(c\
    \ -> c!=substring).count() - string.split(substring).length - 1;\n           \
    \                                 ^\n  first type:  int\n  second type: String\n\
    /tmp/tmp8nmoes8u.java:17: error: bad operand types for binary operator '!='\n\
    \        return string.chars().filter(c -> c == substring).count() + string.chars().filter(c\
    \ -> c!=substring).count() - string.split(substring).length - 1;\n           \
    \                                                                            \
    \         ^\n  first type:  int\n  second type: String\n2 errors\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ Stream.of(string.split(substring))\n                .map(s -> {\n          \
    \          long result = 1;\n                    for (int i = 0; i < s.length();\
    \ i++) {\n                        s = s.substring(0, i) + s.substring(i + 1);\n\
    \                        result = result * (long) Math.pow(2, s.length() - i)\
    \ * s.contains(substring);\n                    }\n                    return\
    \ result;\n                })\n                .sum();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0zrebyjw.java:22: error: bad operand types for binary operator\
    \ '*'\n                        result = result * (long) Math.pow(2, s.length()\
    \ - i) * s.contains(substring);\n                                            \
    \                                 ^\n  first type:  long\n  second type: boolean\n\
    /tmp/tmp0zrebyjw.java:26: error: cannot find symbol\n                .sum();\n\
    \                ^\n  symbol:   method sum()\n  location: interface Stream<Long>\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ LongStream.range(0, string.length() - substring.length()).filter(i -> string.substring(i,\
    \ i + substring.length()).equals(substring)).count();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphfsi5it8.java:17: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return LongStream.range(0, string.length() - substring.length()).filter(i\
    \ -> string.substring(i, i + substring.length()).equals(substring)).count();\n\
    \                                                                            \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        int count\
    \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i)\
    \ == substring.charAt(0)) {\n                for (int j = 1; j < substring.length();\
    \ j++) {\n                    if (string.charAt(i) == substring.charAt(j)) {\n\
    \                        count++;\n                        i++;\n            \
    \            j++;\n                    }\n                }\n            }\n \
    \       }\n        return count;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfffzvi_w.java:33)\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ Arrays.stream(string.toLowerCase().split(\"\"))\n                .mapToLong(s\
    \ -> string.indexOf(substring, 0, s.length()))\n                .sum();\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdewtij0c.java:18: error: no suitable method found for indexOf(String,int,int)\n\
    \                .mapToLong(s -> string.indexOf(substring, 0, s.length()))\n \
    \                                     ^\n    method String.indexOf(int) is not\
    \ applicable\n      (actual and formal argument lists differ in length)\n    method\
    \ String.indexOf(int,int) is not applicable\n      (actual and formal argument\
    \ lists differ in length)\n    method String.indexOf(String) is not applicable\n\
    \      (actual and formal argument lists differ in length)\n    method String.indexOf(String,int)\
    \ is not applicable\n      (actual and formal argument lists differ in length)\n\
    \    method String.indexOf(byte[],byte,int,String,int) is not applicable\n   \
    \   (actual and formal argument lists differ in length)\n1 error\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long result\
    \ = 0;\n\n        for (int i = 0; i <= string.length(); i++) {\n            if\
    \ (string.indexOf(substring, i) == i)\n                ++result;\n        }\n\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.indexOf(substring).longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5cli_eir.java:17: error: int cannot be dereferenced\n        return\
    \ string.indexOf(substring).longValue();\n                                   \
    \     ^\n1 error\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ howManyTimesImpl(string, substring, 0);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuwvcnd9u.java:17: error: cannot find symbol\n        return howManyTimesImpl(string,\
    \ substring, 0);\n               ^\n  symbol:   method howManyTimesImpl(String,String,int)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        int count\
    \ = 0;\n        long length = 0;\n        for (int i = 0; i < string.length();\
    \ i++) {\n            if (string.charAt(i) == substring.charAt(0)) {\n       \
    \         count++;\n            }\n        }\n        for (int i = 0; i < string.length();\
    \ i++) {\n            int j = i + substring.length();\n            length += string.substring(i,\
    \ j).length();\n            if (i == j) break;\n            if (string.charAt(i)\
    \ == substring.charAt(substring.length() - 1)) {\n                count++;\n \
    \               i++;\n            }\n        }\n        return count;\n    }\n\
    \    public static void main(String[] args) {\n    assert(howManyTimes((\"\"),\
    \ (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppxml7jl9.java:37)\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        for (int i = 0; i < string.length(); i++) {\n            if (string.charAt(i)\
    \ == substring.charAt(0)) {\n                for (int j = 1; j < substring.length();\
    \ j++) {\n                    if (string.charAt(i) == substring.charAt(j)) {\n\
    \                        count += 1;\n                    }\n                }\n\
    \            }\n        }\n        return count;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphbmtzs16.java:31)\n"
  stdout: ''
  timestamp: 1660011313
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string\
    \ == null || substring == null || string.isEmpty() || substring.isEmpty()) {\n\
    \            return 0l;\n        }\n        String[] chars = string.split(\"\"\
    );\n        String[] chars2 = substring.split(\"\");\n        long[] times = new\
    \ long[chars.length];\n        for(int i = 0; i < chars.length; i++) {\n     \
    \       times[i] = chars[i].compareTo(chars2[i]);\n        }\n        int minIndex\
    \ = 0;\n        int maxIndex = times.length - 1;\n        while(true) {\n    \
    \        int mid = (minIndex + maxIndex) / 2;\n            if(times[mid] == 0)\
    \ {\n                return 0l;\n            }\n            if(times[mid] < 0)\
    \ {\n                maxIndex = mid;\n            } else {\n                minIndex\
    \ = mid;\n            }\n        }\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArrayIndexOutOfBoundsException:\
    \ Index 1 out of bounds for length 1\n\tat Problem.howManyTimes(tmpvt500l64.java:24)\n\
    \tat Problem.main(tmpvt500l64.java:42)\n"
  stdout: ''
  timestamp: 1660011313
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.split(substring).length - 1;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpddvmf4_o.java:21)\n"
  stdout: ''
  timestamp: 1660011309
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long result\
    \ = Long.MAX_VALUE;\n        Set<String> set = new HashSet<>();\n        for(char\
    \ c: string.toCharArray()) {\n            for(int i=0; i<substring.length(); i++)\
    \ {\n                if(c == substring.charAt(i)) {\n                    set.add(c);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     for(char c: set.toArray(new char[set.size()])) {\n            int count\
    \ = 0;\n            for(int i=0; i<string.length(); i++) {\n                if(c\
    \ == string.charAt(i)) {\n                    count++;\n                    break;\n\
    \                }\n            }\n            if(count > 0) {\n             \
    \   result = Math.min(result, count-1);\n            }\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpblj5te2u.java:22: error: incompatible types: char cannot be converted\
    \ to String\n                    set.add(c);\n                            ^\n\
    /tmp/tmpblj5te2u.java:27: error: no suitable method found for toArray(char[])\n\
    \        for(char c: set.toArray(new char[set.size()])) {\n                  \
    \     ^\n    method Collection.<T#1>toArray(IntFunction<T#1[]>) is not applicable\n\
    \      (cannot infer type-variable(s) T#1\n        (argument mismatch; char[]\
    \ cannot be converted to IntFunction<T#1[]>))\n    method Set.<T#2>toArray(T#2[])\
    \ is not applicable\n      (inference variable T#2 has incompatible bounds\n \
    \       equality constraints: char\n        lower bounds: Object)\n  where T#1,T#2\
    \ are type-variables:\n    T#1 extends Object declared in method <T#1>toArray(IntFunction<T#1[]>)\n\
    \    T#2 extends Object declared in method <T#2>toArray(T#2[])\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660011313
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        if (string.isEmpty())\n\
    \            return 0;\n\n        return string.toLowerCase().indexOf(substring.toLowerCase())\
    \ + howManyTimes(string.substring(0, string.toLowerCase().indexOf(substring.toLowerCase())),\
    \ substring);\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzy3ysdmm.java:24)\n"
  stdout: ''
  timestamp: 1660011313
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        long start = string.indexOf(substring);\n        while (start\
    \ >= 0) {\n            String nextString = string.substring(start+substring.length(),\
    \ string.length());\n            start = nextString.indexOf(substring);\n    \
    \        count += 1;\n        }\n        return count;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(howManyTimes((\"\"), (\"x\")) == (0l));\n\
    \    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"\
    cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"\
    john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwax6hew8.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n            String nextString = string.substring(start+substring.length(),\
    \ string.length());\n                                                      ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660011312
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long count\
    \ = 0;\n        int i;\n        for(i = 0; i < string.length(); i++) {\n     \
    \       if(string.substring(i, i+substring.length()).equals(substring)) {\n  \
    \              count++;\n            }\n        }\n        return count;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ begin 7, end 10, length 9\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\
    \tat java.base/java.lang.String.substring(String.java:2707)\n\tat Problem.howManyTimes(tmp5tpmfwso.java:20)\n\
    \tat Problem.main(tmp5tpmfwso.java:29)\n"
  stdout: ''
  timestamp: 1660011313
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.chars().filter(x -> x == substring.charAt(0)).filter(x -> x == substring.charAt(1)).filter(x\
    \ -> x == substring.charAt(2)).filter(x -> x == substring.charAt(3)).count();\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.lambda$howManyTimes$1(tmpvfw4cv_8.java:17)\n\
    \tat java.base/java.util.stream.IntPipeline$10$1.accept(IntPipeline.java:392)\n\
    \tat java.base/java.util.stream.IntPipeline$10$1.accept(IntPipeline.java:393)\n\
    \tat java.base/java.lang.StringLatin1$CharsSpliterator.forEachRemaining(StringLatin1.java:824)\n\
    \tat java.base/java.util.Spliterator$OfInt.forEachRemaining(Spliterator.java:711)\n\
    \tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)\n\
    \tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)\n\
    \tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:921)\n\
    \tat java.base/java.util.stream.ReduceOps$9.evaluateSequential(ReduceOps.java:434)\n\
    \tat java.base/java.util.stream.ReduceOps$9.evaluateSequential(ReduceOps.java:424)\n\
    \tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\
    \tat java.base/java.util.stream.IntPipeline.count(IntPipeline.java:488)\n\tat\
    \ Problem.howManyTimes(tmpvfw4cv_8.java:17)\n\tat Problem.main(tmpvfw4cv_8.java:21)\n"
  stdout: ''
  timestamp: 1660011313
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.length() - string.toLowerCase().indexOf(substring.toLowerCase(), 0l);\n\
    \    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_mqnlmps.java:17: error: no suitable method found for indexOf(String,long)\n\
    \        return string.length() - string.toLowerCase().indexOf(substring.toLowerCase(),\
    \ 0l);\n                                                     ^\n    method String.indexOf(int,int)\
    \ is not applicable\n      (argument mismatch; String cannot be converted to int)\n\
    \    method String.indexOf(String,int) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660011313
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        return\
    \ string.length() - substring.length() + 1 + string.split(substring).length -\
    \ 1;\n    }\n    public static void main(String[] args) {\n    assert(howManyTimes((\"\
    \"), (\"x\")) == (0l));\n    assert(howManyTimes((\"xyxyxyx\"), (\"x\")) == (4l));\n\
    \    assert(howManyTimes((\"cacacacac\"), (\"cac\")) == (4l));\n    assert(howManyTimes((\"\
    john doe\"), (\"john\")) == (1l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0r7h907t.java:21)\n"
  stdout: ''
  timestamp: 1660011313
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // Find how many times a given substring can be found in\
    \ the original string. Count overlaping cases.\n    // >>> howManyTimes((\"\"\
    ), (\"a\"))\n    // (0l)\n    // >>> howManyTimes((\"aaa\"), (\"a\"))\n    //\
    \ (3l)\n    // >>> howManyTimes((\"aaaa\"), (\"aa\"))\n    // (3l)\n    public\
    \ static long howManyTimes(String string, String substring) {\n        long sum\
    \ = 0;\n        int i = 0;\n        int length = string.length();\n\n        while\
    \ ((i <= length) && (i < length + substring.length())) {\n            int start\
    \ = i;\n            int end = i + substring.length();\n            int count =\
    \ 0;\n            for (; i < length; i++) {\n                if (string.charAt(i)\
    \ == substring.charAt(0)) {\n                    count++;\n                }\n\
    \                if (string.charAt(i) == substring.charAt(end)) {\n          \
    \          count++;\n                }\n                if (string.charAt(i) ==\
    \ substring.charAt(end) && end < length) {\n                    count++;\n   \
    \             }\n                if (string.charAt(i) == substring.charAt(end)\
    \ && end < length && end + 1 < length) {\n                    count++;\n     \
    \           }\n            }\n            if (count == substring.length()) {\n\
    \                sum += count;\n            }\n            i++;\n        }\n \
    \       return sum;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(howManyTimes((\"\"), (\"x\")) == (0l));\n    assert(howManyTimes((\"\
    xyxyxyx\"), (\"x\")) == (4l));\n    assert(howManyTimes((\"cacacacac\"), (\"cac\"\
    )) == (4l));\n    assert(howManyTimes((\"john doe\"), (\"john\")) == (1l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException:\
    \ String index out of range: 1\n\tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\
    \tat java.base/java.lang.String.charAt(String.java:1515)\n\tat Problem.howManyTimes(tmprp3qo5qz.java:29)\n\
    \tat Problem.main(tmprp3qo5qz.java:48)\n"
  stdout: ''
  timestamp: 1660011313
