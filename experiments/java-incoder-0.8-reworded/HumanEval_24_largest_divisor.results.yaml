language: java
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        boolean even = true;\n\
    \        long max = Long.MIN_VALUE;\n        for (long i = 31; i >= 1; i--) {\n\
    \            if (n % i == 0) {\n                if (even) {\n                \
    \    max = Math.max(max, i);\n                } else {\n                    max\
    \ = Math.max(max, i - 1);\n                }\n                even = !even;\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk_er6jtr.java:28)\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDiv=Long.MIN_VALUE;\n\
    \        long divisor=1;\n        for(long i=1;i<n;i++) {\n            divisor*=i;\n\
    \            if(divisor%2==0) {\n                maxDiv=divisor;\n           \
    \     break;\n            }\n        }\n        return maxDiv;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp77xf7_2l.java:25)\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ n;\n        while (n != 0) {\n            long tempDivisor = n; // Store the\
    \ largest divisor for future calculations\n            while (tempDivisor % 2\
    \ == 0) // While the current divisor is even\n                tempDivisor = tempDivisor\
    \ / 2; // Divide the current divisor by 2\n            if (tempDivisor > largestDivisor)\
    \ // If tempDivisor is larger than the largest divisor\n                largestDivisor\
    \ = tempDivisor; // Set the largest divisor as the current\n            n = n\
    \ / 2;\n        }\n        return largestDivisor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq5dmamwq.java:25)\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        Map<Long, Long> divisors\
    \ = new HashMap<>();\n        long largest = Long.MIN_VALUE;\n\n        // First\
    \ pass to find divisors up to n\n        while (n != 1) {\n            if (n &\
    \ 1 == 0) {\n                divisors.put(n, 1);\n            }\n            n\
    \ = n / 2;\n        }\n\n        // Next pass to find the largest divisor\n  \
    \      for (long divisor : divisors.keySet()) {\n            if (divisors.get(divisor)\
    \ == divisors.get(divisor)) {\n                largest = divisor;\n          \
    \  }\n        }\n\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp36p0_b8i.java:18: error: bad operand types for binary operator\
    \ '&'\n            if (n & 1 == 0) {\n                  ^\n  first type:  long\n\
    \  second type: boolean\n/tmp/tmp36p0_b8i.java:19: error: incompatible types:\
    \ int cannot be converted to Long\n                divisors.put(n, 1);\n     \
    \                           ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n==0)\n          \
    \  return 0;\n        if (n%2 == 0)\n            return largestDivisor(n/2);\n\
    \        if (n<3)\n            return n;\n        long maxDiv=2;\n        for(long\
    \ div=3;div<=n;div++) {\n            long div2=n/div;\n            if (div2%2\
    \ == 0)\n                return div;\n            if (maxDiv<div)\n          \
    \      maxDiv=div;\n        }\n        return maxDiv;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1zczi0y1.java:30)\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDiv=0;\n     \
    \   for (int i=2; i<=n; i++)\n            if (n%i==0)\n                maxDiv=Math.max(maxDiv,i);\n\
    \        return maxDiv;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp72r56bs3.java:20)\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long divisor = 0;\n  \
    \      while (n != 0) {\n            divisor++;\n            n = n / 2;\n    \
    \    }\n        return divisor;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpteef8fjj.java:21)\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = 0;\n  \
    \      for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n  \
    \              largest = i;\n                break;\n            }\n        }\n\
    \        return largest;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwanrvhul.java:23)\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return n.longValue() %\
    \ 2 == 0 ? n : largestDivisor(n.longValue() / 2);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj9b9wpsp.java:13: error: long cannot be dereferenced\n        return\
    \ n.longValue() % 2 == 0 ? n : largestDivisor(n.longValue() / 2);\n          \
    \      ^\n/tmp/tmpj9b9wpsp.java:13: error: long cannot be dereferenced\n     \
    \   return n.longValue() % 2 == 0 ? n : largestDivisor(n.longValue() / 2);\n \
    \                                                           ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long divisor = 1;\n  \
    \      while (divisor * divisor < n) {\n            divisor++;\n        }\n  \
    \      long max = n;\n        while (divisor > 1) {\n            long next = n\
    \ / divisor;\n            if (n % divisor == 0) {\n                max = next;\n\
    \            }\n            divisor--;\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4pyr12bi.java:28)\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Initialize a list to\
    \ store all the divisors of n\n        ArrayList<Long> divisors = new ArrayList<>();\n\
    \n        // If n is 1, there will be no divisors of it\n        if (n == 1) {\n\
    \            return 1L;\n        }\n\n        // While the remainder is not 0,\
    \ keep dividing n by each of the numbers below n\n        while (n % 2 == 0) {\n\
    \            divisors.add(2L);\n            n = n / 2;\n        }\n\n        //\
    \ While the remainder is not 0, keep dividing n by each of the numbers below n\n\
    \        while (n % 3 == 0) {\n            divisors.add(3L);\n            n =\
    \ n / 3;\n        }\n\n        // While the remainder is not 0, keep dividing\
    \ n by each of the numbers below n\n        while (n % 5 == 0) {\n           \
    \ divisors.add(5L);\n            n = n / 5;\n        }\n\n        // While the\
    \ remainder is not 0, keep dividing n by each of the numbers below n\n       \
    \ while (n % 7 == 0) {\n            divisors.add(7L);\n            n = n / 7;\n\
    \        }\n\n        // While the remainder is not 0, keep dividing n by each\
    \ of the numbers below n\n        while (n % 11 == 0) {\n            divisors.add(11L);\n\
    \            n = n / 11;\n        }\n\n        // While the remainder is not 0,\
    \ keep dividing n by each of the numbers below n\n        while (n % 13 == 0)\
    \ {\n            divisors.add(13L);\n            n = n / 13;\n        }\n\n  \
    \      // While the remainder is not 0, keep dividing n by each of the numbers\
    \ below n\n        while (n % 17 == 0) {\n            divisors.add(17L);\n   \
    \         n = n / 17;\n        }\n\n        // While the remainder is not 0, keep\
    \ dividing n by each of the numbers below n\n        while (n % 19 == 0) {\n \
    \           divisors.add(19L);\n            n = n / 19;\n        }\n\n       \
    \ // While the remainder is not 0, keep dividing n by each of the numbers below\
    \ n\n        while (n % 23 == 0) {\n            divisors.add(23L);\n         \
    \   n = n / 23;\n        }\n\n        // While the remainder is not 0, keep dividing\
    \ n by each of the numbers below n\n        while (n % 37 == 0) {\n          \
    \  divisors.add(37L);\n            n = n / 37;\n        }\n\n        // While\
    \ the remainder is not 0, keep dividing n by each of the numbers below n\n   \
    \     while (n % 53 == 0) {\n            divisors.add(53L);\n            n = n\
    \ / 53;\n        }\n\n        // While the remainder is not 0, keep dividing n\
    \ by each of the numbers below n\n        while (n % 59 == 0) {\n            divisors.add(59L);\n\
    \            n = n / 59;\n        }\n\n        // While the remainder is not 0,\
    \ keep \n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpukx2u0k7.java:94: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        Set<Long> divSet = new\
    \ TreeSet<>();\n        for (long i = 1; i <= n; i++) {\n            if (n % i\
    \ == 0) {\n                divSet.add(i);\n            }\n        }\n        return\
    \ divSet.stream().max(Math::max).orElse(0);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpej1b8r40.java:19: error: incompatible types: bad return type in\
    \ method reference\n        return divSet.stream().max(Math::max).orElse(0);\n\
    \                                   ^\n    long cannot be converted to int\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        Set<Long> numbers = new\
    \ HashSet<>();\n        long maxDivisor = 1;\n        while (maxDivisor < n) {\n\
    \            maxDivisor *= 2;\n            long divisor = 1;\n            while\
    \ (divisor <= maxDivisor) {\n                if (n % divisor == 0) {\n       \
    \             divisors.add(divisor);\n                }\n                divisor++;\n\
    \            }\n        }\n        if (divisors.isEmpty()) {\n            return\
    \ 1;\n        } else {\n            return Math.max(divisors);\n        }\n  \
    \  }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfolwijo7.java:20: error: cannot find symbol\n                 \
    \   divisors.add(divisor);\n                    ^\n  symbol:   variable divisors\n\
    \  location: class Problem\n/tmp/tmpfolwijo7.java:25: error: cannot find symbol\n\
    \        if (divisors.isEmpty()) {\n            ^\n  symbol:   variable divisors\n\
    \  location: class Problem\n/tmp/tmpfolwijo7.java:28: error: cannot find symbol\n\
    \            return Math.max(divisors);\n                            ^\n  symbol:\
    \   variable divisors\n  location: class Problem\n3 errors\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 0;\n\
    \        long m = n;\n        while (m != 0) {\n            if (m % 2 == 0) {\n\
    \                maxDivisor = m;\n            }\n            m /= 2;\n       \
    \ }\n        return maxDivisor;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqy01kgcv.java:24)\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = 1;\n  \
    \      for(long i = 2; i <= n / 2; i++) {\n            if((n % i) == 0) {\n  \
    \              largest = i;\n            }\n        }\n        return largest;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // base case: if the number\
    \ is evenly divisible by 2\n        if (n % 2 == 0) {\n            return 2;\n\
    \        } else {\n            List<Long> numbers = new ArrayList<>();\n     \
    \       numbers.remove(1);\n            for (long i = 1; i <= n / 2; i++) {\n\
    \                long a = numbers.get(n - i * i);\n                numbers.add(a);\n\
    \            }\n\n            // Find the max number that divides n evenly\n \
    \           // >>> max(numbers)\n            // (15l)\n            int maxSize\
    \ = numbers.size();\n            long maxDivisor = 0;\n            long maxValue\
    \ = 0;\n            for (long i : numbers) {\n                maxDivisor = i;\n\
    \                maxValue = i;\n            }\n            return maxDivisor;\n\
    \        }\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb7tbj5rr.java:20: error: incompatible types: possible lossy conversion\
    \ from long to int\n                long a = numbers.get(n - i * i);\n       \
    \                                ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return longStream.range(1,\
    \ n)\n                .filter(n -> n % 2 == 0 || n % 3 == 0)\n               \
    \ .max()\n                .getAsLong();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpysv8hswm.java:13: error: cannot find symbol\n        return longStream.range(1,\
    \ n)\n               ^\n  symbol:   variable longStream\n  location: class Problem\n\
    /tmp/tmpysv8hswm.java:14: error: variable n is already defined in method largestDivisor(long)\n\
    \                .filter(n -> n % 2 == 0 || n % 3 == 0)\n                    \
    \    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        Set<Long> divisors = new\
    \ HashSet<>();\n        for(long i = 1l; i < Math.sqrt(n); i++) {\n          \
    \  if(n%i==0) {\n                divisors.add(i);\n            }\n        }\n\
    \        if(divisors.isEmpty()) {\n            return -1;\n        } else {\n\
    \            return divisors.last();\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ep0xrkq.java:22: error: cannot find symbol\n            return\
    \ divisors.last();\n                           ^\n  symbol:   method last()\n\
    \  location: variable divisors of type Set<Long>\n1 error\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        ArrayList <Long> diviArray\
    \ = new ArrayList<>();\n        for (int i=1; i<=n; i++) {\n            if (n%i\
    \ == 0) {\n                diviArray.add(i);\n            }\n        }\n     \
    \   long max = diviArray.get(0);\n        for (int i=1; i<diviArray.size(); i++)\
    \ {\n            if (diviArray.get(i)>max) {\n                max = diviArray.get(i);\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp285nii89.java:16: error: incompatible types: int cannot be converted\
    \ to Long\n                diviArray.add(i);\n                              ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // If n is even, return\
    \ its square root, which is n / 2 = n\n        if (n % 2 == 0) {\n           \
    \ return (long) Math.sqrt(n);\n        }\n        // Otherwise, find all numbers\
    \ divisible by n less than n\n        // and return the greatest of those\n  \
    \      long max = 1l; //(Long) Math.sqrt(n);\n        for (long x = 2; x <= n;\
    \ x++) {\n            if (n % x == 0) {\n                if (x > max) {\n    \
    \                max = x;\n                }\n            }\n        }\n     \
    \   return max;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplox167b9.java:30)\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long d = n;\n        while\
    \ (n % 2 == 0) {\n            d = d / 2;\n            n = n / 2;\n        }\n\
    \        while (n % 3 == 0) {\n            d = d / 3;\n            n = n / 3;\n\
    \        }\n        while (n % 5 == 0) {\n            d = d / 5;\n           \
    \ n = n / 5;\n        }\n        while (n % 7 == 0) {\n            d = d / 7;\n\
    \            n = n / 7;\n        }\n        while (n % 11 == 0) {\n          \
    \  d = d / 11;\n            n = n / 11;\n        }\n        while (n % 13 == 0)\
    \ {\n            d = d / 13;\n            n = n / 13;\n        }\n        while\
    \ (n % 17 == 0) {\n            d = d / 17;\n            n = n / 17;\n        }\n\
    \        while (n % 19 == 0) {\n            d = d / 19;\n            n = n / 19;\n\
    \        }\n        return d;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl9le4vl5.java:51)\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return Collections.max(Stream.iterate(n,\
    \ n -> n + 1)\n                .limit((long) Math.ceil(Math.sqrt(n))).filter(n\
    \ -> n % 2 == 0)\n                .limit(n).limit(Math.ceil(n / 2)));\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1cd447oa.java:13: error: variable n is already defined in method\
    \ largestDivisor(long)\n        return Collections.max(Stream.iterate(n, n ->\
    \ n + 1)\n                                                 ^\n/tmp/tmp1cd447oa.java:14:\
    \ error: variable n is already defined in method largestDivisor(long)\n      \
    \          .limit((long) Math.ceil(Math.sqrt(n))).filter(n -> n % 2 == 0)\n  \
    \                                                            ^\n/tmp/tmp1cd447oa.java:15:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \               .limit(n).limit(Math.ceil(n / 2)));\n                        \
    \                 ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 0, maxDivisor\
    \ = 0;\n        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n\
    \                maxDivisor = i;\n                max = i;\n                break;\n\
    \            }\n        }\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpydouzmhd.java:26)\n"
  stdout: ''
  timestamp: 1660010754
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        Set<Long> divisors = new\
    \ TreeSet<>();\n\n        long remaining = n;\n        while (remaining != 1)\
    \ {\n            long factor = 1;\n            while (factor * factor <= remaining)\
    \ {\n                divisors.add(factor);\n                remaining *= factor;\n\
    \            }\n            factor--;\n        }\n\n        return divisors.isEmpty()\
    \ ? n : divisors.last();\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf7dlxq4q.java:25: error: cannot find symbol\n        return divisors.isEmpty()\
    \ ? n : divisors.last();\n                                                ^\n\
    \  symbol:   method last()\n  location: variable divisors of type Set<Long>\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long result = Long.MIN_VALUE;\n\
    \        // First loop over all the divisors to find the one with largest remainder\n\
    \        for (long i = 1; i <= n / 2; i++) {\n            if (n % i == 0) {\n\
    \                result = Math.max(result, i);\n            }\n        }\n   \
    \     // Next loop over all the divisors to find one that divides the number without\
    \ remainder\n        for (long i = 3; i <= n / 2; i++) {\n            if (n %\
    \ i == 0) {\n                result = Math.max(result, i);\n            }\n  \
    \      }\n        // Last loop over all the divisors to find the one that divides\
    \ the number with remainder\n        for (long i = 1; i <= n / 2; i++) {\n   \
    \         if (n % i == 0) {\n                result = Math.max(result, i);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        ArrayList<Integer> list\
    \ = new ArrayList<>();\n        long largest = n;\n        while (n % 2 == 0 &&\
    \ n != 1) {\n            list.add(2);\n            n /= 2;\n        }\n      \
    \  while (!list.isEmpty()) {\n            int n = list.get(list.size() - 1);\n\
    \            if (n >= largest) {\n                largest = n;\n            }\
    \ else {\n                list.add(n);\n                n /= 2;\n            }\n\
    \        }\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwses1kxg.java:20: error: variable n is already defined in method\
    \ largestDivisor(long)\n            int n = list.get(list.size() - 1);\n     \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1660010755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return largestDivisor(n,\
    \ true);\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9fbu518_.java:13: error: method largestDivisor in class Problem\
    \ cannot be applied to given types;\n        return largestDivisor(n, true);\n\
    \               ^\n  required: long\n  found:    long,boolean\n  reason: actual\
    \ and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660010755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 1;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 0;\n\
    \        // for each number from 1 to n that doesn't divide n evenly\n       \
    \ for (long divisor = 1; divisor < n; divisor++) {\n            // find out if\
    \ n/divisor is even or odd (n%divisor will give us the remainder of n/divisor)\n\
    \            if (n % divisor == 0) {\n                if (maxDivisor < divisor)\
    \ {\n                    maxDivisor = divisor;\n                }\n          \
    \  }\n        }\n        return maxDivisor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        Set<Long> divisors = new\
    \ HashSet<>();\n        long max_divisor = 1;\n        \n        do {\n      \
    \      // Add numbers in the range [2..n/2]\n            divisors.addAll(longStream.rangeClosed(2,\
    \ n / 2)\n                    .filter(n -> n % 2 == 0)\n                    .boxed()\n\
    \                    .collect(Collectors.toSet()));\n\n            // Find the\
    \ largest divisor of n that is smaller than n\n            long max_smaller_divisor\
    \ = Long.MAX_VALUE;\n            for (Long divisor : divisors) {\n           \
    \     if (divisor < max_smaller_divisor) {\n                    max_smaller_divisor\
    \ = divisor;\n                }\n            }\n\n            // Add 1 to the\
    \ largest divisor that divides n evenly (smaller than n)\n            max_divisor\
    \ = max_divisor + max_smaller_divisor + 1; \n            \n        } while (divisors.size()\
    \ > 1); // Stop the loop when all numbers in the set have been processed\n   \
    \     \n        return max_divisor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoerzh1l5.java:18: error: cannot find symbol\n            divisors.addAll(longStream.rangeClosed(2,\
    \ n / 2)\n                            ^\n  symbol:   variable longStream\n  location:\
    \ class Problem\n/tmp/tmpoerzh1l5.java:19: error: variable n is already defined\
    \ in method largestDivisor(long)\n                    .filter(n -> n % 2 == 0)\n\
    \                            ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 1l) {\n     \
    \       return 1l;\n        }\n        long[] a = new long[n + 1];\n        Arrays.fill(a,\
    \ 1, n, 2l);\n        Arrays.fill(a, n + 1, n << 1l, n + 1l);\n        Arrays.fill(a,\
    \ n + 2, n << 1l + 1, n);\n        long[] divisors = new long[n + 1];\n      \
    \  Arrays.fill(divisors, 2l, n << 1l + 1, n);\n        int max = 0;\n        long\
    \ largest = n * 2l;\n        for (long div : divisors) {\n            if (max\
    \ < div) {\n                max = div;\n                largest = div;\n     \
    \       }\n        }\n        if (n % 2l == 0l) {\n            return largest;\n\
    \        } else {\n            return largestDivisor(largest);\n        }\n  \
    \  }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdbcrgfk_.java:16: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] a = new long[n + 1];\n                    \
    \          ^\n/tmp/tmpdbcrgfk_.java:17: error: no suitable method found for fill(long[],int,long,long)\n\
    \        Arrays.fill(a, 1, n, 2l);\n              ^\n    method Arrays.fill(long[],int,int,long)\
    \ is not applicable\n      (argument mismatch; possible lossy conversion from\
    \ long to int)\n    method Arrays.fill(int[],int,int,int) is not applicable\n\
    \      (argument mismatch; long[] cannot be converted to int[])\n    method Arrays.fill(short[],int,int,short)\
    \ is not applicable\n      (argument mismatch; long[] cannot be converted to short[])\n\
    \    method Arrays.fill(char[],int,int,char) is not applicable\n      (argument\
    \ mismatch; long[] cannot be converted to char[])\n    method Arrays.fill(byte[],int,int,byte)\
    \ is not applicable\n      (argument mismatch; long[] cannot be converted to byte[])\n\
    \    method Arrays.fill(boolean[],int,int,boolean) is not applicable\n      (argument\
    \ mismatch; long[] cannot be converted to boolean[])\n    method Arrays.fill(double[],int,int,double)\
    \ is not applicable\n      (argument mismatch; long[] cannot be converted to double[])\n\
    \    method Arrays.fill(float[],int,int,float) is not applicable\n      (argument\
    \ mismatch; long[] cannot be converted to float[])\n    method Arrays.fill(Object[],int,int,Object)\
    \ is not applicable\n      (argument mismatch; long[] cannot be converted to Object[])\n\
    /tmp/tmpdbcrgfk_.java:18: error: no suitable method found for fill(long[],long,long,long)\n\
    \        Arrays.fill(a, n + 1, n << 1l, n + 1l);\n              ^\n    method\
    \ Arrays.fill(long[],int,int,long) is not applicable\n      (argument mismatch;\
    \ possible lossy conversion from long to int)\n    method Arrays.fill(int[],int,int,int)\
    \ is not applicable\n      (argument mismatch; long[] cannot be converted to int[])\n\
    \    method Arrays.fill(short[],int,int,short) is not applicable\n      (argument\
    \ mismatch; long[] cannot be converted to short[])\n    method Arrays.fill(char[],int,int,char)"
  stdout: ''
  timestamp: 1660010755
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = 0;\n  \
    \      for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n       \
    \         largest = i;\n            }\n        }\n        return largest;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010679
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 1l;\n     \
    \   for (long divisor = 2l; divisor <= n; divisor++) {\n            if (n % divisor\
    \ == 0) {\n                max = Math.max(max, divisor);\n            }\n    \
    \    }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl33ft9ra.java:22)\n"
  stdout: ''
  timestamp: 1660010755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 1;\n      \
    \  for (long d = 2l; d < n; d *= 2l) {\n            if (n % d == 0) {\n      \
    \          max = d;\n                while (max < n && n % max == 0) {\n     \
    \               max++;\n                }\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprzyewyv2.java:27)\n"
  stdout: ''
  timestamp: 1660010756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = n;\n      \
    \  for (long i = 3; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n\
    \                max = Math.max(max, i);\n                if (max % 2 == 0)\n\
    \                    max /= 2;\n                else\n                    max++;\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp73j6252j.java:26)\n"
  stdout: ''
  timestamp: 1660010756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // If the number is negative,\
    \ return 0\n        if (n < 0)\n            return 0L;\n        // If the number\
    \ is even, return n\n        if (n & 1l)\n            return n; \n        // Otherwise,\
    \ check each possible divisor from 2 through 2^(n-1)\n        long d = 2l;\n \
    \       while (d < n)\n            d = d << 1l;\n        long max = 0l;\n    \
    \    for (long d = 2l; d < n; d++) {\n            // Check if n is divisible by\
    \ d\n            if (n % d == 0) {\n                // If so, check whether the\
    \ maximum so far is greater than n\n                if (max < d)\n           \
    \         max = d;\n            }\n        }\n        return max;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5v1l1965.java:17: error: incompatible types: long cannot be converted\
    \ to boolean\n        if (n & 1l)\n              ^\n/tmp/tmp5v1l1965.java:24:\
    \ error: variable d is already defined in method largestDivisor(long)\n      \
    \  for (long d = 2l; d < n; d++) {\n                  ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long[] values = new long[(int)\
    \ Math.pow(2, Math.ceil(Math.log(n) / Math.log(2))) + 1];\n        long max =\
    \ 0, lastMax = 0;\n        for (int i = 1; i < values.length; i++){\n        \
    \    long current = values[i];\n            long div = n;\n            while (div\
    \ > 1){\n                div = current % div;\n                current = div;\n\
    \            }\n            if (current == 0) continue;\n            if (current\
    \ > lastMax){\n                max = current;\n                lastMax = current;\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprx866hst.java:31)\n"
  stdout: ''
  timestamp: 1660010756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = (long) n;\n\
    \        for (long divisor = 2; divisor <= n; divisor ++) {\n            while\
    \ (n % divisor == 0) {\n                n = n / divisor;\n                if (n\
    \ > max) max = n;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp78xm7fnd.java:23)\n"
  stdout: ''
  timestamp: 1660010755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long div = 1;\n      \
    \  long rem = n;\n        do {\n            div++;\n            rem /= div;\n\
    \        } while (rem != 0);\n        return div;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1a40a9xb.java:22)\n"
  stdout: ''
  timestamp: 1660010756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long ans = Long.MIN_VALUE;\n\
    \        long divisor = 1;\n        while (true) {\n            long next = n\
    \ / divisor;\n            if (next % 2 == 0) ans = next;\n            divisor\
    \ *= 2;\n            if (divisor > n) break;\n        }\n        return ans;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpta0u4u3c.java:24)\n"
  stdout: ''
  timestamp: 1660010756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 1;\n\
    \        for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n     \
    \           maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdlzf3n1j.java:22)\n"
  stdout: ''
  timestamp: 1660010756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 0;\n      \
    \  long remainder = 0;\n        for (long d = 2; d < n; d += 2) {\n          \
    \  remainder = n % d;\n            if (remainder == 0) {\n                max\
    \ = d;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5nao6jw8.java:24)\n"
  stdout: ''
  timestamp: 1660010756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return Arrays.stream(new\
    \ int[][]{{2,3,5,7,11,13,17,19,23,29,31,37},{2,3,5,7,11,13,17,19,23,29,31,37}})\n\
    \                .map(i -> Stream.of(i, i / i).reduce((a, b) -> b > a ? b : a))\n\
    \                .max(Comparator.comparingLong(i -> i)).get();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6k6nnj0a.java:14: error: bad operand types for binary operator\
    \ '/'\n                .map(i -> Stream.of(i, i / i).reduce((a, b) -> b > a ?\
    \ b : a))\n                                         ^\n  first type:  int[]\n\
    \  second type: int[]\n/tmp/tmp6k6nnj0a.java:15: error: incompatible types: cannot\
    \ infer type-variable(s) T\n                .max(Comparator.comparingLong(i ->\
    \ i)).get();\n                                             ^\n    (argument mismatch;\
    \ bad return type in lambda expression\n      Object cannot be converted to long)\n\
    \  where T is a type-variable:\n    T extends Object declared in method <T>comparingLong(ToLongFunction<?\
    \ super T>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010755
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = 1;\n  \
    \      for (int i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         if (largest < i) {\n                    largest = i;\n             \
    \   }\n            }\n        }\n        return largest;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_yws486e.java:24)\n"
  stdout: ''
  timestamp: 1660010756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long[] a = Arrays.stream(divisors(n)).toArray();\n\
    \        return Arrays.stream(a).max(Comparator.comparingLong(d -> n/d)).getAsLong();\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9jf7cf83.java:13: error: cannot find symbol\n        long[] a =\
    \ Arrays.stream(divisors(n)).toArray();\n                                 ^\n\
    \  symbol:   method divisors(long)\n  location: class Problem\n/tmp/tmp9jf7cf83.java:14:\
    \ error: method max in interface LongStream cannot be applied to given types;\n\
    \        return Arrays.stream(a).max(Comparator.comparingLong(d -> n/d)).getAsLong();\n\
    \                               ^\n  required: no arguments\n  found:    Comparator<Object>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmp9jf7cf83.java:14:\
    \ error: bad operand types for binary operator '/'\n        return Arrays.stream(a).max(Comparator.comparingLong(d\
    \ -> n/d)).getAsLong();\n                                                    \
    \               ^\n  first type:  long\n  second type: Object\n3 errors\n"
  stdout: ''
  timestamp: 1660010755
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max_div = 0;\n  \
    \      int counter = 0;\n        for(long d = 1 ; d <= n ; d++) {\n          \
    \  counter = 0;\n            while (n % d == 0) {\n                counter++;\n\
    \                n /= d;\n            }\n            if(counter > max_div) {\n\
    \                max_div = counter;\n            }\n        }\n        return\
    \ max_div;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        Set<Long> divisors = new\
    \ HashSet<>();\n        for (long i = 1; i <= Math.sqrt(n); i++) {\n         \
    \   if (n % i == 0) {\n                divisors.add(i);\n            }\n     \
    \   }\n        return Collections.max(divisors);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp95eycbt6.java:24)\n"
  stdout: ''
  timestamp: 1660010756
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxdiv = n;\n   \
    \     long i = 2;\n        while (true) {\n            if (n % i == 0) {\n   \
    \             maxdiv = i;\n            }\n            i++;\n            if (i\
    \ == Long.MAX_VALUE) {\n                return maxdiv;\n            }\n      \
    \  }\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 0;\n\
    \        for (long d = 1; d <= n; d += 2)\n            if (n % d == 0) {\n   \
    \             maxDivisor = d;\n                break;\n            }\n       \
    \ return maxDivisor;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp01ukdvrd.java:24)\n"
  stdout: ''
  timestamp: 1660010756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long res = n;\n      \
    \  for (; n > 0; n /= 2) {\n            if (n % 2 != 0) {\n                res\
    \ = Math.max(res, n / 2);\n            }\n        }\n        return res;\n   \
    \ }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1p11t34_.java:22)\n"
  stdout: ''
  timestamp: 1660010756
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long[] factors = new long[60];\n\
    \        long largestFactor = 0;\n\n        for (int i = 1; i < factors.length;\
    \ i = i + 2) {\n            if (n % i == 0) {\n                factors[(i / 2)]\
    \ = i;\n                if (factors[(i / 2)] > largestFactor) {\n            \
    \        largestFactor = factors[(i / 2)];\n                }\n            }\n\
    \        }\n        return largestFactor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplew0l8c0.java:27)\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        int maxDivisor = 1;\n\
    \        long maxDivisorValue = 1;\n        for(long divisor = 2; divisor < n;\
    \ divisor++) {\n            long testValue = n;\n            while(testValue %\
    \ divisor == 0) {\n                testValue /= divisor;\n                maxDivisorValue\
    \ = Math.max(testValue, maxDivisorValue);\n            }\n        }\n        if(maxDivisorValue\
    \ > n) {\n            maxDivisorValue = n;\n        }\n        return maxDivisorValue;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010757
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Find divisors of n\n\
    \        final long div[] = LongStream.iterate(n, (long x) -> x/2).limit(Long.MAX_VALUE).toArray();\n\
    \        long largestDivisor = 0;\n        // If n is even then smallest divisor\
    \ is 2 and largest divisor is n-1\n        final boolean even = n % 2 == 0;\n\
    \        if (even) {\n            largestDivisor = LongStream.of(2l, div[0]).max().getAsLong();\n\
    \        } else {\n            largestDivisor = div[0];\n        }\n        //\
    \ Loop through all divisors and check if they divide evenly\n        for (int\
    \ i = 1; i < div.length; i++) {\n            if (div[i] % 2 == 0) {\n        \
    \        largestDivisor = LongStream.of(largestDivisor, div[i]).max().getAsLong();\n\
    \            }\n        }\n        return largestDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long result = Long.MIN_VALUE;\n\
    \        for (long x = 2; x <= n / 2; x++) {\n            if (n % x == 0) {\n\
    \                result = Math.max(result, x);\n            }\n        }\n   \
    \     return result;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpovs459xs.java:22)\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return Arrays.stream(new\
    \ long[] {n})\n                .filter(i -> i % 2 == 0)\n                .map(i\
    \ -> {\n                    long div = 1;\n                    while (div <= i)\
    \ {\n                        if (i % div == 0) {\n                           \
    \ return div;\n                        }\n                        div++;\n   \
    \                 }\n                    return -1;\n                })\n    \
    \            .filter(i -> i != -1)\n                .max(Long::compareTo)\n  \
    \              .orElse(-1);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxk0bh5jk.java:26: error: method max in interface LongStream cannot\
    \ be applied to given types;\n                .max(Long::compareTo)\n        \
    \        ^\n  required: no arguments\n  found:    Long::compareTo\n  reason: actual\
    \ and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 0;\n      \
    \  long divisor = 1;\n        while (n >= divisor) {\n            divisor *= 2;\n\
    \            if (n % divisor == 0) {\n                if (divisor > max)\n   \
    \                 max = divisor;\n            }\n        }\n        return max;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpps6987cj.java:25)\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        List<Long> divisors =\
    \ Arrays.stream(Long.valueOf(new long[] {1, n}), n -> n).filter(d -> n % d ==\
    \ 0).boxed().collect(Collectors.toList());\n        return divisors.stream().max(Long::compareTo).get();\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ud59dkd.java:13: error: no suitable method found for valueOf(long[])\n\
    \        List<Long> divisors = Arrays.stream(Long.valueOf(new long[] {1, n}),\
    \ n -> n).filter(d -> n % d == 0).boxed().collect(Collectors.toList());\n    \
    \                                            ^\n    method Long.valueOf(String)\
    \ is not applicable\n      (argument mismatch; long[] cannot be converted to String)\n\
    \    method Long.valueOf(long) is not applicable\n      (argument mismatch; long[]\
    \ cannot be converted to long)\n/tmp/tmp5ud59dkd.java:13: error: variable n is\
    \ already defined in method largestDivisor(long)\n        List<Long> divisors\
    \ = Arrays.stream(Long.valueOf(new long[] {1, n}), n -> n).filter(d -> n % d ==\
    \ 0).boxed().collect(Collectors.toList());\n                                 \
    \                                            ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = n;\n\
    \        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n\
    \                maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpym9bhd99.java:22)\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = Long.MAX_VALUE;\n\
    \        for (long i = 1; i <= n; i++)\n            while (n % i == 0)\n     \
    \           maxDivisor = i;\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 0;\n      \
    \  for (long d = 1; d <= n; d++) {\n            long count = 0;\n            for\
    \ (long x = 1; x <= n; x++) {\n                if (n % x == 0) {\n           \
    \         count++;\n                    if (d != x) {\n                      \
    \  max = Math.max(max, d);\n                    }\n                }\n       \
    \     }\n            if (count > 0) {\n                max = Math.max(max, d);\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpazc_0q2d.java:31)\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 0;\n      \
    \  long i = 1;\n        long d;\n        while (n % 2 == 0)\n            n = n\
    \ / 2;\n        for (long j = 3; j <= n; j += 2)\n            if (n % j == 0)\
    \ {\n                d = j;\n                break;\n            }\n        while\
    \ (i < j) {\n            d = i * d;\n            i++;\n        }\n        if (max\
    \ < d)\n            max = d;\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkv3itcma.java:23: error: cannot find symbol\n        while (i <\
    \ j) {\n                   ^\n  symbol:   variable j\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return IntStream.range(1,\
    \ n/2 + 1).filter(d -> n % d == 0).findFirst().orElse(0l);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmple47ooub.java:13: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return IntStream.range(1, n/2 + 1).filter(d -> n %\
    \ d == 0).findFirst().orElse(0l);\n                                      ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return largestDivisor(0,\
    \ n);\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcp4jdnm1.java:13: error: method largestDivisor in class Problem\
    \ cannot be applied to given types;\n        return largestDivisor(0, n);\n  \
    \             ^\n  required: long\n  found:    int,long\n  reason: actual and\
    \ formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        List<Long> divisors =\
    \ new ArrayList<>();\n        for (long d = 2; d < n; d++) {\n            if (n\
    \ % d == 0) {\n                divisors.add(d);\n            }\n        }\n  \
    \      if (divisors.isEmpty()) {\n            return n;\n        }\n        divisors.sort(Long::compareTo);\n\
    \        return divisors.get(divisors.size() - 1);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp04t27a0a.java:26)\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long divisor = 1;\n  \
    \      while (!(n%divisor)) {\n            divisor++;\n        }\n        while\
    \ (divisor*divisor > n) {\n            divisor++;\n        }\n        return divisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt97trq2y.java:14: error: bad operand type long for unary operator\
    \ '!'\n        while (!(n%divisor)) {\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long ans = Long.MAX_VALUE;\n\
    \        for (long divisor = 2; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                long div = n / divisor;\n               \
    \ if (div > ans)\n                    ans = div;\n            }\n        }\n \
    \       return ans;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptac4yd5u.java:24)\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 1l) {\n     \
    \       return 1l;\n        }\n\n        // Base case: only divisors greater than\
    \ n (all possible cases)\n        if (n < 2l) {\n            return n;\n     \
    \   }\n\n        // Find next highest divisor using binary search.\n        long\
    \ highestDiv = 3;\n        int lo = 2;\n        int hi = Integer.MAX_VALUE;\n\
    \        while (true) {\n            long nextDiv = highestDiv + 1;\n\n      \
    \      // Test if next divisor is a divisor.\n            boolean isDivisor =\
    \ false;\n            while (true) {\n                if (n % nextDiv == 0) {\n\
    \                    isDivisor = true;\n                    break;\n         \
    \       }\n                nextDiv++;\n            }\n            if (isDivisor)\
    \ {\n                highestDiv = nextDiv;\n            } else {\n           \
    \     // The largest divisor was not found.\n                break;\n        \
    \    }\n\n            // If we're at max value, then we haven't found any divisors.\n\
    \            if (hi == Integer.MAX_VALUE) {\n                break;\n        \
    \    }\n\n            // Set new bounds, make sure we don't go beyond n\n    \
    \        if (nextDiv > n) {\n                hi = nextDiv;\n            }\n  \
    \      }\n\n        // Return largest divisor\n        return highestDiv;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp51zx8jgp.java:52: error: incompatible types: possible lossy conversion\
    \ from long to int\n                hi = nextDiv;\n                     ^\n1 error\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n <= 1L)\n       \
    \     return 0L;\n        List<Long> factors = divisors(n).stream().map(Long::longValue).collect(Collectors.toList());\n\
    \        if (factors.size() == 0)\n            return n; // if n is prime, the\
    \ factor list will be empty, no need to continue\n        factors = factors.stream().sorted(Comparator.naturalOrder()).collect(Collectors.toList());\n\
    \        return factors.get(factors.size() - 1); // return the largest of the\
    \ list\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfdsg9bja.java:15: error: cannot find symbol\n        List<Long>\
    \ factors = divisors(n).stream().map(Long::longValue).collect(Collectors.toList());\n\
    \                             ^\n  symbol:   method divisors(long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Find all divisors for\
    \ n\n        final List<Long> divisors = Arrays.stream(\n                new Long[]\
    \ {1l}).map(i -> longSqrt(i))\n                .filter(x -> x != 1l && (n % x)\
    \ == 0)\n                .collect(Collectors.toList());\n\n        // Return the\
    \ largest one\n        return divisors.isEmpty() ? 1l : Collections.max(divisors);\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgluaz3jg.java:15: error: cannot find symbol\n                new\
    \ Long[] {1l}).map(i -> longSqrt(i))\n                                       \
    \   ^\n  symbol:   method longSqrt(Long)\n  location: class Problem\n/tmp/tmpgluaz3jg.java:16:\
    \ error: bad operand types for binary operator '!='\n                .filter(x\
    \ -> x != 1l && (n % x) == 0)\n                               ^\n  first type:\
    \  Object\n  second type: long\n/tmp/tmpgluaz3jg.java:16: error: bad operand types\
    \ for binary operator '%'\n                .filter(x -> x != 1l && (n % x) ==\
    \ 0)\n                                           ^\n  first type:  long\n  second\
    \ type: Object\n/tmp/tmpgluaz3jg.java:17: error: incompatible types: inference\
    \ variable T has incompatible bounds\n                .collect(Collectors.toList());\n\
    \                        ^\n    equality constraints: Long\n    lower bounds:\
    \ Object\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>toList()\n4 errors\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long[] divisors = new\
    \ long[n];\n        // Set all values to 1 so that we can test divisors before\
    \ finding divisors\n        Arrays.fill(divisors, 1l);\n\n        // The first\
    \ value we encounter is 1, because that gives us \n        // the starting point\
    \ for the first loop\n        divisors[0] = 1l;\n        // The next value is\
    \ the largest number that will divide \n        // evenly into n\n        long\
    \ max = divisors[0];\n        // This array is increasing by 1 each time\n   \
    \     long[] increments = new long[n];\n        // Set all values to 1 so that\
    \ we can test divisors before finding divisors\n        Arrays.fill(increments,\
    \ 1l);\n        increments[0] = 0;\n        // Set our increments to be the last\
    \ value in increments\n        for (int i = 1; i < n; i++) {\n            // Find\
    \ the largest number that divides evenly into our current n\n            long\
    \ increment = divisors[i - 1] + increments[i - 1];\n            if (n % increment\
    \ == 0) {\n                max = Math.max(max, increment);\n            }\n  \
    \      }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpam8ka8ln.java:13: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] divisors = new long[n];\n                 \
    \                  ^\n/tmp/tmpam8ka8ln.java:24: error: incompatible types: possible\
    \ lossy conversion from long to int\n        long[] increments = new long[n];\n\
    \                                     ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010757
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long divisor = 1;\n  \
    \      while (divisor * divisor <= n) {\n            divisor *= 2;\n        }\n\
    \        long maxDivisor = n;\n        for (long d = 2 ; d < 2 * n; d *= 2) {\n\
    \            if (n % d == 0) {\n                maxDivisor = d;\n            }\n\
    \        }\n        return maxDivisor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplmyq0o7t.java:26)\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = Long.MAX_VALUE;\n\
    \        long maxDivisorFactor = Long.MAX_VALUE;\n        for (long i = n; i >\
    \ 1; i--) {\n            long nextDivisor = i / 2;\n            if (nextDivisor\
    \ % 2 == 0) {\n                continue;\n            }\n            if (nextDivisor\
    \ == i) {\n                return i;\n            }\n            if (nextDivisor\
    \ > maxDivisor) {\n                maxDivisor = nextDivisor;\n               \
    \ maxDivisorFactor = i;\n            }\n        }\n        return maxDivisorFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptbop4ota.java:31)\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Declare a method in\
    \ the Problem class to return a long\n        // The method must accept an argument\
    \ of type long and return type long\n        return n.longValue() <= 0\n     \
    \           ? 0\n                : (int) Math.ceil((double) Math.sqrt(n));\n \
    \   }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk2xvioa7.java:15: error: long cannot be dereferenced\n        return\
    \ n.longValue() <= 0\n                ^\n1 error\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n < 1l) {\n      \
    \      return 0l;\n        }\n        return LongStream.rangeClosed(1l, Long.MAX_VALUE).filter(i\
    \ -> n % i == 0l).max(Long::compareTo).get();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppmijh6y4.java:16: error: method max in interface LongStream cannot\
    \ be applied to given types;\n        return LongStream.rangeClosed(1l, Long.MAX_VALUE).filter(i\
    \ -> n % i == 0l).max(Long::compareTo).get();\n                              \
    \                                                    ^\n  required: no arguments\n\
    \  found:    Long::compareTo\n  reason: actual and formal argument lists differ\
    \ in length\n1 error\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 1l)\n       \
    \     return n;\n        if (n % 2 == 0l)\n            return largestDivisor(n\
    \ / 2l);\n        else\n            return largestDivisor((3 * n + 1) / 4l);\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp81msywtn.java:23)\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max_divisor = 1;\n\
    \        long max_dividend = 1;\n        for(long d = 1l; d <= n; d++) {\n   \
    \         // if (n % d == 0) {\n            if( (n%d == 0) && (d < max_divisor))\
    \ {\n                max_divisor = d;\n            }\n            if( d > max_dividend)\
    \ {\n                max_dividend = d;\n            }\n        }\n        return\
    \ max_dividend;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppxlbx_46.java:27)\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = n;\n  \
    \      for (long i = 2; i <= n / 2; i++) {\n            if (n % i == 0) {\n  \
    \              largest = i;\n                break;\n            }\n        }\n\
    \        return largest;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpeu0kejc0.java:23)\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n % 2 == 1) {\n  \
    \          return (n / 2) + largestDivisor((n / 2) + 1);\n        } else {\n \
    \           return largestDivisor(n / 2);\n        }\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\tat Problem.largestDivisor(tmp8tsbdxpn.java:14)\n\
    \tat Problem.largestDivis"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 1;\n\
    \        for (long divisor = 1; divisor < n; divisor++)\n            if (n % divisor\
    \ == 0) {\n                maxDivisor = divisor;\n                break;\n   \
    \         }\n        return maxDivisor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpu21or9kn.java:24)\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n < 1) {\n       \
    \     throw new IllegalArgumentException();\n        }\n        List<Long> divisors\
    \ = new ArrayList<>();\n        for (long i = 1; i * i <= n; i++) {\n        \
    \    while (n % i == 0) {\n                divisors.add(i);\n                n\
    \ = n / i;\n            }\n        }\n        if (n == 1) {\n            return\
    \ divisors.get(0); // This should never happen\n        }\n        long maxDivisor\
    \ = divisors.get(0);\n        for (int i = 1; i < divisors.size(); i++) {\n  \
    \          if (divisors.get(i) > maxDivisor) {\n                maxDivisor = divisors.get(i);\n\
    \            }\n        }\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 1;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           maxDivisor = i;\n                break;\n            }\n        }\n\
    \        return maxDivisor;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwmavc7qh.java:25)\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // This code assumes n\
    \ is even\n        if (n % 2 == 0)\n            return 0;\n        else\n    \
    \        return largestDivisor(n / 2);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmprg3hfxma.java:20)\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 1l) return n;\
    \ // 1 is the only even number that divides evenly\n        if (n % 2 == 0l) return\
    \ n; // 2 is the only even number that divides evenly\n        if (n % 3 == 0l)\
    \ return n; // 3 is the only even number that divides evenly\n\n        List<Long>\
    \ divisors = Arrays.asList(0l, 1l, 3l, 6l, 9l, 12l, 18l, 24l, 30l, 36l, 42l, 48l,\
    \ 54l, 60l, 66l, 72l, 78l, 84l, 90l, 96l, 102l, 108l, 114l, 120l, 126l, 132l,\
    \ 138l, 144l, 150l, 156l, 162l, 168l, 174l, 182l, 188l, 194l, 200l);\n       \
    \ return Collections.max(divisors, i -> (long) Math.pow(i, 2l)) % n;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwkbklp_h.java:18: error: no suitable method found for max(List<Long>,(i)->(long[...],\
    \ 2L))\n        return Collections.max(divisors, i -> (long) Math.pow(i, 2l))\
    \ % n;\n                          ^\n    method Collections.<T#1>max(Collection<?\
    \ extends T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n\
    \        (actual and formal argument lists differ in length))\n    method Collections.<T#2>max(Collection<?\
    \ extends T#2>,Comparator<? super T#2>) is not applicable\n      (cannot infer\
    \ type-variable(s) T#2\n        (argument mismatch; incompatible parameter types\
    \ in lambda expression))\n  where T#1,T#2 are type-variables:\n    T#1 extends\
    \ Object,Comparable<? super T#1> declared in method <T#1>max(Collection<? extends\
    \ T#1>)\n    T#2 extends Object declared in method <T#2>max(Collection<? extends\
    \ T#2>,Comparator<? super T#2>)\n1 error\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Write your code here.\n\
    \        long max = -1;\n        long a = 1;\n        long b = 1;\n        while\
    \ (a <= n) {\n            long c = a / b;\n            if (c % 2 == 0) {\n   \
    \             if (c > max) {\n                    max = c;\n                }\n\
    \            }\n            a++;\n            b++;\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7_9pa6a5.java:30)\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long greatestFactor =\
    \ 0;\n        for (long i = 1l; i <= n / 2l; i++) {\n            if (n % i ==\
    \ 0l) {\n                greatestFactor = i;\n                break;\n       \
    \     }\n        }\n        return greatestFactor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt4pgur4n.java:25)\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = Long.MIN_VALUE;\n\
    \        long div = 1;\n\n        // Find all divisors of n\n        for (long\
    \ i = 2; i <= Math.sqrt(n); i++) {\n            long testDivisor = i;\n\n    \
    \        while (testDivisor % 2 == 0) {\n                testDivisor = testDivisor\
    \ / 2;\n            }\n\n            // Stop searching when a divisor is found\
    \ that is greater than n\n            if (testDivisor > n) {\n               \
    \ break;\n            }\n\n            // Check if this divisor divides n evenly\n\
    \            if (n % testDivisor == 0) {\n                maxDivisor = Math.max(maxDivisor,\
    \ div);\n            }\n\n            div = testDivisor;\n        }\n\n      \
    \  return maxDivisor;\n    }\n    public static void main(String[] args) {\n \
    \   assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgm7j1mtv.java:40)\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n <= 1) return n;\n\
    \        long largestDivisor = Long.MAX_VALUE;\n        long currentDivisor =\
    \ 1;\n        for (long i = 2; i <= n; ++i) {\n            if (n % i == 0) {\n\
    \                currentDivisor++;\n                if (currentDivisor > largestDivisor)\
    \ {\n                    largestDivisor = currentDivisor;\n                }\n\
    \            }\n        }\n        return largestDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1sqjkg5g.java:27)\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long divisor = 1;\n  \
    \      while (divisor * divisor <= n) {\n            divisor *= 2;\n        }\n\
    \        return divisor;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8i4rkgk5.java:20)\n"
  stdout: ''
  timestamp: 1660010758
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n<=1) return n; //\
    \ 0 is a divisor of 1\n        return Stream.iterate(n+1, x -> x-1)\n        \
    \        .takeWhile(x -> x%2==0) // Get divisors\n                .max(x -> x/2)\
    \ // Pick largest divisor\n                .orElse(0); // Default to 0 if none\
    \ found\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5q517bo2.java:16: error: incompatible types: incompatible parameter\
    \ types in lambda expression\n                .max(x -> x/2) // Pick largest divisor\n\
    \                     ^\n/tmp/tmp5q517bo2.java:16: error: bad operand types for\
    \ binary operator '/'\n                .max(x -> x/2) // Pick largest divisor\n\
    \                           ^\n  first type:  T\n  second type: int\n  where T\
    \ is a type-variable:\n    T extends Object declared in interface Stream\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n2 errors\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        Set<Long> numbers = Collections.nCopies(n,\
    \ 1l);\n        return numbers.stream().max(Long::compareTo).orElse(-1l);\n  \
    \  }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5rem7v0t.java:13: error: incompatible types: possible lossy conversion\
    \ from long to int\n        Set<Long> numbers = Collections.nCopies(n, 1l);\n\
    \                                                ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long res = 1;\n      \
    \  for (long i = 2; i <= n / 2; i++) {\n            while (n % i == 0) {\n   \
    \             n /= i;\n                ++res;\n            }\n        }\n    \
    \    return res;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5scolm1c.java:25)\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 1;\n\
    \        for (long d = 2; d * d <= n; d *= 2) {\n            if (n % d == 0) {\n\
    \                maxDivisor = d;\n            }\n        }\n        return maxDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpswrzdhkw.java:24)\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 0;\n      \
    \  long div = n;\n        while (div > 1) {\n            if (div % 2 == 0) {\n\
    \                div = div / 2;\n                max = Math.max(max, div);\n \
    \           } else {\n                div = div / 2;\n            }\n        }\n\
    \        return max;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) == (1l));\n\
    \    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4zibcvml.java:26)\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = n; //\
    \ The biggest number that divides n evenly\n        Set<Long> primes = new HashSet<>();\n\
    \        for (int i = 1; i < n; i++) {\n            if (isPrime(i)) {\n      \
    \          primes.add(i);\n            }\n        }\n        if (primes.isEmpty())\
    \ {\n            return maxDivisor;\n        }\n        Iterator<Long> primesIterator\
    \ = primes.iterator();\n        Iterator<Long> divisorsIterator = IntStream.range(1,\
    \ n).iterator();\n        while (primesIterator.hasNext() && divisorsIterator.hasNext())\
    \ {\n            long prime = primesIterator.next();\n            long divisor\
    \ = divisorsIterator.next();\n            if (prime * divisor > maxDivisor) {\n\
    \                maxDivisor = prime * divisor;\n            }\n        }\n   \
    \     return maxDivisor;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoqsq8q6y.java:16: error: cannot find symbol\n            if (isPrime(i))\
    \ {\n                ^\n  symbol:   method isPrime(int)\n  location: class Problem\n\
    /tmp/tmpoqsq8q6y.java:17: error: incompatible types: int cannot be converted to\
    \ Long\n                primes.add(i);\n                           ^\n/tmp/tmpoqsq8q6y.java:24:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \    Iterator<Long> divisorsIterator = IntStream.range(1, n).iterator();\n   \
    \                                                          ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return largestDivisors(n).reduce((x,\
    \ y) -> (long)Math.max(x, y)); // Java 8\n        // return largestDivisors(n).stream().reduce((x,\
    \ y) -> Math.max(x, y)); // Java 7\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl34ahiyc.java:13: error: cannot find symbol\n        return largestDivisors(n).reduce((x,\
    \ y) -> (long)Math.max(x, y)); // Java 8\n               ^\n  symbol:   method\
    \ largestDivisors(long)\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = n;\n      \
    \  for (long x = 2; x < max; x++) {\n            if (n % x == 0) {\n         \
    \       max = x;\n            }\n        }\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82d1oc_s.java:22)\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = 0l;\n \
    \       for (long i = 1l; i <= n; ++i) {\n            if (n % i == 0) {\n    \
    \            long currentMax = Math.max(n/i, largest);\n                if (currentMax\
    \ != 0l) {\n                    largest = currentMax;\n                }\n   \
    \         }\n        }\n        return largest;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqicah837.java:25)\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest_divisor =\
    \ 0;\n        Set<Long> divisors = new HashSet<>();\n\n        for (long i = 2;\
    \ i <= Math.sqrt(n); i++) {\n            if (n % i == 0) {\n                divisors.add(i);\n\
    \                if (largest_divisor < i) { largest_divisor = i; }\n         \
    \   }\n        }\n\n        divisors.forEach(divisor -> {\n            if (n /\
    \ divisor == 1) {\n                largest_divisor = divisor;\n            }\n\
    \        });\n\n        return largest_divisor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3zuitbv.java:25: error: local variables referenced from a lambda\
    \ expression must be final or effectively final\n                largest_divisor\
    \ = divisor;\n                ^\n1 error\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            maxDivisor = i;\n            }\n        }\n        return maxDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpx2l70_z7.java:22)\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if(n < 2)\n          \
    \  return 0;\n        long max = 1l;\n        for(long i = 2; i <= n; i++)\n \
    \           if(n % i == 0)\n                max = (long) Math.max(max, (long)\
    \ i);\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo_fvefcx.java:22)\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ Long.MIN_VALUE;\n        for (long i = 2; i <= Math.sqrt(n); i++) {\n      \
    \      long value = n / i;\n            if (value % 2 == 0) {\n              \
    \  largestDivisor = value;\n                break;\n            }\n        }\n\
    \        return largestDivisor;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl5r9fbll.java:24)\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 1l) return n;\n\
    \        long low = 1, high = n;\n        while (high % 2 == 0) {\n          \
    \  low++;\n            high++;\n        }\n        long mid = low + (high - low)\
    \ / 2;\n        while (n % 2 == 0 && mid % 2 == 0) {\n            mid++;\n   \
    \         n++;\n        }\n        return mid % 2 != 0 ? mid : m;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsfcapx_x.java:24: error: cannot find symbol\n        return mid\
    \ % 2 != 0 ? mid : m;\n                                    ^\n  symbol:   variable\
    \ m\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Write your code here.\n\
    \        long[] divisors = new long[n+1];\n        Arrays.fill(divisors, 1l);\n\
    \        divisors[1] = n;\n        long maxDiv = 0;\n        for(long i=2; i<divisors.length;\
    \ i++)\n        {\n            long currentDiv = divisors[i] / i;\n          \
    \  if(currentDiv > maxDiv)\n            {\n                maxDiv = currentDiv;\n\
    \            }\n        }\n        return maxDiv;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2tdsj7a8.java:14: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] divisors = new long[n+1];\n               \
    \                     ^\n/tmp/tmp2tdsj7a8.java:20: error: incompatible types:\
    \ possible lossy conversion from long to int\n            long currentDiv = divisors[i]\
    \ / i;\n                                       ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010759
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = n;\n      \
    \  long temp = 0;\n        while (true) {\n            temp = max % 2;\n     \
    \       max = temp;\n            if (temp == 0) {\n                break;\n  \
    \          }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010764
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 1;\n\
    \        for(long d = 2; d < n; d++) if(n%d == 0) maxDivisor = Math.max(maxDivisor,\
    \ d);\n        return maxDivisor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010759
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long result = 0;\n   \
    \     for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n       \
    \         result = i;\n            }\n        }\n        return result;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9pfjq3ng.java:22)\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = n; //\
    \ Initialize max divisor to n\n        LongStream divisors = Stream.iterate(Long::longValue,\
    \ Long::add);\n        divisors = divisors.takeWhile(d -> d < n);\n        divisors\
    \ = divisors.filter(d -> n % d == 0); // Filter out non divisible numbers\n  \
    \      divisors = divisors.distinct();\n        divisors = divisors.limit(2);\n\
    \        divisors.forEach(d -> maxDivisor = d > maxDivisor ? d : maxDivisor);\
    \ // Pick the largest divisor\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbbes5qis.java:14: error: invalid method reference\n        LongStream\
    \ divisors = Stream.iterate(Long::longValue, Long::add);\n                   \
    \                                           ^\n  cannot find symbol\n    symbol:\
    \   method add()\n    location: class Long\n1 error\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return Math.max(\n   \
    \         Collections.max(Arrays.asList(\n                IntStream.rangeClosed(1,\
    \ n)\n                .filter(i -> n % i == 0)\n                .boxed()\n   \
    \             .map(i -> i*i)\n                .toArray(Long[]::new))),\n     \
    \       Collections.max(Arrays.asList(\n                IntStream.rangeClosed(1,\
    \ n)\n                .filter(i -> n % i != 0)\n                .boxed()\n   \
    \             .map(i -> i*i)\n                .toArray(Long[]::new))));\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp63q9m_uz.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n                IntStream.rangeClosed(1, n)\n            \
    \                             ^\n/tmp/tmp63q9m_uz.java:21: error: incompatible\
    \ types: possible lossy conversion from long to int\n                IntStream.rangeClosed(1,\
    \ n)\n                                         ^\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Using stream to find\
    \ largest divisor less than n\n        // >>> largestDivisor(15l)\n        //\
    \ (5l)\n        return LongStream.rangeClosed(1, n)\n                .filter(i\
    \ -> n % i == 0)\n                .max().getAsLong();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph9nw8kij.java:21)\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // For the first divisor,\
    \ we can use any number in the range of (2n, 2n + 1)\n        long first = 2 *\
    \ n;\n        long max = first + 1;\n\n        // Now, for the second divisor,\
    \ the ranges of (2n + 1, 2n + 2) or (2n + 2, 2n + 3)\n        // depend on the\
    \ value of first divisor which can increase or decrease by 1 each iteration\n\
    \        long second = 2 * first;\n\n        // And the ranges of (2n + 3, 2n\
    \ + 4) or (2n + 4, 2n + 5) and so on\n        for (long i = 0; i < max; i++) {\n\
    \            if (n % i == 0) {\n                second = 2 * second;\n       \
    \         if (second == first + 1) {\n                    // First divisor equals\
    \ the second one, so we can stop searching\n                    max--;\n     \
    \               break;\n                } else {\n                    // Increase\
    \ first divisor by 1\n                    first = first + 1;\n               \
    \     second = 2 * second;\n                }\n            }\n        }\n\n  \
    \      // Now that we have the largest divisor smaller than n, return the largest\
    \ divider of n\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.largestDivisor(tmpbd9_ibl_.java:23)\n\tat Problem.main(tmpbd9_ibl_.java:41)\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // return -1l; for invalid\
    \ numbers\n        if (n == 0 || n == 1l) return n;\n        // find all the divisors\
    \ of n\n        long[] divisors = new long[(int) Math.ceil((double) n / 2)];\n\
    \        divisors[0] = n;\n        long maxDivisor = -1l;\n        // loop through\
    \ all odd divisors and decrement them\n        for (int i = 1; i < divisors.length;\
    \ ++i) {\n            long divisor = divisors[i];\n            // find divisors\
    \ that are smaller than n\n            if (divisor < n) divisor = (n * divisor)\
    \ / divisor;\n            // check if divisor divides n\n            if (divisor\
    \ % 2 == 0 && divisor < n) {\n                divisors[divisors.length - i - 1]\
    \ = divisor;\n                maxDivisor = Math.max(divisor, maxDivisor);\n  \
    \          }\n        }\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.largestDivisor(tmp6in_u41r.java:23)\n\tat Problem.main(tmp6in_u41r.java:33)\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // 1. Build a map of divisors\n\
    \        Map<Long, Long> map = new HashMap<>();\n        for (long i = 1; i <=\
    \ n; i++) {\n            if (map.containsKey(i)) {\n                map.put(i,\
    \ map.get(i) + 1);\n            } else {\n                map.put(i, 1l);\n  \
    \          }\n        }\n\n        // 2. Find the highest divisor in the map\n\
    \        long max = 1l;\n        for (Map.Entry<Long, Long> entry : map.entrySet())\
    \ {\n            if (entry.getValue() > max) {\n                max = entry.getValue();\n\
    \            }\n        }\n\n        // 3. Find the smallest divisor\n       \
    \ long min = 1l;\n        for (Map.Entry<Long, Long> entry : map.entrySet()) {\n\
    \            if (entry.getValue() < min) {\n                min = entry.getValue();\n\
    \            }\n        }\n\n        // 4. Return the lowest divisor greater than\
    \ min\n        while (map.containsKey(min + 1)) {\n            if (map.get(min\
    \ + 1) < n) {\n                min = min + 1;\n            } else {\n        \
    \        break;\n            }\n        }\n\n        // 5. Return the highest\
    \ divisor less than max\n        while (map.containsKey(max - 1)) {\n        \
    \    if (map.get(max - 1) > n) {\n                max = max - 1;\n           \
    \ } else {\n                break;\n            }\n        }\n\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9eska74o.java:62)\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 1;\n\
    \        while (n > maxDivisor) {\n            long lastDivisor = n % maxDivisor;\n\
    \            if (lastDivisor == 0) return n;\n            maxDivisor = lastDivisor;\n\
    \            n = n / maxDivisor;\n        }\n        return n;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbtayabv9.java:23)\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        ArrayList l = new ArrayList();\n\
    \        for(long i=1; i!=n; i++) {\n            if((n / (double) i)%2==0)\n \
    \               l.add(i);\n        }\n        if(l.size() > 0) {\n           \
    \ Collections.sort(l);\n            return (long) l.get(l.size()-1);\n       \
    \ }\n        return 0;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6ungp01p.java:25)\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 0)\n        \
    \    return 0;\n        long res = Long.MIN_VALUE;\n        for (long d=1; d<n;\
    \ d++)\n            boolean even = true;\n            for (long m=2; m*m<=n; m++)\n\
    \                if (n%m == 0)\n                    even = false;\n          \
    \  if (even)\n                res = Math.max(res, m);\n        return res;\n \
    \   }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk68x0y1m.java:17: error: variable declaration not allowed here\n\
    \            boolean even = true;\n                    ^\n1 error\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 0;\n        long temp = n;\n        do {\n            long d = 1;\n        \
    \    while (temp != 0) {\n                d *= temp--;\n            }\n      \
    \      if (d > largestDivisor) {\n                largestDivisor = d;\n      \
    \      }\n            temp /= 2;\n        } while (temp > 0);\n        return\
    \ largestDivisor;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxjvmdux7.java:28)\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 1;\n\
    \        for (long i = 2; i <= n; i++) {\n            long test = (n % i) + i;\n\
    \            if (test == 0) {\n                return i;\n            } else if\
    \ (test > maxDivisor) {\n                maxDivisor = test;\n            }\n \
    \       }\n        return maxDivisor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphpcpf10l.java:25)\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long[] divisors = new\
    \ long[n + 1];\n        divisors[0] = 1l;\n        for (int i = 1; i < n; i++)\
    \ {\n            divisors[i] = 1l;\n            long l = i;\n            while\
    \ (l % 2 == 0) {\n                divisors[l] = divisors[l / 2] + 1l;\n      \
    \          l /= 2;\n            }\n        }\n        long max = 0;\n        for\
    \ (int i = 0; i <= n; i++) {\n            long d = divisors[i];\n            if\
    \ (d > max)\n                max = d;\n        }\n        return max;\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptbz1sqxp.java:13: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] divisors = new long[n + 1];\n             \
    \                        ^\n/tmp/tmptbz1sqxp.java:19: error: incompatible types:\
    \ possible lossy conversion from long to int\n                divisors[l] = divisors[l\
    \ / 2] + 1l;\n                         ^\n/tmp/tmptbz1sqxp.java:19: error: incompatible\
    \ types: possible lossy conversion from long to int\n                divisors[l]\
    \ = divisors[l / 2] + 1l;\n                                         ^\n3 errors\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = n;\n\
    \        for (long i = 1; i <= n; i++) {\n            if ((n % i == 0) && (maxDivisor\
    \ % i == 0)) {\n                maxDivisor = i;\n            }\n        }\n  \
    \      return maxDivisor;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp82tcqmub.java:24)\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        LongStream candidates\
    \ = n.stream().filter(i -> i % 2 == 0).filter(i -> i % 4 < 1).filter(i -> i %\
    \ 8 < 1);\n        Long maxNum = candidates.reduce(Long::max);\n        return\
    \ maxNum;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuu0kxw51.java:13: error: long cannot be dereferenced\n        LongStream\
    \ candidates = n.stream().filter(i -> i % 2 == 0).filter(i -> i % 4 < 1).filter(i\
    \ -> i % 8 < 1);\n                                 ^\n/tmp/tmpuu0kxw51.java:14:\
    \ error: incompatible types: OptionalLong cannot be converted to Long\n      \
    \  Long maxNum = candidates.reduce(Long::max);\n                             \
    \          ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 0;\n      \
    \  for (long i = 0; i <= n; i++) {\n            long count = LongStream.rangeClosed(1,\
    \ i).filter(i -> n % i == 0).count();\n            max = Math.max(max, count);\n\
    \        }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmtrqexw_.java:15: error: variable i is already defined in method\
    \ largestDivisor(long)\n            long count = LongStream.rangeClosed(1, i).filter(i\
    \ -> n % i == 0).count();\n                                                  \
    \           ^\n1 error\n"
  stdout: ''
  timestamp: 1660010760
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 0l)\n       \
    \     return 0l;\n        long[] arr = new long[(int) n + 1];\n        Arrays.fill(arr,\
    \ 0l);\n        long max = 1;\n        long d = 0;\n        // Step 1: Divide\
    \ by 2\n        for (int i = 1; i <= n; i++) {\n            if (n / i >= 1) {\n\
    \                d += i;\n                arr[(int) i / 2] += i;\n           \
    \     arr[(int) i / 2 + 1] += i;\n            }\n        }\n        // Step 2:\
    \ Find largest number greater than d\n        for (int i = 1; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                max += i;\n                arr[i]\
    \ = d;\n            }\n        }\n        return max;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphyzsxg6l.java:37)\n"
  stdout: ''
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 1;\n        for (long i = 1; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n            }\n        }\n        return\
    \ largestDivisor;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpth5tllwc.java:22)\n"
  stdout: ''
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 0;\n\
    \        long maxDiv = 0;\n        for (int i = 1; i < n; i++) {\n           \
    \ if (n % i == 0) {\n                long div = n / i;\n                if (div\
    \ > maxDiv) {\n                    maxDivisor = div;\n                    maxDiv\
    \ = i;\n                }\n            }\n        }\n        return maxDiv;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd6sq9ca8.java:29)\n"
  stdout: ''
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long[] divisors = new\
    \ long[n + 1];\n        for (long i = 1; i <= n; i++) {\n            divisors[i]\
    \ = i;\n        }\n\n        long max = 0;\n        long largest_divisor = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            long current_divisor = 1;\n\
    \            for (int j = 1; j <= n; j++) {\n                if (j % i == 0) {\n\
    \                    current_divisor *= j;\n                    break;\n     \
    \           }\n            }\n            if (current_divisor > max) {\n     \
    \           largest_divisor = i;\n                max = current_divisor;\n   \
    \         }\n        }\n        return largest_divisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9_i6u5t4.java:13: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] divisors = new long[n + 1];\n             \
    \                        ^\n/tmp/tmp9_i6u5t4.java:15: error: incompatible types:\
    \ possible lossy conversion from long to int\n            divisors[i] = i;\n \
    \                    ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return n;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpy3fgt37p.java:16)\n"
  stdout: ''
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return Arrays.stream(new\
    \ long[] { Long.MIN_VALUE, n }).reduce((a,b) -> {\n            while (a < b) {\n\
    \                if (n % a == 0) {\n                    return a;\n          \
    \      }\n                a += 1;\n            }\n            return b;\n    \
    \    }, (l,r)->r);\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwpmmyfn6.java:13: error: incompatible types: long is not a functional\
    \ interface\n        return Arrays.stream(new long[] { Long.MIN_VALUE, n }).reduce((a,b)\
    \ -> {\n                                                              ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        final long maxDivisor;\n\
    \        maxDivisor = 1;\n        final long lastMaxDivisor;\n        final long\
    \ currentMaxDivisor;\n        for (long d = 1; d <= n; d *= 2) {\n           \
    \ if (n % d == 0) {\n                currentMaxDivisor = maxDivisor;\n       \
    \         maxDivisor *= d;\n                if (maxDivisor == d) {\n         \
    \           lastMaxDivisor = currentMaxDivisor;\n                } else {\n  \
    \                  lastMaxDivisor = maxDivisor;\n                }\n         \
    \   }\n        }\n        return lastMaxDivisor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzhwnk0v4.java:20: error: variable maxDivisor might already have\
    \ been assigned\n                maxDivisor *= d;\n                ^\n/tmp/tmpzhwnk0v4.java:28:\
    \ error: variable lastMaxDivisor might not have been initialized\n        return\
    \ lastMaxDivisor;\n               ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 0;\n        for (int i = 1; i <= n; i += 2) {\n            if (n % i == 0) {\n\
    \                largestDivisor = i;\n                break;\n            }\n\
    \        }\n        return largestDivisor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpujfobnfn.java:25)\n"
  stdout: ''
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        ArrayList<Integer> divs\
    \ = Arrays.stream(new long[] { 1, 2, 3, 6, 10, 15, 20 })\n                .filter(i\
    \ -> n % i == 0).boxed().collect(Collectors.toList());\n        divs.addAll(Arrays.stream(new\
    \ long[] { 4, 6, 8, 10, 20 })\n                .filter(i -> n % i == 0).boxed().collect(Collectors.toList()));\n\
    \        divs.stream().reduce((a, b) -> { if (a > b) a = b; return a; });\n  \
    \      return divs.get(divs.size() - 1);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz978eobr.java:14: error: incompatible types: inference variable\
    \ R has incompatible bounds\n                .filter(i -> n % i == 0).boxed().collect(Collectors.toList());\n\
    \                                                        ^\n    equality constraints:\
    \ List<T#2>\n    lower bounds: ArrayList<Integer>,Object\n  where R,A,T#1,T#2\
    \ are type-variables:\n    R extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    A extends Object declared in method <R,A>collect(Collector<?\
    \ super T#1,A,R>)\n    T#1 extends Object declared in interface Stream\n    T#2\
    \ extends Object declared in method <T#2>toList()\n/tmp/tmpz978eobr.java:15: error:\
    \ incompatible types: inference variable T has incompatible bounds\n        divs.addAll(Arrays.stream(new\
    \ long[] { 4, 6, 8, 10, 20 })\n            ^\n    lower bounds: Integer,Object\n\
    \    lower bounds: Long\n  where T is a type-variable:\n    T extends Object declared\
    \ in method <T>toList()\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return n.stream().mapToLong(x\
    \ -> n/x).reduce(Math::max).orElse(1);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0iwl4oyg.java:13: error: long cannot be dereferenced\n        return\
    \ n.stream().mapToLong(x -> n/x).reduce(Math::max).orElse(1);\n              \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = Integer.MIN_VALUE;\n\
    \        for (long d = 2; d <= n / 2; d++) {\n            if (n % d == 0) {\n\
    \                if (d > max) max = d;\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpprga6or_.java:22)\n"
  stdout: ''
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ n; // initialize largest divisor to n\n        for (long d = 2; d < n; d *=\
    \ 2) {\n            if (n % d == 0) { // if d divides n evenly\n             \
    \   largestDivisor = d;\n            } \n        }\n        return largestDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsmec0i9u.java:22)\n"
  stdout: ''
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return largestDivisor(n,\
    \ Long::max);\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyp8btzg9.java:13: error: method largestDivisor in class Problem\
    \ cannot be applied to given types;\n        return largestDivisor(n, Long::max);\n\
    \               ^\n  required: long\n  found:    long,Long::max\n  reason: actual\
    \ and formal argument lists differ in length\n1 error\n"
  stdout: ''
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Solve the problem by\
    \ trying different divisors starting with 1 (the first divisor that divides n\
    \ evenly is 2).\n        // The solution is always the largest divisor such that\
    \ no integer is divisible by that divisor.\n        //\n        // To find the\
    \ solution itself, start by computing the largest divisor that divides n evenly,\
    \ that is\n        // the largest divisor such that no integer is divisible by\
    \ that divisor.\n        //\n        // For example, n = 15. 15 is divisible by\
    \ 5, so the largest divisor is 5.\n        // Another example: n = 12. 12 is divisible\
    \ by 4, so the largest divisor is 4. Since the solution\n        // is the largest\
    \ divisor such that no integer is divisible by that divisor, that means that the\
    \ solution\n        // is 4.\n        //\n        // The largest divisor that\
    \ divides n evenly is the largest divisor such that no integer is divisible by\
    \ that divisor.\n        //\n        // Now let's look at the divisors 1, 2, 3,\
    \ 4, and 5. The smallest divisor that divides n evenly is 2, so that's\n     \
    \   // the solution we are looking for.\n        //\n        // To compute the\
    \ largest divisor that divides n evenly, we will first find out whether there\
    \ is any integer divisible\n        // by 1, 2, 3, 4, or 5. There are three cases\
    \ to consider:\n        //\n        // Case 1: The number is even. There is nothing\
    \ we can divide evenly by 1, 2, 3, 4, and 5. We can just divide n evenly.\n  \
    \      // Case 2: The number is odd. It is odd that n is odd, so we can just divide\
    \ n evenly.\n        // Case 3: The number is prime. There are at least three\
    \ divisors that divide n evenly, so there are some integers that\n        // \
    \        are divisible by 1, 2, 3, 4, or 5. There may still be some integer that\
    \ are divisible by 5, but we can't\n        //         divide by 5.\n        //\n\
    \        // To solve this problem, we will need to know whether there is a divisor\
    \ greater than 5 (for example, if the number was 13,\n        // then we know\
    \ that there is no divisor greater than 6).\n        //\n        // So the best\
    \ way to determine if there is a divisor greater than 5 is to try all the divisors\
    \ until we find one\n        // that divides n evenly. That's because after dividing\
    \ n evenly, no number divisible by 5 can be evenly divided.\n        //\n    \
    \    // If n is divisible by some divisor greater than 5, then we know that there\
    \ must be a divisor greater than the largest divisor\n        // (the largest\
    \ divisor that divides n evenly). So we can just return the largest divisor that\
    \ divides n evenly.\n        //\n        // If n is not divisible by any divisor\
    \ greater than 5, then \n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fr1nuq9.java:48: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if(n % 2 == 0) {\n   \
    \         while(n % 2 != 0) {\n                n = n / 2;\n            }\n   \
    \         return n;\n        }\n        return largestDivisor(n / 2);\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4vegtfa6.java:22)\n"
  stdout: ''
  timestamp: 1660010761
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        List<Long> factors = new\
    \ ArrayList<>();\n        long maxFactor = 0;\n        for(long i=1; i <= n; i++)\
    \ {\n            long factor = i;\n            while(factor % 2 == 0 && factor\
    \ <= n) {\n                factor /= 2;\n                factors.add(factor);\n\
    \            }\n            if(factors.size() > maxFactor) {\n               \
    \ maxFactor = factors.size();\n            }\n        }\n        return maxFactor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn3n59_l8.java:29)\n"
  stdout: ''
  timestamp: 1660010762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // return n / Math.max(n,\
    \ 1);\n        return n;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpl5qc6spu.java:17)\n"
  stdout: ''
  timestamp: 1660010762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // If n is even, we do\
    \ not need to test other numbers.\n        // If n is odd, we can test all other\
    \ numbers from 2 to n/2 inclusive to find the largest divisor\n        // If n\
    \ is even, the largest divisor will be n/2, so we can test up to n/2\n       \
    \ if (n & 1 == 0)\n            return n / 2;\n        return Arrays.stream(2l,\
    \ n/2, 2l).filter(x -> n % x == 0l).max().getAsLong();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfy8a3y4k.java:16: error: bad operand types for binary operator\
    \ '&'\n        if (n & 1 == 0)\n              ^\n  first type:  long\n  second\
    \ type: boolean\n/tmp/tmpfy8a3y4k.java:18: error: no suitable method found for\
    \ stream(long,long,long)\n        return Arrays.stream(2l, n/2, 2l).filter(x ->\
    \ n % x == 0l).max().getAsLong();\n                     ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (argument\
    \ mismatch; long cannot be converted to T#2[]))\n    method Arrays.stream(int[],int,int)\
    \ is not applicable\n      (argument mismatch; long cannot be converted to int[])\n\
    \    method Arrays.stream(long[],int,int) is not applicable\n      (argument mismatch;\
    \ long cannot be converted to long[])\n    method Arrays.stream(double[],int,int)\
    \ is not applicable\n      (argument mismatch; long cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 0) {\n      \
    \      return 0;\n        }\n        long res = 0;\n        for (long i = 1; i\
    \ < n; i++) {\n            if (n % i == 0) {\n                if (i != n) {\n\
    \                    res = i;\n                }\n            } else {\n     \
    \           long temp = 1;\n                while (temp < i) {\n             \
    \       temp *= i;\n                }\n                res = Math.max(res, temp);\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdl1uh38w.java:33)\n"
  stdout: ''
  timestamp: 1660010762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // TODO Auto-generated\
    \ method stub\n        long max = (Long.MAX_VALUE / 2) + 1;\n        long curr\
    \ = max;\n        while (curr < n) {\n            long i = curr;\n           \
    \ curr += max;\n            if (n % i == 0) {\n                max = i;\n    \
    \        }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqwfi9g20.java:26)\n"
  stdout: ''
  timestamp: 1660010762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        ArrayList<Long> l = new\
    \ ArrayList<>();\n        for (long i = n; i; i /= 2)\n            if (n % i ==\
    \ 0)\n                l.add(i);\n        Collections.sort(l);\n        return\
    \ l.get(l.size() - 1);\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1zfy1e0m.java:14: error: incompatible types: long cannot be converted\
    \ to boolean\n        for (long i = n; i; i /= 2)\n                         ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 0;\n      \
    \  long currentDivisor = 1;\n        long maxDivisor = n;\n        while (maxDivisor\
    \ >= 2) {\n            currentDivisor *= maxDivisor;\n            while (currentDivisor\
    \ < n) {\n                currentDivisor += maxDivisor;\n            }\n     \
    \       max = Math.max(max, currentDivisor);\n            maxDivisor /= currentDivisor;\n\
    \        }\n        return max;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbpvdt_1k.java:27)\n"
  stdout: ''
  timestamp: 1660010762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n < 3) return n;\n\
    \        List<Long> divisors = Stream.iterate(new ArrayList<Long>(), (list) ->\
    \ list.add(1)).limit(n).map(i -> n / i).filter(i -> i % 2 == 0).boxed().collect(Collectors.toList());\n\
    \        long maxDivisor = divisors.stream().max(Math::max).orElse(0l);\n    \
    \    return n < maxDivisor ? largestDivisor(maxDivisor) : n;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ut8c1k7.java:14: error: incompatible types: int cannot be converted\
    \ to Long\n        List<Long> divisors = Stream.iterate(new ArrayList<Long>(),\
    \ (list) -> list.add(1)).limit(n).map(i -> n / i).filter(i -> i % 2 == 0).boxed().collect(Collectors.toList());\n\
    \                                                                            \
    \           ^\n/tmp/tmp2ut8c1k7.java:14: error: bad operand types for binary operator\
    \ '/'\n        List<Long> divisors = Stream.iterate(new ArrayList<Long>(), (list)\
    \ -> list.add(1)).limit(n).map(i -> n / i).filter(i -> i % 2 == 0).boxed().collect(Collectors.toList());\n\
    \                                                                            \
    \                                   ^\n  first type:  long\n  second type: ArrayList<Long>\n\
    /tmp/tmp2ut8c1k7.java:14: error: bad operand types for binary operator '%'\n \
    \       List<Long> divisors = Stream.iterate(new ArrayList<Long>(), (list) ->\
    \ list.add(1)).limit(n).map(i -> n / i).filter(i -> i % 2 == 0).boxed().collect(Collectors.toList());\n\
    \                                                                            \
    \                                                      ^\n  first type:  Object\n\
    \  second type: int\n/tmp/tmp2ut8c1k7.java:14: error: cannot find symbol\n   \
    \     List<Long> divisors = Stream.iterate(new ArrayList<Long>(), (list) -> list.add(1)).limit(n).map(i\
    \ -> n / i).filter(i -> i % 2 == 0).boxed().collect(Collectors.toList());\n  \
    \                                                                            \
    \                                                             ^\n  symbol:   method\
    \ boxed()\n  location: interface Stream<Object>\n/tmp/tmp2ut8c1k7.java:15: error:\
    \ incompatible types: bad return type in method reference\n        long maxDivisor\
    \ = divisors.stream().max(Math::max).orElse(0l);\n                           \
    \                     ^\n    long cannot be converted to int\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n5 errors\n"
  stdout: ''
  timestamp: 1660010762
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = 0;\n  \
    \      for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n       \
    \         long divisor = i;\n                if (largest < divisor) {\n      \
    \              largest = divisor;\n                }\n            }\n        }\n\
    \        return largest;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        int counter = 0;\n   \
    \     for (long i = 1; i < (int) n; i++) {\n            if (n % i == 0) {\n  \
    \              counter++;\n                if (counter > largestDivisor(n - i))\
    \ {\n                    largestDivisor(n - i);\n                }\n         \
    \   }\n        }\n        return n;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaa_jnqvd.java:25)\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 0;\n\
    \        for (long divisor = 2; divisor < n; divisor++) {\n            long n\
    \ = n % divisor;\n            if (n == 0) {\n                continue;\n     \
    \       }\n            maxDivisor = Math.max(maxDivisor, divisor);\n        }\n\
    \        return maxDivisor;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnq8kid3l.java:15: error: variable n is already defined in method\
    \ largestDivisor(long)\n            long n = n % divisor;\n                 ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long[] numbers = { 1l,\
    \ 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l, 11l, 12l, 13l, 14l };\n        long[] divisors\
    \ = { 1l, 2l, 3l, 4l, 5l, 6l, 7l, 8l, 9l, 10l };\n        int count = 0;\n\n \
    \       for (int i = 0; i < numbers.length; i++) {\n            for (int j = 0;\
    \ j < divisors.length; j++) {\n                if (numbers[i] / divisors[j] ==\
    \ n / divisors[j]) {\n                    count++;\n                    break;\n\
    \                }\n            }\n        }\n\n        if (count > divisors.length)\
    \ {\n            return numbers[count - 1];\n        }\n\n        return numbers[divisors.length\
    \ - 1];\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp674ln5jy.java:33)\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 0;\n\
    \        long divisibleDivisors = 0;\n        long divisibleDivisorCount = 0;\n\
    \n        // Check first two numbers\n        if (n >= 3) {\n            if (n\
    \ % 2 == 0) {\n                maxDivisor = n / 2;\n                divisibleDivisorCount\
    \ += 1;\n            }\n            if (n % 3 == 0) {\n                maxDivisor\
    \ = n / 3;\n                divisibleDivisorCount += 1;\n            }\n     \
    \   }\n\n        // Check for next two numbers\n        for (int i = 3; i <= n;\
    \ i++) {\n            divisibleDivisors = 0;\n            for (int j = 1; j <=\
    \ i; j++) {\n                if (i % j == 0) {\n                    divisibleDivisors\
    \ += 1;\n                }\n            }\n\n            if (divisibleDivisors\
    \ > maxDivisor) {\n                maxDivisor = divisibleDivisors;\n         \
    \       divisibleDivisorCount = 1;\n            } else if (divisibleDivisors ==\
    \ maxDivisor && divisibleDivisorCount < 2) {\n                divisibleDivisorCount++;\n\
    \            }\n        }\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpua8kikvq.java:48)\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = n;\n  \
    \      LongConsumer largest_div = n -> {\n            if (n > largest) {\n   \
    \             largest = n;\n            }\n        };\n        IntStream.rangeClosed(1,\
    \ (int) n / 2)\n            .filter(i -> n % i == 0)\n            .forEach(largest_div);\n\
    \        return largest;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpafywtst4.java:14: error: cannot find symbol\n        LongConsumer\
    \ largest_div = n -> {\n        ^\n  symbol:   class LongConsumer\n  location:\
    \ class Problem\n/tmp/tmpafywtst4.java:14: error: variable n is already defined\
    \ in method largestDivisor(long)\n        LongConsumer largest_div = n -> {\n\
    \                                   ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010762
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = (long)\
    \ Math.sqrt(n);\n        long current = n;\n\n        while (current > 1) {\n\
    \            if (n % current == 0) {\n                current++;\n           \
    \ } else {\n                n = current;\n            }\n            current =\
    \ maxDivisor;\n            maxDivisor = (long) Math.sqrt(n);\n        }\n    \
    \    return maxDivisor;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpup0tln85.java:30)\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        Map<Long, Long> map =\
    \ new HashMap<>();\n        for(long i=1;;i++) {\n            if(n%i == 0) {\n\
    \                long temp = (map.get(n/i))!=null ? map.get(n/i) : i;\n      \
    \          map.put(n/i, temp);\n            }\n            else\n            \
    \    break;\n        }\n        long max_value = map.get(n);\n        return max_value;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt4cyl_5b.java:28)\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return (int) Math.ceil(Math.log(n)\
    \ / Math.log(2));\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6f2ltfv1.java:16)\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return Arrays.stream(new\
    \ long[]{1, n})\n                .max(Comparator.comparingLong(i -> {\n      \
    \              long divisor = 2;\n                    while (divisor < i) {\n\
    \                        divisor *= 2;\n                    }\n              \
    \      return divisor;\n                }))\n                .get();\n    }\n\
    \    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnak17ns6.java:14: error: method max in interface LongStream cannot\
    \ be applied to given types;\n                .max(Comparator.comparingLong(i\
    \ -> {\n                ^\n  required: no arguments\n  found:    Comparator<Object>\n\
    \  reason: actual and formal argument lists differ in length\n/tmp/tmpnak17ns6.java:16:\
    \ error: bad operand types for binary operator '<'\n                    while\
    \ (divisor < i) {\n                                   ^\n  first type:  long\n\
    \  second type: Object\n2 errors\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long[] nums = Arrays.stream(new\
    \ long[]{2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997}).filter(x\
    \ -> x%2==0)\n            .mapToLong(x -> x).boxed().toArray(Long[]::new);\n \
    \       Arrays.sort(nums);\n        long largestDivisor = nums[nums.length-1];\n\
    \        for(int i = 0; i<nums.length; i++) {\n            if (nums[i]%n==0) {\n\
    \                return nums[i];\n            }\n        }\n        return largestDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpckfl7hqn.java:14: error: cannot find symbol\n            .mapToLong(x\
    \ -> x).boxed().toArray(Long[]::new);\n            ^\n  symbol:   method mapToLong((x)->x)\n\
    \  location: interface LongStream\n1 error\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return Collections.max(Arrays.asList(divisors(n)));\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprqfxxw9y.java:13: error: cannot find symbol\n        return Collections.max(Arrays.asList(divisors(n)));\n\
    \                                             ^\n  symbol:   method divisors(long)\n\
    \  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // For a given number,\
    \ find all the divisors up to its square\n        long[] divisors = findDivisors(n);\n\
    \        long[] squares = findSquares(divisors);\n        // Return the largest\
    \ of the two numbers that divide it evenly\n        return findMax(divisors, squares);\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphxt97go3.java:14: error: cannot find symbol\n        long[] divisors\
    \ = findDivisors(n);\n                          ^\n  symbol:   method findDivisors(long)\n\
    \  location: class Problem\n/tmp/tmphxt97go3.java:15: error: cannot find symbol\n\
    \        long[] squares = findSquares(divisors);\n                         ^\n\
    \  symbol:   method findSquares(long[])\n  location: class Problem\n/tmp/tmphxt97go3.java:17:\
    \ error: cannot find symbol\n        return findMax(divisors, squares);\n    \
    \           ^\n  symbol:   method findMax(long[],long[])\n  location: class Problem\n\
    3 errors\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        \n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4ujohclm.java:14: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        List<Long> divisors =\
    \ new ArrayList<>();\n        for (long i = 2; i * i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                divisors.add(i);\n            }\n      \
    \  }\n        if (divisors.isEmpty()) {\n            return n;\n        }\n  \
    \      long largest = divisors.get(divisors.size() - 1);\n        for (long i\
    \ : divisors) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                break;\n            }\n        }\n        return largest;\n \
    \   }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6229mgrf.java:32)\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maxDivisor = 0;\n\
    \        for (long divisor = 1; divisor <= n; divisor++) {\n            if (n\
    \ % divisor == 0) {\n                maxDivisor = Math.max(maxDivisor, divisor);\n\
    \            }\n        }\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpngwy1mr4.java:22)\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Write your code here\n\
    \        List<Long> divisors = new ArrayList<>();\n        for(int i = 1; i <\
    \ n; i++) {\n            if(n%i == 0) {\n                divisors.add(i);\n  \
    \          }\n        }\n        return Collections.max(divisors);\n    }\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr0w3iw5s.java:17: error: incompatible types: int cannot be converted\
    \ to Long\n                divisors.add(i);\n                             ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        int i = 1;\n        long\
    \ largest_divisor = Long.MAX_VALUE;\n        for(; i < Long.MAX_VALUE; i++) {\n\
    \            if (i % 2 == 0 && i % n != 0) {\n                largest_divisor\
    \ = i;\n                break;\n            }\n        }\n        return largest_divisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpb77xaiq7.java:24)\n"
  stdout: ''
  timestamp: 1660010763
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ n;\n        for (long divisor = 2; divisor <= n; divisor++) {\n            if\
    \ (n % divisor == 0) {\n                long remainder = n / divisor;\n      \
    \          if (remainder == 1) {\n                    return divisor;\n      \
    \          } else if (remainder > largestDivisor) {\n                    largestDivisor\
    \ = remainder;\n                }\n            }\n        }\n        return largestDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp050elate.java:27)\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long res = Long.MAX_VALUE;\n\
    \        for (long i = 1l; i < n; ++i) {\n            if (n % i == 0) {\n    \
    \            if (res % i == 0) {\n                    res = n;\n             \
    \   } else if (res > n) {\n                    res = i;\n                }\n \
    \           }\n        }\n        return res;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo6cakuqq.java:26)\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        Set<Long> divisors = new\
    \ HashSet<>();\n        for (long i = 1; i * i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                divisors.add(i);\n            }\n        }\n  \
    \      return divisors.stream()\n                .filter(n -> n % 2 == 0)\n  \
    \              .max(Long::compareTo)\n                .orElse(-1);\n    }\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpswz6rkf_.java:20: error: variable n is already defined in method\
    \ largestDivisor(long)\n                .filter(n -> n % 2 == 0)\n           \
    \             ^\n/tmp/tmpswz6rkf_.java:22: error: incompatible types: int cannot\
    \ be converted to Long\n                .orElse(-1);\n                       \
    \ ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 1l)\n       \
    \     return n;\n        if (n % 2l == 0)\n            return largestDivisor(n\
    \ / 2l);\n        else\n            return largestDivisor(n / 2l) + largestDivisor(n\
    \ % 2l);\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpr86yw97e.java:21)\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n==0l) return 0l;\n\
    \        long maxDivisor = 0;\n        for (long i = 1l; i <= n; i++) {\n    \
    \        long x = i;\n            while (x % 2 == 0) {\n                x += i;\n\
    \            }\n            while (x % 3 == 0) {\n                x += i;\n  \
    \          }\n            while (x % 5 == 0) {\n                x += i;\n    \
    \        }\n            while (x % 7 == 0) {\n                x += i;\n      \
    \      }\n            if (x > maxDivisor) {\n                maxDivisor = x;\n\
    \            }\n        }\n        return maxDivisor;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010769
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long highest = 0;\n  \
    \      long curDivisor = 0;\n        for (long d = 1; d <= n; d++) {\n       \
    \     long remainder = n % d;\n            if (remainder == 0) {\n           \
    \     curDivisor = d;\n                if (d > highest)\n                    highest\
    \ = d;\n            }\n        }\n        return highest;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz8es34vk.java:26)\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = Integer.MIN_VALUE;\n\
    \        for (long i = 1; i < n; i++) {\n            if (n % i == 0) {\n     \
    \           long d = n / i;\n                max = Math.max(max, d);\n       \
    \     }\n        }\n        return max;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp68jdxygs.java:23)\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return IntStream.rangeClosed(1,\
    \ n).filter(i -> n % i == 0).reduce((a, b) -> {\n            return a.compareTo(b)\
    \ > 0 ? a : b;\n        }).orElseThrow(() -> new IllegalArgumentException());\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphiyzvpo_.java:13: error: incompatible types: possible lossy conversion\
    \ from long to int\n        return IntStream.rangeClosed(1, n).filter(i -> n %\
    \ i == 0).reduce((a, b) -> {\n                                        ^\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long[] divisors = new\
    \ long[32];\n        long[] primes = Primes.Primes.primes;\n        long largest\
    \ = 1;\n        long divisor = 0;\n        long i = 6;\n        while (i <= n)\
    \ {\n            if (n % i == 0) {\n                divisor = i;\n           \
    \     divisors[Integer.toBinaryString(i).length] = divisor;\n                i++;\n\
    \            }\n            else {\n                i++;\n            }\n    \
    \    }\n        Arrays.sort(divisors);\n        for (long divisor : divisors)\
    \ {\n            if (divisor > largest) {\n                largest = divisor;\n\
    \            }\n        }\n        return largest;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzb8oo82i.java:14: error: package Primes does not exist\n      \
    \  long[] primes = Primes.Primes.primes;\n                              ^\n/tmp/tmpzb8oo82i.java:21:\
    \ error: incompatible types: possible lossy conversion from long to int\n    \
    \            divisors[Integer.toBinaryString(i).length] = divisor;\n         \
    \                                       ^\n/tmp/tmpzb8oo82i.java:29: error: variable\
    \ divisor is already defined in method largestDivisor(long)\n        for (long\
    \ divisor : divisors) {\n                  ^\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        List<Integer> list = IntStream.range(2,\
    \ (int) Math.sqrt(n)).boxed().collect(Collectors.toList());\n        long maxDivisor\
    \ = 1;\n        for (int i : list) {\n            if (n % i == 0) {\n        \
    \        maxDivisor = i;\n                break;\n            }\n        }\n \
    \       return maxDivisor;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2ocm8mpq.java:26)\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        LongStream\n         \
    \       .rangeClosed(1, n / 2)\n                .filter(i -> n % i == 0)\n   \
    \             .findFirst()\n                .orElseThrow(IllegalArgumentException::new);\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwrparai4.java:18: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return Arrays.stream(new\
    \ int[]{2,4,8,16,32,64}).filter(x -> {\n            long d = 1;\n            while\
    \ (true) {\n                if (d > n/x) break;\n                d *= x;\n   \
    \         }\n            return n % d == 0;\n        }).max().orElseThrow();\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7wtb8ory.java:23)\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 1;\n        while (n > 0) {\n            if (n % 2 == 0) {\n               \
    \ largestDivisor *= 2;\n            }\n            n /= 2;\n        }\n      \
    \  return largestDivisor;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpd5uf8uxf.java:25)\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n < 2)\n         \
    \   return -1;\n        long[] divisors = new long[n];\n        for (long i =\
    \ 1; i != n; i++) {\n            divisors[i] = i;\n            for (int j = (int)\
    \ (n - i); j > 0; j--) {\n                if (n % i == 0 && divisors[j] <= i &&\
    \ divisors[j] != i)\n                    return divisors[j];\n            }\n\
    \        }\n        return -1;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpre6p5t73.java:15: error: incompatible types: possible lossy conversion\
    \ from long to int\n        long[] divisors = new long[n];\n                 \
    \                  ^\n/tmp/tmpre6p5t73.java:17: error: incompatible types: possible\
    \ lossy conversion from long to int\n            divisors[i] = i;\n          \
    \           ^\n2 errors\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = 0;\n  \
    \      long largest_factor = 0;\n        for (long i = 2; i <= n; i++) {\n   \
    \         if (n % i == 0) {\n                largest = i;\n                largest_factor\
    \ = n;\n            }\n        }\n        return largest;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpes66oiz1.java:24)\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // TODO: implement this\
    \ method\n        long nDivisors = 1;\n        while (n % 2 == 0) {\n        \
    \    n = n / 2;\n            nDivisors++;\n        }\n        if (n % 2 == 0)\
    \ {\n            System.out.println(\"n is not divisible by 2\");\n        }\n\
    \        long largestDivisors = 0;\n        for (int i = 3; i <= n / 2 + 1; i++)\
    \ {\n            if (n % i == 0) {\n                nDivisors--;\n           \
    \ }\n            if (nDivisors == 0) {\n                largestDivisors = i;\n\
    \            }\n        }\n        return largestDivisors;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz8zc1pny.java:34)\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long divisor = 1;\n  \
    \      while (divisor < n) {\n            divisor *= 2;\n        }\n        long\
    \ maxDivisor = 1;\n        while (divisor != 1) {\n            long tmpDivisor\
    \ = divisor;\n            divisor = n % divisor;\n            if (tmpDivisor >\
    \ maxDivisor) {\n                maxDivisor = tmpDivisor;\n            }\n   \
    \     }\n        return maxDivisor;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.largestDivisor(tmp7wa0c7km.java:20)\n\tat Problem.main(tmp7wa0c7km.java:28)\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 1l)\n       \
    \     return n;\n        long m = n / 2;\n        long max = 2;\n        while\
    \ (!isDivisor(n, max))\n            max++;\n        return max;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprpwqd3wy.java:17: error: cannot find symbol\n        while (!isDivisor(n,\
    \ max))\n                ^\n  symbol:   method isDivisor(long,long)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long maximumDivisor =\
    \ Long.MIN_VALUE;\n        long[] divisors = new long[10];\n        Arrays.fill(divisors,\
    \ 1);\n\n        for (long i = 1; i <= n; i++) {\n            long divisor = 1;\n\
    \n            while (n % i == 0) {\n                divisor = i;\n           \
    \     divisors[divisor]++;\n                n /= i;\n            }\n\n       \
    \     if (divisor > maximumDivisor) {\n                maximumDivisor = divisor;\n\
    \            }\n        }\n\n        return maximumDivisor;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp311x6kqa.java:22: error: incompatible types: possible lossy conversion\
    \ from long to int\n                divisors[divisor]++;\n                   \
    \      ^\n1 error\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return Math.max(new BigInteger(\"\
    0\", 16), new BigInteger(\"0\", 16).divideAndRemainder(n).stream().mapToLong(x\
    \ -> x==0? -1 : (long)Math.min(x, n))\n            .sorted().findFirst().getAsLong());\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8jrnedt9.java:13: error: incompatible types: long cannot be converted\
    \ to BigInteger\n        return Math.max(new BigInteger(\"0\", 16), new BigInteger(\"\
    0\", 16).divideAndRemainder(n).stream().mapToLong(x -> x==0? -1 : (long)Math.min(x,\
    \ n))\n                                                                      \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return IntStream.rangeClosed(1,\
    \ Math.sqrt(n))\n                .filter(i -> n % i == 0)\n                .max(Long::compare)\n\
    \                .orElse(Long.MAX_VALUE);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0gp5apdv.java:13: error: incompatible types: possible lossy conversion\
    \ from double to int\n        return IntStream.rangeClosed(1, Math.sqrt(n))\n\
    \                                                 ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010764
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long answer = 1l;\n  \
    \      while (n % 2 == 0) {\n            answer *= 2;\n            n /= 2;\n \
    \       }\n        while (n % 2 == 0) {\n            answer /= 2;\n          \
    \  n /= 2;\n        }\n        return answer;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkrvaq6lc.java:27)\n"
  stdout: ''
  timestamp: 1660010765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 1)\n        \
    \    return n;\n        if (n % 2 == 0)\n            return largestDivisor(n /\
    \ 2);\n        else\n            return largestDivisor(3 * n + 1);\n    }\n  \
    \  public static void main(String[] args) {\n    assert(largestDivisor((3l)) ==\
    \ (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpsffp__i1.java:23)\n"
  stdout: ''
  timestamp: 1660010765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        // Start by checking for\
    \ divisors up to sqrt(n)\n        long maxDivisor = Long.MIN_VALUE;\n        long\
    \ i;\n        for (i = 1; i <= Math.sqrt(n); i++) {\n            // If we found\
    \ a divisor of n, then it must be larger than n, so break\n            if (n %\
    \ i == 0) {\n                break;\n            }\n            // If we haven't\
    \ found a divisor of n yet, then it must be larger than n and smaller than n squared\n\
    \            else if (i == Math.sqrt(n)) {\n                maxDivisor = Math.max(maxDivisor,\
    \ i);\n            }\n        }\n        // If we haven't found a divisor of n\
    \ evenly, then it must be larger than n\n        if (i == Math.sqrt(n)) {\n  \
    \          maxDivisor = maxDivisor * 2;\n        }\n        return maxDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiebznolf.java:33)\n"
  stdout: ''
  timestamp: 1660010765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largestDivisor =\
    \ 0l;\n        for (long i = 1; i <= n; i++) {\n            long d = i / n;\n\
    \            if (d % 2 == 0) {\n                largestDivisor = i;\n        \
    \    }\n        }\n        return largestDivisor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxuxfgfn3.java:23)\n"
  stdout: ''
  timestamp: 1660010765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long ans = Long.MIN_VALUE;\n\
    \        long divisor = 1;\n        while (n != 0) {\n            if (n % divisor\
    \ == 0) {\n                if (ans < divisor) {\n                    ans = divisor;\n\
    \                }\n                divisor *= 2;\n            } else {\n    \
    \            divisor += 2;\n            }\n            n /= divisor;\n       \
    \ }\n        return ans;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp84tedhp1.java:31)\n"
  stdout: ''
  timestamp: 1660010765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        return largestDivisor(n);\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.StackOverflowError\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\tat Problem.largestDivisor(tmprp5pkgw3.java:13)\n\
    \tat Problem.largestDivis"
  stdout: ''
  timestamp: 1660010765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = 1l; // Initialize\
    \ largest number as 1\n        for (long i = 1; i < n; i++) {\n            long\
    \ temp = i;\n            while (temp % 2 == 0) {\n                temp = temp\
    \ / 2;\n            }\n            if (temp > max) {\n                max = temp;\n\
    \            }\n        }\n        return max;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp545t403m.java:27)\n"
  stdout: ''
  timestamp: 1660010765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        final long maxDivisor\
    \ = Long.MIN_VALUE;\n        final long currentDivisor = Long.MIN_VALUE;\n   \
    \     long remainder;\n        do {\n            remainder = (n % currentDivisor);\n\
    \            if (remainder != 0) {\n                maxDivisor = Math.max(maxDivisor,\
    \ currentDivisor);\n            }\n            currentDivisor++;\n        } while\
    \ (remainder != 0);\n        return maxDivisor;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpco5a5z8x.java:19: error: cannot assign a value to final variable\
    \ maxDivisor\n                maxDivisor = Math.max(maxDivisor, currentDivisor);\n\
    \                ^\n/tmp/tmpco5a5z8x.java:21: error: cannot assign a value to\
    \ final variable currentDivisor\n            currentDivisor++;\n            ^\n\
    2 errors\n"
  stdout: ''
  timestamp: 1660010765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long max = Long.MIN_VALUE;\n\
    \        for (long d = 2; d < n; d += 2) {\n            if (n % d == 0) {\n  \
    \              max = Math.max(max, d);\n            }\n        }\n        return\
    \ max;\n    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk929hgh3.java:22)\n"
  stdout: ''
  timestamp: 1660010765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n == 0l) return 0l;\n\
    \        if (n % 2 == 0l) return n * n;\n\n        long highestDivisor = Long.MAX_VALUE;\n\
    \        for (long divisor = 2; divisor <= n; divisor += 2) {\n            if\
    \ (n % divisor == 0l) {\n                long divisorDivisor = divisor;\n    \
    \            while (divisorDivisor < n && n % divisorDivisor == 0l) {\n      \
    \              divisorDivisor += 2;\n                }\n                if (divisorDivisor\
    \ > highestDivisor) {\n                    highestDivisor = divisorDivisor;\n\
    \                }\n            }\n        }\n        return highestDivisor;\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfgx2ts57.java:31)\n"
  stdout: ''
  timestamp: 1660010765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = Long.MIN_VALUE;\n\
    \        long current = n;\n        do {\n            long current = n % current;\n\
    \            if (current == 0) {\n                return largest;\n          \
    \  }\n            largest = current;\n            n = current;\n        } while\
    \ (n != 0);\n        return largest;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6i2xchys.java:16: error: variable current is already defined in\
    \ method largestDivisor(long)\n            long current = n % current;\n     \
    \            ^\n1 error\n"
  stdout: ''
  timestamp: 1660010765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        long largest = -1;\n \
    \       long d = 1;\n        for (long i = 0; i <= n; i++) {\n            long\
    \ next = (d * i);\n            long test = (n / next) % 2 == 0 ? next : 1;\n \
    \           if (test == next) {\n                largest = next;\n           \
    \ }\n            d = next;\n        }\n        return largest;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n\
    \    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l)) ==\
    \ (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.ArithmeticException: / by zero\n\
    \tat Problem.largestDivisor(tmpluyis2qt.java:17)\n\tat Problem.main(tmpluyis2qt.java:26)\n"
  stdout: ''
  timestamp: 1660010765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        List<Long> divisors =\
    \ new ArrayList<>();\n\n        // To find all divisors, we loop from 1 to sqrt(n)\n\
    \        // and check for divisor with n % divisor == 0\n        while (true)\
    \ {\n            long currentDividend = n;\n\n            // If we can divide\
    \ n evenly, then n % dividend == 0\n            if (currentDividend % 2 == 0)\
    \ {\n                // For each divisor, check if it is larger than currentDividend\n\
    \                for (int divisor = 2; divisor <= currentDividend; divisor++)\
    \ {\n                    // If it is, then we add it to the divisors\n       \
    \             if (currentDividend % divisor == 0) {\n                        divisors.add(divisor);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n\n            // If we can't divide n evenly, then n is not a divisor\n\
    \            else {\n                break;\n            }\n        }\n\n    \
    \    // If we couldn't divide any divisors, then n is not a divisor\n        if\
    \ (divisors.isEmpty()) {\n            return n;\n        }\n\n        // If we\
    \ found some divisors\n        return divisors.stream().max(Long::compareTo).get();\n\
    \    }\n    public static void main(String[] args) {\n    assert(largestDivisor((3l))\
    \ == (1l));\n    assert(largestDivisor((7l)) == (1l));\n    assert(largestDivisor((10l))\
    \ == (5l));\n    assert(largestDivisor((100l)) == (50l));\n    assert(largestDivisor((49l))\
    \ == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpibr85imo.java:26: error: incompatible types: int cannot be converted\
    \ to Long\n                        divisors.add(divisor);\n                  \
    \                   ^\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1660010765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        List<Long> candidates\
    \ = new ArrayList<Long>();\n        candidates.add(n);\n        candidates.add((long)\
    \ (Math.sqrt(n) + 1));\n        while (candidates.size() > 0) {\n            long\
    \ value = candidates.remove(candidates.size() - 1);\n            if (value % 2\
    \ == 0) {\n                return value;\n            }\n            candidates.add((long)\
    \ (value / 2));\n        }\n        return -1;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp54kwh9ka.java:26)\n"
  stdout: ''
  timestamp: 1660010765
- exit_code: -1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        Set<Long> divisors = new\
    \ HashSet<>();\n        while(n > 1) {\n            long x = n / 2;\n        \
    \    divisors.add(x);\n            if(n % x == 0) {\n                n -= x;\n\
    \            }\n        }\n        long largest = 0;\n        for(long divisor:\
    \ divisors) {\n            if(divisor > largest) largest = divisor;\n        }\n\
    \        return largest;\n    }\n    public static void main(String[] args) {\n\
    \    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l)) ==\
    \ (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660010770
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        ArrayList results = new\
    \ ArrayList();\n        long maxDivisor = n; // The number that divides n evenly,\
    \ smaller than n.\n\n        // Calculate the largest divisors smaller than n\
    \ and add them to the results list.\n        while (n % 2 == 0) {\n          \
    \  results.add(2l);\n            n /= 2;\n        }\n        while(n > 1) {\n\
    \            long divisor = 2;\n            while (n % divisor == 0) {\n     \
    \           results.add(divisor);\n                n /= divisor;\n           \
    \ }\n        }\n        if (results.size() == 0){\n            return maxDivisor;\n\
    \        }\n        else{\n            return Long.max(results.stream().map(Math::sqrt).collect(Collectors.toList())\n\
    \                            .get(0));\n        }\n    }\n    public static void\
    \ main(String[] args) {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl8x028qh.java:32: error: incompatible types: invalid method reference\n\
    \            return Long.max(results.stream().map(Math::sqrt).collect(Collectors.toList())\n\
    \                                                 ^\n    incompatible types: Object\
    \ cannot be converted to double\nNote: /tmp/tmpl8x028qh.java uses unchecked or\
    \ unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\nNote:\
    \ Some messages have been simplified; recompile with -Xdiags:verbose to get full\
    \ output\n1 error\n"
  stdout: ''
  timestamp: 1660010765
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // For a given number n, find the largest number that divides\
    \ n evenly, smaller than n\n    // >>> largestDivisor((15l))\n    // (5l)\n  \
    \  public static long largestDivisor(long n) {\n        if (n <= 1l)\n       \
    \     return n;\n        if (n % 2l == 0l)\n            return largestDivisor(n\
    \ / 2l);\n        if (n % 4l == 0l)\n            return largestDivisor(n / 4l);\n\
    \        if (n % 6l == 0l)\n            return largestDivisor(n / 6l);\n     \
    \   if (n % 8l == 0l)\n            return largestDivisor(n / 8l);\n        if\
    \ (n % 10l == 0l)\n            return largestDivisor(n / 10l);\n        return\
    \ largestDivisor(n / 10l);\n    }\n    public static void main(String[] args)\
    \ {\n    assert(largestDivisor((3l)) == (1l));\n    assert(largestDivisor((7l))\
    \ == (1l));\n    assert(largestDivisor((10l)) == (5l));\n    assert(largestDivisor((100l))\
    \ == (50l));\n    assert(largestDivisor((49l)) == (7l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfoaha9sh.java:28)\n"
  stdout: ''
  timestamp: 1660010765
