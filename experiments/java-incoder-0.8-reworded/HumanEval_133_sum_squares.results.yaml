language: java
name: HumanEval_133_sum_squares
results:
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        if (lst.size() <= 1)\n            return lst.get(0).floatValue()\
    \ * lst.get(0).floatValue();\n        long[] arr = lst.stream().mapToLong(f ->\
    \ Math.ceil(f)).mapToLong(f -> Math.ceil(f)).mapToLong(f -> Math.ceil(f)).map(f\
    \ -> f * f).collect(Collectors.toList()).stream().mapToLong(f -> f).sum();\n \
    \       return arr[0];\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe8mktg_7.java:25: error: incompatible types: possible lossy conversion\
    \ from float to long\n            return lst.get(0).floatValue() * lst.get(0).floatValue();\n\
    \                                           ^\n/tmp/tmpe8mktg_7.java:26: error:\
    \ incompatible types: bad return type in lambda expression\n        long[] arr\
    \ = lst.stream().mapToLong(f -> Math.ceil(f)).mapToLong(f -> Math.ceil(f)).mapToLong(f\
    \ -> Math.ceil(f)).map(f -> f * f).collect(Collectors.toList()).stream().mapToLong(f\
    \ -> f).sum();\n                                                          ^\n\
    \    possible lossy conversion from double to long\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long res = 0;\n        long sum = 0;\n        for(Float f :\
    \ lst) {\n            sum += Float.intValue(f*f);\n        }\n        for(Float\
    \ f : lst) {\n            res = res + Float.intValue(f*f);\n        }\n      \
    \  return sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa3ljw_uh.java:27: error: method intValue in class Float cannot\
    \ be applied to given types;\n            sum += Float.intValue(f*f);\n      \
    \                  ^\n  required: no arguments\n  found:    float\n  reason: actual\
    \ and formal argument lists differ in length\n/tmp/tmpa3ljw_uh.java:30: error:\
    \ method intValue in class Float cannot be applied to given types;\n         \
    \   res = res + Float.intValue(f*f);\n                             ^\n  required:\
    \ no arguments\n  found:    float\n  reason: actual and formal argument lists\
    \ differ in length\n2 errors\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        if(lst.size() == 0) return 0;\n        ArrayList<Double> numbers\
    \ = new ArrayList<Double>();\n        for(float n : lst) {\n            numbers.add((double)\
    \ Math.round(n));\n        }\n        Double sumOfSquares = numbers.stream().mapToDouble(Math::pow).sum();\n\
    \        return sumOfSquares.longValue();\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3zyy1oak.java:29: error: incompatible types: invalid method reference\n\
    \        Double sumOfSquares = numbers.stream().mapToDouble(Math::pow).sum();\n\
    \                                                           ^\n    method pow\
    \ in class Math cannot be applied to given types\n      required: double,double\n\
    \      found:    Double\n      reason: actual and formal argument lists differ\
    \ in length\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        double sum = 0l;\n        for(Float i : lst) {\n           \
    \ sum += Math.round(i * i);\n        }\n        return Math.pow(sum, 0.5l);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgj293xxl.java:28: error: ')' expected\n        return Math.pow(sum,\
    \ 0.5l);\n                                ^\n/tmp/tmpgj293xxl.java:28: error:\
    \ ';' expected\n        return Math.pow(sum, 0.5l);\n                        \
    \         ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long total = 0;\n        for (Float f : lst) {\n           \
    \ total = total * f + Math.pow(f, 2);\n        }\n        return total;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp45wkdv0v.java:26: error: incompatible types: possible lossy conversion\
    \ from double to long\n            total = total * f + Math.pow(f, 2);\n     \
    \                         ^\n1 error\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        long i = 0;\n        for (float f : lst)\
    \ {\n            sum += f * f;\n            i++;\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxp4ogid7.java:36)\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(Math::ceil).map(Math::round).map(Math::toInt).map(Math::pow).mapToLong(Math::sum).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp54p1fnt4.java:24: error: invalid method reference\n        return\
    \ lst.stream().map(Math::ceil).map(Math::round).map(Math::toInt).map(Math::pow).mapToLong(Math::sum).sum();\n\
    \                                                                 ^\n  cannot\
    \ find symbol\n    symbol:   method toInt()\n    location: class Math\n/tmp/tmp54p1fnt4.java:24:\
    \ error: invalid method reference\n        return lst.stream().map(Math::ceil).map(Math::round).map(Math::toInt).map(Math::pow).mapToLong(Math::sum).sum();\n\
    \                                                                            \
    \                           ^\n  cannot find symbol\n    symbol:   method sum()\n\
    \    location: class Math\n2 errors\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float f : lst) {\n            sum\
    \ += Math.pow(f + f, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfk5z27ec.java:31)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0.0;\n        for (int i = 0; i < lst.size();\
    \ i++)\n            result += lst.get(i);\n        return Math.round(result*result)/lst.size();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp6h439o1.java:24: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long result = 0.0;\n                      ^\n1\
    \ error\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.reduce(Float.NEGATIVE_INFINITY, new ReduceFloat());\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpidszoenk.java:24: error: cannot find symbol\n        return lst.reduce(Float.NEGATIVE_INFINITY,\
    \ new ReduceFloat());\n                                                      \
    \ ^\n  symbol:   class ReduceFloat\n  location: class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long ans = 0;\n        float sum = 0;\n        for(int i = 0;\
    \ i < lst.size(); i++) {\n            float f = lst.get(i);\n            sum +=\
    \ f;\n            ans += Math.pow(f, 2);\n        }\n        return Math.round(ans\
    \ / sum) * sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvojdixv7.java:31: error: incompatible types: possible lossy conversion\
    \ from float to long\n        return Math.round(ans / sum) * sum;\n          \
    \                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        int len = lst.size();\n        if (len == 0)\n            return\
    \ 0;\n        long sum = 0;\n        for(int i=0; i<len; i++) {\n            double\
    \ x = (int)Math.round(lst.get(i) * 1.0d);\n            sum += x * x;\n       \
    \ }\n        return sum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptpf0p7nk.java:38)\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code here\n        long sum = 0;\n        for(Float\
    \ num : lst) {\n            sum += (num * num);\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzio2b1rh.java:35)\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        float sum = 0;\n        for (Float f : lst) {\n            sum\
    \ += Math.pow(f.floatValue(), 2);\n        }\n        return Math.round(sum);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpe_f568zf.java:34)\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        if (lst.isEmpty()) {\n            return 0;\n        }\n   \
    \     // get the first element and round\n        Float first = lst.get(0);\n\
    \        first = roundToUp(first);\n        // get the last element and round\n\
    \        Float last = lst.get(lst.size() - 1);\n        last = roundToUp(last);\n\
    \        long total = 0;\n        // iterate the list and add the squared elements\n\
    \        for (int i = 0; i <= lst.size() - 1; i++) {\n            total += Math.pow(first.getFloat()\
    \ - last.getFloat(), 2);\n            first = first.getFloat();\n            last\
    \ = last.getFloat();\n        }\n        return total;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpizty4ll5.java:29: error: cannot find symbol\n        first = roundToUp(first);\n\
    \                ^\n  symbol:   method roundToUp(Float)\n  location: class Problem\n\
    /tmp/tmpizty4ll5.java:32: error: cannot find symbol\n        last = roundToUp(last);\n\
    \               ^\n  symbol:   method roundToUp(Float)\n  location: class Problem\n\
    /tmp/tmpizty4ll5.java:36: error: cannot find symbol\n            total += Math.pow(first.getFloat()\
    \ - last.getFloat(), 2);\n                                   ^\n  symbol:   method\
    \ getFloat()\n  location: variable first of type Float\n/tmp/tmpizty4ll5.java:36:\
    \ error: cannot find symbol\n            total += Math.pow(first.getFloat() -\
    \ last.getFloat(), 2);\n                                                     ^\n\
    \  symbol:   method getFloat()\n  location: variable last of type Float\n/tmp/tmpizty4ll5.java:37:\
    \ error: cannot find symbol\n            first = first.getFloat();\n         \
    \                ^\n  symbol:   method getFloat()\n  location: variable first\
    \ of type Float\n/tmp/tmpizty4ll5.java:38: error: cannot find symbol\n       \
    \     last = last.getFloat();\n                       ^\n  symbol:   method getFloat()\n\
    \  location: variable last of type Float\n6 errors\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        float sum = 0;\n        for(Float val : lst)\n            sum\
    \ += val * val;\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpztjfe6ug.java:27: error: incompatible types: possible lossy conversion\
    \ from float to long\n        return sum;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        float last;\n        for(float f : lst)\
    \ {\n            last = (float)(Math.ceil(f));\n            sum += last * last;\n\
    \        }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float number : lst)\n          \
    \  sum += Math.pow(number, 2);\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpray0dljk.java:33)\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Convert lst into an array of primitive type\n        float[]\
    \ f = lst.stream().mapToDouble(Float::floatValue).toArray();\n\n        // Sum\
    \ squared element of array f\n        long sum = 0;\n        for (float f : f)\
    \ {\n            sum += f * f;\n        }\n\n        // Round each element to\
    \ its upper int(Ceiling) first\n        sum = sum * sum;\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_gxa5ekl.java:25: error: incompatible types: double[] cannot be\
    \ converted to float[]\n        float[] f = lst.stream().mapToDouble(Float::floatValue).toArray();\n\
    \                                                                       ^\n/tmp/tmp_gxa5ekl.java:29:\
    \ error: variable f is already defined in method sumSquares(ArrayList<Float>)\n\
    \        for (float f : f) {\n                   ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        if(lst.size() <= 0) throw new IllegalArgumentException();\n\
    \        long ret = 0;\n        for(Float f : lst) ret += Math.pow(f.intValue(),\
    \ 2);\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4vl1sa18.java:33)\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpifwurlo0.java:34)\n"
  stdout: ''
  timestamp: 1659977082
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float i : lst) {\n            sum\
    \ += Math.round(i * i);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp823nsxxs.java:34)\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        ArrayList<Double> doubles = new ArrayList<>();\n        for(Float\
    \ f : lst){\n            doubles.add((double)f);\n        }\n        long sum\
    \ = 0;\n        for(Double d : doubles){\n            sum += Math.pow(d, 2);\n\
    \        }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpbqtfhd88.java:38)\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code goes here\n        long[] arr = lst.stream().mapToLong(f\
    \ -> Math.ceil(Math.pow(f , 2.0)))\n                                .mapToLong(f\
    \ -> f*f).toArray();\n        return Arrays.stream(arr).reduce((l, r) -> l + r).toLong();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn31k02kl.java:25: error: incompatible types: bad return type in\
    \ lambda expression\n        long[] arr = lst.stream().mapToLong(f -> Math.ceil(Math.pow(f\
    \ , 2.0)))\n                                                          ^\n    possible\
    \ lossy conversion from double to long\n/tmp/tmpn31k02kl.java:27: error: cannot\
    \ find symbol\n        return Arrays.stream(arr).reduce((l, r) -> l + r).toLong();\n\
    \                                                         ^\n  symbol:   method\
    \ toLong()\n  location: class OptionalLong\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // your code\n        return 0;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp8zzn6ab1.java:28)\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // write your code here\n        return lst.stream().map(a ->\
    \ Math.pow(a, 2)).sum();\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwk4ifk3y.java:25: error: cannot find symbol\n        return lst.stream().map(a\
    \ -> Math.pow(a, 2)).sum();\n                                                \
    \    ^\n  symbol:   method sum()\n  location: interface Stream<Double>\n1 error\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float f : lst) {\n            sum\
    \ += (long) Math.pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpetehnlzq.java:34)\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Initialize sum and total\n        long sum = 0;\n       \
    \ long total = 0;\n        long largestLong = Long.MIN_VALUE;\n        for(Float\
    \ f : lst)\n        {\n            total = total + Math.pow(f, 2);\n        }\n\
    \        largestLong = Math.ceil(Math.sqrt(total));\n        for(Float f : lst)\n\
    \        {\n            sum = sum + Math.round(f*largestLong);\n        }\n  \
    \      return sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqlkm5hut.java:30: error: incompatible types: possible lossy conversion\
    \ from double to long\n            total = total + Math.pow(f, 2);\n         \
    \                 ^\n/tmp/tmpqlkm5hut.java:32: error: incompatible types: possible\
    \ lossy conversion from double to long\n        largestLong = Math.ceil(Math.sqrt(total));\n\
    \                               ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        double sum = 0;\n        for (Float f : lst) {\n           \
    \ sum += Math.pow(f, 2);\n        }\n        return Math.round(sum);\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpq18oquoh.java:34)\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code goes here\n        List<Integer> lstI = lst.stream().mapToInt(Float::intValue).collect(Collectors.toList());\n\
    \        long sum = 0;\n        for (int i = 0; i < lstI.size(); i++) {\n    \
    \        float n = lstI.get(i);\n            sum += (int) Math.pow(n, n);\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_b2sgvuu.java:25: error: method collect in interface IntStream\
    \ cannot be applied to given types;\n        List<Integer> lstI = lst.stream().mapToInt(Float::intValue).collect(Collectors.toList());\n\
    \                                                                   ^\n  required:\
    \ Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>\n  found:    Collector<Object,CAP#1,List<Object>>\n\
    \  reason: cannot infer type-variable(s) R\n    (actual and formal argument lists\
    \ differ in length)\n  where R is a type-variable:\n    R extends Object declared\
    \ in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n  where\
    \ CAP#1 is a fresh type-variable:\n    CAP#1 extends Object from capture of ?\n\
    /tmp/tmp_b2sgvuu.java:25: error: incompatible types: cannot infer type-variable(s)\
    \ R\n        List<Integer> lstI = lst.stream().mapToInt(Float::intValue).collect(Collectors.toList());\n\
    \                                                                           ^\n\
    \    (argument mismatch; no instance(s) of type variable(s) CAP#1,T exist so that\
    \ Collector<T,?,List<T>> conforms to Supplier<R>)\n  where R,T are type-variables:\n\
    \    R extends Object declared in method <R>collect(Supplier<R>,ObjIntConsumer<R>,BiConsumer<R,R>)\n\
    \    T extends Object declared in method <T>toList()\n  where CAP#1 is a fresh\
    \ type-variable:\n    CAP#1 extends Object from capture of ?\n2 errors\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long l = 0;\n        float s = 0.0f;\n        for(Float f :\
    \ lst) {\n            l = Math.max(l, (int) Math.ceil(f));\n            s += f\
    \ * f;\n        }\n        return s;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp36k_uxg_.java:30: error: incompatible types: possible lossy conversion\
    \ from float to long\n        return s;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        float max = lst.get(lst.size() - 1);\n\
    \        float current;\n        for (float n : lst) {\n            current =\
    \ Math.ceil(n);\n            sum += current * current;\n            n = Math.ceil(current);\n\
    \            max = Math.max(max, n);\n        }\n        return sum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9r_9mbpm.java:28: error: incompatible types: possible lossy conversion\
    \ from double to float\n            current = Math.ceil(n);\n                \
    \               ^\n/tmp/tmp9r_9mbpm.java:30: error: incompatible types: possible\
    \ lossy conversion from double to float\n            n = Math.ceil(current);\n\
    \                         ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToInt(a -> Math.ceil(Math.pow(a + 1,\
    \ 2))).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0xqqishm.java:24: error: incompatible types: bad return type in\
    \ lambda expression\n        return lst.stream().mapToInt(a -> Math.ceil(Math.pow(a\
    \ + 1, 2))).sum();\n                                                   ^\n   \
    \ possible lossy conversion from double to int\nNote: Some messages have been\
    \ simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        System.out.println(\"lst: \" + lst);\n        System.out.println(\"\
    lst.size() = \" + lst.size());\n        System.out.println(\"lst.get(0).getClass()\
    \ = \" + lst.get(0).getClass());\n        System.out.println(\"lst.get(0).getClass().getName())\
    \ = \" + lst.get(0).getClass().getName());\n        System.out.println(\"lst.get(0).getClass().getName().equals(\"\
    \n                + \"(java.lang.Float)) ? \"\n                + (lst.get(0).getClass().getName().equals(\"\
    java.lang.Float\") ? true : false)\n        );\n        System.out.println(\"\
    lst.get(0).getClass().getName().equals(\"\n                + \"(java.util.ArrayList))\
    \ ? \"\n                + (lst.get(0).getClass().getName().equals(\"java.util.ArrayList\"\
    ) ? true : false)\n        );\n        System.out.println(\"lst.get(0).getClass().getName().equals(\"\
    \n                + \"(java.util.ArrayList<Float>)) ? \"\n                + (lst.get(0).getClass().getName().equals(\"\
    java.util.ArrayList<Float>\") ? true : false)\n        );\n        System.out.println(\"\
    lst.get(0).getClass().getName().equals(\"\n                + \"(java.util.ArrayList<Float>))\
    \ ? \"\n                + (lst.get(0).getClass().getName().equals(\"java.util.ArrayList<Float>\"\
    ) ? true : false)\n        );\n        System.out.println(\"lst.get(0).getClass().getName().equals(\"\
    \n                + \"(java.util.ArrayList<Float>)) ? \"\n                + (lst.get(0).getClass().getName().equals(\"\
    java.util.ArrayList<Float>\") ? true : false)\n        );\n        System.out.println(\"\
    lst.get(0).getClass().getName().equals(\"\n                + \"(java.util.ArrayList<Float>))\
    \ ? \"\n                + (lst.get(0).getClass().getName().equals(\"java.util.ArrayList<Float>\"\
    ) ? true : false)\n        );\n        System.out.println(\"lst.get(0).getClass().getName().equals(\"\
    \n                + \"(java.util.ArrayList<Float>)) ? \"\n                + (lst.get(0).getClass().getName().equals(\"\
    java.util.ArrayList<Float>\") ? true : false)\n        );\n        System.out.println(\"\
    lst.get(0).getClass().getName().equals(\"\n                + \"(java.util.ArrayList<Float>))\
    \ ? \"\n                + (lst.get(0).getClass().getName().equals(\"java.util.ArrayList<Float>\"\
    ) ? true : false)\n        );\n        System.out.println(\"lst.get(0).getClass().getName().equals(\"\
    \n                + \"(java.util.ArrayList<Float>)) ? \"\n                + (lst.get(0).getClass().getName().equals(\"\
    java.util.ArrayList<Float>\") ? true : false)\n        );\n        System.out.println(\"\
    lst.get(0).getClass().getName().\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj_q1pu_7.java:64: error: unclosed string literal\n        System.out.println(\"\
    lst.get(0).getClass().getName().\n                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659977083
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        \n        // write your code here\n        return 0;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpv5nry347.java:29)\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float f : lst) {\n            sum\
    \ += Math.pow(f.intValue(), 2);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpiv3cry1o.java:34)\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code goes here\n        long sum=0;\n        for(Float\
    \ num:lst){\n            sum+=Math.pow(num,2);\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfkaqqo_0.java:35)\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        if (lst.size() == 0) {\n            return 0L;\n        }\n\
    \        long sum = 0L;\n        for (Float f : lst) {\n            sum += Math.pow(f.floatValue(),\
    \ 2L);\n        }\n        return Math.ceil(sum);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9lsa4vxu.java:31: error: incompatible types: possible lossy conversion\
    \ from double to long\n        return Math.ceil(sum);\n                      \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float x : lst) {\n            sum\
    \ += Math.pow(x, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7m_ne57s.java:34)\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            result += (lst.get(i)*lst.get(i));\n        }\n        return\
    \ Math.Ceiling(result);\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp3v5q671.java:28: error: cannot find symbol\n        return Math.Ceiling(result);\n\
    \                   ^\n  symbol:   method Ceiling(long)\n  location: class Math\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(Math::ceil).map(Math::ceil).mapToLong(x\
    \ -> Math.pow(x , 2)).sum();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa6xdxd6h.java:24: error: incompatible types: bad return type in\
    \ lambda expression\n        return lst.stream().map(Math::ceil).map(Math::ceil).mapToLong(x\
    \ -> Math.pow(x , 2)).sum();\n                                               \
    \                                    ^\n    possible lossy conversion from double\
    \ to long\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        double sum = 0.0;\n        for(Float x : lst) {\n          \
    \  sum += Math.pow(x, 2);\n        }\n        return Math.round(sum);\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2xigo7i2.java:34)\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        float sum=0;\n        for (Float x:lst){\n            sum +=\
    \ x*x;\n        }\n        return (int) Math.ceil(sum);\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptvwk6l5c.java:34)\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float f : lst) {\n            sum\
    \ += Math.pow(Math.round(f), 2);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwbb6r539.java:34)\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        if (lst != null) {\n            for (float\
    \ f : lst) {\n                sum+=Math.pow(Math.ceil(f), 2);\n            }\n\
    \        }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for(Float f : lst) {\n            sum\
    \ += (float) Math.pow(f ,2);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp5_p47ia6.java:34)\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0l;\n        for (Float f : lst) {\n            sum\
    \ += f * f;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp2lfzvzo9.java:34)\n"
  stdout: ''
  timestamp: 1659977085
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        ArrayList<Long> lst2 = new ArrayList<Long>();\n        for (Float\
    \ f : lst) {\n            lst2.add(roundUpToNearestInt(f));\n        }\n     \
    \   long sum = 0;\n        for (long l : lst2) {\n            sum += l*l;\n  \
    \      }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp322zz_dq.java:26: error: cannot find symbol\n            lst2.add(roundUpToNearestInt(f));\n\
    \                     ^\n  symbol:   method roundUpToNearestInt(Float)\n  location:\
    \ class Problem\n1 error\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = lst\n                .stream()\n             \
    \   .mapToDouble(Float::doubleValue)\n                .mapToDouble(Math::ceil)\n\
    \                .mapToLong(Math::ceil)\n                .mapToLong(Math::ceil)\n\
    \                .sum();\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz4btk81e.java:27: error: cannot find symbol\n                .mapToDouble(Math::ceil)\n\
    \                ^\n  symbol:   method mapToDouble(Math::ceil)\n  location: interface\
    \ DoubleStream\n1 error\n"
  stdout: ''
  timestamp: 1659977085
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum=0;\n        for(float x:lst)\n            sum+=Math.pow(x,\
    \ 2);\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi0jt96ic.java:33)\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        float result = 0.0;\n        for (float num: lst) {\n      \
    \      result += (Math.pow(num, 2));\n        }\n        return (int) result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk4psxvad.java:24: error: incompatible types: possible lossy conversion\
    \ from double to float\n        float result = 0.0;\n                       ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToLong(x -> Math.pow(Math.pow(x, 2),\
    \ 2)).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj5fw6koh.java:24: error: incompatible types: bad return type in\
    \ lambda expression\n        return lst.stream().mapToLong(x -> Math.pow(Math.pow(x,\
    \ 2), 2)).sum();\n                                                   ^\n    possible\
    \ lossy conversion from double to long\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float f : lst) {\n            sum\
    \ += Math.round(f);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpwofi45q9.java:31)\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float n : lst) {\n            sum\
    \ += (float)Math.pow(n , 2);\n        }\n        return Math.round(sum);\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4xlj64xr.java:34)\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToDouble(Math::ceil).mapToDouble(Math::round)\n\
    \                         .mapToDouble(Math::pow).sum();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzgehrprz.java:24: error: cannot find symbol\n        return lst.stream().mapToDouble(Math::ceil).mapToDouble(Math::round)\n\
    \                                                   ^\n  symbol:   method mapToDouble(Math::round)\n\
    \  location: interface DoubleStream\n1 error\n"
  stdout: ''
  timestamp: 1659977085
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        Iterator<Float> itr = lst.iterator();\n\
    \        while (itr.hasNext()) {\n            float f = itr.next();\n        \
    \    sum += Math.pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmphouzcfiu.java:36)\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        final int size = lst.size();\n        final long sum = 0;\n\
    \        final List<Double> squares = new ArrayList<>();\n        for (int i =\
    \ 0; i < size; i++) {\n            final Double dd = lst.get(i);\n           \
    \ final float fd = (float) dd;\n            squares.add((double) Math.pow(fd,\
    \ 2));\n            sum += dd;\n        }\n        final long sum2 = Collections.sum(squares);\n\
    \        return Math.ceil(sum2);\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6fjlcp4y.java:28: error: incompatible types: Float cannot be converted\
    \ to Double\n            final Double dd = lst.get(i);\n                     \
    \                ^\n/tmp/tmp6fjlcp4y.java:29: error: incompatible types: Double\
    \ cannot be converted to float\n            final float fd = (float) dd;\n   \
    \                                  ^\n/tmp/tmp6fjlcp4y.java:31: error: cannot\
    \ assign a value to final variable sum\n            sum += dd;\n            ^\n\
    /tmp/tmp6fjlcp4y.java:33: error: cannot find symbol\n        final long sum2 =\
    \ Collections.sum(squares);\n                                     ^\n  symbol:\
    \   method sum(List<Double>)\n  location: class Collections\n/tmp/tmp6fjlcp4y.java:34:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \       return Math.ceil(sum2);\n                        ^\n5 errors\n"
  stdout: ''
  timestamp: 1659977085
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long total = 0;\n        for (Float i : lst) {\n           \
    \ total += Math.round(i * i);\n        }\n        return total;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4em62t7h.java:34)\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        float sum = 0;\n        for (float x : lst) {\n            sum\
    \ += Math.pow(Math.ceil(x), 2);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2fraxe10.java:28: error: incompatible types: possible lossy conversion\
    \ from float to long\n        return sum;\n               ^\n1 error\n"
  stdout: ''
  timestamp: 1659977085
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        int size = lst.size();\n        long sum = 0;\n        for (Float\
    \ x : lst) {\n            sum += x * (float)x;\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpau1k5yzo.java:35)\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToInt(x -> Math.round(x)).sum();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpex0oqm97.java:27)\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        if (lst.isEmpty()) {\n            return\
    \ 0;\n        }\n        List<Float> list = lst.stream().map(Float::ceil).collect(Collectors.toList());\n\
    \        Float[] a = list.toArray(new Float[list.size()]);\n        Arrays.sort(a);\n\
    \        for (float f : a) {\n            sum += (float)Math.pow(f - (float)Math.ceil(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy7i0r7nr.java:28: error: invalid method reference\n        List<Float>\
    \ list = lst.stream().map(Float::ceil).collect(Collectors.toList());\n       \
    \                                     ^\n  cannot find symbol\n    symbol:   method\
    \ ceil()\n    location: class Float\n1 error\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float f : lst) {\n            sum\
    \ += Math.pow(f.floatValue(), 2);\n        }\n        return sum;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp90bqxiii.java:34)\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        Arrays.sort(lst);\n        long sum = 0L;\n        for(Float\
    \ f : lst) {\n            sum += (int) Math.round(f*f);\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfed1qd6y.java:24: error: no suitable method found for sort(ArrayList<Float>)\n\
    \        Arrays.sort(lst);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0;\n        for(Float f : lst) {\n           \
    \ result += Math.round(f*f);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp4520czzj.java:34)\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0l;\n        for (Float f : lst)\n            sum\
    \ += Math.pow(f, 2);\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpj8_8kbhj.java:33)\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float x : lst) {\n            sum\
    \ += x * (float) x;\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpxxdgcx1y.java:34)\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0;\n        for (Float f : lst) {\n          \
    \  result += Math.round(Math.pow(Math.abs(f), 2));\n        }\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpei53h19q.java:34)\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float f : lst) {\n            sum\
    \ += (long)(Math.pow((int)f, 2));\n        }\n        return sum;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc8kdpp11.java:26: error: incompatible types: Float cannot be converted\
    \ to int\n            sum += (long)(Math.pow((int)f, 2));\n                  \
    \                      ^\n1 error\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float f : lst)\n            sum\
    \ += (long)Math.pow(Math.ceil(Math.ceil(f)), 2);\n        return sum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float f : lst) {\n            sum\
    \ += (int) Math.ceil(Math.sqrt(f));\n        }\n        return sum;\n    }\n \
    \   public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyw04of47.java:31)\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        if (lst.size() <= 0) {\n            return 0L;\n        }\n\
    \        ArrayList<Float> sq = new ArrayList<>();\n        float sum = 0f;\n \
    \       for (Float f : lst) {\n            sum += Math.pow(f.intValue(), 2); //\
    \ cast float to int first\n            sq.add((float) Math.ceil(sum));\n     \
    \   }\n        return sq.stream().mapToLong(i -> i).sum();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe17k5v0i.java:33: error: incompatible types: bad return type in\
    \ lambda expression\n        return sq.stream().mapToLong(i -> i).sum();\n   \
    \                                       ^\n    Float cannot be converted to long\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659977086
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        ArrayList<Integer> arr= new ArrayList<Integer>();\n        for\
    \ (Float val : lst) {\n            arr.add(Math.round(val.floatValue()));\n  \
    \      }\n        arr=arr.reorder();\n        float sum=0;\n        for (Integer\
    \ num : arr){\n            sum+=num;\n        }\n        return Math.round(sum*sum);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpatkyxn_3.java:28: error: cannot find symbol\n        arr=arr.reorder();\n\
    \               ^\n  symbol:   method reorder()\n  location: variable arr of type\
    \ ArrayList<Integer>\n1 error\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        List<Long> nums = lst.stream().map(Math::ceil).map(Float::intValue).toList();\n\
    \        double sumOfSquares = 0.0;\n        for (Long num : nums) {\n       \
    \     sumOfSquares += Math.pow(num, 2);\n        }\n        return sumOfSquares;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp69r72lb9.java:24: error: incompatible types: invalid method reference\n\
    \        List<Long> nums = lst.stream().map(Math::ceil).map(Float::intValue).toList();\n\
    \                                                           ^\n    method intValue\
    \ in class Float cannot be applied to given types\n      required: no arguments\n\
    \      found:    Double\n      reason: actual and formal argument lists differ\
    \ in length\n/tmp/tmp69r72lb9.java:29: error: incompatible types: possible lossy\
    \ conversion from double to long\n        return sumOfSquares;\n             \
    \  ^\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        ArrayList<Double> arr = new ArrayList<>(lst.size());\n     \
    \   for (Float f : lst) {\n            arr.add(f);\n        }\n        long sum\
    \ = 0;\n        for (Double d : arr) {\n            sum += d * d;\n        }\n\
    \        return sum;\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_rpz9ja.java:26: error: incompatible types: Float cannot be converted\
    \ to Double\n            arr.add(f);\n                    ^\nNote: Some messages\
    \ have been simplified; recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float elem : lst) {\n          \
    \  sum += Math.pow(elem, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpocog37as.java:34)\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float f : lst) {\n            sum\
    \ += Math.pow(f, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i_84u0a.java:34)\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); ++i)\
    \ {\n            sum += lst.get(i) * lst.get(i);\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpzgkgt6uu.java:34)\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.pow(Math.ceil(Math.sqrt(x)),\
    \ 2)).mapToLong(x -> x).sum();\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz1f7t_gl.java:24: error: incompatible types: bad return type in\
    \ lambda expression\n        return lst.stream().map(x -> Math.pow(Math.ceil(Math.sqrt(x)),\
    \ 2)).mapToLong(x -> x).sum();\n                                             \
    \                                             ^\n    Double cannot be converted\
    \ to long\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float f : lst) {\n            sum\
    \ += Math.pow(f, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_i_84u0a.java:34)\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long l = 0;\n        for (Float f : lst) {\n            l =\
    \ Math.ceil(f * f) + l;\n        }\n        return l;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zypcv6r.java:26: error: incompatible types: possible lossy conversion\
    \ from double to long\n            l = Math.ceil(f * f) + l;\n               \
    \                  ^\n1 error\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        if (lst.isEmpty()) return 0;\n        long sum = 0;\n      \
    \  for(float n: lst) {\n            sum += Math.pow(Math.ceil(Math.sqrt(n)), 2);\n\
    \        }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkdwfv3a_.java:32)\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long[] res = new long[1000];\n        for (float f : lst) {\n\
    \            res[(int) Math.ceil(f)] = Math.ceil(f);\n        }\n        return\
    \ Arrays.stream(lst).mapToLong(f -> res[(int) Math.ceil(f)] * res[(int) Math.ceil(f)]).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr_4mevup.java:26: error: incompatible types: possible lossy conversion\
    \ from double to long\n            res[(int) Math.ceil(f)] = Math.ceil(f);\n \
    \                                              ^\n/tmp/tmpr_4mevup.java:28: error:\
    \ no suitable method found for stream(ArrayList<Float>)\n        return Arrays.stream(lst).mapToLong(f\
    \ -> res[(int) Math.ceil(f)] * res[(int) Math.ceil(f)]).sum();\n             \
    \        ^\n    method Arrays.<T#1>stream(T#1[]) is not applicable\n      (cannot\
    \ infer type-variable(s) T#1\n        (argument mismatch; ArrayList<Float> cannot\
    \ be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int) is not\
    \ applicable\n      (cannot infer type-variable(s) T#2\n        (actual and formal\
    \ argument lists differ in length))\n    method Arrays.stream(int[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Float> cannot be converted to int[])\n  \
    \  method Arrays.stream(long[]) is not applicable\n      (argument mismatch; ArrayList<Float>\
    \ cannot be converted to long[])\n    method Arrays.stream(double[]) is not applicable\n\
    \      (argument mismatch; ArrayList<Float> cannot be converted to double[])\n\
    \  where T#1,T#2 are type-variables:\n    T#1 extends Object declared in method\
    \ <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Write your code here\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdzzn6jng.java:28)\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Write your code here\n        int sum = 0; \n        for\
    \ (int i=0; i<lst.size(); i++) {\n            sum += Math.pow(lst.get(i), 2);\n\
    \        }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn04re5_g.java:35)\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float f : lst) {\n            sum\
    \ += (int) Math.ceil(f*f);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpyqbwtp_t.java:34)\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // write your code here\n        // make sure you handle the\
    \ empty case\n        if(lst==null || lst.size()==0) {\n            return 0;\n\
    \        }\n        long sum=0;\n        for(Float f: lst) {\n            sum+=Math.pow(Math.ceil(f),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float x : lst) {\n            sum\
    \ += Math.pow(x.intValue(), 2);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqmvu24d6.java:34)\n"
  stdout: ''
  timestamp: 1659977088
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        float sum = 0;\n        for (Float num : lst) {\n          \
    \  sum += num * num;\n        }\n        return Math.round(sum * 100) / 100;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpi0m9l8cb.java:34)\n"
  stdout: ''
  timestamp: 1659977088
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        double total = 0d;\n        for (int i = 0; i < lst.size();\
    \ i++) {\n            total += Math.pow(lst.get(i), 2);\n        }\n        return\
    \ Math.ceil(total);\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpamzxuju1.java:28: error: incompatible types: possible lossy conversion\
    \ from double to long\n        return Math.ceil(total);\n                    \
    \    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        final int size = lst.getSize();\n        long sum = 0;\n   \
    \     final double scale = Math.pow(1.0d, 9.0d);\n        for (float f : lst)\
    \ {\n            sum += (int) Math.ceil(f * scale);\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmo1dtj2u.java:24: error: cannot find symbol\n        final int\
    \ size = lst.getSize();\n                            ^\n  symbol:   method getSize()\n\
    \  location: variable lst of type ArrayList<Float>\n1 error\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long[] vals = lst.stream().mapToLong(Math::roundToIntExact).toArray();\n\
    \        long sumOfSquares = 0;\n        for (long i : vals) {\n            sumOfSquares\
    \ += i * i;\n        }\n        return sumOfSquares;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpumuonzxl.java:24: error: invalid method reference\n        long[]\
    \ vals = lst.stream().mapToLong(Math::roundToIntExact).toArray();\n          \
    \                                   ^\n  cannot find symbol\n    symbol:   method\
    \ roundToIntExact(T)\n    location: class Math\n  where T is a type-variable:\n\
    \    T extends Object declared in interface Stream\n1 error\n"
  stdout: ''
  timestamp: 1659977087
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        final int upper = Integer.MAX_VALUE;\n        final List<Long>\
    \ result = lst.stream()\n                .map(f -> Math.round(f*f*f*f*f*f*f*f*f*f*f*f)+f)\n\
    \                .collect(Collectors.toList());\n        return result.removeIf(f->f<upper)?0:(long)result.stream().reduce(Math::multiplyExact).orElse(0);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp64tdcb76.java:27: error: incompatible types: inference variable\
    \ T has incompatible bounds\n                .collect(Collectors.toList());\n\
    \                        ^\n    equality constraints: Long\n    lower bounds:\
    \ Float\n  where T is a type-variable:\n    T extends Object declared in method\
    \ <T>toList()\n/tmp/tmp64tdcb76.java:28: error: incompatible types: int cannot\
    \ be converted to Long\n        return result.removeIf(f->f<upper)?0:(long)result.stream().reduce(Math::multiplyExact).orElse(0);\n\
    \                                                                            \
    \                          ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977088
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float f : lst) {\n            sum\
    \ += (long) Math.pow(f, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpetehnlzq.java:34)\n"
  stdout: ''
  timestamp: 1659977084
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        ArrayList<Integer> rounded = new ArrayList<>(lst.size());\n\
    \        for(Float f : lst) {\n            rounded.add(Math.ceil(Math.round(f)));\n\
    \        }\n        \n        long sum = 0;\n        for(Integer i : rounded)\
    \ {\n            sum += i*i;\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqw7x19_s.java:26: error: incompatible types: double cannot be converted\
    \ to Integer\n            rounded.add(Math.ceil(Math.round(f)));\n           \
    \                      ^\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977088
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float f : lst) {\n            sum\
    \ += Math.pow(f, 2);\n        }\n        return Math.round(sum);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpz6s97i28.java:34)\n"
  stdout: ''
  timestamp: 1659977088
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = lst.get(0) * lst.get(0) + lst.get(1) * lst.get(1)\
    \ + lst.get(2) * lst.get(2);\n        for (int i = 3; i < lst.size(); i += 2)\
    \ {\n            sum -= lst.get(i) * lst.get(i) - lst.get(i - 1) * lst.get(i -\
    \ 1);\n        }\n        float last = (float)Math.ceil(lst.get((lst.size() -\
    \ 1) / 2));\n        return sum * sum / last - lst.get((lst.size() - 1) / 2);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjq79s8nc.java:24: error: incompatible types: possible lossy conversion\
    \ from float to long\n        long sum = lst.get(0) * lst.get(0) + lst.get(1)\
    \ * lst.get(1) + lst.get(2) * lst.get(2);\n                                  \
    \                                   ^\n/tmp/tmpjq79s8nc.java:29: error: incompatible\
    \ types: possible lossy conversion from float to long\n        return sum * sum\
    \ / last - lst.get((lst.size() - 1) / 2);\n                                ^\n\
    2 errors\n"
  stdout: ''
  timestamp: 1659977088
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // your code\n        long sum = 0;\n        for (Float f :\
    \ lst) {\n            sum += Math.round(Math.ceil(f));\n        }\n        return\
    \ sum * sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp35qesio6.java:32)\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // The sum of squares is equal to sum of numbers multiplied\
    \ by their squares.\n        // The trick here is that we use the double value\
    \ returned by the Math.sqrt() method,\n        // then cast that to an int, and\
    \ finally use that value to multiply by our actual list\n        // of numbers\
    \ and then sum them all together with .longValue()\n        return lst.stream().mapToDouble(x\
    \ -> Math.sqrt(x.doubleValue())).map(x -> x * x).sum().longValue();\n    }\n \
    \   public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_n6eji5s.java:28: error: double cannot be dereferenced\n      \
    \  return lst.stream().mapToDouble(x -> Math.sqrt(x.doubleValue())).map(x -> x\
    \ * x).sum().longValue();\n                                                  \
    \                                            ^\n1 error\n"
  stdout: ''
  timestamp: 1659977088
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float n : lst) {\n            sum\
    \ += Math.pow(n, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw97j3foe.java:34)\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0.0;\n        for (Float f : lst) {\n        \
    \    result += f * f;\n        }\n        return (int) Math.ceil(result + .5);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkphacpsm.java:24: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long result = 0.0;\n                      ^\n1\
    \ error\n"
  stdout: ''
  timestamp: 1659977088
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToDouble(f -> Math.pow(f, 2)).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ucp4woy.java:24: error: incompatible types: possible lossy conversion\
    \ from double to long\n        return lst.stream().mapToDouble(f -> Math.pow(f,\
    \ 2)).sum();\n                                                               \
    \ ^\n1 error\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long res = 0;\n        for (Float f : lst) {\n            res\
    \ += Math.pow(Math.ceil(f), 2);\n        }\n        return res;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977089
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst\n                .stream()\n                .map(Math::ceil)\n\
    \                .map(Math::round)\n                .mapToLong(x -> x * x)\n \
    \               .sum();\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float num : lst) {\n           \
    \ sum += num.floatValue() * num.floatValue();\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfexhd7u7.java:34)\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long ret = 0;\n        for(int i = 0; i < lst.size(); i++) {\n\
    \            ret = ret + lst.get(i) * lst.get(i);\n        }\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpftl8bw9g.java:26: error: incompatible types: possible lossy conversion\
    \ from float to long\n            ret = ret + lst.get(i) * lst.get(i);\n     \
    \                 ^\n1 error\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your solution here!\n        Long sum = 0l;\n        for(Float\
    \ f : lst) {\n            sum += Math.pow(f, 2);\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4u6uwwsa.java:27: error: incompatible types: double cannot be converted\
    \ to Long\n            sum += Math.pow(f, 2);\n                           ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        double sum = 0;\n        for (Float f : lst) {\n           \
    \ sum += Math.pow(Math.ceil(f), 2);\n        }\n        return Math.round(sum\
    \ * 100) / 100;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for(float x : lst) {\n            sum\
    \ += Math.pow(x, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpcs5e6s6r.java:34)\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0L;\n\n        // get list of numbers\n      \
    \  ArrayList<Float> numbers = lst;\n\n        // iterate through the list\n  \
    \      for (Float number: numbers) {\n            // compute the sum of squared\
    \ numbers\n            result += number.floatValue() * number.floatValue();\n\
    \        }\n\n        // round result to nearest int\n        result = Math.round(result);\n\
    \n        // return result rounded to nearest int\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp0x4cebnv.java:45)\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code here\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjahqiun7.java:25: error: missing return statement\n    }\n    ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        Arrays.sort(lst);\n        long ret = 0;\n        for (Float\
    \ f : lst) {\n            ret = Math.pow(ret, 2);\n            ret = Math.ceil(ret);\n\
    \        }\n        return ret;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj8q8cri3.java:24: error: no suitable method found for sort(ArrayList<Float>)\n\
    \        Arrays.sort(lst);\n              ^\n    method Arrays.sort(int[]) is\
    \ not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to int[])\n    method Arrays.sort(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to long[])\n    method Arrays.sort(short[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to short[])\n    method Arrays.sort(char[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to char[])\n    method Arrays.sort(byte[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to byte[])\n    method Arrays.sort(float[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to float[])\n    method Arrays.sort(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to double[])\n    method Arrays.sort(Object[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to Object[])\n    method Arrays.<T#1>sort(T#1[],Comparator<?\
    \ super T#1>) is not applicable\n      (cannot infer type-variable(s) T#1\n  \
    \      (actual and formal argument lists differ in length))\n    method Arrays.<T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>) is not applicable\n      (cannot infer type-variable(s) T#2\n  \
    \      (actual and formal argument lists differ in length))\n  where T#1,T#2 are\
    \ type-variables:\n    T#1 extends Object declared in method <T#1>sort(T#1[],Comparator<?\
    \ super T#1>)\n    T#2 extends Object declared in method <T#2>sort(T#2[],int,int,Comparator<?\
    \ super T#2>)\n/tmp/tmpj8q8cri3.java:27: error: incompatible types: possible lossy\
    \ conversion from double to long\n            ret = Math.pow(ret, 2);\n      \
    \                    ^\n/tmp/tmpj8q8cri3.java:28: error: incompatible types: possible\
    \ lossy conversion from double to long\n            ret = Math.ceil(ret);\n  \
    \                         ^\nNote: Some messages have b"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float f : lst) {\n            sum\
    \ = sum + Math.pow(Math.ceil(f), 2);\n        }\n        return sum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpykeze6fn.java:26: error: incompatible types: possible lossy conversion\
    \ from double to long\n            sum = sum + Math.pow(Math.ceil(f), 2);\n  \
    \                    ^\n1 error\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long ret = 0;\n        for(float f : lst) {\n            ret\
    \ = ret + Math.pow(f, 2);\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_djrm4ca.java:26: error: incompatible types: possible lossy conversion\
    \ from double to long\n            ret = ret + Math.pow(f, 2);\n             \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(Math::ceil).map(Math::ceil)\n      \
    \      .map(Math::ceil).map(Math::ceil)\n            .map(Math::ceil).map(Math::ceil)\n\
    \            .mapToLong(Function.identity())\n            .sum();\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgpi0s8l9.java:27: error: cannot find symbol\n            .mapToLong(Function.identity())\n\
    \                       ^\n  symbol:   variable Function\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float number : lst) {\n        \
    \    sum += Math.pow(number, 2);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplekv8wwt.java:34)\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        final long result = lst.reduce(Math::roundToInt);\n        return\
    \ result * result;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ozerqx1.java:24: error: invalid method reference\n        final\
    \ long result = lst.reduce(Math::roundToInt);\n                              \
    \         ^\n  cannot find symbol\n    symbol:   method roundToInt()\n    location:\
    \ class Math\n1 error\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = Long.MIN_VALUE;\n        for (Float f : lst) {\n\
    \            result += (long) Math.pow(f, 2);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_0jx1rzo.java:31)\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long total = 0;\n        long squareSum = 0;\n        // Sum\
    \ up\n        for(float f : lst) {\n            total += Math.round(f*f);\n  \
    \          squareSum += f*f;\n        }\n        // Round down\n        for(float\
    \ f : lst) {\n            total -= Math.round(f*f);\n            squareSum -=\
    \ f*f;\n        }\n        // Square root and multiply by two\n        total +=\
    \ Math.sqrt(squareSum);\n        total *= 2;\n        return total;\n    }\n \
    \   public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpk4e_g60l.java:42)\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float i : lst) {\n            sum\
    \ += i * i;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkk2vhfyz.java:34)\n"
  stdout: ''
  timestamp: 1659977090
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0.0;\n        for (Float f : lst) {\n           \
    \ sum += Math.pow(f, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj7iqw21h.java:24: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long sum = 0.0;\n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        ArrayList<Integer> lstI = Arrays.stream(lst).map(Float::intValue).collect(Collectors.toCollection(ArrayList::new));\n\
    \        ArrayList<Integer> result = new ArrayList<>();\n        for (int i =\
    \ 0; i < lstI.size(); i++) {\n            int element = lstI.get(i);\n       \
    \     int lastElement = lstI.get(lstI.size()-1);\n            result.add(Math.pow(element,\
    \ 2) + Math.pow(lastElement, 2));\n        }\n        return result.stream().mapToLong(Integer::intValue).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxt8vdod8.java:24: error: no suitable method found for stream(ArrayList<Float>)\n\
    \        ArrayList<Integer> lstI = Arrays.stream(lst).map(Float::intValue).collect(Collectors.toCollection(ArrayList::new));\n\
    \                                        ^\n    method Arrays.<T#1>stream(T#1[])\
    \ is not applicable\n      (cannot infer type-variable(s) T#1\n        (argument\
    \ mismatch; ArrayList<Float> cannot be converted to T#1[]))\n    method Arrays.<T#2>stream(T#2[],int,int)\
    \ is not applicable\n      (cannot infer type-variable(s) T#2\n        (actual\
    \ and formal argument lists differ in length))\n    method Arrays.stream(int[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to int[])\n    method Arrays.stream(long[]) is not applicable\n      (argument\
    \ mismatch; ArrayList<Float> cannot be converted to long[])\n    method Arrays.stream(double[])\
    \ is not applicable\n      (argument mismatch; ArrayList<Float> cannot be converted\
    \ to double[])\n  where T#1,T#2 are type-variables:\n    T#1 extends Object declared\
    \ in method <T#1>stream(T#1[])\n    T#2 extends Object declared in method <T#2>stream(T#2[],int,int)\n\
    /tmp/tmpxt8vdod8.java:29: error: incompatible types: double cannot be converted\
    \ to Integer\n            result.add(Math.pow(element, 2) + Math.pow(lastElement,\
    \ 2));\n                                            ^\nNote: Some messages have\
    \ been simplified; recompile with -Xdiags:verbose to get full output\n2 errors\n"
  stdout: ''
  timestamp: 1659977090
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0;\n        float[] arr = new float[(int) lst.size()];\n\
    \        lst.stream().map(Math::ceil).forEach(i -> arr[i/2]=i);\n        for (int\
    \ i=0; i<arr.length; i++) result += arr[i]*arr[i];\n        return result;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3o5s2_6.java:26: error: incompatible types: possible lossy conversion\
    \ from double to int\n        lst.stream().map(Math::ceil).forEach(i -> arr[i/2]=i);\n\
    \                                                       ^\n/tmp/tmpf3o5s2_6.java:26:\
    \ error: incompatible types: Double cannot be converted to float\n        lst.stream().map(Math::ceil).forEach(i\
    \ -> arr[i/2]=i);\n                                                          \
    \ ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977090
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float f : lst) {\n            float\
    \ upper = Math.ceil(f);\n            sum += upper * upper;\n        }\n      \
    \  return sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpduqbk6kq.java:26: error: incompatible types: possible lossy conversion\
    \ from double to float\n            float upper = Math.ceil(f);\n            \
    \                       ^\n1 error\n"
  stdout: ''
  timestamp: 1659977090
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long ret = 0l;\n        for(Float f : lst) {\n            ret\
    \ = Math.round(f*f+ret);\n        }\n        return ret;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1ibgzgai.java:34)\n"
  stdout: ''
  timestamp: 1659977090
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0L;\n        for (Float f : lst) {\n         \
    \   result = Math.round((f * f) + 0.5f);\n        }\n        return result;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpuwt52wiz.java:31)\n"
  stdout: ''
  timestamp: 1659977090
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Use Streams\n        return lst.stream().map(Math::roundToInt).map(Math::pow).reduce(Math::addExact)\n\
    \                .map(Math::sqr).map(Math::ceil).sum();\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmmzhqots.java:25: error: invalid method reference\n        return\
    \ lst.stream().map(Math::roundToInt).map(Math::pow).reduce(Math::addExact)\n \
    \                               ^\n  cannot find symbol\n    symbol:   method\
    \ roundToInt()\n    location: class Math\n/tmp/tmpmmzhqots.java:26: error: invalid\
    \ method reference\n                .map(Math::sqr).map(Math::ceil).sum();\n \
    \                    ^\n  cannot find symbol\n    symbol:   method sqr()\n   \
    \ location: class Math\n2 errors\n"
  stdout: ''
  timestamp: 1659977090
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long res = 0;\n        for (float f : lst) {\n            res\
    \ = res + Math.pow(f, 2);\n        }\n        return res;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq7q58eqt.java:26: error: incompatible types: possible lossy conversion\
    \ from double to long\n            res = res + Math.pow(f, 2);\n             \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659977090
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (int i : lst)\n            sum +=\
    \ i * i;\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2fxznm25.java:25: error: incompatible types: Float cannot be converted\
    \ to int\n        for (int i : lst)\n                     ^\n1 error\n"
  stdout: ''
  timestamp: 1659977090
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // write your code in Java 7\n        long sum = 0.0;\n    \
    \    int i = lst.size();\n        while(--i >= 0) {\n            float f = lst.get(i);\n\
    \            sum += f * f;\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplwtxn3as.java:25: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long sum = 0.0;\n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659977090
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        final int size = lst.size();\n      \
    \  for (int i = 0; i < size; i++) {\n            sum += lst.get(i) * (lst.get(i));\n\
    \        }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpurxittlv.java:35)\n"
  stdout: ''
  timestamp: 1659977090
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        int cnt=0;\n        for(Float f : lst) {\n            cnt+=(int)Math.ceil(Math.pow(Math.abs(f),\
    \ 2));\n        }\n        return cnt;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp_vnf4dp4.java:34)\n"
  stdout: ''
  timestamp: 1659977091
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (int i=0; i<lst.size(); i++){\n \
    \           sum += Math.pow(lst.get(i), 2);\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpa_o2337g.java:34)\n"
  stdout: ''
  timestamp: 1659977091
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        double sum = 0;\n        for (Float f : lst)\n            sum\
    \ += Math.pow(Math.ceil(f), 2);\n        return Math.round(sum);\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977091
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Solution here\n        return 0;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp6qp24n4p.java:28)\n"
  stdout: ''
  timestamp: 1659977091
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0.0;\n        for (Float val : lst) {\n      \
    \      result = result + ((long) Math.pow(val, 2));\n        }\n        return\
    \ Math.Ceiling(result);\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpseormfaj.java:24: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long result = 0.0;\n                      ^\n/tmp/tmpseormfaj.java:28:\
    \ error: cannot find symbol\n        return Math.Ceiling(result);\n          \
    \         ^\n  symbol:   method Ceiling(long)\n  location: class Math\n2 errors\n"
  stdout: ''
  timestamp: 1659977091
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(Float::ceil).mapToLong(Float::intValue).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp80i3hcmq.java:24: error: invalid method reference\n        return\
    \ lst.stream().map(Float::ceil).mapToLong(Float::intValue).sum();\n          \
    \                      ^\n  cannot find symbol\n    symbol:   method ceil()\n\
    \    location: class Float\n1 error\n"
  stdout: ''
  timestamp: 1659977091
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code here\n        float sum = 0;\n        for (float\
    \ num : lst)\n            sum += (float)(Math.pow(num, 2));\n        return Math.round(sum\
    \ * 1000) / 1000;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptu2lpxeo.java:34)\n"
  stdout: ''
  timestamp: 1659977091
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0.0;\n        for (Float f : lst) {\n           \
    \ sum += (int) Math.pow(Math.round(f), 2);\n        }\n        return sum;\n \
    \   }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqfayko6q.java:24: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long sum = 0.0;\n                   ^\n1 error\n"
  stdout: ''
  timestamp: 1659977091
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(x -> Math.ceil(x * x)).collect(Collectors.toList()).stream().mapToLong(x\
    \ -> x * x).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7t_zzeei.java:24: error: incompatible types: bad return type in\
    \ lambda expression\n        return lst.stream().map(x -> Math.ceil(x * x)).collect(Collectors.toList()).stream().mapToLong(x\
    \ -> x * x).sum();\n                                                         \
    \                                                     ^\n    possible lossy conversion\
    \ from double to long\nNote: Some messages have been simplified; recompile with\
    \ -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977091
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        if (lst.isEmpty()) {\n            return 0;\n        }\n   \
    \     long sum = 0;\n        for (Float f : lst) {\n            sum += f * f;\n\
    \        }\n        return (int) (Math.ceil(sum));\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmppw9au2pu.java:37)\n"
  stdout: ''
  timestamp: 1659977091
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float i : lst) {\n            sum\
    \ += Math.pow(i, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpdoi6372j.java:34)\n"
  stdout: ''
  timestamp: 1659977091
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        Iterator<Float> iterator = lst.iterator();\n\
    \        while(iterator.hasNext()) {\n            sum += Math.pow(iterator.next(),\
    \ 2);\n        }\n        return Math.ceil(sum);\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgvbb1cnd.java:29: error: incompatible types: possible lossy conversion\
    \ from double to long\n        return Math.ceil(sum);\n                      \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1659977091
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            double x = lst.get(i);\n            double round = Math.ceil(x);\n\
    \            sum+=round*round;\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977091
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float num : lst) {\n           \
    \ sum += num.floatValue() * num.floatValue();\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfexhd7u7.java:34)\n"
  stdout: ''
  timestamp: 1659977089
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float f : lst) {\n            sum\
    \ = sum + Math.pow(f, 2);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2sun2vr7.java:26: error: incompatible types: possible lossy conversion\
    \ from double to long\n            sum = sum + Math.pow(f, 2);\n             \
    \         ^\n1 error\n"
  stdout: ''
  timestamp: 1659977091
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long total = 0;\n        for (float x : lst) {\n           \
    \ total += Math.pow(x, 2);\n        }\n        return Math.round(total);\n   \
    \ }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpgq4fum55.java:34)\n"
  stdout: ''
  timestamp: 1659977091
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0l;\n        for (Float f : lst) {\n         \
    \   result += Math.pow(f, 2);\n        }\n        return result;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpto6ehc_0.java:34)\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        ArrayList<Double> arr = new ArrayList<Double>();\n        arr.add(lst.get(0));\n\
    \        for (int i = 0; i < lst.size() - 1; i++) {\n            arr.add(lst.get(i)\
    \ * lst.get(i));\n        }\n        return arr.stream().mapToLong(Float::doubleValue).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1k8nd481.java:25: error: incompatible types: Float cannot be converted\
    \ to Double\n        arr.add(lst.get(0));\n                       ^\n/tmp/tmp1k8nd481.java:27:\
    \ error: incompatible types: float cannot be converted to Double\n           \
    \ arr.add(lst.get(i) * lst.get(i));\n                               ^\n/tmp/tmp1k8nd481.java:29:\
    \ error: incompatible types: invalid method reference\n        return arr.stream().mapToLong(Float::doubleValue).sum();\n\
    \                                      ^\n    method doubleValue in class Float\
    \ cannot be applied to given types\n      required: no arguments\n      found:\
    \    Double\n      reason: actual and formal argument lists differ in length\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n3 errors\n"
  stdout: ''
  timestamp: 1659977091
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long total = 0;\n        for(Float f : lst) {\n            total\
    \ = total+Math.round(f*f);\n        }\n        return total;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmps2k7h2w6.java:34)\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float f : lst) {\n            sum\
    \ += Math.round(f);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpfvsih8wx.java:31)\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long s = 0;\n        for (float f : lst) {\n            s +=\
    \ (int) Math.pow(f, 2);\n        }\n        return s;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpaarj_olo.java:34)\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(Math::roundToInt).mapToInt(Integer::intValue).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3vkl6hdv.java:24: error: invalid method reference\n        return\
    \ lst.stream().map(Math::roundToInt).mapToInt(Integer::intValue).sum();\n    \
    \                            ^\n  cannot find symbol\n    symbol:   method roundToInt()\n\
    \    location: class Math\n1 error\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Solution goes here\n        return 0;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7qouvkst.java:28)\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream()\n            .mapToInt(x -> Math.round(x*x))\n\
    \            .sum();\n    }\n    public static void main(String[] args) {\n  \
    \  assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpquo7fqem.java:32)\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0.0f;\n        for(int i : lst) {\n          \
    \  result+=i*i;\n        }\n        return result;\n    }\n    public static void\
    \ main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprxpd8jiy.java:24: error: incompatible types: possible lossy conversion\
    \ from float to long\n        long result = 0.0f;\n                      ^\n/tmp/tmprxpd8jiy.java:25:\
    \ error: incompatible types: Float cannot be converted to int\n        for(int\
    \ i : lst) {\n                    ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        float square;\n        \n        for\
    \ (float element : lst) {\n            square = element * element;\n         \
    \   sum += square;\n        }\n        \n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpqfpk0q3d.java:38)\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        long n = lst.size();\n        for (Float\
    \ f : lst) {\n            sum += (long)Math.pow(Math.ceil(f), 2);\n        }\n\
    \        \n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        double sum = 0;\n        List<Float> copyLst = lst.stream().sorted(Comparator.comparing(x\
    \ -> Math.ceil(x)).thenComparing(x -> x)).collect(toList());\n        for (Float\
    \ f : copyLst) {\n            sum += Math.pow(f, 2);\n        }\n        return\
    \ (long) sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsnwc7bbe.java:25: error: incompatible types: Object cannot be converted\
    \ to double\n        List<Float> copyLst = lst.stream().sorted(Comparator.comparing(x\
    \ -> Math.ceil(x)).thenComparing(x -> x)).collect(toList());\n               \
    \                                                                       ^\n/tmp/tmpsnwc7bbe.java:25:\
    \ error: incompatible types: inference variable U has incompatible bounds\n  \
    \      List<Float> copyLst = lst.stream().sorted(Comparator.comparing(x -> Math.ceil(x)).thenComparing(x\
    \ -> x)).collect(toList());\n                                                \
    \                                                       ^\n    lower bounds: Comparable<?\
    \ super U>\n    lower bounds: Object\n  where U,T are type-variables:\n    U extends\
    \ Comparable<? super U> declared in method <U>thenComparing(Function<? super T,?\
    \ extends U>)\n    T extends Object declared in interface Comparator\n/tmp/tmpsnwc7bbe.java:25:\
    \ error: cannot find symbol\n        List<Float> copyLst = lst.stream().sorted(Comparator.comparing(x\
    \ -> Math.ceil(x)).thenComparing(x -> x)).collect(toList());\n               \
    \                                                                            \
    \                              ^\n  symbol:   method toList()\n  location: class\
    \ Problem\nNote: Some messages have been simplified; recompile with -Xdiags:verbose\
    \ to get full output\n3 errors\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        float sum=0;\n        for (Float num : lst) {\n            sum\
    \ += num*num;\n        }\n        return Math.round(Math.ceil(sum));\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7m_v9co4.java:34)\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // write your code here\n        // use for loop\n        float\
    \ sum=0;\n        for (int i=0;i<lst.size();i++){\n          sum+=lst.get(i);\n\
    \        }\n        long ret=Math.ceil(sum)*Math.ceil(sum);\n        return ret;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp45r4jk7i.java:30: error: incompatible types: possible lossy conversion\
    \ from double to long\n        long ret=Math.ceil(sum)*Math.ceil(sum);\n     \
    \                          ^\n1 error\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long lSum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            lSum += Math.pow(lst.get(i), 2);\n        }\n        return lSum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp1v9oej9l.java:34)\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            sum += (int) Math.pow(lst.get(i), 2);\n        }\n        return\
    \ sum;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp9kgbd784.java:34)\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        int sum = 0;\n        for(Float f : lst){\n            sum +=\
    \ (int) Math.ceil(f*f);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpt4nlwu8n.java:34)\n"
  stdout: ''
  timestamp: 1659977093
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float elem : lst) {\n          \
    \  sum += (float)(Math.pow(Math.ceil(elem), 2));\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977093
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for(Float f : lst)\n            sum +=\
    \ Math.pow(f, 2);\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpw6ejs3yl.java:33)\n"
  stdout: ''
  timestamp: 1659977093
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        if (lst.isEmpty()) {\n            return 0;\n        }\n   \
    \     Float first = lst.stream().findFirst().get();\n        Float last = lst.stream().findLast().get();\n\
    \        double num = (double) Math.ceil(Math.pow(first - last, 2));\n       \
    \ return num;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiuetxd8a.java:28: error: cannot find symbol\n        Float last\
    \ = lst.stream().findLast().get();\n                                 ^\n  symbol:\
    \   method findLast()\n  location: interface Stream<Float>\n/tmp/tmpiuetxd8a.java:30:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \       return num;\n               ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977092
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long total = 0;\n        long i = 0;\n        for (float f :\
    \ lst) {\n            float ceiling = Math.ceil(f);\n            float floor =\
    \ Math.floor(f);\n            float sum = Math.pow(floor, 2);\n            total\
    \ += sum;\n        }\n        return total;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphm1fj_ez.java:27: error: incompatible types: possible lossy conversion\
    \ from double to float\n            float ceiling = Math.ceil(f);\n          \
    \                           ^\n/tmp/tmphm1fj_ez.java:28: error: incompatible types:\
    \ possible lossy conversion from double to float\n            float floor = Math.floor(f);\n\
    \                                    ^\n/tmp/tmphm1fj_ez.java:29: error: incompatible\
    \ types: possible lossy conversion from double to float\n            float sum\
    \ = Math.pow(floor, 2);\n                                ^\n3 errors\n"
  stdout: ''
  timestamp: 1659977093
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream()\n                 .map(Math::ceil)\n   \
    \              .mapToDouble(Float::doubleValue)\n                 .sum();\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ho7w44j.java:26: error: incompatible types: invalid method reference\n\
    \                 .mapToDouble(Float::doubleValue)\n                         \
    \     ^\n    method doubleValue in class Float cannot be applied to given types\n\
    \      required: no arguments\n      found:    Double\n      reason: actual and\
    \ formal argument lists differ in length\nNote: Some messages have been simplified;\
    \ recompile with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977093
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        ArrayList<Double> sq = lst.stream()\n                .mapToDouble(x\
    \ -> x * x)\n                .boxed()\n                .collect(Collectors.toCollection(ArrayList::new));\n\
    \        return sq.stream().mapToLong(x -> Math.round(x)).sum();\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp7cov4hjb.java:34)\n"
  stdout: ''
  timestamp: 1659977093
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for(float n: lst)\n            sum +=\
    \ n * n;\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkcv7prmv.java:33)\n"
  stdout: ''
  timestamp: 1659977093
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        List<Float> lst2 = lst.stream().map(Math::ceil).collect(Collectors.toList());\n\
    \        long result = lst2.stream().mapToDouble(x -> x * x).sum();\n        return\
    \ result;\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgtrhpozk.java:24: error: incompatible types: inference variable\
    \ T has incompatible bounds\n        List<Float> lst2 = lst.stream().map(Math::ceil).collect(Collectors.toList());\n\
    \                                                               ^\n    equality\
    \ constraints: Float\n    lower bounds: Double\n  where T is a type-variable:\n\
    \    T extends Object declared in method <T>toList()\n/tmp/tmpgtrhpozk.java:25:\
    \ error: incompatible types: possible lossy conversion from double to long\n \
    \       long result = lst2.stream().mapToDouble(x -> x * x).sum();\n         \
    \                                                      ^\n2 errors\n"
  stdout: ''
  timestamp: 1659977093
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (Float x : lst) {\n            sum\
    \ += Math.pow(Math.round(x), 2);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmplhxgw9oa.java:34)\n"
  stdout: ''
  timestamp: 1659977093
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        int length = lst.size();\n        long sum = 0;\n        float\
    \ current;\n        for (float f : lst) {\n            current = Math.ceil(f);\n\
    \            sum += current * current;\n        }\n        return sum;\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph8g9e1vq.java:28: error: incompatible types: possible lossy conversion\
    \ from double to float\n            current = Math.ceil(f);\n                \
    \               ^\n1 error\n"
  stdout: ''
  timestamp: 1659977093
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long ret = 0;\n        for(Float f : lst) {\n            ret\
    \ += Math.round(Math.ceil(Math.sqrt(f)));\n        }\n        return ret;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpavz0o989.java:31)\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0;\n        for(Float f : lst)\n            result\
    \ += Math.pow(Math.ceil(f), 2);\n        return result;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for(Float x : lst) {\n            sum\
    \ += Math.round(x * x);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpo1lq1h5y.java:34)\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().map(Math::ceil).map(Math::round).mapToLong(Math::pow).sum();\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsbcr74z7.java:24: error: incompatible types: invalid method reference\n\
    \        return lst.stream().map(Math::ceil).map(Math::round).mapToLong(Math::pow).sum();\n\
    \                                                                       ^\n  \
    \  method pow in class Math cannot be applied to given types\n      required:\
    \ double,double\n      found:    Long\n      reason: actual and formal argument\
    \ lists differ in length\nNote: Some messages have been simplified; recompile\
    \ with -Xdiags:verbose to get full output\n1 error\n"
  stdout: ''
  timestamp: 1659977093
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Return the sum of squared numbers in the given array list.\n\
    \        long sum = 0;\n        for (Float n : lst) {\n            sum += n *\
    \ n;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpg2__eho0.java:35)\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        int sz = lst.size();\n        long total = 0;\n        for (int\
    \ i = 0; i < sz; i++) {\n            Float f = lst.get(i);\n            double\
    \ d = Math.round(f);\n            total += Math.round(d * d);\n        }\n   \
    \     return total;\n    }\n    public static void main(String[] args) {\n   \
    \ assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmptk3kg_r8.java:37)\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // write your code here\n        long sum = 0;\n        for\
    \ (int i = 0; i < lst.size(); ++i) {\n            sum += lst.get(i);\n       \
    \ }\n        return sum;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmp73ujsq7n.java:32)\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        int length = lst.size();\n        if (length <= 0) {\n     \
    \       return 0L;\n        }\n        long ans = 0L;\n        float sum = 0F;\n\
    \        for (float x : lst) {\n            sum += x;\n        }\n        for\
    \ (float x : lst) {\n            ans += Math.pow(sum, 2);\n        }\n       \
    \ return Math.ceil(ans);\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp06s453bq.java:36: error: incompatible types: possible lossy conversion\
    \ from double to long\n        return Math.ceil(ans);\n                      \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        ArrayList<Long> lst2 = new ArrayList<>();\n        for (Float\
    \ f : lst) {\n            long res = (int) Math.ceil(f * f);\n            lst2.add(res);\n\
    \        }\n        long sum = 0;\n        for (long i : lst2) {\n           \
    \ sum += i;\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpn1s5ejsl.java:39)\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0L;\n        for (float x : lst) {\n            sum\
    \ += Math.round(x * x) + x;\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpvood08ii.java:31)\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        List<Float> copy = lst.stream().map(Float::ceil).collect(Collectors.toList());\n\
    \        copy.stream().forEach(a -> sum+=Math.pow(a,2));\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkybeo03n.java:25: error: invalid method reference\n        List<Float>\
    \ copy = lst.stream().map(Float::ceil).collect(Collectors.toList());\n       \
    \                                     ^\n  cannot find symbol\n    symbol:   method\
    \ ceil()\n    location: class Float\n1 error\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        return lst.stream().mapToInt(x -> Math.round(x)).mapToDouble(x\
    \ -> x * x).sum();\n    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp467cueql.java:24: error: incompatible types: possible lossy conversion\
    \ from double to long\n        return lst.stream().mapToInt(x -> Math.round(x)).mapToDouble(x\
    \ -> x * x).sum();\n                                                         \
    \                           ^\n1 error\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long res = 0;\n        for (int i = 0; i < lst.size(); i++)\n\
    \            res += lst.get(i)*lst.get(i);\n        return Math.ceil(res);\n \
    \   }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphg57stgv.java:27: error: incompatible types: possible lossy conversion\
    \ from double to long\n        return Math.ceil(res);\n                      \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long result = 0;\n        for (int i = 0; i < lst.size(); i++)\
    \ {\n            result += lst.get(i);\n        }\n        return result;\n  \
    \  }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpkskhim9r.java:31)\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for(int i = 0; i != lst.size(); i++)\
    \ {\n            sum += lst.get(i)*lst.get(i);\n        }\n        return sum;\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpam5dmy7_.java:34)\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        Set<Float> set = new HashSet<>();\n        for (Float i : lst)\
    \ {\n            set.add(Math.ceil(i));\n        }\n        long result = 0;\n\
    \        for (Float f : lst) {\n            result += Math.pow(f, 2);\n      \
    \  }\n        result += set.stream().mapToDouble(Float::doubleValue).sum();\n\
    \        return result;\n    }\n    public static void main(String[] args) {\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkjy2o2de.java:26: error: incompatible types: double cannot be converted\
    \ to Float\n            set.add(Math.ceil(i));\n                             ^\n\
    Note: Some messages have been simplified; recompile with -Xdiags:verbose to get\
    \ full output\n1 error\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float f: lst) {\n            sum\
    \ += Math.pow(Math.ceil(f), 2);\n        }\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        double sum = 0;\n        for (float f : lst) {\n           \
    \ sum += Math.pow(f , 2);\n        }\n        return Math.round(sum);\n    }\n\
    \    public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpszlv6vf_.java:34)\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 0
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        int sum = 0;\n        for (int i = 0; i < lst.size(); i++) {\n\
    \            float f = lst.get(i);\n            sum += (int) (Math.ceil(f) * Math.ceil(f));\n\
    \        }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Write your code here\n        long res = 0;\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n            float temp = (float)Math.ceil(lst.get(i));\n\
    \            res = res + temp*temp;\n        }\n        return res;\n    }\n \
    \   public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb_pgja12.java:28: error: incompatible types: possible lossy conversion\
    \ from float to long\n            res = res + temp*temp;\n                   \
    \   ^\n1 error\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        List<Float> lst2 = new ArrayList<>();\n        long sum = 0;\n\
    \        for(float x : lst) {\n            lst2.add(FloatMath.ceil(x));\n    \
    \    }\n        for(float x : lst2) {\n            sum += Math.pow(x,2);\n   \
    \     }\n        return sum;\n    }\n    public static void main(String[] args)\
    \ {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f,\
    \ (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqx0wdxeg.java:27: error: cannot find symbol\n            lst2.add(FloatMath.ceil(x));\n\
    \                     ^\n  symbol:   variable FloatMath\n  location: class Problem\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for(Float f : lst) {\n            sum\
    \ += Math.pow(f.floatValue(), 2);\n        }\n        return sum;\n    }\n   \
    \ public static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpspj_ghst.java:34)\n"
  stdout: ''
  timestamp: 1659977095
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        if (lst.isEmpty()) return 0;\n        long sum = 0;\n      \
    \  for (Float i : lst) sum += Math.pow(i.intValue(), 2);\n        return Math.ceil(sum);\n\
    \    }\n    public static void main(String[] args) {\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.0f, (float)2.0f, (float)3.0f)))) ==\
    \ (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp25xj74g1.java:27: error: incompatible types: possible lossy conversion\
    \ from double to long\n        return Math.ceil(sum);\n                      \
    \  ^\n1 error\n"
  stdout: ''
  timestamp: 1659977094
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        long sum = 0;\n        for (float f : lst) {\n            sum\
    \ += Math.round(f*f);\n        }\n        return sum;\n    }\n    public static\
    \ void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmph992dm62.java:34)\n"
  stdout: ''
  timestamp: 1659977095
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        if (lst.size() == 0)\n            return 0;\n        long sum\
    \ = 0;\n        for (Float x : lst) {\n            sum += Math.pow(Math.round(x),\
    \ 2);\n        }\n        return sum;\n    }\n    public static void main(String[]\
    \ args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: Exception
  stderr: "Exception in thread \"main\" java.lang.AssertionError\n\tat Problem.main(tmpf4jsvcj_.java:36)\n"
  stdout: ''
  timestamp: 1659977095
- exit_code: 1
  program: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
    import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
    class Problem {\n    // You are given an array array list of numbers.\n    //\
    \ You need to return the sum of squared numbers in the given array list,\n   \
    \ // round each element in the array list to the upper int(Ceiling) first.\n \
    \   // Examples:\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f))))\n    // (14l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)4.0f, (float)9.0f))))\n    // (98l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f))))\n    // (84l)\n    // >>> lst((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f))))\n \
    \   // (29l)\n    // >>> lst((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f))))\n    // (6l)\n    public static long sumSquares(ArrayList<Float>\
    \ lst) {\n        // Your code goes here\n        long sum = 0;\n        for (Float\
    \ x : lst)\n            sum = sum + x * x;\n        return sum;\n    }\n    public\
    \ static void main(String[] args) {\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)2.0f, (float)3.0f)))) == (14l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)1.0f,\
    \ (float)3.0f, (float)5.0f, (float)7.0f)))) == (84l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)1.4f, (float)4.2f, (float)0.0f)))) ==\
    \ (29l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-2.4f,\
    \ (float)1.0f, (float)1.0f)))) == (6l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)100.0f,\
    \ (float)1.0f, (float)15.0f, (float)2.0f)))) == (10230l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)10000.0f, (float)10000.0f)))) == (200000000l));\n\
    \    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f, (float)4.6f,\
    \ (float)6.3f)))) == (75l));\n    assert(sumSquares((new ArrayList<Float>(Arrays.asList((float)-1.4f,\
    \ (float)17.9f, (float)18.9f, (float)19.9f)))) == (1086l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)0.0f)))) == (0l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f)))) == (1l));\n    assert(sumSquares((new\
    \ ArrayList<Float>(Arrays.asList((float)-1.0f, (float)1.0f, (float)0.0f)))) ==\
    \ (2l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnqmem6i8.java:27: error: incompatible types: possible lossy conversion\
    \ from float to long\n            sum = sum + x * x;\n                      ^\n\
    1 error\n"
  stdout: ''
  timestamp: 1659977095
