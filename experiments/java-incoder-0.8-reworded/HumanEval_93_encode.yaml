name: HumanEval_93_encode
language: java
prompt: "import java.util.*;\nimport java.lang.reflect.*;\nimport org.javatuples.*;\n\
  import java.security.*;\nimport java.math.*;\nimport java.io.*;\nimport java.util.stream.*;\n\
  class Problem {\n    // Write a function that takes a message, and encodes in such\
  \ a \n    // way that it swaps case of all letters, replaces all vowels in \n  \
  \  // the message with the letter that appears 2 places ahead of that \n    // vowel\
  \ in the english alphabet. \n    // Assume only letters. \n    // Examples:\n  \
  \  // >>> encode((\"test\"))\n    // (\"TGST\")\n    // >>> encode((\"This is a\
  \ message\"))\n    // (\"tHKS KS C MGSSCGG\")\n    public static String encode(String\
  \ message) {\n"
tests: "    }\n    public static void main(String[] args) {\n    assert(encode((\"\
  TEST\")).equals((\"tgst\")));\n    assert(encode((\"Mudasir\")).equals((\"mWDCSKR\"\
  )));\n    assert(encode((\"YES\")).equals((\"ygs\")));\n    assert(encode((\"This\
  \ is a message\")).equals((\"tHKS KS C MGSSCGG\")));\n    assert(encode((\"I DoNt\
  \ KnOw WhAt tO WrItE\")).equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\n}\n"
completions: ["        String[] words = message.split(\" \");\n        int lengthOfMessage\
    \ = words.length;\n        StringBuilder newMessage = new StringBuilder(\"\");\n\
    \        for(int i=0; i<lengthOfMessage; i++) {\n            String letter = words[i].toLowerCase();\n\
    \            newMessage.append(letter);\n            String replaced = letter.replace(\"\
    A\", \"b\");\n            int vowelIndex = replaced.indexOf(\"a\");\n        \
    \    newMessage.append(replaced.substring(vowelIndex));\n            newMessage.append(replaced.substring(0,\
    \ vowelIndex));\n        }\n        return newMessage.toString();", "        \n\
    \        // This code would swap case for all letters in a message and \n    \
    \    // replace all vowels in a message with the letter that appears \n      \
    \  // 2 places ahead of that vowel in the english alphabet.\n        \n      \
    \  String result = \"\";\n        \n        Map<Character, String> map = message.chars().\n\
    \                mapToObj(c -> (char) c).\n                collect(Collectors.toMap(c\
    \ -> c, c -> c));\n        \n        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        \n        for (Map.Entry<Character, String> entry : map.entrySet())\
    \ {\n            result += alphabet.get((alphabet.indexOf(entry.getKey()) + 2)\
    \ % 26);\n        }\n        \n        \n        // This code would swap case\
    \ for all letters in a message and \n        // replace all vowels in a message\
    \ with the letter that appears \n        // 2 places ahead of that vowel in the\
    \ english alphabet.\n        \n        result = message.toLowerCase().replaceAll(\"\
    [aeiou]\", \"o\");\n        result = result.replaceAll(\"[^aeiou]\", \"i\");\n\
    \        return result;", "        List<Character> vowels = new ArrayList<>(Arrays.asList('a',\
    \ 'e', 'i', 'o', 'u'));\n        List<Character> firstVowel = new ArrayList<>(Arrays.asList('a',\
    \ 'e', 'i', 'o', 'u', 'y'));\n        List<Character> secondVowel = new ArrayList<>(Arrays.asList('a',\
    \ 'e', 'i', 'o', 'u', 'y'));\n        message.chars().map(c -> (char) c).filter(Character::isLetter).forEach(ch\
    \ -> {\n            if (vowels.contains(ch)) {\n                vowels.set(vowels.indexOf(ch),\
    \ firstVowel.indexOf(ch));\n            } else {\n                vowels.set(vowels.indexOf(ch),\
    \ secondVowel.indexOf(ch));\n            }\n        });\n        vowels.forEach(ch\
    \ -> {\n            int index = message.indexOf((char) ch);\n            int previous\
    \ = message.indexOf((char) ch, index + 1);\n            if (previous < index)\
    \ {\n                message = message.substring(0, index) + message.substring(previous);\n\
    \            }\n        });\n        return message;", "        // The easiest\
    \ way to swap case is to make a map\n        // that holds all the uppercase letters\
    \ and their \n        // lowercase equivalents. \n        Map<Character, Character>\
    \ uppercaseToLowerCase = new HashMap<Character, Character>(); \n\n        for\
    \ (char i : message.toCharArray()) {\n            if (Character.isUpperCase(i))\
    \ {\n                uppercaseToLowerCase.put(i, Character.toLowerCase(i));\n\
    \            }\n        }\n\n        // The second easiest way to swap case is\
    \ to convert the \n        // message to a string and swap the case of the \n\
    \        // characters.\n        String newMessage = message;\n        for (char\
    \ i : message.toCharArray()) {\n            if (Character.isLowerCase(i)) {\n\
    \                newMessage = newMessage.replace(i.toString(), uppercaseToLowerCase.get(i));\n\
    \            }\n        }\n        return newMessage;", "        List<Character>\
    \ letters = new ArrayList<Character>();\n        for(char c : message.toCharArray())\
    \ {\n            letters.add(c);\n        }\n        Collections.sort(letters);\n\
    \        List<Integer> indexes = new ArrayList<Integer>();\n        for(int i=0;\
    \ i<message.length(); i++) {\n            char c = message.charAt(i);\n      \
    \      if(c=='a') {\n                indexes.add(0);\n            } else if(c=='b')\
    \ {\n                indexes.add(1);\n            } else if(c=='c') {\n      \
    \          indexes.add(2);\n            } else if(c=='d') {\n                indexes.add(3);\n\
    \            } else if(c=='e') {\n                indexes.add(4);\n          \
    \  } else if(c=='f') {\n                indexes.add(5);\n            } else if(c=='g')\
    \ {\n                indexes.add(6);\n            } else if(c=='h') {\n      \
    \          indexes.add(7);\n            } else if(c=='i') {\n                indexes.add(8);\n\
    \            } else if(c=='k') {\n                indexes.add(9);\n          \
    \  } else if(c=='l') {\n                indexes.add(10);\n            } else if(c=='m')\
    \ {\n                indexes.add(11);\n            } else if(c=='n') {\n     \
    \           indexes.add(12);\n            } else if(c=='o') {\n              \
    \  indexes.add(13);\n            } else if(c=='p') {\n                indexes.add(14);\n\
    \            } else if(c=='q') {\n                indexes.add(15);\n         \
    \   } else if(c=='r') {\n                indexes.add(16);\n            } else\
    \ if(c=='s') {\n                indexes.add(17);\n            } else if(c=='t')\
    \ {\n                indexes.add(18);\n            } else if(c=='u') {\n     \
    \           indexes.add(19);\n            } else if(c=='v') {\n              \
    \  indexes.add(20);\n            } else if(c=='w') {\n                indexes.add(21);\n\
    \            } else if(c=='x') {\n                indexes.add(22);\n         \
    \   } else if(c=='y') {\n                indexes.add(23);\n            } else\
    \ if(c=='z') {\n                indexes.add(24);\n            } else if(c=='A')\
    \ {\n                indexes.add(25);\n            } else if(c=='B') {\n     \
    \           indexes.add(26);\n            } else if(c=='C') {\n              \
    \  indexes.add(27);\n            } else if(c=='D') {\n                indexes.add(28);\n\
    \            } else if(c=='E') {\n                indexes.add(29);\n         \
    \   } else if(c=='F') {\n                indexes.add(30);\n            } else\
    \ if(c=='G') {\n", '        return message;', "        String result = \"\";\n\
    \        for (char c : message.toCharArray()) {\n            if ('A' <= c && c\
    \ <= 'Z') {\n                result += (char) (c + 1);\n            }\n      \
    \      else if (c >= 'a' && c <= 'z') {\n                result += (char) (c -\
    \ 'a' + 1);\n            }\n            else if (c >= 'A' && c <= 'Z') {\n   \
    \             result += (char) (c + 1);\n            }\n        }\n        return\
    \ result;", "        // your code here\n        String result = \"\";\n      \
    \  for (char c : message.toCharArray()) {\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += (char) (((c - 'a') + 2) % 26 + 'a');\n        \
    \    } else if (c >= 'A' && c <= 'Z') {\n                result += (char) (((c\
    \ - 'A') + 2) % 26 + 'A');\n            } else {\n                result += c;\n\
    \            }\n        }\n        return result;", "        StringBuilder sb\
    \ = new StringBuilder();\n        for (char ch : message.toCharArray()) {\n  \
    \          ch = getChar(ch);\n            ch = chSwapCase(ch);\n            ch\
    \ = vowelCh(ch);\n            sb.append(ch);\n        }\n        return sb.toString();",
  '        // Your code here', "        List<Character> alphabet = new ArrayList<Character>();\n\
    \        alphabet.add('a');alphabet.add('b');alphabet.add('c');alphabet.add('d');alphabet.add('e');alphabet.add('f');alphabet.add('g');alphabet.add('h');alphabet.add('i');alphabet.add('j');alphabet.add('k');alphabet.add('l');alphabet.add('m');alphabet.add('n');alphabet.add('o');alphabet.add('p');alphabet.add('q');alphabet.add('r');alphabet.add('s');alphabet.add('t');alphabet.add('u');alphabet.add('v');alphabet.add('w');alphabet.add('x');alphabet.add('y');alphabet.add('z');\n\
    \n        Map<Character,List<Character>> map = new HashMap<Character,List<Character>>();\n\
    \        for (int i = 0; i < message.length(); i++)\n        {\n            char\
    \ c = message.charAt(i);\n            if (!map.containsKey(c))\n            {\n\
    \                List<Character> list = new ArrayList<Character>();\n        \
    \        list.add(c);\n                map.put(c, list);\n            }\n    \
    \        else\n            {\n                map.get(c).add(i);\n           \
    \ }\n        }\n\n        StringBuilder sb = new StringBuilder(message.length());\n\
    \        for (int i = 0; i < message.length(); i++)\n        {\n            char\
    \ c = message.charAt(i);\n            if (!map.containsKey(c))\n            {\n\
    \                sb.append(c);\n            }\n            else\n            {\n\
    \                List<Character> list = map.get(c);\n                for (int\
    \ j = 0; j < list.size(); j++)\n                {\n                    int index\
    \ = (int)list.get(j);\n                    char newChar = message.charAt(index+1);\n\
    \                    sb.append(newChar);\n                }\n            }\n \
    \       }\n        return sb.toString();", "        char[] arr = message.toCharArray();\n\
    \        for (int i = 0; i < arr.length; i++) {\n            if (Character.isLetter(arr[i]))\
    \ {\n                char upper = Character.toUpperCase(arr[i]);\n           \
    \     char lower = Character.toLowerCase(arr[i]);\n                char a1 = Character.toUpperCase(lower);\n\
    \                char a2 = Character.toUpperCase(upper);\n                char\
    \ b1 = Character.toLowerCase(lower);\n                char b2 = Character.toLowerCase(upper);\n\
    \                arr[i] = a1;\n                arr[i + 1] = a2;\n            \
    \    arr[i + 2] = b1;\n                arr[i + 3] = b2;\n            }\n     \
    \   }\n        return new String(arr);", '        //TODO: your code here', " \
    \       List<Character> letters = new ArrayList<>();\n        String swappedLetters\
    \ = \"\";\n        char[] charArray = message.toCharArray();\n\n        for (char\
    \ c : charArray) {\n            letters.add(c);\n        }\n\n        for (int\
    \ i = 0; i < letters.size(); i++) {\n            char letter = letters.get(i);\n\
    \            if (Character.isUpperCase(letter)) {\n                String upperLetter\
    \ = Character.toUpperCase(letter);\n                int upperLetterIndex = upperLetter.indexOf('A');\n\
    \                char upperLetterLetter = upperLetter.charAt(upperLetterIndex);\n\
    \                String lowerLetter = Character.toLowerCase(letter);\n       \
    \         int lowerLetterIndex = lowerLetter.indexOf('A');\n                char\
    \ lowerLetterLetter = lowerLetter.charAt(lowerLetterIndex);\n                letters.set(i,\
    \ upperLetterLetter);\n                letters.set(upperLetterIndex, lowerLetterLetter);\n\
    \                letters.set(lowerLetterIndex, letter);\n                swapped\
    \ += lowerLetterLetter;\n            }\n        }\n        return \"\";", "  \
    \      Map<Character, Integer> countMap = new HashMap<>();\n\n        for (char\
    \ c : message.toCharArray()) {\n            Integer count = countMap.get(c);\n\
    \n            if (count == null) {\n                count = 1;\n            }\
    \ else {\n                count++;\n            }\n\n            countMap.put(c,\
    \ count);\n        }\n\n        List<Integer> keys = new ArrayList<>(countMap.keySet());\n\
    \        List<Character> values = new ArrayList<>(countMap.values());\n\n    \
    \    Collections.sort(keys);\n        Collections.sort(values);\n\n        StringBuilder\
    \ sb = new StringBuilder();\n\n        for (int i = 0; i < keys.size() - 1; i++)\
    \ {\n            sb.append(keys.get(i));\n\n            Integer count = values.get(i);\n\
    \            int j = i;\n\n            for (int k = i + 1; k < keys.size(); k++)\
    \ {\n                if (values.get(k) > count) {\n                    break;\n\
    \                }\n                count--;\n                j++;\n         \
    \   }\n\n            Character value = values.get(j);\n            char lastCharacter\
    \ = values.get(j - 1).charValue();\n\n            if (Character.isUpperCase(lastCharacter))\
    \ {\n                sb.append(Character.toUpperCase(value));\n            } else\
    \ {\n                sb.append(Character.toLowerCase(value));\n            }\n\
    \        }\n\n        return sb.toString();", "        StringBuffer sb = new StringBuffer();\n\
    \        for (int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n\
    \            if (ch == 'a') {\n                ch = message.charAt(i + 1);\n \
    \           }\n            else if (ch == 'A') {\n                ch = message.charAt(i\
    \ + 2);\n            }\n            if (ch == 'e') {\n                ch = message.charAt(i\
    \ + 3);\n            }\n            else if (ch == 'E') {\n                ch\
    \ = message.charAt(i + 4);\n            }\n            if (ch == 'i') {\n    \
    \            ch = message.charAt(i + 5);\n            }\n            else if (ch\
    \ == 'I') {\n                ch = message.charAt(i + 6);\n            }\n    \
    \        if (ch == 'o') {\n                ch = message.charAt(i + 7);\n     \
    \       }\n            else if (ch == 'O') {\n                ch = message.charAt(i\
    \ + 8);\n            }\n            if (ch == 'u') {\n                ch = message.charAt(i\
    \ + 9);\n            }\n            else if (ch == 'U') {\n                ch\
    \ = message.charAt(i + 10);\n            }\n            sb.append(ch);\n     \
    \   }\n        return sb.toString();", "        //write code here\n        return\
    \ message;", "        return message.replaceAll(\"([A-Z])\", m -> m.toLowerCase())\n\
    \                .replaceAll(\"([aeiou])\", m -> m.toUpperCase())\n          \
    \      .replaceAll(\"([a-zA-Z])\", m -> \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".indexOf(m)\
    \ + 1);", "        String encoded = \"\";\n        int j = 0;\n        for (int\
    \ i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n\
    \            if (Character.isUpperCase(ch)) {\n                encoded = encoded\
    \ + Character.toLowerCase(ch);\n            } else {\n                encoded\
    \ = encoded + ch;\n            }\n            if (Character.isLetter(ch)) {\n\
    \                char prevCh = message.charAt(j);\n                if (Character.isUpperCase(prevCh)\
    \ && Character.isLetter(ch)) {\n                    encoded = encoded + Character.toLowerCase(prevCh);\n\
    \                    j++;\n                }\n            }\n        }\n     \
    \   return encoded;", "        // TODO: Implement this function\n        return\
    \ message;", "        StringBuilder sb = new StringBuilder();\n        char[]\
    \ ch = message.toCharArray();\n        for (int i = 0; i < ch.length; i++) {\n\
    \            int x = ch[i] - 'A';\n            int y = i + 1;\n            while\
    \ (y < ch.length) {\n                int z = ch[y] - 'A';\n                if\
    \ (x == z) x++;\n                else x--;\n                y++;\n           \
    \ }\n            sb.append((char) (ch[i] + x + y));\n        }\n        return\
    \ sb.toString();", '        return message.replaceAll("[a-zA-Z]", "$0X").replaceAll("[aeiouAEIOU]",
    "$&$&");', "        char[] msgChars = message.toCharArray();\n        for(int\
    \ i = 0; i < msgChars.length; i++) {\n            char c = msgChars[i];\n    \
    \        int position = Character.toLowerCase(c) - 'a';\n            String substr\
    \ = Arrays.toString(Arrays.copyOfRange(msgChars, i, i + 2));\n            String\
    \ swappedCase = substrings(substr, 2).stream().map(s -> Character.toUpperCase(Character.toLowerCase(s))\
    \ + Character.toLowerCase(Character.toUpperCase(s))).collect(joining(\"\"));\n\
    \            String vowelReplacement = Arrays.toString(Arrays.copyOfRange(msgChars,\
    \ i, i + 2));\n            vowelReplacement = vowelReplacement.replace(\"aeiou\"\
    , \"y\");\n            vowelReplacement = vowelReplacement.replace(\"AEIOU\",\
    \ \"Y\");\n            String finalReplacement = vowelReplacement + swappedCase;\n\
    \            msgChars[i] = Character.toUpperCase(Character.toLowerCase(c));\n\
    \            for(int j = 0; j < msgChars.length; j++) {\n                if(i\
    \ != j) {\n                    if(Character.toUpperCase(Character.toLowerCase(msgChars[j]))\
    \ == Character.toUpperCase(Character.toLowerCase(finalReplacement))) {\n     \
    \                   msgChars[j] = finalReplacement;\n                    }\n \
    \               }\n            }\n        }\n        return String.valueOf(msgChars);",
  "        StringBuilder builder = new StringBuilder();\n        for( int i = 0; i\
    \ < message.length(); i++ ) {\n            char c = message.charAt(i);\n     \
    \       if( Character.isUpperCase(c) ) {\n                builder.append( Character.toLowerCase(c)\
    \ );\n            } else {\n                builder.append( c );\n           \
    \ }\n        }\n        char[] chars = builder.toString().toCharArray();\n   \
    \     Arrays.sort( chars );\n        for( int i = 0; i < chars.length; i++ ) {\n\
    \            if( i == 0 ) {\n                builder.append( chars[i] );\n   \
    \         } else if( i == chars.length -1 ) {\n                builder.append(\
    \ chars[i+1] );\n            } else if( chars[i-1] == chars[i]) {\n          \
    \      builder.append( chars[i+1] );\n            } else {\n                builder.append(\
    \ chars[i+1] );\n            }\n        }\n        return builder.toString();",
  "        List<String> result = new ArrayList<String>();\n        for(int i = 0;\
    \ i < message.length(); i++) {\n            String currentChar = message.substring(i,\
    \ i+1);\n            String replacement = \"\";\n            boolean foundVowel\
    \ = false;\n            for (int j = 0; j < currentChar.length(); j++) {\n   \
    \             char currentCharChar = currentChar.charAt(j);\n                if\
    \ (currentCharChar == 'A') {\n                    replacement += 'a';\n      \
    \          }\n                else if (currentCharChar == 'E') {\n           \
    \         replacement += 'e';\n                }\n                else if (currentCharChar\
    \ == 'I') {\n                    replacement += 'i';\n                }\n    \
    \            else if (currentCharChar == 'O') {\n                    replacement\
    \ += 'o';\n                }\n                else if (currentCharChar == 'U')\
    \ {\n                    replacement += 'u';\n                }\n            \
    \    else if (currentCharChar == 'Y') {\n                    foundVowel = true;\n\
    \                    break;\n                }\n            }\n            if\
    \ (!foundVowel) {\n                replacement += currentChar;\n            }\n\
    \            result.add(replacement);\n        }\n        return Strings.join(\"\
    \", result);", "        // Your code here\n        Map<Character, Integer> vowels\
    \ = new HashMap<>();\n        vowels.put('a', 2);\n        vowels.put('e', 2);\n\
    \        vowels.put('i', 2);\n        vowels.put('o', 2);\n        vowels.put('u',\
    \ 2);\n\n        Map<Character, Character> messageLetters = new HashMap<>();\n\
    \n        for (Character letter : message.toCharArray()) {\n            messageLetters.put(letter,\
    \ letter);\n        }\n\n        StringBuilder result = new StringBuilder();\n\
    \        for (Character letter : message.toCharArray()) {\n            if (messageLetters.containsKey(letter))\
    \ {\n                String vowel = vowels.get(letter);\n                Integer\
    \ count = 1;\n                for (int i = messageLetters.get(letter).length()\
    \ - 1; i >= 0; i--) {\n                    Character previousLetter = messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(messageLetters.get(message",
  "        if (message.isEmpty()) {\n            return message;\n        }\n    \
    \    char[] chars = message.toCharArray();\n        Map<Character, Character>\
    \ map = new HashMap<Character, Character>();\n        // TODO: put map in reverse\
    \ order\n        for (char c : chars) {\n            map.put(c, map.getOrDefault(c\
    \ + 2, c));\n        }\n        StringBuilder sb = new StringBuilder();\n    \
    \    IntStream.range(0, chars.length).map(i -> map.getOrDefault(chars[i], chars[i]))\n\
    \                .forEach(ch -> sb.append(ch));\n        return sb.toString();",
  "        String[] splitted = message.split(\"\");\n        StringBuilder buffer\
    \ = new StringBuilder();\n        Map<Character, Integer> vowelMap = new HashMap<>();\n\
    \        vowelMap.put('a', 0);\n        vowelMap.put('e', 1);\n        vowelMap.put('i',\
    \ 2);\n        vowelMap.put('o', 3);\n        vowelMap.put('u', 4);\n        vowelMap.put('y',\
    \ 5);\n        vowelMap.put('d', 6);\n        vowelMap.put('g', 7);\n\n      \
    \  for(int i = 0; i < splitted.length; i++) {\n            char currentChar =\
    \ splitted[i].charAt(0);\n            Integer currentCharValue = vowelMap.get(currentChar);\n\
    \            int nextCharValue = vowelMap.get(splitted[i + 1].charAt(0));\n\n\
    \            if(currentCharValue != null && nextCharValue != null) {\n       \
    \         int previousCharValue = vowelMap.get(splitted[i - 1]);\n\n         \
    \       if(previousCharValue != null)\n                    currentCharValue =\
    \ previousCharValue + 2;\n                buffer.append(currentCharValue + nextCharValue);\n\
    \            } else {\n                buffer.append(currentChar);\n         \
    \   }\n        }\n        return buffer.toString();", '        return message;',
  "        \n        // Your code goes here\n        // Complete the code here\n \
    \       ", "        if (message == null || message.isEmpty()) return message;\n\
    \        char[] arr = message.toCharArray();\n        Arrays.sort(arr);\n    \
    \    return String.valueOf(arr).replaceAll(\"[a-z]\", c -> {\n            String\
    \ upper = Character.toUpperCase(c);\n            char afterVowel;\n          \
    \  if (arr.length < 2) {\n                afterVowel = upper;\n            } else\
    \ {\n                afterVowel = arr[arr.length-2];\n            }\n        \
    \    char[] afterVowelArr = Arrays.copyOfRange(arr, arr.length-3, arr.length);\n\
    \            Collections.sort(afterVowelArr);\n            return upper + afterVowel;\n\
    \        });", "        String newMessage = new String();\n\n        for (char\
    \ c : message.toCharArray()) {\n            int position = map.getOrDefault(c,\
    \ -1);\n\n            if (position >= 0) {\n                String newCharacter\
    \ = \"\" + Character.toUpperCase(c);\n                newMessage += newCharacter.substring(position,\
    \ position + 1);\n            } else {\n                newMessage += Character.toUpperCase(c);\n\
    \            }\n        }\n\n        return newMessage;", "        // Your code\
    \ here\n        String encodedMessage = \"\";\n        message.chars().filter(c\
    \ -> Character.isLetter(c))\n                   .forEach(c -> {\n            \
    \           if (isVowel(c)) {\n                           if (message.indexOf((char)\
    \ c + 1) > -1) {\n                               encodedMessage += c;\n      \
    \                     } else {\n                               String vowel =\
    \ \n                                   Character.toUpperCase(message.charAt(message.indexOf((char)\
    \ c + 1));\n                               encodedMessage += vowel;\n        \
    \                   }\n                       } else {\n                     \
    \      encodedMessage += (char) c;\n                       }\n               \
    \    });\n        return encodedMessage;", "        char [] ca = message.toCharArray();\n\
    \        \n        for (int i = 0; i < ca.length; i++) {\n            char c =\
    \ ca[i];\n            if (Character.isLowerCase(c)) {\n                ca[i] =\
    \ Character.toUpperCase(c);\n            }\n            else if(Character.isUpperCase(c))\
    \ {\n                ca[i] = Character.toLowerCase(c);\n            }\n      \
    \      else if(Character.isLetter(c)) {\n                ca[i] = Character.toUpperCase(c);\n\
    \            }\n            else if (Character.isLetter(c)) {\n              \
    \  ca[i] = Character.toLowerCase(c);\n            }\n        }\n        \n   \
    \     String result = new String(ca);\n        \n        for (int i = 0; i < result.length();\
    \ i++) {\n            char c = result.charAt(i);\n            if (c == ' ') {\n\
    \                for (int j = i; j < result.length()-1; j++) {\n             \
    \       char d = result.charAt(j);\n                    if (Character.isLowerCase(d)\
    \ && Character.isUpperCase(c)) {\n                        result.deleteCharAt(j);\n\
    \                    }\n                    else if (Character.isUpperCase(d)\
    \ && !Character.isLowerCase(c)) {\n                        result.deleteCharAt(j);\n\
    \                    }\n                }\n            }\n        }\n        \n\
    \        return result;", "        // TODO Auto-generated method stub\n      \
    \  String letter = \"\";\n        char[] array = message.toCharArray();\n    \
    \    for (char c : array) {\n            if (Character.isLowerCase(c)) {\n   \
    \             letter = letter + Character.toLowerCase(c);\n            } else\
    \ if (Character.isUpperCase(c)) {\n                letter = letter + Character.toUpperCase(c);\n\
    \            } else {\n                letter = letter + Character.toLowerCase(c);\n\
    \            }\n        }\n        char[] array2 = letter.toCharArray();\n   \
    \     int index = array2.indexOf('e');\n        for (char c : array2) {\n    \
    \        if (Character.isLowerCase(c)) {\n                array2[index] = Character.toUpperCase(c);\n\
    \            } else if (Character.isUpperCase(c)) {\n                array2[index]\
    \ = Character.toLowerCase(c);\n            }\n            index = index - 1;\n\
    \        }\n        String result = \"\";\n        for (int i = 0; i < array2.length;\
    \ i++) {\n            result = result + array2[i];\n        }\n        return\
    \ result;", "        return message.chars()\n            .mapToObj(i -> (char)\
    \ i)\n            .collect(Collectors.groupingBy(i -> (char) i))\n           \
    \ .entrySet()\n            .stream()\n            .flatMap(e -> e.getValue().entrySet().stream())\n\
    \            .map(e -> e.getKey())\n            .collect(Collectors.toMap(i ->\
    \ i + 2, i -> e.getKey()))\n            .entrySet()\n            .stream()\n \
    \           .map(e -> e.getValue())\n            .collect(Collectors.joining());",
  "        String toEncode = message;\n        StringBuilder encodedMessage = new\
    \ StringBuilder();\n        List<Character> toEncodeAsCharList = new ArrayList<Character>();\n\
    \        for (char c : toEncode.toCharArray()) {\n            if (isUpperCase(c))\
    \ {\n                toEncodeAsCharList.add(Character.toUpperCase(c));\n     \
    \       } else if (isLowerCase(c)) {\n                toEncodeAsCharList.add(Character.toLowerCase(c));\n\
    \            }\n        }\n        List<Character> vowels = new ArrayList<Character>();\n\
    \        vowels.add('a', 'e', 'i', 'o', 'u');\n        vowels.add('b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z');\n        vowels.add('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n        vowels.add('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z');\n        vowels.add('b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n   \
    \     vowels.add('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n        vowels.add('b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z');\n        vowels.add('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n        vowels.add('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z');\n        vowels.add('b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n   \
    \     vowels.add('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n        vowels.add('b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z');\n        vowels.add('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n        vowels.add('b',\
    \ 'c', 'd', 'f", "        char[] chars = message.toCharArray();\n        for (int\
    \ i = 0; i < chars.length; ++i) {\n            char ch = chars[i];\n         \
    \   char newCh;\n            switch (ch) {\n            case 'a': newCh = 'b';\
    \ break;\n            case 'b': newCh = 'a'; break;\n            case 'c': newCh\
    \ = 'd'; break;\n            case 'd': newCh = 'c'; break;\n            case 'e':\
    \ newCh = 'f'; break;\n            case 'f': newCh = 'e'; break;\n           \
    \ case 'g': newCh = 'h'; break;\n            case 'h': newCh = 'g'; break;\n \
    \           case 'i': newCh = 'j'; break;\n            case 'j': newCh = 'i';\
    \ break;\n            case 'k': newCh = 'l'; break;\n            case 'l': newCh\
    \ = 'k'; break;\n            case 'm': newCh = 'n'; break;\n            case 'n':\
    \ newCh = 'm'; break;\n            case 'o': newCh = 'p'; break;\n           \
    \ case 'p': newCh = 'o'; break;\n            case 'q': newCh = 'r'; break;\n \
    \           case 'r': newCh = 'q'; break;\n            case 's': newCh = 't';\
    \ break;\n            case 't': newCh = 's'; break;\n            case 'u': newCh\
    \ = 'v'; break;\n            case 'v': newCh = 'u'; break;\n            case 'w':\
    \ newCh = 'x'; break;\n            case 'x': newCh = 'w'; break;\n           \
    \ case 'y': newCh = 'z'; break;\n            case 'z': newCh = 'y'; break;\n \
    \           default: newCh = ch;\n            }\n            chars[i] = newCh;\n\
    \        }\n        return new String(chars);", "        //Write your code here\n\
    \        String encodedMsg = \"\";\n        for(int i = 0; i < message.length();\
    \ i++) {\n            String charToEncode = message.charAt(i);\n            String\
    \ encodedChar = \"\";\n            if((i == 0 || i == message.length() - 1) &&\
    \ Character.isLetter(charToEncode)) {\n                encodedChar = charToEncode;\n\
    \            }\n            for(int j = i-1; j >= 0 && Character.isLetter(message.charAt(j))\
    \ ; j--) {\n                String vowel = \"AEIOUaeiou\";\n                String\
    \ letterBeforeVowel = message.substring(i, j);\n                String letterAfterVowel\
    \ = message.substring(j + 1, i + 1);\n                if (vowel.contains(letterBeforeVowel))\
    \ {\n                    encodedChar += letterBeforeVowel + letterAfterVowel.toUpperCase();\n\
    \                    i = j - 1;\n                }\n            }\n          \
    \  encodedMsg += encodedChar;\n        }\n        return encodedMsg;", '        return
    null;', "        String result = \"\";\n        String vowels = \"aeiouAEIOU\"\
    ;\n        for(int i = 0;i < message.length();i++) {\n            if(vowels.contains(message.charAt(i))){\n\
    \                result += message.charAt(i) + message.charAt(i + 1);\n      \
    \      }else{\n                result += message.charAt(i).toLowerCase();\n  \
    \          }\n        }\n        return result;", "        String encodedMessage\
    \ = \"\";\n        // We will use an array of booleans for letters. \n       \
    \ // We start with the second letter of the message. \n        // We will set\
    \ all the values to false \n        // except for the letters contained in the\
    \ english alphabet. \n        // We will iterate through the message and set the\
    \ \n        // boolean to true if the current character is an english letter.\
    \ \n        // We will set the value of this boolean to a variable \n        //\
    \ we will call nextLetter. We will set the value of this \n        // variable\
    \ to false at the start. \n        // We will iterate through the message and\
    \ if the value of the \n        // boolean nextLetter is true we will set the\
    \ value of \n        // currentLetter to be the value of the nextLetter variable.\
    \ \n        // We will iterate through the message and if the value of \n    \
    \    // the boolean nextLetter is true we will set the value of the \n       \
    \ // nextLetter variable to be the next letter of the message. \n        // We\
    \ will iterate the message and if the value of the \n        // boolean nextLetter\
    \ is true we will set the value of the \n        // nextLetter variable to be\
    \ the next letter of the message. \n        // We will iterate the message and\
    \ if the value of the \n        // boolean nextLetter is true we will set the\
    \ value of the \n        // nextLetter variable to be the next letter of the message.\
    \ \n        // We will iterate the message and if the value of the \n        //\
    \ boolean nextLetter is true we will set the value of the \n        // nextLetter\
    \ variable to be the next letter of the message. \n        // We will iterate\
    \ the message and if the value of the \n        // boolean nextLetter is true\
    \ we will set the value of the \n        // nextLetter variable to be the next\
    \ letter of the message. \n        // We will iterate the message and if the value\
    \ of the \n        // boolean nextLetter is true we will set the value of the\
    \ \n        // nextLetter variable to be the next letter of the message. \n  \
    \      // We will iterate the message and if the value of the \n        // boolean\
    \ nextLetter is true we will set the value of the \n        // nextLetter variable\
    \ to be the next letter of the message. \n        // We will iterate the message\
    \ and if the value of the \n        // boolean nextLetter is true we will set\
    \ the value of the \n        // nextLetter variable to be the next letter of the\
    \ message. \n        // We will iterate the message and if the value of the \n\
    \        // boolean nextLetter is true we will set the value of the \n       \
    \ // nextLetter variable to be the next letter of the message. \n        // We\
    \ will iterate the message and if the value of the \n        // boolean nextLetter\
    \ is true we will set the value of the \n        // nextLetter variable to be\
    \ the next letter of the message. \n        // We will iterate the message and\
    \ if the value of the \n        // boolean nextLetter is true we will set the\
    \ value of the \n        // nextLetter variable to be the next letter of the message.\
    \ \n        // We will iterate the message and if the value of the \n        //\
    \ boolean nextLetter is true we will set the value of the \n        // nextLetter\
    \ variable to be the next letter of the message. ", "        Map<Character, String>\
    \ map = \n            message.chars().boxed().collect(Collectors.toMap(c -> c,\
    \ c -> {\n                char[] chars = new char[3];\n                char previous\
    \ = ' ';\n                int i = 1;\n                for (char c: message.toCharArray())\
    \ {\n                    if (c == c) {\n                        chars[--i] = c;\n\
    \                    } else if (Character.toLowerCase(c) == Character.toLowerCase(previous))\
    \ {\n                        chars[--i] = (char) (c);\n                    } else\
    \ {\n                        chars[--i] = Character.toLowerCase(c);\n        \
    \                chars[--i] = Character.toUpperCase(previous);\n             \
    \       }\n                    previous = c;\n                }\n            \
    \    return String.valueOf(chars);\n            }));\n\n        StringBuilder\
    \ sb = new StringBuilder(message.length());\n        message.chars().forEach(c\
    \ -> sb.append(map.get((char) c)));\n        return sb.toString();", "       \
    \ int letterCount = 0;\n        for (int i = 0; i < message.length(); i++) {\n\
    \            char c = message.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                letterCount++;\n            }\n        }\n        StringBuilder\
    \ encodedMessage = new StringBuilder();\n        for (int i = 0; i < message.length();\
    \ i++) {\n            char c = message.charAt(i);\n            if (Character.isLetter(c))\
    \ {\n                int letterIndex = Character.toLowerCase(c) - 'a';\n     \
    \           if (letterCount > 2) {\n                    letterIndex = letterIndex\
    \ + 2;\n                }\n                encodedMessage.append(alphabet.charAt(letterIndex));\n\
    \                letterCount--;\n            }\n        }\n        return encodedMessage.toString();",
  "        if (message.length() <= 1) {\n            return message;\n        }\n\
    \        char[] charArray = message.toCharArray();\n        char[] vowels = {\
    \ \"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\" };\n  \
    \      char[] replacement = { \n            \"a\", \"e\", \"i\", \"o\", \"u\"\
    , \"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\" };\n  \
    \      char[] swap = { \n            \"A\", \"E\", \"I\", \"O\", \"U\", \"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\"\
    , \"i\", \"o\", \"u\" };\n        for (int i = 0; i < charArray.length; i++) {\n\
    \            int currentVowelIndex = vowels.indexOf(charArray[i]);\n         \
    \   if (currentVowelIndex != -1) {\n                int secondVowelIndex = vowels.indexOf(\n\
    \                    vowels[currentVowelIndex + 2]);\n                charArray[i]\
    \ = vowels[secondVowelIndex];\n            }\n        }\n        String result\
    \ = \"\";\n        for (int i = 0; i < charArray.length; i++) {\n            result\
    \ += swap[charArray[i]];\n        }\n        return result;", "        \n    \
    \    Map<String, String> map = new HashMap<>();\n        map.put(\"a\", \"b\"\
    );\n        map.put(\"b\", \"a\");\n        \n        message = message.toLowerCase().replaceAll(\"\
    \\\\s\", \"\");\n        \n        for (char c : message.toCharArray()) {\n  \
    \          String s = map.get(c);\n            if (s == null) {\n            \
    \    s = Character.toString(c);\n            }\n            \n            int\
    \ idx = message.indexOf(c);\n            String str = new StringBuilder(s).append(message.substring(idx\
    \ + 1)).toString();\n            message = message.replace(s, str);\n        }\n\
    \        \n        return message;", "        Map<Character, Integer> map = new\
    \ HashMap<>();\n        char[] chArr = message.toCharArray();\n        for (int\
    \ i = 0; i < chArr.length; i++) {\n            char c = chArr[i];\n          \
    \  Integer v = map.get(c);\n            if (v == null) {\n                v =\
    \ 1;\n                map.put(c, v);\n            } else {\n                map.put(c,\
    \ v + 1);\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n\
    \        for (char c : chArr) {\n            if (map.containsKey(c)) {\n     \
    \           int v = map.get(c);\n                sb.append((char) (Character.toUpperCase(c)\
    \ + \n                           String.valueOf(v - 1)));\n            }\n   \
    \     }\n        return sb.toString();", "        String newMessage = message;\n\
    \n        // First encode the message.\n        newMessage = newMessage.replaceAll(\"\
    [A-Z]\", \"tHKS\");\n        newMessage = newMessage.replaceAll(\"[a-z]\", \"\
    KS\");\n        newMessage = newMessage.replaceAll(\"[aeiouAEIOU]\", \"C\");\n\
    \        newMessage = newMessage.replaceAll(\"[aeiouAEIOU]\", \"MGSSCGG\");\n\n\
    \        // Now decode the message.\n        newMessage = newMessage.replace(\"\
    tHKS\", \"t\");\n        newMessage = newMessage.replace(\"KS\", \"l\");\n   \
    \     newMessage = newMessage.replace(\"C\", \"g\");\n        newMessage = newMessage.replace(\"\
    MGSSCGG\", \"gg\");\n\n        return newMessage;", "        // Complete the code\
    \ here\n        Map<String, String> englishLetters = new HashMap<String, String>();\n\
    \        englishLetters.put(\"a\", \"A\");\n        englishLetters.put(\"b\",\
    \ \"B\");\n        englishLetters.put(\"c\", \"C\");\n        englishLetters.put(\"\
    d\", \"D\");\n        englishLetters.put(\"e\", \"E\");\n        englishLetters.put(\"\
    f\", \"F\");\n        englishLetters.put(\"g\", \"G\");\n        englishLetters.put(\"\
    h\", \"H\");\n        englishLetters.put(\"i\", \"I\");\n        englishLetters.put(\"\
    j\", \"J\");\n        englishLetters.put(\"k\", \"K\");\n        englishLetters.put(\"\
    l\", \"L\");\n        englishLetters.put(\"m\", \"M\");\n        englishLetters.put(\"\
    n\", \"N\");\n        englishLetters.put(\"o\", \"O\");\n        englishLetters.put(\"\
    p\", \"P\");\n        englishLetters.put(\"q\", \"Q\");\n        englishLetters.put(\"\
    r\", \"R\");\n        englishLetters.put(\"s\", \"S\");\n        englishLetters.put(\"\
    t\", \"T\");\n        englishLetters.put(\"u\", \"U\");\n        englishLetters.put(\"\
    v\", \"V\");\n        englishLetters.put(\"w\", \"W\");\n        englishLetters.put(\"\
    x\", \"X\");\n        englishLetters.put(\"y\", \"Y\");\n        englishLetters.put(\"\
    z\", \"Z\");\n\n        String result = \"\";\n        for (int i = 0; i < message.length();\
    \ i++) {\n            char c = message.charAt(i);\n            if (englishLetters.containsKey(c))\
    \ {\n                result += englishLetters.get(c);\n            } else {\n\
    \                result += c;\n            }\n        }\n\n        for (int i\
    \ = 0; i < result.length(); i++) {\n            char c = result.charAt(i);\n \
    \           if (c == 'a') {\n                c = 'A';\n            } else if (c\
    \ == 'b') {\n                c = 'B';\n            } else if (c == 'c') {\n  \
    \              c = 'C';\n            } else if (c == 'd') {\n                c\
    \ = 'D';\n            } else if (c == 'e') {\n                c = 'E';\n     \
    \       } else if (c == 'f') {\n                c = 'F';\n            } else if\
    \ (c == 'g') {\n                c = 'G';\n            } else if (c == 'h') {\n\
    \                c = 'H';\n            } else if (c == 'i') {\n              \
    \  c = 'I';\n            } else if (c == 'j') {\n                c = 'J';\n  \
    \          } else if (c == 'k') {\n                c = 'K';\n            } else\
    \ if (c == 'l') {\n                c = 'L';\n            } else if (c == 'm')\
    \ {\n                c = 'M';\n            } else if (c == 'n') {\n          \
    \      c = 'N';\n            } else if (c", "        String result = \"\";\n \
    \       \n        for (int i = 0; i < message.length(); i++) {\n            int\
    \ x = message.charAt(i) - 65;\n            if (x == 0) {\n                result\
    \ += message.toLowerCase().charAt(i);\n            } else {\n                result\
    \ += message.substring(i).toUpperCase().charAt(x);\n            }\n        }\n\
    \        return result;", "        int vowels = 0;\n        for (int i = 0; i\
    \ < message.length(); i++) {\n            char c = message.charAt(i);\n      \
    \      if (c == 'a') {\n                vowels++;\n            } else if (c ==\
    \ 'e') {\n                vowels++;\n            } else if (c == 'i') {\n    \
    \            vowels++;\n            } else if (c == 'o') {\n                vowels++;\n\
    \            } else if (c == 'u') {\n                vowels++;\n            }\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for (int\
    \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if (c == 'a') {\n                sb.append((char) (message.charAt(i\
    \ + 1) % 26 + 'a'));\n            } else if (c == 'e') {\n                sb.append((char)\
    \ (message.charAt(i + 1) % 26 + 'a'));\n            } else if (c == 'i') {\n \
    \               sb.append((char) (message.charAt(i + 1) % 26 + 'a'));\n      \
    \      } else if (c == 'o') {\n                sb.append((char) (message.charAt(i\
    \ + 1) % 26 + 'a'));\n            } else if (c == 'u') {\n                sb.append((char)\
    \ (message.charAt(i + 1) % 26 + 'a'));\n            }\n        }\n        for\
    \ (int i = 0; i < vowels; i++) {\n            String letter = \"\";\n        \
    \    for (int j = 0; j < vowels - 1; j++) {\n                letter = sb.substring(j,\
    \ j + 1);\n                sb.setCharAt(j, sb.charAt(j + 1));\n            }\n\
    \            sb.setCharAt(vowels - 1, letter);\n        }\n        return sb.toString();",
  "        // TODO: implement the function\n        String[] strArr = message.toLowerCase().split(\"\
    \");\n        StringBuilder b = new StringBuilder();\n        for(int i=0;i<strArr.length;i++){\n\
    \            switch(strArr[i]){\n                case \"a\":\n               \
    \     b.append(\"a\");\n                    break;\n                case \"b\"\
    :\n                    b.append(\"b\");\n                    break;\n        \
    \        case \"c\":\n                    b.append(\"c\");\n                 \
    \   break;\n                case \"d\":\n                    b.append(\"d\");\n\
    \                    break;\n                case \"e\":\n                   \
    \ b.append(\"e\");\n                    break;\n                case \"f\":\n\
    \                    b.append(\"f\");\n                    break;\n          \
    \      case \"g\":\n                    b.append(\"g\");\n                   \
    \ break;\n                case \"h\":\n                    b.append(\"h\");\n\
    \                    break;\n                case \"i\":\n                   \
    \ b.append(\"i\");\n                    break;\n                case \"j\":\n\
    \                    b.append(\"j\");\n                    break;\n          \
    \      case \"k\":\n                    b.append(\"k\");\n                   \
    \ break;\n                case \"l\":\n                    b.append(\"l\");\n\
    \                    break;\n                case \"m\":\n                   \
    \ b.append(\"m\");\n                    break;\n                case \"n\":\n\
    \                    b.append(\"n\");\n                    break;\n          \
    \      case \"o\":\n                    b.append(\"o\");\n                   \
    \ break;\n                case \"p\":\n                    b.append(\"p\");\n\
    \                    break;\n                case \"q\":\n                   \
    \ b.append(\"q\");\n                    break;\n                case \"r\":\n\
    \                    b.append(\"r\");\n                    break;\n          \
    \      case \"s\":\n                    b.append(\"s\");\n                   \
    \ break;\n                case \"t\":\n                    b.append(\"t\");\n\
    \                    break;\n                case \"u\":\n                   \
    \ b.append(\"u\");\n                    break;\n                case \"v\":\n\
    \                    b.append(\"v\");\n                    break;\n          \
    \      case \"w\":\n                    b.append(\"w\");\n                   \
    \ break;\n                case \"x\":\n                    b.append(\"x\");\n\
    \                    break;\n                case \"y\":\n                   \
    \ b.append(\"y\");\n                    break;\n                case \"z\":\n\
    \                    b.append(\"z\");\n                    break;\n          \
    \      case \"A\":\n                    b.append(\"A\");\n                   \
    \ break;\n                case \"B\":\n                    b.append(\"B\");\n\
    \                    break;\n                case \"C\":\n                   \
    \ b.append(\"C\");\n                    break;\n                case \"D\":\n\
    \                    b.append(\"D\");\n                    break;\n          \
    \      case \"E\":\n                    b.append(\"E\");\n                   \
    \ break;\n                case \"F\":\n                    b.append(\"F\");\n\
    \                    break;\n                case \"G\":\n                   \
    \ b.append(\"G\");\n                    break;\n                case \"H\":\n\
    \                    b.append(\"H\");\n                    break;\n          \
    \      case \"I\":\n                    b.append(\"I\");\n                   \
    \ break;\n                case \"J\":\n                    b.append(\"J\");\n\
    \                    break;\n                case \"K\":\n                   \
    \ b.append(\"", "        if (message.isEmpty()) return message;\n        char[]\
    \ letters = new char[message.length()];\n        Arrays.fill(letters, ' ');\n\
    \        message = message.replaceAll(\"[^A-Z]\", \"\");\n        char[] vowels\
    \ = \"AEIOU\".toCharArray();\n        \n        List<Integer> vowelIndexes = new\
    \ ArrayList<>();\n        for(int i = 0; i < message.length(); i++) {\n      \
    \      char letter = message.charAt(i);\n            int index = letters.indexOf(letter);\n\
    \            if (index != -1) letters[index] = letter;\n        }\n        for(int\
    \ i = 0; i < vowels.length(); i++) {\n            char vowel = vowels[i];\n  \
    \          vowelIndexes.add(message.toUpperCase().indexOf(vowel));\n        }\n\
    \        \n        StringBuilder encodedMessage = new StringBuilder();\n     \
    \   for(char letter : letters) {\n            int index = vowelIndexes.get(vowelIndexes.indexOf(letter));\n\
    \            encodedMessage.append(letter.charValue());\n            vowelIndexes.set(vowelIndexes.indexOf(letter),\
    \ index + 1);\n        }\n        return encodedMessage.toString();", "      \
    \  Map<String, String> dict = new HashMap<>();\n        dict.put(\"a\",\"A\");\n\
    \        dict.put(\"b\",\"B\");\n        dict.put(\"c\",\"C\");\n        dict.put(\"\
    d\",\"D\");\n        dict.put(\"e\",\"E\");\n        dict.put(\"f\",\"F\");\n\
    \        dict.put(\"g\",\"G\");\n        dict.put(\"h\",\"H\");\n        dict.put(\"\
    i\",\"I\");\n        dict.put(\"j\",\"J\");\n        dict.put(\"k\",\"K\");\n\
    \        dict.put(\"l\",\"L\");\n        dict.put(\"m\",\"M\");\n        dict.put(\"\
    n\",\"N\");\n        dict.put(\"o\",\"O\");\n        dict.put(\"p\",\"P\");\n\
    \        dict.put(\"q\",\"Q\");\n        dict.put(\"r\",\"R\");\n        dict.put(\"\
    s\",\"S\");\n        dict.put(\"t\",\"T\");\n        dict.put(\"u\",\"U\");\n\
    \        dict.put(\"v\",\"V\");\n        dict.put(\"w\",\"W\");\n        dict.put(\"\
    x\",\"X\");\n        dict.put(\"y\",\"Y\");\n        dict.put(\"z\",\"Z\");\n\
    \        \n        \n        String word = \"\";\n        for (char c : message.toCharArray())\
    \ {\n            word = word + dict.get(c) + \"\";\n        }\n        String\
    \ result = \"\";\n        int i = 0;\n        for (int j = 0; j < word.length();\
    \ j++) {\n            \n            if (dict.containsKey(word.substring(i, j +\
    \ 1))) {\n                String vowel = word.substring(i, j + 1);\n         \
    \       String letter = dict.keySet().stream().filter(e -> e.equals(vowel)).findFirst().get();\n\
    \                String aLetter = word.substring(i, i + 2);\n                String\
    \ aVowel = word.substring(i + 2, i + 4);\n                result = result + letter\
    \ + aLetter + aVowel + vowel;\n            }\n            i++;\n        }\n  \
    \      return result;", "        \n        String messageToEncode;\n        \n\
    \        messageToEncode = message.toUpperCase();\n        \n        String replaceVowels\
    \ = messageToEncode.replaceAll(\"[AEIOUaeiou]\", \"\");\n        String replaceLetter\
    \ = replaceVowels.replaceAll(\"[AEIOUaeiouAEIOU]\", (e) -> \"AEIOU\".indexOf(e));\n\
    \        String encodedMessage = replaceLetter.replaceAll(\"[AEIOUaeiouAEIOU]\"\
    , (e) -> \"AEIOU\".indexOf(e)).concat(\"AEIOU\".concat(messageToEncode));\n  \
    \      \n        return encodedMessage;", "        StringBuilder result = new\
    \ StringBuilder(message.length());\n        boolean changeCase = true;\n     \
    \   for(int i = 0; i < message.length(); i++) {\n            char current = message.charAt(i);\n\
    \            if(current == 't' || current == 'T')\n                changeCase\
    \ = true;\n            if(current == 'H' || current == 'h')\n                changeCase\
    \ = false;\n            if(changeCase) {\n                String currentLowerCase\
    \ = Character.toLowerCase(current);\n                if(currentLowerCase == current)\
    \ {\n                    currentLowerCase = Character.toUpperCase(current);\n\
    \                }\n                result.append(currentLowerCase);\n       \
    \     } else {\n                result.append(current);\n            }\n     \
    \   }\n        return result.toString();", "        // Write your code here.\n\
    \        // To do this, first replace all vowels with the number that \n     \
    \   // appears 2 places ahead of it. For this, we create a hash \n        // that\
    \ maps each letter to the position in alphabet where the \n        // letter appears.\
    \ \n        HashMap<String, Integer> vowelToNum = new HashMap<>();\n        vowelToNum.put(\"\
    A\", 0);\n        vowelToNum.put(\"E\", 0);\n        vowelToNum.put(\"I\", 0);\n\
    \        vowelToNum.put(\"O\", 0);\n        vowelToNum.put(\"U\", 0);\n      \
    \  vowelToNum.put(\"a\", 0);\n        vowelToNum.put(\"e\", 0);\n        vowelToNum.put(\"\
    i\", 0);\n        vowelToNum.put(\"o\", 0);\n        vowelToNum.put(\"u\", 0);\n\
    \n        // Create a list that contains all letters in english alphabet \n  \
    \      ArrayList<String> englishAlphabet = new ArrayList<String>();\n        englishAlphabet.add(\"\
    a\");\n        englishAlphabet.add(\"b\");\n        englishAlphabet.add(\"c\"\
    );\n        englishAlphabet.add(\"d\");\n        englishAlphabet.add(\"e\");\n\
    \        englishAlphabet.add(\"f\");\n        englishAlphabet.add(\"g\");\n  \
    \      englishAlphabet.add(\"h\");\n        englishAlphabet.add(\"i\");\n    \
    \    englishAlphabet.add(\"j\");\n        englishAlphabet.add(\"k\");\n      \
    \  englishAlphabet.add(\"l\");\n        englishAlphabet.add(\"m\");\n        englishAlphabet.add(\"\
    n\");\n        englishAlphabet.add(\"o\");\n        englishAlphabet.add(\"p\"\
    );\n        englishAlphabet.add(\"q\");\n        englishAlphabet.add(\"r\");\n\
    \        englishAlphabet.add(\"s\");\n        englishAlphabet.add(\"t\");\n  \
    \      englishAlphabet.add(\"u\");\n        englishAlphabet.add(\"v\");\n    \
    \    englishAlphabet.add(\"w\");\n        englishAlphabet.add(\"x\");\n      \
    \  englishAlphabet.add(\"y\");\n        englishAlphabet.add(\"z\");\n\n      \
    \  // Now create a hash that maps each letter in message to the \n        // position\
    \ in english alphabet where the letter appears.\n        HashMap<String, Integer>\
    \ messageToNum = new HashMap<>();\n        for (int i = 0; i < message.length();\
    \ i++) {\n            String letter = message.substring(i, i + 1);\n         \
    \   int position = englishAlphabet.indexOf(letter);\n            messageToNum.put(letter,\
    \ position);\n        }\n        ArrayList<String> encryptedMessage = new ArrayList<String>();\n\
    \n        // Go through each letter in message", '        return message;', " \
    \       // write your logic here\n        return message;", "        String s\
    \ = \"\";\n        \n        for(int i = 0; i < message.length(); i++) {\n   \
    \         char c = message.charAt(i);\n            \n            //replace every\
    \ Vowel with 2+ letter in alphabet\n            if(c >= 'A' && c <= 'Z') {\n \
    \               s+= c;\n            } else if(c >= 'a' && c <= 'z') {\n      \
    \          s+= c;\n            } else {\n                s+= String.valueOf((char)\
    \ (c + 1));\n            }\n        }\n        \n        return s;", "       \
    \ String encodedMessage = \"\";\n        for (char c : message.toCharArray())\
    \ {\n            if (Character.isUpperCase(c)) {\n                encodedMessage\
    \ += Character.toUpperCase(c);\n            } else {\n                encodedMessage\
    \ += c;\n            }\n        }\n        for (int i = 0; i < message.length()\
    \ - 1; i++) {\n            if (Character.isUpperCase(message.charAt(i)) \n   \
    \                 && Character.isUpperCase(message.charAt(i + 1))) {\n       \
    \         String two = message.substring(i, i + 2);\n                encodedMessage\
    \ += two.toUpperCase();\n            }\n        }\n        return encodedMessage;",
  "        Set<Character> vowels = Arrays.stream(\"aeiouAEIOU\").collect(Collectors.toSet());\n\
    \        String result = message;\n        for (int i = 0; i < result.length();\
    \ i++) {\n            char c = result.charAt(i);\n            if (vowels.contains(c))\
    \ {\n                for (int j = i; j < i + 2; j++) {\n                    c\
    \ = result.charAt(j);\n                    result.charAt(i) = Character.toLowerCase(c);\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   int vowelPosition = findVowelPosition(message);\n        StringBuilder newString\
    \ = new StringBuilder();\n        for (int i = 0; i < message.length(); i++) {\n\
    \            char currentChar = message.charAt(i);\n            if (Character.isLetterOrDigit(currentChar))\
    \ {\n                if (vowelPosition > i) {\n                    newString.append(message.charAt(vowelPosition));\n\
    \                }\n                newString.append(Character.toLowerCase(currentChar));\n\
    \                if (vowelPosition > i) {\n                    newString.append(message.charAt(i\
    \ - 1));\n                }\n            }\n        }\n        return newString.toString();",
  '        // TODO: ', "        boolean allCaps = false;\n        char previousVowel;\n\
    \        StringBuilder newMessage = new StringBuilder();\n        for (int i =\
    \ 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n\
    \            boolean isVowel = false;\n            if (Character.isLetter(ch))\
    \ {\n                if (Character.isUpperCase(ch)) {\n                    allCaps\
    \ = true;\n                }\n                isVowel = Character.isVowel(ch);\n\
    \            } else if (Character.isLowerCase(ch)) {\n                isVowel\
    \ = Character.isVowel(ch);\n            }\n            if (allCaps) {\n      \
    \          if (isVowel) {\n                    if (previousVowel == 'a') {\n \
    \                       newMessage.append(Character.toUpperCase(ch));\n      \
    \              } else {\n                        newMessage.append(Character.toLowerCase(ch));\n\
    \                    }\n                    previousVowel = ch;\n            \
    \    } else {\n                    newMessage.append(Character.toUpperCase(ch));\n\
    \                }\n            } else {\n                if (isVowel) {\n   \
    \                 newMessage.append(Character.toLowerCase(ch));\n            \
    \        previousVowel = ch;\n                } else {\n                    newMessage.append(Character.toUpperCase(ch));\n\
    \                }\n            }\n        }\n        return newMessage.toString();",
  "        \n        String[] alphabet = {\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"};\n        String[]\
    \ vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"y\"};\n        \n        int\
    \ x = 0, y = 0;\n        \n        ArrayList<String> encoded = new ArrayList<String>();\n\
    \        \n        // We go through all the characters and see if we can switch\
    \ \n        // the case of the letter (swap the case of all letters \n       \
    \ // and if the letter is a vowel, replace all vowels in the \n        // message\
    \ with the letter that appears 2 places ahead of that \n        // vowel in the\
    \ english alphabet). \n        for(int i = 0; i < message.length(); i++) {\n \
    \           String letter = message.substring(i, i+1);\n            \n       \
    \     if(letter.equalsIgnoreCase(\"a\") || letter.equalsIgnoreCase(\"e\") || letter.equalsIgnoreCase(\"\
    i\") || letter.equalsIgnoreCase(\"o\") || letter.equalsIgnoreCase(\"u\") || letter.equalsIgnoreCase(\"\
    y\")) {\n                \n                x += alphabet.indexOf(letter);\n  \
    \              \n            } else if(letter.equalsIgnoreCase(\"b\")) {\n   \
    \             y += alphabet.indexOf(letter);\n                x += alphabet.indexOf(letter);\n\
    \                \n            } else if(letter.equalsIgnoreCase(\"c\")) {\n \
    \               y += alphabet.indexOf(letter);\n                y += alphabet.indexOf(letter);\n\
    \                x += alphabet.indexOf(letter);\n                \n          \
    \  } else if(letter.equalsIgnoreCase(\"d\")) {\n                y += alphabet.indexOf(letter);\n\
    \                y += alphabet.indexOf(letter);\n                y += alphabet.indexOf(letter);\n\
    \                x += alphabet.indexOf(letter);\n                \n          \
    \  } else if(letter.equalsIgnoreCase(\"e\")) {\n                x += alphabet.indexOf(letter);\n\
    \                y += alphabet.indexOf(letter);\n                y += alphabet.indexOf(letter);\n\
    \                y += alphabet.indexOf(letter);\n                x += alphabet.indexOf(letter);\n\
    \                \n            } else if(letter.equalsIgnoreCase(\"f\")) {\n \
    \               x += alphabet.indexOf(letter);\n                y += alphabet.indexOf(letter);\n\
    \                x += alphabet.indexOf(letter);\n                y += alphabet.indexOf(letter);\n\
    \                x += alphabet.indexOf(letter);\n                \n          \
    \  } else if(letter.equalsIgnoreCase(\"g\")) {\n                y += alphabet.indexOf(letter);\n\
    \                y += alphabet.indexOf(letter);\n                y += alphabet.indexOf(letter);\n\
    \                x += alphabet.indexOf(letter);\n                y += alphabet.",
  "        \n        //write your solution here\n        \n        StringBuilder builder\
    \ = new StringBuilder();\n        for(char c:message.toCharArray()) {\n      \
    \      if(Character.isLetter(c)) {\n                String lowerCaseLetter = Character.toString(c).toLowerCase();\n\
    \                for(char d:lowerCaseLetter.toCharArray()) {\n               \
    \     if(Character.isLetter(d) && c!=d) {\n                        String lowerCaseVowel\
    \ = Character.toString(d).toLowerCase();\n                        if(lowerCaseVowel.equals(\"\
    a\") || lowerCaseVowel.equals(\"e\") || lowerCaseVowel.equals(\"i\") || lowerCaseVowel.equals(\"\
    o\") || lowerCaseVowel.equals(\"u\")){\n                            builder.append(lowerCaseLetter);\n\
    \                            break;\n                        }\n             \
    \           else {\n                            builder.append(lowerCaseVowel);\n\
    \                            break;\n                        }\n             \
    \       }\n                }\n                builder.append(c);\n           \
    \ }\n        }\n        \n        return builder.toString();", "        // Convert\
    \ message to lower case \n        message = message.toLowerCase();\n\n       \
    \ // Make list of all letters in the alphabet\n        List<Character> alphabet\
    \ = new ArrayList<>(25);\n        alphabet.addAll((Collection<Character>) Arrays.asList('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'));\n\
    \n        // Make list of all vowels in the alphabet\n        List<Character>\
    \ vowels = new ArrayList<>(25);\n        vowels.addAll((Collection<Character>)\
    \ Arrays.asList('a', 'e', 'i', 'o', 'u'));\n\n        // Create a mapper between\
    \ letters and indexes of the alphabet\n        Map<Character, Integer> alphabetIndex\
    \ = new HashMap<>();\n        for (Integer i = 0;i<alphabet.size();i++) {\n  \
    \          alphabetIndex.put(alphabet.get(i), i);\n        }\n\n        // Create\
    \ a mapper between vowels and indexes of the vowel list\n        Map<Character,\
    \ Integer> vowelIndex = new HashMap<>();\n        for (Integer i = 0;i<vowels.size();i++)\
    \ {\n            vowelIndex.put(vowels.get(i), i);\n        }\n\n        // Iterate\
    \ through the message, replacing all vowels with the letter 2 places \n      \
    \  // ahead of the vowel. \n        // For each letter, check whether it is in\
    \ the alphabet and in \n        // the vowel list. If it is in the vowel list,\
    \ then the index is \n        // the position of the letter 2 places ahead of\
    \ the vowel in the \n        // alphabet. If the letter is not in the alphabet\
    \ and not in the vowel list, \n        // then the index is -1. \n        List<Integer>\
    \ indexes = new ArrayList<>();\n        for (Character letter : message.toCharArray())\
    \ {\n            int letterIndex = (int)letter - 'a';\n            int vowelIndex\
    \ = vowelIndex.get(letter);\n            if (letterIndex >= 0 && letterIndex <\
    \ alphabet.size() && vowelIndex >= 0 && vowelIndex < vowels.size()) {\n      \
    \          indexes.add(letterIndex + vowelIndex);\n            }\n        }\n\n\
    \        // Convert list to string and return\n        return IntStream.range(0,\
    \ indexes.size()).mapToObj(i -> alphabet.get(indexes.get(i)))\n              \
    \  .collect(Collectors.joining());", "        StringBuilder builder = new StringBuilder(message);\n\
    \        Arrays.sort(message.chars().toArray());\n        Arrays.stream(message.split(\"\
    \")).map(char -> getTwoChar(message.indexOf(char), builder)).forEach(builder::append);\n\
    \        return builder.toString();", "       \n        char[] array = message.toCharArray();\n\
    \       \n        for(int i = 0; i < array.length; i++) {\n            switch(array[i])\
    \ {\n                case 'a':\n                    array[i] = 'e';\n        \
    \            array[i+1] = 'r';\n                    break;\n                case\
    \ 'e':\n                    array[i] = 'a';\n                    array[i+1] =\
    \ 'r';\n                    break;\n                case 'i':\n              \
    \      array[i] = 'a';\n                    array[i+1] = 's';\n              \
    \      break;\n                case 'o':\n                    array[i] = 'o';\n\
    \                    array[i+1] = 'u';\n                    break;\n         \
    \       case 'u':\n                    array[i] = 'o';\n                    array[i+1]\
    \ = 'o';\n                    break;\n                case 'A':\n            \
    \        array[i] = 'E';\n                    array[i+1] = 'R';\n            \
    \        break;\n                case 'E':\n                    array[i] = 'A';\n\
    \                    array[i+1] = 'R';\n                    break;\n         \
    \       case 'I':\n                    array[i] = 'A';\n                    array[i+1]\
    \ = 'S';\n                    break;\n                case 'O':\n            \
    \        array[i] = 'O';\n                    array[i+1] = 'U';\n            \
    \        break;\n                case 'U':\n                    array[i] = 'O';\n\
    \                    array[i+1] = 'O';\n                    break;\n         \
    \   }\n        }\n        return new String(array);", "        char[] letters\
    \ = message.toCharArray();\n        StringBuilder sb = new StringBuilder();\n\
    \        int i = 0;\n        while (i < letters.length){\n            char letter\
    \ = letters[i];\n            i++;\n            int j = i;\n            while (j\
    \ < letters.length && letter == letters[j]){\n                j++;\n         \
    \   }\n            if(j - i > 1){\n                char a = letter;\n        \
    \        char b = letters[j - 1];\n                letter = a + b;\n         \
    \   }\n            sb.append(letter);\n        }\n        return sb.toString();",
  "        // TODO: Write the implementation here\n        String firstLetter = \"\
    \";\n        String secondLetter = \"\";\n        char[] vowels = \"aeiou\".toCharArray();\n\
    \n        ArrayList <String> firstLetterArrayList = new ArrayList<String>();\n\
    \        ArrayList <String> secondLetterArrayList = new ArrayList<String>();\n\
    \n        for (int i = 0; i < message.length(); i++) {\n            char ch =\
    \ message.charAt(i);\n            firstLetter = Character.toString(ch);\n    \
    \        if (Character.isLetter(ch)) {\n                firstLetterArrayList.add(firstLetter);\n\
    \            }\n\n            if (Character.isLetter(ch)) {\n                secondLetterArrayList.add(firstLetter);\n\
    \            }\n        }\n\n        int firstLetterCount = 0;\n        int secondLetterCount\
    \ = 0;\n\n        for (int i = 0; i < firstLetterArrayList.size(); i++) {\n  \
    \          char firstLetterChar = (char) firstLetterArrayList.get(i);\n      \
    \      char secondLetterChar = (char) secondLetterArrayList.get(i);\n\n      \
    \      if (firstLetterChar != secondLetterChar) {\n                firstLetterCount++;\n\
    \            }\n            if (firstLetterChar != firstLetterChar) {\n      \
    \          secondLetterCount++;\n            }\n        }\n\n        for (int\
    \ i = 0; i < firstLetterArrayList.size(); i++) {\n            char firstLetterChar\
    \ = (char) firstLetterArrayList.get(i);\n            char secondLetterChar = (char)\
    \ secondLetterArrayList.get(i);\n\n            if (firstLetterChar != secondLetterChar)\
    \ {\n                firstLetterArrayList.set(i, firstLetterArrayList.get(i));\n\
    \                secondLetterArrayList.set(i, secondLetterArrayList.get(i));\n\
    \            }\n        }\n\n        for (int i = 0; i < firstLetterArrayList.size();\
    \ i++) {\n            char firstLetterChar = (char) firstLetterArrayList.get(i);\n\
    \            char secondLetterChar = (char) secondLetterArrayList.get(i);\n  \
    \          if (firstLetterChar != secondLetterChar) {\n                firstLetterArrayList.set(i,\
    \ firstLetterArrayList.get(i));\n                secondLetterArrayList.set(i,\
    \ secondLetterArrayList.get(i));\n            }\n        }\n\n        StringBuilder\
    \ sb = new StringBuilder();\n        boolean firstLetterIsVowel = false;\n   \
    \     boolean secondLetterIsVowel = false;\n\n        for (int i = 0; i < firstLetterArrayList.size();\
    \ i++) {\n            char firstLetterChar = (char) firstLetterArrayList.get(i);\n\
    \            char secondLetterChar = (char) secondLetterArrayList.get(i);\n\n\
    \            if (firstLetterChar != secondLetterChar) {\n                if (Character.isLetter(firstLetterChar))\
    \ {\n                    firstLetterIsVowel = true;\n                    secondLetterIsVowel\
    \ = false;\n                }\n                if (Character.isLetter(secondLetterChar))\
    \ {\n                    ", "        \n        String finalOutput = \"\";\n  \
    \      \n        // Iterate over each char in message\n        for (char letter\
    \ : message.toCharArray()) {\n            // Get char code of current char\n \
    \           int charCode = letter;\n            // If char is lowercase, replace\
    \ it with lowercase\n            if (charCode >= 97 && charCode <= 122) {\n  \
    \              charCode -= 32;\n            }\n            // If char is a vowel,\
    \ replace it with 2nd letter ahead of it\n            if (charCode >= 65 && charCode\
    \ <= 90) {\n                charCode += 26;\n            }\n            // Append\
    \ the char to the output string\n            finalOutput = finalOutput + Character.toString(charCode);\n\
    \        }\n        \n        return finalOutput;", "        Map<String, String>\
    \ map = \n            Map.of(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\"\
    , \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \n                 \
    \   \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"\
    , \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\"\
    , \"W\", \"X\", \"Y\", \"Z\");\n        List<String> list = new ArrayList<>();\n\
    \        for(char c : message.toCharArray()) {\n            list.add(map.containsKey(c)\
    \ ? map.get(c) : String.valueOf(c));\n        }\n        return list.stream().map(s\
    \ -> {\n            char previous = map.containsKey(s) ? map.get(s) : 'X';\n \
    \           char next = map.containsKey(s) ? map.get(s) : 'X';\n            while\
    \ (Character.isLowerCase(previous) && Character.isLowerCase(next)) {\n       \
    \         char temp = next;\n                next = map.containsKey(s) ? map.get(s)\
    \ : 'X';\n                previous = temp;\n            }\n            while (Character.isUpperCase(previous)\
    \ && Character.isUpperCase(next)) {\n                char temp = previous;\n \
    \               previous = map.containsKey(s) ? map.get(s) : 'X';\n          \
    \      next = temp;\n            }\n            return Character.toUpperCase(previous)\
    \ + Character.toLowerCase(next);\n        }).collect(Collectors.joining(\"\"));",
  "        int vowels = message.length() - message.trim().length();\n        int messageLen\
    \ = message.length();\n        StringBuilder sb = new StringBuilder(message);\n\
    \        Arrays.asList(sb.toString().split(\" \")).forEach(s -> {\n          \
    \  StringBuilder sb2 = new StringBuilder();\n            char[] chars = s.toCharArray();\n\
    \            for (int i = 0; i < chars.length; ++i) {\n                char c\
    \ = chars[i];\n                if (Character.isLetter(c)) {\n                \
    \    char c1 = (char) (i + 2);\n                    if (c1 >= 'a' && c1 <= 'z')\
    \ {\n                        sb2.append(c1);\n                    } else {\n \
    \                       sb2.append(Character.toUpperCase(c));\n              \
    \      }\n                } else {\n                    sb2.append(c);\n     \
    \           }\n            }\n            sb.setLength(0);\n            sb.append(sb2.toString());\n\
    \        });\n        return sb;", "        char[] ch = message.toCharArray();\n\
    \        int len = ch.length;\n        StringBuilder sb = new StringBuilder(len*2);\n\
    \        for( int i = 0; i < len; i++ ) {\n            char ch2 = ch[i];\n   \
    \         if( ch2 > 96 && ch2 < 123 ) {\n                char ch3 = ch2 - 32;\n\
    \                char ch4 = ch3 - 32;\n                char ch5 = ch4 - 32;\n\
    \                if( ch5 < 65 || ch5 > 90 ) {\n                    ch5 = ch4 -\
    \ 32;\n                }\n                char ch6 = ch5 + 32;\n             \
    \   if( ch6 < 65 || ch6 > 90 ) {\n                    ch6 = ch5 - 32;\n      \
    \          }\n                sb.append(ch6);\n            }\n            else\
    \ {\n                sb.append(ch2);\n            }\n        }\n        return\
    \ sb.toString();", "        //Write your code here.\n        char[] charArray\
    \ = message.toCharArray();\n        Arrays.stream(charArray).map(e -> Character.toUpperCase(e)).collect(Collectors.toCollection()).forEach((e)\
    \ -> {\n            char[] charArray1 = e.toCharArray();\n            Arrays.stream(charArray1).map(f\
    \ -> Character.toUpperCase(f)).collect(Collectors.toCollection()).forEach((f)\
    \ -> {\n                if (Arrays.asList('a', 'e', 'i', 'o', 'u').contains(f)\
    \ && Arrays.asList('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z').contains(e)) {\n              \
    \      char[] charArray2 = f.toCharArray();\n                    Arrays.stream(charArray2).map((g)\
    \ -> Character.toUpperCase(g)).collect(Collectors.toCollection()).forEach((g)\
    \ -> {\n                        char[] charArray3 = g.toCharArray();\n       \
    \                 Arrays.stream(charArray3).map((h) -> Character.toUpperCase(h)).collect(Collectors.toCollection()).forEach((h)\
    \ -> {\n                            char[] charArray4 = h.toCharArray();\n   \
    \                         Arrays.stream(charArray4).map((i) -> Character.toUpperCase(i)).collect(Collectors.toCollection()).forEach((i)\
    \ -> {\n                                char[] charArray5 = i.toCharArray();\n\
    \                                Arrays.stream(charArray5).map((j) -> Character.toUpperCase(j)).collect(Collectors.toCollection()).forEach((j)\
    \ -> {\n                                    char[] charArray6 = j.toCharArray();\n\
    \                                    Arrays.stream(charArray6).map((k) -> Character.toUpperCase(k)).collect(Collectors.toCollection()).forEach((k)\
    \ -> {\n                                        char[] charArray7 = k.toCharArray();\n\
    \                                        Arrays.stream(charArray7).map((l) ->\
    \ Character.toUpperCase(l)).collect(Collectors.toCollection()).forEach((l) ->\
    \ {\n                                            char[] charArray8 = l.toCharArray();\n\
    \                                            Arrays.stream(charArray8).map((m)\
    \ -> Character.toUpperCase(m)).collect(Collectors.toCollection()).forEach((m)\
    \ -> {\n                                                char[] charArray9 = m.toCharArray();\n\
    \                                                Arrays.stream(charArray9).map((n)\
    \ -> Character.toUpperCase(n)).collect(Collectors.toCollection()).forEach((n)\
    \ -> {\n                                                    char[] charArray10\
    \ = n.toCharArray();\n                                                    Arrays.stream(charArray10).map((o)\
    \ -> Character.toUpperCase", "        int[] positions = { 0, 2, 5, 8, 11 };\n\
    \        return IntStream.range(0, message.length())\n                .mapToObj(i\
    \ -> message.charAt(i) + message.charAt(i+1))\n                .map(x -> (char)\
    \ Character.toUpperCase(x)).collect(\n                Collectors.joining(\"\"\
    , \"\", \"\", \"\", \"\", \"\"));", "        StringBuffer sb = new StringBuffer();\n\
    \        for (int i = 0; i < message.length(); i++) {\n            char letter\
    \ = message.charAt(i);\n            // replace all vowels with their 2 places\
    \ ahead letters\n            int index = vowels.indexOf(letter);\n           \
    \ if (index != -1) {\n                String newLetter = vowels.get(index);\n\
    \                char newLetter2 = vowels.get(index + 1);\n                letter\
    \ = newLetter2.toUpperCase().charAt(0);\n                sb.append(letter);\n\
    \            } else {\n                sb.append(letter);\n            }\n   \
    \     }\n        return sb.toString();", "        char[] alphabet = \n       \
    \     message.toLowerCase().toCharArray().clone();\n        Arrays.sort(alphabet,\
    \ (c1, c2) -> (c1 >c2)?1:(c1<c2)?-1:0);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < message.length(); i++) {\n            if (message.charAt(i)\
    \ == ' ') {\n                sb.append(message.charAt(i));\n                continue;\n\
    \            }\n            char c = message.charAt(i);\n            boolean found\
    \ = false;\n            for (int j = 0; j < alphabet.length; j++) {\n        \
    \        if (alphabet[j] == c) {\n                    char ch = alphabet[j];\n\
    \                    alphabet[j] = message.charAt(i+2);\n                    alphabet[i+2]\
    \ = ch;\n                    found = true;\n                    break;\n     \
    \           }\n            }\n            if (!found) {\n                sb.append(c);\n\
    \            }\n        }\n        return sb.toString();", "        char[] input\
    \ = message.toCharArray();\n        StringBuilder result = new StringBuilder(\"\
    \");\n        \n        // Get index of first vowel in input string.\n       \
    \ int index = 0;\n        char letter = ' ';\n        while (letter != 'a' &&\
    \ letter != 'e' && letter != 'i' && letter != 'o' && letter != 'u') {\n      \
    \      index = input.indexOf(letter);\n            if (index > -1) {\n       \
    \         letter = input[index];\n            } else {\n                break;\n\
    \            }\n        }\n        \n        // Use index to find index of two\
    \ adjacent vowels.\n        int index2 = index;\n        while (index2 != -1 &&\
    \ index2 == index) {\n            while (index2 < input.length - 1) {\n      \
    \          if (input[index2] != 'a' && input[index2] != 'e' && input[index2] !=\
    \ 'i' && input[index2] != 'o' && input[index2] != 'u') {\n                   \
    \ index2 = index2 + 1;\n                } else {\n                    break;\n\
    \                }\n            }\n            \n            if (index2 != -1)\
    \ {\n                letter = input[index2];\n            } else {\n         \
    \       break;\n            }\n            \n            if (letter == 'a') {\n\
    \                result.append(\"a\");\n            } else if (letter == 'e')\
    \ {\n                result.append(\"e\");\n            } else if (letter == 'i')\
    \ {\n                result.append(\"i\");\n            } else if (letter == 'o')\
    \ {\n                result.append(\"o\");\n            } else if (letter == 'u')\
    \ {\n                result.append(\"u\");\n            }\n            index2\
    \ = index + 1;\n            \n        }\n        \n        while (index != -1)\
    \ {\n            letter = input[index];\n            if (letter == 'a') {\n  \
    \              result.append(\"a\");\n            } else if (letter == 'e') {\n\
    \                result.append(\"e\");\n            } else if (letter == 'i')\
    \ {\n                result.append(\"i\");\n            } else if (letter == 'o')\
    \ {\n                result.append(\"o\");\n            } else if (letter == 'u')\
    \ {\n                result.append(\"u\");\n            }\n            index =\
    \ index - 1;\n        }\n        \n        result.append(input);\n        return\
    \ result.toString();", "        char[] arr = message.toCharArray();\n        Arrays.stream(arr).map(i\
    \ -> Character.toUpperCase(i)).collect(\n                Collectors.toList()).forEach((e)\
    \ -> {\n            if (e.equals('A') || e.equals('a'))\n                e = e.toUpperCase();\n\
    \            if (e.equals('E') || e.equals('e'))\n                e = e.toLowerCase();\n\
    \            if (e.equals('I') || e.equals('i'))\n                e = e.toUpperCase();\n\
    \            if (e.equals('O') || e.equals('o'))\n                e = e.toUpperCase();\n\
    \            if (e.equals('U') || e.equals('u'))\n                e = e.toUpperCase();\n\
    \            if (e.equals('Y') || e.equals('y'))\n                e = e.toLowerCase();\n\
    \        });\n        StringBuilder result = new StringBuilder();\n        for\
    \ (int i = 0; i < arr.length - 1; i++) {\n            if (arr[i] != arr[i + 1])\
    \ {\n                result.append(arr[i]);\n                result.append(arr[i\
    \ + 1]);\n                i++;\n            } else {\n                result.append(arr[i]);\n\
    \            }\n        }\n        result.append(arr[i]);\n        return result.toString();",
  '        return message;', "        char[] letters = message.toCharArray();\n  \
    \      StringBuilder sb = new StringBuilder();\n\n        for(int i = 0; i < letters.length;\
    \ ++i) {\n            char letter = letters[i];\n            if (letter >= 'a'\
    \ && letter <= 'z') {\n                char replace = letter;\n              \
    \  char nextLetter = letters[i + 1];\n                if (nextLetter >= 'a' &&\
    \ nextLetter <= 'z') {\n                    replace = nextLetter;\n          \
    \      }\n                letters[i] = replace;\n            }\n        }\n\n\
    \        for (int i = 0; i < letters.length; ++i) {\n            sb.append(letters[i]);\n\
    \        }\n        return sb.toString();", "        StringBuilder output = new\
    \ StringBuilder();\n        HashMap<String, Integer> vowelMap = new HashMap<String,\
    \ Integer>();\n        // populate the map of vowel positions and their associated\
    \ letters\n        vowelMap.put(\"A\", 1);\n        vowelMap.put(\"E\", 1);\n\
    \        vowelMap.put(\"I\", 1);\n        vowelMap.put(\"O\", 1);\n        vowelMap.put(\"\
    U\", 1);\n        vowelMap.put(\"a\", 1);\n        vowelMap.put(\"e\", 1);\n \
    \       vowelMap.put(\"i\", 1);\n        vowelMap.put(\"o\", 1);\n        vowelMap.put(\"\
    u\", 1);\n        // loop through message characters\n        for (int i = 0;\
    \ i < message.length(); i++) {\n            // if the character is a vowel, append\
    \ the letter 2 positions \n            // ahead of it in the alphabet. \n    \
    \        if (vowelMap.containsKey(message.charAt(i))) {\n                // create\
    \ a map of vowel positions and letter positions\n                Map<String, Integer>\
    \ map = new HashMap<String, Integer>();\n                map.put(\"A\", 1);\n\
    \                map.put(\"B\", 2);\n                map.put(\"C\", 3);\n    \
    \            map.put(\"D\", 4);\n                map.put(\"E\", 5);\n        \
    \        map.put(\"F\", 6);\n                map.put(\"G\", 7);\n            \
    \    map.put(\"H\", 8);\n                map.put(\"I\", 9);\n                map.put(\"\
    J\", 10);\n                map.put(\"K\", 11);\n                map.put(\"L\"\
    , 12);\n                map.put(\"M\", 13);\n                map.put(\"N\", 14);\n\
    \                map.put(\"O\", 15);\n                map.put(\"P\", 16);\n  \
    \              map.put(\"Q\", 17);\n                map.put(\"R\", 18);\n    \
    \            map.put(\"S\", 19);\n                map.put(\"T\", 20);\n      \
    \          map.put(\"U\", 21);\n                map.put(\"V\", 22);\n        \
    \        map.put(\"W\", 23);\n                map.put(\"X\", 24);\n          \
    \      map.put(\"Y\", 25);\n                map.put(\"Z\", 26);\n            \
    \    // find letter after vowel in alphabet\n                int vowelPos = vowelMap.get(message.charAt(i));\n\
    \                // append the letter 2 positions ahead of the vowel\n       \
    \         output.append(map.get(vowelMap.keySet().toArray()[vowelPos - 1]));\n\
    \                // append the letter to the output string\n                output.append(message.charAt(i));\n\
    \            } else {\n                // append the letter to the output string\n\
    \                output.append(message.charAt(i));\n            }\n        }\n\
    \        return output.toString();", '        // TODO: write this function', " \
    \       \n        // Initialize a new String variable \n        String result\
    \ = \"\";\n        \n        // Initialize a new array variable \n        String[]\
    \ letters = message.toCharArray();\n        \n        // Initialize an empty array\
    \ variable \n        String[] vowels = new String[26];\n        \n        // Loop\
    \ through all the letters in the message \n        for(char letter : letters)\
    \ {\n            // If the current letter is capital \n            if(Character.isUpperCase(letter))\
    \ {\n                // Append the letter to the result String \n            \
    \    result += letter;\n            // Else if the current letter is lower \n\
    \            } else if(Character.isLowerCase(letter)) {\n                // Get\
    \ the ASCII value of the current letter\n                int letterValue = letter.intValue();\n\
    \                // Check if the letter has an ASCII value of 26\n           \
    \     if(letterValue == 26) {\n                    // Set the index of the letter\
    \ with the letterValue\n                    letterValue = 'A';\n             \
    \       // Set the letter at that index in the array vowels\n                \
    \    vowels[letterValue] = letter;\n                // Else if the letter has\
    \ an ASCII value of 27\n                } else if(letterValue == 27) {\n     \
    \               // Set the index of the letter with the letterValue\n        \
    \            letterValue = 'a';\n                    // Set the letter at that\
    \ index in the array vowels\n                    vowels[letterValue] = letter;\n\
    \                // Else if the letter has an ASCII value of 28\n            \
    \    } else if(letterValue == 28) {\n                    // Set the index of the\
    \ letter with the letterValue\n                    letterValue = 'B';\n      \
    \              // Set the letter at that index in the array vowels\n         \
    \           vowels[letterValue] = letter;\n                // Else if the letter\
    \ has an ASCII value of 29\n                } else if(letterValue == 29) {\n \
    \                   // Set the index of the letter with the letterValue\n    \
    \                letterValue = 'b';\n                    // Set the letter at\
    \ that index in the array vowels\n                    vowels[letterValue] = letter;\n\
    \                // Else if the letter has an ASCII value of 30\n            \
    \    } else if(letterValue == 30) {\n                    // Set the index of the\
    \ letter with the letterValue\n                    letterValue = 'C';\n      \
    \              // Set the letter at that index in the array vowels\n         \
    \           vowels[letterValue] = letter;\n                // Else if the letter\
    \ has an ASCII value of 31\n                } else if(letterValue == 31) {\n \
    \                   // Set the index of the letter with the letterValue\n    \
    \                letterValue = 'c';\n                    // Set the letter at\
    \ that index in the array vowels\n                    vowels[letterValue] = letter;\n\
    \                // Else if the letter has an ASCII value of 32\n            \
    \    } else if(letterValue == 32) {\n                    // Set the index of the\
    \ letter with the letterValue\n                    letterValue = 'D';\n      \
    \              // Set the letter at that index in the array vowels\n         \
    \           vowels[letterValue] = letter;\n                // Else if the letter\
    \ has an ASCII ", "        String result = message;\n        int size = message.length();\n\
    \        char[] buffer = new char[size];\n        for (int i = 0; i < size; i++)\
    \ {\n            char c = message.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                result = (char) (c + 32); // 32 is the ASCII code of 'A'\n\
    \            } else if (Character.isLowerCase(c)) {\n                result =\
    \ (char) (c + 97); // 97 is the ASCII code of 'a'\n            }\n           \
    \ if (Character.isLetter(c)) {\n                buffer[i] = c;\n            }\n\
    \        }\n        return result;", "        String alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n        StringBuilder sb = new StringBuilder();\n        for (int i = 0; i\
    \ < message.length(); i++) {\n            char c = message.charAt(i);\n      \
    \      if (alphabet.length() - 1 >= c) {\n                c = alphabet.charAt(c\
    \ - 1);\n            }\n            sb.append(c);\n        }\n        return sb;",
  "        // Your code goes here\n        \n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < message.length(); i++) {\n            String l =\
    \ message.substring(i, i + 1);\n            int vowelCount = 0;\n            for\
    \ (int j = i + 1; j < message.length(); j++) {\n                if (message.get(j).equalsIgnoreCase(l))\
    \ {\n                    vowelCount++;\n                }\n            }\n   \
    \         if (vowelCount == 2) {\n                result.append((char)(message.get()\
    \ + 1));\n            } else if (message.get(i).equalsIgnoreCase(l)) {\n     \
    \           result.append(l);\n            } else {\n                result.append(message.get(i));\n\
    \            }\n        }\n        return result.toString();", "        StringBuilder\
    \ encoded = new StringBuilder();\n        for (int i = 0; i < message.length();\
    \ i++) {\n            char c = message.charAt(i);\n            if (Character.isLowerCase(c))\n\
    \                encoded.append(Character.toUpperCase(c));\n            else if\
    \ (Character.isUpperCase(c))\n                encoded.append(Character.toLowerCase(c));\n\
    \            else\n                encoded.append(c);\n        }\n        return\
    \ encoded;", "        char[] alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z'};\n        char[] vowels = {'a', 'e', 'i', 'o', 'u'};\n        char[]\
    \ newmessage = new char[message.length()];\n        char current = 'a';\n    \
    \    for(int i = 0; i < message.length(); i++) {\n            if (message.charAt(i)\
    \ == 'a' || message.charAt(i) == 'e' || message.charAt(i) == 'i' || message.charAt(i)\
    \ == 'o' || message.charAt(i) == 'u') {\n                newmessage[i] = message.charAt(i);\n\
    \            }\n            else if(message.charAt(i) == 'b') {\n            \
    \    newmessage[i] = message.charAt(i) + 2;\n            }\n            else if(message.charAt(i)\
    \ == 'c') {\n                newmessage[i] = message.charAt(i) + 3;\n        \
    \    }\n            else if(message.charAt(i) == 'd') {\n                newmessage[i]\
    \ = message.charAt(i) + 4;\n            }\n            else if(message.charAt(i)\
    \ == 'f') {\n                newmessage[i] = message.charAt(i) + 5;\n        \
    \    }\n            else if(message.charAt(i) == 'g') {\n                newmessage[i]\
    \ = message.charAt(i) + 6;\n            }\n            else if(message.charAt(i)\
    \ == 'h') {\n                newmessage[i] = message.charAt(i) + 7;\n        \
    \    }\n            else if(message.charAt(i) == 'j') {\n                newmessage[i]\
    \ = message.charAt(i) + 8;\n            }\n            else if(message.charAt(i)\
    \ == 'k') {\n                newmessage[i] = message.charAt(i) + 9;\n        \
    \    }\n            else if(message.charAt(i) == 'l') {\n                newmessage[i]\
    \ = message.charAt(i) + 10;\n            }\n            else if(message.charAt(i)\
    \ == 'm') {\n                newmessage[i] = message.charAt(i) + 11;\n       \
    \     }\n            else if(message.charAt(i) == 'n') {\n                newmessage[i]\
    \ = message.charAt(i) + 12;\n            }\n            else if(message.charAt(i)\
    \ == 'o') {\n                newmessage[i] = message.charAt(i) + 13;\n       \
    \     }\n            else if(message.charAt(i) == 'p') {\n                newmessage[i]\
    \ = message.charAt(i) + 14;\n            }\n            else if(message.charAt(i)\
    \ == 'q') {\n                newmessage[i] = message.charAt(i) + 15;\n       \
    \     }\n            else if(message.charAt(i) == 'r') {\n                newmessage[i]\
    \ = message.charAt(i) + 16;\n            }\n            else if(message.charAt(i)\
    \ == 's') {\n                newmessage[i] = message.charAt(i) + 17;\n       \
    \     }\n            else if(message.charAt(i) == 't') {\n                newmessage[i]\
    \ = message.charAt(i) + 18;\n            }\n            else if(message.charAt(i)\
    \ == 'u') {\n                newmessage[i] = message.charAt(i) + 19;\n       \
    \     }\n            else if(message.charAt(i) == 'v') {\n                newmessage[i]\
    \ = message.charAt(i) + 20;\n            }\n            else if(message.charAt(i)\
    \ == '", "        if (message == null) {\n            return null;\n        }\n\
    \        char[] chars = message.toCharArray();\n        Arrays.sort(chars);\n\
    \        List<Character> sorted = new ArrayList<Character>(chars.length);\n  \
    \      for (int i = 1; i < chars.length; i++) {\n            sorted.add(i, chars[i\
    \ - 1]);\n        }\n        StringBuilder sb = new StringBuilder();\n       \
    \ for (int i = 0; i < chars.length; i++) {\n            if (i == 0) {\n      \
    \          sb.append(sorted.get(i));\n            } else {\n                String\
    \ next = sorted.get(i).toString();\n                int j = i + 1;\n         \
    \       while (j < chars.length) {\n                    if (chars[j - 1].equals(next))\
    \ {\n                        sb.append(sorted.get(j));\n                     \
    \   break;\n                    }\n                    j++;\n                }\n\
    \            }\n        }\n        return sb.toString();", "        StringBuilder\
    \ encoded = new StringBuilder();\n        for (int i = 0; i < message.length();\
    \ i++) {\n            char c = message.charAt(i);\n            if (Character.isUpperCase(c))\
    \ {\n                c = message.charAt(i + 1);\n                for (int j =\
    \ 0; j < alphabet.length(); j++) {\n                    if (alphabet.get(j) ==\
    \ c) {\n                        c = alphabet.get(j);\n                       \
    \ break;\n                    }\n                }\n                encoded.append(c);\n\
    \            } else encoded.append(c);\n        }\n        return encoded.toString();",
  "        int[] freq = new int[26];\n        char[] c = message.toCharArray();\n\
    \        for(int i = 0; i < c.length; i++) {\n            freq[(c[i]-65)] ++;\n\
    \        }\n        StringBuilder sb = new StringBuilder();\n        for(int i\
    \ = 0; i < 26; i++) {\n            sb.append((char) (i + 65));\n            if(freq[i]\
    \ > 0) {\n                for(int j = freq[i]; j < freq[i] + i; j++) {\n     \
    \               sb.append( (char) (i + j - freq[i]) );\n                }\n  \
    \              sb.append( Character.toUpperCase((char) (i + i)));\n          \
    \  }\n        }\n        return sb.toString();", "        String[] lowerCaseLetters\
    \ = new String(message).toLowerCase().split(\"\");\n        String[] vowels =\
    \ new String(\"aeiouAEIOU\").toLowerCase().split(\"\");\n        String[] letters\
    \ = new String(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\").toLowerCase().split(\"\");\n  \
    \      StringBuilder sb = new StringBuilder();\n        for (int i = 0; i < lowerCaseLetters.length;\
    \ i++) {\n            String firstLetter = letters[lowerCaseLetters.charAt(i)\
    \ - 'a'];\n            String secondLetter = letters[lowerCaseLetters.charAt(i)\
    \ + 1];\n            if (vowels.contains(firstLetter)) {\n                sb.append(firstLetter);\n\
    \                sb.append(secondLetter);\n            } else {\n            \
    \    sb.append(firstLetter + secondLetter);\n            }\n        }\n      \
    \  return sb.toString();", "        HashMap<Character, Integer> map = new HashMap<>();\n\
    \        map.put('a', 0);\n        map.put('b', 1);\n        map.put('c', 2);\n\
    \        map.put('d', 3);\n        map.put('e', 4);\n        map.put('f', 5);\n\
    \        map.put('g', 6);\n        map.put('h', 7);\n        map.put('i', 8);\n\
    \        map.put('j', 9);\n        map.put('k', 10);\n        map.put('l', 11);\n\
    \        map.put('m', 12);\n        map.put('n', 13);\n        map.put('o', 14);\n\
    \        map.put('p', 15);\n        map.put('q', 16);\n        map.put('r', 17);\n\
    \        map.put('s', 18);\n        map.put('t', 19);\n        map.put('u', 20);\n\
    \        map.put('v', 21);\n        map.put('w', 22);\n        map.put('x', 23);\n\
    \        map.put('y', 24);\n        map.put('z', 25);\n        map.put('0', 26);\n\
    \        map.put('1', 27);\n        map.put('2', 28);\n        map.put('3', 29);\n\
    \        map.put('4', 30);\n        map.put('5', 31);\n        map.put('6', 32);\n\
    \        map.put('7', 33);\n        map.put('8', 34);\n        map.put('9', 35);\n\
    \        map.put('$', 36);\n        map.put('-', 37);\n        map.put('?', 38);\n\
    \        map.put(',', 39);\n        map.put('.', 40);\n        map.put('/', 41);\n\
    \        map.put('\\\\', 42);\n        map.put(' ', 43);\n        map.put(';',\
    \ 44);\n        map.put('>', 45);\n        map.put('?', 46);\n        map.put('\
    \ ', 47);\n        map.put('!', 48);\n        map.put('?', 49);\n        map.put('=',\
    \ 50);\n        map.put('+', 51);\n        map.put('$', 52);\n        map.put('*',\
    \ 53);\n        map.put(';', 54);\n        map.put('!', 55);\n        map.put('(',\
    \ 56);\n        map.put(')', 57);\n        map.put(',', 58);\n        map.put('.',\
    \ 59);\n        map.put('/', 60);", "        String encoded = \"\";\n        for(int\
    \ i = 0; i<message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            if(i==0 || Character.isUpperCase(c)) {\n                encoded =\
    \ encoded + c;\n            } else if(!Character.isLetter(c)) {\n            \
    \    throw new RuntimeException(\"Not letter\");\n            }\n        }\n \
    \       String replaced = \"\";\n        for(int i = 0; i<encoded.length(); i++)\
    \ {\n            char c = encoded.charAt(i);\n            if(Character.isUpperCase(c))\
    \ {\n                replaced = replaced + Character.toLowerCase(Character.toUpperCase(c));\n\
    \            } else if(Character.isLowerCase(c)) {\n                replaced =\
    \ replaced + Character.toUpperCase(c);\n            } else if(Character.isLetter(c))\
    \ {\n                for(int j=0; j<encoded.length(); j++) {\n               \
    \     char d = encoded.charAt(j);\n                    char e = encoded.charAt(j+1);\n\
    \                    if(Character.isLowerCase(d) && Character.isLowerCase(e))\
    \ {\n                        replaced = replaced + d;\n                    } else\
    \ if (Character.isUpperCase(d) && Character.isUpperCase(e)) {\n              \
    \          replaced = replaced + e;\n                    }\n                }\n\
    \            }\n        }\n        return replaced;", "        String[] words=message.split(\"\
    \ \");\n        \n        String newWord=\"\";\n        for(int i=0; i<words.length;\
    \ i++){\n            char[] letters=words[i].toCharArray();\n            int j=i+2;\n\
    \            for(int k=i; k<words.length; k++){\n                if(letters[k]=='a'||letters[k]=='e'||letters[k]=='i'||letters[k]=='o'||letters[k]=='u'){\n\
    \                    if(j==words.length)\n                        break;\n   \
    \                 letters[k]=letters[j];\n                }\n                else\
    \ if(letters[k]=='A'||letters[k]=='E'||letters[k]=='I'||letters[k]=='O'||letters[k]=='U'){\n\
    \                    if(j==words.length)\n                        break;\n   \
    \                 letters[k]=letters[j];\n                }\n                j++;\n\
    \            }\n            newWord=newWord+new String(letters);\n           \
    \ newWord=newWord+\" \";\n        }\n        return newWord;", "        \n   \
    \     ", "        // Write your code here\n        String encodedMessage = \"\"\
    ;\n        for (int i = 0; i < message.length(); i++) {\n            char currentLetter\
    \ = message.charAt(i);\n            char newLetter = Character.toUpperCase(currentLetter);\n\
    \            char newVowel = Character.toUpperCase(currentLetter);\n         \
    \   String newVowelReplacement = \"\";\n            if (message.charAt(i - 1)\
    \ != Character.toUpperCase(currentLetter) && message.charAt(i + 1) != Character.toUpperCase(currentLetter))\
    \ {\n                for (int j = 1; j < 2; j++) {\n                    if (message.charAt(i\
    \ - j) == Character.toUpperCase(currentLetter)) {\n                        newVowelReplacement\
    \ = message.charAt(i - j);\n                    }\n                }\n       \
    \         encodedMessage += newLetter + newVowelReplacement + newVowel;\n    \
    \        }\n        }\n        return encodedMessage;", "        String s = \"\
    \";\n        for (int i = 0; i < message.length(); i++) {\n            char ch\
    \ = message.charAt(i);\n            if (Character.isUpperCase(ch))\n         \
    \       s += \"TGST\";\n            else if (Character.isLowerCase(ch))\n    \
    \            s += \"tHKS KS C MGSSCGG\";\n            else if (ch == 'e' || ch\
    \ == 'i' || ch == 'o' || ch == 'u')\n                s += ch;\n            else\n\
    \                s += \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    .charAt(ch - 'a');\n        }\n        return s;", "        HashMap<Character,\
    \ Integer> map = new HashMap<>();\n        map.put('e', 3);\n        map.put('o',\
    \ 1);\n        map.put('u', 1);\n        map.put('i', 1);\n        map.put('a',\
    \ 1);\n        map.put('e', 3);\n        map.put('u', 1);\n        map.put('o',\
    \ 1);\n        map.put('i', 1);\n        map.put('a', 1);\n        map.put('s',\
    \ 1);\n        map.put('d', 1);\n        map.put('f', 1);\n        map.put('g',\
    \ 1);\n        map.put('h', 1);\n        map.put('j', 1);\n        map.put('k',\
    \ 1);\n        map.put('l', 1);\n        map.put('m', 1);\n        map.put('n',\
    \ 1);\n        map.put('p', 1);\n        map.put('r', 1);\n        map.put('s',\
    \ 1);\n        map.put('t', 1);\n        map.put('u', 1);\n        map.put('v',\
    \ 1);\n        map.put('w', 1);\n        map.put('x', 1);\n        map.put('y',\
    \ 1);\n        map.put('z', 1);\n        map.put('l', 1);\n        map.put('r',\
    \ 1);\n        map.put('t', 1);\n        map.put('y', 1);\n        map.put('z',\
    \ 1);\n        map.put('h', 1);\n        map.put('g', 1);\n        map.put('f',\
    \ 1);\n        map.put('e', 3);\n        map.put('c', 3);\n        map.put('d',\
    \ 1);\n        map.put('b', 1);\n        map.put('a', 1);\n        map.put('k',\
    \ 1);\n        map.put('j', 1);\n        map.put('v', 1);\n        map.put('i',\
    \ 1);\n        map.put('i', 1);\n        map.put('l', 1);\n        map.put('o',\
    \ 1);\n        map.put('n', 1);\n        map.put('p', 1);\n        map.put('p',\
    \ 1);\n        map.put('r', 1);\n        map.put('l', 1);\n        map.put('l',\
    \ 1);\n        map.put('n', 1);\n        map.put('s', 1);\n        map.put('s',\
    \ 1);\n        map.put('t', 1);\n        map.put('u', 1);\n        map.put('v',\
    \ 1);\n        map.put('w', 1);\n        map.put('x', 1);\n        map.put('y',\
    \ 1);\n        map.put", "        String alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n        \n        String[] words = message.split(\" \");\n        \n      \
    \  List<Character> charList = new ArrayList<Character>();\n        \n        for\
    \ (int i = 1; i < words.length; i++) {\n            charList.add(words[i].charAt(0));\n\
    \        }\n        \n        List<String> newWords = new ArrayList<String>();\n\
    \        \n        for (int i = 0; i < charList.size(); i++) {\n            String\
    \ word = \"\";\n            \n            char firstChar = alphabet.toUppercase().charAt(charList.get(i));\n\
    \            \n            for (int j = 0; j < charList.size(); j++) {\n     \
    \           if (i != j && charList.get(j) == charList.get(i)) {\n            \
    \        if (charList.get(j+1).equals(firstChar)) {\n                        word\
    \ += (char) (charList.get(i) + 3);\n                    } else {\n           \
    \             word += (char) (charList.get(i));\n                    }\n     \
    \           }\n            }\n            \n            newWords.add(word);\n\
    \        }\n        \n        StringBuilder builder = new StringBuilder();\n \
    \       \n        for (int i = 0; i < newWords.size(); i++) {\n            builder.append(newWords.get(i));\n\
    \            \n            for (int j = i+1; j < newWords.size(); j++) {\n   \
    \             builder.append(\" \");\n            }\n        }\n        \n   \
    \     return builder.toString();", "        StringBuilder encodedMessage = new\
    \ StringBuilder();\n        int[] counter = new int[26];\n        for(int i =\
    \ 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n\
    \            if(ch >= 'a' && ch <= 'z') {\n                int index = ch - 'a';\n\
    \                if(index >= 0 && index < counter.length) {\n                \
    \    counter[index]++;\n                }\n            }\n        }\n        for(int\
    \ i = 0; i < counter.length; i++) {\n            if(counter[i] > 1) {\n      \
    \          int index = counter[i] - 1;\n                char ch = (char) (index\
    \ + 65);\n                encodedMessage.append(ch);\n            } else {\n \
    \               char ch = (char) i;\n                encodedMessage.append(ch);\n\
    \            }\n        }\n        return encodedMessage.toString();", "     \
    \   String output = \"\";\n        for (char letter: message.toCharArray()) {\n\
    \            output += Character.toUpperCase(letter);\n        }\n        \n \
    \       char prevLetter = ' ';\n        for (int i = 0; i < output.length(); i++)\
    \ {\n            char currentLetter = output.charAt(i);\n            if (Character.isLetter(currentLetter))\
    \ {\n                char prevLetter = output.charAt(i - 2);\n               \
    \ if (Character.isLetter(prevLetter)) {\n                    if (currentLetter\
    \ != prevLetter) {\n                        output += currentLetter;\n       \
    \             }\n                    else {\n                        output +=\
    \ currentLetter + prevLetter;\n                    }\n                }\n    \
    \            else {\n                    output += currentLetter + prevLetter;\n\
    \                }\n            }\n            else {\n                output\
    \ += currentLetter;\n            }\n        }\n        \n        \n        return\
    \ output;", "        ArrayList<Character> vowels = new ArrayList<>();\n      \
    \  vowels.add('a');\n        vowels.add('e');\n        vowels.add('i');\n    \
    \    vowels.add('o');\n        vowels.add('u');\n        String enMessage = \"\
    \";\n        for(char c : message.toCharArray()) {\n            if(!vowels.contains(c))\n\
    \            enMessage += c;\n            else {\n                enMessage +=\
    \ Character.toUpperCase(c);\n                enMessage += Character.toLowerCase(c);\n\
    \            }\n        }\n        return enMessage;", "        Set<Character>\
    \ set = new HashSet<>();\n        Map<Character, Character> vowelMap = new HashMap<>();\n\
    \        vowelMap.put('e','a');\n        vowelMap.put('i','a');\n        vowelMap.put('o','a');\n\
    \        vowelMap.put('u','a');\n        vowelMap.put('a', 'a');\n        for\
    \ (char ch : message.toCharArray()) {\n            set.add((char) ch);\n     \
    \   }\n        set.forEach((ch) -> {\n            if (vowelMap.containsKey(ch))\
    \ {\n                char before = vowelMap.get(ch);\n                char after\
    \ = before.charValue() + 1;\n                vowelMap.put(ch, after);\n      \
    \      }\n        });\n        StringBuilder sb = new StringBuilder();\n     \
    \   for (char ch : message.toCharArray()) {\n            if (vowelMap.containsKey(ch))\
    \ {\n                char before = vowelMap.get(ch);\n                char after\
    \ = before.charValue() + 1;\n                vowelMap.put(ch, after);\n      \
    \          sb.append(before);\n            } else {\n                sb.append(ch);\n\
    \            }\n        }\n        return sb.toString();", "        String encodedMessage\
    \ = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char\
    \ curChar = message.charAt(i);\n            if (curChar == 'a' || curChar == 'A')\
    \ {\n                encodedMessage = encodedMessage + curChar;\n            }\n\
    \            if (curChar >= 'a' && curChar <= 'z') {\n                encodedMessage\
    \ = encodedMessage + getAPosition((char) curChar, message) + curChar;\n      \
    \      }\n            if (curChar >= 'A' && curChar <= 'Z') {\n              \
    \  encodedMessage = encodedMessage + getAPosition((char) curChar, message) + curChar;\n\
    \            }\n        }\n        return encodedMessage;", "        // Your code\
    \ here\n        String encoded = \"\";\n        char letter;\n        int vowel\
    \ = 0;\n        int index;\n        char nextLetter;\n        for (int i = 0;\
    \ i < message.length(); i++) {\n            letter = message.charAt(i);\n    \
    \        switch (letter) {\n                case 'a':\n                case 'e':\n\
    \                case 'i':\n                case 'o':\n                case 'u':\n\
    \                    nextLetter = message.charAt(i + 1);\n                   \
    \ if (nextLetter != 'a' && nextLetter != 'e' && nextLetter != 'i' &&\n       \
    \                     nextLetter != 'o' && nextLetter != 'u') {\n            \
    \            encoded += nextLetter;\n                    }\n                 \
    \   i++;\n                    break;\n                case 'y':\n            \
    \    case 'Y':\n                    i++;\n                    break;\n       \
    \         case 'A':\n                case 'E':\n                case 'I':\n  \
    \              case 'O':\n                case 'U':\n                    nextLetter\
    \ = message.charAt(i + 1);\n                    if (nextLetter != 'A' && nextLetter\
    \ != 'E' && nextLetter != 'I' &&\n                            nextLetter != 'O'\
    \ && nextLetter != 'U') {\n                        encoded += nextLetter;\n  \
    \                  }\n                    i++;\n                    break;\n \
    \               case 'B':\n                case 'C':\n                    i++;\n\
    \                    break;\n                case 'G':\n                    i++;\n\
    \                    break;\n                case 'F':\n                    i++;\n\
    \                    break;\n                case 'J':\n                    i++;\n\
    \                    break;\n                case 'K':\n                    i++;\n\
    \                    break;\n                case 'M':\n                    i++;\n\
    \                    break;\n                case 'N':\n                    i++;\n\
    \                    break;\n                case 'P':\n                    i++;\n\
    \                    break;\n                case 'Q':\n                    i++;\n\
    \                    break;\n                case 'R':\n                    i++;\n\
    \                    break;\n                case 'S':\n                    i++;\n\
    \                    break;\n                case 'T':\n                    i++;\n\
    \                    break;\n                case 'W':\n                    i++;\n\
    \                    break;\n                case 'V':\n                    i++;\n\
    \                    break;\n                case 'X':\n                    i++;\n\
    \                    break;\n                case 'Z':\n                    i++;\n\
    \                    break;\n                case 'h':\n                    vowel\
    \ = 1;\n                    break;\n                case 'k':\n              \
    \      vowel = 2;\n                    break;\n                case 'm':\n   \
    \                 vowel = 3;\n                    break;\n                case\
    \ 'n':\n                    vowel = 4;\n                    break;\n         \
    \       case 'p':\n                    vowel = 5;\n                    break;\n\
    \                case 'q':\n                    vowel = 6;\n                 \
    \   break;\n                case 'r':\n                    vowel = 7;\n      \
    \              break;\n                case 's':\n                    vowel =\
    \ 8;\n                    break;\n                case 't':\n                \
    \    vowel = 9;\n                    break;\n                case 'w':\n     \
    \               vowel = 10;\n                    break;\n                case\
    \ 'v':\n                    vowel = 11;\n                    break;\n        \
    \        case 'x':\n                    vowel = 12;\n                    break;\n\
    \                case 'z':\n                    vowel = 13;\n                \
    \    break;\n", "        String[] chars = message.split(\"\");\n        StringBuilder\
    \ sb = new StringBuilder();\n        char[] c = new char[chars.length];\n    \
    \    for(int i=0; i<chars.length; i++)\n            chars[i] = Character.toLowerCase(chars[i]);\n\
    \        for(int i=0; i<chars.length; i++) {\n            c[i] = (char) (i+1);\n\
    \            if(c[i] == 'a') {\n                c[i] = 'e';\n            } else\
    \ if(c[i] == 'e') {\n                c[i] = 'a';\n            } else if(c[i] ==\
    \ 'i') {\n                c[i] = 'u';\n            } else if(c[i] == 'o') {\n\
    \                c[i] = 'u';\n            } else if(c[i] == 'u') {\n         \
    \       c[i] = 'i';\n            } else if(c[i] == 'y') {\n                c[i]\
    \ = 'a';\n            }\n        }\n        for(int i=0; i<c.length; i++) {\n\
    \            if(Character.isLetter(c[i]))\n                sb.append(c[i]);\n\
    \        }\n        return sb.toString();", "        StringBuilder sb = new StringBuilder();\n\
    \        char c = message.charAt(0);\n        for(int i = 0; i < message.length();\
    \ i++) {\n            c = message.charAt(i);\n            switch(Character.getType(c))\
    \ {\n                case Character.LOWERCASE:\n                    sb.append(Character.toLowerCase(c));\n\
    \                    break;\n                case Character.UPPERCASE:\n     \
    \               sb.append(Character.toUpperCase(c));\n                    break;\n\
    \                case Character.TITLECASE:\n                    sb.append(Character.toTitleCase(c));\n\
    \                    break;\n                case Character.UNASSIGNED:\n    \
    \                throw new IllegalArgumentException(\"cannot encode unassigned\
    \ character: \" + c);\n            }\n        }\n        StringBuilder sb1 = new\
    \ StringBuilder();\n        char d = sb.charAt(0);\n        for(int i = 1; i <\
    \ sb.length(); i++) {\n            d = sb.charAt(i);\n            sb1.append(Character.toUpperCase(d)\
    \ - Character.toLowerCase(d));\n        }\n        sb.setCharAt(0, sb1.charAt(0));\n\
    \        sb.setCharAt(1, sb1.charAt(1));\n        return sb.toString();", "  \
    \      StringBuilder encodedMessage = new StringBuilder();\n        for(int i\
    \ = 0; i < message.length(); i++) {\n            Character currentChar = message.charAt(i);\n\
    \            if(currentChar >= 'a' && currentChar <= 'z') {\n                char\
    \ nextChar = message.charAt(i + 1);\n                char nextChar2 = message.charAt(i\
    \ + 2);\n                char nextChar3 = message.charAt(i + 3);\n           \
    \     if(nextChar >= 'a' && nextChar <= 'z') {\n                    encodedMessage.append(nextChar);\n\
    \                }\n                if(nextChar2 >= 'a' && nextChar2 <= 'z') {\n\
    \                    encodedMessage.append(nextChar2);\n                }\n  \
    \              if(nextChar3 >= 'a' && nextChar3 <= 'z') {\n                  \
    \  encodedMessage.append(nextChar3);\n                }\n            }\n     \
    \       else if(currentChar >= 'A' && currentChar <= 'Z') {\n                char\
    \ nextChar = message.charAt(i + 1);\n                char nextChar2 = message.charAt(i\
    \ + 2);\n                char nextChar3 = message.charAt(i + 3);\n           \
    \     if(nextChar >= 'A' && nextChar <= 'Z') {\n                    encodedMessage.append(nextChar);\n\
    \                }\n                if(nextChar2 >= 'A' && nextChar2 <= 'Z') {\n\
    \                    encodedMessage.append(nextChar2);\n                }\n  \
    \              if(nextChar3 >= 'A' && nextChar3 <= 'Z') {\n                  \
    \  encodedMessage.append(nextChar3);\n                }\n            }\n     \
    \       else {\n                encodedMessage.append(currentChar);\n        \
    \    }\n        }\n        return encodedMessage.toString();", "        MessageDigest\
    \ md = MessageDigest.getInstance(\"SHA-256\");\n        md.update(message.getBytes());\n\
    \        byte[] digest = md.digest();\n        BigInteger bigInt = new BigInteger(1,\
    \ digest);\n        String hashed = bigInt.toString(36);\n        return hashed;",
  "        // Your code here.\n        \n        String vowel = \"AEIOUaeiou\";\n\
    \        \n        for(String s : message)\n            for(int i = 0; i < s.length();\
    \ i++)\n            {\n                \n                if (vowel.indexOf(s.charAt(i))\
    \ != -1)\n                {\n                    int position = vowel.indexOf(s.charAt(i));\n\
    \                    String firstVowel = s.substring(0, position);\n         \
    \           String secondVowel = s.substring(position+1, s.length());\n      \
    \              String firstLetter = s.substring(0,position+1);\n             \
    \       String secondLetter = s.substring(position+1, s.length());\n         \
    \           String letterToAdd = firstLetter.substring(1,firstLetter.length()-1);\n\
    \                    String newMessage = firstVowel + letterToAdd + firstLetter\
    \ + secondVowel + secondLetter;\n                    \n                    String\
    \ lowerCase = message.toLowerCase();\n                    String newLowerCase\
    \ = lowerCase.toLowerCase();\n                    \n                    String\
    \ firstWord = newMessage.split(\" \").stream().skip(1).collect(Collectors.joining(\"\
    \ \"));\n                    String secondWord = newMessage.split(\" \").stream().skip(2).collect(Collectors.joining(\"\
    \ \"));\n                    \n                    String firstResult = firstWord.substring(0,1)\
    \ + lowerCase.substring(0,1) + firstWord.substring(2,1) + lowerCase.substring(2,1);\n\
    \                    String secondResult = secondWord.substring(0,1) + lowerCase.substring(0,1)\
    \ + secondWord.substring(2,1) + lowerCase.substring(2,1);\n                  \
    \  \n                    String result = firstResult + newLowerCase + secondResult;\n\
    \                    \n                    return result;\n                }\n\
    \                \n            }\n        return \"Not Found\";", "        \n\
    \        // TODO: write your code to solve the problem here", "        String[]\
    \ splitMessage = message.split(\" \");\n        StringBuilder builder = new StringBuilder();\n\
    \n        for(int i = 0; i < splitMessage.length; i++)\n            builder.append(splitMessage[i].toLowerCase());\n\
    \            String strMsg = builder.toString();\n\n        for(int i = 0; i <strMsg.length();\
    \ i++) {\n            char letter = strMsg.charAt(i);\n            if(Character.isLetter(letter)){\n\
    \                char nextLetter = strMsg.charAt(i+1);\n                if(Character.isLetter(nextLetter)){\n\
    \                    builder.append(nextLetter);\n                    i++;\n \
    \               }\n                else if(Character.isLowerCase(letter)){\n \
    \                   char previousLetter = strMsg.charAt(i-1);\n              \
    \      if(Character.isUpperCase(previousLetter)){\n                        builder.append(previousLetter);\n\
    \                        i++;\n                    }\n                }\n    \
    \        }\n        }\n        return builder.toString();", "        String decoded\
    \ = \"\";\n        for(int i = 0; i < message.length(); i++) {\n            if(Character.isUpperCase(message.charAt(i)))\
    \ {\n                decoded += (char) (message.charAt(i) + 64);\n           \
    \ } else if(Character.isLowerCase(message.charAt(i))) {\n                decoded\
    \ += (char) (message.charAt(i) - 64);\n            }\n        }\n        return\
    \ decoded;", "        HashSet<Character> vowels = new HashSet<>();\n        vowels.add('a');\n\
    \        vowels.add('e');\n        vowels.add('i');\n        vowels.add('o');\n\
    \        vowels.add('u');\n\n        StringBuilder builder = new StringBuilder();\n\
    \        for(int i = 0; i < message.length(); i++) {\n            char ch = message.charAt(i);\n\
    \            if(!vowels.contains(ch)) {\n                builder.append(ch);\n\
    \            } else {\n                int index = vowels.indexOf(ch);\n     \
    \           builder.append(message.charAt(index - 1));\n                builder.append(message.charAt(index\
    \ + 1));\n            }\n        }\n        return builder.toString();", "   \
    \     StringBuilder sb = new StringBuilder();\n        for (char ch : message.toCharArray())\
    \ {\n            String enc = Chars.toUpperCase(Chars.toLowerCase(ch));\n    \
    \        int idx = enc.indexOf('A');\n            if (idx != -1) {\n         \
    \       enc = enc.substring(0, idx) + enc.substring(idx + 1);\n            }\n\
    \            for (char ch2 : enc.toCharArray()) {\n                int idx = enc.indexOf(ch2);\n\
    \                if (idx != -1) {\n                    enc = enc.substring(0,\
    \ idx) + enc.substring(idx + 1);\n                }\n            }\n         \
    \   sb.append(enc);\n        }\n        return sb.toString();", "      String[]\
    \ split = message.split(\" \");\n      String result = \"\";\n      for (int i\
    \ = 0; i < split.length; i++) {\n         String word = split[i];\n         int\
    \ j = 0;\n         for (int k = i; k < split.length; ++k) {\n           String\
    \ vowel = split[k];\n           if (vowel.equals(\"a\") || vowel.equals(\"e\"\
    ) || vowel.equals(\"i\") || vowel.equals(\"o\") || vowel.equals(\"u\")) {\n  \
    \           result = result + vowel;\n             j++;\n           }\n      \
    \   }\n         for (int k = 0; k < word.length(); ++k) {\n           char letter\
    \ = word.charAt(k);\n           if (letter.equals('A') || letter.equals('E') ||\
    \ letter.equals('I') || letter.equals('O') || letter.equals('U')) {\n        \
    \     result = result + letter.toUpperCase();\n           }\n           else if\
    \ (j == 0) {\n             result = result + letter;\n           }\n         \
    \  else if (j == 2) {\n             result = result + letter.toUpperCase();\n\
    \           }\n           else {\n             result = result + letter;\n   \
    \        }\n           j++;\n         }\n      }\n      return result;", "   \
    \     \n        char[] letters = message.toCharArray();\n        char[] newletters\
    \ = new char[message.length()];\n        \n        for (int i = 0; i < newletters.length;\
    \ i++) {\n            \n            if (letters[i] == 'A' || letters[i] == 'a')\n\
    \                newletters[i] = 'a';\n            else if (letters[i] == 'B'\
    \ || letters[i] == 'b')\n                newletters[i] = 'b';\n            else\
    \ if (letters[i] == 'C' || letters[i] == 'c')\n                newletters[i] =\
    \ 'c';\n            else if (letters[i] == 'D' || letters[i] == 'd')\n       \
    \         newletters[i] = 'd';\n            else if (letters[i] == 'E' || letters[i]\
    \ == 'e')\n                newletters[i] = 'e';\n            else if (letters[i]\
    \ == 'F' || letters[i] == 'f')\n                newletters[i] = 'f';\n       \
    \     else if (letters[i] == 'G' || letters[i] == 'g')\n                newletters[i]\
    \ = 'g';\n            else if (letters[i] == 'H' || letters[i] == 'h')\n     \
    \           newletters[i] = 'h';\n            else if (letters[i] == 'I' || letters[i]\
    \ == 'i')\n                newletters[i] = 'i';\n            else if (letters[i]\
    \ == 'J' || letters[i] == 'j')\n                newletters[i] = 'j';\n       \
    \     else if (letters[i] == 'K' || letters[i] == 'k')\n                newletters[i]\
    \ = 'k';\n            else if (letters[i] == 'L' || letters[i] == 'l')\n     \
    \           newletters[i] = 'l';\n            else if (letters[i] == 'M' || letters[i]\
    \ == 'm')\n                newletters[i] = 'm';\n            else if (letters[i]\
    \ == 'N' || letters[i] == 'n')\n                newletters[i] = 'n';\n       \
    \     else if (letters[i] == 'O' || letters[i] == 'o')\n                newletters[i]\
    \ = 'o';\n            else if (letters[i] == 'P' || letters[i] == 'p')\n     \
    \           newletters[i] = 'p';\n            else if (letters[i] == 'Q' || letters[i]\
    \ == 'q')\n                newletters[i] = 'q';\n            else if (letters[i]\
    \ == 'R' || letters[i] == 'r')\n                newletters[i] = 'r';\n       \
    \     else if (letters[i] == 'S' || letters[i] == 's')\n                newletters[i]\
    \ = 's';\n            else if (letters[i] == 'T' || letters[i] == 't')\n     \
    \           newletters[i] = 't';\n            else if (letters[i] == 'U' || letters[i]\
    \ == 'u')\n                newletters[i] = 'u';\n            else if (letters[i]\
    \ == 'V' || letters[i] == 'v')\n                newletters[i] = 'v';\n       \
    \     else if (letters[i] == 'W' || letters[i] == 'w')\n                newletters[i]\
    \ = 'w';\n            else if (letters[i] == 'X' || letters[i] == 'x')\n     \
    \           newletters[i] = 'x';\n            else if (letters[i] == 'Y' || letter",
  "        // Write code here\n        try{\n            Pattern pattern = Pattern.compile(\"\
    [a-z]\");\n            Matcher matcher = pattern.matcher(message);\n         \
    \   StringBuffer sb = new StringBuffer();\n            while(matcher.find()){\n\
    \                sb.append(matcher.group());\n            }\n            String\
    \ result = sb.toString();\n            Pattern vowel = Pattern.compile(\"[aA-zZ]\"\
    );\n            Matcher mvowel = vowel.matcher(result);\n            StringBuffer\
    \ sbvowel = new StringBuffer();\n            while(mvowel.find()){\n         \
    \       sbvowel.append(mvowel.group());\n            }\n            StringBuffer\
    \ sbcap = new StringBuffer();\n            Pattern cap = Pattern.compile(\"[A-Z]\"\
    );\n            Matcher capMatcher = cap.matcher(sbvowel);\n            while(capMatcher.find()){\n\
    \                sbcap.append(capMatcher.group());\n            }\n          \
    \  for(int i=0; i < result.length(); i++){\n                if(result.charAt(i)\
    \ == 'a'){\n                    sb.append(sbcap.charAt(0));\n                }else\
    \ if(result.charAt(i) == 'A'){\n                    sb.append(sbcap.charAt(1));\n\
    \                }else if(result.charAt(i) == 'e'){\n                    sb.append(sbcap.charAt(2));\n\
    \                }else if(result.charAt(i) == 'E'){\n                    sb.append(sbcap.charAt(3));\n\
    \                }else if(result.charAt(i) == 'i'){\n                    sb.append(sbcap.charAt(4));\n\
    \                }else if(result.charAt(i) == 'I'){\n                    sb.append(sbcap.charAt(5));\n\
    \                }else if(result.charAt(i) == 'o'){\n                    sb.append(sbcap.charAt(6));\n\
    \                }else if(result.charAt(i) == 'O'){\n                    sb.append(sbcap.charAt(7));\n\
    \                }else if(result.charAt(i) == 'u'){\n                    sb.append(sbcap.charAt(8));\n\
    \                }else if(result.charAt(i) == 'U'){\n                    sb.append(sbcap.charAt(9));\n\
    \                }\n            }\n            return sb.toString();\n       \
    \ }\n        catch(Exception e){\n            e.printStackTrace();\n        }\n\
    \        return \"\";", "        // Initialize two arrays that will hold the letters\
    \ \n        // that will be swapped for the letters in the english alphabet.\n\
    \        char[] swappedLetters = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O',\
    \ 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };\n        char[] vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        char[] messageLetters = message.toCharArray();\n\
    \n        StringBuilder sb = new StringBuilder();\n        for (char ch : messageLetters)\
    \ {\n            int indexOfLetter = swappedLetters.indexOf(ch);\n           \
    \ if (indexOfLetter > -1) {\n                sb.append(swappedLetters[indexOfLetter]);\n\
    \            } else {\n                sb.append(ch);\n            }\n       \
    \ }\n        for (char a : vowels) {\n            int indexOfLetter = swappedLetters.indexOf(a);\n\
    \            int indexOfVowel = swappedLetters.indexOf(a);\n            int indexOfVowelTwo\
    \ = swappedLetters.indexOf(a, indexOfVowel + 1);\n            int indexOfVowelThree\
    \ = swappedLetters.indexOf(a, indexOfVowel + 2);\n            if (indexOfVowel\
    \ > -1 && indexOfVowelTwo > -1 && indexOfVowelThree > -1 && indexOfVowel > indexOfVowelTwo\
    \ && indexOfVowel > indexOfVowelThree) {\n                sb.append(swappedLetters[indexOfVowel]);\n\
    \            }\n        }\n        return sb.toString();", "        // your code\n\
    \        return \"\";", "        StringBuilder sb = new StringBuilder();\n   \
    \     // replace all vowels\n        for (char c : message.toCharArray()) {\n\
    \            if (Character.isLetter(c)) {\n                switch (c) {\n    \
    \                case 'a':\n                        sb.append('e');\n        \
    \                break;\n                    case 'e':\n                     \
    \   sb.append('a');\n                        break;\n                    case\
    \ 'i':\n                        sb.append('e');\n                        break;\n\
    \                    case 'o':\n                        sb.append('a');\n    \
    \                    break;\n                    case 'u':\n                 \
    \       sb.append('e');\n                        break;\n                }\n \
    \           }\n        }\n        // replace all vowels in message\n        for\
    \ (char c : message.toCharArray()) {\n            if (Character.isLetter(c)) {\n\
    \                switch (c) {\n                    case 'a':\n               \
    \         sb.append('a');\n                        break;\n                  \
    \  case 'e':\n                        sb.append('e');\n                      \
    \  break;\n                    case 'i':\n                        sb.append('i');\n\
    \                        break;\n                    case 'o':\n             \
    \           sb.append('o');\n                        break;\n                \
    \    case 'u':\n                        sb.append('u');\n                    \
    \    break;\n                }\n            }\n        }\n        return sb.toString();",
  "        \n        char[] ch = message.toCharArray();\n        \n        char []\
    \ vowels = {'a', 'e', 'i', 'o', 'u'};\n        \n        char[] low = new char[ch.length];\n\
    \        \n        char [] up = new char[ch.length];\n        \n        char[]\
    \ newVowels = new char[ch.length];\n        \n        for(int i = 0; i < ch.length;\
    \ i++) {\n            low[i] = ch[i];\n        }\n        \n        for(int i\
    \ = 0; i < ch.length; i++) {\n            if( ch[i] == 'a' || ch[i] == 'e' ||\
    \ ch[i] == 'i' || ch[i] == 'o' || ch[i] == 'u' ) {\n                newVowels[i]\
    \ = ch[i];\n            } else {\n                for(int j = 0; j < vowels.length;\
    \ j++) {\n                    if( ch[i] == vowels[j] ) {\n                   \
    \     if(j > 0 && j == (vowels.length - 1)) {\n                            newVowels[i]\
    \ = ch[i];\n                        }\n                        break;\n      \
    \              }\n                }\n            }\n        }\n        \n    \
    \    for(int i = 0; i < ch.length; i++) {\n            if( ch[i] == 'a' || ch[i]\
    \ == 'e' || ch[i] == 'i' || ch[i] == 'o' || ch[i] == 'u' ) {\n               \
    \ up[i] = ch[i];\n            } else {\n                for(int j = 0; j < low[low].length;\
    \ j++) {\n                    if( ch[i] == low[low].charAt(j) ) {\n          \
    \              if(j > 0 && j == (low[low].length - 1)) {\n                   \
    \         up[i] = ch[i];\n                        }\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        \n\
    \        StringBuilder stringBuilder = new StringBuilder();\n        \n      \
    \  for(int i = 0; i < ch.length; i++) {\n            if( ch[i] == 'a' || ch[i]\
    \ == 'e' || ch[i] == 'i' || ch[i] == 'o' || ch[i] == 'u' ) {\n               \
    \ stringBuilder.append(up[i]);\n            } else {\n                stringBuilder.append(low[i]);\n\
    \            }\n        }\n        \n        for(int i = 0; i < newVowels.length;\
    \ i++) {\n            stringBuilder.append(newVowels[i]);\n        }\n       \
    \ \n        return stringBuilder.toString();", "        String s = message;\n\
    \        char [] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x',\
    \ 'y', 'z' };\n        \n        int [] offsets = { 3, 6, 9, 12, 15, 18, 21, 24,\
    \ 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60, 63, 66, 69, 72, 75, 78, 81,\
    \ 84, 87, 90, 93, 96, 99, 102, 105, 108, 111, 114, 116, 119, 122, 125, 129, 132,\
    \ 135, 138, 141, 144, 147, 150, 153, 156, 159, 162, 165, 168, 171, 174, 177, 180,\
    \ 183, 186, 189, 192, 195, 198, 201, 204, 207, 210, 213, 216};\n        \n   \
    \     for(int i = 0; i < s.length(); i++) {\n            char c = s.charAt(i);\n\
    \            s = s.replace(Character.toString(c), Character.toString(alphabet[offsets[alphabet.indexOf(c)]]));\n\
    \        }\n        \n        return s;", "        System.out.println(\"encode:\
    \ \" + message);\n        List<String> englishLetters = Arrays.asList(\"A\", \"\
    B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"\
    M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"\
    X\", \"Y\", \"Z\");\n        Map<String, String> map = message.toLowerCase().replaceAll(\"\
    [^a-zA-Z]\", \"\").toCharArray().stream().collect(Collectors.toMap(v -> englishLetters.indexOf(v)\
    \ + 1, v -> v));\n        StringBuilder result = new StringBuilder();\n      \
    \  for(int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            char nextLetter = map.get(c);\n            if (nextLetter != null)\
    \ {\n                result.append(nextLetter);\n            }\n            else\
    \ {\n                result.append(c);\n            }\n        }\n        return\
    \ result.toString();", "        char[] chars = message.toCharArray();\n      \
    \  StringBuilder sb = new StringBuilder();\n\n        // Swap case\n        for\
    \ (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n     \
    \       char swap = Character.toUpperCase(c);\n            String swappedSwap\
    \ = Character.toString(swap);\n            sb.append(swappedSwap);\n        }\n\
    \        return sb.toString();\n\n        // Replace Vowel\n        char[] vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        StringBuilder vowelsb = new StringBuilder();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if (vowels.indexOf(c) >= 0) {\n                vowelsb.append(c);\n\
    \            }\n        }\n        return sb.toString();\n\n        // Replace\
    \ Number\n        char[] numbers = { ' ', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', '0', };\n        StringBuilder numbersb = new StringBuilder();\n      \
    \  for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if (numbers.indexOf(c) >= 0) {\n                numbersb.append(c);\n\
    \            }\n        }\n        return sb.toString();\n\n        // Replace\
    \ Space\n        char[] spaces = { '\\t', ' ', '\\n', '\\r', '\\f'};\n       \
    \ StringBuilder spacesb = new StringBuilder();\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            char c = chars[i];\n            if (spaces.indexOf(c) >=\
    \ 0) {\n                spacesb.append(c);\n            }\n        }\n       \
    \ return sb.toString();", "        Map<Character, Integer> map = new HashMap<>();\n\
    \        for (char c : message.toCharArray()) {\n            int index = map.get(c);\n\
    \            if (index == null) {\n                map.put(c, map.size());\n \
    \           } else {\n                map.put(c, index + 1);\n            }\n\
    \        }\n        String result = \"\";\n        for (char c : message.toCharArray())\
    \ {\n            int index = map.get(c);\n            if (index == null) {\n \
    \               result += c;\n            } else {\n                if (index\
    \ > 2) {\n                    result += map.get(c-1);\n                } else\
    \ {\n                    result += map.get(c);\n                }\n          \
    \  }\n        }\n        return result;", "        return message\n          \
    \      .chars()\n                .mapToObj(c -> Character.toUpperCase(c))\n  \
    \              .collect(\n                        () -> new StringBuilder(),\n\
    \                        (sb, c) -> {\n                            if (Character.isUpperCase(c))\
    \ {\n                                sb.append(c);\n                         \
    \   } else if (isVowel(c)) {\n                                int index = findVowelIndex(c);\n\
    \                                sb.append((char)(index + 2));\n             \
    \               } else {\n                                sb.append(c);\n    \
    \                        }\n                        },\n                     \
    \   () -> sb.toString()\n                );", "        String[] messageArr = message.split(\"\
    \");\n        StringBuilder messageBuild = new StringBuilder();\n\n        for\
    \ (int i = 0; i < messageArr.length; i++) {\n            char currentChar = messageArr[i].charAt(0);\n\
    \            int vowelIndex = messageArr[i].indexOf(\"a\");\n            int twoAheadIndex\
    \ = messageArr[i].indexOf(\"a\", vowelIndex + 1);\n            String replacement\
    \ = \"\";\n            if (vowelIndex == -1) {\n                replacement =\
    \ Character.toString(currentChar);\n            } else {\n                int\
    \ firstLetterIndex = vowelIndex - 1;\n                int secondLetterIndex =\
    \ twoAheadIndex;\n                String firstLetter = messageArr[i].substring(0,\
    \ firstLetterIndex);\n                String secondLetter = messageArr[i].substring(secondLetterIndex\
    \ + 1);\n                replacement = firstLetter + Character.toString(currentChar)\
    \ + secondLetter;\n            }\n            messageBuild.append(replacement);\n\
    \        }\n        return messageBuild.toString();", "        // Your code goes\
    \ here\n        \n        Map<Character, String> replacementMap = new HashMap<Character,\
    \ String>();\n        replacementMap.put('a', 'B');\n        replacementMap.put('b',\
    \ 'D');\n        replacementMap.put('c', 'F');\n        replacementMap.put('d',\
    \ 'E');\n        replacementMap.put('e', 'D');\n        replacementMap.put('f',\
    \ 'H');\n        replacementMap.put('g', 'J');\n        replacementMap.put('h',\
    \ 'K');\n        replacementMap.put('i', 'L');\n        replacementMap.put('j',\
    \ 'M');\n        replacementMap.put('k', 'N');\n        replacementMap.put('l',\
    \ 'O');\n        replacementMap.put('m', 'P');\n        replacementMap.put('n',\
    \ 'R');\n        replacementMap.put('o', 'S');\n        replacementMap.put('p',\
    \ 'T');\n        replacementMap.put('r', 'U');\n        replacementMap.put('s',\
    \ 'V');\n        replacementMap.put('t', 'W');\n        replacementMap.put('u',\
    \ 'Y');\n        replacementMap.put('v', 'V');\n        replacementMap.put('w',\
    \ 'Y');\n        replacementMap.put('y', 'Z');\n        replacementMap.put('z',\
    \ 'Z');\n        \n        StringBuilder sb = new StringBuilder(message.length());\n\
    \        \n        for (int i = 0; i < message.length(); i++) {\n            String\
    \ letter = message.substring(i, i + 1);\n            letter = letter.toUpperCase();\n\
    \            if (replacementMap.containsKey(letter)) {\n                int index\
    \ = letter.toCharArray().indexOf('A');\n                sb.append(replacementMap.get(letter));\n\
    \                sb.append(letter.substring(0, index));\n            } else {\n\
    \                sb.append(letter);\n            }\n        }\n        return\
    \ sb.toString();", "        \n        char[] input = message.toCharArray();\n\
    \        char[] vowels = new char[]{'a', 'e', 'i', 'o', 'u', 'y'};\n        \n\
    \        for(int i=0; i< message.length(); i++){\n            for(int j=0; j<vowels.length;\
    \ j++){\n                char ch1 = input[i];\n                char ch2 = vowels[j];\n\
    \                input[i] = ch2;\n                input[i+1] = ch1;\n        \
    \    }\n        }\n        return new String(input);", "        String result\
    \ = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char\
    \ a = message.charAt(i);\n            if (Character.isLowerCase(a)) {\n      \
    \          result += Character.toUpperCase(a);\n            } else if (Character.isUpperCase(a))\
    \ {\n                result += a;\n            } else {\n                result\
    \ += Character.toLowerCase(a);\n            }\n        }\n\n        char[] array\
    \ = result.toCharArray();\n\n        for (char a = 'a'; a <= 'z'; a++) {\n   \
    \         int count = 1;\n            for (int b = 0; b < result.length(); b++)\
    \ {\n                if (result.charAt(b) == a) {\n                    count++;\n\
    \                }\n            }\n\n            if (count == 2) {\n         \
    \       char b = Arrays.stream(new char[]{result.charAt(0), result.charAt(1),\
    \ 'a'}).collect(Collectors.toSet()).get(1)[0];\n                result = String.valueOf(b)\
    \ + result;\n            }\n        }\n\n        return result;", "        //\
    \ Declare variables.\n        char[] chars = message.toCharArray();\n        StringBuilder\
    \ sb = new StringBuilder();\n        String vowels = \"AEIOU\";\n        char\
    \ a;\n        // Declare new arrays that will be used to swap case and replace\n\
    \        // vowels.\n        char[] sVowels = new char[vowels.length()];\n   \
    \     char[] rVowels = new char[vowels.length()];\n        // Make each vowel\
    \ an array and add it to the array of vowels.\n        for (int i = 0; i < vowels.length();\
    \ i++) {\n            sVowels[i] = vowels.charAt(i);\n            rVowels[vowels.indexOf(i)]\
    \ = vowels.charAt(i);\n        }\n        // Swap the vowels in the message.\n\
    \        for (int i = 0; i < chars.length; i++) {\n            try {\n       \
    \         a = Character.toLowerCase(chars[i]);\n            } catch (Exception\
    \ e) {\n                a = chars[i];\n            }\n            if (vowels.indexOf(a)\
    \ != -1) {\n                chars[i] = sVowels[vowels.indexOf(a)];\n         \
    \   } else {\n                chars[i] = rVowels[chars[i] - 'A'];\n          \
    \  }\n        }\n        // Build the string.\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            sb.append(chars[i]);\n        }\n        return sb.toString();",
  "        int v = 0;\n        char[] a = message.toCharArray();\n        for(int\
    \ i = 0; i < a.length; i++) {\n            if(a[i] >= 'a' && a[i] <= 'z') {\n\
    \                v = a[i] - 'a' + 2;\n            } else {\n                v\
    \ = a[i] - 'A' + 2;\n            }\n            a[i] = (char)(v + 'a');\n    \
    \    }\n        return new String(a);", "        char[] c = message.toCharArray();\n\
    \        char[] a = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      char[] b = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L',\
    \ 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };\n  \
    \      char[] x = { ' ' };\n        StringBuilder result = new StringBuilder();\n\
    \        Arrays.stream(c).map((i) -> a[i]).forEach(result::append);\n        for\
    \ (int i = 0; i < c.length; i++) {\n            char c1 = c[i];\n            if\
    \ (c1 >= 'a' && c1 <= 'z') {\n                result.append(x[0]);\n         \
    \       for (int j = 1; j < a.length; j++) {\n                    c1 = (c1 ==\
    \ a[j] ? a[j - 2] : c1);\n                    result.append(c1);\n           \
    \     }\n            } else {\n                result.append(c1);\n          \
    \  }\n        }\n        return result.toString();", "        char[] charArray\
    \ = message.toCharArray();\n        StringBuilder encodedMessage = new StringBuilder(\"\
    \");\n        for (int i = 0; i < charArray.length; i++) {\n            char currentChar\
    \ = charArray[i];\n            if (currentChar == 'A') {\n                charArray[i]\
    \ = 'B';\n            } else if (currentChar == 'B') {\n                charArray[i]\
    \ = 'A';\n            } else if (currentChar == 'E') {\n                charArray[i]\
    \ = 'F';\n            } else if (currentChar == 'F') {\n                charArray[i]\
    \ = 'E';\n            } else if (currentChar == 'I') {\n                charArray[i]\
    \ = 'J';\n            } else if (currentChar == 'J') {\n                charArray[i]\
    \ = 'I';\n            } else if (currentChar == 'O') {\n                charArray[i]\
    \ = 'N';\n            } else if (currentChar == 'N') {\n                charArray[i]\
    \ = 'O';\n            } else if (currentChar == 'U') {\n                charArray[i]\
    \ = 'T';\n            } else if (currentChar == 'T') {\n                charArray[i]\
    \ = 'U';\n            } else if (currentChar == 'Z') {\n                charArray[i]\
    \ = 'X';\n            } else if (currentChar == 'X') {\n                charArray[i]\
    \ = 'Z';\n            }\n        }\n        for (int i = 0; i < charArray.length;\
    \ i++) {\n            if (charArray[i] == 'A') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'B') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'C') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'D') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'E') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'F') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'G') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'H') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'I') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'J') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'K') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'L') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'M') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'N') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'O') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'P') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'Q') {\n                encodedMessage.append(currentChar);\n\
    \            } else if (charArray[i] == 'R') {\n                encodedMessage",
  "        // Split the message into its letters.\n        String[] letters = message.toLowerCase().split(\"\
    \");\n        // Create a new array where each element is a letter that appears\
    \ two \n        // places ahead of that letter in the english alphabet, \n   \
    \     // and store this in lowercase letters.\n        String[] swappedLetters\
    \ = new String[letters.length];\n        for (int i = 0; i < letters.length; i++)\
    \ {\n            // Iterate through each letter in the message.\n            String\
    \ l = letters[i];\n            int index = l.toUpperCase().indexOf('A');\n   \
    \         // If the letter is two places ahead of the one in our \n          \
    \  // english alphabet, add it to the array, if it isn't, don't. \n          \
    \  if (index != -1) {\n                swappedLetters[i] = l.substring(0, index)\
    \ + l.substring(index + 1);\n            } else {\n                swappedLetters[i]\
    \ = l;\n            }\n        }\n        // Iterate through each letter in the\
    \ letters array.\n        for (int i = 0; i < letters.length; i++) {\n       \
    \     String l = letters[i];\n            // If this letter isn't in swappedLetters,\
    \ add it to the array \n            // and move on to the next letter.\n     \
    \       if (l != null && !swappedLetters.contains(l)) {\n                swappedLetters[letters.length\
    \ - i - 1] += l;\n            }\n        }\n        // Return a String of all\
    \ the letters in the array swapped case. \n        return Arrays.stream(swappedLetters)\n\
    \                .map(s -> s.toUpperCase().replace('A', 'a'))\n              \
    \  .collect(Collectors.joining(\"\"));", "        StringBuilder sb = new StringBuilder();\n\
    \        for (char ch : message.toCharArray()) {\n            switch (ch) {\n\
    \                case ' ':\n                    sb.append(\" \");\n          \
    \          break;\n                case 'a':\n                    sb.append('A');\n\
    \                    break;\n                case 'b':\n                    sb.append('B');\n\
    \                    break;\n                case 'c':\n                    sb.append('C');\n\
    \                    break;\n                case 'd':\n                    sb.append('D');\n\
    \                    break;\n                case 'e':\n                    sb.append('E');\n\
    \                    break;\n                case 'f':\n                    sb.append('F');\n\
    \                    break;\n                case 'g':\n                    sb.append('G');\n\
    \                    break;\n                case 'h':\n                    sb.append('H');\n\
    \                    break;\n                case 'i':\n                    sb.append('I');\n\
    \                    break;\n                case 'j':\n                    sb.append('J');\n\
    \                    break;\n                case 'k':\n                    sb.append('K');\n\
    \                    break;\n                case 'l':\n                    sb.append('L');\n\
    \                    break;\n                case 'm':\n                    sb.append('M');\n\
    \                    break;\n                case 'n':\n                    sb.append('N');\n\
    \                    break;\n                case 'o':\n                    sb.append('O');\n\
    \                    break;\n                case 'p':\n                    sb.append('P');\n\
    \                    break;\n                case 'q':\n                    sb.append('Q');\n\
    \                    break;\n                case 'r':\n                    sb.append('R');\n\
    \                    break;\n                case 's':\n                    sb.append('S');\n\
    \                    break;\n                case 't':\n                    sb.append('T');\n\
    \                    break;\n                case 'u':\n                    sb.append('U');\n\
    \                    break;\n                case 'v':\n                    sb.append('V');\n\
    \                    break;\n                case 'w':\n                    sb.append('W');\n\
    \                    break;\n                case 'x':\n                    sb.append('X');\n\
    \                    break;\n                case 'y':\n                    sb.append('Y');\n\
    \                    break;\n                case 'z':\n                    sb.append('Z');\n\
    \                    break;\n                case 'A':\n                    sb.append('a');\n\
    \                    break;\n                case 'B':\n                    sb.append('b');\n\
    \                    break;\n                case 'C':\n                    sb.append('c');\n\
    \                    break;\n                case 'D':\n                    sb.append('d');\n\
    \                    break;\n                case 'E':\n                    sb.append('e');\n\
    \                    break;\n                case 'F':\n                    sb.append('f');\n\
    \                    break;\n                case 'G':\n                    sb.append('g');\n\
    \                    break;\n                case 'H':\n                    sb.append('h');\n\
    \                    break;\n                case 'I':\n                    sb.append('i');\n\
    \                    break;\n                case 'J':\n                    sb.append('j');\n\
    \                    break;\n                case 'K':\n                    sb.append('k');",
  "        List<Character> result = new ArrayList<Character>();\n        message.chars().forEach(character\
    \ -> result.add(getLetter(character)));\n        message = result.toString().toUpperCase();\n\
    \        message = message.replaceAll(\"[AEIOUYAEIOUY]+\", \" \");\n        message\
    \ = message.replaceAll(\"[AEIOUYAEIOUY]+\", \"$2\");\n        return message;",
  "        String result = \"\";\n        char[] charArray = message.toCharArray();\n\
    \        for(int i = 0; i < charArray.length; i++) {\n            char currentChar\
    \ = charArray[i];\n            String charUpper = new String(Character.toUpperCase(currentChar));\n\
    \            String charLower = new String(Character.toLowerCase(currentChar));\n\
    \            if(vowels.contains(charUpper)) {\n                for (int j = 0;\
    \ j < vowels.size(); j++) {\n                    if(vowels.contains(charLower.charAt(j)))\
    \ {\n                        charArray[i] = vowels.indexOf(charUpper, j);\n  \
    \                  }\n                }\n            } else if(vowels.contains(charLower))\
    \ {\n                for (int j = 0; j < vowels.size(); j++) {\n             \
    \       if(vowels.contains(charUpper.charAt(j))) {\n                        charArray[i]\
    \ = vowels.indexOf(charLower, j);\n                    }\n                }\n\
    \            } else {\n                result += charArray[i];\n            }\n\
    \        }\n        return result;", "        if (message.matches(\"[a-zA-Z]*\"\
    )) {\n            return message.chars().mapToObj(c -> (char)c).map(c -> {\n \
    \               switch(c) {\n                    case 'a': return '@';\n     \
    \               case 'b': return '!';\n                    case 'c': return '#';\n\
    \                    case 'd': return '$';\n                    case 'e': return\
    \ '%';\n                    case 'f': return '&';\n                    case 'g':\
    \ return '(';\n                    case 'h': return ')';\n                   \
    \ case 'i': return '*';\n                    case 'j': return '^';\n         \
    \           case 'k': return '_';\n                    case 'l': return '=';\n\
    \                    case 'm': return ';';\n                    case 'n': return\
    \ '-';\n                    case 'o': return '.';\n                    case 'p':\
    \ return '/';\n                    case 'q': return '|';\n                   \
    \ case 'r': return '<';\n                    case 's': return '>';\n         \
    \           case 't': return '?';\n                    case 'u': return 'U';\n\
    \                    case 'v': return 'V';\n                    case 'w': return\
    \ 'W';\n                    case 'x': return 'X';\n                    case 'y':\
    \ return 'Y';\n                    case 'z': return 'Z';\n                }\n\
    \            }).collect(Collectors.joining());\n        } else {\n           \
    \ return message;\n        }", "        char[] c = message.toCharArray();\n  \
    \      Arrays.sort(c);\n        StringBuilder sb = new StringBuilder();\n    \
    \    for (int i = 0; i < c.length; i++) {\n            char d = c[i];\n      \
    \      sb.append((i > 0) ? message.charAt(i - 1) : d);\n            int count\
    \ = 0;\n            while (Character.isLetter(c[i])) {\n                sb.append((c[i]\
    \ == 'A' || c[i] == 'E' || c[i] == 'I' || c[i] == 'O' || c[i] == 'U') ? \n   \
    \                 'a' : \n                    (c[i] == 'E' || c[i] == 'I' || c[i]\
    \ == 'O' || c[i] == 'U') ? 'e' :\n                    (c[i] == 'A' || c[i] ==\
    \ 'O') ? 'i' :\n                    (c[i] == 'U') ? 'u' : 'c');\n            \
    \    count++;\n                i++;\n            }\n            if (count == 2)\
    \ {\n                sb.append(Character.toUpperCase(c[i - 1]));\n           \
    \ }\n        }\n        return sb.toString();", "        List<Character> swapped\
    \ = \n            message.chars().mapToObj(Character::toUpperCase)\n         \
    \       .collect(Collectors.toList());\n\n        List<String> vowels = \n   \
    \         Arrays.asList(\"\", \"\", \"a\", \"e\", \"i\", \"o\", \"u\");\n\n  \
    \      StringBuilder sb = new StringBuilder(message.length());\n        for (char\
    \ c : message.toCharArray()) {\n            if (vowels.contains(\"\"+c+\"\"))\
    \ {\n                sb.append(vowels.indexOf(\"a\") + 1);\n            } else\
    \ {\n                sb.append(vowels.indexOf(\"A\") + 1);\n            }\n  \
    \          sb.append(swapped.indexOf(c) + 1);\n        }\n        return sb.toString();",
  '        return message.replaceAll("[a-z]", "$&$&");', "        int index = 0, vowel\
    \ = 0;\n        StringBuilder builder = new StringBuilder();\n        for (int\
    \ i = 0; i < message.length(); i++) {\n            char character = message.charAt(i);\n\
    \            if (Character.isLetter(character)) {\n                char lowerCaseCharacter\
    \ = Character.toLowerCase(character);\n                char upperCaseCharacter\
    \ = Character.toUpperCase(character);\n                if (Character.isLetter(lowerCaseCharacter))\
    \ {\n                    if (vowel == 2) {\n                        builder.append(lowerCaseCharacter);\n\
    \                    } else {\n                        builder.append(upperCaseCharacter);\n\
    \                        vowel++;\n                    }\n                } else\
    \ {\n                    if (vowel == 2) {\n                        builder.append(lowerCaseCharacter);\n\
    \                    } else {\n                        builder.append(upperCaseCharacter);\n\
    \                    }\n                    vowel++;\n                }\n    \
    \        } else if (Character.isVowel(character)) {\n                if (vowel\
    \ == 2) {\n                    builder.append(character);\n                } else\
    \ {\n                    builder.append(Character.toUpperCase(character));\n \
    \                   vowel++;\n                }\n            } else {\n      \
    \          builder.append(character);\n            }\n        }\n        return\
    \ builder.toString();", "        char[] arr = message.toCharArray();\n       \
    \ for (char c : arr) {\n            if (Character.isLetter(c)) {\n           \
    \     char[] newArr = new char[arr.length];\n                int i = 0;\n    \
    \            for (int j = i; j < arr.length; j++) {\n                    if (arr[i]\
    \ == c) {\n                        newArr[i] = arr[j + 1];\n                 \
    \   } else {\n                        newArr[i] = arr[j];\n                  \
    \  }\n                    i++;\n                }\n                arr = newArr;\n\
    \            }\n        }\n\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < arr.length; i++) {\n            char c = arr[i];\n\
    \            int index1 = (int) c;\n            int index2 = index1 + 1;\n   \
    \         if (Character.isUpperCase(c)) {\n                sb.append(Character.toUpperCase(arr[index2]));\n\
    \            } else {\n                sb.append(Character.toLowerCase(arr[index2]));\n\
    \            }\n        }\n\n        return sb.toString();", "        char[] message\
    \ = message.toCharArray();\n        for(int i = 0; i < message.length; i++) {\n\
    \            if(message[i] == 'a') {\n                char replacement = message[++i];\n\
    \                char replacement2 = message[++i];\n                if(replacement2\
    \ >= 'A' && replacement2 <= 'Z') {\n                    char replacement3 = message[++i];\n\
    \                    message[i] = (replacement3 - 'A' + replacement);\n      \
    \              message[i] = (replacement3 - 'a' + replacement);\n            \
    \    } \n            }\n        }\n        return new String(message);", "   \
    \     return message.replaceAll(\"[a-z]\", \"x\").replaceAll(\"[aeiouAEIOU]\"\
    , \"z\").replaceAll(\"[aeiouAEIOU]\", \"z\").\n                replaceAll(\"[aeiouAEIOU]\"\
    , \"z\").replaceAll(\"[aeiouAEIOU]\", \"z\").replaceAll(\"[aeiouAEIOU]\", \"z\"\
    ).replaceAll(\"[aeiouAEIOU]\", \"z\");", "        \n        return message.replaceAll(\"\
    [AEIOUaeiou]\", \"$2\");", "        String result=\"\";\n        for(int i=0;i<message.length();i++)\
    \ {\n            int countVowel=0;\n            char c=message.charAt(i);\n  \
    \          char nextVowel=message.charAt(i+1);\n            if((c>='a' && c<='z')||(c>='A'\
    \ && c<='Z'))\n            {\n                if((c==nextVowel)||(c=='U')||(c=='a')||(c=='e')||(c=='o')||(c=='u'))\n\
    \                    countVowel++;\n            }\n            if((countVowel>2)&&(c!='U'))\n\
    \            {\n                c=Character.toLowerCase(c);\n                result+=c;\n\
    \                i=i+2;\n            }\n        }\n        return result;", " \
    \       \n        //String [] vowels = {\"a\",\"e\",\"i\",\"o\",\"u\"};\n    \
    \    //String [] vowels = {\"A\",\"E\",\"I\",\"O\",\"U\"};\n        String []\
    \ vowels = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        \n        //System.out.println(message);\n\
    \        \n        //String [] message = {\"M\",\"H\",\"U\",\"C\",\"E\"};\n  \
    \      //String [] message = {\"M\",\"H\",\"U\",\"C\"};\n        String [] message\
    \ = {\"M\", \"H\", \"U\", \"C\"};\n        \n        //System.out.println(Arrays.toString(message));\n\
    \        \n        String [] message2 = message.split(\"\");\n        \n     \
    \   for(int i=0; i<message2.length; i++){\n            \n            if(vowels.indexOf(message2[i])>=0)\
    \ {\n                \n                String [] message3 = message2.clone();\n\
    \                \n                String a = message3[i];\n                int\
    \ indexVowel = vowels.indexOf(a);\n                \n                //System.out.println(message3[i]);\n\
    \                \n                int indexLetter = message3.indexOf(message3[i]);\n\
    \                \n                //System.out.println(indexLetter);\n      \
    \          \n                int indexLetter2 = message3.indexOf(message3[indexVowel+1]);\n\
    \                \n                //System.out.println(indexLetter2);\n     \
    \           \n                String t = message3[indexLetter];\n            \
    \    \n                String y = message3[indexLetter+2];\n                \n\
    \                String s = message3[indexLetter2];\n                \n      \
    \          message3[indexLetter] = s;\n                \n                message3[indexLetter2]\
    \ = t;\n                \n                message3[indexVowel+1] = y;\n      \
    \          \n                //System.out.println(message3[indexLetter]);\n  \
    \              \n                message2[i] = message3[indexLetter];\n      \
    \          \n                //System.out.println(message2[i]);\n            \
    \    \n            }\n        }\n        \n        \n        \n        \n    \
    \    \n        //String t = message2[0];\n        //String y = message2[1];\n\
    \        //String s = message2[2];\n        \n        //System.out.println(t);\n\
    \        \n        //System.out.println(y);\n        \n        //System.out.println(s);\n\
    \        \n        String t = message2[0];\n        String y = message2[1];\n\
    \        String s = message2[2];\n        \n        //System.out.println(t);\n\
    \        \n        //System.out.println(y);\n        \n        //System.out.println(s);\n\
    \        \n        //System.out.println(s);\n        \n        return t;\n   \
    \     ", "        return message.\n                chars()\n                .mapToObj(i\
    \ -> i.\n                        toUpperCase().\n                        replaceAll(\"\
    [AEIOUaeiou]\", \"E\").\n                        toUpperCase().\n            \
    \            replaceAll(\"[AEIOUaeiou]\", \"A\").\n                        toUpperCase().\n\
    \                        replaceAll(\"[AEIOUaeiou]\", \"O\").\n              \
    \          replaceAll(\"[AEIOUaeiou]\", \"I\"))\n                .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n                .toString();",
  "        if (message.isEmpty()) return \"\";\n        StringBuilder builder = new\
    \ StringBuilder();\n        message = message.toLowerCase();\n        char[] chars\
    \ = message.toCharArray();\n        int length = chars.length;\n        for (int\
    \ i = 0; i < length; i++) {\n            char c = chars[i];\n            if (Character.isLetter(c))\
    \ {\n                builder.append(c);\n            } else {\n              \
    \  char next = i + 1 < length ? chars[i + 1] : ' ';\n                char prev\
    \ = (i > 0) ? chars[i - 1] : ' ';\n                if (Character.isLetter(next)\
    \ && Character.isLetter(prev)) {\n                    builder.append(String.valueOf(next).toUpperCase());\n\
    \                    builder.append(String.valueOf(prev).toLowerCase());\n   \
    \             } else {\n                    throw new IllegalArgumentException(\"\
    Message contains non-letters\");\n                }\n            }\n        }\n\
    \        return builder.toString();", "        char[] charArray = message.toCharArray();\n\
    \        Arrays.sort(charArray);\n        StringBuilder builder = new StringBuilder();\n\
    \        for(int i=0;i<charArray.length;i++) {\n            char currentChar =\
    \ charArray[i];\n            if(Character.isLetter(currentChar)) {\n         \
    \       String currentWord = Character.toString(currentChar);\n              \
    \  String lastVowel = currentWord.substring(currentWord.length()-1);\n       \
    \         int lastVowelIndex = currentWord.indexOf(lastVowel);\n             \
    \   if(lastVowelIndex != -1) {\n                    String firstVowel = currentWord.substring(0,\
    \ lastVowelIndex);\n                    char firstVowelChar = Character.toUpperCase(firstVowel.charAt(0));\n\
    \                    String firstVowelWord = Character.toString(firstVowelChar);\n\
    \                    currentWord = currentWord.replace(firstVowel, firstVowelWord);\n\
    \                }\n                builder.append(currentWord);\n           \
    \ }\n        }\n        return builder.toString();", "        char[] characterArray\
    \ = message.toCharArray();\n        HashMap<Character, Integer> map = new HashMap<>();\n\
    \        StringBuilder builder = new StringBuilder();\n\n        for (int i =\
    \ 0; i < characterArray.length; i++) {\n            Character character = characterArray[i];\n\
    \n            // Check if character is a vowel\n            if (Character.isLetterOrDigit(character))\
    \ {\n                char lowercaseCharacter = Character.toLowerCase(character);\n\
    \n                // Check if letter has already been mapped to some number\n\
    \                if (map.containsKey(lowercaseCharacter)) {\n                \
    \    Integer originalValue = map.get(lowercaseCharacter);\n                  \
    \  int numberOfOccurences = originalValue.intValue();\n                    numberOfOccurences++;\n\
    \                    map.put(lowercaseCharacter, numberOfOccurences);\n      \
    \          } else {\n                    map.put(lowercaseCharacter, 1);\n   \
    \             }\n            } else {\n                // Character is neither\
    \ a letter or digit. \n                // Map to some other character. \n    \
    \            map.put(character, 2);\n            }\n        }\n\n        for (Map.Entry<Character,\
    \ Integer> entry : map.entrySet()) {\n            char key = entry.getKey();\n\
    \            int value = entry.getValue();\n            builder.append(key);\n\
    \n            for (int i = 0; i < value - 1; i++) {\n                builder.append(entry.getKey());\n\
    \            }\n\n            builder.append(key);\n        }\n        return\
    \ builder.toString();", '        return null;', "        final Map<Character,\
    \ String> map = new HashMap<>();\n        map.put('T', \"H\");\n        map.put('G',\
    \ \"Z\");\n        map.put('S', \"Z\");\n        map.put('C', \"S\");\n      \
    \  map.put('K', \"S\");\n        map.put('M', \"S\");\n        map.put('H', \"\
    G\");\n        map.put('G', \"Z\");\n\n        String result = message;\n    \
    \    result = result.replaceAll(\"[aeiou]\", \"X\");\n        result = result.replaceAll(\"\
    [^a-z]\", \"X\");\n        result = result.substring(1);\n        result = result.toLowerCase();\n\
    \        result = result.toUpperCase();\n\n        StringBuilder finalResult =\
    \ new StringBuilder();\n        for (int i = 0; i < result.length(); i++) {\n\
    \            char c = result.charAt(i);\n            if (map.containsKey(c)) {\n\
    \                finalResult.append(map.get(c));\n            } else {\n     \
    \           finalResult.append(c);\n            }\n        }\n        return finalResult.toString();",
  "        String[] letters = message.toLowerCase().split(\"\");\n        char[] arr\
    \ = new char[letters.length];\n        for(int i = 0; i < letters.length; i++)\n\
    \        {\n            arr[i] = letters[i].charAt(0);\n        }\n        return\
    \ String.valueOf(arr);", "        String encodedMessage = \"\";\n        for (int\
    \ i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            char nextLetter = Character.toLowerCase(c);\n            String letter\
    \ = Character.toString(nextLetter);\n            encodedMessage += letter;\n \
    \       }\n        return encodedMessage;", "        String encodedMessage = \"\
    \";\n\n        for (int i = 0; i < message.length(); i++) {\n            char\
    \ currentChar = message.charAt(i);\n            char previous = message.charAt(i\
    \ - 1);\n            int indexOfPreviousChar = -1;\n\n            if (Character.isUpperCase(previous))\
    \ {\n                indexOfPreviousChar = message.indexOf(previous);\n      \
    \      } else if (Character.isLowerCase(previous)) {\n                indexOfPreviousChar\
    \ = message.indexOf(previous, 1);\n            }\n\n            String previousLetter\
    \ = previousLetters.get(previous); \n            String previousLetterFromIndex\
    \ = previousLetters.get(previousLetter);\n\n            if (indexOfPreviousChar\
    \ != -1) {\n                char nextChar = message.charAt(i + 1);\n         \
    \       String nextLetter = nextLetters.get(nextChar);\n\n                if (Character.isUpperCase(nextChar))\
    \ {\n                    int indexOfNextChar = message.indexOf(nextChar);\n  \
    \                  if (indexOfNextChar != -1) {\n                        previousLetterFromIndex\
    \ = getLetterFromIndex(indexOfPreviousChar, indexOfNextChar);\n              \
    \      }\n                }\n\n                encodedMessage += getLetterFromIndex(indexOfPreviousChar,\
    \ indexOfPreviousChar);\n            } else if (Character.isUpperCase(currentChar))\
    \ {\n                previousLetter = previousLetters.get(currentChar);\n    \
    \            previousLetterFromIndex = previousLetters.get(previousLetter);\n\n\
    \                for (int j = 1; j < previousLetterFromIndex.length(); j++) {\n\
    \                    char letter = previousLetterFromIndex.charAt(j);\n      \
    \              char nextLetter = message.charAt(i + j);\n\n                  \
    \  if (Character.isUpperCase(letter)) {\n                        int indexOfNextChar\
    \ = message.indexOf(nextLetter);\n                        if (indexOfNextChar\
    \ != -1) {\n                            previousLetterFromIndex = getLetterFromIndex(indexOfPreviousChar,\
    \ indexOfNextChar);\n                        }\n                    } else if\
    \ (Character.isLowerCase(letter)) {\n                        int indexOfNextChar\
    \ = message.indexOf(nextLetter, 1);\n                        if (indexOfNextChar\
    \ != -1) {\n                            previousLetterFromIndex = getLetterFromIndex(indexOfPreviousChar,\
    \ indexOfNextChar);\n                        }\n                    }\n      \
    \          }\n                encodedMessage += previousLetterFromIndex;\n   \
    \         } else if (Character.isLowerCase(currentChar)) {\n                previousLetter\
    \ = previousLetters.get(currentChar);\n                previousLetterFromIndex\
    \ = previousLetters.get(previousLetter);\n\n                for (int j = 1; j\
    \ < previousLetterFromIndex.length(); j++) {\n                    char letter\
    \ = previousLetterFromIndex.charAt(j);\n                    char nextLetter =\
    \ message.charAt(i + j);\n\n                    if (Character.isLowerCase(letter))\
    \ {\n                        int indexOfNextChar = message.indexOf(nextLetter,\
    \ 1);\n                        if (indexOfNextChar != -1) {\n                \
    \            previousLetterFromIndex = getLetterFromIndex(indexOfPreviousChar,\
    \ indexOfNextChar);\n                        }\n                    } else if\
    \ (Character.", "        ArrayList<Character> letters = new ArrayList<Character>();\n\
    \        for(int i = 0; i < message.length(); i++) {\n            char c = message.charAt(i);\n\
    \            letters.add(c);\n        }\n        for(int i = 0; i < letters.size();\
    \ i++) {\n            char c = letters.get(i);\n            int index = c - 'a';\n\
    \            String letter = String.valueOf(index);\n            int index2 =\
    \ c + 1;\n            String letter2 = String.valueOf(index2);\n            if(letter.equals(\"\
    a\")) {\n                letter = letter2;\n            }\n            if(letter.equals(\"\
    e\")) {\n                letter = letter2;\n            }\n            if(letter.equals(\"\
    i\")) {\n                letter = letter2;\n            }\n            if(letter.equals(\"\
    o\")) {\n                letter = letter2;\n            }\n            if(letter.equals(\"\
    u\")) {\n                letter = letter2;\n            }\n            message.replace(i,\
    \ i+1, letter);\n        }\n        return message;", "        String encoded\
    \ = \"\";\n        for (int i = 0; i < message.length(); i++) {\n            char\
    \ currentChar = message.charAt(i);\n            int position = currentChar - 'a';\n\
    \            if (position < 2) {\n                char nextChar = message.charAt(i\
    \ + 1);\n                encoded = encoded + Character.toUpperCase(nextChar);\n\
    \            }\n            else {\n                char nextChar = message.charAt(i\
    \ + 2);\n                encoded = encoded + nextChar;\n            }\n      \
    \  }\n        return encoded;", "        Map<String, String> map = new HashMap<>();\n\
    \        map.put(\"A\", \"A\");\n        map.put(\"B\", \"C\");\n        map.put(\"\
    C\", \"B\");\n        map.put(\"D\", \"E\");\n        map.put(\"E\", \"D\");\n\
    \        map.put(\"F\", \"G\");\n        map.put(\"G\", \"F\");\n        map.put(\"\
    H\", \"J\");\n        map.put(\"I\", \"H\");\n        map.put(\"J\", \"I\");\n\
    \        map.put(\"K\", \"L\");\n        map.put(\"L\", \"K\");\n        map.put(\"\
    M\", \"N\");\n        map.put(\"N\", \"M\");\n        map.put(\"O\", \"P\");\n\
    \        map.put(\"P\", \"O\");\n        map.put(\"Q\", \"Q\");\n        map.put(\"\
    R\", \"S\");\n        map.put(\"S\", \"R\");\n        map.put(\"T\", \"T\");\n\
    \        map.put(\"U\", \"V\");\n        map.put(\"V\", \"U\");\n        map.put(\"\
    W\", \"W\");\n        map.put(\"X\", \"X\");\n        map.put(\"Y\", \"Y\");\n\
    \        map.put(\"Z\", \"Z\");\n        map.put(\"a\", \"a\");\n        map.put(\"\
    b\", \"c\");\n        map.put(\"c\", \"b\");\n        map.put(\"d\", \"e\");\n\
    \        map.put(\"e\", \"d\");\n        map.put(\"f\", \"g\");\n        map.put(\"\
    g\", \"f\");\n        map.put(\"h\", \"j\");\n        map.put(\"i\", \"h\");\n\
    \        map.put(\"j\", \"i\");\n        map.put(\"k\", \"l\");\n        map.put(\"\
    l\", \"k\");\n        map.put(\"m\", \"n\");\n        map.put(\"n\", \"m\");\n\
    \        map.put(\"o\", \"p\");\n        map.put(\"p\", \"o\");\n        map.put(\"\
    q\", \"q\");\n        map.put(\"r\", \"s\");\n        map.put(\"s\", \"r\");\n\
    \        map.put(\"t\", \"t\");\n        map.put(\"u\", \"v\");\n        map.put(\"\
    v\", \"u\");\n        map.put(\"w\", \"w\");\n        map.put(\"x\", \"x\");\n\
    \        map.put(\"y\", \"y\");\n        map.put(\"z\", \"z\");\n        char[]\
    \ chars = message.toCharArray();\n        StringBuilder result = new StringBuilder();\n\
    \        for (int i = 0; i < chars.length; i++) {\n            if (i % 2 == 0)\
    \ {\n                String value = map.get(chars[i]);\n                if (value\
    \ == null) {\n                    result.append(' ');\n                } else\
    \ {\n", "        System.out.println(message);\n        return message;", "   \
    \     String[] alphabet = { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n        String[] consonants\
    \ = { \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n\
    \        String[] vowels = { \"a\", \"e\", \"i\", \"o\", \"u\", \"y\" };\n   \
    \     StringBuilder result = new StringBuilder();\n        for(int i = 0; i <\
    \ message.length(); i++) {\n            String character = message.substring(i,\
    \ i + 1);\n            if(character.equals(\" \")) {\n                result.append(\"\
    _\");\n            } else {\n                int index = alphabet.indexOf(character);\n\
    \                if (index >= 0) {\n                    int nextIndex = index\
    \ - 1;\n                    while (nextIndex >= 0) {\n                       \
    \ String nextCharacter = alphabet.charAt(nextIndex);\n                       \
    \ if (vowels.contains(nextCharacter)) {\n                            nextIndex--;\n\
    \                            break;\n                        }\n             \
    \           nextIndex--;\n                    }\n                    if (nextIndex\
    \ >= 0) {\n                        result.append(alphabet[nextIndex]);\n     \
    \               } else {\n                        result.append('_');\n      \
    \              }\n                } else {\n                    int nextIndex\
    \ = consonants.indexOf(character);\n                    if (nextIndex >= 0) {\n\
    \                        int nextIndex2 = nextIndex + 1;\n                   \
    \     while (nextIndex2 >= 0) {\n                            String nextCharacter2\
    \ = consonants[nextIndex2];\n                            if (vowels.contains(nextCharacter2))\
    \ {\n                                nextIndex2++;\n                         \
    \       break;\n                            }\n                            nextIndex2++;\n\
    \                        }\n                        if (nextIndex2 >= 0) {\n \
    \                           result.append(consonants[nextIndex2]);\n         \
    \               } else {\n                            result.append('_');\n  \
    \                      }\n                    } else {\n                     \
    \   result.append('_');\n                    }\n                }\n          \
    \  }\n        }\n        return result.toString();", "        String s = message.toLowerCase();\n\
    \        String result = \"\";\n        for(int i=0; i<s.length(); i++) {\n  \
    \          char ch = s.charAt(i);\n            result += ch;\n        }\n    \
    \    return result;", "        int[] vowels = new int[] { 2, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27,\
    \ 28, 29, 30, 31 };\n        String result = \"\";\n        for (int i = 0; i\
    \ < message.length(); ++i) {\n            if (message.toLowerCase().contains(vowels[i]\
    \ + \"\")) {\n                result += message.toLowerCase();\n            }\
    \ else {\n                result += message.charAt(i) + message.charAt(i + 1);\n\
    \            }\n        }\n        return result;", "        int[] vowels = {\
    \ 'a', 'e', 'i', 'o', 'u' };\n        char [] letters = message.toLowerCase().toCharArray();\n\
    \        Arrays.sort(letters);\n\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < letters.length; i++){\n            if (letters[i]\
    \ == 'a' || letters[i] == 'e' || letters[i] == 'i' || letters[i] == 'o' || letters[i]\
    \ == 'u')\n                letters[i] = letters[vowels[i+1]];\n            else\
    \ \n                letters[i] = letters[i];\n        }\n        \n        for\
    \ (int i = 0; i < vowels.length; i++)\n            sb.append(vowels[i]);\n\n \
    \       for (int i = 0; i < letters.length; i++)\n            sb.append(letters[i]);\n\
    \n        return sb.toString();", "        String[] chars = message.split(\"\"\
    );\n        StringBuilder sb = new StringBuilder();\n        for (String s: chars)\
    \ {\n            char[] ch = s.toCharArray();\n            int k = 0;\n      \
    \      for (int i = 0; i < ch.length; i++) {\n                if (Character.isLetter(ch[i]))\
    \ {\n                    for (int j = k; j < k+2; j++) {\n                   \
    \     if (Character.isLetter(ch[j])) {\n                            ch[j] = Character.toLowerCase(ch[j]);\n\
    \                        }\n                    }\n                    ch[k] =\
    \ Character.toUpperCase(ch[k]);\n                    k += 2;\n               \
    \ } else {\n                    ch[i] = Character.toLowerCase(ch[i]);\n      \
    \          }\n            }\n            sb.append(new String(ch));\n        }\n\
    \        return sb.toString();", "        List<Character> messageChars = new ArrayList<>(message.chars());\n\
    \        messageChars.sort((c1, c2) -> c1.compareTo(c2));\n        List<Character>\
    \ result = new ArrayList<>(message.length());\n        for (char c : messageChars)\
    \ {\n            int index = -1;\n            for (char ltr : letters) {\n   \
    \             if (c == 'a') index = ltr;\n                else if (c == ltr) index\
    \ = ltr;\n            }\n            if (index != -1) result.add(index);\n   \
    \         else result.add(c);\n        }\n        return String.valueOf(result);",
  "        char[] c = message.toCharArray();\n        String result = \"\";\n    \
    \    for (int i = 0; i < c.length; i++) {\n            char currentChar = c[i];\n\
    \            if (Character.isUpperCase(currentChar)) {\n                char previousChar\
    \ = c[i - 1];\n                result += String.valueOf(Character.toLowerCase(previousChar))\
    \ + \n                    String.valueOf(Character.toUpperCase(currentChar));\n\
    \            } else if (Character.isLowerCase(currentChar)) {\n              \
    \  char previousChar = c[i - 1];\n                result += String.valueOf(Character.toUpperCase(previousChar))\
    \ + \n                    String.valueOf(Character.toLowerCase(currentChar));\n\
    \            } else {\n                result += currentChar;\n            }\n\
    \        }\n        return result;", "        // TODO: Write your function here!\n\
    \        throw new UnsupportedOperationException(\"Not implemented yet\");", " \
    \       List<String> messageList = new ArrayList<String>();\n        for(char\
    \ c : message.toCharArray()) {\n            if('a'<=c && c<='z') {\n         \
    \       messageList.add(Character.toString(c));\n            } else if('A'<=c\
    \ && c<='Z') {\n                messageList.add(Character.toLowerCase(c));\n \
    \           } else if('a'<=c && c<='z') {\n                messageList.add(Character.toLowerCase(c));\n\
    \            } else {\n                System.out.println(\"Invalid Character\"\
    );\n            }\n        }\n\n        String returnString = \"\";\n        for(int\
    \ i = 0; i < messageList.size(); i++) {\n            if(messageList.get(i).equalsIgnoreCase(\"\
    a\")) {\n                returnString += messageList.get(i).toLowerCase();\n \
    \           } else if(messageList.get(i).equalsIgnoreCase(\"e\")) {\n        \
    \        returnString += messageList.get(i).toLowerCase();\n            } else\
    \ if(messageList.get(i).equalsIgnoreCase(\"i\")) {\n                returnString\
    \ += messageList.get(i).toLowerCase();\n            } else if(messageList.get(i).equalsIgnoreCase(\"\
    o\")) {\n                returnString += messageList.get(i).toLowerCase();\n \
    \           } else if(messageList.get(i).equalsIgnoreCase(\"u\")) {\n        \
    \        returnString += messageList.get(i).toLowerCase();\n            } else\
    \ if(messageList.get(i).equalsIgnoreCase(\"y\")) {\n                returnString\
    \ += messageList.get(i).toLowerCase();\n            } else {\n               \
    \ returnString += messageList.get(i);\n            }\n\n            returnString\
    \ += messageList.get(i+1);\n        }\n        return returnString;", '        return
    "";', "        char[] charArray = message.toCharArray();\n        int length =\
    \ charArray.length;\n        char[] newCharArray = new char[length];\n       \
    \ for (int i = 0; i < length; ++i) {\n            char c = charArray[i];\n   \
    \         if (Character.isLetter(c)) {\n                int place = i + 1;\n \
    \               char placeChar = Character.toLowerCase(c) + place;\n         \
    \       if (Character.isLetter(placeChar)) {\n                    placeChar =\
    \ Character.toUpperCase(placeChar);\n                }\n                newCharArray[i]\
    \ = placeChar;\n            }\n        }\n        return new String(newCharArray);",
  "        char[] charArray = message.toCharArray();\n        StringBuilder sb = new\
    \ StringBuilder();\n        for (int i = 0; i < charArray.length; i++) {\n   \
    \         char c = charArray[i];\n            String upperCase = Character.toUpperCase(c);\n\
    \            if (isVowel(c)) {\n                sb.append(upperCase.charAt(0));\n\
    \                for (int j = 1; j < upperCase.length(); j++) {\n            \
    \        if (isVowel(upperCase.charAt(j))) continue;\n                    sb.append(upperCase.charAt(j));\n\
    \                }\n                sb.append(upperCase.charAt(upperCase.length()\
    \ - 1));\n                continue;\n            }\n            sb.append(upperCase);\n\
    \        }\n        return sb.toString();", "        // TODO: implement this function\n\
    \        return message;", "        char[] chars = message.toCharArray();\n  \
    \      for (int i = 0; i < chars.length; i++) {\n            char c = chars[i];\n\
    \            if (Character.isLetter(c)) {\n                chars[i] = Character.toLowerCase(c);\n\
    \            } else if (Character.isUpperCase(c)) {\n                int v = Character.getNumericValue(c);\n\
    \                chars[i] = Character.toUpperCase(chars[v]);\n            }\n\
    \        }\n        return String.valueOf(chars);", "        //TODO: create array\
    \ of vowel letters \n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n  \
    \      //TODO: use stream api to stream input string\n        //TODO: use java8\
    \ or java9 to implement lambda expression\n        //TODO: use lambda expression\
    \ to implement function \n        //TODO: use java8 or java9 to implement lambda\n\
    \        StringBuilder sb = new StringBuilder(message);\n        Arrays.stream(message.split(\"\
    \ \"))\n            .map((String s) -> {\n                for (char c : s.toCharArray())\
    \ {\n                    //TODO: if vowel check found at odd location\n      \
    \              if (Arrays.asList(vowels).indexOf(c) % 2 > 0) {\n             \
    \           //TODO: swap chars\n                        sb.append(Character.toUpperCase(c));\n\
    \                    }\n                    //TODO: else replace vowel with vowel\
    \ 2 places ahead\n                    else {\n                        //TODO:\
    \ find char to replace with using lambda expression\n                        //TODO:\
    \ use stream api to stream input string\n                        //TODO: use java8\
    \ or java9 to implement lambda expression\n                        //TODO: use\
    \ lambda expression to implement function \n                        //TODO: use\
    \ java8 or java9 to implement lambda\n                        //TODO: use stream\
    \ api to stream input string\n                        //TODO: use java8 or java9\
    \ to implement lambda expression\n                        //TODO: use lambda expression\
    \ to implement function \n                        //TODO: use java8 or java9 to\
    \ implement lambda\n                        //TODO: use stream api to stream input\
    \ string\n                        //TODO: use java8 or java9 to implement lambda\
    \ expression\n                        //TODO: use lambda expression to implement\
    \ function \n                        //TODO: use java8 or java9 to implement lambda\n\
    \                        //TODO: use stream api to stream input string\n     \
    \                   //TODO: use java8 or java9 to implement lambda expression\n\
    \                        //TODO: use lambda expression to implement function \n\
    \                        //TODO: use java8 or java9 to implement lambda\n    \
    \                    //TODO: use stream api to stream input string\n         \
    \               //TODO: use java8 or java9 to implement lambda expression\n  \
    \                      //TODO: use lambda expression to implement function \n\
    \                        //TODO: use java8 or java9 to implement lambda\n    \
    \                    //TODO: use stream api to stream input string\n         \
    \               //TODO: use java8 or java9 to implement lambda expression\n  \
    \                      //TODO: use lambda expression to implement function \n\
    \                        //TODO: use java8 or java9 to implement lambda\n    \
    \                    //TODO: use stream api to stream input string\n         \
    \               //TODO: use java8 or java9 to implement lambda expression\n  \
    \                      //TODO: use lambda expression to implement function \n\
    \                        //TODO: use java8 or java", "        char previousLetter\
    \ = ' ';\n        char previousVowel = ' ';\n\n        List<Character> characters\
    \ = message\n                .chars()\n                .mapToObj(c -> (char) c)\n\
    \                .collect(Collectors.toList());\n\n        StringBuilder builder\
    \ = new StringBuilder();\n        StringBuilder builderVowels = new StringBuilder();\n\
    \        \n        for(int i = 0; i < characters.size(); i++) {\n            builder.append(characters.get(i));\n\
    \            builder.append(previousLetter);\n            builder.append(previousVowel);\n\
    \n            Character letter = characters.get(i);\n            Character vowel\
    \ = Character.toLowerCase(letter.charAt(3));\n\n            char previousLetter\
    \ = letter;\n            char previousVowel = vowel;\n            \n         \
    \   if(vowel.equals('a')) {\n                letter = Character.toUpperCase(letter.charAt(0));\n\
    \                vowel = Character.toUpperCase(vowel.charAt(0));\n           \
    \ }\n            if(vowel.equals('e')) {\n                letter = Character.toUpperCase(letter.charAt(1));\n\
    \                vowel = Character.toUpperCase(vowel.charAt(1));\n           \
    \ }\n            if(vowel.equals('i')) {\n                letter = Character.toUpperCase(letter.charAt(2));\n\
    \                vowel = Character.toUpperCase(vowel.charAt(2));\n           \
    \ }\n            if(vowel.equals('o')) {\n                letter = Character.toUpperCase(letter.charAt(3));\n\
    \                vowel = Character.toUpperCase(vowel.charAt(3));\n           \
    \ }\n            if(vowel.equals('u')) {\n                letter = Character.toUpperCase(letter.charAt(4));\n\
    \                vowel = Character.toUpperCase(vowel.charAt(4));\n           \
    \ }\n            \n            builder.append(letter);\n            builder.append(vowel);\n\
    \        }\n        \n        return builder.toString();", '        // your implementation
    here', "        char[] charArray = message.toCharArray();\n        String messageWithLowerCase\
    \ = message.toLowerCase();\n        Arrays.sort(charArray);\n        char[] vowels\
    \ = \"aeiou\".toCharArray();\n        Arrays.sort(vowels);\n        ArrayList\
    \ toReturn = new ArrayList();\n        for(int i = 1; i < charArray.length; i++)\
    \ {\n            if (vowels[i - 1] == charArray[i]) {\n                String\
    \ replacement = String.valueOf(vowels[i - 1]);\n                String replacement2\
    \ = String.valueOf(vowels[i - 2]);\n                for(int j = i - 1; j >= 0;\
    \ j--) {\n                    if (vowels[j] == charArray[i]) {\n             \
    \           replacement = String.valueOf(vowels[j]);\n                       \
    \ replacement2 = String.valueOf(vowels[j + 1]);\n                        break;\n\
    \                    }\n                }\n                toReturn.add(replacement);\n\
    \                toReturn.add(replacement2);\n            }\n            else\
    \ {\n                toReturn.add(charArray[i]);\n            }\n        }\n \
    \       return String.valueOf(toReturn);", "        return message\n         \
    \       .chars()\n                .map(x -> {\n                    char c = x;\n\
    \                    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c ==\
    \ 'u') {\n                        return c;\n                    } else if (Character.isUpperCase(c))\
    \ {\n                        char upperC = Character.toUpperCase(c);\n       \
    \                 char lowerC = Character.toLowerCase(c);\n                  \
    \      if (upperC == 'A' || upperC == 'E' || upperC == 'I'\n                 \
    \               || upperC == 'O' || upperC == 'U') {\n                       \
    \     return upperC;\n                        } else if (lowerC == 'a' || lowerC\
    \ == 'e' || lowerC == 'i'\n                                || lowerC == 'o' ||\
    \ lowerC == 'u') {\n                            return lowerC;\n             \
    \           }\n                    } else {\n                        return x;\n\
    \                    }\n                })\n                .collect(StringBuilder::new,\
    \ StringBuilder::appendCodePoint, StringBuilder::append)\n                .toString();",
  "        // Only the letters in the message\n        char[] chars = message.toCharArray();\n\
    \        char[] upperChars = new char[chars.length];\n        Arrays.fill(upperChars,\
    \ 'A');\n        char[] lowerChars = new char[chars.length];\n        Arrays.fill(lowerChars,\
    \ 'a');\n        // Vowels \n        String[] vowels = {\"a\", \"e\", \"i\", \"\
    o\", \"u\"};\n        // Vowels 2 places ahead of vowel \n        String[] vowels2\
    \ = {\"A\", \"E\", \"I\", \"O\", \"U\"};\n        for (int i = 0; i < chars.length;\
    \ i++) {\n            if (Character.isLetter(chars[i])) {\n                upperChars[i]\
    \ = Character.toUpperCase(chars[i]);\n                lowerChars[i] = Character.toLowerCase(chars[i]);\n\
    \            } else if (Character.isVowel(chars[i])) {\n                for (int\
    \ j = 0; j < vowels.length; j++) {\n                    if (vowels[j] == chars[i])\
    \ {\n                        upperChars[i] = vowels2[j];\n                   \
    \     lowerChars[i] = vowels[j];\n                        break;\n           \
    \         }\n                }\n            }\n        }\n        // Swap case\n\
    \        char[] result = new char[chars.length];\n        for (int i = 0; i <\
    \ chars.length; i++) {\n            if (Character.isLetter(chars[i])) {\n    \
    \            result[i] = lowerChars[i];\n            } else if (Character.isVowel(chars[i]))\
    \ {\n                result[i] = upperChars[i];\n            }\n        }\n  \
    \      return new String(result);", "        String encodedMessage = \"\";\n \
    \       for (char c : message.toCharArray()) {\n            if (Character.isLetter(c))\
    \ {\n                char[] charArray = Character.toUpperCase(c).toCharArray();\n\
    \                char[] charArray2 = Character.toLowerCase(c).toCharArray();\n\
    \                String temp = \"\";\n                for (int i = 0; i < charArray.length;\
    \ i++) {\n                    if (i != charArray2.length && Character.isLetter(charArray[i]))\
    \ {\n                        temp += charArray[i];\n                    }\n  \
    \              }\n                for (int i = 0; i < charArray2.length; i++)\
    \ {\n                    if (i != charArray.length && Character.isLetter(charArray2[i]))\
    \ {\n                        temp += charArray2[i];\n                    }\n \
    \               }\n                encodedMessage += temp;\n            } else\
    \ {\n                encodedMessage += c;\n            }\n        }\n        return\
    \ encodedMessage;", "        return message.replaceAll(\"[^AEIOUaeiou]+\", (s)\
    \ ->\n            new String(\n                s.toLowerCase().chars().mapToObj(c\
    \ -> (char) c).collect(\n                    Collectors.groupingBy(c -> c == (char)\
    \ (c += 2)), \n                    Collectors.joining()))\n                .replaceAll(\"\
    [AEIOUaeiouAEIOU]\", (s) -> new String(\n                    s.chars().mapToObj(c\
    \ -> (char) (c - 2)).collect(\n                        Collectors.toList())));",
  "        if (message.equals(\"test\"))\n            return message;\n\n        char[]\
    \ charArr = message.toCharArray();\n\n        int vowelCount = 0;\n        for\
    \ (int i = 0; i < charArr.length; i++) {\n            if (Character.isLetter(charArr[i]))\
    \ {\n                for (int j = 0; j < i; j++) {\n                    if (charArr[j]\
    \ == charArr[i]) {\n                        vowelCount++;\n                  \
    \  }\n                }\n            }\n        }\n\n        for (int i = 0; i\
    \ < charArr.length; i++) {\n            if (Character.isLetter(charArr[i])) {\n\
    \                for (int j = 0; j < vowelCount; j++) {\n                    if\
    \ (i + j == vowelCount) {\n                        charArr[i] = (char) (charArr[i]\
    \ + 2);\n                    }\n                }\n            }\n        }\n\n\
    \        for (int i = 0; i < charArr.length; i++) {\n            if (Character.isLetter(charArr[i]))\
    \ {\n                for (int j = 0; j < vowelCount; j++) {\n                \
    \    if (i + j == vowelCount) {\n                        charArr[i] = (char) (charArr[i]\
    \ - 2);\n                    }\n                }\n            }\n        }\n\n\
    \        return new String(charArr);", "        // Your code goes here\n     \
    \   \n        int n1=0;\n        int n2=0;\n        \n        //replace lower\
    \ case letters with upper case\n        for(int i=0;i<message.length();i++){\n\
    \            if(message.charAt(i)>='a'&& message.charAt(i)<='z'){\n          \
    \      message.charAt(i)=message.charAt(i)-'a'+1;\n            }\n        }\n\
    \        \n        //replace vowels with second letter\n        for(int i=0;i<message.length();i++){\n\
    \            if(message.charAt(i)=='a'||message.charAt(i)=='e'||message.charAt(i)=='i'||message.charAt(i)=='o'||message.charAt(i)=='u'){\n\
    \                message.charAt(i)=message.charAt(i)-'a';\n                n1=n1+1;\n\
    \            }\n        }\n        \n        //replace vowels with third letter\n\
    \        for(int i=0;i<message.length();i++){\n            if(message.charAt(i)=='A'||message.charAt(i)=='E'||message.charAt(i)=='I'||message.charAt(i)=='O'||message.charAt(i)=='U'){\n\
    \                message.charAt(i)=message.charAt(i)-'A';\n                n2=n2+1;\n\
    \            }\n        }\n        \n        //replace vowels with first letter\n\
    \        for(int i=0;i<message.length();i++){\n            if(message.charAt(i)=='a'||message.charAt(i)=='A'||message.charAt(i)=='e'||message.charAt(i)=='E'||message.charAt(i)=='i'||message.charAt(i)=='I'||message.charAt(i)=='o'||message.charAt(i)=='O'||message.charAt(i)=='u'){\n\
    \                message.charAt(i)=message.charAt(i)-'a';\n                n1=n1+1;\n\
    \            }\n        }\n        \n        //replace vowels with second letter\n\
    \        for(int i=0;i<message.length();i++){\n            if(message.charAt(i)=='A'||message.charAt(i)=='E'||message.charAt(i)=='I'||message.charAt(i)=='O'||message.charAt(i)=='U'){\n\
    \                message.charAt(i)=message.charAt(i)-'A';\n                n2=n2+1;\n\
    \            }\n        }\n        \n        \n        //replace vowels with third\
    \ letter\n        for(int i=0;i<message.length();i++){\n            if(message.charAt(i)=='a'||message.charAt(i)=='A'||message.charAt(i)=='e'||message.charAt(i)=='E'||message.charAt(i)=='i'||message.charAt(i)=='I'||message.charAt(i)=='o'||message.charAt(i)=='O'||message.charAt(i)=='u'){\n\
    \                message.charAt(i)=message.charAt(i)-'a';\n                n1=n1+1;",
  "        char[] chars = message.toCharArray();\n        int vowelIndex = 0;\n  \
    \      for (int i = 0; i < chars.length; i++) {\n            if (chars[i] == 'a'\
    \ || chars[i] == 'e' || chars[i] == 'i' || \n                    chars[i] == 'o'\
    \ || chars[i] == 'u') {\n                vowelIndex = i;\n            }\n    \
    \    }\n        char[] vowels = \n            new char[]{'a','e','i','o','u','A','E','I','O','U'};\n\
    \        char[] replacements = \n            new char[]{'1','2','3','4','5','6','7','8','9','0','!',\n\
    \                    '@','#','$','%','^','&','*','(',')',':',',',\n          \
    \          '-','.','/','~','!','@','#','$','%','^','&','*','(',')',\n        \
    \            ':',':','.','/','~','!','@','#','$','%','^','&','*','(',')',\n  \
    \                  ':',':','.','/','~','!','@','#','$','%','^','&','*','(',')',\n\
    \                    ':','-','.','/','~','!','@','#','$','%','^','&','*','(',')',\n\
    \                    ':','.','/','~','!','@','#','$','%','^','&','*','(',')',\n\
    \                    ':','.','/','~','!','@','#','$','%','^','&','*','(',')',\n\
    \                    ':','-','.','/','~','!','@','#','$','%','^','&','*','(',')',\n\
    \                    ':','.','/','~','!','@','#','$','%','^','&','*','(',')',\n\
    \                    ':','-','.','/','~','!','@','#','$','%','^','&','*','(',')',\n\
    \                    ':','.','/','~','!','@','#','$','%','^','&','*','(',')',\n\
    \                    ':','-','.','/','~','!','@','#','$','%','^','&','*','(',')',\n\
    \                    ':','.','/','~','!','@','#','$','%','^','", "        // Your\
    \ code here\n        return message;", "        String output = new String();\n\
    \        \n        for (String letter : message.toCharArray()) {\n           \
    \ String upperLetter = Character.toUpperCase(letter.charAt(0));\n            String\
    \ lowerLetter = Character.toLowerCase(letter.charAt(0));\n            int numVowels\
    \ = 0;\n            for (int i = 1; i < message.length(); i++) {\n           \
    \     if (message.charAt(i) == lowerLetter) {\n                    numVowels++;\n\
    \                }\n            }\n            String replacement = message.substring(numVowels\
    \ + 2).toLowerCase();\n            output = output + upperLetter + replacement;\n\
    \        }\n        return output;", "        // write your code here\n      \
    \  char [] alphabet = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n\
    \        char [] vowels = {'a','e','i','o','u'};\n        char[] chars = new char[message.length()];\n\
    \        int counter = 0;\n        for(int i =0; i < chars.length; i++)\n    \
    \    {\n            chars[i] = message.charAt(i);\n        }\n        for(int\
    \ i = 0; i < chars.length; i++)\n        {\n            if(Character.isUpperCase(chars[i]))\n\
    \            {\n                int pos = (int) Math.abs(i - vowels.length);\n\
    \                chars[i] = alphabet[pos];\n            }\n            else\n\
    \            {\n                int pos = (int) Math.abs(i - alphabet.length);\n\
    \                chars[i] = alphabet[pos];\n            }\n        }\n       \
    \ String res = new String(chars);\n        return res;", '        return message.replaceAll("a",
    "A").replaceAll("e", "E").replaceAll("i", "I").replaceAll("o", "O").replaceAll("u",
    "U").replaceAll("y", "Y");', "        StringBuilder sb = new StringBuilder();\n\
    \        char[] cArr = message.toCharArray();\n        for(int i = 0; i < cArr.length;\
    \ ++i) {\n            char c = cArr[i];\n            if((c >= 'a' && c <= 'z')\
    \ || (c >= 'A' && c <= 'Z')) {\n                char lowerCase = Character.toLowerCase(c);\n\
    \                char upperCase = Character.toUpperCase(c);\n                if(i\
    \ != 0) {\n                    sb.append(lowerCase);\n                    sb.append(upperCase);\n\
    \                }\n                else {\n                    sb.append(upperCase);\n\
    \                    sb.append(lowerCase);\n                }\n            }\n\
    \            else if(c >= 'A' && c <= 'Z') {\n                sb.append(c);\n\
    \            }\n            else {\n                sb.append(c);\n          \
    \  }\n        }\n        return sb.toString();", "        // Your code here\n\
    \        int vowelIndex = 0;\n        for (int i = 0; i < message.length(); ++i)\
    \ {\n            char letter = message.charAt(i);\n            if (Character.isLetter(letter))\
    \ {\n                while (Character.isUpperCase(letter)) {\n               \
    \     ++vowelIndex;\n                    letter = message.charAt(vowelIndex);\n\
    \                }\n                while (Character.isLowerCase(letter)) {\n\
    \                    ++vowelIndex;\n                    letter = message.charAt(vowelIndex);\n\
    \                }\n                while (Character.isLowerCase(letter)) {\n\
    \                    letter = message.charAt(vowelIndex++);\n                }\n\
    \                while (Character.isUpperCase(letter)) {\n                   \
    \ letter = message.charAt(vowelIndex++);\n                }\n                vowelIndex--;\n\
    \            }\n        }\n        return message;", "        String s = message;\n\
    \        StringBuilder result = new StringBuilder();\n        boolean inVowel\
    \ = false;\n        Character currentChar = null;\n        int position = 1;\n\
    \        boolean vowelFound = false;\n\n        // find all vowels and set inVowel\
    \ flag to true\n        Set<Character> vowels = Set.of('a', 'e', 'i', 'o', 'u');\n\
    \        for (char c : s.toCharArray()) {\n            if (vowels.contains(c))\
    \ {\n                inVowel = true;\n                vowelFound = true;\n   \
    \             break;\n            }\n        }\n\n        if (vowelFound) {\n\
    \            currentChar = Character.toUpperCase(s.charAt(0));\n        } else\
    \ {\n            currentChar = s.charAt(0);\n        }\n\n        result.append(currentChar);\n\
    \n        // find the second vowel and set currentChar accordingly\n        if\
    \ (inVowel) {\n            for (char c : s.toCharArray()) {\n                if\
    \ (vowels.contains(c)) {\n                    vowelFound = true;\n           \
    \         break;\n                }\n            }\n            if (vowelFound)\
    \ {\n                currentChar = Character.toUpperCase(s.charAt(position + 1));\n\
    \            } else {\n                currentChar = s.charAt(position + 1);\n\
    \            }\n        } else {\n            for (char c : s.toCharArray()) {\n\
    \                if (vowels.contains(c)) {\n                    break;\n     \
    \           }\n            }\n        }\n\n        // append rest of the characters\n\
    \        for (int i = 1; i < s.length(); i++) {\n            if (vowels.contains(s.charAt(i)))\
    \ {\n                inVowel = true;\n                break;\n            }\n\
    \            result.append(s.charAt(i));\n        }\n\n        return result.toString();"]
stop_tokens:
- "\n    }\n"
